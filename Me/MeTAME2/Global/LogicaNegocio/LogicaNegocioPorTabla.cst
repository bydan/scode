<%@ Template Language="C#" TargetLanguage="C#" Description="Template de la capa de Acceso a Datos" ResponseEncoding="ASCII" %>    	
<%@ CodeTemplate Src="..\CommonCode\CommonCode.cs" Inherits="Me.CommonCode" Language="C#" TargetLanguage="C#" Description="A base class for the entities." ResponseEncoding="ASCII"  %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="NombreProgramador" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre del Programdor" %>
<%@ Property Name="Package" Type="System.String" Default="Indefinido" Category="Options" Description="Nombre de la Entidad" %>
<%@ Property Name="SchemaAuditoria" Type="System.String" Default="Auditoria" Category="Options" Description="Nombre del Programdor" %>
<%@ Property Name="TablaBase" Type="SchemaExplorer.TableSchema" EXCLUDED="true"	Category="Context"%>
<%@ Property Name="Empresa" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre de la Empresa" %>
<%@ Property Name="TablasBaseCompuestoJunction" Type="SchemaExplorer.TableSchemaCollection" Category="Context"%>
<%@ Property Name="TablasBaseCompuestoDetalle" Type="SchemaExplorer.TableSchemaCollection" 	Category="Context"%>
<%@ Property Name="TiposGeneracion" Type="System.String" Default=" " Category="Options" Description="Nombre de la Entidad" %>

<script runat="template">

public String GetAddClassesRelacionadas() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
				
				/*
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
				}
				else
				{
					strTablaClaseRelacionada+="\r\n\tprivate ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;";
				}
				*/
			}
								
			return strTablaClaseRelacionada; 
		}

public String GetAddClassesRelacionadasInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				//strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
				
				strTablaClaseRelacionada+="\r\n\t\t\t\tfor(Classe clas:classesP)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));";
				strTablaClaseRelacionada+="\r\n\t\t\t\t\t}\r\n";
				strTablaClaseRelacionada+="\t\t\t\t}\r\n";
				/*
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
				}
				else
				{
					strTablaClaseRelacionada+="\r\n\tprivate ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;";
				}
				*/
			}
								
			return strTablaClaseRelacionada; 
		}

public String GetAddClassesRelacionadasExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			bool blnExiste=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				//strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
				if(!blnExiste)
				{
					blnExiste=true;
				}
				
				strTablaClaseRelacionada+="\r\n\t\t\t\texiste=false;\r\n";		
				strTablaClaseRelacionada+="\r\n\t\t\t\tfor(Classe clas:classesP)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t\texiste=true;\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t\tbreak;\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t}\r\n";
				strTablaClaseRelacionada+="\t\t\t\t}\r\n";
						
				strTablaClaseRelacionada+="\r\n\t\t\t\tif(!existe)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));";
				strTablaClaseRelacionada+="\r\n\t\t\t\t}\r\n";
			}
			
			if(blnExiste)
			{
				strTablaClaseRelacionada="\r\n\t\t\t\tBoolean existe=false;\r\n"+strTablaClaseRelacionada;			
			}
			
			return strTablaClaseRelacionada; 
		}
		
public String GetAddClassesForeignKey()
	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
										
					if(columnSchema.IsForeignKeyMember)
					{
						tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						strClassesForeignKey+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+".class));";
					}
				}
				
		return strClassesForeignKey;
	}

public String GetAddClassesForeignKeyInclude()
	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
										
					if(columnSchema.IsForeignKeyMember)
					{
						tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						
						strClassesForeignKey+="\r\n\t\t\t\tfor(Classe clas:classesP)";
						strClassesForeignKey+=" {\r\n";
						strClassesForeignKey+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchema.ToString())+".class)) ";
						strClassesForeignKey+=" {\r\n";
						strClassesForeignKey+="\t\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+".class));";
						strClassesForeignKey+="\r\n\t\t\t\t\t}\r\n";
						strClassesForeignKey+="\t\t\t\t}\r\n";
					}
				}
				
		return strClassesForeignKey;
	}

public String GetAddClassesForeignKeyExclude()
	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		bool blnExiste=false;
		
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
										
					if(columnSchema.IsForeignKeyMember)
					{
						if(!blnExiste)
						{
							blnExiste=true;
						}
						
						tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						
						strClassesForeignKey+="\r\n\t\t\t\texiste=false;\r\n";
						strClassesForeignKey+="\r\n\t\t\t\tfor(Classe clas:classesP)";
						strClassesForeignKey+=" {\r\n";
						strClassesForeignKey+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchema.ToString())+".class))";
						strClassesForeignKey+=" {\r\n";
						strClassesForeignKey+="\t\t\t\t\t\texiste=true;\r\n";
						strClassesForeignKey+="\t\t\t\t\t\tbreak;\r\n";
						strClassesForeignKey+="\t\t\t\t\t}\r\n";
						strClassesForeignKey+="\t\t\t\t}\r\n";
						
						strClassesForeignKey+="\r\n\t\t\t\tif(!existe)";
						strClassesForeignKey+=" {\r\n";
						strClassesForeignKey+="\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+".class));";
						strClassesForeignKey+="\r\n\t\t\t\t}\r\n";
					}
				}
		
		if(blnExiste)
		{
			strClassesForeignKey="\r\n\t\t\t\tBoolean existe=false;\r\n"+strClassesForeignKey;			
		}
		
		return strClassesForeignKey;
	}
	
public String GetClassClasesRelacionadasForeigKeys(TableSchema tableSchema) 
		{
			String strTablaClaseRelacionada=string.Empty;
										
										
			foreach(ColumnSchema columnSchema in tableSchema.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					strTablaClaseRelacionada+="\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ ".class));\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}
		
public String GetXmlFuncionesClasesCompuestos() 
{
	String strFuncion=string.Empty;
	
	if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
	{
				
		for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
		{
			strFuncion+="\r\n\r\n\tpublic String getXml"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s()throws Exception";
			strFuncion+=" {";
			strFuncion+="\r\n\t\tStringBuffer xml = new StringBuffer();";
			strFuncion+="\r\n\t\tArrayList<Classe> classes=new ArrayList<Classe>();\r\n";
			strFuncion+="\r\n\t\tInteger "+strId+"Temporal=-1;\r\n";
			
			strFuncion+="\r\n\t\t"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"Logic "+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"Logic =new "+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"Logic();";
			strFuncion+="\r\n\t\t"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"Logic "+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"Logic =new "+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"Logic();\r\n\r\n";
			
			strFuncion+="\r\n\t\t"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+" "+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"=new "+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"();";
			strFuncion+="\r\n\t\t"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+" "+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"=new "+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"();\r\n\r\n";
			
			strFuncion+=GetClassClasesRelacionadasForeigKeys(TablasBaseCompuestoJunction[i]);
			
			strFuncion+=GetClassClasesRelacionadasForeigKeys(TablasBaseCompuestoDetalle[i]);
				
			strFuncion+="\r\n\t\ttry"; 
			strFuncion+=" {";
			strFuncion+="\r\n\t\t\tconnexion=Connexion.getNewConnexion();";
			
			strFuncion+="\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString()) +"Logic.setConnexion(connexion);";
			strFuncion+="\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"Logic.setConnexion(connexion);";
			
			strFuncion+="\r\n\t\t\txml.append(\"<?xml version=\\\"1.0\\\"?>\");";
			strFuncion+="\r\n\t\t\txml.append(\"<"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+" generated=\\\"\"+System.currentTimeMillis()+\"\\\">\");";	    
				
			strFuncion+="\r\n\r\n\t\t\t\tfor ("+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+" "+ GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+":"+ GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s )"; 
			strFuncion+=" {";
			
			strFuncion+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"="+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+".get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"();";
			strFuncion+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"="+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+".get"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"();\r\n\r\n";
			
			strFuncion+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"Logic.deepLoad("+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+", false, DeepLoadType.INCLUDE, classes);\r\n";
						
				for (int j = 0; j < TablasBaseCompuestoJunction[i].Columns.Count; j++)
				{ 
					strFuncion+=GetXmlColumnaC(TablasBaseCompuestoJunction[i].Columns[j],TablasBaseCompuestoJunction[i].ToString(),true); 	
				} 	     	
				strFuncion+="\r\n\r\n";
				for (int j = 0; j < TablasBaseCompuestoDetalle[i].Columns.Count; j++)
				{ 
					strFuncion+=GetXmlColumnaCompuestoC(TablasBaseCompuestoDetalle[i].Columns[j],TablasBaseCompuestoDetalle[i].ToString()); 	
				} 	
				
			strFuncion+="\r\n\r\n\t\t\t\t\txml.append(\"</item>\");";			
			strFuncion+="\r\n\t\t\t\t}\r\n";
					
			strFuncion+="\r\n\t\t\txml.append(\"</"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+">\");";
					
			strFuncion+="\r\n\t\t\tconnexion.getConnection().commit();";
			strFuncion+="\r\n\t\t}"; 
			strFuncion+=" catch(Exception e)"; 
			strFuncion+="{";
			strFuncion+="\r\n\t\t\tconnexion.getConnection().rollback();\r\n\t\t\tFunciones.logShowExceptionMessages(e);";
			strFuncion+="\r\n\t\t\tthrow e;";
			strFuncion+="\r\n\t\t}";
			strFuncion+=" finally";
			strFuncion+=" {";
			strFuncion+="\r\n\t\t\tconnexion.getConnection().close();";
			strFuncion+="\r\n\t\t}";
				
			strFuncion+="\r\n\t\t\treturn Funciones.validarXml(xml.toString(),"+GetNombreClaseC(TablaBase.ToString())+"DataAccess.TABLENAME);";
				
			strFuncion+="\r\n\t}";
		}
	}
	
	return strFuncion;
}


public String GetInicializacionVariableClasesCompuestos() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					
				strInitFuncion+="\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s= new "+strTypeNewCollection+"<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+">"+strTypeNewCollectionEnd+";" ;																
																																																		
				}													
			}
								
			return strInitFuncion; 
		}
		
/*		
public ArrayList<PerfilOpcionOpcionCompuesto> getPerfilopcionopcioncompuestos() 
	{
		return perfilopcionopcioncompuestos;
	}



	public void setPerfilopcionopcioncompuestos(ArrayList<PerfilOpcionOpcionCompuesto> perfilopcionopcioncompuestos) 
	{
		this.perfilopcionopcioncompuestos = perfilopcionopcioncompuestos;
	}
*/		
public String GetDefinicionVariableClasesCompuestos() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					
					strInitFuncion+="\r\n\tprivate "+""+strTypeCollection+"<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> ";
					strInitFuncion+=GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";																
					/*																																			
					strInitFuncion+="\r\n\r\n\tpublic ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s()"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\treturn "+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";	
					
					strInitFuncion+="\r\n\r\n\tpublic void set"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s(ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> "+GetNombreClaseObjetoC(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjetoC(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s)"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\tthis."+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s="+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";
					*/
					
				}													
			}
								
			return strInitFuncion; 
		}

public String GetDefinicionVariableClasesCompuestosGetSet() 
	{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					/*
					strInitFuncion+="\r\n\tprivate "+"ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> ";
					strInitFuncion+=GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";																
					*/
																																								
					strInitFuncion+="\r\n\r\n\tpublic "+strTypeCollection+"<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s()"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\treturn "+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";	
					
					strInitFuncion+="\r\n\r\n\tpublic void set"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s("+strTypeCollection+"<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> "+GetNombreClaseObjetoC(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjetoC(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s)"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\tthis."+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s="+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";
					
					
				}													
			}
								
			return strInitFuncion; 
	}
		
public String GetIndicesTablasClasesCompuestos() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			
			String strParametroCompuesto="";
			String strParametroCompuesto2="";
			String strParametroCompuestoFinal2="\r\n\t\t\tqueryWhereSelectParameters2.addParameter(parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"2);";

			String strParametroCompuestoForTodos="\");";
			String strParametroCompuestoForIndices="AND\");";
			String strParametroCompuestoFinal="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+");";


			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					
					strParametroCompuesto2="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"2= new ParameterSelectionGeneral();";
					strParametroCompuesto2+="\r\n\t\t\tparameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"2.setParameterSelectionGeneralEqual(ParameterType.LONG,"+strId+GetNombreClase(TablaBase.ToString())+".toString(),"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"DataAccess.getColumnName"+strId+GetNombreClase(TablaBase.ToString())+"(),ParameterTypeOperator.NONE,\"\",\"\");";
					
					strParametroCompuesto="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"= new ParameterSelectionGeneral();";
					strParametroCompuesto+="\r\n\t\t\tparameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+".setParameterSelectionGeneralEqual(ParameterType.LONG,"+strId+GetNombreClase(TablaBase.ToString())+".toString(),"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"DataAccess.getColumnName"+strId+GetNombreClase(TablaBase.ToString())+"(),ParameterTypeOperator.NONE,\"\",\"";
					
					strInitFuncion+="\r\n\tpublic  void  get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"sTodos(String sFinalQuery,Long "+strId+GetNombreClase(TablaBase.ToString())+")throws SQLException,Exception"; 
					strInitFuncion+=" {\r\n\t\t";
					strInitFuncion+="\r\n\t\ttry {\r\n\t\t\tconnexion=Connexion.getNewConnexion();";		
					strInitFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");";
					strInitFuncion+=strParametroCompuesto+strParametroCompuestoForTodos+strParametroCompuestoFinal;
					strInitFuncion+="\r\n\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);\r\n\t\t\t";
					strInitFuncion+=GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s="+GetNombreClaseObjeto(TablaBase.ToString())+"DataAccess.getEntities" +strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"(connexion,queryWhereSelectParameters,queryWhereSelectParameters);";												
					strInitFuncion+="\r\n\t\t\tconnexion.getConnection().commit();\r\n\r\n\t\t} catch(SQLException e) {\r\n\t\t\tconnexion.getConnection().rollback();";
					strInitFuncion+="\r\n\t\t\tthrow e;\r\n\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.logShowExceptionMessages(e);\r\n\t\t\tconnexion.getConnection().rollback();\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tconnexion.getConnection().close();";	
					strInitFuncion+="\r\n\t\t}\r\n\t}\r\n";
					
					
					foreach(IndexSchema indexSchema in TablasBaseCompuestoDetalle[i].Indexes)
					{
						if(!indexSchema.IsPrimaryKey)
						{
							
							
							strParametersFuncion="";
							strParametersNameFuncion="";
						
							if(indexSchema.IsUnique)
							{
								continue;
								/*
								strInitFuncion+="\r\n\tpublic void "+"Get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+indexSchema.Name+"(";
								strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconnexion=Connexion.getNewConnexion();\r\n";
								strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");";		
								strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
								strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.getConnection().commit();";
								strEndFuncion="\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tconnexion.getConnection().close();\r\n\t\t}\r\n\t}\r\n";
								*/
							}
							else
							{
								
								if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
								{
									strInitFuncion+="\r\n\tpublic void "+"get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s"+indexSchema.Name+"(String sFinalQuery,Long "+strId+GetNombreClase(TablaBase.ToString())+",";
								}
								else
								{
									strInitFuncion+="\r\n\tpublic void "+"get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s"+indexSchema.Name+"(";
								}
								
								strBodyFuncion="\r\n\t\ttry {\r\n\t\t\tconnexion=Connexion.getNewConnexion();\r\n";
								
								if(indexSchema.Name.Contains("Busqueda"))
								{
									strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
									strBodyFuncion+=strParametroCompuesto+strParametroCompuestoForIndices+strParametroCompuestoFinal;
									strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);";	
									
									strBodyFuncion+="\r\n\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters2=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
									strBodyFuncion+="\r\n\r\n\t\t\t"+strParametroCompuesto2;
									strBodyFuncion+=strParametroCompuestoFinal2;
									
											
								}
								else
								{
									strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
									strBodyFuncion+=strParametroCompuesto+strParametroCompuestoForIndices+strParametroCompuestoFinal;
									
									strBodyFuncion+="\r\n\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters2=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
									strBodyFuncion+="\r\n\r\n\t\t\t"+strParametroCompuesto2;
									strBodyFuncion+=strParametroCompuestoFinal2;
								}
								
								strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntities"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"(connexion,queryWhereSelectParameters,queryWhereSelectParameters2);";
								strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.getConnection().commit();\r\n";
								strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.logShowExceptionMessages(e);\r\n\t\t\tthrow e;\r\n\r\n\t\t} finally {\r\n\t\t\tconnexion.getConnection().close();\r\n\t\t}\r\n\t}\r\n";
							
							}	
							int count=1;	
							strParametersFuncion="";
							strParametersNameFuncion="";	
							strParameterSelection="";
							
							bool esUnico=false;
							
							
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
							{
								
								
								
									if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
									{
										strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
										strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								
										if(indexSchema.IsUnique)
										{
											esUnico=true;
										}						
									
										if(!count.Equals(indexSchema.MemberColumns.Count))
										{
											strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,true);
										}
										else
										{
											strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,true);
										}
									
										if(!indexSchema.MemberColumns.Count.Equals(count))
										{					
											strParametersFuncion+=",";
											strParametersNameFuncion+=",";	
										}
									}
									else
									{
										if(!indexSchema.Name.Contains("BusquedaRango"))
										{
											strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
											strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
										}
										else
										{
											strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
											strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
											
											strParametersFuncion+=",";
											strParametersNameFuncion+=",";	
											
											strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
											strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									
										}
										strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
										break;
									}
									
								count++;
							}
							
							strInitFuncion+=strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+" ";																																			
						}
					}
				}													
			}
								
			return strInitFuncion; 
		}

public String GetMaintenanceTablasClasesRelacionadas() 
		{
			String strTablaClaseRelacionada="";
			String strTablaClaseRelacionada3="";
			String strFuncionInit="\r\n\tpublic void save"+GetNombreClase(TablaBase.ToString())+"Relaciones(Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp,"+GetNombreClase(TablaBase.ToString()) +" "+GetNombreClaseObjetoC(TablaBase.ToString());
			String strFuncionMiddle=")throws SQLException,Exception {";
			strFuncionMiddle+="\r\n\t\ttry {\r\n\t\t\tthis.getNewConnexionToDeep();\r\n\t";
			String strFuncionEnd="\r\n\r\n\t\t\tconnexion.getConnection().commit();\r\n\r\n\t\t} catch(SQLException e) {\r\n\t\t\tconnexion.getConnection().rollback();\r\n\t\t\tFunciones.logShowExceptionMessages(e);\r\n\t\t\tthrow e;\r\n\r\n\t\t} catch(Exception e) {\r\n\t\t\tconnexion.getConnection().rollback();\r\n\t\t\tFunciones.logShowExceptionMessages(e);\r\n\t\t\tthrow e;\r\n\r\n\t\t} finally {\r\n\t\t\tthis.closeNewConnexionToDeep();\r\n\t\t}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+=","+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					strTablaClaseRelacionada+=","+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
				}
			}
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada3+=","+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					strTablaClaseRelacionada3+=","+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
				}
			}
			
			String strTablaClaseRelacionada2="";
			strTablaClaseRelacionada2+="\r\n\t\t\tthis.set"+GetNombreClaseC(TablaBase.ToString())+"("+GetNombreClaseObjetoC(TablaBase.ToString()) +");";
			
			strTablaClaseRelacionada2+="\r\n\r\n\t\t\tif(("+GetNombreClaseObjetoC(TablaBase.ToString())+".getIsNew()||"+GetNombreClaseObjetoC(TablaBase.ToString())+".getIsChanged())&&!"+GetNombreClaseObjetoC(TablaBase.ToString())+".getIsDeleted()"+")";
			strTablaClaseRelacionada2+=" {";
			strTablaClaseRelacionada2+="\r\n\t\t\t\tthis.save"+GetNombreClaseC(TablaBase.ToString())+"(idUsuario,isUsuario,sHostName,sHostIp);";
			strTablaClaseRelacionada2+="\r\n\t\t\t\tthis.save"+GetNombreClaseC(TablaBase.ToString())+"RelacionesDetalles(idUsuario,isUsuario,sHostName,sHostIp"+strTablaClaseRelacionada3+");";
			strTablaClaseRelacionada2+="\r\n\r\n\t\t\t}";
			strTablaClaseRelacionada2+=" else if("+GetNombreClaseObjetoC(TablaBase.ToString())+".getIsDeleted())";
			strTablaClaseRelacionada2+=" {";
			strTablaClaseRelacionada2+="\r\n\t\t\t\tthis.save"+GetNombreClaseC(TablaBase.ToString())+"RelacionesDetalles(idUsuario,isUsuario,sHostName,sHostIp"+strTablaClaseRelacionada3+");";
			strTablaClaseRelacionada2+="\r\n\t\t\t\tthis.save"+GetNombreClaseC(TablaBase.ToString())+"(idUsuario,isUsuario,sHostName,sHostIp);";
			strTablaClaseRelacionada2+="\r\n\t\t\t}";
			
			strTablaClaseRelacionada=strFuncionInit+strTablaClaseRelacionada+strFuncionMiddle+strTablaClaseRelacionada2+strFuncionEnd;
			return strTablaClaseRelacionada; 
		}
		
public String GetMaintenanceTablasClasesRelacionadasDetalles() 
		{
			String strTablaClaseRelacionada="";
			String strFuncionInit="\r\n\tprivate void save"+GetNombreClase(TablaBase.ToString())+"RelacionesDetalles(Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp";
			String strFuncionMiddle=")throws Exception {\r\n";
			strFuncionMiddle+="\t\ttry {\r\n\t";
			String strFuncionEnd="\r\n\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.logShowExceptionMessages(e);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+=","+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					strTablaClaseRelacionada+=","+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
				}
			}
			
			String strTablaClaseRelacionada2="";
			
			bool blnExisteDetalles=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					blnExisteDetalles=true;
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +"Logic=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic();";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+");";
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\tif("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"()!=null) {";										
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"().set"+strIdGetSet+"(id"+GetNombreClaseC(TablaBase.ToString())+"Actual);";
					strTablaClaseRelacionada2+="\r\n\t\t\t}\r\n";
					
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.setConnexion(this.getConnexion());";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.save"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"(idUsuario,isUsuario,sHostName,sHostIp);";					
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					blnExisteDetalles=true;
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +"Logic=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic();";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"s("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s);";
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+" "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"s()) {";					
					strTablaClaseRelacionada2+="\r\n\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +".setField_"+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"(id"+GetNombreClaseC(TablaBase.ToString())+"Actual);";
					strTablaClaseRelacionada2+="\r\n\t\t\t}\r\n";
					
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.setConnexion(this.getConnexion());";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.save"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"s(idUsuario,isUsuario,sHostName,sHostIp);";
				}
			}
			
			if(blnExisteDetalles)
			{
				strTablaClaseRelacionada2="\r\n\t\t\tLong id"+GetNombreClaseC(TablaBase.ToString())+"Actual=this.get"+GetNombreClaseC(TablaBase.ToString())+"().get"+strIdGetSet+"();"+strTablaClaseRelacionada2;
			}
			
			strTablaClaseRelacionada=strFuncionInit+strTablaClaseRelacionada+strFuncionMiddle+strTablaClaseRelacionada2+strFuncionEnd;
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysisDeepSaveBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="get"+GetPrefijoRelacionC();
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionada+="\r\n\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysisDeepSaveBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;							
			String strInitFuncion="get"+GetPrefijoRelacionC();
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionadasave="\r\n\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {"+ strTablaClaseRelacionadasave+"\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysisDeepSaveBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;						
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFor="\r\n\t\tfor(Classe clas:clases) {";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionadasave="\r\n\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					strTablaClaseRelacionada+="\r\n\t\texiste=false;\r\n"+strInitFor;
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {"+ strTablaClaseRelacionadasave+"\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepSaveBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionada+="\r\n\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					strTablaClaseRelacionada+="\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepSaveBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;							
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();					
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionadasave="\r\n\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\t\t\t\t";
				
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {"+ strTablaClaseRelacionadasave+strTablaClaseRelacionadaLogicisDeepSave+"\r\n\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysNoisDeepSaveBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;	
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			String strTablaClaseRelacionadaLogic=string.Empty;
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();	
			String strInitFor="\r\n\t\tfor(Classe clas:clases) {";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionadasave="\r\n\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
				
					strTablaClaseRelacionada+="\r\n\t\texiste=false;\r\n"+strInitFor+"\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {"+ strTablaClaseRelacionadasave+strTablaClaseRelacionadaLogicisDeepSave+"\t\t}";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}	
		
public String SetClasesRelacionadasForeigKeysisDeepLoadBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="set"+GetPrefijoRelacionC();
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysisDeepLoadBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;							
			String strInitFuncion="set"+GetPrefijoRelacionC();
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionadaReturn="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n"+ strTablaClaseRelacionadaReturn+"\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysisDeepLoadBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;							
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFor="\r\n\t\tfor(Classe clas:clases)\r\n\t\t{";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionadaReturn="\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\r\n\t\texiste=false;\r\n"+strInitFor;
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n"+ strTablaClaseRelacionadaReturn+"\t\t}";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepLoadBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepLoadBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;	
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();					
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionadaReturn="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\t\t\t\t";
				
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n"+ strTablaClaseRelacionadaReturn+strTablaClaseRelacionadaLogicisDeepSave+"\r\n\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysNoisDeepLoadBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;		
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();
			String strInitFor="\r\n\t\tfor(Classe clas:clases)\r\n\t\t{";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionadaReturn="\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
				
					strTablaClaseRelacionada+="\r\n\r\n\t\texiste=false;\r\n\r\n"+strInitFor+"\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n"+ strTablaClaseRelacionadaReturn+strTablaClaseRelacionadaLogicisDeepSave+"\t\t}";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}	

public bool ExisteClasesRelacionadasForeigKeys() 
		{
			bool existe= false;
										
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					 existe= true;
				}
			}
								
			return existe; 
		}

public String GetClassClasesRelacionadasForeigKeys() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
										
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					strTablaClaseRelacionada+="classes.add(new Classe("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ ".class));\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String GetIndicesTablasClasesisDeepSave() 
		{
			String strSufijoRelacionRecursivo="";
			bool existeClaseForeign=false;
			bool existeClaseRelacionada=false;
			
			
			String strInit="\r\n"+GetNombreClaseC(TablaBase.ToString())+"DataAccess.save("+GetNombreClaseObjeto(TablaBase.ToString())+", connexion);\r\n";
												
			String strTablaClaseRelacionada2=string.Empty;
			System.Collections.Hashtable tablasRelacionadas2=GetTablasRelacionadas(TablaBase);
			String strInitNone="\r\n\tif(deepLoadType.equals(DeepLoadType.NONE)) {\r\n";
			String strInitInclude="\telse if(deepLoadType.equals(DeepLoadType.INCLUDE)) {\r\n";
			String strInitExclude="\telse if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {\r\n";
			String strInitFor="\r\n\t\tfor(Classe clas:clases) {";
			String strInitIfClass="\r\n\r\n\t\t\tif(clas.clas.equals(";
			
			String strFuncionInclude=string.Empty;
			String strFuncionExclude=string.Empty;
			
            strTablaClaseRelacionada2="\r\nelse {"+strInitNone +SetClasesRelacionadasForeigKeysNoisDeepSaveBeep();
			
			strFuncionInclude="";
			strFuncionExclude="";
			
			existeClaseForeign=ExisteClasesRelacionadasForeigKeys(); 
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				strFuncionInclude+=strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\r\n\r\n\r\n\t\texiste=false;\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n";

				existeClaseRelacionada=true;
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada2+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepSave("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),isDeep,deepLoadType,clases);\r\n";
					
					strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionInclude+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";					
					strFuncionInclude+="\r\n\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);";					
					strFuncionInclude+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepSave("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),isDeep,deepLoadType,clases);\r\n";
					
					strFuncionExclude+="\t\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
					strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";					
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);";										
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepSave("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),isDeep,deepLoadType,clases);\r\n";
		
				}
				else
				{
					if(TablaBase.Name!=collectionInfo.SecondaryTable){ strSufijoRelacionRecursivo=""; }
					else {strSufijoRelacionRecursivo="Recursivo";}
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
					//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
						strTablaClaseRelacionada2+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";					
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());\r\n";
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";				
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t}\r\n";
						
						strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());\r\n";						
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";								
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t}\r\n";
					
						strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";												
						strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t}\r\n";
					}
					else
					{
						strTablaClaseRelacionada2+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";					
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";				
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t}\r\n";
						
						strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";								
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t}\r\n";
						
						strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";												
						strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t}\r\n";
					}
				
				}
			
				strFuncionInclude+="\t\t\t}";
				strFuncionExclude+="\t\t}";
			
			
			}
			
				strFuncionInclude=strInitInclude+strInitFor+SetClasesRelacionadasForeigKeysNoisDeepSaveBeepInclude()+ strFuncionInclude+ "\r\n\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude+SetClasesRelacionadasForeigKeysNoisDeepSaveBeepExclude()+ strFuncionExclude+ "\r\n\t}\r\n}";
			
			strTablaClaseRelacionada2=strTablaClaseRelacionada2+"\t}\r\n"+strFuncionInclude+strFuncionExclude;
			
			// parte del no if isDeep
			
			
			String strInitIfFuncion=string.Empty;
			String strIfFuncion=string.Empty;
			String strInitElseFuncion=string.Empty;
			String strElseFuncion=string.Empty;
			
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion=" get"+GetPrefijoRelacionC();
			
			strInitIfFuncion=strInit+"\r\nif(!isDeep) {\r\n";
			strInitElseFuncion="\r\n}\r\nelse {\r\n";
			
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strInitFuncion="get"+GetPrefijoRelacionC();
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strInitFuncion=strInitFuncion;
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "();";
				}
				else
				{
					strInitFuncion=strInitFuncion;
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s();";
			
				}
				
			strFuncion+=GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
			}
			
			
			
			String strTablaClaseRelacionada0=string.Empty;
			System.Collections.Hashtable tablasRelacionadas0=GetTablasRelacionadas(TablaBase);
			
            strTablaClaseRelacionada0=strInitNone+ SetClasesRelacionadasForeigKeysisDeepSaveBeep();
			strFuncionInclude="";
			strFuncionExclude="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				strFuncionInclude+=strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\r\n\r\n\t\texiste=false;\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada0+="\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";
					strTablaClaseRelacionada0+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);\r\n";
					
					strFuncionInclude+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";
					strFuncionInclude+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);\r\n";
					
					strFuncionExclude+="\t\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";
					strFuncionExclude+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);\r\n";
				}
				else
				{
					if(TablaBase.Name!=collectionInfo.SecondaryTable){ strSufijoRelacionRecursivo=""; }
					else {strSufijoRelacionRecursivo="Recursivo";}
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
						//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
						strTablaClaseRelacionada0+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {";
						strTablaClaseRelacionada0+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";						
						strTablaClaseRelacionada0+="\r\n\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t}\r\n";
					
						strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";											
						strFuncionInclude+="\r\n\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t\t\t}\r\n";
					
						strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";																
						strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t\t}\r\n";
					}
					else
					{
						//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
						strTablaClaseRelacionada0+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strTablaClaseRelacionada0+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t}\r\n";
					
						strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t\t\t}\r\n";
					
						strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t\t}\r\n";
				
					}
				}
				strFuncionInclude+="\t\t\t}";
				strFuncionExclude+="\r\n\t\t}";
				
			}
			
			strFuncionInclude=strInitInclude+strInitFor+ SetClasesRelacionadasForeigKeysisDeepSaveBeepInclude()+strFuncionInclude +"\r\n\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude+ SetClasesRelacionadasForeigKeysisDeepSaveBeepExclude()+strFuncionExclude+"\r\n\t}\r\n}";
	
			
			strIfFuncion=strInitIfFuncion+strTablaClaseRelacionada0+"\t}\r\n"+strFuncionInclude+strFuncionExclude;//+"\r\n}\r\n"+strInitElseFuncion+strTablaClaseRelacionada0+strTablaClaseRelacionada2+"\r\n}\r\nelse{\r\n"+strTablaClaseRelacionada3+"\r\n}\r\n}\r\n}\r\n";					
		
			
			if(!existeClaseForeign&&!existeClaseRelacionada)
			{
				return "";
			}
			
			return strIfFuncion+strTablaClaseRelacionada2; 
		}
		
public String GetIndicesTablasClasesisDeepLoad() 
		{
			String strSufijoRelacionRecursivo="";
			bool existeClaseForeign=false;
			bool existeClaseRelacionada=false;
			
			String strTablaClaseRelacionada2=string.Empty;
			System.Collections.Hashtable tablasRelacionadas2=GetTablasRelacionadas(TablaBase);
			String strInitNone="\r\n\tif(deepLoadType.equals(DeepLoadType.NONE)) {\r\n\r\n";
			String strInitInclude="\telse if(deepLoadType.equals(DeepLoadType.INCLUDE)) {\r\n";
			String strInitExclude="\telse if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {\r\n";
			String strInitFor="\r\n\t\tfor(Classe clas:clases) {";
			String strInitIfClass="\r\n\t\t\tif(clas.clas.equals(";
			String strFuncionInclude=string.Empty;
			String strFuncionExclude=string.Empty;
			
			strFuncionInclude="";
			strFuncionExclude="";
			
            strTablaClaseRelacionada2="\r\nelse {\r\n"+strInitNone+ SetClasesRelacionadasForeigKeysNoisDeepLoadBeep();
			
			String strInitFuncion=" get"+GetPrefijoRelacionC();
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaAux=string.Empty;
			
			existeClaseForeign=ExisteClasesRelacionadasForeigKeys(); 
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				existeClaseRelacionada=true;
				strFuncionInclude+="\r\n"+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionInclude+="\t\t\t\tclas.blnActivo=false;\r\n";
				strFuncionExclude+="\r\n\r\n\t\texiste=false;\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\tclas.blnActivo=false;\r\n";
				strFuncionExclude+="\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n";
				
				strInitFuncion="set"+GetPrefijoRelacionC();
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada2+="\t\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";						
					strTablaClaseRelacionada2+="\t\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+ "(),isDeep,deepLoadType,clases);\r\n";
				
					strFuncionInclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";
					strFuncionInclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionInclude+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),isDeep,deepLoadType,clases);\r\n";
					
					strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";
					strFuncionExclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),isDeep,deepLoadType,clases);\r\n";
					
				}
				else
				{
					if(TablaBase.Name!=collectionInfo.SecondaryTable){ strSufijoRelacionRecursivo=""; }
					else {strSufijoRelacionRecursivo="Recursivo";}
					
					//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "s("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada2+="\r\n\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux;		
					strTablaClaseRelacionada2+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
					strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strTablaClaseRelacionada2+="\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepLoad("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t}\r\n";
				
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "s("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";		
					strFuncionInclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux;	
					strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
					strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionInclude+="\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepLoad("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t}\r\n";
				
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "s("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";					
					strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";
					strFuncionExclude+="\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux;	
					strFuncionExclude+="\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepLoad("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t}\r\n";
				
				}
				
				//strFuncion+="\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
				strFuncionInclude+="\t\t\t}\r\n";
				strFuncionExclude+="\t\t}";
				
			}
			
				strFuncionInclude=strInitInclude+strInitFor+ SetClasesRelacionadasForeigKeysNoisDeepLoadBeepInclude()+ strFuncionInclude +"\r\n\t\t}\r\n\t}\r\n";
				strFuncionExclude=strInitExclude+ SetClasesRelacionadasForeigKeysNoisDeepLoadBeepExclude()+ strFuncionExclude+ "\r\n\t}\r\n}";
				
			
			strTablaClaseRelacionada2=strTablaClaseRelacionada2+"\t}\r\n"+strFuncionInclude+strFuncionExclude;
			
			
			//Parte del no if del isDeep
			
			String strInitIfFuncion=string.Empty;
			String strIfFuncion=string.Empty;
			String strInitElseFuncion=string.Empty;
			String strElseFuncion=string.Empty;
			
			strFuncion=string.Empty;
			
			strTablaClaseRelacionada=string.Empty;
			strInitFuncion=" get"+GetPrefijoRelacionC();
			
			strInitIfFuncion="\r\nif(!isDeep) {\r\n";
			strInitElseFuncion="\r\nelse{\r\n";
			
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			strFuncion=strInitNone+ SetClasesRelacionadasForeigKeysisDeepLoadBeep();
			strFuncionInclude="";
			strFuncionExclude="";
		
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				strFuncionInclude+="\r\n"+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\r\n\t\texiste=false;\r\n"+strInitFor +strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n";
				
				strInitFuncion="set"+GetPrefijoRelacionC();
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));";
				}
				else
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "s("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));";
			
				}
				
			strFuncion+="\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
			strFuncionInclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n\t\t\t}\r\n";
			strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
			strFuncionExclude+= "\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n\t\t}";
			
			}
			
			strFuncionInclude=strInitInclude+strInitFor+SetClasesRelacionadasForeigKeysisDeepLoadBeepInclude() +strFuncionInclude+ "\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude +SetClasesRelacionadasForeigKeysisDeepLoadBeepExclude()+strFuncionExclude+ "\r\n\t}\r\n}";
			
			strIfFuncion=strInitIfFuncion+strFuncion+"\t}\r\n"+strFuncionInclude+strFuncionExclude; //+strInitElseFuncion+strFuncion+strTablaClaseRelacionada2+"\r\n}\r\nelse{\r\n"+strTablaClaseRelacionada3+"\r\n}\r\n}\r\n";					
			
			if(!existeClaseForeign&&!existeClaseRelacionada)
			{
				return "";
			}
			
			return strIfFuncion+strTablaClaseRelacionada2; 
		}
		
public String GetParameterSelection(ColumnSchema column,bool esUltimo,bool esUnico,bool esCompuesto) 
		{
			String strParaBusquedaString=""; 
			String strParaBusquedaCompuesto=""; 
			
			String strUpper=""; 
			
			
			if(esCompuesto)
			{
				strParaBusquedaCompuesto="Constantes.SCHEMA+\".\"+"+GetNombreClase(column.Table.ToString())+"DataAccess.TABLENAME+\".\"+";
										  
			}
			
			if(column.DataType==DbType.DateTime ||column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				if(!GetNoUpperColumnFromPropertiesC(column))
				{
					strUpper=".toUpperCase()";
				}
				
				if(!esUnico)	
				{
					strParaBusquedaString="+\"%\"";
				}
			}
			
			
			
			String strParameterSelection=String.Empty;
			strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
			
			strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralEqual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strUpper+strParaBusquedaString +","+strParaBusquedaCompuesto+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+column.Name+"(),";
			
			if(esUltimo)
			{
				strParameterSelection+="ParameterTypeOperator.NONE);";		
			}
			else
			{
				strParameterSelection+=	"ParameterTypeOperator.AND);";	
			}
			
			strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+");";
		
			return strParameterSelection;
		}
	
	public String GetParameterSelectionRango(ColumnSchema column,String strIndexName) 
		{
			String strParaBusquedaString=""; 
			
			if(column.DataType==DbType.DateTime ||column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				strParaBusquedaString="+\"%\"";
			}
			
			String strParameterSelection=String.Empty;
			
			if(!strIndexName.Contains("BusquedaRango"))
			{
				strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
				
				if(strIndexName.Contains("BusquedaMayorIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMayorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				else if(strIndexName.Contains("BusquedaMayor"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMayor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				else if(strIndexName.Contains("BusquedaMenorIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMenorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				else if(strIndexName.Contains("BusquedaMenor"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMenor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				
				strParameterSelection+="ParameterTypeOperator.NONE);";	
				
				strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+");";
			}
			else
			{
				strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"Inicial= new ParameterSelectionGeneral();";				
				if(strIndexName.Contains("BusquedaRangoIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Inicial.setParameterSelectionGeneralMayorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Inicial"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";		
				}
				else
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Inicial.setParameterSelectionGeneralMayor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Inicial"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";		
				}				
				strParameterSelection+=	"ParameterTypeOperator.AND);";	
				
				strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+"Inicial);";
				
				strParameterSelection+="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"Final= new ParameterSelectionGeneral();";
				if(strIndexName.Contains("BusquedaRangoIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Final.setParameterSelectionGeneralMenorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Final"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";				
				}
				else
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Final.setParameterSelectionGeneralMenor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Final"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";				
				}				
				strParameterSelection+="ParameterTypeOperator.NONE);";	
				
				strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+"Final);";
			}
			
						
			
		
			return strParameterSelection;
		}
		
public String GetIndicesTablasClases() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						strInitFuncion+="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
						strBodyFuncion="\r\n\t\ttry {\r\n\t\t\tconnexion=Connexion.getNewConnexion();\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");";		
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.getConnection().commit();\r\n\t\t";
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.logShowExceptionMessages(e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tconnexion.getConnection().close();\r\n\t\t}\r\n\t}\r\n";
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							strInitFuncion+="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String sFinalQuery,";
						}
						else
						{
							strInitFuncion+="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
						}
						
						strBodyFuncion="\r\n\t\ttry {\r\n\t\t\tconnexion=Connexion.getNewConnexion();\r\n";
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
							strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
						}
						
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"s="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.getConnection().commit();\r\n\t\t";
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.logShowExceptionMessages(e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tconnexion.getConnection().close();\r\n\t\t}\r\n\t}\r\n";
					
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
						
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								}						
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false);
								}
								else
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false);
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strInitFuncion+=strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";																																			
				}
			}
			
								
			return strInitFuncion; 
		}
		
		public String GetIndicesTablasClasesDeReporte() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strQueryChange=String.Empty;
			String strGetFunctionLoadRelaciones=String.Empty;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						strInitFuncion+="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
						strBodyFuncion="\r\n\t\ttry {\r\n\t\t\tconnexion=Connexion.getNewConnexion();\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");";	
						strQueryChange="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.GetQuery"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(queryWhereSelectParameters,";
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.CargarTablasRelaciones"+indexSchema.Name+"("+GetNombreClaseObjetoC(TablaBase.ToString())+");";
						strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.getConnection().commit();";
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.logShowExceptionMessages(e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tconnexion.getConnection().close();\r\n\t\t}\r\n\t}\r\n";
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							strInitFuncion+="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String sFinalQuery,";
							strQueryChange="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.getQuery"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(queryWhereSelectParameters,sFinalQuery,";
							strGetFunctionLoadRelaciones="\r\n\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.CargarTablasRelaciones"+indexSchema.Name+"("+GetNombreClaseObjetoC(TablaBase.ToString())+"s,";
						}
						else
						{
							strInitFuncion+="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
							strQueryChange="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.getQuery"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(queryWhereSelectParameters,";
							strGetFunctionLoadRelaciones="\r\n\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.CargarTablasRelaciones"+indexSchema.Name+"("+GetNombreClaseObjetoC(TablaBase.ToString())+"s,";
						}
						
						strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconnexion=Connexion.getNewConnexion();\r\n";
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
							//strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
						}
						
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"s="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+=strGetFunctionLoadRelaciones+"BYDANCODE1";
						strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.getConnection().commit();";
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.logShowExceptionMessages(e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tconnexion.getConnection().close();\r\n\t\t}\r\n\t}\r\n";
					
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
						
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								}						
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false);
								}
								else
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false);
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strInitFuncion+=strParametersFuncion+")throws Exception {"+strBodyFuncion+/*strParameterSelection+*/strQueryChange+strParametersNameFuncion+");"+strEndBodyFuncion.Replace("BYDANCODE1",strParametersNameFuncion+");")/*+strParametersNameFuncion+");"*/+strEndFuncion+"";																																			
				}
			}
			
								
			return strInitFuncion; 
		}
		
public String GetFuncionesTablasClasesRelacionadas() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public  void  get"+GetPrefijoRelacionC();
			
			String strEndFuncion="\r\n}\r\ncatch(Exception e)\r\n{\r\n;\r\n}\r\n}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "()\r\n{\r\ntry\r\n{\r\n "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"= new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"();\r\n";
					strTablaClaseRelacionada+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"="+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.Traer"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+");";
				}
				else
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()\r\n{\r\ntry\r\n{\r\n "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s= new "+ ""+strTypeNewCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+">"+strTypeNewCollectionEnd+";\r\n";
					strTablaClaseRelacionada+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s="+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.Traer"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+");";
			
				}
				
			strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n\r\n";
			}
								
			return strFuncion; 
		}
		
public String GetTablasClasesRelacionadas() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";\r\n";
				}
				else
				{
					strTablaClaseRelacionada+=""+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public  string GetAuditoriaSetAuditorias(ColumnSchema column)
{				
	String strSetEntity=string.Empty;
	

	strSetEntity="\r\n\t\t\tif(!"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreCompletoColumnaClaseC(column)+"().equals("+ GetNombreClaseObjetoC(TablaBase.ToString()) +".get" + GetNombreClaseC(TablaBase.ToString())  +"Original().get"+ GetNombreCompletoColumnaClaseC(column) +"()))\r\n\t\t\t{\r\n";
	strSetEntity+="\t\t\t\tauditoria= new Auditoria();\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strTabla("+GetNombreClaseC(TablaBase.ToString())+"DataAccess.TABLENAME);\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strIdtabla("+ GetNombreClaseObjetoC(TablaBase.ToString()) +".getId().toString());\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strCampo("+ GetNombreClaseC(TablaBase.ToString())+"DataAccess.getColumnName"+ column.Name+"());\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strValoranterior("+ GetNombreClaseObjetoC(TablaBase.ToString())+ ".get"+ GetNombreClaseC(TablaBase.ToString()) +"Original().get"+ GetNombreCompletoColumnaClaseC(column)+ "()"+ GetTipoColumnaToString(column)+ " );\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strValoractual("+ GetNombreClaseObjetoC(TablaBase.ToString())+ ".get"+ GetNombreCompletoColumnaClaseC(column)+ "()"+ GetTipoColumnaToString(column)+ ");\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strAccion(strAccion);\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strFecha(strFecha);\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strUsuario(usuarioActual.getId().toString()+\":\"+ usuarioActual.getField_strLogin());\r\n";
	strSetEntity+="\t\t\t\tauditorias.add(auditoria);\r\n\t\t\t}";
	
	return strSetEntity;
}

public static string GetSetEntityColumna(ColumnSchema column,String table,bool conVersionRow)
{				
	String strSetEntity=string.Empty;
	
	if(conVersionRow)
	{
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)||column.Name.Equals(strIsExpired))
		{
			return strSetEntity;
		}
	}
	else
	{
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)||column.Name.Equals(strIsExpired)||column.Name.Equals(strVersionRow))
		{
			return strSetEntity;
		}
	}
	//usuario.setClave(strClave);
	String strEntityInit=GetNombreClaseObjetoC(table)+".set"+GetNombreCompletoColumnaClaseC(column)+"(";
	String strEntityMiddle=GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
	String strEntityFinal=");";
   strSetEntity=strEntityInit+strEntityMiddle+strEntityFinal;
	
	return strSetEntity;
}

public string GetParametroFuncionNuevoClase(ColumnSchema column)
{		String strParamtro=string.Empty;	
		
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strVersionRow))
		{
			return strParamtro;
		}
		strParamtro=GetTipoColumnaClaseC(column)+" "+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
		return strParamtro;
}

public string GetParametroFuncionActualizarClase(ColumnSchema column)
{		String strParamtro=string.Empty;	

		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
		{
			return strParamtro;
		}
		if(!column.Name.Equals(strId))
		{
		strParamtro=GetTipoColumnaClaseC(column)+" "+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);		
		}
		else
		{
		strParamtro=GetTipoColumnaClaseC(column)+" "+strId;			
		}
		return strParamtro;
}

public string GetNombreClase(string strTablaBase)
{
		return GetNombreClaseC(strTablaBase);
}

public string GetNombreClaseObjeto(string strTablaBase)
{
		return GetNombreClaseObjetoC(strTablaBase);
}

public String getClassesSetAddTablasRelacionadas() 
{
			String strTablaClaseRelacionada="";	
			TableSchema tablaRelacionadaObjetivo;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);

			
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				else
				{
					continue;
				}
				
				if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo))
				{
					//continue;
				}
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany||collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+="\r\n\t\t\tclasses.add(new Classe("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+".class));";									
				}				
			}
			
			return strTablaClaseRelacionada; 
}

public String GetForTablasRelacionadasForSetdelete() 
{
			String strTablaClaseRelacionada="";	
			TableSchema tablaRelacionadaObjetivo;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);

			
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				else
				{
					continue;
				}
				
				if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo))
				{
					//continue;
				}
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany||collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
						strTablaClaseRelacionada+="\r\n\t\t\tfor("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+" "+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s())";
						strTablaClaseRelacionada+="\r\n\t\t\t{";
						strTablaClaseRelacionada+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+".setIsDeleted(true);";
						strTablaClaseRelacionada+="\r\n\t\t\t}\r\n";
					}
					else
					{
						
						strTablaClaseRelacionada+="\r\n\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"()!=null)";
						strTablaClaseRelacionada+="\r\n\t\t\t{";
						strTablaClaseRelacionada+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"().setIsDeleted(true);";
						strTablaClaseRelacionada+="\r\n\t\t\t}\r\n";
					}
				}				
			}
			
			return strTablaClaseRelacionada; 
}

</script>
<%=GetByDanLicence()%>

package <%=Empresa%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageLogic%>;

import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;
import java.sql.SQLException;
import java.util.Date;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.Classe;
import <%=Empresa%>.<%= Package%>.<%= strPackageUtils%>.*;
import <%=Empresa%>.<%= Package%>.<%= strPackageUtils%>.<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones;
import <%=Empresa%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageEntities%>.<%=GetNombreClase(TablaBase.ToString())%>;
import <%=Empresa%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageInterface%>.<%=GetNombreClase(TablaBase.ToString())%>Implementable;
import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageLogic%>.*;
import <%=Empresa%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageLogic%>.<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional;
import <%=Empresa%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageDataAccess%>.*;
import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%= strPackageUtils%>.*;
<%if(TieneClasesRelacionadasOForeignKeyC(TablaBase)){%>import <%=Empresa%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageEntities%>.*;<% } %>


public class <%=GetNombreClase(TablaBase.ToString())%>Logic implements <%=GetNombreClase(TablaBase.ToString())%>Implementable {		
	private <%=GetNombreClase(TablaBase.ToString())%>DataAccess <%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess; 	
	private <%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>;
	private <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjeto(TablaBase.ToString())%>s;
	private Connexion connexion;
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
	<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>	
	<%=GetDefinicionVariableClasesCompuestos() %>	
	<%}%>	
	<%}%>
	
	public  <%=GetNombreClase(TablaBase.ToString())%>Logic()throws SQLException,Exception {
		try {
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess = new <%=GetNombreClase(TablaBase.ToString())%>DataAccess();
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>s= new <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>= new <%=GetNombreClase(TablaBase.ToString())%>();
			
			<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
			<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>			
			<%=GetInicializacionVariableClasesCompuestos()%>			
			<%}%>
			<%}%>
			
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
		}	 
    }
	
	public  <%=GetNombreClase(TablaBase.ToString())%>Logic(Connexion newConnexion)throws Exception {
		try {
			this.connexion=newConnexion;
			
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess = new <%=GetNombreClase(TablaBase.ToString())%>DataAccess();
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>s= new <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>= new <%=GetNombreClase(TablaBase.ToString())%>();
			
			<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
			<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>			
			<%=GetInicializacionVariableClasesCompuestos()%>			
			<%}%>
			<%}%>
			
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
	  	}	 
    }
	
	public <%=GetNombreClase(TablaBase.ToString())%> get<%=GetNombreClase(TablaBase.ToString())%>() {	
		return <%=GetNombreClaseObjeto(TablaBase.ToString())%>;
	}
		
	public void set<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClase(TablaBase.ToString())%> new<%=GetNombreClase(TablaBase.ToString())%>) {
		this.<%=GetNombreClaseObjeto(TablaBase.ToString())%> = new<%=GetNombreClase(TablaBase.ToString())%>;
	}
	
	private <%=GetNombreClase(TablaBase.ToString())%>DataAccess get<%=GetNombreClase(TablaBase.ToString())%>DataAccess() {
		return <%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess;
	}
	
	private void set<%=GetNombreClase(TablaBase.ToString())%>DataAccess(<%=GetNombreClase(TablaBase.ToString())%>DataAccess new<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess) {
		this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess = new<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess;
	}
	
	public <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> get<%=GetNombreClase(TablaBase.ToString())%>s() {		
		for (<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>Local: <%=GetNombreClaseObjeto(TablaBase.ToString())%>s ) {
			<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local);
		}
		
		return <%=GetNombreClaseObjeto(TablaBase.ToString())%>s;
	}
	
	public void set<%=GetNombreClase(TablaBase.ToString())%>s(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> new<%=GetNombreClase(TablaBase.ToString())%>s) {
		this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new<%=GetNombreClase(TablaBase.ToString())%>s;
	}
	
	public Connexion getConnexion() {
		return this.connexion;		
	}
	
	public void setConnexion(Connexion newConnexion) {
		this.connexion=newConnexion;		
	}
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
	<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>	
	<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>	
	<%=GetDefinicionVariableClasesCompuestosGetSet() %>	
	<%}%>
	<%}%>
	<%}%>
	public void getNewConnexionToDeep()throws SQLException,Exception {
		try {
			connexion=Connexion.getNewConnexion();
			
		} catch(SQLException e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
			
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
		}
	}
		
	public void closeNewConnexionToDeep()throws SQLException,Exception {
		try {
			this.connexion.getConnection().close();
			
		} catch(SQLException e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
			
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
		}
	}
	
	public void getEntity(Long id) throws SQLException,Exception {
		<%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		  		  
        try {
			connexion=Connexion.getNewConnexion();	
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>=<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntity(connexion, id);   	       	 
			
			connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} finally {
			connexion.getConnection().close();	
		}
    }
	
	public  void getEntity(Long id,Connexion connexion) throws Exception {
		<%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		  		  
        try {
			this.connexion=connexion;	
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>=<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntity(connexion, id);   	       	 
			
			connexion.getConnection().commit();
			
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
      	}	
    }
	
	public  void getEntities(QueryWhereSelectParameters queryWhereSelectParameters)throws SQLException,Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		  		  
        try {
			connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntities(connexion, queryWhereSelectParameters);    	       	 
			
			connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
      	} finally {
			connexion.getConnection().close();	
		}
    }
	
	public  void getEntities(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws SQLException,Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		  		  
        try {
			connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntities(connexion,sQuerySelect, queryWhereSelectParameters);    	       	 
			
			connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} finally {
			connexion.getConnection().close();	
		}
    }
	
	public  void getEntitiesSimpleQueryBuild(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws SQLException,Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		  		  
        try {
			connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntitiesSimpleQueryBuild(connexion,sQuerySelect, queryWhereSelectParameters);    	       	 
			
			connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} finally {
			connexion.getConnection().close();	
		}
    }
	
	public void  getTodos<%=GetNombreClase(TablaBase.ToString())%>s(String sFinalQuery)throws SQLException,Exception {		
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		
		try {
			connexion=Connexion.getNewConnexion();
			
			QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters("");	
			queryWhereSelectParameters.setFinalQuery(sFinalQuery);
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntities(connexion,queryWhereSelectParameters);				
			
			connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} finally {
			connexion.getConnection().close();	
		}
	}
	  	  
	public void save<%=GetNombreClase(TablaBase.ToString())%>(Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp)throws Exception {	
	    try {
			<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(idUsuario,<%=GetNombreClaseObjeto(TablaBase.ToString())%>,isUsuario,sHostName,sHostIp);
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, connexion);	    	       	 
			
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
      	}					
	}
	
	public void save<%=GetNombreClase(TablaBase.ToString())%>WithConnection(Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp)throws SQLException,Exception	{	
		try {	
			connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(idUsuario,this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>,isUsuario,sHostName,sHostIp);
			
			this.save<%=GetNombreClase(TablaBase.ToString())%>(idUsuario,isUsuario,sHostName,sHostIp);	  
			
			connexion.getConnection().commit();
									
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} finally {
			connexion.getConnection().close();	
		}
	}
	
	public void save<%=GetNombreClase(TablaBase.ToString())%>s(Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp)throws Exception {			
		try {
			for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>Local:<%=GetNombreClaseObjeto(TablaBase.ToString())%>s) {	
				<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local);
				
				<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(idUsuario,<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,isUsuario,sHostName,sHostIp);
				
				<%=GetNombreClase(TablaBase.ToString())%>DataAccess.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local, connexion);	
			}
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
      	}		
	}
	
	public void save<%=GetNombreClase(TablaBase.ToString())%>sWithConnection(Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp)throws SQLException,Exception {			
	    try {	
			connexion=Connexion.getNewConnexion();
			
	   		for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>Local:<%=GetNombreClaseObjeto(TablaBase.ToString())%>s) {				
				<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local);
				
				<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(idUsuario,<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,isUsuario,sHostName,sHostIp);
				
	        	<%=GetNombreClase(TablaBase.ToString())%>DataAccess.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local, connexion);				
	        }
			
			connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} finally {
			connexion.getConnection().close();	
		}
	}
	
	
		
	<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>	
	<%= GetIndicesTablasClases() %>
	<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
	<%= GetIndicesTablasClasesCompuestos() %>
	<%}%>
	<%}else{%>
	<%= GetIndicesTablasClasesDeReporte() %>
	<%}%>
	
	public void deepLoad(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases)throws SQLException,Exception {
		<%if(TieneClasesRelacionadasOForeignKeyC(TablaBase)){%>Boolean existe=false;<% } %>	
		
		try {
			<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%= GetIndicesTablasClasesisDeepLoad() %>
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
  		}
	}
	
	public void deepSave(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases)throws SQLException,Exception {		
		<%if(TieneClasesRelacionadasOForeignKeyC(TablaBase)){%>Boolean existe=false;<% } %>
		
		try {
			<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%= GetIndicesTablasClasesisDeepSave() %>
		}<% if(GetIndicesTablasClasesisDeepSave()!=""){ %>catch(SQLException e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
  		}<% } %>catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
  		}	
	}
	
	public void deepLoadWithConnection(Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases,String sTituloMensaje)throws SQLException,Exception {		
		try {
			this.getNewConnexionToDeep();
			
			this.deepLoad(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,isDeep,deepLoadType,clases);
			
			this.connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
  		} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
  		} finally {
			this.closeNewConnexionToDeep();
  		}
	}
	
	public void deepLoadsWithConnection(Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases,String sTituloMensaje)throws SQLException,Exception {		
		try {
			this.getNewConnexionToDeep();
			
			for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
				this.deepLoad(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,isDeep,deepLoadType,clases);
			}
			
			this.connexion.getConnection().commit();
		
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
  		} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
  		} finally {
			this.closeNewConnexionToDeep();
  		}
	}
	
	public void deepSaveWithConnection(Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases,String sTituloMensaje)throws SQLException,Exception {		
		try {	
			this.getNewConnexionToDeep();
			
			this.deepSave(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,isDeep,deepLoadType,clases);		
			
			this.connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
  		} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
  		} finally{
			this.closeNewConnexionToDeep();
  		}
	}
	
	public void deepSavesWithConnection(Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases,String sTituloMensaje)throws SQLException,Exception {		
		try {	
			this.getNewConnexionToDeep();
			
			for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
				this.deepSave(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,isDeep,deepLoadType,clases);
			}
			
			this.connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
  		} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
  		} finally{
			this.closeNewConnexionToDeep();
  		}
	}
	
	public static void registrarAuditoria(Long idUsuario,<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,Boolean isUsuario,String sHostName,String sHostIp)throws Exception {
		//AuditoriaLogicAdditional auditoriaLogicAdditional=new AuditoriaLogicAdditional();		
		try {
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsNew()) {
				//<%=GetAuditoriaCommentTableFromProperties(TablaBase)%><%=strGlobalAuditoriaComment%>auditoriaLogicAdditional.RegistrarNuevaAuditoria(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>DataAccess.TABLENAME, <%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getOid(), Constantes.getSAuditoriaInsertar(), isUsuario, idUsuario, sHostName, sHostIp);
			} else if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsDeleted()) {
				//<%=GetAuditoriaCommentTableFromProperties(TablaBase)%><%=strGlobalAuditoriaComment%>auditoriaLogicAdditional.RegistrarNuevaAuditoria(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>DataAccess.TABLENAME, <%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getOid(), Constantes.getSAuditoriaEliminar(), isUsuario, idUsuario, sHostName, sHostIp);
			} else if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsChanged()) {
				//<%=GetAuditoriaCommentTableFromProperties(TablaBase)%><%=strGlobalAuditoriaComment%>auditoriaLogicAdditional.RegistrarNuevaAuditoria(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>DataAccess.TABLENAME, <%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getOid(), Constantes.getSAuditoriaActualizar(), isUsuario, idUsuario, sHostName, sHostIp);
			}
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
			
		} finally{
			
		}
	}
	
	
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionGetXmls,TiposGeneracion)) {%>
	public String getXml<%=GetNombreClase(TablaBase.ToString())%>()throws Exception {	
		StringBuffer xml = new StringBuffer();
		ArrayList<Classe> classes=new ArrayList<Classe>();
		<%=GetClassClasesRelacionadasForeigKeys()%>
			   
	    try {
			connexion=Connexion.getNewConnexion();
			
			xml.append("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n");
			xml.append("<<%=GetNombreClaseObjeto(TablaBase.ToString())%> generated=\""+System.currentTimeMillis()+"\">\r\n");	    
		    
			<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
	    	this.deepLoad(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
	 
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%=GetXmlColumnaC(TablaBase.Columns[i],TablaBase.ToString(),false) %>	
			<% } %>	     
		
				xml.append("</item>\r\n");
				xml.append("</<%=GetNombreClaseObjeto(TablaBase.ToString())%>>\r\n");
			
			connexion.getConnection().commit();
			
		} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			connexion.getConnection().close();	
		}
		
		return Funciones.validarXml(xml.toString(),<%=GetNombreClaseC(TablaBase.ToString())%>DataAccess.TABLENAME);	
	}
	
	public String getXml<%=GetNombreClase(TablaBase.ToString())%>s()throws Exception	{	
		StringBuffer xml = new StringBuffer();
	  	ArrayList<Classe> classes=new ArrayList<Classe>();
		<%=GetClassClasesRelacionadasForeigKeys()%>
		
	    try {
			connexion=Connexion.getNewConnexion();
			
			xml.append("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n");
			xml.append("<<%=GetNombreClaseObjeto(TablaBase.ToString())%> generated=\""+System.currentTimeMillis()+"\">\r\n");	    
		   
			for (<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>: <%=GetNombreClaseObjeto(TablaBase.ToString())%>s ) {
				<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
				
				this.deepLoad(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
				
				<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
				<%=GetXmlColumnaC(TablaBase.Columns[i],TablaBase.ToString(),false) %>	
				<% } %>	     	
				
	    		xml.append("</item>\r\n");			
			}
			
			xml.append("</<%=GetNombreClaseObjeto(TablaBase.ToString())%>>\r\n");
			
			connexion.getConnection().commit();
			
		} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			connexion.getConnection().close();	
		}
		
		return Funciones.validarXml(xml.toString(),<%=GetNombreClaseC(TablaBase.ToString())%>DataAccess.TABLENAME);		
	}
	<%}%>
	
	
	<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>
	<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
	<%if(GenerarTipoGeneracionC(strTipoGeneracionGetXmls,TiposGeneracion)) {%>
	<%=GetXmlFuncionesClasesCompuestos()%> 
	
	<%}%>
	<%}%>
	<%}%>
	
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionMantenimientoClasesRelacionadas,TiposGeneracion)) {%>
	
	<%=GetMaintenanceTablasClasesRelacionadas() %>
	
	<%=GetMaintenanceTablasClasesRelacionadasDetalles() %>
	
	<%}%>
	
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionDeletesCascade,TiposGeneracion)) {%>
	public void deleteCascade(Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp) throws SQLException,Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
	    try {
	    	if(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISDELETECASCADE) {
				<%=getClassesSetAddTablasRelacionadas()%> 
								
				this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>.setIsDeleted(true);
				
				this.deepLoad(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, true, DeepLoadType.INCLUDE, classes);	    	       	 
				
				<%=GetForTablasRelacionadasForSetdelete()%>
				
				this.deepSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, true, DeepLoadType.INCLUDE, classes);
						
			} else {
	    		;
	    	}			
		} catch(SQLException e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
      	}				
	}
	
	public void deleteCascadeWithConnection(Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp) throws SQLException,Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
	    try {
			connexion=Connexion.getNewConnexion();
			
	    	if(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISDELETECASCADE) {
				<%=getClassesSetAddTablasRelacionadas()%> 
								
				this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>.setIsDeleted(true);
				
				this.deepLoad(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, true, DeepLoadType.INCLUDE, classes);	    	       	 
				
				<%=GetForTablasRelacionadasForSetdelete()%>
				
				this.deepSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, true, DeepLoadType.INCLUDE, classes);
						
			} else {
	    		;
	    	}
			
			connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
      	}
		finally {
			connexion.getConnection().close();	
		}
	}
	
	public void deletesCascade(Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp) throws SQLException,Exception	{	
		try {
			if(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISDELETECASCADE) {
				for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>:<%=GetNombreClaseObjeto(TablaBase.ToString())%>s) {
					this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>=<%=GetNombreClaseObjeto(TablaBase.ToString())%>;					
					
					this.deleteCascade(idUsuario,isUsuario,sHostName,sHostIp);
				}
			} else {
	    		;
	    	}
		} catch(SQLException e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
      	}		
	}
	
	public void deletesCascadeWithConnection(Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp) throws SQLException,Exception	{	
		try {
			connexion=Connexion.getNewConnexion();
			
			if(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISDELETECASCADE) {
				for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>:<%=GetNombreClaseObjeto(TablaBase.ToString())%>s) {
					this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>=<%=GetNombreClaseObjeto(TablaBase.ToString())%>;					
					
					this.deleteCascade(idUsuario,isUsuario,sHostName,sHostIp);
				}
			} else {
	    		;
	    	}
			
			connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
      	}	
		finally {
			connexion.getConnection().close();	
		}
	}
	<%}%>
	
	
	public static ArrayList<Classe> getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {
		try {
			ArrayList<Classe> classes=new ArrayList<Classe>();			
			
			if(deepLoadType.equals(DeepLoadType.NONE)) {
				<%=GetAddClassesForeignKey()%>
				
			} else if(deepLoadType.equals(DeepLoadType.INCLUDE)) {
				<%=GetAddClassesForeignKeyInclude()%>
			} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {				
				<%=GetAddClassesForeignKeyExclude()%>
			}
			
			return classes;
		
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
		}
	}
	
	public static ArrayList<Classe> getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {
		try {
			ArrayList<Classe> classes=new ArrayList<Classe>();			
			
			if(deepLoadType.equals(DeepLoadType.NONE)) {
				<%=GetAddClassesRelacionadas()%>
				
			} else if(deepLoadType.equals(DeepLoadType.INCLUDE)) {
				<%=GetAddClassesRelacionadasInclude()%>
			} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {
				<%=GetAddClassesRelacionadasExclude()%>
			}
			
			return classes;
			
		} catch(Exception e) {
			Funciones.logShowExceptionMessages(e);
			throw e;
		}
	}
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionDeepForeignKey,TiposGeneracion)) {%>
	public void deepLoadForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception {	
		try {
			this.deepLoadForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepLoadForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			this.deepLoad(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
						
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	
	public void deepLoadsForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception {	
		try {
			this.deepLoadsForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepLoadsForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			for (<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				this.deepLoad(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
				
				Funciones.resetearActivoClasses(classes);
			}
			
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	
	public void deepSaveForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception {	
		try {
			this.deepSaveForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepSaveForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			this.deepSave(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
						
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	
	public void deepSavesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception {	
		try {
			this.deepSavesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepSavesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			for (<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				this.deepSave(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
				
				Funciones.resetearActivoClasses(classes);
			}
			
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	<%}%>
	
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionDeepRelationship,TiposGeneracion)) {%>
	public void deepLoadRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception	{	
		try {
			this.deepLoadRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepLoadRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception	{	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			this.deepLoad(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
						
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	
	public void deepLoadsRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception {	
		try {
			this.deepLoadsRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepLoadsRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			for (<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				this.deepLoad(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
				
				Funciones.resetearActivoClasses(classes);
			}
			
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	
	public void deepSaveRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception	{	
		try {
			this.deepSaveRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepSaveRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception	{	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			this.deepSave(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
						
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}	
	
	public void deepSavesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception {	
		try {
			this.deepSavesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepSavesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			for (<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				this.deepSave(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
				
				Funciones.resetearActivoClasses(classes);
			}
			
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	<%}%>
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionDeepForeignKeyAndRelatioship,TiposGeneracion)) {%>
	public void deepLoadRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception {	
		try {
			this.deepLoadRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepLoadRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
	  
		try {
			this.connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			this.deepLoad(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
						
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	
	public void deepLoadsRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception {	
		try {
			this.deepLoadsRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepLoadsRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			for (<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				this.deepLoad(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
				
				Funciones.resetearActivoClasses(classes);
			}
			
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	
	public void deepSaveRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception {	
		try {
			this.deepSaveRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepSaveRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			this.deepSave(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
						
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	
	public void deepSavesRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>()throws Exception {	
		try {
			this.deepSavesRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(new ArrayList<Classe>(),DeepLoadType.NONE);
		} catch(Exception e) {
			throw e;
	  	}		
	}
	
	public void deepSavesRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {	
		ArrayList<Classe> classes=new ArrayList<Classe>();
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		classes.addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic.getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType));
		
	    try {
			this.connexion=Connexion.getNewConnexion();
			
			for (<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				this.deepSave(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType.INCLUDE, classes);
				
				Funciones.resetearActivoClasses(classes);
			}
			
			this.connexion.getConnection().commit();
			
		} catch(Exception e) {
			this.connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
	  	} finally {
			this.connexion.getConnection().close();	
		}				
	}
	<%}%>
}

<script runat="template">
//IMPLEMENTACIONES SOBRANTES
/*
public void newInstance(<%for(int i = 0; i <TablaBase.Columns.Count; i++){%><%=GetParametroFuncionNuevoClase(TablaBase.Columns[i])%><%if((i<TablaBase.Columns.Count-2)&&(!GetParametroFuncionNuevoClase(TablaBase.Columns[i]).Equals(string.Empty))){%>,<%}%><%}%>,Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp)throws SQLException,Exception {  			
	    try {		
			connexion=Connexion.getNewConnexion();
			
	    	<%=GetNombreClaseObjeto(TablaBase.ToString())%>= new <%=GetNombreClase(TablaBase.ToString())%>();
		
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
			<%=  GetSetEntityColumna(TablaBase.Columns[i],TablaBase.ToString(),false) %>	
 			<% } %>
			
			<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
	   		
			<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(idUsuario,<%=GetNombreClaseObjeto(TablaBase.ToString())%>,isUsuario,sHostName,sHostIp);
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, connexion);
	    	
			connexion.getConnection().commit();	
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} finally {
			connexion.getConnection().close();	
		}
	}
	
	public void update(<% for (int i = 0; i <TablaBase.Columns.Count; i++){ %><%=GetParametroFuncionActualizarClase(TablaBase.Columns[i])%> <%if((i!=TablaBase.Columns.Count-1)&&(!GetParametroFuncionActualizarClase(TablaBase.Columns[i]).Equals(string.Empty))){%>,<% } %><% } %>,Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp) throws SQLException,Exception {			
	    try {
			connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>=<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntity(connexion, <%=strId%>);
			
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired){continue; } %>
			<%=  GetSetEntityColumna(TablaBase.Columns[i],TablaBase.ToString(),true) %>	
			<% } %>
			
			<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(idUsuario,<%=GetNombreClaseObjeto(TablaBase.ToString())%>,isUsuario,sHostName,sHostIp);
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, connexion);	    	       	 
					
			connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} finally {
			connexion.getConnection().close();	
		}
	}
	
	
	public void delete(Long id,Long idUsuario,Boolean isUsuario,String sHostName,String sHostIp) throws SQLException,Exception {	
	    try {
			connexion=Connexion.getNewConnexion();
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>=<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntity(connexion, id);
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>.setIsDeleted(true);
			<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(idUsuario,<%=GetNombreClaseObjeto(TablaBase.ToString())%>,isUsuario,sHostName,sHostIp);
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, connexion);	    	       	 
			
			connexion.getConnection().commit();
			
		} catch(SQLException e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} catch(Exception e) {
			connexion.getConnection().rollback();
			Funciones.logShowExceptionMessages(e);
			throw e;
			
      	} finally {
			connexion.getConnection().close();	
		}
	}
*/
</script>