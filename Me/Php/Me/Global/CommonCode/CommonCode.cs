/*

DESCRIPCION DE TABLA:
TIPOS:
|NOMBRE=(Nombre de la tabla de la bd).
|PREFIJOTABLA=(Prefijo de la tabla que representa el modulo) 
|ESROMPIMIENTO=(Indica si la tabla es de rompimiento, solo funciona en relaciones simples true,false).
|WEBTITULO=(Titulo de los combos y columnas q hacen referencia a esta tabla).
|WEBPLURAL=(La finalizacion del nombre en plural)				s
|WEBRELACIONESNO=(El nombre de la tabla o tablas no tomadas en cuenta para proceso de mantenimiento relacionado ).
|DELCASCADE=(Determina si puede borrar o no en cascada, separados por , si hay mas de 1) si tiene la palabra clave NINGUNO no genera nada (para catalogos generales)							true,false 	  (por defecto sera false)
|CLASESNO=(Las Clases donde false se pueda navegar para mantenimiento)	si tiene la palabra clave NINGUNO no genera nada (para catalogos generales)	
|WEBCONATRAS=(Indica si en la pagina actual debe funcionar el boton atras)	true,false
|ESINTERNO=(Indica si la tabla es interna es decir hija de alguna principal y no muestra recargar informacion)	true,false
|INDICESNO=(Los Indices donde false se pueda buscar mantenimiento) se separan con una ,
|INSERTNO=(Indica si la tabla no permite insertar elementos)	true,false
|CONAUD=(Indica si se utiliza auditoria)true,false o no poner
|CONSTORE=(Indica si se utiliza Store Procedure)
|CONORIG=(Indica si se utiliza el objeto original)true,false o no poner
|FINALQUERY=(Indica si el query que complementa siempre en cada busqueda)-----> Reemplaza () por = cuando sea el caso
|ESREPORTE=(Indica si la tabla es de reporte true,false).
|PREFIJOID=(Prefijo sql del id para la paginacion) 
|ESMENU=(Define si la tabla especificada va ser usada para el menu principal)true, false
|CONJAVASCRIPTIE=(Indica si la tabla usa include/exclude javascript true,false).
|PAQUETE=(Indica el path el cual se encuentra guardado la pagina y reporte y usado para generar arbol)Catalogos/DatosPersonales/
|ALIGN=Alinea la paginacion,control nuevo, campos de datos y acciones deacuerdo a los valores:(left,center,rigth)
|TAMBUSQUEDA=indica el tamanio horizontal del bloque de busquedas de la pagina
|IGNORAR=Indica si la tabla se lo ignora en el proceso o no (true,false)
|SCHEMA=Indica el nombre del esquema de la tabla.
|ESPOPUP=(Permite abrir una tabla relacionada en otra pagina web como popup ocultando el arbol de opciones)
|PAGINACION=Indica el numero de paginacion ESTATICAMENTE.
|NUMCOLUMNAS=(numero columnas para formulario)
|NUMPAG=(Numero de Paginacion)
|CONDIVRESUMEN=(permite al usuario revisar la linea actual en un div separado)
|CONREGISTRESE=(permite utilizar una imagen que dice registrese y se muestra antes de la tabla de datos)

FOREIGNKEY LOTE
|SINFK_ACTUALIZAR=(No muestra icono para actualizar datos fk)
|DEFAULT=(Pone el mismo default a todos los combos referenciados)


//PARA CAKEPHP
|CAKEUSES=(true,false), para que explicitamente en controller use uses='ClassName'

TIPOS PARA ACCION:
|NOMBRE=(Nombre Codigo de la accion de la tabla de la bd).
|WEBTITULO=(Nombre para la pagina web de la accion de la tabla de la bd).
|POSTACCION=(Indica que debe realizarse luego de ejecutarse la accion (Mensaje,Arir otra pagina,Abrir nueva pagina,etc ).
			(1=Sin respuesta,2=IrAPagina,3=IrANuevaPagina,4=ConRetorno)
			

DESCRIPCION DE LOS CAMPOS:
TIPOS:
|NOMBRE=(Nombre del campo de la tabla de la bd)|
|TABLA= (El nombre de la tabla donde el campo id lo hace referencia en relacion uno a uno)|
|TIPO= (El tipo de campo en detalle Ejm: Date,Time,Timestamp)|
|WEBTITULO=(es el titulo de cada campo que sera utiilizado como labbel)|
|SINTITULO=(No muestra titulo en campo, display:none)
|WEBFILAS=(es el numero de filas que este campo muestra en la pagina web)|
|WEBCOMBO=(Columna detalle para el combo y o tabla)	|								true,false 	  (por defecto se aplicara la columna id)
|WEBORDEN=(Columna detalla el orden inicial de la columna)|							asc,desc  (por defecto no se aplicara ningun orden)
|ESPARAROMPIMIENTO=(Indica si la columna es para rompimiento, solo funciona en relaciones simples true,false).
|CONBUSQUEDA=(Indica si la columna FOREIGN KEY debe utilizar busquedas para seleccionar valores combo actual true,false).

//ESTO DESHABILITAR NO FUNCIONA PARA ACTUALIZAR EL IDUSUARIO EN AUTOAUDITORIA SE PIERDE SOLO SE GUARDA IDUSUARIOUPDATE
|FKNOLOAD=(Indica si la columna FOREIGN KEY no carga todo el combo de forma inicial(es decir o hay una busqueda o no se necesita) true,false).
//ESTO NO SE ESTA UTILIZANDO
|FKNOSAVE=(Indica si la columna FOREIGN KEY no guarda desde el combo de forma inicial(es decir lo guarda automaticamente como proceso) true,false).

|JSVALIDACION(La funcion especial para la validacion de cliente o javascript)	
|JSVALIDACION_MINLEN (Para que se ejecute validacion js de minimo de caracteres)
|EDITNO=(Indica si la tabla no permite editar elementos)	true,false
|ESREPORTE=(Indica si el campo es de reporte true,false).
|CONAUD=(Indica si se utiliza auditoria)true,false o no poner
|VALIDACIONTODO=(permite ingresar todos los campos string cualquier string)true,false
|VALIDACION=(Contiene el string de validacion)Ejm:		VALIDACION=NOEMPTY,NONULL,EMAIL,RANGE>0-25,LENGTH>3-15
			EJEMPLO: |VALIDACION=NOEMPTY,NONULL,EMAIL,RANGE>0-25,LENGTH>3-15,MIN>10,PAST,FUTURE,SIZE>3-15,DIGITS>15-3,MAX>100,VALID,TRUE,FALSE
|NUMTABUL=(numero de tabulador para cabecera tabla)
|ESPASSWORD=(Campo no muestra en tabla y field tipo pass)

READ ONLY TABLES

DESCRIPCION DE TABLA:
|TIPOS:
|NOMBRE=(Nombre de la tabla de la bd).
|STARTQUERY=(Query de la parte inicial de la consulta)
|ENDQUERY=(Query de la parte inicial de la consulta)

DESCRIPCION DE LOS CAMPOS:
TIPOS:
|NOMBRE=(Nombre del campo de la tabla de la bd)|
|TIPO= (El tipo de campo en detalle Ejm: Date,Time,Timespam)|
|ALIAS=(Alias de la tabla de referencia de la bd)|
|OPERATOR=(Operador del campo)
|STARTOPERATOR=(Operador inicial)
|ENDOPERATOR=(Operador final)
|STARTOTHER=(Query de la parte inicial de la consulta)
|ENDOTHER=(Query de la parte inicial de la consulta)

GENERAL
ASCII y UTF-8
UTF-8 En (*View.php, *Controller.php, *Constantes.js,*Funciones.js,*WebPageInteraction.js)
		* Cuando se usa en *ConstantesFunciones.php se dana el json response, pero era porque habia caracter inicial del archivo raro
		* BOM , caracter automatico de utf-8 que estorba en json-php
		* No para *Entity.php,*ConstantesCarga.php->SessionFacesPorTablaAdditional.cst(Se dana include en *View.php)
		* Tampoco para javascritp Constante.js y Funciones.js se dana por include a *View.php
		
ASCII los demas

PARA TEMPLATE
<%//InicializarVariablesPorTabla(TablaBase);%>
<%//InicializarVariablesEmpresaC(Empresa,false);%>
*/


using CodeSmith.Engine;
using SchemaExplorer;
using System;
using System.Windows.Forms.Design;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using System.Diagnostics;

namespace Me
{	
	#region Layers And Auxs
	public enum Layers
	{
		DataAccess,
		/// <summary>No Component Pattern Generation should be included.</summary>
		Entities,
		/// <summary>A Service Layer Pattern should be included.</summary>
		Interface,
		/// <summary>A Domain Model Pattern Generation should be included.</summary>
		Logic,
		Servlet,
		Reporte,
		JavaScript,
		JspMaintenance
	}
	
	public enum PaquetesGenerar {
		TODOS,
		ENTITIES,
		DATA_ACCESS,
		LOGIC,
		INTERFACE,		
		CONSTANTES_FUNCIONES,		
		CONTROLLER,
		JAVASCRIP,
		WEB,
		REPORTE,		
		FILE,
		EJB,
		VIP_WEB_JAVASCRIP_CONTROLLER,
		AUXILIAR
	}	
	
	public enum TiposGeneracionGrupo {
		TODOS,
		GUARDAR_RELACIONES,
		CATALOGOS_SIMPLES,
		RELACIONES_SIMPLES,
		TABLAS_MODULO,
		TABLAS_AUTOREFERENCIADAS,
		TABLAS_SIN_IDENTITY,
		TABLAS_UNO_A_UNO,
		VERSION0_TODO_WEB
	}		
	
	public enum TiposGeneracionRelaciones {
		NINGUNO,
		NORMAL,
		TODOS		
	}	
	
	public class MeExtendProperty
	{
		private String strName;
		private String strValue;
		
		public  MeExtendProperty()
		{
			strName="";
			strValue="";
		}
		
		public  MeExtendProperty(String strNameParam,String strValueParam)
		{
			strName=strNameParam;
			strValue=strValueParam;
		}
		
		public String Name
		{
			get
			{
				return strName;
			}
			set
			{
				strName = value;
			}
		}
		
		public String Value
		{
			get
			{
				return strValue;
			}
			set
			{
				strValue= value;
			}
		}

	}
	
	#endregion
	
	#region Codesmith Clases
	public class TableSchemaMe {
		private String name;
		private TableKeySchemaCollectionMe foreignKeys;
		private TableKeySchemaCollectionMe primaryKeys;
		private ColumnSchemaCollection foreignKeyColumns;
		
		public  TableSchemaMe() {
			name="";
			foreignKeys=new TableKeySchemaCollectionMe();
			primaryKeys=new TableKeySchemaCollectionMe();
			foreignKeyColumns=new ColumnSchemaCollection();
		}
		
		public String Name {
			get {
				return name;
			} set {
				name = value;
			}
		}
		
		public ColumnSchemaCollection ForeignKeyColumns {
			get {
				return foreignKeyColumns;
			} set {
				foreignKeyColumns = value;
			}
		}
		
		public TableKeySchemaCollectionMe ForeignKeys {
			get {
				return foreignKeys;
			} set {
				foreignKeys = value;
			}
		}
		
		public TableKeySchemaCollectionMe PrimaryKeys {
			get {
				return primaryKeys;
			} set {
				primaryKeys = value;
			}
		}
	}
	
	public class TableSchemaCollectionMe : List<TableSchemaMe>{
		
	}
	
	public class ExtendedPropertyMe {
		private String name;
		private String value;
		private DbType dbType;
		
		public  ExtendedPropertyMe() {
			name="";
			value="";
			dbType=DbType.String;
		}
		
		public  ExtendedPropertyMe(String name,String value,DbType dbType) {
			name="";
			value="";
			this.dbType=dbType;
		}
		
		public  ExtendedPropertyMe(String strNameParam,String strValueParam) {
			name=strNameParam;
			value=strValueParam;
		}
		
		public String Name {
			get {
				return name;
			} set {
				name = value;
			}
		}
		
		public String Value {
			get {
				return this.value;
			} set {
				this.value= value;
			}
		}
		
		public DbType DbType {
			get {
				return this.dbType;
			} set {
				this.dbType= value;
			}
		}
	}
	
	public class ExtendedPropertyCollectionMe : List<ExtendedPropertyMe>{
		
	}
	
	public class PrimaryKeySchemaMe {
		private DatabaseSchema database;
		private bool deepLoad;
		private String description;
		private String name;
		private TableSchema table;
		
		private ExtendedPropertyCollectionMe extendedProperties;
		private MemberColumnSchemaCollectionMe memberColumns;

		public  PrimaryKeySchemaMe() {
			database=null;
			deepLoad=false;
			description="";
			name="";
			table=null;
			extendedProperties=new ExtendedPropertyCollectionMe();
			memberColumns=new MemberColumnSchemaCollectionMe();
		}
		
		public MemberColumnSchemaCollectionMe MemberColumns {
			get {
				return this.memberColumns;
			} set {
				this.memberColumns= value;
			}
		}
		
		public ExtendedPropertyCollectionMe ExtendedProperties {
			get {
				return this.extendedProperties;
			} set {
				this.extendedProperties= value;
			}
		}
		
		public DatabaseSchema Database {
			get {
				return this.database;
			} set {
				this.database= value;
			}
		}
		
		public bool DeepLoad {
			get {
				return this.deepLoad;
			} set {
				this.deepLoad= value;
			}
		}
		
		public String Description {
			get {
				return this.description;
			} set {
				this.description= value;
			}
		}
		
		public String Name {
			get {
				return this.name;
			} set {
				this.name= value;
			}
		}
		
		public TableSchema Table {
			get {
				return this.table;
			} set {
				this.table= value;
			}
		}
	}
	
	public class TableKeySchemaMe {
		private DatabaseSchema database;
		private bool deepLoad;
		private String description;
		private String name;
		private TableSchema primaryKeyTable;
		private TableSchema foreignKeyTable;
		private PrimaryKeySchemaMe primaryKey;
		
		private TableSchema tableSchemaActual;
		
		ExtendedPropertyCollectionMe extendedProperties;
		MemberColumnSchemaCollectionMe foreignKeyMemberColumns;
		MemberColumnSchemaCollectionMe primaryKeyMemberColumns;

		public  TableKeySchemaMe() {
			database=null;
			deepLoad=false;
			description="";
			name="";
			primaryKeyTable=null;
			foreignKeyTable=null;
			primaryKey=null;
			
			tableSchemaActual=null;
			
			extendedProperties=new ExtendedPropertyCollectionMe();
			foreignKeyMemberColumns=new MemberColumnSchemaCollectionMe();
			primaryKeyMemberColumns=new MemberColumnSchemaCollectionMe();
		}
		
		public  TableKeySchemaMe(DatabaseSchema database,String strNameTableKeySchema,
								 MemberColumnSchemaCollectionMe foreignKeyMemberColumns,TableSchema foreignKeyTable,
								 MemberColumnSchemaCollectionMe primaryKeyMemberColumns,TableSchema primaryKeyTable,
								ExtendedPropertyCollectionMe extendedProperties) {
			this.database=database;
			deepLoad=false;
			description="";
			name=strNameTableKeySchema;
			this.primaryKeyTable=primaryKeyTable;
			this.foreignKeyTable=foreignKeyTable;
			primaryKey=null;
			
			tableSchemaActual=primaryKeyTable;
			
			this.extendedProperties=extendedProperties;
			this.foreignKeyMemberColumns=foreignKeyMemberColumns;
			this.primaryKeyMemberColumns=primaryKeyMemberColumns;
		}					
		
        public  TableKeySchemaMe(DatabaseSchema database,String strNameTableKeySchema,
								 MemberColumnSchemaCollectionMe foreignKeyMemberColumns,TableSchema foreignKeyTable,
								 MemberColumnSchemaCollectionMe primaryKeyMemberColumns,TableSchema primaryKeyTable) {
			this.database=database;
			deepLoad=false;
			description="";
			name=strNameTableKeySchema;
			this.primaryKeyTable=primaryKeyTable;
			this.foreignKeyTable=foreignKeyTable;
			primaryKey=null;
			
			tableSchemaActual=primaryKeyTable;
			
			this.extendedProperties=new ExtendedPropertyCollectionMe();
			this.foreignKeyMemberColumns=foreignKeyMemberColumns;
			this.primaryKeyMemberColumns=primaryKeyMemberColumns;
		}
		
		public TableKeySchema ConvertTableKeySchemaFromConvertTableKeySchemaMe() {
			TableKeySchema tableKeySchema=null;
			
			
			tableKeySchema=new TableKeySchema(this.database,this.name,
								this.getMemberColumns(this.foreignKeyMemberColumns),this.foreignKeyTable.Owner,this.foreignKeyTable.Name,
								this.getMemberColumns(this.primaryKeyMemberColumns),this.primaryKeyTable.Owner,this.primaryKeyTable.Name,
								this.getExtendedProperties(this.extendedProperties));
			
			
			return tableKeySchema;
		}
		
		public String[] getMemberColumns(MemberColumnSchemaCollectionMe memberColumns) {
			//ArrayList arrListMemberColumn=new ArrayList();
			List<String> arrListMemberColumn = new List<String>();
			
			foreach(MemberColumnSchemaMe memberColumnSchemaMe in memberColumns) {
				arrListMemberColumn.Add(memberColumnSchemaMe.Column.Name);
			}
			
			return arrListMemberColumn.ToArray();
		}
		
		public ExtendedProperty[] getExtendedProperties(ExtendedPropertyCollectionMe extendedPropertyCollectionMe) {
			//ArrayList arrListMemberColumn=new ArrayList();
			List<ExtendedProperty> arrListExtendedProperty = new List<ExtendedProperty>();
			ExtendedProperty extendedProperty;
			
			foreach(ExtendedPropertyMe extendedPropertyMe in extendedPropertyCollectionMe) {
				extendedProperty=new ExtendedProperty(extendedPropertyMe.Name,extendedPropertyMe.Value,
									 extendedPropertyMe.DbType);
				
				arrListExtendedProperty.Add(extendedProperty);
			}
			
			return arrListExtendedProperty.ToArray();
		}
		
		public MemberColumnSchemaCollectionMe PrimaryKeyMemberColumns {
			get {
				return this.primaryKeyMemberColumns;
			} set {
				this.primaryKeyMemberColumns= value;
			}
		}
		
		public MemberColumnSchemaCollectionMe ForeignKeyMemberColumns {
			get {
				return this.foreignKeyMemberColumns;
			} set {
				this.foreignKeyMemberColumns= value;
			}
		}
		
		public ExtendedPropertyCollectionMe ExtendedProperties {
			get {
				return this.extendedProperties;
			} set {
				this.extendedProperties= value;
			}
		}
		
		public DatabaseSchema Database {
			get {
				return this.database;
			} set {
				this.database= value;
			}
		}
		
		public bool DeepLoad {
			get {
				return this.deepLoad;
			} set {
				this.deepLoad= value;
			}
		}
		
		public String Description {
			get {
				return this.description;
			} set {
				this.description= value;
			}
		}
		
		public String Name {
			get {
				return this.name;
			} set {
				this.name= value;
			}
		}
		
		public TableSchema PrimaryKeyTable {
			get {
				return this.primaryKeyTable;
			} set {
				this.primaryKeyTable= value;
			}
		}
		
		public TableSchema ForeignKeyTable {
			get {
				return this.foreignKeyTable;
			} set {
				this.foreignKeyTable= value;
			}
		}
		
		public PrimaryKeySchemaMe PrimaryKey {
			get {
				return this.primaryKey;
			} set {
				this.primaryKey= value;
			}
		}
		
		public TableSchema TableSchemaActual {
			get {
				return this.tableSchemaActual;
			} set {
				this.tableSchemaActual= value;
			}
		}
	}
	
	public class TableKeySchemaCollectionMe : List<TableKeySchemaMe>{
		
	}
	
	public class MemberColumnSchemaMe {
		private DatabaseSchema database;
		private bool deepLoad;
		private String description;
		private String name;
		private bool allowDBNull;
		private ColumnSchema column;
		private DbType dataType;
		private bool isForeignKeyMember;
		private bool isPrimaryKeyMember;
		private bool isUnique;
		private String nativeType;
		private Byte precision;
		private Int32 scale;
		private Int32 size;
		private Type systemType;
		private TableSchema table;
		private ExtendedPropertyCollectionMe extendedProperties;
		private ExtendedPropertyCollectionMe columnExtendedProperties;
		
		public  MemberColumnSchemaMe() {
			database=null;
			deepLoad=false;
			description="";
			name="";
			allowDBNull=false;
			column=null;
			dataType=DbType.Int64;
			isForeignKeyMember=false;
			isPrimaryKeyMember=false;
			isUnique=false;
			nativeType="bigint";
			precision=0;
			scale=0;
			size=0;
			systemType=Type.GetType("System.Int64");
			table=null;
			extendedProperties=new ExtendedPropertyCollectionMe();
			columnExtendedProperties=new ExtendedPropertyCollectionMe();
		}
		
		public ExtendedPropertyCollectionMe ColumnExtendedProperties {
			get {
				return this.columnExtendedProperties;
			} set {
				this.columnExtendedProperties= value;
			}
		}
		
		public ExtendedPropertyCollectionMe ExtendedProperties {
			get {
				return this.extendedProperties;
			} set {
				this.extendedProperties= value;
			}
		}
		
		public TableSchema Table {
			get {
				return this.table;
			} set {
				this.table= value;
			}
		}
		
		public Type SystemType {
			get {
				return this.systemType;
			} set {
				this.systemType= value;
			}
		}
		
		public Int32 Size {
			get {
				return this.size;
			} set {
				this.size= value;
			}
		}
		
		public Int32 Scale {
			get {
				return this.scale;
			} set {
				this.scale= value;
			}
		}
		
		public Byte Precision {
			get {
				return this.precision;
			} set {
				this.precision= value;
			}
		}
		
		public String NativeType {
			get {
				return this.nativeType;
			} set {
				this.nativeType= value;
			}
		}
		
		public bool IsUnique {
			get {
				return this.isUnique;
			} set {
				this.isUnique= value;
			}
		}
		
		public bool IsPrimaryKeyMember {
			get {
				return this.isPrimaryKeyMember;
			} set {
				this.isPrimaryKeyMember= value;
			}
		}
		
		public bool IsForeignKeyMember {
			get {
				return this.isForeignKeyMember;
			} set {
				this.isForeignKeyMember= value;
			}
		}
		
		public DbType DataType {
			get {
				return this.dataType;
			} set {
				this.dataType= value;
			}
		}
		
		public ColumnSchema Column {
			get {
				return this.column;
			} set {
				this.column= value;
			}
		}
		
		public bool AllowDBNull {
			get {
				return this.allowDBNull;
			} set {
				this.allowDBNull= value;
			}
		}
		
		public DatabaseSchema Database {
			get {
				return this.database;
			} set {
				this.database= value;
			}
		}
		
		public bool DeepLoad {
			get {
				return this.deepLoad;
			} set {
				this.deepLoad= value;
			}
		}
		
		public String Description {
			get {
				return this.description;
			} set {
				this.description= value;
			}
		}
		
		public String Name {
			get {
				return this.name;
			} set {
				this.name= value;
			}
		}
	}
	
	public class MemberColumnSchemaCollectionMe : List<MemberColumnSchemaMe>{
		
	}
	
	#endregion
	
	public  class CommonCode : CodeTemplate
	{
		//PARA PRODUCCION Y PROTEGER CODIGO
		public static bool CON_RENDER_PRODUCCION=false;
		public static bool CON_RENDER_MINIMO_PRODUCCION=false;
		public static bool CON_RENDER_MINIMO_PRODUCCION_TAB=false;
		//PARA PRODUCCION Y PROTEGER CODIGO_FIN
		public static bool CON_RENDER_SIN_BOM=true;
		
		/*
		NOTA:
			* Sin tomar en cuenta Additional (debe modificarse siempre)
			* Sin tomar en cuenta JavaScript (muy conflictivo y no es importante)
			
		PARA PRODUCCION Y PROTEGER CODIGO
		CON_RENDER_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION_TAB=true;
			
		PARA PRODUCCION Y PROTEGER CODIGO MODO DEPURAR
		CON_RENDER_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION_TAB=false;
			
		PARA CODIGO NORMAL O DESARROLLO SIN PROTEGER CODICO
		CON_RENDER_PRODUCCION=false;CON_RENDER_MINIMO_PRODUCCION=false;CON_RENDER_MINIMO_PRODUCCION_TAB=false;
		
		1) Se puede utilizar //, siempre y cuando sea una linea aparte
		2) En la funcion GetByDanLicence(), existe un espacion inicial extra para que no afecte <?php
		*/
			
		public static bool ConCakePhp=false;
		public static bool ConArchivosV1Cake=false;
		public static bool ConArchivosV2Cake=true;
		
		public static string strSeparadorName="-";
		
		public static bool ConPhpBasico=false;
		public static string strPrefijoObjetoWeb="";
		
		public static bool ConBusquedaAnterior=false;
		public static bool CON_VERSION_MODULOS=true;
		public static bool usaConstantesCarga=true;
		
	
		#region Const Acciones Labels
		
		public const String strPrefijoAccionTableExtendProperty="Accion_";
		public const String strPrefijoAccionTableNombreProperty="NOMBRE";
		public const String strPrefijoAccionTableWebNombreProperty="WEBTITULO";
		public const String strPrefijoAccionTablePostAccionProperty="POSTACCION";
		
		#endregion	
				
		#region Tags Descripcions
	
		// TABLE
		public static String strNOMBRE="NOMBRE";
		public static String strPREFIJOTABLA="PREFIJOTABLA";
		public static String strESROMPIMIENTO="ESROMPIMIENTO";
		public static String strESGUARDARREL="ESGUARDARREL";
		public static String strESGUARDARREL_PORPARTE="ESGUARDARREL_PORPARTE";
		public static String strESGUARDARRELHIJO="ESGUARDARRELHIJO";		
		public static String strWEBTITULO="WEBTITULO";
		public static String strWEBPLURAL="WEBPLURAL";
		public static String strWEBRELACIONESNO="WEBRELACIONESNO";
		public static String strDELCASCADE="DELCASCADE";
		public static String strCLASESNO="CLASESNO";
		public static String strCLASESPERSISTENCENO="CLASESPERSISTENCENO";
		public static String strWEBCONATRAS="WEBCONATRAS";
		public static String strESINTERNO="ESINTERNO";
		public static String strINDICESNO="INDICESNO";
		public static String strKEYINDICESNO="KEYINDICESNO";
		public static String strINSERTNO="INSERTNO";
		public static String strDELETENO="DELETENO";
		public static String strCONAUDAUTO="CONAUDAUTO";
		public static String strSINAUDET="SINAUDET";
		public static String strCONADDIT="CONADDIT";
		public static String strCONMAXCODE="CONMAXCODE";		
		public static String strCONAUD="CONAUD";
		public static String strCONSTORE="CONSTORE";
		public static String strCONORIG="CONORIG";
		public static String strFINALQUERY="FINALQUERY";
		public static String strSESSIONKEYQUERY="SESSIONKEYQUERY";
		public static String strNEWCODE="NEWCODE";
		public static String strESREPORTE="ESREPORTE";
		public static String strESREPORTEAUX="ESREPORTEAUX";
		public static String strESREPORTEPARAM="ESREPORTEPARAM";
		public static String strESREPORTEGROUP="ESREPORTEGROUP";
		public static String strCONNATIVE="CONNATIVE";
		public static String strPREFIJOID="PREFIJOID";
		public static String strESMENU="ESMENU";
		public static String strCONJAVASCRIPTIE="CONJAVASCRIPTIE";			
		public static String strPAQUETE="PAQUETE";
		public static String strPAQUETEJAVA="PAQUETEJAVA";
		public static String strALIGN="ALIGN";
		public static String strTAMBUSQUEDA="TAMBUSQUEDA";
		public static String strIGNORAR="IGNORAR";
		public static String strSCHEMA="SCHEMA";
		public static String strPCKG="PCKG";
		public static String strPCKGENTCLASES="PCKGENTCLASES";
		public static String strCONPERSISTENCIA="CONPERSISTENCIA";
		public static String strNOEJB="NOEJB";
		public static String strWHAUX="WHAUX";
		public static String strFINALJSPVERSION="FINALJSPVERSION";
		public static String strFINALJSFVERSION="FINALJSFVERSION";
		public static String strESPOPUP="ESPOPUP";
		public static String strNUMCOLUMNAS="NUMCOLUMNAS";
		public static String strNUMCOLUMNASEXTRA="NUMCOLUMNASEXTRA";
		public static String strNUMPAG="NUMPAG";
		public static String strCONPAQUETEJAVAGLOBAL="CONPAQUETEJAVAGLOBAL";		
		public static String strNINGUNO="NINGUNO";
	
	
		// COLUMNAS
		
		//public static String strNOMBRE="NOMBRE";
		public static String strTABLA="TABLA";
		public static String strTIPO="TIPO";
		//public static String strWEBTITULO="WEBTITULO";
		public static String strWEBFILAS="WEBFILAS";
		public static String strWEBCOMBO="WEBCOMBO";
		public static String strWEBORDEN="WEBORDEN";
		public static String strESPARAROMPIMIENTO="ESPARAROMPIMIENTO";
		public static String strCONBUSQUEDA="CONBUSQUEDA";
		public static String strJSVALIDACION="JSVALIDACION";
		public static String strEDITNO="EDITNO";
		
		public static String strVALIDACION="VALIDACION";
		public static String strINSERTEDITNO="INSERTEDITNO";
		public static String strSHOWTABLE="SHOWTABLE";
		public static String strLISTAVALOR="LISTAVALOR";
		public static String strIDHIDDEN="IDHIDDEN";
		//public static String strESREPORTE="ESREPORTE";
		//public static String strCONAUD="CONAUD";

		#endregion	
	
		#region Global Variables
		
		public static bool IS_DEBUG=false;
		
		public static Boolean blnConJQueryCode=false;		
		public static String Module="";
		public static String strEspaciosBotonesImg="   ";
		
		public static Boolean blnEsLowerCaseDBNames=false;	
		public static Boolean blnEsMixedCaseDBNames=true;
		public static Boolean blnEsMaximoTamanioPopup=false;//TODAS LAS VENTANAS POPUP SON GRANDES

		public static Boolean blnEsMixedCaseLabelNames=true;

		public static String strGlobalSeguridadComment="";
		public static String strGlobalAuditoriaComment="";
		
		public static String strGlobalSeguridadCommentNo="";
		public static String strGlobalAuditoriaCommentNo="";
		
		public static String strGlobalSeguridadExtensionOpcion=".jsf";		
		public static String strGlobalPrefijoDBNombreTablas="";
		public static String strGlobalConexionSchema="";
		
		public static String strTipoLicencia="ME";//"APACHE";"GPL";
		
		public static Boolean blnEsColumnaConNombrePrefijoTipo=false;	
		
		//VARIABLES GLOBALES POR TABLA
		public static String strHtmlTablaActual="";
		public static Boolean blnTieneSeguridadCampo=false;	
		public static Boolean blnTieneAuditoriaAuto=false;	
		public static String strPorTablaPrefijoNombre="";
		public static Boolean blnEsReporte=false;
		public static Boolean blnEsReporteUsaColumnasBase=false;
		public static String strEsReporteComment="";
		public static Boolean blnEsReporteGuardar=false;
		public static Boolean blnEsReporteAdditional=false;
		public static Boolean blnEsReporteParaGrupoReporte=false;
		public static Boolean blnEstablaModulo=false;
		public static Boolean blnEsReporteVista=false;
		public static Boolean blnEsProceso=false;
		public static Boolean blnEsProcesoParametro=false;
		public static Boolean blnTieneIdentityColumn=true;
		public static Boolean blnTieneBusquedas=false;
		public static int intNumeroMaximoColumnasBusquedas=1;
		public static int intNumeroIndicesBusquedas=0;
		
		public static Boolean blnTieneForeignKey=false;
		public static Boolean blnTieneRelaciones=false;
		public static int intNumeroMaximoNivelesGlobal=5;
		public static int intNumeroMaximoRelacionesHijoGlobal=5;
		
		//DISEÑO VERSION
		public static Boolean blnConTabsBusqueda=true;	
		
		//PARA NO ESTANDARD
		
		#endregion
		
		#region PHP Version
		public static String strPhp53Version="5.2.17";
		public static String PackageFramework="seguridad";
		public static String strPhp53VersionComment="//PHP5.3-";
		public static String sNmBs="\\";//sNmBs Namespace BackSlash
		#endregion
		
		#region Packages Name				
		public static String strPackage="";
		public static String strPackageFramework="framework";
		public static String strPackageUtils="util";
				
		public static String strPackageDataAccess="dataaccess";
		public static String strPackageBusiness="business";
		public static String strPackageEntities="entity";
		public static String strPackageBeans="bean";
		public static String strPackageFaces="controller";
		public static String strPackageLogic="logic";
		public static String strPackageInterface="interfaces";
		public static String strPackagePresentation="presentation";
		public static String strPackageRequestBean="requestbean";
		public static String strPackageSessionBean="sessionbean";
		public static String strPackageJSF="jsf";
		public static String strPackageWeb="web";
		public static String strPackageServlet="controller";	
		public static String strPackageCake="cake";
		public static String strPackageCakeViews="views";
		public static String strPackageCakeControllers="controllers";
		public static String strPackageCakeModels="models";
		
		public static String strPackageReporte="report";
		public static String strPackageSource="source";
		public static String strPackageSwing="swing";
		public static String strPackageJInternalFrames="jinternalframe";
		
		//WEB SERVICES
		public static String strPackageWebServicePrefix="jws";		
		public static String strPackageWebServiceInterface="interfaces";		
		public static String strPackageWebService="webservice";
		public const String strSufijoRangoFinal="Final";
		
		//IMPORT SEGURIDAD AUDITORIA
		public static String strEmpresaAuditoria="com/bydan";
		public static String strPackageEntitiesAuditoria="entity";		
		public static String strPackageAuditoria="seguridad";
		public static String strPackageBusinessAuditoria="business";
		public static String strPackageLogicAuditoria="logic";
		public static String strPackageUtilsAuditoria="util";
		public static String strPackageDataAccessAuditoria="dataaccess";
		
		public static String strEmpresaSeguridad="com/bydan";
		public static String strPackageEntitiesSeguridad="entity";
		public static String strPackageUtilsSeguridad="util";
		public static String strPackageDataAccessSeguridad="dataaccess";				
		public static String strPackageBusinessSeguridad="business";
		public static String strPackageLogicSeguridad="logic";
		public static String strPackageInterfaceSeguridad="interfaces";
		public static String strPackageServiceSeguridad="service";
		public static String strEjbSeguridad="ejb";
		public static String strEjbInterfaceSeguridad="interfaces";
		public static String strIdGetSetSeguridad="id";
		public static String strIdSeguridad="id";
		#endregion
		
		public static String  strFrameworkDomain="";
		
		/* Me Extend Properties */
		public const String strPrefijoMeTableExtendProperty="Me_";
		
		public const String strPrefijoRelativePath="../";
		public const String strPrefijoAdditional="Additional";
		public const String strPrefijoDataAccess="DataAccess";		
		public const String strPrefijoBeanSwing="BeanSwing";
		public const String strPrefijoSwingInternalFrame="JInternalFrame";
		public const String strForeignKey="ForeignKey";
		public const String strReturnGeneral="ReturnGeneral";		
		public const String strParameterGeneral="ParameterGeneral";
		public const String strDescription="Description";
		public const String strDefault="Default";
		public String strPrefijoFace="Face";
		public String strPrefijoView="View";
		public const String strPrefijoCakeModel="Model";
		public const String strPrefijoJSFSessionFaces="SessionBean";
		public const String strPrefijoJSFFaces="Controller";
		public const String strConstante="Constante";
		public const String strPrefijoWebService="WebService";
		public const String strPrefijoParametroStoreProcedure="inputParam";
		public const String strClaseDetalleBean="DescripcionReporte";
		public const String strClaseBean="Bean";
		public const String strSufijoJSPJSFFinal="Final";
		public const String strSufijoWeb="Relaciones";
		public const String strClaseConstantesFunciones="ConstantesFunciones";		
		public const String strClaseConstantesCarga="ConstantesCarga";		
		public const String strClaseAuxiliar="Compuesto";
		public const String strNative="Native";
		public const String strEndScript="</script>";
		public const String strStartPageInclude="<%@";
		public const String strStartPageIncludeOnly="<%";
		public const String strFinishPageInclude="%>";
		public const String strAjaxWebPart="AjaxWebPart";
		
		public const String strId="id";
		public const String strIsActive="isActive";
		public const String strIsExpired="isExpired";
		public const String strVersionRow="versionRow";
		public const String strDescripcion="Descripcion";
		public const String strIdUsuario="idUsuario";
		public const String strIdEmpresa="idEmpresa";
		public const String strIdSucursal="idSucursal";				
		public const String strIdEjercicio="idEjercicio";
		public const String strIdPeriodo="idPeriodo";
		public const String strIdModulo="idModulo";
		public const String strIdAnio="idAnio";
		public const String strIdMes="idMes";
		
		//SI EXISTE PROBLEMAS Y MEJOR COMENTAR HASTA RESOLVER CUANDO TABLAS SON NO STANDARD
		public static String strGlobalTablaNoStandardComment="";		
		public static Boolean blnConFuncionesSqlNativas=false;
		
		public const String strfield="";//"field";
		public const String strField="";//"Field";
		public const String strfield_=strfield;//+"_";//"field";
		public const String strField_=strField;//+"_";//"Field";
			
		public const String strFK="FK";
		public const String strIdGetSet="Id";
		public const String strIsActiveGetSet="IsActive";
		public const String strIsExpiredGetSet="IsExpired";
		public const String strVersionRowGetSet="VersionRow";
		
		public static String strIdDB="id";
		public static String strVersionRowDB="versionrow";
		public static String strIdEmpresaDB="id_empresa";
		public static String strIdSucursalDB="id_sucursal";
		
		public const String strIdRelationshipGetSet="bigId";
		
		public const String strCatalogoGeneralLista="Lista";
		public const String strCatalogoGeneralValor="Valor";
		
		public const int intNumeroMinimoColumnasTablaRompimiento=6;
		
		public const int intDesplazamientoReporteMaestro=15;
		
		public const String strValidacion="validacion.";
		
		public const String strSeparadorXml="-";	
		
		
		//FORM_DETALLE
		//public static String strCommentForm="//";
		//public static String strCommentFormIni="/*";
		//public static String strCommentFormFin="*/";
			
		public static bool conFormDetalle=false;
		public static String strFormDetalle="";//"Detalle";
		public static String strObjetoFormDetalle="";
		//FORM_DETALLE
		
			
		//VARIABLES GLOBALES POR TABLA
		public static Boolean blnConJQueryFuncionalidadCode=false;
		public static Boolean blnTieneImagen=false;
		public static Boolean blnTieneDocumento=false;
		public static Boolean blnTieneArchivo=false;
		public static Boolean blnTieneDate=false;		
		public static Boolean blnTieneDateTime=false;
		public static Boolean blnTieneTime=false;
		public static Boolean blnTieneTextArea=false;
		public static Boolean blnTieneTimestamp=false;
		public static Boolean blnTieneValidacionTodo=false;
		public static Boolean blnNoStandardTableFromProperties=false;
		public static Boolean blnConAdditional=false;
		public static Boolean blnConAdditionalExtraCode=false;
		public static Boolean blnEsTablaUnoAUnoFk=false;
		public static ArrayList arrayListEsquemasRel=null;
		public static String strNombreTablaUnoAUnoPk="";
		public static String strPackageJava="";
		public static String strSufijoVersion="";
		public static Boolean blnConMinCodigoWeb=false;
		public static Boolean blnConMaxCodigoWeb=false;
			public static String strCommentMinCodigoWebIni="";
			public static String strCommentMinCodigoWebFin="";
			
		public static Boolean blnPanelConTab=false;
		public static Boolean blnPanelSinBasico=false;
		public static Boolean blnPanelConUbicacion=false;
		
			//VARIABLES POR TABLA CCFA
			public static Boolean blnEsTablaLatitudLongitud=false;
			
			public static ArrayList arrayTablasRelacionadasParametros=new ArrayList();
			public static ArrayList arrayTablasRelacionadasMe=new ArrayList();
			
			public static ArrayList arrayPanelesFin=new ArrayList();
			public static ArrayList arrayPanelesInicio=new ArrayList();
			
			public static ArrayList arrayPanelesRelacionesFin=new ArrayList();
		
		//PARA NO ESTANDARD
		public static bool blnTieneTipoPKStandard=false;
		public static String strPorTablaColumnsPKParametros="";
		public static String strPorTablaColumnsPKParametrosSinComaPrimero="";
		public static String strPorTablaColumnsPKParametrosUso="";
		public static String strPorTablaColumnsPKParametrosUsoSinComaPrimero="";
		public static int intPorTablaCountColumnsPKC=0;
		public static ColumnSchemaCollection columnSchemaCollectionPK=null;
		
		#region Configuracion Global
		public void RenderToFileMe(CodeTemplate codeTemplate,PaquetesGenerar paquetesGenerar,String PathFile, PreserveRegionsMergeStrategy  preserveStrategy,bool conForzarNormal) {
			/*
			NOTA:
				* Sin tomar en cuenta Additional (debe modificarse siempre)
				* Sin tomar en cuenta JavaScript (muy conflictivo y no es importante)
			
			PARA PRODUCCION Y PROTEGER CODIGO
			CON_RENDER_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION_TAB=true;CON_RENDER_SIN_BOM=true;
			
			PARA PRODUCCION Y PROTEGER CODIGO MODO DEPURAR
			CON_RENDER_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION_TAB=false;CON_RENDER_SIN_BOM=true;
			
			PARA CODIGO NORMAL O DESARROLLO SIN PROTEGER CODICO
			CON_RENDER_PRODUCCION=false;CON_RENDER_MINIMO_PRODUCCION=false;CON_RENDER_MINIMO_PRODUCCION_TAB=false;CON_RENDER_SIN_BOM=true;
			*/
		
			if(!CON_RENDER_PRODUCCION || conForzarNormal) {
				if(!CON_RENDER_SIN_BOM) {									
					codeTemplate.RenderToFile(PathFile, preserveStrategy);
				
				} else {
					//codeTemplate.RenderToFile(PathFile, preserveStrategy);
					
					
					String strEntities=codeTemplate.RenderToString();
					StringBuilder stringBuilder=new StringBuilder();
					
					TextWriter textWriter = new StreamWriter(PathFile);
                
					//Trace.WriteLine(PathFile);
					
					textWriter.Write(strEntities);
                
					textWriter.Flush();
                	textWriter.Close();
                
					textWriter = null;
					
				}
			} else {
				String strEntities=codeTemplate.RenderToString();
				StringBuilder stringBuilder=new StringBuilder();
				
				if(CON_RENDER_MINIMO_PRODUCCION) {
					//strEntities=strEntities.Replace("\t","").Replace("\r\n","");
					
					if(CON_RENDER_MINIMO_PRODUCCION_TAB) {
						strEntities=strEntities.Replace("\t","");
					}
					
					string[] arrLines = Regex.Split(strEntities, "\r\n");//strEntities.Split("\r\n");
					
					String sLineFinal="";
					String sReemplazar="";
					Int32 intSizeReemplazo=0;
					bool permiteReemplazo=true;
					
					foreach(String sLine in arrLines) {
						sLineFinal=sLine;
						
						if(sLineFinal.Contains("//")) {
							permiteReemplazo=true;
							//sLineFinal=sLineFinal.Trim();
							
							if(paquetesGenerar.Equals(PaquetesGenerar.JAVASCRIP)) {
								if(sLineFinal.Contains("http://")) {
									permiteReemplazo=false;
								}
							}
							
							if(permiteReemplazo) {
								if(sLineFinal.IndexOf("//")>-1) {
									
									intSizeReemplazo=sLineFinal.Length - sLineFinal.IndexOf("//");
									
									//Trace.WriteLine("LINEA->"+sLineFinal);
									//Trace.WriteLine("TOTAL="+sLineFinal.Length+",INICIO="+sLineFinal.IndexOf("//")+",SIZE="+intSizeReemplazo);								
									
									
									sReemplazar=sLineFinal.Substring(sLineFinal.IndexOf("//"),intSizeReemplazo);
									
									//Trace.WriteLine("REEMPLAZO->"+sReemplazar);
									
									sLineFinal=sLineFinal.Replace(sReemplazar,"");
								}
							}
							
							//continue;
						}												
						
						//DESCOMENTAR_NORMAL
						if(CON_RENDER_MINIMO_PRODUCCION_TAB) {
							stringBuilder.Append(sLineFinal);
						}
						
						//COMENTAR_PARA COMPROBAR
						if(!CON_RENDER_MINIMO_PRODUCCION_TAB) {
							stringBuilder.Append(sLineFinal + "\r\n");
						}
					}
					
					strEntities=stringBuilder.ToString();
					
				} else if(CON_RENDER_SIN_BOM) {
					
				}
				
				TextWriter textWriter = new StreamWriter(PathFile);
                
				textWriter.Write(strEntities);
                
				textWriter.Flush();
                textWriter.Close();
                
				textWriter = null;
								
			}
		}
		#endregion
		
		#region Global Variables Correccion Codigo
		public static String strCorreccionGetUserName="getField_sUserName";
		#endregion
		
		#region WebLabels
		
		public static String strGeneral="GENERAL";
		public static String strPrincipal="PRINCIPAL";
		public static String strArchivo="VER ARCHIVO";
		public static String strDatos="DATOS";
		public static String strAcceso="ACCESO";
		public static String strConfiguracion="CONFIGURACION";
		public static String strTipos="TIPOS";
		public static String strInterno="INTERNO";		
		public static String strDefiniciones="DEFINICIONES";
		public static String strProcesos="PROCESOS";
		public static String strUtilitarios="UTILITARIOS";
		public static String strReportes="REPORTES";					
		public static String strTotales="TOTALES";
		public static String strExtraPost="EXTRA/POST";
		public static String strColorBusquedaAnidada="#CCCCCC";
		public static String strGenerarReporte="GENERAR REPORTE";
		public static String strGenerarReporteTodos="TODOS LOS RESULTADOS";
		public static String strRecargarInformacion="RECARGAR";
		public static String strEdicion="EDICIÓN";
		public static String strSeleccion="SELECCIONAR";
		public static String strCodigoUnico="CÓDIGO ÚNICO";
		public static String strNuevo="NUEVO";
		public static String strNuevoTabla="NUEVO T.";
		public static String strActualizar="ACTUALIZAR";
		public static String strEliminar="ELIMINAR";
		public static String strCancelar="CANCELAR";
		public static String strContinuar="CONTINUAR";
		public static String strCerrarMensaje="CERRAR MENSAJE";
		public static String strGuardarCambios="GUARDAR";
		public static String strGuardar="GUARDAR";		
		public static String strMantenimientoDe="MANTENIMIENTO DE ";
		public static String strReporteDe="REPORTE DE ";
		public static String strNumeroDe="NUMERO DE ";
		public static String strAProcesar=" A PROCESAR:";
		public static String strBusquedas="BÚSQUEDAS";
		public static String strBusqueda="BÚSQUEDA";
		public static String strBuscar="BUSCAR";
		public static String strPor="POR";
		public static String strDe=" DE ";
		public static String strCatalogosSimples="CATALOGOS SIMPLES";
		public static String strCatalogosCompuestos="CATALOGOS COMPUESTOS";
		public static String strCargarArchivo="CARGAR ARCHIVO";
		public static String strCerrarPagina="CERRAR PAGINA";
		public static String strCerrar="CERRAR";
		public static String strVerArchivo="VER ARCHIVO";
		public static String strDuplicar="DUPLICAR";
		public static String strCopiar="COPIAR";
		public static String strSiguientes="SIGUIENTES";
		public static String strAnteriores="ANTERIORES";
		public static String strOrden="ORDEN";
		public static String strCols="Cols";
		public static String strRels="Rels";
		
		public static String strAltMax="ALT MAX.";
		public static String strImprimirPagina="IMP. DATOS";
		public static String strSelTodos="SEL. TODOS";
		public static String strSinCerrar="SIN CERRAR";
		public static String strSinMensaje="SIN MENSAJE";
		public static String strEli="ELI";
		public static String strSel="SEL";
		
		public static String strTipoBusqueda="Tipo=";
		public static String strCodigoDe="CÓDIGO ÚNICO DE ";
		public static String strParametrosBusqueda="PARAMETROS->";
		
		#endregion
		
		#region ReadOnly
		
		public const String strPrefijoParametro="PRM_";
		
		public int GetNumeroDeColumnasWebComboC(TableSchema tableSchema,bool conColumnasBase) {
			int count=0;					
					
			foreach(ColumnSchema columnSchema in tableSchema.Columns) {
				if(GetTieneComboColumnFromPropertiesC(columnSchema)) {
					
					if(!conColumnasBase) {
						if(columnSchema.Name.Equals(strId)
							|| columnSchema.Name.Equals(strVersionRow)) {
								
							continue;
						}
					}
					
					
					count++;
				}
			}
			
			/*
			if(false && count.Equals(0)) {
				foreach(ColumnSchema columnSchema in tableSchema.Columns) {
					if(columnSchema.Name.Equals("Codigo")
						|| columnSchema.Name.Equals("Nombre")) {
						
						count++;
						
						break;
					}
				}
			}
			*/
			
			//System.Windows.Forms.MessageBox.Show(count.ToString());
			
			return count;
		}
		
		public int GetNumeroDeParametrosC(TableSchema tableSchema) 
		{
			int count=0;	
					
					
					foreach(ColumnSchema columnSchema in tableSchema.Columns)
					{
						if(columnSchema.Name.Contains(strPrefijoParametro))
						{
							count++;
						}
					}
			return count;
		}
		
		public int GetNumeroSinParametrosC(TableSchema tableSchema) 
		{
			int count=0;	
					
					
					foreach(ColumnSchema columnSchema in tableSchema.Columns)
					{
						if(!columnSchema.Name.Contains(strPrefijoParametro))
						{
							count++;
						}
					}
			return count;
		}
		
		#endregion
		
		#region Tipos de Generaciones
		
		//TODOS
		public const String strTipoGeneracionTodos="TODOS";
		//NINGUNO
		//Compuesto
		public const String strTipoGeneracionCompuestos="CS";
		public const String strTipoGeneracionNinguno="NINGUNO";
		//DeletesCascade
		public const String strTipoGeneracionDeletesCascade="DC";
		//MantenimientoClasesRelacionadas
		public const String strTipoGeneracionMantenimientoClasesRelacionadas="MCR";
		//GetXmls
		public const String strTipoGeneracionGetXmls="GX";
		//DeepForeignKey
		public const String strTipoGeneracionDeepForeignKey="DF";
		//DeepRelationship
		public const String strTipoGeneracionDeepRelationship="DR";
		//DeepForeignKeyAndRelatioship
		public const String strTipoGeneracionDeepForeignKeyAndRelatioship="DFR";
		
	
		public static bool GenerarTipoGeneracionC(String strTipoGeneracion,String strTiposGeneraciones) {
			bool blnGenerar=false;
			
			
			foreach(String strTipoGeneracionLocal in strTiposGeneraciones.Split(',')) {
				
				if(strTipoGeneracionLocal.Contains(strTipoGeneracionTodos)) {
						return true;
				}
				
				if(strTipoGeneracionLocal.Contains(strTipoGeneracionNinguno)) {
						return false;
				}
				
				
				
				if(strTipoGeneracion==strTipoGeneracionDeletesCascade) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionDeletesCascade)) {
						blnGenerar=true;
						break;
					}
				} else if(strTipoGeneracion==strTipoGeneracionMantenimientoClasesRelacionadas) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionMantenimientoClasesRelacionadas)) {
						blnGenerar=true;
						break;
					}
				} else if(strTipoGeneracion==strTipoGeneracionGetXmls) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionGetXmls)) {
						blnGenerar=true;
						break;
					}
				} else if(strTipoGeneracion==strTipoGeneracionDeepForeignKey) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionDeepForeignKey)) {
						blnGenerar=true;
						break;
					}
				} else if(strTipoGeneracion==strTipoGeneracionDeepRelationship) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionDeepRelationship)) {
						blnGenerar=true;
						break;
					}
				} else if(strTipoGeneracion==strTipoGeneracionDeletesCascade) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionDeepForeignKeyAndRelatioship)) {
						blnGenerar=true;
						break;
					}
				}
			}
			
			return blnGenerar;
		
		}
		#endregion
		
		#region Persistence
		public const String strHqlJoinRelacionnes=" INNER JOIN ";//" JOIN FETCH ";
		public const String strJpaCascadeTypeDefault="";//CascadeType.ALL
		public const String strTipoParaFecha="Date";
		//SET NO ORDENA CON ORDER BY, UN CONTROL EXECIVO CON PRIMARY (LO HACE LA BD Y ES AUTO)
		public const String strTypeCollection="List";//"Set";
		public const String strTypeNewCollection="ArrayList";//"HashSet";
		public const String strTypeNewCollectionEnd="()";//"(0)";
		
		
		
		public bool EsPKCompuestoTabla(TableSchema table) {
			bool blnEsPKCompuesto=false;
			
			int intNumero=0;
			
			for (int i = 0; i < table.Columns.Count; i++){	
				if(table.Columns[i].IsPrimaryKeyMember){
					intNumero++; 
				}		
			}
			
			if(intNumero>1) {
				blnEsPKCompuesto=true;
			}
	
			return blnEsPKCompuesto;
		}
		
		#endregion
		
		#region Web
		public ArrayList arrBusquedaPorTablaFK=new ArrayList();
		public const String strJSInitialJavaScript="<script type=\"text/javascript\" language=\"javascript\">";	
		public const String strJSEndJavaScript="</script>";
		public const String strIncludeInit="<?php include_once(Constantes::$PATH_REL.Constantes::$strPathBaseJavaScriptToComplete.";//"<?php echo $javascript->link(";
		public const String strIncludeCssInit="<?php include_once(Constantes::$PATH_REL.Constantes::$strPathBaseCssToComplete.";//"<?php echo $javascript->link(";
		public const String strIncludeEnd="); ?>";
		public const String strIncludeCssEnd="); ?>";
		public const String strHtmlTypeBusquedaInicial="span  class=\"busquedatitulocampo\"";
		public const String strHtmlTypeBusquedaFinal="span";
		public const String strHtmlTypeElementoInicial="span class=\"elementotitulocampo\"";
		public const String strHtmlTypeElementoFinal="span";
		
		
		public String GetFkIncludeUseC(TableSchema tableSchema,String Empresa,String Package,bool blnConNewObject,String strTab,bool paraConstantesCargar) {
			String strFuncion=string.Empty;
			TableSchema tableRelacionada=null;
			String strSalto=string.Empty;
			String strModuloFk="";
			
			if(!blnConNewObject) {
				strSalto="\r\n";
			}
			ArrayList clases=new ArrayList();	
			
			for (int i = 0; i < tableSchema.Columns.Count; i++) {
				if(tableSchema.Columns[i].IsForeignKeyMember) {
					tableRelacionada=GetNombreTablaRelacionadaFromColumn(tableSchema.Columns[i]);						
					
					strModuloFk=GetModuloPaquetePhpFromTableFromPropertiesC(tableRelacionada,true);
					
					if(!ExisteClaseEnListaC(GetNombreClaseC(tableRelacionada.ToString()),clases)) {					
						if(!tableSchema.Name.Equals(tableRelacionada.Name)) {
							if(!paraConstantesCargar) {
								if(!usaConstantesCarga) {
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloFk+strPackageUtils+"/"+GetNombreClaseC(tableRelacionada.ToString())+"ConstantesFuncionesAdditional.php');";//Module
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloFk+strPackageUtils+"/"+GetNombreClaseC(tableRelacionada.ToString())+"ConstantesFunciones.php');";//Module
									strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloFk+strPackageUtils+"/"+GetNombreClaseC(tableRelacionada.ToString())+"ConstantesFunciones;"+strSalto;//Module
									
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+Package+"/"+strModuloFk+strPackageBusiness+"/"+strPackageEntities+"/"+GetNombreClaseC(tableRelacionada.ToString())+"Additional.php');";//Module
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+Package+"/"+strModuloFk+strPackageBusiness+"/"+strPackageEntities+"/"+GetNombreClaseC(tableRelacionada.ToString())+".php');";//Module
									strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+Package+"/"+strModuloFk+strPackageBusiness+"/"+strPackageEntities+"/"+GetNombreClaseC(tableRelacionada.ToString())+";"+strSalto;//Module
							
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloFk+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC(tableRelacionada.ToString())+"Logic.php');";//Module
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloFk+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC(tableRelacionada.ToString())+"LogicAdditional.php');";//Module
									strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloFk+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC(tableRelacionada.ToString())+"Logic;"+strSalto;//Module
								
								} else {
									strFuncion+="\r\n\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloFk+strPackageUtils+"/"+GetNombreClaseC(tableRelacionada.ToString())+"ConstantesCarga.php');";//Module
									strFuncion+="\r\n"+strTab+GetNombreClaseC(tableRelacionada.ToString())+"ConstantesCarga::cargarArchivosPaquetesBase($paqueteTipo);";//Module
								}
								
								if(blnConNewObject) {
									strFuncion+="\r\n"+strTab+"$"+GetNombreClaseObjetoC(tableRelacionada.ToString())+"Logic=new "+GetNombreClaseC(tableRelacionada.ToString())+"Logic();\r\n";//Module
								}
								
								if(blnConJQueryCode){
									//strFuncion+="\r\n"+strTab+"//include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloFk+strPackagePresentation+"/controller/"+GetNombreClaseC(tableRelacionada.ToString())+strPrefijoJSFFaces+".php');";//Module
								}
							} else {
								strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloFk+strPackageUtils+"/"+GetNombreClaseC(tableRelacionada.ToString())+"ConstantesCarga.php');";//Module
								strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloFk+strPackageUtils+"/"+GetNombreClaseC(tableRelacionada.ToString())+"ConstantesCarga;"+strSalto;//Module								
							}
						}
					}
					
					clases.Add(GetNombreClaseC(tableRelacionada.ToString()));
				}
			}
					
			return strFuncion; 
		}
		
		public String GetIncludeUseTablasClasesRelacionadasForeigKeysC(TableSchema TablaBase,String Empresa,String Package,String strTab) 
		{
			String strFuncion="";
			String strTablaClaseRelacionada=string.Empty;
			
			String sModuleFk="";
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			ArrayList clases=new ArrayList();		
			TableSchema tableSchemaFK=null;//GetTableSchemaFromColumnForeignKey(column);;
				
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				
				
				if(columnSchema.IsForeignKeyMember)
				{	//Trace.WriteLine(columnSchema.Name);
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					
					sModuleFk=Module;
					tableSchemaFK=GetTableSchemaFromColumnForeignKey(columnSchema);;
					
					if(!tableSchemaFK.Owner.Equals(TablaBase.Owner)) {
						sModuleFk=GetRelativePathNavegacionFKFromTableFromPropertiesC(tableSchemaFK,true);						
					}					
					
					
					if(!ExisteClaseEnListaC(GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)),clases)) {
						//Trace.WriteLine(sModuleFk+"."+GetNombreClaseRelacionadaFromColumn(columnSchema));
						
					//strTablaClaseRelacionada="\t\treturn $this->"+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+";\r\n";
						strFuncion+="\r\n\t"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+Package+"/"+sModuleFk+strPackageBusiness+"/"+strPackageEntities+"/"+	GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".php');";//Module
						strFuncion+="\r\n\t"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+Package+"/"+sModuleFk+strPackageBusiness+"/"+strPackageEntities+"/"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+";";//Module
					}
					
					clases.Add(GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)));
					
					}
			}
								
			return strFuncion; 
		}
		
		public String GetClasesRelacionadasIncludeUseC(TableSchema tableSchema,String Empresa,String Package,bool blnConNewObject,String strTab,bool paraConstantesCargar) {
			return GetClasesRelacionadasIncludeUseC(tableSchema,Empresa,Package,blnConNewObject,strTab,false,paraConstantesCargar);
		}
		
		public String GetClasesRelacionadasIncludeUseC(TableSchema tableSchema,String Empresa,String Package,bool blnConNewObject,String strTab,bool paraViewAdditional,bool paraConstantesCargar) {
			String strFuncion=string.Empty;
			TableSchema tableRelacionada=null;
			String strSalto=string.Empty;			
			
			if(!blnConNewObject) {
				strSalto="\r\n";
			}
			/*
			for (int i = 0; i < tableSchema.Columns.Count; i++) {
				if(tableSchema.Columns[i].IsForeignKeyMember) {
					tableRelacionada=GetNombreTablaRelacionadaFromColumn(tableSchema.Columns[i]);						
					
					strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC(tableRelacionada.ToString())+"Logic.php');";
					strFuncion+="\r\n"+strTab+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC(tableRelacionada.ToString())+"Logic;"+strSalto;
					
					if(blnConNewObject) {
						strFuncion+="\r\n"+strTab+"$"+GetNombreClaseObjetoC(tableRelacionada.ToString())+"Logic=new "+GetNombreClaseC(tableRelacionada.ToString())+"Logic();\r\n";
					}
				}
			}
			*/
			
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(tableSchema);
			ArrayList clases=new ArrayList();	
			String strModuloRel="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					if(!GetNombreClaseC("dbo."+collectionInfo.SecondaryTable).Equals(GetNombreClaseC(tableSchema.ToString()))) {
						strModuloRel=GetModuloPaquetePhpFromTableFromPropertiesC(collectionInfo.SecondaryTableSchema,true);
						
						if(!paraConstantesCargar) {
							//strTablaClaseRelacionada+="\r\n\tprivate "+"$"+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+";";
							
							if(!paraViewAdditional) {
								if(!usaConstantesCarga) {
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageEntities+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Additional.php');";
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageEntities+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".php');";
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageDataAccess+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccess.php');";
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageDataAccess+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccessAdditional.php');";									
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageInterface+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Implementable.php');";
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageInterface+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Additionable.php');";
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic.php');";
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"LogicAdditional.php');";
									strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic;"+strSalto;//Module
								} else {
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesCarga.php');";
									strFuncion+="\r\n"+strTab+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesCarga::cargarArchivosPaquetesBase($paqueteTipo);";
								}
							}
							
							if(!usaConstantesCarga) {
								strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFuncionesAdditional.php');";
								strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones.php');";
								strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones;"+strSalto;//Module
							}
							
							strFuncion+="\r\n\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackagePresentation+"/session/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strPrefijoJSFSessionFaces+"Additional.php');";
							strFuncion+="\r\n\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackagePresentation+"/session/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strPrefijoJSFSessionFaces+".php');";//Module
							strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloRel+strPackagePresentation+"/session/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strPrefijoJSFSessionFaces+";"+strSalto;//Module
							
							
							if(blnConNewObject) {
								strFuncion+="\r\n"+strTab+"$"+GetNombreClaseObjetoC(tableRelacionada.ToString())+"Logic=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic();\r\n";
							}
						} else {
							strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesCarga.php');";
							strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesCarga;"+strSalto;//Module							
						}
					}
				}
				else
				{
					if(!ExisteClaseEnListaC(GetNombreClaseC("dbo."+collectionInfo.SecondaryTable),clases)) {					
						if(!GetNombreClaseC("dbo."+collectionInfo.SecondaryTable).Equals(GetNombreClaseC(tableSchema.ToString()))) {						
							strModuloRel=GetModuloPaquetePhpFromTableFromPropertiesC(collectionInfo.SecondaryTableSchema,true);
					
							if(!paraConstantesCargar) {
								//strTablaClaseRelacionada+="\r\n\tprivate "+"$"+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "s;";
								if(!paraViewAdditional) {
									if(!usaConstantesCarga) {
										strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageEntities+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Additional.php');";//Module
										strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageEntities+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".php');";//Module
										strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageDataAccess+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccess.php');";//Module
										strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageDataAccess+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccessAdditional.php');";										
										strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageInterface+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Implementable.php');";//Module
										strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageInterface+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Additionable.php');";//Module
										strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic.php');";//Module
										strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"LogicAdditional.php');";
										strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloRel+strPackageBusiness+"/"+strPackageLogic+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic;"+strSalto;//Module
									
									} else {
										strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesCarga.php');";
										strFuncion+="\r\n"+strTab+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesCarga::cargarArchivosPaquetesBase($paqueteTipo);";
									}
								}
								
								if(!usaConstantesCarga) {
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFuncionesAdditional.php');";
									strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones.php');";//Module
									strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones;"+strSalto;//Module
								}
								
								strFuncion+="\r\n\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackagePresentation+"/session/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strPrefijoJSFSessionFaces+"Additional.php');";
								strFuncion+="\r\n\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackagePresentation+"/session/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strPrefijoJSFSessionFaces+".php');";//Module
								strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloRel+strPackagePresentation+"/session/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strPrefijoJSFSessionFaces+";"+strSalto;//Module
								
								if(blnConNewObject) {
									strFuncion+="\r\n"+strTab+"$"+GetNombreClaseObjetoC(tableRelacionada.ToString())+"Logic=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic();\r\n";
								}
							} else {
								strFuncion+="\r\n"+strTab+"include_once(Constantes::$PATH_REL.'"+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesCarga.php');";//Module
								strFuncion+="\r\n"+strTab+strPhp53VersionComment+"use "+Empresa+"/"+ Package+"/"+strModuloRel+strPackageUtils+"/"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesCarga;"+strSalto;//Module									
							}
						}
					}
					
					clases.Add(GetNombreClaseC("dbo."+collectionInfo.SecondaryTable));
					
				}
			}
			
			return strFuncion; 
		}

		public string GetPaqueteGenerarString(PaquetesGenerar paqueteGenerar)	{
			string sPaquete = GetPaqueteGenerarString(paqueteGenerar,"");
			
			return sPaquete;
			
		}
		
		public string GetPaqueteGenerarString(PaquetesGenerar paqueteGenerar,String strSubPaquete)	{
			string sPaquete = "TODOS";
			
			if(!strSubPaquete.Equals(String.Empty)) {
				strSubPaquete="-"+strSubPaquete;
			}
			
			switch(paqueteGenerar) {
				case(PaquetesGenerar.TODOS) :
					sPaquete = "TODOS"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.DATA_ACCESS) :
					sPaquete = "DATA_ACCESS"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.ENTITIES) :
					sPaquete = "ENTITIES"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.INTERFACE) :
					sPaquete = "INTERFACE"+strSubPaquete;
					break;
				
				case(PaquetesGenerar.LOGIC) :
					sPaquete = "LOGIC"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.CONSTANTES_FUNCIONES) :
					sPaquete = "CONSTANTES_FUNCIONES"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.EJB) :
					sPaquete = "EJB"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.CONTROLLER) :
					sPaquete = "CONTROLLER"+strSubPaquete;
					break;
				
				case(PaquetesGenerar.WEB) :
					sPaquete = "WEB"+strSubPaquete;
					break;
				
				case(PaquetesGenerar.REPORTE) :
					sPaquete = "REPORTE"+strSubPaquete;
					break;
				
				case(PaquetesGenerar.JAVASCRIP) :
					sPaquete = "JAVASCRIP"+strSubPaquete;
					break;
					
				default:
					sPaquete = "TODOS"+strSubPaquete;
					break;
			}
			
			return sPaquete;
		}
		
		public String GetWebRowAccionesTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool ConFaces,bool ConRichFaces) 
		{
			String strHtml="";
			
			String strRelaciones="";
			
			if(!esMantenimientoSimple)
			{
				strRelaciones="Relaciones";
			}
					
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t<form name=\"frmAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";								
			}
			else
			{				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t<h:form id=\"frmAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";			
				} else {
					//strHtml+="\r\n\t\t\t\t<form id=\"frmAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";			
				}	
			}
			
			
			String strObjectFace="";
			
			if(ConFaces||ConRichFaces)
			{
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
			

			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Acciones\" class=\"acciones\" style=\"display:none\">";							
			}
			else
			{	if(ConFaces||ConRichFaces)
				{
					//TABLA AUXILIAR PARA QUE EL PANEL ESTE BIEN UBICADO
					if(ConRichFaces){
							//COMENTADO PARA EMBEBER(deshabilitado)
							//strHtml+="\r\n\t\t<tr><td>";
						
						
						//strHtml+="\r\n\t\t\t<div id=\"divAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\">";//header=\"ACCIONES\"
						strHtml+="\r\n\t\t\t<?php if($strESBUSQUEDA=='false' ) {?>";
						strHtml+="\r\n\t\t\t<table style=\"text-align: center\">";
					}
										
					if(!blnConJQueryCode) {
						if(!ConPhpBasico) {
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><select id=\"ParametrosBusqueda-djcmbTiposRelaciones\" name=\"ParametrosBusqueda-djcmbTiposRelaciones\" style=\"width:150px\"></select></td>";
						}
						
						strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Acciones\" class=\"acciones\" style=\"display:<?php echo $"+strObjectFace+"->strVisibilidadTablaAcciones ?>\">";							
					} else {
						//PARAMETROS_ACCIONES ANTES
						
						strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Acciones\" class=\"acciones\" style=\"display:table-row\">";							
					}
				}
			}
			
			
			strHtml+="\r\n\t\t\t<td align=\"center\">";
			strHtml+="\r\n\t\t\t<a id=\"Acciones\" ></a>";
			
			strHtml+="\r\n\t\t\t\t<div align=\"right\">";
			strHtml+="\r\n\t\t\t\t<img style=\"visibility:visible\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/flechaarriba.gif\" width=\"15\" height=\"15\" onclick=\"funcionGeneral.irAreaDePagina('ControlesSecciones')\"/>";
			strHtml+="\r\n\t\t\t\t</div>";
			
			
			
			
			
			strHtml+="\r\n\t\t\t\t\t<table id=\"tblAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\" class=\"busqueda\" style=\"width: 50%;text-align: "+GetAlignTableFromPropertiesC(TablaBase)+"\">";
			strHtml+="\r\n\t\t\t\t\t\t<caption class=\"busquedacabecera\"><font>Acciones</font></caption>";
			strHtml+="\r\n\t\t\t\t\t\t<tr id=\"trAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"Basicos\">";
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			}
			else
			{
				if(ConFaces||ConRichFaces)
				{					
					if(!blnConJQueryCode) {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:<?php echo $"+strObjectFace+"->strVisibilidadCeldaNuevo"+GetNombreClaseC(TablaBase.ToString())+" ?>\">";
					} else {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
					}
				}
			}
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<a:widget id=\"btndjdjtNuevo"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strNuevo+"'}\" />";
			}
			else
			{
				//strHtml+="<a:widget id=\"btndjdjtNuevo"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strNuevo+"'}\" />";
				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtNuevo"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\""+  /*" action=\"#{sumarBean.Sumar}\""+*/" value=\""+strNuevo+"\"/>";
				} else {
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtNuevo"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" action=\"#{"+strObjectFace+"->nuevo}\"  value=\""+strNuevo+"\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+"?>\" reRender=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+","+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevo"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevo"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $form->submit('NUEVO',array('name'=>'btnNuevo"+GetNombreClaseC(TablaBase.ToString())+"','escape'=>false)); ?>";
										
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+" ?>\"><?php echo $ajax->submit('NUEVO', array('id'=>'btnNuevo"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnNuevo"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevo'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevo"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevo"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></div>";					
						strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+" ?>\"><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('NUEVO', array('id'=>'btnNuevo"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnNuevo"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevo'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevo"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevo"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></div>";					
					} else {
						//strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:table-row\"><?php echo $ajax->submit('NUEVO', array('url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevo'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevo"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevo"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();')); ?></div>";					
						strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:table-row\"><input type=\"button\" id=\"btnNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"NUEVO\"/></div>"; // class=\"botonnormal\"   onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"  					
					}
				}	
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			}
			else
			{
				if(ConFaces||ConRichFaces)
				{					
					if(!blnConJQueryCode) {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:<?php echo $"+strObjectFace+"->strVisibilidadCeldaActualizar"+GetNombreClaseC(TablaBase.ToString())+" ?>\">";
					} else {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
					}
				}
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<a:widget id=\"btndjdjtActualizar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strActualizar+"'}\" />";
			}
			else
			{
				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtActualizar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+"->actualizar}\" value=\""+strActualizar+"\"/>";
				} else {
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtActualizar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+"->actualizar}\" value=\""+strActualizar+"\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoActualizar"+GetNombreClaseC(TablaBase.ToString())+" ?>\" reRender=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+","+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $form->submit('ACTUALIZAR',array('name'=>'btnActualizar"+GetNombreClaseC(TablaBase.ToString())+"','escape'=>false)); ?>";
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoActualizar"+GetNombreClaseC(TablaBase.ToString())+" ?>\"><?php echo $ajax->submit('ACTUALIZAR', array('id'=>'btnActualizar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnActualizar"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'actualizar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></div>";					
						strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoActualizar"+GetNombreClaseC(TablaBase.ToString())+" ?>\"><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('ACTUALIZAR', array('id'=>'btnActualizar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnActualizar"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'actualizar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></div>";					
					} else {
						//strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divActualizar"+GetNombreClaseC(TablaBase.ToString())+" style=\"display:table-row\"><?php echo $ajax->submit('ACTUALIZAR', array('url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'actualizar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();')); ?></div>";	
						strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:table-row\"><input type=\"button\" id=\"btnActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"ACTUALIZAR "+GetTituloNombreTableFromPropertiesC(TablaBase)+" ACTUAL\" value=\""+strActualizar+"\"/></div>";//strEspaciosBotonesImg+    // class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"  	
					}						
				}	
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			
			String strEliminarPermiteFaces="";
			
			strEliminarPermiteFaces="<?php echo $"+strObjectFace+"->strVisibilidadCeldaEliminar"+GetNombreClaseC(TablaBase.ToString())+" ?>";
			
			if(!GetPermiteEliminarFromPropertiesC(TablaBase)) {
				 strEliminarPermiteFaces="hidden";
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			}
			else
			{
				if(ConFaces||ConRichFaces)
				{					
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $form->submit('ELIMINAR',array('name'=>'btnEliminar"+GetNombreClaseC(TablaBase.ToString())+"','escape'=>false)); ?>";
					
					if(!blnConJQueryCode) {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:"+strEliminarPermiteFaces+"\">";
					} else {
						if(!GetPermiteEliminarFromPropertiesC(TablaBase)) {
							strEliminarPermiteFaces="hidden";
						} else {
							strEliminarPermiteFaces="visible";	
						}
						
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:"+strEliminarPermiteFaces+"\">";
					}
					
				}
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<a:widget id=\"btndjdjtEliminar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strEliminar+"'}\" />";
			}
			else
			{				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtEliminar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+"->eliminar}\" value=\""+strEliminar+"\"/>";
				} else {
					//ANTES LOS DATOS ESTABAN AQUI, AHORA SE LOS TIENE EN EL MODAL PANEL
					//action=\"#{"+strObjectFace+"->eliminar}\"  reRender=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+","+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"
					
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtEliminar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  value=\""+strEliminar+"\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoEliminar"+GetNombreClaseC(TablaBase.ToString())+" ?>\" oncomplete=\"#{rich:component('mondalPanelEliminarConfirmacion"+GetNombreClaseC(TablaBase.ToString())+"')}.show()\" />";
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $form->submit('ELIMINAR',array('name'=>'btnEliminar"+GetNombreClaseC(TablaBase.ToString())+"','escape'=>false)); ?>";
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $ajax->submit('ELIMINAR', array('url'=> array('controller'=>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"s', 'action'=>'eliminar'), 'update' => 'divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"')); ?>";										
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoEliminar"+GetNombreClaseC(TablaBase.ToString())+" ?>\"><?php echo $ajax->submit('ELIMINAR', array('id'=>'btnEliminar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnEliminar"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'eliminar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></div>";					
						strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoEliminar"+GetNombreClaseC(TablaBase.ToString())+" ?>\"><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('ELIMINAR', array('id'=>'btnEliminar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnEliminar"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'eliminar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></div>";					
					} else {
						//strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:table-row\"><?php echo $ajax->submit('ELIMINAR', array('url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'eliminar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();')); ?></div>";					
						strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:table-row\"><input type=\"button\" id=\"btnEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"ELIMINAR "+GetTituloNombreTableFromPropertiesC(TablaBase)+" ACTUAL\" value=\""+strEliminar+"\"/></div>";//strEspaciosBotonesImg+    // class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"  					
					}
				}	
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			
			
			//BOTON IMPRIMIR
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnImprimir"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			}
			else
			{
				if(ConFaces||ConRichFaces)
				{										
					if(!blnConJQueryCode) {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnImprimir"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:<?php echo $"+strObjectFace+"->strVisibilidadCeldaCancelar"+GetNombreClaseC(TablaBase.ToString())+" ?>\">";
					} else {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnImprimir"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
					}
				}
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<a:widget id=\"btndjdjtImprimir"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strCancelar+"'}\" />";
			}
			else
			{
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtImprimir"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+"->cancelar}\" value=\""+strCancelar+"\"/>";
				} else {
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtCancelar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+"->cancelar}\" value=\""+strCancelar+"\" reRender=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $form->submit('CANCELAR',array('name'=>'btnCancelar"+GetNombreClaseC(TablaBase.ToString())+"','escape'=>false)); ?>";
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {						
						//strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $ajax->submit('IMP. PAGINA', array('id'=>'btnImprimir"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnImprimir"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','before'=>'funcionGeneral.mostrarOcultarProcesando(true,null);','complete' => 'funcionGeneral.printWebPage();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";											
						strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('IMP. DATOS', array('type'=>'button','id'=>'btnImprimir"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnImprimir"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','before'=>'funcionGeneral.mostrarOcultarProcesando(true,null);','complete' => 'funcionGeneral.printWebPage();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
					} else {
						strHtml+="\r\n\t\t\t\t\t\t\t\t<input type=\"button\" id=\"btnImprimir"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnImprimir"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"IMPRIMIR PAGINA "+GetTituloNombreTableFromPropertiesC(TablaBase)+" ACTUAL\" value=\""+strImprimirPagina+"\"/>";// class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"  					
					}
				}					
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";			
			//BOTON IMPRIMIR
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCancelar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			}
			else
			{
				if(ConFaces||ConRichFaces)
				{										
					if(!blnConJQueryCode) {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCancelar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:<?php echo $"+strObjectFace+"->strVisibilidadCeldaCancelar"+GetNombreClaseC(TablaBase.ToString())+" ?>\">";
					} else {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCancelar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
					}
				}
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<a:widget id=\"btndjdjtCancelar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strCancelar+"'}\" />";
			}
			else
			{
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtCancelar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+"->cancelar}\" value=\""+strCancelar+"\"/>";
				} else {
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtCancelar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+"->cancelar}\" value=\""+strCancelar+"\" reRender=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $form->submit('CANCELAR',array('name'=>'btnCancelar"+GetNombreClaseC(TablaBase.ToString())+"','escape'=>false)); ?>";
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $ajax->submit('CANCELAR', array('id'=>'btnCancelar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnCancelar"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'cancelar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";					
						strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('CANCELAR', array('id'=>'btnCancelar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnCancelar"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'cancelar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";					
					} else {
						strHtml+="\r\n\t\t\t\t\t\t\t\t<input type=\"button\" id=\"btnCancelar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnCancelar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"CANCELAR "+GetTituloNombreTableFromPropertiesC(TablaBase)+" ACTUAL\" value=\""+strCancelar+"\"/>";// class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"  					
					}
				}					
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t</tr>";
			strHtml+="\r\n\t\t\t\t\t\t<tr id=\"trAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"Guardar\" style=\"display:none\">";
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" colspan=\"4\" align=\"center\" style=\"visibility:visible\">";
			}
			else
			{
				if(ConFaces||ConRichFaces)
				{										
					if(!blnConJQueryCode) {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" colspan=\"4\" align=\"center\" style=\"visibility:<?php echo $"+strObjectFace+"->strVisibilidadCeldaGuardar"+GetNombreClaseC(TablaBase.ToString())+" ?>\">";
					} else {
						strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" colspan=\"4\" align=\"center\" style=\"visibility:visible\">";
					}
				}
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<br><a:widget id=\"btndjdjtGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strGuardarCambios+"'}\" />";
			}
			else
			{
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+"->guardarCambios}\" value=\""+strGuardarCambios+"\"/>";
				} else {
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+"->guardarCambios}\" value=\""+strGuardarCambios+"\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoActualizar"+GetNombreClaseC(TablaBase.ToString())+" ?>\" reRender=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+","+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
					//strHtml+="\r\n\t\t\t\t\t\t\t\t<?php echo $form->submit('GUARDAR CAMBIOS',array('name'=>'btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"','escape'=>false)); ?>";				
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoActualizar"+GetNombreClaseC(TablaBase.ToString())+" ?>\"><?php echo $ajax->submit('GUARDAR CAMBIOS', array('id'=>'btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'guardarCambios'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></div>";					
						strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoActualizar"+GetNombreClaseC(TablaBase.ToString())+" ?>\"><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('GUARDAR CAMBIOS', array('id'=>'btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'guardarCambios'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></div>";
						
					} else {
						//strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:table-row\"><?php echo $ajax->submit('GUARDAR CAMBIOS', array('url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'guardarCambios'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();')); ?></div>";					
						strHtml+="\r\n\t\t\t\t\t\t\t\t<div id=\"divGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:table-row\"><input type=\"button\" id=\"btnGuardarCambiosFormulario"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnGuardarCambiosFormulario"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"GUARDAR\" value=\"GUADAR CAMBIOS\"/></div>"; // class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"  					
					}
				}
				
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";					
			strHtml+="\r\n\t\t\t\t\t\t</tr>";
			strHtml+="\r\n\t\t\t\t\t</table>";
						
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t</form>";				
			}
						
						
			strHtml+="\r\n\t\t\t</td>";
			strHtml+="\r\n\t\t</tr>";
			
			if(ConFaces||ConRichFaces)
			{
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t</h:form>";		
				} else {
					//TABLA AUXILIAR PARA QUE EL PANEL ESTE BIEN UBICADO
			
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {

						if(ConRichFaces){
							String sStyleDivRelaciones="";
							
							if(ConPhpBasico) {
								sStyleDivRelaciones=" display:none;visibility:hidden;";
							}
							
							strHtml+="\r\n\t\t<?php if($strESRELACIONADO=='false') {?>";
							
							if(!blnConJQueryCode) {
								strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"ParametrosAcciones\" class=\"impresion\"  style=\"display:<?php echo $"+strObjectFace+"->strVisibilidadTablaElementos ?>\">";
							} else {
								strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"ParametrosAcciones\" class=\"impresion\"  style=\"display:table-row\">";
							}
							
							strHtml+="\r\n\t\t	<td align=\"center\">";
							strHtml+="\r\n\t\t		<table style=\""+sStyleDivRelaciones+"text-align: center;border: 0px solid black;padding: 0px; border-spacing: 0px\">";//border=\"\" 
							strHtml+="\r\n\t\t			<caption class=\"busquedacabecera\"><font>Acciones Extra/Post</font></caption>";
							strHtml+="\r\n\t\t		<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"FilaParametrosAcciones\">";						
							
							if(TieneClasesRelacionadasParaMostrarC(TablaBase)) {
								strHtml+="\r\n\t\t			<td>";
								//strHtml+="<select id=\"ParametrosPostAccion-djcmbTiposRelacionesFormulario\" name=\"ParametrosPostAccion-djcmbTiposRelacionesFormulario\" title=\"TIPOS DE RELACIONES\" style=\"width:200px\"></select>";
								strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->select('ParametrosPostAccion"+strSeparadorName+"djcmbTiposRelacionesFormulario',$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->tiposRelacionesFormulario,''); ?>";
								strHtml+="\r\n\t\t			</td>";
							}
							
							strHtml+="\r\n\t\t			<td>";
							//strHtml+="<select id=\"ParametrosPostAccion-djcmbAccionesFormulario\" name=\"ParametrosPostAccion-djcmbAccionesFormulario\" title=\"TIPOS DE ACCIONES\" style=\"width:200px\"></select>";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->select('ParametrosPostAccion"+strSeparadorName+"djcmbAccionesFormulario',$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->tiposAccionesFormulario,$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->strTipoAccion); ?>";
							strHtml+="\r\n\t\t			</td>";
							
							
							strHtml+="\r\n\t\t			";
							strHtml+="\r\n\t\t			<td><label>";
							//strHtml+="<input id=\"ParametrosPostAccion-chbPostAccionNuevo\" name=\"ParametrosPostAccion-chbPostAccionNuevo\" title=\"OTRO NUEVO REGISTRO\" type=\"checkbox\">";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->checkbox('ParametrosPostAccion"+strSeparadorName+"chbPostAccionNuevo',false)?>";
							strHtml+=strNuevo+"</label>";
							strHtml+="\r\n\t\t			</td>";
							
							
							strHtml+="\r\n\t\t			<td><label>";
							//strHtml+="<input id=\"ParametrosPostAccion-chbPostAccionSinCerrar\" name=\"ParametrosPostAccion-chbPostAccionSinCerrar\" title=\"SIN CERRAR FORMULARIO\" type=\"checkbox\">";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->checkbox('ParametrosPostAccion"+strSeparadorName+"chbPostAccionSinCerrar',false)?>";
							strHtml+=strSinCerrar+"</label>";
							strHtml+="\r\n\t\t			</td>";
							
							
							strHtml+="\r\n\t\t			<td><label>";
							//strHtml+="<input id=\"ParametrosPostAccion-chbPostAccionSinMensaje\" name=\"ParametrosPostAccion-chbPostAccionSinMensaje\" title=\"SIN MENSAJE CONFIRMACION\" type=\"checkbox\">";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->checkbox('ParametrosPostAccion"+strSeparadorName+"chbPostAccionSinMensaje',false)?>";
							strHtml+=strSinMensaje+"</label>";
							strHtml+="\r\n\t\t			</td>";					
							strHtml+="\r\n\t\t		</tr>";
							strHtml+="\r\n\t\t	</table>";
							strHtml+="\r\n\t\t	</td>";
							strHtml+="\r\n\t\t</tr>";
							strHtml+="\r\n\t\t<?php }?>";
							
							
							
							
							strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Mensajes\" class=\"mensajes\">";	
							strHtml+="\r\n\t\t\t<td align=\"center\">";
							strHtml+="<a id=\"Mensajes\" ></a>";
							//strHtml+="\r\n\t\t\t<rich:messages/>";
							strHtml+="\r\n\t\t\t</td>";
							strHtml+="\r\n\t\t</tr>";
							strHtml+="\r\n\t\t\t</table>";
							
							strHtml+="\r\n\t\t\t<?php } ?>";
							
							//strHtml+="\r\n\t\t\t</div>";				
							
							//COMENTADO PARA EMBEBER
							//strHtml+="\r\n\t\taa</td></tr>";	
							//strHtml+="</form>";
						}
						//strHtml+="\r\n\t\t\t\t</form>";	
					
					} else {
						if(ConRichFaces){
							String sStyleDivRelaciones="";
							
							if(ConPhpBasico) {
								sStyleDivRelaciones=" display:none;visibility:hidden;";
							}
							
							strHtml+="\r\n\t\t<?php if($strESRELACIONADO=='false') {?>";
							
							if(!blnConJQueryCode) {
								strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"ParametrosAcciones\" class=\"impresion\"  style=\"display:<?php echo $"+strObjectFace+"->strVisibilidadTablaElementos ?>\">";
							} else {
								strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"ParametrosAcciones\" class=\"impresion\"  style=\"display:table-row\">";
							}
							
							strHtml+="\r\n\t\t	<td align=\"center\">";
							strHtml+="\r\n\t\t		<table style=\""+sStyleDivRelaciones+"text-align: center;border: 0px solid black;padding: 0px; border-spacing: 0px\">";//border=\"\" 
							strHtml+="\r\n\t\t			<caption class=\"busquedacabecera\"><font>Acciones Extra/Post</font></caption>";
							strHtml+="\r\n\t\t		<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"FilaParametrosAcciones\">";						
							
							if(TieneClasesRelacionadasParaMostrarC(TablaBase)) {
								strHtml+="\r\n\t\t			<td><select id=\"ParametrosPostAccion-djcmbTiposRelacionesFormulario\" name=\"ParametrosPostAccion-djcmbTiposRelacionesFormulario\" title=\"TIPOS DE RELACIONES\" style=\"width:200px\"></select>";
								strHtml+="\r\n\t\t			</td>";
							}
							
							strHtml+="\r\n\t\t			<td><select id=\"ParametrosPostAccion-djcmbAccionesFormulario\" name=\"ParametrosPostAccion-djcmbAccionesFormulario\" title=\"TIPOS DE ACCIONES\" style=\"width:200px\"></select>";
							strHtml+="\r\n\t\t			</td>";
							
							//strHtml+="\r\n\t\t			<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"PostAccionNuevo\" align=\"center\" class=\"elementos\" title=\"NUEVO\" style=\"display:table-row\"><h2>"+strNuevo+"</h2></td>";
							
							strHtml+="\r\n\t\t			";
							strHtml+="\r\n\t\t			<td><label><input id=\"ParametrosPostAccion-chbPostAccionNuevo\" name=\"ParametrosPostAccion-chbPostAccionNuevo\" title=\"OTRO NUEVO REGISTRO\" type=\"checkbox\">"+strNuevo+"</label>";
							strHtml+="\r\n\t\t			</td>";
							
							//strHtml+="\r\n\t\t		<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"PostAccionSinCerrar\" align=\"center\" class=\"elementos\" style=\"display:table-row\"><h2>"+strSinCerrar+"</h2></td>";
							
							strHtml+="\r\n\t\t			<td><label><input id=\"ParametrosPostAccion-chbPostAccionSinCerrar\" name=\"ParametrosPostAccion-chbPostAccionSinCerrar\" title=\"SIN CERRAR FORMULARIO\" type=\"checkbox\">"+strSinCerrar+"</label>";
							strHtml+="\r\n\t\t			</td>";
							
							//strHtml+="\r\n\t\t			<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"PostAccionSinMensaje\" align=\"center\" class=\"elementos\" style=\"display:table-row\"><h2>"+strSinMensaje+"</h2></td>";
							
							strHtml+="\r\n\t\t			<td><label><input id=\"ParametrosPostAccion-chbPostAccionSinMensaje\" name=\"ParametrosPostAccion-chbPostAccionSinMensaje\" title=\"SIN MENSAJE CONFIRMACION\" type=\"checkbox\">"+strSinMensaje+"</label>";
							strHtml+="\r\n\t\t			</td>";					
							strHtml+="\r\n\t\t		</tr>";
							strHtml+="\r\n\t\t	</table>";
							strHtml+="\r\n\t\t	</td>";
							strHtml+="\r\n\t\t</tr>";
							strHtml+="\r\n\t\t<?php }?>";
							
							
							
							
							strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Mensajes\" class=\"mensajes\">";	
							strHtml+="\r\n\t\t\t<td align=\"center\">";
							strHtml+="<a id=\"Mensajes\" ></a>";
							//strHtml+="\r\n\t\t\t<rich:messages/>";
							strHtml+="\r\n\t\t\t</td>";
							strHtml+="\r\n\t\t</tr>";
							strHtml+="\r\n\t\t\t</table>";
							
							strHtml+="\r\n\t\t\t<?php } ?>";
							
							//strHtml+="\r\n\t\t\t</div>";				
							
							//COMENTADO PARA EMBEBER
							//strHtml+="\r\n\t\taa</td></tr>";	
							//strHtml+="</form>";
						}
						//strHtml+="\r\n\t\t\t\t</form>";
					}
				}
			}
			
			if(ConFaces||ConRichFaces)
			{
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Mensajes\" class=\"mensajes\">";	
					strHtml+="\r\n\t\t\t<td align=\"center\">";
					strHtml+="<a id=\"Mensajes\" ></a>";
					strHtml+="\r\n\t\t\t<h:messages/>";
					strHtml+="\r\n\t\t\t</td>";
					strHtml+="\r\n\t\t</tr>";		
				} else {
					/*
					strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Mensajes\" class=\"mensajes\">";	
					strHtml+="\r\n\t\t\t<td align=\"center\">";
					strHtml+="<a id=\"Mensajes\" ></a>";
					strHtml+="\r\n\t\t\t<rich:messages/>";
					strHtml+="\r\n\t\t\t</td>";
					strHtml+="\r\n\t\t</tr>";		
					*/
				}							
			}
			
		return strHtml;
		}
		
		public string GetFuncionesFormulariosArchivoC(TableSchema TablaBase) {
			string strFormularios="";
			string strTabMinimo="\t\t\t\t";
			bool blnExiste=false;
			//strFormularios="\r\n\tfunction guardarArchivo"+columnSchema.Name+"() {";
			//strFormularios+="\r\n\t}";
			ColumnSchema columnSchema=null;
			for (int i = 0; i < TablaBase.Columns.Count; i++){ 	
				columnSchema=TablaBase.Columns[i];
				
				//NO APLICADO POR EL MOMENTO
				if(!blnConJQueryCode) {
					if(EsPathImagenDocumentoArchivoColumn(columnSchema)){
						//NO-ACTUALIZAR-ARCHIVO-PAGINA
						if(ConArchivosV1Cake && ConCakePhp) {
							blnExiste=true;
							strFormularios+="\r\n"+strTabMinimo+"\t<tr id=\"trArchivo"+columnSchema.Name+"\" style=\"display:none\"><?php echo $this->Form->create('frmArchivo"+columnSchema.Name+"', array('type' => 'file','target' => 'iframeArchivo"+columnSchema.Name+"','url' => array('controller' => '"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action' => 'guardarArchivo"+columnSchema.Name+"'))); ?>";
							strFormularios+="\r\n"+strTabMinimo+"\t<td class=\"elementos\"><h2>"+GetWebNombreTituloColumnFromPropertiesC(columnSchema)+"</h2></td>";					
							
							if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
								//strFormularios+="\r\n"+strTabMinimo+"\t<td><?php echo $this->Form->input('archivo',array('class'=>'inputnormal','label' => '','type'=>'file'));?></td>";
								strFormularios+="\r\n"+strTabMinimo+"\t<td><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->input('archivo',array('class'=>'inputnormal','label' => '','type'=>'file'));?></td>";
							} else {
								strFormularios+="\r\n"+strTabMinimo+"\t<td><input id=\"archivo\" name=\"archivo\" type=\"file\" class=\"inputnormal\"></td>";
							}
							
							strFormularios+="\r\n"+strTabMinimo+"\t<td><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('ACTUALIZAR');?>";
							strFormularios+="\r\n"+strTabMinimo+"\t<iframe id=\"iframeArchivo"+columnSchema.Name+"\" name=\"iframeArchivo"+columnSchema.Name+"\" src=\"\" onload=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.onLoadIFrameActualArchivo"+columnSchema.Name+"();\"  style=\"width:0;height:0;border:0px solid #fff;\"></iframe></td>";
												
							if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
								//strFormularios+="\r\n"+strTabMinimo+"\t<td><?php echo $ajax->submit('CANCELAR', array('id'=>'btnCancelarArchivoActual"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnCancelarArchivoActual"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','before' => '"+GetNombreClaseObjetoC(columnSchema.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(columnSchema.Table.ToString())+"OnClick();','complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelarActualArchivo"+columnSchema.Name+"();"+GetNombreClaseObjetoC(columnSchema.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(columnSchema.Table.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>";					
								strFormularios+="\r\n"+strTabMinimo+"\t<td><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('CANCELAR', array('id'=>'btnCancelarArchivoActual"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnCancelarArchivoActual"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','before' => '"+GetNombreClaseObjetoC(columnSchema.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(columnSchema.Table.ToString())+"OnClick();','complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelarActualArchivo"+columnSchema.Name+"();"+GetNombreClaseObjetoC(columnSchema.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(columnSchema.Table.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>";					
							} else {
								strFormularios+="\r\n"+strTabMinimo+"\t<td><input type=\"button\" id=\"btnCancelarArchivoActual"+GetNombreClaseObjetoC(TablaBase.ToString())+"\" name=\"btnCancelarArchivoActual"+GetNombreClaseObjetoC(TablaBase.ToString())+"\" value=\"CANCELAR\"/></td>";// class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"  					
							}
							
							if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
								//strFormularios+="\r\n"+strTabMinimo+"\t<?php echo $form->end(); ?>\r\n"+strTabMinimo+"\t</td></tr>";
								strFormularios+="\r\n"+strTabMinimo+"\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>\r\n"+strTabMinimo+"\t</td></tr>";
							} else {
								strFormularios+="\r\n"+strTabMinimo+"\t</form>\r\n"+strTabMinimo+"\t</td></tr>";
							}
						}
					}
				}
			}				
			
			if(blnExiste) {
				//NO-ACTUALIZAR-ARCHIVO-PAGINA
				if(ConArchivosV1Cake) {
					strFormularios="\r\n\r\n"+strTabMinimo+"<table style=\"padding: 10px; border-spacing: 0px;\">"+strFormularios+"\r\n"+strTabMinimo+"</table>";
				}
			}
			
			return strFormularios;
		}

		public static TableSchema GetTableSchemaFromColumnForeignKey(ColumnSchema columnSchema) {		
			TableSchema tableSchema=null;
			
			tableSchema=GetTableSchemaFromColumnForeignKeyBase(columnSchema);
			
			return tableSchema;
		}
		
		public static TableSchema GetTableSchemaFromColumnForeignKeyBase(ColumnSchema columnSchema) {		
			TableSchema tableSchema=null;
			bool existe=false;
			//NO CAMBIAR POR DEFECTO DEBE SER NULO
			//tableSchema=columnSchema.Table;
			ArrayList arrayListForeignKeys =new ArrayList();
				
			TableKeySchemaCollection tableForeignKeySchemaCollection=new TableKeySchemaCollection();
			TableKeySchemaCollectionMe tableForeignKeySchemaCollectionMe=new TableKeySchemaCollectionMe();
			TableSchemaMe tableSchemaMe=new TableSchemaMe();
			
			tableForeignKeySchemaCollection=columnSchema.Table.ForeignKeys;
										
				foreach(TableKeySchema tableKeySchema in tableForeignKeySchemaCollection) {				
					
					existe=false;
					
					//if(!ExisteTablaEnListaC(tableKeySchema.PrimaryKeyTable,arrayListForeignKeys)) {
					//arrayListForeignKeys.Add(tableKeySchema.PrimaryKeyTable);
					//}
									
					//if(columnSchema.Name.Equals("idUnidad")) {
					//Trace.WriteLine(tableKeySchema.Name);
					//}
									
					//SOLO FUNCIONA CON FK SIMPLE CON 1 COLUMNA FK 
					if(tableKeySchema.ForeignKeyMemberColumns.Count==1) {
						/*
						if(columnSchema.Table.Name.Equals("Ciudad")) {
							Trace.WriteLine(tableKeySchema.Name+"oooooooooooooookkkkkkkkkkkk "+tableKeySchema.PrimaryKeyTable.Name);
						}
						*/
						
						foreach(MemberColumnSchema memberColumnSchema in tableKeySchema.ForeignKeyMemberColumns) {
							if(memberColumnSchema.Column.Equals(columnSchema)){
								existe=true;
								
								tableSchema=tableKeySchema.PrimaryKeyTable;
								break;
							}
						}
						
						if(existe) {
							break;
						}
					} else {
						/*
						if(columnSchema.Table.Name.Equals("Ciudad")) {
							Trace.WriteLine(tableKeySchema.Name+"oooooooooooooookkkkkkkkkkkk 2222 "+tableKeySchema.PrimaryKeyTable.Name);
							
							foreach(MemberColumnSchema memberColumnSchema in tableKeySchema.ForeignKeyMemberColumns) {
								Trace.WriteLine(memberColumnSchema.Column.Name);
							}
						}
						*/
					}
				}
			
			
			return tableSchema;
		}
		
		public String GetWebRowImagenAccionesTablaClaseC(TableSchema TablaBase,ColumnSchema column,bool ConFaces,bool ConRichFaces) 
		{
			String strHtml="";
			
			String strRelaciones="";
			
			//GetNombreColumnaClaseC(column)	
			
			
			strHtml+="\r\n\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Acciones\" class=\"acciones\" style=\"display:none\">";
			strHtml+="\r\n\t\t\t<td align=\"center\">";
			strHtml+="<a id=\"Acciones\" ></a>";
			strHtml+="\r\n\t\t\t\t<form name=\"frmAccionesMantenimiento"+GetNombreColumnaClaseC(column)+"\" method=\"post\" action=\""+GetRelativePathC(TablaBase)+GetNombreClaseC(TablaBase.ToString())+"Servlet\" enctype=\"multipart/form-data\">";
			strHtml+="\r\n\t\t\t\t\t<table id=\"tblAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"width: 50%;text-align: "+GetAlignTableFromPropertiesC(TablaBase)+"\">";
			strHtml+="\r\n\t\t\t\t\t\t<tr id=\"trAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"Basicos\">";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnArchivo"+GetNombreColumnaClaseC(column)+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t\t<input type=\"file\" name=\"fl"+GetNombreColumnaClaseC(column)+"\" id=\"fl"+GetNombreColumnaClaseC(column)+"\" onkeydown='this.blur()'>";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnAccionMantenimiento"+GetNombreColumnaClaseC(column)+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t\t<input name=\"accionMantenimiento\" type=\"hidden\" value=\"cargarImagen"+GetNombreClaseC(TablaBase.ToString())+GetNombreColumnaClaseC(column)+"Imagen\">";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCargar"+GetNombreColumnaClaseC(column)+"\"style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t\t<input type=\"button\" name=\"btnCargar"+GetNombreColumnaClaseC(column)+"\" value=\"Cargar "+GetWebNombreTituloColumnFromPropertiesC(column)+"\" />";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCancelar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t\t<a:widget id=\"btndjdjtCancelar"+GetNombreColumnaClaseC(column)+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strCancelar+"'}\" />";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			
			strHtml+="\r\n\t\t\t\t\t\t</tr>";
			
			strHtml+="\r\n\t\t\t\t\t\t<tr id=\"trAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"Guardar\">";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" colspan=\"4\" align=\"center\"style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";					
			strHtml+="\r\n\t\t\t\t\t\t</tr>";
			
			strHtml+="\r\n\t\t\t\t\t</table>";
			strHtml+="\r\n\t\t\t\t</form>";
			strHtml+="\r\n\t\t\t</td>";
			strHtml+="\r\n\t\t</tr>";
		
		return strHtml;
		}
		
		public ColumnSchemaCollection GetColumnsPKC(TableSchema tablaBase) {		
			ColumnSchemaCollection columnSchemaCollection=new ColumnSchemaCollection();
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					columnSchemaCollection.Add(tablaBase.Columns[i]);
				} 
			} 
			
			return columnSchemaCollection;
		}
		
		//DONDE
		/*
		0->NOMBRE
		1->NUMERO COLUMNAS
		2->ALINEACION(CENTER,WEST,EAST)
		3->BORDE(NORMAL,NINGUNO,VACIO)
		4->Y --> (Antes X)
		5->X --> (Antes Y)
		6->COLSPAN
		7->ROWSPAN
		*/		
		//|PANELCONUBICACION=true
		
		/*
		public class PanelNumeroColumna {
			public String nombre="";
			public int numero_columnas=0;
			public String alineacion="";
			public String borde="";
			public int x=0;
			public int y=0;
			public int colspan=0;
			public int rowspan=0;
			
			public PanelNumeroColumna() {
				
			}
		}
		*/
		public String GetWebRowGruposElementosTablaClaseC(TableSchema table,bool ConFaces,bool ConRichFaces,bool esPanelesFin) {
			String strHtml="";			
			String strHtmlIni="";
			String strHtmlFin="";
			String strHtmlTituloFila="";
			String strHtmlTablaCampos="";
			String strHtmlCampos="";
			String strAlign="";	
			String strAlignStyle="";	
			
			String strHtmlFilaCierraAbre="";	
			String strHtmlFilaCierra="";	
			
			String strPanelNumeroColumnas="";
			String[] arrPanelNumeroColumnas=null;
			String[] arrPanelNumeroColumna=null;
			String[,] arrPanelNumeroColumnaUbicacion=new String[25,25];
			PanelNumeroColumna[,] arrPanelNumeroColumnaClase=new PanelNumeroColumna[25,25];
			PanelNumeroColumna panelNumeroColumna=new PanelNumeroColumna();
			String strNombreSubPanelForm="";
			String strNombreSubPanelFormReversa="";
			
			int intNumeroColumnasSubPanelForm=0;
			int intX=0;
			int intY=0;
			int intYAnterior=0;
			int intColSpan=0;
			int intRowSpan=0;
			int intMaxX=0;
			int intMaxY=0;
			
			bool esUltimo=false;
			bool esPrimero=true;
			int i=0;
			
			String strHtmlColSpanGrupo="";	
			
			int intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(table);
				
			int intNumeroColumnasFormTotal=intNumeroColumnasForm * 2;
				
			strPanelNumeroColumnas=GetPanelNumeroColumnasTableFromPropertiesC(table);
			
				if(!strPanelNumeroColumnas.Equals("")) {
					//intNumeroColumnasSubPanelForm
					arrPanelNumeroColumnas=strPanelNumeroColumnas.Split(';');
					
					intMaxX=0;
					intMaxY=0;
			
					foreach(String strPanelNumeroColumnasAux in arrPanelNumeroColumnas) {
						i++;
						panelNumeroColumna=new PanelNumeroColumna();
						
						//Trace.WriteLine(i + "-" +arrPanelNumeroColumnas.Length+"-"+strPanelNumeroColumnasAux);
						
						//SIEMPRE TERMINA CON ; AUNQUE EL ULTIMO NO SE TOME EN CUENTA
						if(i==(arrPanelNumeroColumnas.Length-1)) {
							esUltimo=true;
						}
						
						strHtmlTituloFila="";
						strHtmlCampos="";
						strHtmlTablaCampos="";
						strHtmlIni="";
						strHtmlFin="";
						
						intX=0;
						intY=0;
						intColSpan=0;
						intRowSpan=0;
						
						strHtmlFilaCierraAbre="";
						strHtmlFilaCierra="";
						
						strHtmlColSpanGrupo="";
						
						if(strPanelNumeroColumnasAux.Trim().Equals("")) {
							continue;							
						}
						
						arrPanelNumeroColumna=strPanelNumeroColumnasAux.Split(',');
						intNumeroColumnasSubPanelForm=0;
						
						if((arrPanelNumeroColumna[0]!=null && !arrPanelNumeroColumna[0].Equals(""))) { //&& arrPanelNumeroColumnas[0].Equals(strPanelFin)
							//|| (arrPanelNumeroColumnas[0]!=null && arrPanelNumeroColumnas[0].Equals(strPanelInicio))) {
							
							strNombreSubPanelForm=arrPanelNumeroColumna[0];							
							panelNumeroColumna.nombre=strNombreSubPanelForm;
							
							if(arrPanelNumeroColumna[1]!=null) {
								//Trace.WriteLine(strNombreSubPanelForm+"-"+arrPanelNumeroColumnas[1]);							
								intNumeroColumnasSubPanelForm=int.Parse(arrPanelNumeroColumna[1]);
								panelNumeroColumna.numero_columnas=intNumeroColumnasSubPanelForm;
							}
							
							if(blnPanelConUbicacion) {																							
								
								if(arrPanelNumeroColumna[4]!=null) {
									if(arrPanelNumeroColumna[4]!="") {
										intY=int.Parse(arrPanelNumeroColumna[4]);
										panelNumeroColumna.y=intY;
										
										if(intY>intMaxY) {
											intMaxY=intY;
										}
									}
								}
								
								if(arrPanelNumeroColumna[5]!=null) {
									if(arrPanelNumeroColumna[5]!="") {
										intX=int.Parse(arrPanelNumeroColumna[5]);
										panelNumeroColumna.x=intX;
										
										if(intX>intMaxX) {
											intMaxX=intX;
										}
									}
								}
								
								if(arrPanelNumeroColumna[6]!=null) {
									if(arrPanelNumeroColumna[6]!="") {
										intColSpan=int.Parse(arrPanelNumeroColumna[6]);
										panelNumeroColumna.colspan=intColSpan;
										
										strHtmlColSpanGrupo=" colspan=\""+intColSpan+"\"";
									}
								}
								
								if(arrPanelNumeroColumna[7]!=null) {
									if(arrPanelNumeroColumna[7]!="") {
										intRowSpan=int.Parse(arrPanelNumeroColumna[7]);
										panelNumeroColumna.rowspan=intRowSpan;
									}
								}
							}
						}
												
						
						strNombreSubPanelFormReversa=GetPanelInicioNombreColumnReversaFromPropertiesC(strNombreSubPanelForm);
						
						//TITULO
						String sColSpan="";
						
						if(!blnPanelSinBasico) {
							sColSpan=" colspan=\""+intNumeroColumnasFormTotal+"\"";
						}
							
						if(!blnPanelConTab) {
							strHtmlTituloFila="";
							
							//UNA TABLA PARA TITULO Y CAMPOS
							if(blnPanelSinBasico) {
								//Trace.WriteLine(intY + "-" + intYAnterior);
								
								if(!blnPanelConUbicacion) {
									strHtmlFilaCierraAbre="<tr>";
									
								} else {
									/*
									if(esPrimero || intY!=intYAnterior) {
										if(esPrimero) {
											strHtmlFilaCierraAbre="<tr>";
										} else {
											strHtmlFilaCierraAbre="</tr><tr>";
										}
									}
									*/
								}
								
								//strHtmlColSpanGrupo+
								if(!blnPanelConUbicacion) {
									strHtmlTituloFila+="\r\n\t\t\t\t"+strHtmlFilaCierraAbre+"<td"+strHtmlColSpanGrupo+">";
								}
								
								strHtmlTituloFila+="\r\n\t\t\t\t\t<table>";
							}
							
							strHtmlTituloFila+="\r\n\t\t\t\t\t<tr class=\"busquedacabecera\">";//class=\"busquedacabecera\"
							strHtmlTituloFila+="\r\n\t\t\t\t\t\t<td"+sColSpan+"><font>"+strNombreSubPanelFormReversa+"</font>";//class=\"busquedatitulo\"						
							strHtmlTituloFila+="\r\n\t\t\t\t\t\t</td>";
							strHtmlTituloFila+="\r\n\t\t\t\t\t</tr>";
						}
						
						
						//if(!GetPanelConUbicacionTableFromPropertiesC(table)) {
							//PARA PANELES NORMAL VERTICAL, PANELES TAB Y PANELES FINAL
							//DATOS
							strHtmlIni+="BYDAN_TITULO";
							strHtmlIni+="\r\n\t\t\t\t\t<tr>";//class=\"busquedacabecera\"
							strHtmlIni+="\r\n\t\t\t\t\t\t<td"+sColSpan+">";//class=\"busquedatitulo\"
							
							if(blnPanelConTab) {
								strHtmlTablaCampos+="\r\n\t\t\t<div id=\"<?php echo($strSuf)?>"+strNombreSubPanelForm+"\">";
							}
							
							if(!blnPanelConUbicacion) {
								strAlign=" align=\"left\"";
								strAlignStyle="text-align:left";
								
							} else {
								strAlign=" align=\"center\"";
								strAlignStyle="text-align:center";
							}
							
							
							strHtmlTablaCampos+="\r\n\t\t\t\t<table class=\"elementos\" style=\"width:200px;"+strAlignStyle+"\">"; //"+strAlign+"	align=\""+GetAlignTableFromPropertiesC(TablaBase)+"\"
							
							
							if(blnPanelConTab /*|| blnPanelConUbicacion*/) {
								strHtmlTablaCampos+="\r\n\t\t\t\t\t<caption class=\"busquedacabecera\"><font>"+strNombreSubPanelFormReversa+"</font></caption>";
							}
							
							
							strHtmlCampos=getFilasColumnasCampos(table,ConFaces,ConRichFaces,false,true,arrPanelNumeroColumna[0],intNumeroColumnasSubPanelForm,esPanelesFin);
																		
							
							if(!strHtmlCampos.Equals("")) {
								//Trace.WriteLine(strHtmlIni);
								strHtmlIni=strHtmlIni.Replace("BYDAN_TITULO",strHtmlTituloFila);
								
								strHtmlTablaCampos+=strHtmlCampos;					
								
							} else {
								strHtmlIni=strHtmlIni.Replace("BYDAN_TITULO","");
								
								continue;
							}
							
							
							strHtmlTablaCampos+="\r\n\t\t\t\t</table>";
							
							
							//UNA TABLA PARA TITULO Y CAMPOS
							if(!blnPanelConTab) {
								if(blnPanelSinBasico) {																		
									strHtmlTablaCampos+="\r\n\t\t\t\t\t</td></tr>";
									strHtmlTablaCampos+="\r\n\t\t\t\t\t</table>";
								}
							}
							
							
							if(blnPanelConTab) {
								strHtmlTablaCampos+="\r\n\t\t\t</div>";
							}
																					
							
							if(!blnPanelConUbicacion) {
								strHtmlFin+="\r\n\t\t\t\t</td>";
							}
							
							
							if(!blnPanelConUbicacion) {
								strHtmlFilaCierra="</tr>";
								
							} else {
								/*
								if(!blnPanelConTab) {
									if(blnPanelSinBasico) {										
										if(esUltimo) {
											//Trace.WriteLine("Here");
											strHtmlFilaCierra="</tr>";									
										}
									}
									
								} else {
									strHtmlFilaCierra="</tr>";	
								}
								*/
							}
							
							strHtmlFin+=/*"\r\n\t\t\t\t\t"+*/strHtmlFilaCierra;
							
							
							//strHtmlFin+="\r\n\t\t\t\t\t</tr>";
							
							
							//if(true) {								
							if(!blnPanelConUbicacion) {
								strHtml+=strHtmlIni + strHtmlTablaCampos + strHtmlFin;
							
							} else {
							
							//if(blnPanelConUbicacion){
								//strHtml+=strHtmlIni;
								
								arrPanelNumeroColumnaUbicacion[intY,intX]=strHtmlTablaCampos;
								
								panelNumeroColumna.html=strHtmlIni + strHtmlTablaCampos + strHtmlFin;
								
								arrPanelNumeroColumnaClase[intY,intX]=panelNumeroColumna;
								
								//strHtml+=strHtmlFin;
							}
							
						//} else {
							
						//}		
						
						intYAnterior=intY;
						
						if(esPrimero) {
							esPrimero=false;
						}
					}
					
					//TALVEZ ACTIVAR: ANTES DE LO GUARDADO SE CREABA UBICACION
					if(blnPanelConUbicacion) {
						
						//strHtmlIni="";
						//strHtmlIni+="\r\n\t\t\t\t\t<tr>";//class=\"busquedacabecera\"
						//strHtmlIni+="\r\n\t\t\t\t\t\t<td>";//colspan=\""+intNumeroColumnasFormTotal+"\"		//class=\"busquedatitulo\"
														
						//strHtml+=strHtmlIni;
						
								//strHtml+="\r\n\t<table border=\"\">";
						
						String strHtmlTablaCamposActual="";
						String strHtmlColSpan="";
						String strHtmlRowSpan="";
						PanelNumeroColumna panelNumeroColumnaActual=new PanelNumeroColumna();
						bool esNuevaFila=false;
						int intColSpanActual=0;
						
						for(int iY=0;iY<=24;iY++) {
							esNuevaFila=true;
							
							//strHtml+="\r\n\t\t<tr>";
							
							for(int iX=0;iX<=24;iX++) {
								strHtmlTablaCamposActual=arrPanelNumeroColumnaUbicacion[iY,iX];
								
								panelNumeroColumnaActual=arrPanelNumeroColumnaClase[iY,iX];
								
								if(panelNumeroColumnaActual==null) {
									panelNumeroColumnaActual=new PanelNumeroColumna();
								}
								
								//if(!strHtmlTablaCamposActual.Equals("")) {
								if(!panelNumeroColumnaActual.html.Equals("")) {
									if(esNuevaFila) {
										strHtml+="\r\n\t\t<tr>";
										esNuevaFila=false;
									}
									
									strHtmlColSpan="";
									strHtmlRowSpan="";
									
									if(panelNumeroColumnaActual.colspan>0) {
										strHtmlColSpan=" colspan=\""+panelNumeroColumnaActual.colspan+"\"";
									}
									
									if(panelNumeroColumnaActual.rowspan>0) {
										strHtmlRowSpan=" rowspan=\""+panelNumeroColumnaActual.rowspan+"\"";
									}
									
									strHtml+="\r\n\t\t\t<td"+strHtmlColSpan+strHtmlRowSpan+" align=\"center\">";
									
									strHtml+=panelNumeroColumnaActual.html;
									
									//strHtml+=strHtmlTablaCamposActual;
									
									strHtml+="\r\n\t\t\t</td>";
																		
								}
							}
							
							if(!esNuevaFila) {
								strHtml+="\r\n\t\t</tr>";
							}
						}
						
						
								//strHtml+="\r\n\t</table>";
						
						//strHtmlFin="\r\n\t\t\t\t\t\t</td>";
						//strHtmlFin+="\r\n\t\t\t\t\t</tr>";
							
						//strHtml+=strHtmlFin;
																			
					}
				}
		
			return strHtml;
		}
		
		
		public String GetWebRowAuxiliaresTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,String Empresa,String Package) {
			String strHtml="";
			String strObjectFace="";
			
			if(ConFaces||ConRichFaces) {
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
				
			strHtml+="\r\n\t\t<?php if($strESRELACIONADO=='false') {?>";
						strHtml+="\r\n\t\t<tr><td>";
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="\r\n\t\t\t<?php echo $ajax->div('divAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
							//strHtml+="\r\n\t\t\t<?php echo $ajax->form(null,'post',array('id'=>'frmAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
							
							strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->div('divAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
							strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
							
						} else {
							strHtml+="\r\n\t\t\t<div id=\"divAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" style=\"height:250px;overflow:auto;\">";
							//ESTO EN CONTROLLER
							//strHtml+="\r\n\t\t\t\t<form id=\"frmAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"\">";
						}
						
						String sStyleDivRelaciones="";
						
						
						if(!blnConJQueryCode) {
							if(ConPhpBasico) {
								sStyleDivRelaciones=" style=\"display:none;visibility:hidden;\"";
							}
							
							strHtml+="\r\n\t\t\t\t<table "+sStyleDivRelaciones+">";
						}
						
						if(!blnConJQueryCode) {
							strHtml+="\r\n\t\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"AccionesRelaciones\" class=\"elementos\" style=\"display:<?php echo $"+strObjectFace+"->strVisibilidadTablaAccionesRelaciones ?>\"><td>";
						} else {
							//ESTO EN CONTROLLER
							//strHtml+="\r\n\t\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"AccionesRelaciones\" class=\"elementos\" style=\"display:table-row\">\r\n\t\t\t\t\t<td>";
						}
						
						if(!blnConJQueryCode) {
							strHtml+="\r\n\t\t\t\t\t\t<table id=\"tblAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"\" width=\"50%\" align=\"left\">";
							strHtml+=GetHtmlNavegacionTituloSoloTablaFacesTablasClasesRelacionadasC(TablaBase,esParaForeignKey,ConFaces,ConRichFaces,blnConJQueryCode,"",true);
						}
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="\r\n\t\t\t\t\t\t\t<tr><td colspan=\"2\"><?php echo $ajax->submit('CERRAR', array('id'=>'btnCancelarAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnCancelarAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'cancelarAccionesRelaciones'), 'update' => array('divAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td></tr>";					
							strHtml+="\r\n\t\t\t\t\t\t\t<tr><td colspan=\"2\"><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('CERRAR', array('id'=>'btnCancelarAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnCancelarAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'cancelarAccionesRelaciones'), 'update' => array('divAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td></tr>";					
						} else {
							//ESTO EN CONTROLLER
							//strHtml+="\r\n\t\t\t\t\t\t\t<tr>";
							//strHtml+="\r\n\t\t\t\t\t\t\t\t<td colspan=\"2\"><input type=\"button\" id=\"btnCancelarAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnCancelarAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"CERRAR\"/></td>";
							//strHtml+="\r\n\t\t\t\t\t\t\t</tr>";// class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"  					
						}
						
						if(!blnConJQueryCode) {
							strHtml+="\r\n\t\t\t\t\t\t</table>";
							strHtml+="\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>";
							strHtml+="\r\n\t\t\t\t</table>";
						}
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="\r\n\t\t\t<?php echo $form->end(); ?>";
							//strHtml+="\r\n\t\t\t<?php echo $ajax->divEnd('divAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
							
							strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";
							strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->divEnd('divAccionesRelaciones"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
						} else {
							//ESTO EN CONTROLLER
							//strHtml+="\r\n\t\t\t\t</form>";
							strHtml+="\r\n\t\t\t</div>";
						}
						
						strHtml+="\r\n\t\t</td></tr>";
						strHtml+="\r\n\t\t<?php }?>";
						
						//DIV ORDER BY
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							
							strHtml+="\r\n\r\n\t\t<tr><td>";
							
							strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmOrderBy"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmOrderBy"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
							strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->div('divOrderBy"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"',array('style'=>'display:none;')); ?>";											
							strHtml+="\r\n\t\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->htmlTablaOrderBy"+GetNombreClaseC(TablaBase.ToString())+"?>";
							strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->divEnd('divOrderBy"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
							strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";
							
							
							if(blnTieneRelaciones) {
								strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
								strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->div('divOrderByRel"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"',array('style'=>'display:none;')); ?>";											
								strHtml+="\r\n\t\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->htmlTablaOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"?>";
								strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->divEnd('divOrderByRel"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
								strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";
							}
							
							
							
							strHtml+="\r\n\t\t</td></tr>";
							
						} else {
							strHtml+="\r\n\r\n\t\t<tr><td>";
							
							strHtml+="\r\n\t\t\t<form id=\"frmOrderBy"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmOrderBy"+GetNombreClaseC(TablaBase.ToString())+"\">";
							strHtml+="\r\n\t\t\t\t<div id=\"divOrderBy"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" title=\"COLUMNAS\" style=\"height:200px;overflow:auto;\">";											
							strHtml+="\r\n\t\t\t\t</div>";
							strHtml+="\r\n\t\t\t</form>";
							
							
							if(blnTieneRelaciones) {
								strHtml+="\r\n\t\t\t<form id=\"frmOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"\">";
								strHtml+="\r\n\t\t\t\t<div id=\"divOrderByRel"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" title=\"RELACIONES\" style=\"height:200px;overflow:auto;\">";											
								strHtml+="\r\n\t\t\t\t</div>";
								strHtml+="\r\n\t\t\t</form>";
							}
							
							/*
							strHtml+="\r\n\t\t\t\t<div id=\"divTablaDatosReporteAuxiliar"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" title=\"REPORTE\">";											
							strHtml+="\r\n\t\t\t\t</div>";
							*/
							
							strHtml+="\r\n\t\t</td></tr>";
						}
						
			return strHtml;
		}
		
		public String GetWebRowElementosTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,String Empresa,String Package) 
		{
			String strHtml="";
			
			
			String strObjectFace="";
			
			
			if(ConFaces||ConRichFaces)
			{				
				if(!ConRichFaces) {
					strHtml+="<h:form id=\"frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";	
				} else {
					//strHtml+="<form id=\"frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";
				}
			}
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Elementos\" class=\"elementos\" style=\"display:none\">";
			}
			else
			{
				
				if(ConFaces||ConRichFaces)
				{
					strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
				}
				//TABLA AUXILIAR PARA QUE EL PANEL ESTE BIEN UBICADO
				
				if(ConRichFaces){
					strHtml+="\r\n\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"ElementosFormulario\"><td>";
					/*
					strHtml+="\r\n\t\t\t<rich:modalPanel id=\"modalPanel"+GetNombreClaseC(TablaBase.ToString())+"\" autosized=\"true\" width=\""+GetAnchoAuxiliarTableFromPropertiesC(TablaBase)+"\" height=\""+GetAltoAuxiliarTableFromPropertiesC(TablaBase)+"\">";
					strHtml+="\r\n\t\t\t<f:facet name=\"header\">";
					strHtml+="\r\n\t\t\t<h:outputText value=\""+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" />";
					strHtml+="\r\n\t\t\t</f:facet>";
					strHtml+="\r\n\t\t\t<f:facet name=\"controls\">";
					strHtml+="\r\n\t\t\t<h:panelGroup>";
					strHtml+="\r\n\t\t\t\t<h:graphicImage value=\"/Imagenes/cerrarmodal.gif\" id=\"graphicImageCerrar"+GetNombreClaseC(TablaBase.ToString())+"\"/>";
					strHtml+="\r\n\t\t\t\t<rich:componentControl for=\"modalPanel"+GetNombreClaseC(TablaBase.ToString())+"\" attachTo=\"graphicImageCerrar"+GetNombreClaseC(TablaBase.ToString())+"\" operation=\"hide\" event=\"onclick\" />";
					strHtml+="\r\n\t\t\t</h:panelGroup>";
					strHtml+="\r\n\t\t\t</f:facet>";
					*/
					//strHtml+="\r\n\t\t\t<div id=\"divModalPanelScroll"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"width:"+GetAnchoAuxiliarTableFromPropertiesC(TablaBase)+"px; height:"+GetAltoAuxiliarTableFromPropertiesC(TablaBase)+"px; overflow: auto;\">";
					//strHtml+="\r\n\t\t\t<div id=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" styleClass=\"superrichpanelmantenimientoajaxwebpart\">";//header=\""+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" rendered=\"#{"+strObjectFace+"->"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strId+">0}\"
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="\r\n\t\t\t<?php echo $ajax->div('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
						strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->div('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
					} else {
						strHtml+="\r\n\t\t\t<div id=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" title=\""+GetTituloNombreTableFromPropertiesC(TablaBase).ToUpper()+"\" style=\"height: 90%;width: 90%;position: relative;top: 30px;left: 30px;\">";
					}
					
					//strHtml+="\r\n\t\t\t<?php echo $ajax->form('/prepararEjecutarMantenimiento', 'post', array('update' => array('"+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'))); ?>";
									
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="\r\n\t\t\t<?php echo $ajax->form(null,'post',array('id'=>'frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
						strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
					} else {
						strHtml+="\r\n\t\t\t<form id=\"frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";
					}
					
					//TOOLBAR
					strHtml+="\r\n\r\n\t\t\t<br><br>";
					
					if(!blnConJQueryCode) {
						strHtml+="\r\n\r\n\t\t\t<table style=\"width: 65%\"><tr style=\"display:<?php echo $"+strObjectFace+"->strVisibilidadTablaElementos ?>\"><td align=\"center\">";
					} else {
						strHtml+="\r\n\r\n\t\t\t<table style=\"width: 65%\"><tr style=\"display:table-row\"><td align=\"center\">";	
					}
					
					if(!blnConJQueryCode) {
						strHtml+="\r\n\r\n\t\t\t<table style=\"text-align: center\"  style=\"display:<?php echo $"+strObjectFace+"->strVisibilidadTablaElementos ?>\">";					
					} else {
						strHtml+="\r\n\r\n\t\t\t<table style=\"text-align: center\"  style=\"display:table-row\">";					
					}
					
					strHtml+="\r\n\t\t\t\t<tr>";
					strHtml+="\r\n\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"ActualizarToolBar\" style=\"visibility:visible\"><img id=\"imgActualizarToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgActualizarToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"ACTUALIZAR "+GetTituloNombreTableFromPropertiesC(TablaBase)+" ACTUAL\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/actualizar.gif\" width=\"25\" height=\"25\"/></td>";//name=\"td"+GetNombreClaseC(TablaBase.ToString())+"ActualizarToolBar\" 
					strHtml+="\r\n\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"EliminarToolBar\" style=\"visibility:visible\"><img id=\"imgEliminarToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgEliminarToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"ELIMINAR "+GetTituloNombreTableFromPropertiesC(TablaBase)+" ACTUAL\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/eliminar.gif\" width=\"25\" height=\"25\"/></td>";//name=\"td"+GetNombreClaseC(TablaBase.ToString())+"EliminarToolBar\" 
					strHtml+="\r\n\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"CancelarToolBar\" style=\"visibility:visible\"><img id=\"imgCancelarToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgCancelarToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"CANCELAR "+GetTituloNombreTableFromPropertiesC(TablaBase)+" ACTUAL\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/cancelar.gif\" width=\"25\" height=\"25\"/></td>";//name=\"td"+GetNombreClaseC(TablaBase.ToString())+"CancelarToolBar\" 
					strHtml+="\r\n\t\t\t\t</tr>";
					strHtml+="\r\n\t\t\t</table>";				
					strHtml+="\r\n\r\n\t\t\t</td></tr></table>";
					
					
					strHtml+="\r\n\r\n\t\t\t<table>";
				}
												
				if(!blnConJQueryCode) {
					strHtml+="<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Elementos\" class=\"elementos\" style=\"display:<?php echo $"+strObjectFace+"->strVisibilidadTablaElementos ?>\">";
				} else {
					strHtml+="<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Elementos\" class=\"elementos\" style=\"display:table-row\">";
				}
			}
			
			strHtml+="\r\n\t\t\t<td align=\"center\">";
			strHtml+="\r\n\t\t\t<a id=\"Campos\"></a>";
			
			strHtml+="\r\n\t\t\t\t<div id=\"divFlechaArribaElementos\" align=\"left\">";
			strHtml+="\r\n\t\t\t\t<img style=\"visibility:visible\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/flechaarriba.gif\" width=\"15\" height=\"15\" onclick=\"funcionGeneral.irAreaDePagina('ControlesSecciones')\"/>";
			
			if(!blnConJQueryCode) {
				strHtml+="\r\n\t\t\t\t<span><?php echo $"+strObjectFace+"->strTituloPathElementoActual?></span>";
			} else {
				strHtml+="\r\n\t\t\t\t<span></span>";
			}
			
			strHtml+="\r\n\t\t\t\t</div>";
			
			if(blnPanelConTab) {
				strHtml+="\r\n\r\n\t\t\t\t<div id=\"tabs_elementos\" class=\"tabs\" style=\"width: 100%\">";
				strHtml+="\r\n\t\t\t\t\t<ul>";
				
				String strPanelNumeroColumnas=GetPanelNumeroColumnasTableFromPropertiesC(TablaBase);
				String strNombreSubPanelForm="";
				String strNombreSubPanelFormReversa="";
				String[] arrPanelNumeroColumnas=null;
				String[] arrPanelNumeroColumna=null;
				
				if(!strPanelNumeroColumnas.Equals("")) {
					
					arrPanelNumeroColumnas=strPanelNumeroColumnas.Split(';');
					
					foreach(String strPanelNumeroColumnasAux in arrPanelNumeroColumnas) {
						if(strPanelNumeroColumnasAux.Trim().Equals("")) {
							continue;							
						}
						
						arrPanelNumeroColumna=strPanelNumeroColumnasAux.Split(',');
						
						if((arrPanelNumeroColumna[0]!=null && !arrPanelNumeroColumna[0].Equals(""))) { //&& arrPanelNumeroColumnas[0].Equals(strPanelFin)
							//|| (arrPanelNumeroColumnas[0]!=null && arrPanelNumeroColumnas[0].Equals(strPanelInicio))) {
							
							strNombreSubPanelForm=arrPanelNumeroColumna[0];
							
							strNombreSubPanelFormReversa=GetPanelInicioNombreColumnReversaFromPropertiesC(strNombreSubPanelForm);
							
							strHtml+="\r\n\t\t\t\t\t\t<li class=\"titulotab\"><a href=\"#<?php echo($strSuf)?>"+strNombreSubPanelForm+"\">"+strNombreSubPanelFormReversa+"</a></li>";
																				
						}																																				
					}
				}								
				
				strHtml+="\r\n\t\t\t\t\t</ul>\r\n\r\n";
			}
			
			if(!ConFaces && !ConRichFaces) {
				strHtml+="<form name=\"frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";
			}
			
			
			
			strHtml+="\r\n\t\t\t\t<table class=\"elementos\" style=\"width: 250px; padding: 0px; border-spacing: 0px; text-align: "+GetAlignTableFromPropertiesC(TablaBase)+";\">";
			
			String strControl="";
			String strName="";
			String strTituloControl="";
			
			
			//SOLO SI ES NO STANDARD GENERA PRIMERO LOS ROWS Y CONTROLES FK PRIMERO
				if(blnNoStandardTableFromProperties) {	
					ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
					foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
						
						String strNameOnly=GetNameControlHtmlFkC(TablaBase,tableSchemaForeignKey);
						strTituloControl=GetTituloControlVariablesFkC(tableSchemaForeignKey);
						
						strName=" id=\""+strNameOnly+"\"";		
						
						String strOcultarColumna="visibility:visible";
						String strRowInit="\r\n\t\t\t\t\t<tr style=\""+strOcultarColumna+"\">"+strTituloControl+"\r\n\t\t\t\t\t\t<td>";
						String strRowEnd="\r\n\t\t\t\t\t\t</td>"+"\r\n\t\t\t\t\t</tr>";
						
						//<td class=\"titulocampo\"><span class=\"elementotitulocampo\">SISTEMA</span></td>
						if(!ConFaces&&!ConRichFaces) {
							strControl="<a:widget"+strName+"name=\"dojo.dijit.combobox\" value=\"[{label : 'Alabama', value : 'AL'}]\""+"/>";
						}
						else {
							if(ConFaces) {
								//YA NO IRIA ESTO
								//value=\"#{"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreClaseC(tableSchemaForeignKey.ToString())+"}\" 
								strControl="\r\n\t\t\t\t\t\t<h:selectOneMenu "+strName.Replace("name=","id=")+">\r\n";
								strControl+="\t\t\t\t\t\t\t\t<f:selectItems value=\"<?php echo $"+strObjectFace+"->"+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"s"+strForeignKey+"ListSelectItem ?>\"/>\r\n";		
								strControl+="\t\t\t\t\t\t\t</h:selectOneMenu>";
							} else {
								//rich:comboBox
								//YA NO IRIA ESTO
								//value=\"#{"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreClaseC(tableSchemaForeignKey.ToString())+"}\" 
								strControl="\r\n\t\t\t\t\t\t<div id=\"div"+   strNameOnly+"\">\r\n";
								strControl+="\t\t\t\t\t\t\t<h:selectOneMenu "+strName.Replace("name=","id=")+">\r\n";
								strControl+="\t\t\t\t\t\t\t\t<f:selectItems value=\"<?php echo $"+strObjectFace+"->"+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"s"+strForeignKey+"ListSelectItem ?>\"/>\r\n";		
								strControl+="\t\t\t\t\t\t\t</h:selectOneMenu>\r\n";
								strControl+="\t\t\t\t\t\t</div>";
								//rich:comboBox
							}		
							
							strControl=strRowInit+strControl+strRowEnd;
						}	
						
						strHtml+=strControl;
					}						
				}
			//SOLO SI ES NO STANDARD GENERA PRIMERO LOS ROWS Y CONTROLES FK PRIMERO
			int intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(TablaBase);
			int intContadorFilaColumna=1;
			bool blnIniciaFila=false;
			bool blnTerminaFila=false;
			int intColumnasRellenar=0;
			
			//Trace.WriteLine(TablaBase.Name+"-No Columnas:"+intNumeroColumnasForm);
			/*
			//OJO: SI CAMBIA AQUI, CAMBIA ABAJO PARA OCULTOS
			for (int i = 0; i < TablaBase.Columns.Count; i++){
				if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])
					||EsColumnaVariableGlobalDataBaseFromPropertiesC(TablaBase.Columns[i]) 
					|| EsColumnaVariableModuloGlobalC(TablaBase.Columns[i])) { 
						
					continue;
				}								
				
				if(intContadorFilaColumna==1) {
					blnIniciaFila=true;
					blnTerminaFila=false;
				} 
				
				if(intContadorFilaColumna.Equals(intNumeroColumnasForm)) {
					//blnIniciaFila=false;
					blnTerminaFila=true;
					intContadorFilaColumna=1;
				} else {
					intContadorFilaColumna++;
				}
				
				
				//FORZA TERMINAR FILA, SINO QUEDARIA ABIERTO
				if(i.Equals(TablaBase.Columns.Count-1)) {					
					if(!blnTerminaFila) {
						blnTerminaFila=true;
						intColumnasRellenar=intNumeroColumnasForm-(intContadorFilaColumna-1);
						//Trace.WriteLine("No Columnas:"+intColumnasRellenar);
					}															
				}
				
				//Trace.WriteLine(TablaBase.Name+"-term:"+blnTerminaFila);
				
				
				strHtml+=GetControlVariablesC(TablaBase.Columns[i],ConFaces,ConRichFaces,blnIniciaFila,blnTerminaFila,intNumeroColumnasForm,intColumnasRellenar);
				
				blnIniciaFila=false;
				blnTerminaFila=false;	
			}
			*/
			
			strHtml+=getFilasColumnasCampos(TablaBase,ConFaces,ConRichFaces,false,false,"",0,false);
			
			strHtml+=GetWebRowGruposElementosTablaClaseC(TablaBase,ConFaces,ConRichFaces,false);
			
			
			//VA ABAJO DE RELACIONADOS, PERO SE DEBE CREAR FORM TOTALES Y ACTUALIZAR VALORES TOTALES
			//PANELES FIN			
			//strHtml+=GetWebRowGruposElementosTablaClaseC(TablaBase,ConFaces,ConRichFaces,true);
			//PANELES FIN_FIN
			
			
			strHtml+="\r\n\t\t\t\t</table>";
			
			if(blnPanelConTab) {
				strHtml+="\r\n\t\t\t\t</div>";			
			}
									
			
			
			//ELEMENTOS OCULTOS			
			
			//REINICIALIZAR VARIABLES
			/*
			intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(TablaBase);
			intContadorFilaColumna=1;
			blnIniciaFila=false;
			blnTerminaFila=false;
			intColumnasRellenar=0;
			*/
			
			if(blnConJQueryCode) {
				//strHtml+="<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Elementos\" class=\"elementos\" style=\"display:table-row\">";
				strHtml+="\r\n\t\t\t\t<table class=\"elementos\" style=\"<?php echo($strStyleCamposOcultos); ?>\">";
				strHtml+="\r\n\t\t\t\t\t<caption class=\"busquedacabecera\"><font>Campos Ocultos</font></caption>";
				
				//strHtml+="\r\n\t\t\t\t<?php if(Constantes::$ISDEVELOPING) {?>";
				
				strHtml+=getFilasColumnasCampos(TablaBase,ConFaces,ConRichFaces,true,false,"",0,false);
				
				//TABLA-OCULTOS
				//OJO: SI CAMBIA AQUI, CAMBIA ABAJO PARA OCULTOS
				/*
				for (int i = 0; i < TablaBase.Columns.Count; i++){
					if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i]) 
						|| !(EsColumnaVariableGlobalDataBaseFromPropertiesC(TablaBase.Columns[i]) 
						|| EsColumnaVariableModuloGlobalC(TablaBase.Columns[i]))) { 
							
						continue;
					}								
					
					if(intContadorFilaColumna==1) {
						blnIniciaFila=true;
						blnTerminaFila=false;
					} 
					
					if(intContadorFilaColumna.Equals(intNumeroColumnasForm)) {
						//blnIniciaFila=false;
						blnTerminaFila=true;
						intContadorFilaColumna=1;
					} else {
						intContadorFilaColumna++;
					}
					
					
					//FORZA TERMINAR FILA, SINO QUEDARIA ABIERTO
					if(i.Equals(TablaBase.Columns.Count-1)) {					
						if(!blnTerminaFila) {
							blnTerminaFila=true;
							intColumnasRellenar=intNumeroColumnasForm-(intContadorFilaColumna-1);
							//Trace.WriteLine("No Columnas:"+intColumnasRellenar);
						}															
					}
					
					//Trace.WriteLine(TablaBase.Name+"-term:"+blnTerminaFila);
					
					
					strHtml+=GetControlVariablesC(TablaBase.Columns[i],ConFaces,ConRichFaces,blnIniciaFila,blnTerminaFila,intNumeroColumnasForm,intColumnasRellenar);
					
					blnIniciaFila=false;
					blnTerminaFila=false;	
				}
				*/
				//TABLA-OCULTOS
				
				
				//strHtml+="\r\n\t\t\t\t<?php }?>";				
				strHtml+="\r\n\t\t\t\t</table>";
			}
			//ELEMENTOS OCULTOS FIN
			
			
				
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="</form>";
				
			} else {
				//strHtml+="</h:form>";
				if(!ConRichFaces) {
					strHtml+="</h:form>";	
				} else {
					//strHtml+="</form>";
				}
			}
			
			String strPanelNumeroRelaciones="";
			
			if(GetEsGuardarRelacionesFromPropertiesC(TablaBase)) {
				strHtml+="\r\n\t\t\t<?php";
				strHtml+="\r\n\t\t\tif($strESRELACIONES==\"true\") {";
				
							
				strPanelNumeroRelaciones=GetPanelNumeroRelacionesTableFromPropertiesC(TablaBase);
			
				strHtml+="\r\n\r\n\t\t\t\techo('<table id=\"tbl_tabs_relaciones\" style=\"width: 100%\">');";
				
				//SI NO TIENE GRUPOS DE RELACIONES
				if(strPanelNumeroRelaciones.Equals("")) {
					//strHtml+="\r\n\t\t\t\techo('<table>');";
					strHtml+="\r\n\r\n\t\t\t\techo('<tr id=\"tr_tabs_general\" style=\"display:table-row\"><td>');";						
					strHtml+="\r\n\t\t\t\techo('<div id=\"tabs_general\" class=\"tabs\" style=\"width: 100%\">');";
					strHtml+="\r\n\t\t\t\t\techo('<ul>');";
					strHtml+=GetWebFuncionesTablasClasesRelacionadasC(TablaBase,true,true,"LLAMAR_TITULO_WEB_PAGINA",Empresa,Package,false,"");
					strHtml+="\r\n\t\t\t\t\techo('</ul>');";
					
					strHtml+=GetWebFuncionesTablasClasesRelacionadasC(TablaBase,true,true,"LLAMAR_WEB_PAGINA",Empresa,Package,false,"");
					
					strHtml+="\r\n\r\n\t\t\t\techo('</div>');";
					strHtml+="\r\n\t\t\t\techo('</td></tr>');";
				
				} else {
					strHtml+="\r\n\r\n\t\t\t\techo('<tr id=\"tr_navegacion_relaciones\"><td>');";						
					
					//BOTONES NAVEGACION
					strHtml+="\r\n\t\t\t\techo('<table style=\"text-align: left\">');";
					strHtml+="\r\n\t\t\t\techo('<tr>');";
					strHtml+=GetWebRowGruposRelacionesTablaClaseC(TablaBase,ConFaces,ConRichFaces,Empresa,Package,false,true,false,false);
					strHtml+="\r\n\t\t\t\techo('</tr>');";
					strHtml+="\r\n\t\t\t\techo('</table>');";
					
					strHtml+="\r\n\t\t\t\techo('</td></tr>');";
					
					//GRUPOS TAB RELACIONES
					strHtml+=GetWebRowGruposRelacionesTablaClaseC(TablaBase,ConFaces,ConRichFaces,Empresa,Package,false,false,false,false);
				}
				
				//strHtml+="\r\n\r\n\t\t\t\techo('</table>');";
				
				strHtml+="\r\n\r\n\t\t\t\techo('</table>');";
				strHtml+="\r\n\t\t\t}";
				strHtml+="\r\n\t\t\t?>";
			}
			
			
			if(GetEsGuardarRelacionesFromPropertiesC(TablaBase)) {
				if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
					//strHtml+="\r\n\t\t\t<?php echo $ajax->form(null,'post',array('id'=>'frmMantenimientoTotales"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
					strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmMantenimientoTotales"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
				} else {
					strHtml+="\r\n\t\t\t<form id=\"frmMantenimientoTotales"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";
				}
			}
			
			//NOTA:(DESHABILITADO)NO AQUI PORQUE NO EXISTE FORMS ANIDADOS, SE UBICA ARRIBA
			//PANELES FIN
			strHtml+=GetWebRowGruposElementosTablaClaseC(TablaBase,ConFaces,ConRichFaces,true);
			//PANELES FIN_FIN
			
			//BYDAN_TOUPDATE
			//FORMULARIO FINAL TOTALES (LUEGO DE RELACIONADOS), HAY QUE ACTUALIZAR NUEVO FORMULARIO
			if(GetEsGuardarRelacionesFromPropertiesC(TablaBase)) {
				if(!ConFaces&&!ConRichFaces) {
					strHtml+="</form>";
					
				} else {
					//strHtml+="</h:form>";
					if(!ConRichFaces) {
						strHtml+="</h:form>";	
					} else {
						//strHtml+="</form>";
					}
				}
			}
			
			

			
			strHtml+="\r\n\t\t\t</td>";
			strHtml+="</tr>";	
						
			
			
			//TABLA AUXILIAR PARA QUE EL PANEL ESTE BIEN UBICADO
			
			//if(ConRichFaces){
				strHtml+="\r\n\t\t\t</table>";
				
				
				
				//DESHABILITADO
				//strHtml+="\r\n\t\t</td></tr>";
				strHtml+="\r\n\r\n\t\t\t"+GetWebRowAccionesTablaClaseC(TablaBase,esMantenimientoSimple,esParaForeignKey,ConFaces,ConRichFaces);
				
				if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
					//strHtml+="\r\n\t\t\t<?php echo $form->end(); ?>";
					strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";
				} else {
					strHtml+="\r\n\t\t\t</form>";	
				}
				
				if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
					//strHtml+="\r\n\t\t\t<?php echo $ajax->divEnd('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
					strHtml+="\r\n\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->divEnd('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
				} else {
					strHtml+="\r\n\t\t\t</div>";
				}
				
				strHtml+="\r\n\t\t</td></tr>";	
				
				//SI NO USA FORM DETALLE AUXILIARES ADICIONARLOS
				if(!conFormDetalle) {
					//if(TieneClasesRelacionadasC(TablaBase)) {
						strHtml+=GetWebRowAuxiliaresTablaClaseC(TablaBase,esMantenimientoSimple,esParaForeignKey,ConFaces,ConRichFaces,Empresa,Package);															
					//}
				}
				
				
				strHtml+="\r\n\t\t<?php if($strESRELACIONADO=='false') {?>";
				strHtml+="\r\n\r\n\t\t<tr><td>";
				
					
				//FORMULARIOS DE ARCHIVOS
				strHtml+=GetFuncionesFormulariosArchivoC(TablaBase);
				//strHtml+="\r\n\t\t\t</div>";
				//strHtml+="\r\n\t\t\t</div>";
				//strHtml+="\r\n\t\t\t</rich:modalPanel>";	
				
				//SE CREA EL MODAL PANEL DE CONFIMACION DE ELIMINACION
				/*
				strHtml+="\r\n\t\t\t<rich:modalPanel id=\"mondalPanelEliminarConfirmacion"+GetNombreClaseC(TablaBase.ToString())+"\" autosized=\"true\" width=\"200\">";
				strHtml+="\r\n\t\t\t\t<f:facet name=\"header\">";
				strHtml+="\r\n\t\t\t\t<h:outputText value=\"ESTA SEGURO DE ELIMINAR EL/LA "+GetTituloNombreTableFromPropertiesC(TablaBase)+" SELECCIONADO ?\" style=\"padding-right:15px;\" />";
				strHtml+="\r\n\t\t\t</f:facet>";
				strHtml+="\r\n\t\t\t<f:facet name=\"controls\">";
				strHtml+="\r\n\t\t\t<h:panelGroup>";
				strHtml+="\r\n\t\t\t\t<h:graphicImage value=\"/Imagenes/eliminar.gif\" id=\"graphicImageEliminacion"+GetNombreClaseC(TablaBase.ToString())+"\" />";
				strHtml+="\r\n\t\t\t\t<rich:componentControl for=\"mondalPanelEliminarConfirmacion"+GetNombreClaseC(TablaBase.ToString())+"\" attachTo=\"graphicImageEliminacion"+GetNombreClaseC(TablaBase.ToString())+"\" operation=\"hide\" event=\"onclick\" />";
				strHtml+="\r\n\t\t\t</h:panelGroup>";
				strHtml+="\r\n\t\t\t</f:facet>";
				strHtml+="\r\n\t\t\t<h:form>";
				strHtml+="\r\n\t\t\t<table width=\"100%\">";
				strHtml+="\r\n\t\t\t<tbody>";
				strHtml+="\r\n\t\t\t<tr>";
				strHtml+="\r\n\t\t\t<td align=\"center\" width=\"50%\"><a4j:commandButton value=\"SI\"";
				strHtml+="\r\n\t\t\tajaxSingle=\"true\" action=\"#{"+strObjectFace+"->eliminar}\"";
				strHtml+="\r\n\t\t\tonclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"";
				strHtml+="\r\n\t\t\treRender=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+","+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" /></td>";
				strHtml+="\r\n\t\t\t<td align=\"center\" width=\"50%\"><a4j:commandButton";
				strHtml+="\r\n\t\t\tvalue=\"CANCELAR\"";
				strHtml+="\r\n\t\t\tonclick=\"#{rich:component('mondalPanelEliminarConfirmacion"+GetNombreClaseC(TablaBase.ToString())+"')}.hide();return false;\" />";
				strHtml+="\r\n\t\t\t</td>";
				strHtml+="\r\n\t\t\t</tr>";
				strHtml+="\r\n\t\t\t</tbody>";
				strHtml+="\r\n\t\t\t</table>";
				strHtml+="\r\n\t\t\t</h:form>";
				strHtml+="\r\n\t\t\t</rich:modalPanel>";
				*/
				
				strHtml+="\r\n\t\t</td></tr>";
				strHtml+="\r\n\t\t<?php }?>";
				
			//}

				
		return strHtml;
		}
		
		public String GetWebRowGruposRelacionesTablaClaseC(TableSchema table,bool ConFaces,bool ConRichFaces,String Empresa,String Package,bool esParaJQueryTabJavaScript,bool esParaBotonesNavegacion,bool esParaBotonesJQuery,bool esParaBotonesJsFuncion) {
			String strHtml="";
			
			String strPanelNumeroColumnas="";
			String[] arrPanelNumeroColumnas=null;
			String[] arrPanelNumeroColumna=null;
			String strNombreSubPanelForm="";
			String strNombreSubPanelFormReversa="";
			String strStylePanelDefecto="table-row";
			String strJavaScripOcultarFilas="";
			
			strPanelNumeroColumnas=GetPanelNumeroRelacionesTableFromPropertiesC(table);
			
				if(!strPanelNumeroColumnas.Equals("")) {
					//intNumeroColumnasSubPanelForm
					arrPanelNumeroColumnas=strPanelNumeroColumnas.Split(';');
					
					foreach(String strPanelNumeroColumnasAux in arrPanelNumeroColumnas) {
						arrPanelNumeroColumna=strPanelNumeroColumnasAux.Split(',');
						
						if((arrPanelNumeroColumna[0]!=null && !arrPanelNumeroColumna[0].Equals(""))) { //&& arrPanelNumeroColumnas[0].Equals(strPanelFin)
							//|| (arrPanelNumeroColumnas[0]!=null && arrPanelNumeroColumnas[0].Equals(strPanelInicio))) {
							
							strNombreSubPanelForm=arrPanelNumeroColumna[0];
							
							if(arrPanelNumeroColumna[1]!=null) {
								//intNumeroColumnasSubPanelForm=int.Parse(arrPanelNumeroColumnas[1]);
							}
						}
						
						if(!strNombreSubPanelForm.Equals("") && !strNombreSubPanelForm.Equals("general") && !strNombreSubPanelForm.Equals("GENERAL")) {
							strStylePanelDefecto="none";
						}
						
						strNombreSubPanelFormReversa=GetPanelInicioNombreColumnReversaFromPropertiesC(strNombreSubPanelForm);
						
						//Trace.WriteLine(strNombreSubPanelForm);
						
						if(!esParaJQueryTabJavaScript && !esParaBotonesNavegacion && !esParaBotonesJQuery && !esParaBotonesJsFuncion) {
							
							strHtml+="\r\n\r\n\t\t\t\techo('<tr id=\"tr_tabs_"+strNombreSubPanelForm+"\" style=\"display:"+strStylePanelDefecto+"\"><td>');";
							strHtml+="\r\n\t\t\t\techo('<div id=\"tabs_"+strNombreSubPanelForm+"\" class=\"tabs\" style=\"width: 100%\">');";
							strHtml+="\r\n\t\t\t\t\techo('<ul>');";
							strHtml+=GetWebFuncionesTablasClasesRelacionadasC(table,true,true,"LLAMAR_TITULO_WEB_PAGINA",Empresa,Package,true,strNombreSubPanelFormReversa);
							strHtml+="\r\n\t\t\t\t\techo('</ul>');";
							
							strHtml+=GetWebFuncionesTablasClasesRelacionadasC(table,true,true,"LLAMAR_WEB_PAGINA",Empresa,Package,true,strNombreSubPanelFormReversa);
							
							strHtml+="\r\n\r\n\t\t\t\techo('</div>');";
							strHtml+="\r\n\t\t\t\techo('</td></tr>');";
						
						} else if(esParaJQueryTabJavaScript) {
							//strHtml+=GetWebFuncionesTablasClasesRelacionadasC(table,true,true,"LLAMAR_JS_JQUERY_TAB",Empresa,Package,true,strNombreSubPanelFormReversa);
							strHtml+="\r\n\r\n\t\t\tif(document.getElementById(\"tabs_"+strNombreSubPanelForm+"\")!=null){";
							strHtml+="\r\n\t\t\t\tjQuery(\"#tabs_"+strNombreSubPanelForm+"\").tabs();";
							strHtml+="\r\n\t\t\t}";	
						
						} else if(esParaBotonesNavegacion) {
							strHtml+="\r\n\t\t\t\techo('<td>";
							strHtml+="<input type=\"button\" id=\"btnRelacion_"+strNombreSubPanelForm+"\" name=\"btnRelacion_"+strNombreSubPanelForm+"\" title=\""+strNombreSubPanelFormReversa+"\" value=\""+strNombreSubPanelFormReversa+"\"/>";
							strHtml+="</td>');";		
							
						} else if(esParaBotonesJQuery) {
							strJavaScripOcultarFilas+="\r\n\t\t\t\tdocument.getElementById(\"tr_tabs_"+strNombreSubPanelForm+"\").style.display=\"none\";";
							
							strHtml+="\r\n\r\n\r\n\t\t\tjQuery(\"#btnRelacion_"+strNombreSubPanelForm+"\").button();";
							strHtml+="\r\n\r\n\t\t\tjQuery(\"#btnRelacion_"+strNombreSubPanelForm+"\").click(function(){";
							strHtml+="\r\n\t\t\t\t//BYDAN_REPLACE";
							strHtml+="\r\n\r\n\t\t\t\t//MOSTRAR GRUPO";
							strHtml+="\r\n\t\t\t\tdocument.getElementById(\"tr_tabs_"+strNombreSubPanelForm+"\").style.display=\"table-row\";";
							strHtml+="\r\n\t\t\t});	";
							
						} else if(esParaBotonesJsFuncion) {
							
						}					
					}
				} else {
					
				}
		
		
			if(esParaBotonesJQuery) {
				strHtml=strHtml.Replace("//BYDAN_REPLACE",strJavaScripOcultarFilas);		
			}
			
			return strHtml;
		}
		
		public String getFilasColumnasCampos(TableSchema TablaBase,bool ConFaces,bool ConRichFaces,bool esParaOcultos,bool esParaGrupoElementos,String strGrupoElementos,int intNumeroColumnasFormGrupo,bool esPanelesFin) {
			
			//SOLO SI ES NO STANDARD GENERA PRIMERO LOS ROWS Y CONTROLES FK PRIMERO
			String strHtml="";
			int intNumeroColumnasForm=0;//GetAlignVerticalFormNumeroColumnasTableC(TablaBase);
			int intNumeroColumnasFormTotal=0;
			int intNumeroColumnasFormAux=0;
			
			if(!esParaGrupoElementos) {
				intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(TablaBase);
				
				intNumeroColumnasFormTotal=intNumeroColumnasForm * 2;
			
			} else {
				intNumeroColumnasForm=intNumeroColumnasFormGrupo;
				
				intNumeroColumnasFormAux=GetAlignVerticalFormNumeroColumnasTableC(TablaBase);
				
				intNumeroColumnasFormTotal=intNumeroColumnasFormAux * 2;
			}
						
			
			
			int intContadorFilaColumna=1;	
			bool blnIniciaFila=false;
			bool blnTerminaFila=false;
			int intColumnasRellenar=0;
			
			bool blnTerminaFilaAuxAnterior=false;
			//Trace.WriteLine(TablaBase.Name+"-No Columnas:"+intNumeroColumnasForm);
		
			//OJO: SI CAMBIA AQUI, CAMBIA ABAJO PARA OCULTOS
			for(int i = 0; i < TablaBase.Columns.Count; i++){
				if(!esParaOcultos) {
					if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])
						|| EsColumnaVariableGlobalDataBaseFromPropertiesC(TablaBase.Columns[i]) 
						|| EsColumnaVariableModuloGlobalC(TablaBase.Columns[i])
						|| GetNoInsertEditColumnFromPropertiesC(TablaBase.Columns[i])
					) { 
							
						continue;
					}
					
				} else {
					if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i]) 
						|| !(EsColumnaVariableGlobalDataBaseFromPropertiesC(TablaBase.Columns[i]) 
							|| EsColumnaVariableModuloGlobalC(TablaBase.Columns[i])
							|| GetNoInsertEditColumnFromPropertiesC(TablaBase.Columns[i])
							)
					) { 
								
							continue;
					}	
				}	
					
				//PARA MANEJAR GRUPOS DE ELEMENTOS
				if(!esParaOcultos) {
					if(!esParaGrupoElementos) {
						if(!GetPanelInicioNombreColumnFromPropertiesC(TablaBase.Columns[i]).Equals("")
							|| !GetPanelFinNombreColumnFromPropertiesC(TablaBase.Columns[i]).Equals("")) {
								
							continue;
						}
						
					} else {
						if(!esPanelesFin) {
							if(!GetPanelInicioNombreColumnFromPropertiesC(TablaBase.Columns[i]).Equals(strGrupoElementos)
								|| strGrupoElementos.Equals("")) {
									
								continue;
							}
						} else {
							if(!GetPanelFinNombreColumnFromPropertiesC(TablaBase.Columns[i]).Equals(strGrupoElementos)
								|| strGrupoElementos.Equals("")) {
									
								continue;
							}
						}
					}
				}
				
				//if(esParaOcultos)Trace.WriteLine("here");
				
				//Debugger.Break();
				
				
				/*
				//CORREGIR DEBUG
				if(TablaBase.Columns[i].Name.Equals(strVersionRow)) {
					//intContadorFilaColumna--;
				}
				*/	
					
				if(intContadorFilaColumna==1) { /* && !TablaBase.Columns[i].Name.Equals(strVersionRow)*/
					blnIniciaFila=true;
					blnTerminaFila=false;					
				} 
				
				if(intContadorFilaColumna.Equals(intNumeroColumnasForm) && !TablaBase.Columns[i].Name.Equals(strVersionRow)) {
					//blnIniciaFila=false;
					blnTerminaFila=true;
					intContadorFilaColumna=1;
				} else {
					//SI SE TOMA EN CUENTA VERSION ROW, QUEDA INCOMPLETA LA FILA
					if(!TablaBase.Columns[i].Name.Equals(strVersionRow)) {
						intContadorFilaColumna++;
					}
				}
				
				
				//FORZA TERMINAR FILA, SINO QUEDARIA ABIERTO
				if(i.Equals(TablaBase.Columns.Count-1)) {					
					if(!blnTerminaFila) {
						blnTerminaFila=true;
						intColumnasRellenar=intNumeroColumnasForm-(intContadorFilaColumna-1);
						//Trace.WriteLine("No Columnas:"+intColumnasRellenar);
					}															
				}
				
				//Trace.WriteLine(TablaBase.Name+"-term:"+blnTerminaFila);
				
				
				strHtml+=GetControlVariablesC(TablaBase.Columns[i],ConFaces,ConRichFaces,blnIniciaFila,blnTerminaFila,intNumeroColumnasForm,intColumnasRellenar);
				
				blnTerminaFilaAuxAnterior=blnTerminaFila;
				
				blnIniciaFila=false;
				blnTerminaFila=false;	
				
				if(GetEsNuevaFilaColumnFromPropertiesC(TablaBase.Columns[i])) {
					if(!blnTerminaFilaAuxAnterior) {
						strHtml+="\r\n\t\t\t\t\t</tr>";	
						//Trace.WriteLine(TablaBase.Columns[i]);
					} 
					
					
					
					if(!GetTituloNuevaFilaColumnFromPropertiesC(TablaBase.Columns[i]).Equals("")) {
						strHtml+="\r\n\t\t\t\t\t<tr class=\"busquedacabecera\">";//class=\"\"
						strHtml+="\r\n\t\t\t\t\t\t<td colspan=\""+intNumeroColumnasFormTotal+"\"><font>";//class=\"busquedatitulo\"
						strHtml+=""+GetTituloNuevaFilaColumnFromPropertiesC(TablaBase.Columns[i])+"</font>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						strHtml+="\r\n\t\t\t\t\t</tr>";
					}
					
					//strHtml+="\r\n<tr>";
					
					intContadorFilaColumna=1;
					
					//blnIniciaFila=true;
					//blnTerminaFila=false;
					
				}
			}
			
			return strHtml;
		}
		
		public bool ExisteTablaEnListaC(TableSchema tableExiste,ArrayList arrayList) {
			bool blnExiste=false;
				
			foreach(TableSchema tableSchema in arrayList) {
				if(tableSchema.Name.Equals(tableExiste.Name)) {
					blnExiste=true;
					break;	
				}
			}
			
			return blnExiste;
		}
		
		public bool ExisteClaseEnListaC(String tableExiste,ArrayList arrayList) {
			bool blnExiste=false;
				
			foreach(String tableSchema in arrayList) {
				if(tableSchema.Equals(tableExiste)) {
					blnExiste=true;
					break;	
				}
			}
			
			return blnExiste;
		}
		
		public ArrayList GetArrayListForeignKeys(TableSchema TablaBase) {		
			ArrayList arrayListForeignKeys =new ArrayList();
				
			foreach(TableKeySchema tableKeySchema in TablaBase.ForeignKeys) {
				if(!ExisteTablaEnListaC(tableKeySchema.PrimaryKeyTable,arrayListForeignKeys)) {
					arrayListForeignKeys.Add(tableKeySchema.PrimaryKeyTable);
				}
			}
			
			return arrayListForeignKeys;
		}
		
		public bool EsConPrePostFijoQueryC(ColumnSchema column) {
			bool blnPrePostFijo=false;
			
			if(EsVarCharColumn(column) ||EsCharColumn(column) ||EsDateTimeColumn(column)|| EsDateColumn(column)|| EsTimeColumn(column) ) {
				blnPrePostFijo=true;
			}
			
			return blnPrePostFijo;
		}
		
		public bool EsStringColumnC(ColumnSchema column) {
			bool blnPrePostFijo=false;
			
			if(EsVarCharColumn(column) ||EsCharColumn(column)) {
				blnPrePostFijo=true;
			}
			
			return blnPrePostFijo;
		}
		
		public String GetDefinicionElementosSwingTablaClaseC(TableSchema TablaBase) 
		{
			String strSwing="";
			
			for (int i = 0; i < TablaBase.Columns.Count; i++)
			{
				strSwing+=GetDefinicionControlVariablesSwingC(TablaBase.Columns[i],"","");
			}			
		
			return strSwing;
		}
		
		public static bool GetEsAutoReferenciadaTablaC(TableSchema tableSchema) {
			bool blnExiste=false;
			TableSchema tableSchemaFk;
			String strClasesAutoReferenciadasFromProperties=GetClasesAutoReferenciadasGlobalesDatabaseFromPropertiesC(tableSchema.Database);
			
			/*
			if(!strClasesAutoReferenciadasFromProperties.Equals("")) {
				if(ExisteEnListaComasC(strClasesAutoReferenciadasFromProperties,tableSchema.Name)) {
					blnExiste=true;					
				}
			} else {
			*/
				foreach(ColumnSchema columnSchema in tableSchema.Columns) {		
					if(columnSchema.IsForeignKeyMember){
						tableSchemaFk=GetTableSchemaFromColumnForeignKey(columnSchema);	
									
						if(tableSchemaFk.Name.Equals(tableSchema.Name)) {
							blnExiste=true;
							break;
						}
					}
				}	
			//}
			
			return blnExiste;
		}			
		
		public bool GetExisteBusquedasTablaC(TableSchema TablaBase) 
		{
				bool blnExisteBusqueda=false;
			
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					
					if(indexSchema.IsUnique)
					{
					}
					else
					{
						
						if(!blnExisteBusqueda)
						{
							blnExisteBusqueda=true;
						}
						
						
					}	
																																		
				}
			}
			
			
			return blnExisteBusqueda; 
		}
		
	
	public int GetNumeroMaximoColumnasBusquedasTablaC(TableSchema TablaBase) {						
			int intNumeroMaximo=1;		
			int intNumeroIndicesBusquedas=0;
			
			intNumeroMaximo=GetNumeroMaximoColumnasBusquedasTablaC(TablaBase,false,false,false,ref intNumeroIndicesBusquedas);
			
			return intNumeroMaximo;
		}
		
		public int GetNumeroIndicesBusquedasTablaC(TableSchema TablaBase) {						
			int intNumeroMaximo=1;		
			int intNumeroIndicesBusquedas=0;
			
			intNumeroMaximo=GetNumeroMaximoColumnasBusquedasTablaC(TablaBase,false,false,false,ref intNumeroIndicesBusquedas);
			
			return intNumeroIndicesBusquedas;
		}
		
		public int GetNumeroMaximoColumnasBusquedasTablaC(TableSchema TablaBase,bool conVarGlobal,bool conIndicesOcultos,bool conSoloFuncionBusqueda,ref int intNumeroIndicesBusquedas) {
			bool blnExisteBusqueda=false;
			bool blnEsBusquedaVariableGlobal=false;
			int intNumeroMaximo=1;
			intNumeroIndicesBusquedas=0;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
				if(!indexSchema.IsPrimaryKey) {					
					if(indexSchema.IsUnique) {
						
					} else {
						blnEsBusquedaVariableGlobal=false;
						
						if(!conVarGlobal) {
							if(indexSchema.MemberColumns.Count.Equals(1)) {
								foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
									if(EsColumnaVariableGlobalDataBaseFromPropertiesC(memberColumnSchema.Column) || EsColumnaVariableModuloGlobalC(memberColumnSchema.Column)) {
										blnEsBusquedaVariableGlobal=true;
									}
								}
							}
						}
						
						if(blnEsBusquedaVariableGlobal) {
							continue;	
						}
						
						if(!conIndicesOcultos) {							
							if(GetExisteIndiceOcultoC(TablaBase,indexSchema.Name)) {
								//Trace.WriteLine(indexSchema.Name);
								continue;
							}
						}
						
						//SI SE DETERMINA SOLO FUNCIONES BUSQUEDA
						if(conSoloFuncionBusqueda) {
							if(!indexSchema.Name.Contains("Busqueda")){
								continue;
							}
						}
						
						if(!blnExisteBusqueda) {
							blnExisteBusqueda=true;							
							
							if(indexSchema.MemberColumns.Count > intNumeroMaximo) {
								intNumeroMaximo=indexSchema.MemberColumns.Count;
							}
						}
						
						intNumeroIndicesBusquedas++;
					}																																			
				}
			}			
			
			return intNumeroMaximo;//blnExisteBusqueda; 
		}
		
	public String GetVariablesTodosIndicesTablasC(TableSchema TablaBase,bool esParaUso,bool conComaInicial) {
			return GetVariablesTodosIndicesTablasC(TablaBase,esParaUso,conComaInicial,"");	
		}
		
		public String GetVariablesTodosIndicesTablasC(TableSchema TablaBase,bool esParaUso,bool conComaInicial,String strNombreObjeto) {
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			bool existeBusqueda=false;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
					if(!indexSchema.IsPrimaryKey) {		
						if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
							continue;
						}
						
						if(indexSchema.IsUnique) {
							continue;
							//strInitFuncion+="\r\n"+GetWebMethodAnnotationFromConWebServicesC(ConWebServices)+" "+GetNombreClaseC(TablasBaseForReporte[i].ToString())+" "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+indexSchema.Name+"WithConnection(DatosCliente datosCliente,";
						} else {
							if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK")) {
							//strInitFuncion+="\r\n"+GetWebMethodAnnotationFromConWebServicesC(ConWebServices)+" "+strTypeCollection+"<"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"> "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"WithConnection(String sFinalQuery,Pagination pagination,DatosCliente datosCliente,";
							} else {
							//strInitFuncion+="\r\n"+GetWebMethodAnnotationFromConWebServicesC(ConWebServices)+" "+strTypeCollection+"<"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"> "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"WithConnection(DatosCliente datosCliente,";
							}
						}	
						
						if(!existeBusqueda) {
							existeBusqueda=true;
						}
						
						int count=1;	
						foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {														
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual"))) {
								if(!esParaUso) {
									strInitFuncion+="$";//GetTipoColumnaClaseC(memberColumnSchema.Column)+" ";
								}
								
								strInitFuncion+=strNombreObjeto+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+indexSchema.Name; 
							
								//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
								if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
									strInitFuncion+=",";
									
									if(!esParaUso) {
										strInitFuncion+="$";//GetTipoColumnaClaseC(memberColumnSchema.Column)+" ";
									}
									
									strInitFuncion+=strNombreObjeto+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal+indexSchema.Name; 
								}
								
								if(!indexSchema.MemberColumns.Count.Equals(count)) {
									strInitFuncion+=",";	
								}
							} else {
								if(!indexSchema.Name.Contains("BusquedaRango")) {
									if(!esParaUso) {
										strInitFuncion+="$";//GetTipoColumnaClaseC(memberColumnSchema.Column)+" ";
									}
									
									strInitFuncion+=strNombreObjeto+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+indexSchema.Name; 
								} else {
									if(!esParaUso) {
										strInitFuncion+="$";//GetTipoColumnaClaseC(memberColumnSchema.Column)+" ";
									}
									
									strInitFuncion+=strNombreObjeto+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"+indexSchema.Name; 
									strInitFuncion+=",";
									
									if(!esParaUso) {
										strInitFuncion+="$";//GetTipoColumnaClaseC(memberColumnSchema.Column)+" ";
									}
									
									strInitFuncion+=strNombreObjeto+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"+indexSchema.Name; 
									break;
								}
							}
							count++;
						}
						//strInitFuncion+=")throws Exception;";																																			
					}
				}
				
				if(existeBusqueda && conComaInicial) {
					strInitFuncion=","+strInitFuncion;	
				}
			
			//Trace.WriteLine(strInitFuncion);
			
			return strInitFuncion; 
		}
		
	public bool GetExisteIndiceOcultoC(TableSchema table,String strNombreIndice) {
			bool existe=false;
			
			String strClasesNoRelacionadas=GetNombresIndicesNoBusquedanFromTableFromPropertiesC(table);
				
			String[] strClases=strClasesNoRelacionadas.Split(',');
						
			//Trace.WriteLine(strNombreIndice+"-"+strClasesNoRelacionadas);
			
			foreach(String strClase in strClases) {						
				if(strClase.Equals(strNombreIndice)) {
					existe=true;
					break;
				}
			}
			
			return existe;
		}
		
		
		public static string GetNameControlHtmlFkC(TableSchema tableSchemaPk,TableSchema tableSchemaFk) {		
	String strName="";
	
	strName="cmb"+GetNombreClaseC(tableSchemaPk.ToString())+GetNombreClaseC(tableSchemaFk.ToString());
	
	return strName;
}

		public String GetIndicesInicializacionVariablesTablasClasesC(TableSchema TablaBase) 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n";
			bool blnExisteBusqueda=false;
			
			String strTabPanel=string.Empty;
			String strPanelesBusquedas=string.Empty;
			String strControlesPanelesBusquedas=string.Empty;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name))
					{
						continue;
					}
					
					if(indexSchema.IsUnique)
					{
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
					}
					else
					{
						
						if(!blnExisteBusqueda)
						{
							blnExisteBusqueda=true;
							strTabPanel="\r\n\t\tjTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+"=new JTabbedPane();\r\n";
							strTabPanel+="\r\n\t\tjTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setBorder(javax.swing.BorderFactory.createTitledBorder(\"Busquedas\"));\r\n";

						}
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							strPanelesBusquedas+="\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=new JPanel();\r\n";
							strPanelesBusquedas+="\t\tjButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= new JButton();\r\n";
 							strPanelesBusquedas+="\t\tjButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".setText(\"Buscar\");\r\n";
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String strFinalQuery,";
						}
						else
						{
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
						}
					}	
					int count=1;	
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
						
						if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
						{
							strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+"\r\n"; 
							
								
							if(!indexSchema.MemberColumns.Count.Equals(count))
							{
								//strInitFuncion+=";\r\n";	
							}
						}
						else
						{
							if(!indexSchema.Name.Contains("BusquedaRango"))
							{
								strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+"\r\n"; 
								
								
							}
							else
							{
								strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Inicial")+"\r\n";
								
								
								//strInitFuncion+=",";
								strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Final")+"\r\n"; 
								
								
								break;
							}
						}
						count++;
					}
					//strInitFuncion+=")throws Exception;";																																			
				}
			}
			
			strInitFuncion=strTabPanel+strPanelesBusquedas+strControlesPanelesBusquedas;	
			
			return strInitFuncion; 
		}
		
	public String GetObjetoBeanC(TableSchema TablaBase) {
		String strObjetoBean="$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean;
		
		return strObjetoBean;
	}

		public String GetIndicesSetVariablesToPanelsTablasClasesC(TableSchema TablaBase) 
		{
			
			
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n"; strInitFuncion+="";
			bool blnExisteBusqueda=false;
			
			String strAddTabPanel=string.Empty;
			String strTabPanel=string.Empty;
			String strPanelesBusquedas=string.Empty;
			String strControlesPanelesBusquedas=string.Empty;
			
			String strinitialHorizontalGroup=string.Empty;
			String strinitialVerticalGroup=string.Empty;
			String strFinallHorizontalGroup=string.Empty;
			String strFinalVerticalGroup=string.Empty;
			String strComponentsHorizontalGroup=string.Empty;
			String strComponentsVerticalGroup=string.Empty;
			String strGroup=string.Empty;
			String strTituloBusqueda="";
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name))
					{
						continue;
					}
					
					strinitialHorizontalGroup="\r\n\t\tGroupLayout jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout = new GroupLayout(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+");\r\n";
					strinitialHorizontalGroup+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.setAutoCreateContainerGaps(true);\r\n";
        			strinitialHorizontalGroup+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.setAutoCreateGaps(true);\r\n";
					strinitialHorizontalGroup+="\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".setLayout(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout);\r\n";
					strinitialHorizontalGroup+="\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.setHorizontalGroup(\r\n";
					strinitialHorizontalGroup+="\t\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createParallelGroup(Alignment.LEADING)\r\n";
					strinitialHorizontalGroup+="\t\t\t.addGroup(Alignment.TRAILING, jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createSequentialGroup()\r\n";
					strinitialHorizontalGroup+="\t\t\t\t.addGroup(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createParallelGroup(Alignment.TRAILING)\r\n";
					strinitialHorizontalGroup+="\t\t\t\t\t.addComponent(jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+")\r\n";
					strinitialHorizontalGroup+="\t\t\t\t\t.addGroup(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createSequentialGroup()\r\n";
					
					
					strFinallHorizontalGroup="\t\t\t\t))\r\n";
					strFinallHorizontalGroup+="\t\t\t)\r\n";
					strFinallHorizontalGroup+="\t\t);\r\n";
					
					strinitialVerticalGroup="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.setVerticalGroup(\r\n";
					strinitialVerticalGroup+="\r\n\t\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createParallelGroup(Alignment.LEADING)\r\n";
					strinitialVerticalGroup+="\r\n\t\t\t.addGroup(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createSequentialGroup()\r\n";
					strinitialVerticalGroup+="\r\n\t\t\t.addGroup(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createParallelGroup(Alignment.BASELINE)\r\n";
			
					strFinalVerticalGroup="\r\n\t\t\t\t\t)\r\n";								
					strFinalVerticalGroup+="\r\n\t\t\t\t\t\t\t.addComponent(jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+")\r\n";
					strFinalVerticalGroup+="\r\n\t\t\t\t\t\t\t)\r\n";
					strFinalVerticalGroup+="\r\n\t\t\t\t\t);\r\n";
					
					if(indexSchema.IsUnique)
					{
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
						continue;
					}
					else
					{
						
						if(!blnExisteBusqueda)
						{
							blnExisteBusqueda=true;
							//strTabPanel="\r\n\t\tjTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+"=new JTabbedPane();\r\n";
						}
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strPanelesBusquedas+="\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=new JPanel();\r\n";
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String strFinalQuery,";
						}
						else
						{
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
						}
					}	
					strComponentsHorizontalGroup="";
					strComponentsVerticalGroup="";
					int count=1;	
					strTituloBusqueda="";
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
						
						if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
						{
							//strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+"\r\n"; 
							
							
							strComponentsHorizontalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
							strComponentsHorizontalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE,  GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
							
							strComponentsVerticalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
							strComponentsVerticalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
							
							strTituloBusqueda+=strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" ";
							
							if(!indexSchema.MemberColumns.Count.Equals(count))
							{
								//strInitFuncion+=";\r\n";	
							}
						}
						else
						{
							if(!indexSchema.Name.Contains("BusquedaRango"))
							{
								strComponentsHorizontalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
								strComponentsHorizontalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
								
								strComponentsVerticalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
								strComponentsVerticalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
							
								strTituloBusqueda+=strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" ";
							}
							else
							{
								strComponentsHorizontalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Inicial")+", GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
								strComponentsHorizontalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Inicial")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
								
								strTituloBusqueda+=strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" INICIAL ";
								
								strComponentsVerticalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Final")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
								strComponentsVerticalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Final")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
							
								strTituloBusqueda+=strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" FINAL ";
								
								
								break;
							}
						}
						count++;
					}
					//strInitFuncion+=")throws Exception;";	
					
					
					strAddTabPanel="jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".addTab(\""+strTituloBusqueda+"\", jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+");\r\n";
					
					strGroup+=strinitialHorizontalGroup+strComponentsHorizontalGroup+strFinallHorizontalGroup+strinitialVerticalGroup+strComponentsVerticalGroup+strFinalVerticalGroup+strAddTabPanel;
					
				}
			}
			
			//strInitFuncion=strTabPanel+strPanelesBusquedas+strControlesPanelesBusquedas;	
			
			return strGroup; 
		}
		
		public String GetElementosSwingTablaClaseC(TableSchema TablaBase) 
		{
			String strSwing="";
			
			for (int i = 0; i < TablaBase.Columns.Count; i++)
			{
				strSwing+=GetControlVariablesSwingC(TablaBase.Columns[i]);
			}			
		
			return strSwing;
		}
		
		public String GetWebRowPaginacionYNuevoTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool esParaReportes,bool ConFaces,bool ConRichFaces,bool EsParaBusquedaRapida) 
		{
			String strHtml="";
			String strPaginacionUnoAUno="";
			
			if(blnEsTablaUnoAUnoFk) {
				strPaginacionUnoAUno=" style=\"display:none\"";
			}
			
			String strStyleDisplayPaginacion="table-row";
					
			if(blnEsProceso) {
				strStyleDisplayPaginacion="none";
			}
			
			strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Paginacion\" style=\"display:"+strStyleDisplayPaginacion+"\">";
			strHtml+="\r\n\t\t\t<td align=\""+GetAlignTableFromPropertiesC(TablaBase)+"\">";
			
			if(ConFaces||ConRichFaces)
			{				
				if(!ConRichFaces) {
					//strHtml+="\r\n\t\t\t\t<h:form>";
				} else {
					//strHtml+="\r\n\t\t\t\t<form  id=\"frmPaginacion"+GetNombreClaseC(TablaBase.ToString())+"\">";
					strHtml+="\r\n\t\t\t\t<div id=\"div"+GetNombreClaseC(TablaBase.ToString())+"Paginacion"+strAjaxWebPart+"\">";
				}
			}
			
			//strHtml+="\r\n\t\t\t\t<?php echo $ajax->form('/paginar', 'post', array('update' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"')); ?>";
			
			if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
				//strHtml+="\r\n\t\t\t\t<?php echo $ajax->form(null,'post',array('id'=>'frmPaginacion"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmPaginacion"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
				strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmPaginacion"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmPaginacion"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
			} else {
				strHtml+="\r\n\t\t\t\t<form id=\"frmPaginacion"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmPaginacion"+GetNombreClaseC(TablaBase.ToString())+"\">";
			}
						
			strHtml+="\r\n\t\t\t\t<table style=\"width: 250px;padding: 0px; border-spacing: 0px;text-align:"+GetAlignTableFromPropertiesC(TablaBase)+"\">";
			strHtml+="\r\n\t\t\t\t\t<tr"+strPaginacionUnoAUno +">";
			strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
			
			String strObjectFace="";
			String strValueFace="";strValueFace+="";
				
			if(ConFaces||ConRichFaces)
			{
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
				
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<br><a:widget id=\"btndjdjtAnteriores"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: '<<'}\" />";
			}
			else
			{
				if(!ConRichFaces) {
					strHtml+="<br><h:commandButton id=\"btndjdjtAnteriores"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->anteriores}\"  value=\"<<\" />";
				} else {
					//strHtml+="<br><a4j:commandButton id=\"btndjdjtAnteriores"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->anteriores}\"  value=\"<<\"  reRender=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.anteriores"+GetNombreClaseC(TablaBase.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.anteriores"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete()\"/>";
					//strHtml+="<?php echo $form->submit('<<',array('name'=>'btnAnteriores"+GetNombreClaseC(TablaBase.ToString())+"','escape'=>false)); ?>";
																				
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="<?php echo $ajax->submit('<<', array('id'=>'btnAnteriores"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnAnteriores"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'anteriores'), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.anteriores"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.anteriores"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
						strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('<<', array('id'=>'btnAnteriores"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnAnteriores"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'anteriores'), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.anteriores"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.anteriores"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
					} else {
						strHtml+="<input type=\"button\" id=\"btnAnteriores"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnAnteriores"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"ANTERIORES\" value=\"&lt;&lt;\"/>";//&lt;&lt; // class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\" 
					}
				}								
			}
			
			strHtml+="\r\n\t\t\t\t\t\t</td>";
			
			String strStyleVisibilityNuevoTabla="visible";
					
			if(blnEsReporte) {
				strStyleVisibilityNuevoTabla="hidden";
			}
			
			strHtml+="\r\n\t\t\t\t\t\t<?php if($strESBUSQUEDA=='false' && $strESRELACIONES=='false') {?>";
			
			if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
				strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\" id=\"td"+GetNombreClaseC(TablaBase.ToString())+"NuevoGuardarCambios\" style=\"display:none;visibility:"+strStyleVisibilityNuevoTabla+"\">";
			} else {
				strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\" id=\"td"+GetNombreClaseC(TablaBase.ToString())+"NuevoGuardarCambios\" style=\"visibility:"+strStyleVisibilityNuevoTabla+"\">";
			}
			
			//strSeparadorName="";
	
			/*
			if(!blnConJQueryCode) {
				if(!ConPhpBasico){
					strSeparadorName=".";
				} else {
					strSeparadorName="-";
				}
			} else {
				strSeparadorName="-";
			}
			*/
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<br><a:widget id=\"btndjdjtSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: '>>'}\" />";
			}
			else
			{				
				if(!ConRichFaces) {
					strHtml+="<br><h:commandButton id=\"btndjdjtSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->siguientes}\"  value=\">>\" />";
				} else {
					//strHtml+="<br><a4j:commandButton id=\"btndjdjtSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->siguientes}\"  value=\">>\" reRender=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete()\"/>";
					//strHtml+="<?php echo $form->submit('>>'); ?>";
					//strHtml+="<?php echo $form->submit('>>',array('name'=>'btnSiguientes"+GetNombreClaseC(TablaBase.ToString())+"','escape'=>false)); ?>";
					
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="<?php echo $ajax->submit('>>', array('id'=>'btnSiguientes"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnSiguientes"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'siguientes'), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
						strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('Nuevo T.', array('id'=>'btnNuevoTablaPreparar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnNuevoTablaPreparar"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'siguientes'), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
					} else {
						//strHtml+="\r\n\t\t\t\t\t\t\t<table><tr><td>";
						strHtml+="\r\n\t\t\t\t\t\t\t<input type=\"button\" id=\"btnNuevoTablaPreparar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnNuevoTablaPreparar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"NUEVO "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" value=\""+strEspaciosBotonesImg+strNuevoTabla+"\"/>";// class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
						strHtml+="\r\n\t\t\t\t\t\t\t<input id=\"ParametrosPaginacion"+strSeparadorName+"txtNumeroNuevoTabla"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"ParametrosPaginacion"+strSeparadorName+"txtNumeroNuevoTabla"+GetNombreClaseC(TablaBase.ToString())+"\" type=\"text\" class=\"inputnormal\" value=\"1\" size=\"2\">";
						//strHtml+="</td></tr></table>";
					}
					
				}	
			}
			
			strHtml+="\r\n\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t<?php } ?>";
			
			strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<br><a:widget id=\"btndjdjtSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: '>>'}\" />";
			}
			else
			{				
				if(!ConRichFaces) {
					strHtml+="<br><h:commandButton id=\"btndjdjtSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->siguientes}\"  value=\">>\" />";
				} else {
					//strHtml+="<br><a4j:commandButton id=\"btndjdjtSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->siguientes}\"  value=\">>\" reRender=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete()\"/>";
					//strHtml+="<?php echo $form->submit('>>'); ?>";
					//strHtml+="<?php echo $form->submit('>>',array('name'=>'btnSiguientes"+GetNombreClaseC(TablaBase.ToString())+"','escape'=>false)); ?>";
										
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="<?php echo $ajax->submit('>>', array('id'=>'btnSiguientes"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnSiguientes"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'siguientes'), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
						strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('>>', array('id'=>'btnSiguientes"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnSiguientes"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'siguientes'), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
					} else {
						strHtml+="<input type=\"button\" id=\"btnSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"SIGUIENTES\" value=\"&gt;&gt;\"/>";//&gt;&gt; // class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
					}
					
				}	
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t</tr>";
			
			strHtml+="\r\n\t\t\t\t</table>";	
						
			if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
				//strHtml+="\r\n\t\t\t\t<?php echo $form->end(); ?>";
				strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";
			} else {
				strHtml+="\r\n\t\t\t\t</form>";	
			}
			//strHtml+="\r\n\t\t\t\t<?php echo $ajax->form('/nuevoPreparar', 'post', array('update' => 'divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+""+strAjaxWebPart+"')); ?>";
			
			if(!EsParaBusquedaRapida) {
			if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
				//strHtml+="\r\n\t\t\t\t<?php echo $ajax->form(null,'post',array('id'=>'frmNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
				strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
				
			} else {
				strHtml+="\r\n\t\t\t\t<form id=\"frmNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"\">";
			}
			
			
			strHtml+="\r\n\t\t\t\t<?php if($strESBUSQUEDA=='false') {?>";
			strHtml+="\r\n\t\t\t\t<table style=\"width: 100px;text-align:"+GetAlignTableFromPropertiesC(TablaBase)+"\">";
			
			if(!esParaForeignKey && !esParaReportes && GetPermiteInsertarFromPropertiesC(TablaBase) && !blnEsReporte)
			{
				strHtml+="\r\n\t\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Nuevo\" height=\"10\">";
			} 
			else
			{
				strHtml+="\r\n\t\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Nuevo\" height=\"10\" style=\"display:none\">";
			} 
			
			//strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
			
			if(!ConFaces&&!ConRichFaces)
			{
				if(esMantenimientoSimple)
				{
					//strHtml+="<img id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:hidden\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/insertar.gif\" width=\"20\" height=\"20\"  onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevo"+GetNombreClaseC(TablaBase.ToString())+"Mostrar()\"/>";
					strHtml+="\r\n\t\t\t\t\t\t<td id=\"tdbtnModificarDatos"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"center\">";
					strHtml+="<a:widget id=\"btndjdjtModificarDatos"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: 'MODIFICAR'}\"/>";
					strHtml+="\r\n\t\t\t\t\t\t</td>";	
					strHtml+="\r\n\t\t\t\t\t\t<td id=\"tdbtnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"center\" style=\"visibility:hidden\">";
					strHtml+="<a:widget id=\"btndjdjtNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: 'NUEVO'}\"/>";	
					strHtml+="\r\n\t\t\t\t\t\t</td>";	
				}
				else if(!esParaReportes)
				{
					strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
					strHtml+="<img id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"center\" style=\"visibility:visible\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/insertar.gif\" width=\"20\" height=\"20\"  onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccionRelacion.nuevo"+GetNombreClaseC(TablaBase.ToString())+"MostrarRelaciones()\"/>";
					strHtml+="<a:widget id=\"btndjdjtNuevoPrepararRelaciones"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: 'ACTUALIZAR'}\"";
					strHtml+="\r\n\t\t\t\t\t\t</td>";
				}
			}
			else
			{
				if(!ConRichFaces) {
					if(esMantenimientoSimple)
					{
						strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
						strHtml+="<h:commandButton id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->nuevoPreparar}\" image=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/insertar.gif\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevo"+GetNombreClaseC(TablaBase.ToString())+"Mostrar()\"/>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
					}
					else if(!esParaReportes)
					{
							
						strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
						strHtml+="<h:commandButton id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->nuevoPrepararRelaciones}\" image=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/insertar.gif\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccionRelacion.nuevo"+GetNombreClaseC(TablaBase.ToString())+"MostrarRelaciones()\"/>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
					}
				} else {
					if(esMantenimientoSimple)
					{												
						if(!blnConJQueryCode) {
							strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"Nuevo\" align=\"center\" style=\"display:<?php echo str_replace('table-row','table-cell',$"+strObjectFace+"->strPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+") ?>\">";
						} else {
							strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"Nuevo\" align=\"center\">";
						}
						
						//strHtml+="<a4j:commandButton id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->nuevoPreparar}\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+" ?>\" image=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/insertar.gif\" reRender=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
						//strHtml+="<?php echo $html->link($html->image(\"Imagenes/insertar.gif\"), array('controller'=>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"s', 'action' => 'nuevopreparar'), array('escape' => false));?>";
						//strHtml+="<?php echo $form->submit('', array('type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/insertar.gif')); ?>";
						
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="<?php echo $ajax->submit('/img/Imagenes/insertar.gif', array('id'=>'btnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/insertar.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevoPreparar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('Nuevo', array('id'=>'btnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/insertar.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevoPreparar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
						} else {
							strHtml+="\r\n\t\t\t\t\t\t\t<input type=\"button\" id=\"btnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"NUEVO "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" value=\""+strEspaciosBotonesImg+strNuevo+"\"/>";//class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"   
						}
						
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						
						
						//GUARDAR CAMBIOS
						if(!blnConJQueryCode) {
							strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"GuardarCambios\" align=\"center\" style=\"visibility:hidden;display:<?php echo str_replace('table-row','table-cell',$"+strObjectFace+"->strPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+") ?>\">";
						} else {
							strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"GuardarCambios\" align=\"center\">";
						}
											
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="<?php echo $ajax->submit('/img/Imagenes/insertar.gif', array('id'=>'btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/insertar.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'guardarCambios'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('Guardar', array('id'=>'btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/insertar.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'guardarCambios'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
						} else {
							strHtml+="\r\n\t\t\t\t\t\t\t<input type=\"button\" id=\"btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"GUARDAR "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" value=\""+strEspaciosBotonesImg+strGuardar+"\"/>";//class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"   
						}
						
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						//GUARDAR CAMBIOS
						
						//DUPLICAR
						if(!blnConJQueryCode) {
							strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"Duplicar\" align=\"center\" style=\"visibility:hidden;display:<?php echo str_replace('table-row','table-cell',$"+strObjectFace+"->strPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+") ?>\">";
						} else {
							strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"Duplicar\" align=\"center\">";
						}
											
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="<?php echo $ajax->submit('/img/Imagenes/insertar.gif', array('id'=>'btnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/insertar.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevoPreparar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('Duplicar', array('id'=>'btnDuplicar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnDuplicar"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/insertar.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevoPreparar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
						} else {
							strHtml+="\r\n\t\t\t\t\t\t\t<input type=\"button\" id=\"btnDuplicar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnDuplicar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"DUPLICAR "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" value=\""+strEspaciosBotonesImg+strDuplicar+"\"/>";//class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"   
						}
						
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						//DUPLICAR
						
						//COPIAR
						if(!blnConJQueryCode) {
							strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"Copiar\" align=\"center\" style=\"visibility:hidden;display:<?php echo str_replace('table-row','table-cell',$"+strObjectFace+"->strPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+") ?>\">";
						} else {
							strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"Copiar\" align=\"center\">";
						}
											
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="<?php echo $ajax->submit('/img/Imagenes/insertar.gif', array('id'=>'btnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/insertar.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevoPreparar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('Copiar', array('id'=>'btnCopiar"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnCopiar"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/insertar.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevoPreparar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
						} else {
							strHtml+="\r\n\t\t\t\t\t\t\t<input type=\"button\" id=\"btnCopiar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnCopiar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"COPIAR "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" value=\""+strEspaciosBotonesImg+strCopiar+"\"/>";//class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"   
						}
						
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						//COPIAR
																
						//CERRRAR PAGINA			
						if(!blnConJQueryCode) {
							strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"CerrarPagina\" align=\"center\" style=\"display:<?php echo str_replace('table-row','table-cell',$"+strObjectFace+"->strPermisoPopup"+GetNombreClaseC(TablaBase.ToString())+") ?>\">";
						} else {
							strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"CerrarPagina\" align=\"center\">";
						}
						
						//strHtml+="<a4j:commandButton id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->nuevoPreparar}\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+" ?>\" image=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/insertar.gif\" reRender=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
						//strHtml+="<?php echo $html->link($html->image(\"Imagenes/insertar.gif\"), array('controller'=>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"s', 'action' => 'nuevopreparar'), array('escape' => false));?>";
						//strHtml+="<?php echo $form->submit('', array('type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/insertar.gif')); ?>";
						
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="<?php echo $ajax->submit('"+strCerrarPagina+"', array('id'=>'btnCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'cerrarPagina'), 'update' => array('divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();', 'complete' => 'window.close();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strCerrarPagina+"', array('id'=>'btnCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'cerrarPagina'), 'update' => array('divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();', 'complete' => 'window.close();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
						} else {
							strHtml+="\r\n\t\t\t\t\t\t\t<input type=\"button\" id=\"btnCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"CERRAR\" value=\""+strEspaciosBotonesImg+strCerrar+"\"/>";//class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"   
						}
						
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						//CERRRAR PAGINA
					}
					else if(!esParaReportes)
					{
							
						strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
						strHtml+="<a4j:commandButton id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->nuevoPrepararRelaciones}\" image=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/insertar.gif\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccionRelacion.nuevo"+GetNombreClaseC(TablaBase.ToString())+"MostrarRelaciones()\"/>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
					}
				}	
				
				
			}
			
			
			//strHtml+="\r\n\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t</tr>";
			strHtml+="\r\n\t\t\t\t</table>";
			strHtml+="\r\n\t\t\t\t<?php } ?>";
						
			if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
				//strHtml+="\r\n\t\t\t\t<?php echo $form->end(); ?>";
				strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";
			} else {
				strHtml+="\r\n\t\t\t\t</form>";
			}
			
			}//!EsParaBusquedaRapida
			
			if(ConFaces||ConRichFaces)
			{
				
				if(!ConRichFaces) {
					//strHtml+="\r\n\t\t\t\t</h:form>";
				} else {
					strHtml+="\r\n\t\t\t\t</div>";
					//strHtml+="\r\n\t\t\t\t</form>";
				}	
			}
			
			strHtml+="\r\n\t\t\t</td>";
			strHtml+="\r\n\t\t</tr>";
			
			
			
			if(!esMantenimientoSimple&&!esParaReportes)
			{
				strHtml+="\r\n\t\t<tr class=\"busquedacabecera\">";
				strHtml+="\r\n\t\t\t<td>";
				strHtml+="\r\n\t\t\t\t<img id=\"imgExpandirContraerRowElementos"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"left\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/xcollapse.png\" class=\"imagencabecera\"  onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccionRelacion.mostrarOcultarFilas"+GetNombreClaseC(TablaBase.ToString())+"()\"><h1>"+GetTituloNombreTableFromPropertiesC(TablaBase)+"</h1>";
				strHtml+="\r\n\t\t\t</td>";
				strHtml+="\r\n\t\t</tr>";
			}
		
			return strHtml;
		}
		
		public String GetWebRowTablaDatosTablaClaseC(TableSchema TablaBase,TableSchema TablaBasePadre,ColumnSchema columnSchemaPadre,bool esMantenimientoSimple,bool esParaForeignKey,TableSchema TablaBasePadreFK,bool esParaReportes,bool esMantenimientoDeImagen,bool ConFaces,bool ConRichFaces,bool EsParaBusquedaRapida,bool conEditar) 
		{
			String strHtml="";
			String strObjectFace="";
			
			String strPrefijo="";
			//System.Windows.Forms.MessageBox.Show(ConFaces.ToString());
			//System.Windows.Forms.MessageBox.Show(ConRichFaces.ToString());
			
			String strExtensionPagina="php";
			
			if(ConFaces||ConRichFaces)
			{
				strPrefijo=strPrefijoFace;
				strExtensionPagina="php";
			}
			
			if(ConRichFaces) {
				strHtml+="\r\n<tr><td colspan=\"3\">";
				
				if(!esParaForeignKey) {
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="\r\n<?php echo $ajax->form(null,'post',array('id'=>'frmMensajes"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmMensajes"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
						strHtml+="\r\n<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmMensajes"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmMensajes"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
					} else {
						//strHtml+="\r\n<form id=\"frmMensajes"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmMensajes"+GetNombreClaseC(TablaBase.ToString())+"\">";
					}
					//strHtml+="\r\n<div id=\"mensajes\">";					
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="\r\n<?php echo $ajax->div('divMensajes'); ?>";	
						strHtml+="\r\n<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->div('divMensajes'); ?>";	
					} else {
						//strHtml+="\r\n<div id=\"divMensajes\" style=\"display:none\">";// style=\"display:none\" class=\"divmensajegeneral\"	
					}
					//strHtml+="\r\n\t<rich:message id=\"mensaje\" for=\"mensajes\" showDetail=\"true\" showSummary=\"true\"/>";
					//strHtml+="\r\n\t<?php echo $this->Form->label('Mensaje.mensaje', array('value' => $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarMensaje)); ?>";
					//strHtml+="\r\n\t<?php echo $this->Form->label($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarMensaje); ?>";
					
					
					if(!blnConJQueryCode) {
						strHtml+="\r\n\t<span class=\"<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarCssMensaje ?>\"><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarMensaje ?></span>";
					} else {
						//strHtml+="\r\n\t<span id=\"spanMensaje\" class=\"mensajeinfo\"></span>";
					}
					
					
					//strHtml+="\r\n\t<h:inputHidden id=\"hdnAuxiliarUrlPagina\"  value=\"<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarUrlPagina ?>\"/>";
					
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						/*
						strHtml+="\r\n\t<?php echo $this->Form->hidden('Mensaje.hdnAuxiliarUrlPagina', array('value' => $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarUrlPagina)); ?>";
						strHtml+="\r\n\t<?php echo $this->Form->hidden('Mensaje.hdnAuxiliarTipo', array('value' => $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarTipo)); ?>";					
						strHtml+="\r\n\t<?php";
						strHtml+="\r\n\t\tif($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarMensajeAlert!='') {";
						strHtml+="\r\n\t\t\techo '<script>alert(\"'.$"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarMensajeAlert.'\");</script>';"; 
						strHtml+="\r\n\t\t}";
						strHtml+="\r\n\t?>";
						*/
						
						strHtml+="\r\n\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->hidden('Mensaje.hdnAuxiliarUrlPagina', array('value' => $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarUrlPagina)); ?>";
						strHtml+="\r\n\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->hidden('Mensaje.hdnAuxiliarTipo', array('value' => $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarTipo)); ?>";					
						strHtml+="\r\n\t<?php";
						strHtml+="\r\n\t\tif($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarMensajeAlert!='') {";
						strHtml+="\r\n\t\t\techo '<script>alert(\"'.$"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarMensajeAlert.'\");</script>';"; 
						strHtml+="\r\n\t\t}";
						strHtml+="\r\n\t?>";
					} else {
						//strHtml+="\r\n\t<input id=\"Mensaje-hdnAuxiliarUrlPagina\" name=\"Mensaje-hdnAuxiliarUrlPagina\" type=\"hidden\">\r\n";		
						//strHtml+="\r\n\t<input id=\"Mensaje-hdnAuxiliarTipo\" name=\"Mensaje-hdnAuxiliarTipo\" type=\"hidden\">\r\n";		
					}
					//strHtml+"<?php echo $this->Form->input('"+GetNombreColumnFromProperties(column)+"')?>\r\n";
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						/*
						strHtml+="\r\n\t<script>";
						strHtml+="\r\n\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarMensajeJs; ?>";		
						strHtml+="\r\n\t</script>";
						strHtml+="\r\n<?php echo $ajax->divEnd('divMensajes'); ?>";
						*/
						strHtml+="\r\n\t<script>";
						strHtml+="\r\n\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strAuxiliarMensajeJs; ?>";		
						strHtml+="\r\n\t</script>";
						strHtml+="\r\n<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->divEnd('divMensajes'); ?>";
					} else {
						//strHtml+="\r\n</div>";
					}
					
					if(blnConJQueryCode) {
						strHtml+="\r\n<?php if($strESRELACIONADO=='false') {?>";
						strHtml+="\r\n<div id=\"divMensajePage\" class=\"ui-state-highlight ui-corner-all\" style=\"display:none;margin-top: 20px; padding: 0 .7em;\">"; 
						strHtml+="\r\n<p id=\"parrMensajePage\">";
						strHtml+="\r\n\t<span id=\"spanIcoMensajePage\" class=\"ui-icon ui-icon-info\" style=\"float: left; margin-right: .3em;\"></span>";
						strHtml+="\r\n\t<span id=\"spanMensajePage\"></span>";
						strHtml+="\r\n</p>";	
						strHtml+="\r\n</div>";
						
						strHtml+="\r\n<div id=\"divMensajePageDialog\" title=\"Mensaje\" class=\"ui-state-highlight ui-corner-all\">";
  						//strHtml+="\r\n\t<p></p>";
						
						strHtml+="\r\n\t\t<p id=\"parrMensajePageDialog\">";
						strHtml+="\r\n\t\t\t<span id=\"spanIcoMensajePageDialog\" class=\"ui-icon ui-icon-info\" style=\"float: left; margin-right: .3em;\"></span>";
						strHtml+="\r\n\t\t\t<span id=\"spanMensajePageDialog\"></span>";
						strHtml+="\r\n\t\t</p>";

						strHtml+="\r\n</div>";
						strHtml+="\r\n<?php }?>";
					} else {
						
					}
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="\r\n<?php echo $form->end(); ?>";
						strHtml+="\r\n<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";
					} else {
						//strHtml+="\r\n</form>";
					}
					
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						/*
						strHtml+="\r\n<?php echo $ajax->div('div"+GetNombreClaseC(TablaBase.ToString())+"Popup"+strAjaxWebPart+"',array('style'=>'display:none','class'=>'divmensajegeneral'))?>";
						strHtml+="\r\n\t<table style=\"padding: 0px; border-spacing: 0px;\">";
						strHtml+="\r\n\t\t<tr><td colspan=\"2\"><?php echo Constantes::$STRMENSAJEPOPUPBLOQUEADOR; ?></td></tr>";
						strHtml+="\r\n\t\t<tr>";
						strHtml+="\r\n\t\t<?php echo $ajax->form(null,'post',array('id'=>'frm"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopup','name'=>'frm"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopup')); ?>";
						strHtml+="\r\n\t\t<td><?php echo $ajax->submit('"+strCerrarMensaje+"', array('id'=>'btn"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopupCerrar','complete'=>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.resaltarRestaurarDivMensajePopup(false);','class'=>'botonnormal','onmouseover'=>'funcionGeneral.activarBoton(this);', 'onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>";
						strHtml+="\r\n\t\t<td><?php echo $ajax->submit('"+strContinuar+"', array('id'=>'btn"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopup','class'=>'botonnormal','onmouseover'=>'funcionGeneral.activarBoton(this);', 'onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>";
						strHtml+="\r\n\t\t<?php echo $form->end(); ?>";
						strHtml+="\r\n\t\t</tr>";
						strHtml+="\r\n\t</table>";	
						strHtml+="\r\n<?php echo $ajax->divEnd('div"+GetNombreClaseC(TablaBase.ToString())+"Popup"+strAjaxWebPart+"')?>";
						*/
						
						String strMostrarPopupMensaje="";
						
						if(ConPhpBasico) {
							strMostrarPopupMensaje="display:none;visibility:hidden;";
						}
						
						strHtml+="\r\n<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->div('div"+GetNombreClaseC(TablaBase.ToString())+"Popup"+strAjaxWebPart+"',array('style'=>'display:none','class'=>'divmensajegeneral'))?>";
						strHtml+="\r\n\t<table style=\"padding: 0px; border-spacing: 0px;"+strMostrarPopupMensaje+"\">";
						strHtml+="\r\n\t\t<tr><td colspan=\"2\"><?php echo Constantes::$STRMENSAJEPOPUPBLOQUEADOR; ?></td></tr>";
						strHtml+="\r\n\t\t<tr>";
						strHtml+="\r\n\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frm"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopup','name'=>'frm"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopup')); ?>";
						strHtml+="\r\n\t\t<td><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strCerrarMensaje+"', array('id'=>'btn"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopupCerrar','complete'=>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.resaltarRestaurarDivMensajePopup(false);','class'=>'botonnormal','onmouseover'=>'funcionGeneral.activarBoton(this);', 'onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>";
						strHtml+="\r\n\t\t<td><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strContinuar+"', array('id'=>'btn"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopup','class'=>'botonnormal','onmouseover'=>'funcionGeneral.activarBoton(this);', 'onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>";
						strHtml+="\r\n\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";
						strHtml+="\r\n\t\t</tr>";
						strHtml+="\r\n\t</table>";	
						strHtml+="\r\n<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->divEnd('div"+GetNombreClaseC(TablaBase.ToString())+"Popup"+strAjaxWebPart+"')?>";
						
						
					} else {
						strHtml+="\r\n<div id=\"div"+GetNombreClaseC(TablaBase.ToString())+"Popup"+strAjaxWebPart+"\" style=\"display:none\" class=\"divmensajegeneral\">";
						strHtml+="\r\n\t<table style=\"padding: 0px; border-spacing: 0px;\">";
						strHtml+="\r\n\t\t<tr><td colspan=\"2\"><?php echo Constantes::$STRMENSAJEPOPUPBLOQUEADOR; ?></td></tr>";
						strHtml+="\r\n\t\t<tr>";
						strHtml+="\r\n\t\t<tr><td>";
						strHtml+="\r\n\t\t<form id=\"frm"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopup\">";
						strHtml+="\r\n\t\t\t<table style=\"padding: 0px; border-spacing: 0px;\">";
						strHtml+="\r\n\t\t\t<tr>";
						strHtml+="\r\n\t\t\t<td><input type=\"button\" id=\"btn"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopupCerrar\" value=\""+strCerrarMensaje+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.resaltarRestaurarDivMensajePopup(false);\"></td>";// class=\"botonnormal\" onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
						strHtml+="\r\n\t\t\t<td><input type=\"button\" id=\"btn"+GetNombreClaseC(TablaBase.ToString())+"AuxiliarPopup\" value=\""+strContinuar+"\"></td>";// class=\"botonnormal\" onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
						strHtml+="\r\n\t\t\t</tr>";
						strHtml+="\r\n\t\t\t</table>";
						strHtml+="\r\n\t\t</form>";
						strHtml+="\r\n\t\t</td></tr>";
						strHtml+="\r\n\t</table>";	
						strHtml+="\r\n</div>";
					}
					
					
					//REGISTRESE-AUMENTA OTRO INSERTAR												
					if(GetConRegistreseTableFromPropertiesC(TablaBase) && !EsParaBusquedaRapida) {
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="\r\n\t\t\t\t<?php echo $ajax->form(null,'post',array('id'=>'frmNuevoRegistrese"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmNuevoRegistrese"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
							strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmNuevoRegistrese"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmNuevoRegistrese"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
						} else {
							strHtml+="\r\n\t\t\t\t<form id=\"frmNuevoRegistrese"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmNuevoRegistrese"+GetNombreClaseC(TablaBase.ToString())+"\">";
						}
					
						strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
						
						strHtml+="\r\n\t\t\t\t<?php if($strESBUSQUEDA=='false') {?>";
						strHtml+="\r\n\t\t\t\t<table style=\"width: 100px;text-align: left\">";
						
						if(!esParaForeignKey&&!esParaReportes&&GetPermiteInsertarFromPropertiesC(TablaBase))
						{
							strHtml+="\r\n\t\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"NuevoRegistro\" height=\"10\">";
						} 
						else
						{
							strHtml+="\r\n\t\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"NuevoRegistro\" height=\"10\" style=\"display:none\">";
						} 
						
						
								if(esMantenimientoSimple)
								{												
									if(!blnConJQueryCode) {
										strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"NuevoRegistro\" align=\"left\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+" ?>\">";
									} else {
										strHtml+="\r\n\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"NuevoRegistro\" align=\"left\" style=\"display:table-row\">";
									}											
									
									if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
										//strHtml+="<?php echo $ajax->submit('/img/Imagenes/registrese.gif', array('id'=>'btnNuevoPrepararRegistrese"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnNuevoPrepararRegistrese"+GetNombreClaseC(TablaBase.ToString())+"','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/registrese.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevoPreparar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBotonImagen(this);','onmouseout'=>'funcionGeneral.desactivarBotonImagen(this);')); ?>";
										strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('/img/Imagenes/registrese.gif', array('id'=>'btnNuevoPrepararRegistrese"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnNuevoPrepararRegistrese"+GetNombreClaseC(TablaBase.ToString())+"','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/registrese.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'nuevoPreparar'), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBotonImagen(this);','onmouseout'=>'funcionGeneral.desactivarBotonImagen(this);')); ?>";
									} else {
										//strHtml+="<input type=\"button\" id=\"btnNuevoPrepararRegistrese"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnNuevoPrepararRegistrese"+GetNombreClaseC(TablaBase.ToString())+"\" class=\"botonnormal\"  value=\"NUEVO\" />";
										strHtml+="<img id=\"imgNuevoPrepararRegistrese"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgNuevoPrepararRegistrese"+GetNombreClaseC(TablaBase.ToString())+"\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/registrese.gif\" onmouseover=\"funcionGeneral.activarBotonImagen(this);\" onmouseout=\"funcionGeneral.desactivarBotonImagen(this);\"/>";
									}
									
									strHtml+="\r\n\t\t\t\t\t\t</td>";
								}
								
								
							
						strHtml+="\r\n\t\t\t\t\t</tr>";
						strHtml+="\r\n\t\t\t\t</table>";
						strHtml+="\r\n\t\t\t\t<?php } ?>";
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="\r\n\t\t\t\t<?php echo $form->end(); ?>";
							strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";
						} else {
							strHtml+="\r\n\t\t\t\t</form>";
						}
					}
				}
				
				
				strHtml+="\r\n</td></tr>";
			}
			//style="display:none"
			String strCssStyleBusquedaFK="";
			String strTablaNavegacion="";
			
			if(esParaForeignKey) {
				strCssStyleBusquedaFK=" style=\"display:none\" ";
				strTablaNavegacion=GetNombreClaseC(TablaBasePadre.ToString());
			} else {
				strTablaNavegacion=GetNombreClaseC(TablaBase.ToString());
			}
			
			if(blnEsProceso) {
				strCssStyleBusquedaFK=" style=\"display:none\" ";
			}
			
			//Mantenimiento"+GetNombreClaseC(TablaBase.ToString())+"."+strExtensionPagina+"
			//Mantenimiento"+GetNombreClaseC(TablaBase.ToString())+"."+strExtensionPagina+"
			strHtml+="\r\n<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"TablaNavegacion\""+strCssStyleBusquedaFK+"><td align=\"left\"><a id=\"TablaIzquierda"+GetNombreClaseC(TablaBase.ToString())+"\"></A><img id=\"imgTablaParaDerecha"+GetNombreClaseC(TablaBase.ToString())+"\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/expand.gif\" width=\"15\" height=\"15\"  onclick=\"document.location.href='#TablaDerecha"+GetNombreClaseC(TablaBase.ToString())+"'\"/></td><td colspan=\"2\" align=\"right\"><img id=\"imgTablaParaIzquierda"+GetNombreClaseC(TablaBase.ToString())+"\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/collapse.gif\" width=\"15\" height=\"15\"  onclick=\"document.location.href='#TablaIzquierda"+GetNombreClaseC(TablaBase.ToString())+"'\"/><a id=\"TablaDerecha"+GetNombreClaseC(TablaBase.ToString())+"\"></a></td></tr>\r\n";
			
			
			strHtml+="<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"TablaDatos\""+strCssStyleBusquedaFK+">";
			
			if(!esParaForeignKey)
			{
				strHtml+="<td colspan=\"3\" id=\"htmlTableCell"+GetNombreClaseC(TablaBase.ToString())+"\">";
			} 
			else
			{
				strHtml+="<td colspan=\"3\" id=\"htmlTableCell"+GetNombreClaseC(TablaBase.ToString())+"\">";
			} 
			
				
			if(!ConFaces&&!ConRichFaces)
			{
				//strHtml+="<a:widget id=\"djtbl"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"yahoo.dataTable\" value=\"{columns:[";   
				
				if(!esParaReportes)
				{
					if(!esParaForeignKey)
					{
						//strHtml+="{ label :'', id :'"+strEdicion+"'},";
					}
					else
					{
						//strHtml+="{ label :'', id :'"+strSeleccion+"'},";
					}
				}
				else
				{
					//strHtml+="{ label :'', id :'id'},";
				}
				
				/*
				for (int i = 0; i < TablaBase.Columns.Count; i++)
				{
				
					strHtml+=GetColumnsTableMaintenanceC(TablaBase.Columns[i],esMantenimientoDeImagen);
				
					if((i!=TablaBase.Columns.Count-1)&&TablaBase.Columns[i].Name!=strId&&TablaBase.Columns[i].Name!=strIsActive&&TablaBase.Columns[i].Name!=strIsExpired&&TablaBase.Columns[i].Name!=strVersionRow)
					{
						strHtml+=",";
					} 
				}
				*/
				if(esMantenimientoSimple)
				{
					//strHtml+=GetNavegacionTituloTablaTablasClasesRelacionadasC(TablaBase);
					//strHtml+=GetActionsTableMaintenanceC(TablaBase);
				}
				
				//strHtml+="],rows : [";			
				//strHtml+="]}\"/>";
			}
			else
			{
				
				//System.Windows.Forms.MessageBox.Show(ConFaces.ToString());
				//System.Windows.Forms.MessageBox.Show(ConRichFaces.ToString());
			
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
						
				if(ConFaces) {
					//rendered=\"#{"+strObjectFace+"->"+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel.rowCount > 0}\" 
					strHtml+="\r\n\t\t\t\t<h:form>\r\n\t\t\t\t<h:dataTable id=\"jsfTable"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"<?php echo $"+strObjectFace+"->"+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel ?>\" var=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"\">";
				} else {
					//rendered=\"#{"+strObjectFace+"->"+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel.rowCount > 0}\" 					
					
					if((!blnConJQueryCode && ConCakePhp)) { //|| ConPhpBasico
						//strHtml+="\r\n\t\t\t\t<?php echo $ajax->form(null,'post',array('id'=>'frmTablaDatos"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmTablaDatos"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";					
						strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmTablaDatos"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmTablaDatos"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";					
					} else {
						//SE AGREGA DENTRO DE RESULTADO DIV
						//strHtml+="\r\n\t\t\t\t<form id=\"frmTablaDatos"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmTablaDatos"+GetNombreClaseC(TablaBase.ToString())+"\">";
					}
					
					if((!blnConJQueryCode && ConCakePhp)) {//|| ConPhpBasico
						//strHtml+="\r\n\t\t\t\t<?php echo $ajax->div('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"'); ?>";
						strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->div('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"'); ?>";
					} else {
						strHtml+="\r\n\t\t\t\t<div id=\"divTablaDatos"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"\">";//rendered=\"#{"+strObjectFace+"->"+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel.rowCount>0}\"
						
						if(ConPhpBasico) {
						strHtml+="\r\n\t\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->htmlTabla"+GetNombreClaseC(TablaBase.ToString())+"s?>";
						}
					}
					
					//CONJQUERY NO TABLA
					if(!blnConJQueryCode && ConCakePhp) {
						//strHtml+="\r\n\t\t\t\t\t<f:facet name=\"header\"><h:outputText value=\""+GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+"\"/></f:facet>";
						strHtml+="\r\n\t\t\t\t\t<span class=\"titulotabla\"><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strTituloTabla"+/*GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+*/" ?> <?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strTituloPathElementoActual ?></span>";
						
						//strHtml+="\r\n\t\t\t\t<rich:dataTable id=\"richDataTable"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"<?php echo $"+strObjectFace+"->"+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel ?>\" var=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"\"  rendered=\"<?php echo $"+strObjectFace+"->bitPermisoConsulta"+GetNombreClaseC(TablaBase.ToString())+" ?>\" rowKeyVar=\"rowkey\">";
						strHtml+="\r\n\t\t\t\t<table style=\"padding: 0px; border-spacing: 3px;\">";
					}
				}
				//TITULOS COLUMNAS
				//CONJQUERY NO TABLA
				if(!blnConJQueryCode && ConCakePhp) {
					String strHtmlTitulosColumnas="\r\n\t\t\t\t<tr class=\"cabeceratabla\">";
					
					strHtml+="\r\n\t\t\t\tBYDAN-TITULOS";
					strHtml+="\r\n\t\t\t\t<?php";
					strHtml+="\r\n\t\t\t\t$i = 0;";
					strHtml+="\r\n\t\t\t\tif($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->"+GetNombreClaseObjetoC(TablaBase.ToString())+"s!=null && count($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->"+GetNombreClaseObjetoC(TablaBase.ToString())+"s)>0) {";
					strHtml+="\r\n\t\t\t\tforeach ($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->"+GetNombreClaseObjetoC(TablaBase.ToString())+"s as $"+GetNombreClaseObjetoC(TablaBase.ToString())+") {";
					strHtml+="\r\n\t\t\t\t\t$class = null;";
					strHtml+="\r\n\t\t\t\t\tif ($i++ % 2 == 0) {";
					strHtml+="\r\n\t\t\t\t\t\t$class = 'filazebra';";
					strHtml+="\r\n\t\t\t\t\t} else {";
					strHtml+="\r\n\t\t\t\t\t\t$class = 'filazebraanti';";
					strHtml+="\r\n\t\t\t\t\t}";
					strHtml+="\r\n\t\t\t\t?>";
					
					strHtml+="\r\n\t\t\t\t<tr  class=\"<?php echo $class;?>\" onmouseover=\"funcionGeneral.activarFilaTabla(this);\" onmouseout=\"funcionGeneral.desactivarFilaTabla(this,'<?php echo $class;?>');\">";
					
					//System.Windows.Forms.MessageBox.Show(strHtml);
					//blnNoStandardTableFromProperties=true;
					if(blnNoStandardTableFromProperties) {
						/*
						strHtml+="\r\n\t\t\t\t\t<rich:column>\r\n\t\t\t\t\t\t<f:facet name=\"header\"><h:outputText value=\" \"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
						strHtml+="\r\n\t\t\t\t\t\t<a4j:region>\r\n";
						strHtml+="\t\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+".seleccionar}\" image=\"/Imagenes/seleccionar.gif\" reRender=\"divMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\">\r\n";
						strHtml+="\t\t\t\t\t\t\t</a4j:commandButton>\r\n";
						strHtml+="\t\t\t\t\t\t</a4j:region>\r\n";
						strHtml+="\t\t\t\t\t</rich:column>\r\n";
						*/
					}
					
					for (int i = 0,j = 0 ; i < TablaBase.Columns.Count; i++) {
						if(EsParaBusquedaRapida && TablaBase.Columns[i].IsForeignKeyMember) {
							continue;
						}
						
						if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])) { continue; }
						
						
						//PARA TRAER FK COLUMNA DESCRIPCION EN TABLA NOSTANDARD SI FUERA EL CASO
						//if(blnNoStandardTableFromProperties) {	
						//	strHtml+=GetColumnsFacesClasesRelacionadasForeigKeysC(TablaBase,ConRichFaces);
						//}
						
						strHtml+=GetColumnsFacesTableMaintenanceC(TablaBase.Columns[i],TablaBasePadre,columnSchemaPadre,esParaForeignKey,TablaBasePadreFK,esMantenimientoDeImagen,ConFaces,ConRichFaces,EsParaBusquedaRapida,conEditar,i.ToString(),"",false);
						strHtmlTitulosColumnas+=GetColumnsFacesTituloTableMaintenanceC(TablaBase.Columns[i],TablaBasePadre,columnSchemaPadre,esParaForeignKey,TablaBasePadreFK,esMantenimientoDeImagen,ConFaces,ConRichFaces,EsParaBusquedaRapida,i,false);
					
						/*
						if((i!=TablaBase.Columns.Count-1)&&TablaBase.Columns[i].Name!=strId&&TablaBase.Columns[i].Name!=strIsActive&&TablaBase.Columns[i].Name!=strIsExpired&&TablaBase.Columns[i].Name!=strVersionRow)
						{
							strHtml+=",";
						} 
						*/
						
						if(EsParaBusquedaRapida && j==6) {
							break;
						}
						
						j++;
					}
					
					
		
					if(esMantenimientoSimple && !EsParaBusquedaRapida)
					{
						//BYDAN-TO-DO
						strHtml+=GetNavegacionTituloTablaFacesTablasClasesRelacionadasC(TablaBase,esParaForeignKey,ConFaces,ConRichFaces,false,"",false,false);
						
						strHtmlTitulosColumnas+=GetNavegacionTituloSoloTablaFacesTablasClasesRelacionadasC(TablaBase,esParaForeignKey,ConFaces,ConRichFaces,false,"",false);
					}
					strHtmlTitulosColumnas+="\r\n\t\t\t\t\t<th style=\"display:none\" class=\"actions\"><?php //__('Acciones');?></th>";
					strHtmlTitulosColumnas+="\r\n\t\t\t\t</tr>";
					
					strHtml=strHtml.Replace("BYDAN-TITULOS",strHtmlTitulosColumnas);
					
					strHtml+="\r\n\t\t\t\t\t<td style=\"display:none\" class=\"actions\">";
					strHtml+="\r\n\t\t\t\t\t\t<?php //echo $this->Html->link(__('Visualizar', true), array('action' => 'view', $"+GetNombreClaseObjetoC(TablaBase.ToString())+"['"+GetNombreClaseC(TablaBase.ToString())+"']['"+strId+"'])); ?>";
					strHtml+="\r\n\t\t\t\t\t\t<?php //echo $this->Html->link(__('Editar', true), array('action' => 'edit', $"+GetNombreClaseObjetoC(TablaBase.ToString())+"['"+GetNombreClaseC(TablaBase.ToString())+"']['"+strId+"'])); ?>";
					strHtml+="\r\n\t\t\t\t\t\t<?php //echo $this->Html->link(__('Eliminar', true), array('action' => 'delete', $"+GetNombreClaseObjetoC(TablaBase.ToString())+"['"+GetNombreClaseC(TablaBase.ToString())+"']['"+strId+"']), null, sprintf(__('Esta usted seguro de eliminar # %s?', true), $"+GetNombreClaseObjetoC(TablaBase.ToString())+"['"+GetNombreClaseC(TablaBase.ToString())+"']['"+strId+"'])); ?>";
					strHtml+="\r\n\t\t\t\t\t</td>";
					strHtml+="\r\n\t\t\t\t</tr>";
				}
				
				if(ConFaces) {
					strHtml+="\r\n\t\t\t\t</h:dataTable>\r\n\t\t\t\t</h:form>";
				} else {
					//CONJQUERY NO TABLA
					if(!blnConJQueryCode && ConCakePhp) {
						strHtml+="\r\n\t\t\t\t<?php }} ?>";
						strHtml+="\r\n\t\t\t\t</table>";					
					}
					
					if((!blnConJQueryCode && ConCakePhp)) { //|| ConPhpBasico
						/*
						strHtml+="\r\n\t\t\t\t<table style=\"width: 100px;text-align: left\">";
						strHtml+="\r\n\t\t\t\t<tr>";
						strHtml+="\r\n\t\t\t\t\t<td align=\"left\">";
						strHtml+="\r\n\t\t\t\t\t<?php";
						strHtml+="\r\n\t\t\t\t\tif($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->paginationLinks!=null && count($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->paginationLinks)>0) {";
						strHtml+="\r\n\t\t\t\t\t\tforeach ($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->paginationLinks as $paginationLink) {";
						strHtml+="\r\n\t\t\t\t\t?>";	
						strHtml+="\r\n\t\t\t\t\t<?php echo $ajax->link($paginationLink->strLabel, array( 'controller' => '"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action' => 'irPagina', $paginationLink->intPage),array( 'escape'=>false, 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();' )); ?>";
						strHtml+="\r\n\t\t\t\t\t<?php }} ?>";							
						strHtml+="\r\n\t\t\t\t\t</td>";
						strHtml+="\r\n\t\t\t\t</tr>";
						strHtml+="\r\n\t\t\t\t</table>";
						strHtml+="\r\n\t\t\t\t<?php echo $ajax->divEnd('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"'); ?>";
						*/
						
						strHtml+="\r\n\t\t\t\t<table style=\"width: 100px;text-align: left\">";
						strHtml+="\r\n\t\t\t\t<tr>";
						strHtml+="\r\n\t\t\t\t\t<td align=\"left\">";
						strHtml+="\r\n\t\t\t\t\t<?php";
						strHtml+="\r\n\t\t\t\t\tif($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->paginationLinks!=null && count($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->paginationLinks)>0) {";
						strHtml+="\r\n\t\t\t\t\t\tforeach ($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->paginationLinks as $paginationLink) {";
						strHtml+="\r\n\t\t\t\t\t?>";	
						strHtml+="\r\n\t\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->link($paginationLink->strLabel, array( 'controller' => '"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action' => 'irPagina', $paginationLink->intPage),array( 'escape'=>false, 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();', 'complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();' )); ?>";
						strHtml+="\r\n\t\t\t\t\t<?php }} ?>";							
						strHtml+="\r\n\t\t\t\t\t</td>";
						strHtml+="\r\n\t\t\t\t</tr>";
						strHtml+="\r\n\t\t\t\t</table>";
						strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->divEnd('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"'); ?>";
					} else {
						strHtml+="\r\n\t\t\t\t</div>";
					}
					
					if((!blnConJQueryCode && ConCakePhp)) {//|| ConPhpBasico
						//strHtml+="\r\n\t\t\t\t<?php echo $form->end(); ?>";					
						strHtml+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";					
					} else {
						//SE AGREGA DENTRO DE RESULTADO DIV
						//strHtml+="\r\n\t\t\t\t</form>";
					}
				}
			}
			
			strHtml+="</td>";   
			strHtml+="\r\n</tr>";
			
			return strHtml;
		}
		
		
		public String GetWebTablaRowParametrosBusquedaTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool esParaReportes,bool esBusquedaDesdeForeignKey,bool ConFaces,bool ConRichFaces,String strTab,bool blnEsParaBusquedaRapida) {
			String strHtml="";
			
			String strObjectFace="";
			
			if(ConFaces||ConRichFaces)
			{
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t"+strTab+"<form name=\"frmParametrosBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
			}
			else
			{		
				//SE ENVIA LOS PARAMETROS DE BUSQUEDA Y AUXILIARES EN UN SOLO FORMULARIO
				if(!ConRichFaces) {
					//strHtml+="\r\n\t\t\t\t<h:form id=\"frmParametrosBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";						
				} else {
					//strHtml+="\r\n\t\t\t\t<form id=\"frmParametrosBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";						
				}
			}
			
			
			
			strHtml+="\r\n\t\t\t\t\t<table id=\"tblParametrosBusquedaNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"text-align:left\" class=\"impresion\">";
			strHtml+="\r\n\t\t\t\t\t\t<tr id=\"trParametrosBusquedaNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\"  style=\"visibility:hidden;display:none\">";
			strHtml+="\r\n\t\t\t\t\t\t\t<td>";
			
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="<h1>"+strNumeroDe +GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+strAProcesar+":</h1>";
			} else {
				//strHtml+="<h1><h:outputText value=\""+strNumeroDe +GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+strAProcesar+"\" rendered=\"<?php echo $"+strObjectFace+"->isMostrarNumeroPaginacion ?>\"/></h1>";
			}
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td colspan=\"2\">";
			
			/*
			String strSeparadorName="";
	
			if(!blnConJQueryCode) {
				strSeparadorName=".";
			} else {
				strSeparadorName="-";
			}
			*/
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<input name=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" type=\"text\" size=\"5\" value=\"10\" onBlur=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.validarFormularioParametrosNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"()\">";
			}
			else
			{				
				if(!ConRichFaces) {
					strHtml+="<h:inputText id=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" size=\"5\" value=\"<?php echo $"+strObjectFace+"->iNumeroPaginacion ?>\" rendered=\"<?php echo $"+strObjectFace+"->isMostrarNumeroPaginacion ?>\" />";
				} else {
					//strHtml+="<h:inputText id=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" size=\"5\" value=\"<?php echo $"+strObjectFace+"->iNumeroPaginacion ?>\" rendered=\"<?php echo $"+strObjectFace+"->isMostrarNumeroPaginacion ?>\" />";
					//strHtml+="<h:inputText id=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" size=\"5\" value=\"<?php echo $"+strObjectFace+"->iNumeroPaginacion ?>\" rendered=\"<?php echo $"+strObjectFace+"->isMostrarNumeroPaginacion ?>\" />";
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strHtml+="<?php $form->input('ParametrosBusqueda"+strSeparadorName+"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"', array('class'=>'inputnormal','label' => '"+strNumeroDe +GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+strAProcesar+"')); ?>";
						strHtml+="<?php $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->input('ParametrosBusqueda"+strSeparadorName+"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"', array('class'=>'inputnormal','label' => '"+strNumeroDe +GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+strAProcesar+"')); ?>";
					} else {
						strHtml+="<input id=\"ParametrosBusqueda"+strSeparadorName+"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"ParametrosBusqueda"+strSeparadorName+"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" type=\"text\" class=\"inputnormal\">\r\n";		
					}
				}
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t</tr>";
			
			strHtml+="\r\n\t\t"+strTab+"<tr id=\"trRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\">";
			
			
			
			
			String strRecargarInformacionVisibility="";
			
			if(GetEsReporteFromPropertiesC(TablaBase))
			{
				strRecargarInformacionVisibility=" style=\"display:none\"";
			}
			
			//CON O SIN INTERNO IGUAL EL CONTROL VIENE DE LA SESSION
			//if(!GetEsInternoFromPropertiesC(TablaBase)||esBusquedaDesdeForeignKey)
			//{
				if(!ConFaces&&!ConRichFaces)
				{
					strHtml+="\r\n\t\t"+strTab+"<td "+strRecargarInformacionVisibility+"><a:widget id=\"btndjdjtRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strRecargarInformacion+"'}\" />";
					strHtml+="\r\n\t\t\t"+strTab+"</td>";
				}
				else
				{
					if(!ConRichFaces) {
						strHtml+="\r\n\t\t"+strTab+"<td "+strRecargarInformacionVisibility+"><h:commandButton id=\"btndjdjtRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\"  action=\"#{"+strObjectFace+"->recargarInformacion}\" value=\""+strRecargarInformacion+"\" />";
						strHtml+="\r\n\t\t\t"+strTab+"</td>";
					} else {
						//strHtml+="\r\n\t\t<td "+strRecargarInformacionVisibility+"><br><br><a4j:commandButton id=\"btndjdjtRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\"  action=\"#{"+strObjectFace+"->recargarInformacion}\" value=\""+strRecargarInformacion+"\"  reRender=\"div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete()\"/>";
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strHtml+="\r\n\t\t"+strTab+"<td"+strRecargarInformacionVisibility+"><div id=\"divRecargarInformacion\" style=\"<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strPermiteRecargarInformacion ?>\"><br><br><?php echo $ajax->submit('"+strRecargarInformacion+"', array('id'=>'btnRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'recargarInformacion'), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'),'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();','complete' =>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></div>";
							//strHtml+="\r\n\t\t\t"+strTab+"</td>";
							
							/*
							strHtml+="\r\n\t\t"+strTab+"<td"+strRecargarInformacionVisibility+"><div id=\"divRecargarInformacion\" style=\"<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->strPermiteRecargarInformacion ?>\"><br><br><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strRecargarInformacion+"', array('id'=>'btnRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'recargarInformacion'), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'),'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();','complete' =>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></div>";
							strHtml+="\r\n\t\t\t"+strTab+"</td>";
							*/
						} else {
							//strHtml+="\r\n\t\t\t"+strTab+"<td"+strRecargarInformacionVisibility+">\r\n\t\t\t\t"+strTab+"<div id=\"divRecargarInformacion\"><input type=\"button\" id=\"btnRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\" value=\""+strRecargarInformacion+"\"/></div>";// class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
						}
					}					
				}								
			//}
			
			if((esMantenimientoSimple&&!esParaForeignKey)||esParaReportes)
			{					
				
				
				

			if(!blnEsParaBusquedaRapida) {	
				if(!blnConJQueryCode) {
					strHtml+="\r\n\t\t"+strTab+"<td id=\"tdGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"\" class=\"elementos\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\">";
				} else {
					strHtml+="\r\n\t\t\t"+strTab+"<td id=\"tdGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"\" class=\"elementos\" style=\"display:table-row\">";
				}
				
				if(!ConFaces&&!ConRichFaces)
				{
					strHtml+="\r\n\t\t"+strTab+"<h2>"+strGenerarReporte+"</h2><input type=\"checkbox\" id=\"chbGenerarReporte\" name=\"chbGenerarReporte\"><a:widget id=\"djcmbGenerarReporte\" name=\"dojo.dijit.combobox\" service=\"/FuncionesServlet?accion=traerJSonTiposReportes\"/>";
				}
				else
				{					
					if(!ConRichFaces) {
						strHtml+="\r\n\t\t"+strTab+"<h2>"+strGenerarReporte+"</h2><h:selectBooleanCheckbox id=\"chbGenerarReporte\" value=\"<?php echo $"+strObjectFace+"->bitGenerarReporte ?>\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\"/>\r\n";
					
						strHtml+="\t\t\t"+strTab+"<h:selectOneMenu id=\"djcmbGenerarReporte\" value=\"<?php echo $"+strObjectFace+"->strGenerarReporte ?>\"  rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\">\r\n";			
						strHtml+="\t\t\t"+strTab+"<f:selectItems value=\"<?php echo ${"+strObjectFace+"->tiposReportes ?>\"/>\r\n";
						strHtml+="\t\t\t"+strTab+"</h:selectOneMenu>\r\n";
					} else {
						//strHtml+="\r\n\t\t<h2>"+strGenerarReporte+"</h2><h:selectBooleanCheckbox id=\"chbGenerarReporte\" value=\"<?php echo $"+strObjectFace+"->bitGenerarReporte ?>\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\"/>\r\n";
						
						strHtml+="\r\n\t\t"+strTab+""+/*strGenerarReporte+*/"\r\n\t\t\t\t\t\t\t\t<table style=\"padding: 0px; border-spacing: 0px;\">\r\n\t\t\t\t\t\t";
						
						
						
						
						
						
						if(!blnConJQueryCode) {
							//strHtml+="\r\n\t\t"+strTab+"<td id=\"tdGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"\" class=\"elementos\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\">";
							strHtml+="\r\n\t\t"+strTab+"<tr id=\"tdMostrarTodos"+GetNombreClaseC(TablaBase.ToString())+"\" class=\"elementos1\" style=\"display:<?php echo $"+strObjectFace+"->strPermisoMostrarTodos"+GetNombreClaseC(TablaBase.ToString())+" ?>\">";
						} else {
							strHtml+="\r\n\t\t\t\t\t"+strTab+"<tr id=\"tdMostrarTodos"+GetNombreClaseC(TablaBase.ToString())+"\" class=\"elementos1\" style=\"display:table-row\">";
						}
						
						if(!ConFaces&&!ConRichFaces)
						{
							strHtml+="\r\n\t\t"+strTab+"<td><h2>"+strGenerarReporteTodos+"</h2></td><td><input type=\"checkbox\" id=\"chbGenerarTodos\" name=\"chbGenerarTodos\">";
							
							strHtml+="\r\n\t\t"+strTab+"</td>";
						}
						else
						{					
							if(!ConRichFaces) {
								strHtml+="\r\n\t\t<td><"+strTab+"h2>"+strGenerarReporteTodos+"</h2></td><td><h:selectBooleanCheckbox id=\"chbGenerarTodos\" value=\"<?php echo $"+strObjectFace+"->bitMostrarTodosResultadosReporte ?>\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\"/>";
							} else {
								//strHtml+="\r\n\t\t<h2>"+strGenerarReporteTodos+"</h2><h:selectBooleanCheckbox id=\"chbGenerarTodos\" value=\"<?php echo $"+strObjectFace+"->bitMostrarTodosResultadosReporte ?>\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\"/>";
														
								if((!blnConJQueryCode  && ConCakePhp) || ConPhpBasico) {
											//ConCakePhp
											//strHtml+="\r\n\t\t"+strTab+"<td><h2>"+strGenerarReporteTodos+"</h2></td><td><?php echo $this->Form->checkbox('ParametrosBusqueda"+strSeparadorName+"chbGenerarTodos')?>";							
										
									//ConPhpBasico Incompleto
									//strHtml+="\r\n\t\t"+strTab+"<td><h2>"+strGenerarReporteTodos+"</h2></td><td><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->checkbox('ParametrosBusqueda"+strSeparadorName+"chbGenerarTodos')?>";							
									
									String strStyleVisibilityRecargarInformacion="visible";
					
									if(blnEsReporte) {
										strStyleVisibilityRecargarInformacion="hidden";
									}
			
									strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td style=\"<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->strPermiteRecargarInformacion ?>\">";
									strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strRecargarInformacion+"', array('id'=>'btnRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'general._"+GetNombreClaseObjetoC(TablaBase.ToString())+"s', 'action'=>'recargarInformacion'), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"sAjaxWebPart','divMensajes'),'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();','complete' =>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
									strHtml+="</td>";
									
									strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td>";
									strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->select('ParametrosBusqueda"+strSeparadorName+"djcmbPaginacion',$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->tiposPaginacion,$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->strTipoPaginacion); ?>";
									strHtml+="</td>";
									//DEFECTO CHECKED, SINO SE DAÑA SCROLL INFERIOR
									strHtml+="\r\n\t\t\t\t\t\t"+strTab+"<td><label>";
									strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->checkbox('ParametrosBusqueda"+strSeparadorName+"chbConAltoMaximoTabla',true,array('onchange' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneralBasico.cambiarAltoMaximoTabla(\\'"+GetNombreClaseC(TablaBase.ToString())+"s\\',\\'300px\\');'))?>";
									strHtml+=strAltMax+"</label></td>";//strGenerarReporteTodos
									
									
									strHtml+="\t\t\t"+strTab+"\r\n\t\t\t\t\t\t\t\t\t\t<td>";
									//strHtml+="<select id=\"ParametrosBusqueda"+strSeparadorName+"djcmbGenerarReporte\" name=\"ParametrosBusqueda"+strSeparadorName+"djcmbGenerarReporte\" title=\"TIPOS IMPRESION DE REPORTES\" style=\"width:100px\"></select>";
									strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->select('ParametrosBusqueda"+strSeparadorName+"djcmbGenerarReporte',$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->tiposReportes,$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->strTipoReporteDefault); ?>";
									strHtml+="</td>";
									
									strHtml+="\t\t\t"+strTab+"\r\n\t\t\t\t\t\t\t\t\t\t<td>";
									//strHtml+="<select id=\"ParametrosBusqueda"+strSeparadorName+"djcmbTiposReporte\" name=\"ParametrosBusqueda"+strSeparadorName+"djcmbTiposReporte\" title=\"TIPOS DE REPORTES\" style=\"width:100px\"></select>";
									strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->select('ParametrosBusqueda"+strSeparadorName+"djcmbTiposReporte',$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->tiposReporte,$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->strTipoReporte); ?>";
									strHtml+="</td>";
									
									strHtml+="\t\t\t"+strTab+"\r\n\t\t\t\t\t\t\t\t\t\t<td>";
									//strHtml+="<input type=\"button\" id=\"btnImprimirPagina"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnImprimirPagina"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"IMPRIMIR PAGINA\" value=\""+strImprimirPagina+"\"/>";
									strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strImprimirPagina+"', array('type'=>'button','id'=>'btnImprimirPagina"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnImprimirPagina"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','before'=>'funcionGeneral.mostrarOcultarProcesando(true,null);','complete' => 'funcionGeneral.printWebPage();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
								
								} else {
									String strStyleVisibilityRecargarInformacion="visible";
					
									if(blnEsReporte) {
										strStyleVisibilityRecargarInformacion="hidden";
									}
			
									strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td style=\"visibility:"+strStyleVisibilityRecargarInformacion+"\"><input type=\"button\" id=\"btnRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"RECARGAR INFORMACION\" value=\""+strEspaciosBotonesImg+strRecargarInformacion+"\"/></td>";
									strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><select id=\"ParametrosBusqueda-djcmbPaginacion\" name=\"ParametrosBusqueda-djcmbPaginacion\" title=\"TIPOS DE PAGINACION\" style=\"width:100px\"></select></td>";
									//strHtml+="\r\n\t\t\t\t\t\t"+strTab+"<td><h2>"+strGenerarReporteTodos+"</h2></td>";
									//DEFECTO CHECKED, SINO SE DAÑA SCROLL INFERIOR
									strHtml+="\r\n\t\t\t\t\t\t"+strTab+"<td><label><input id=\"ParametrosBusqueda"+strSeparadorName+"chbConAltoMaximoTabla\" name=\"ParametrosBusqueda"+strSeparadorName+"chbConAltoMaximoTabla\" title=\"CON ALTO MAXIMO DE TABLA\" type=\"checkbox\" checked></input>"+strAltMax+"</label></td>";//strGenerarReporteTodos
									
									//strHtml+="\r\n\t\t\t\t\t\t"+strTab+"<td><h2>"+strAltMax+"</h2><input id=\"ParametrosBusqueda"+strSeparadorName+"chbConAltoMaximoTabla\" name=\"ParametrosBusqueda"+strSeparadorName+"chbConAltoMaximoTabla\" title=\"CON ALTO MAXIMO DE TABLA\" type=\"checkbox\" checked></input></td>";//strGenerarReporteTodos									
									strHtml+="\t\t\t"+strTab+"\r\n\t\t\t\t\t\t\t\t\t\t<td><select id=\"ParametrosBusqueda"+strSeparadorName+"djcmbGenerarReporte\" name=\"ParametrosBusqueda"+strSeparadorName+"djcmbGenerarReporte\" title=\"TIPOS IMPRESION DE REPORTES\" style=\"width:100px\"></select></td>";
									strHtml+="\t\t\t"+strTab+"\r\n\t\t\t\t\t\t\t\t\t\t<td><select id=\"ParametrosBusqueda"+strSeparadorName+"djcmbTiposReporte\" name=\"ParametrosBusqueda"+strSeparadorName+"djcmbTiposReporte\" title=\"TIPOS DE REPORTES\" style=\"width:100px\"></select></td>";									
									strHtml+="\t\t\t"+strTab+"\r\n\t\t\t\t\t\t\t\t\t\t<td><input type=\"button\" id=\"btnImprimirPagina"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnImprimirPagina"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"IMPRIMIR PAGINA\" value=\""+strImprimirPagina+"\"/>";// class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
								}
							}
							
							strHtml+="</td>";
							//strHtml+="\r\n\t\t\t\t\t"+strTab+"</td>";
						}
																		
									//strHtml+="\t\t\t"+strTab+"\r\n\t\t\t\t\t\t\t\t\t\t<td></td>";
												
						strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td></td>";
						//strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td></td>";
						strHtml+="\r\n\t\t\t\t\t\t\t\t\t</tr>";
						
						strHtml+="\r\n\t\t\t\t\t\t\t\t\t<?php if($strESBUSQUEDA=='false' && $strESRELACIONADO=='false') {?>";
						strHtml+="\r\n\t\t\t\t\t\t\t\t\t<tr>";//class=\"impresion\"
						
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
									//Original con CakePhp
									//strHtml+="\r\n\t\t\t\t\t\t\t<td class=\"busquedatitulocampo\">IMPRESION</td>";
									//strHtml+="\r\n\t\t\t\t\t\t\t<td><?php echo $ajax->submit('"+strGenerarReporte+"', array('id'=>'btnGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'generarReporteAuxiliar'), 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.generarReporte"+GetNombreClaseC(TablaBase.ToString())+"OnClick();','complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.generarReporte"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>\r\n\t\t\t\t\t\t\t<td style=\"display:none\"><?php echo $this->Form->checkbox('ParametrosBusqueda"+strSeparadorName+"chbGenerarReporte')?></td>";
							
							//V1 ConPhpBasico
							//strHtml+="\r\n\t\t\t\t\t\t\t<td class=\"busquedatitulocampo\">IMPRESION</td>";
							//strHtml+="\r\n\t\t\t\t\t\t\t<td><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strGenerarReporte+"', array('id'=>'btnGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'generarReporteAuxiliar'), 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.generarReporte"+GetNombreClaseC(TablaBase.ToString())+"OnClick();','complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.generarReporte"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>\r\n\t\t\t\t\t\t\t<td style=\"display:none\"><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->checkbox('ParametrosBusqueda"+strSeparadorName+"chbGenerarReporte')?></td>";
							
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><table style=\"display:none;\"><tr>";
							strHtml+="<td>";
							//strHtml+="<input type=\"button\" id=\"btnOrderBy"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnOrderBy"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"COLUMNAS DE DATOS\" value=\""+strEspaciosBotonesImg+strCols+"\"/>";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strCols+"', array('id'=>'btnOrderBy"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnOrderBy"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','before'=>'','complete' => '','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
							strHtml+="</td>";
							
							
							if(blnTieneRelaciones) {
								strHtml+="<td>";
								//strHtml+="<input type=\"button\" id=\"btnOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"RELACIONES DE DATOS\" value=\""+strEspaciosBotonesImg+strRels+"\"/>";
								strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strRels+"', array('id'=>'btnOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','before'=>'','complete' => '','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
								strHtml+="</td>";
							}
							
							
							strHtml+="</tr></table></td>";
							
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td>";
							//strHtml+="<select id=\"ParametrosBusqueda-djcmbTiposColumnasSelect\" name=\"ParametrosBusqueda-djcmbTiposColumnasSelect\" title=\"TIPOS DE COLUMNAS DE TABLA\" style=\"width:150px\"></select>";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->select('ParametrosBusqueda"+strSeparadorName+"djcmbTiposColumnasSelect',$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->tiposColumnasSelect,''); ?>";
							strHtml+="</td>";							
							
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><label>";
							//strHtml+="<input id=\"ParametrosBusqueda-chbSelTodos\" name=\"ParametrosBusqueda-chbSelTodos\" title=\"SELECCIONAR TODOS LOS REGISTROS\" type=\"checkbox\">";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->checkbox('ParametrosBusqueda"+strSeparadorName+"chbSelTodos',false,array('onchange' => 'jugadorFuncionGeneralBasico.seleccionarTodos();'))?>";
							strHtml+=strSelTodos+"</label></td>";
							
							
						} else {
							//strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"busquedatitulocampo\" style=\"display:none\">IMPRESION</td>";
							
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><table><tr>";
							strHtml+="<td><input type=\"button\" id=\"btnOrderBy"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnOrderBy"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"COLUMNAS DE DATOS\" value=\""+strEspaciosBotonesImg+strCols+"\"/></td>";
							
							if(blnTieneRelaciones) {
								strHtml+="<td><input type=\"button\" id=\"btnOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"btnOrderByRel"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"RELACIONES DE DATOS\" value=\""+strEspaciosBotonesImg+strRels+"\"/></td>";
							}
							
							strHtml+="</tr></table></td>";
							
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><select id=\"ParametrosBusqueda-djcmbTiposColumnasSelect\" name=\"ParametrosBusqueda-djcmbTiposColumnasSelect\" title=\"TIPOS DE COLUMNAS DE TABLA\" style=\"width:150px\"></select></td>";
							//strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td style=\"display:none\"><input id=\"ParametrosBusqueda"+strSeparadorName+"chbGenerarReporte\" name=\"ParametrosBusqueda"+strSeparadorName+"chbGenerarReporte\" type=\"checkbox\"></td>";// class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
							
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><label><input id=\"ParametrosBusqueda-chbSelTodos\" name=\"ParametrosBusqueda-chbSelTodos\" title=\"SELECCIONAR TODOS LOS REGISTROS\" type=\"checkbox\">"+strSelTodos+"</label></td>";
							//strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><h2>"+strSelTodos+"</h2><input id=\"ParametrosBusqueda-chbSelTodos\" name=\"ParametrosBusqueda-chbSelTodos\" title=\"SELECCIONAR TODOS LOS REGISTROS\" type=\"checkbox\"></td>";
						}
						
						
						//COMBO RELACIONES
						if(TieneClasesRelacionadasParaMostrarC(TablaBase)) {
							if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
										//Original con CakePhp
										//strHtml+="\r\n\t\t\t\t\t\t\t<td class=\"busquedatitulocampo\">IMPRESION</td>";
										//strHtml+="\r\n\t\t\t\t\t\t\t<td><?php echo $ajax->submit('"+strGenerarReporte+"', array('id'=>'btnGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'generarReporteAuxiliar'), 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.generarReporte"+GetNombreClaseC(TablaBase.ToString())+"OnClick();','complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.generarReporte"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>\r\n\t\t\t\t\t\t\t<td style=\"display:none\"><?php echo $this->Form->checkbox('ParametrosBusqueda"+strSeparadorName+"chbGenerarReporte')?></td>";
								
								//V1 Con PhpBasico
								//strHtml+="\r\n\t\t\t\t\t\t\t<td class=\"busquedatitulocampo\">IMPRESION</td>";
								//strHtml+="\r\n\t\t\t\t\t\t\t<td><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strGenerarReporte+"', array('id'=>'btnGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'generarReporteAuxiliar'), 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.generarReporte"+GetNombreClaseC(TablaBase.ToString())+"OnClick();','complete' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.generarReporte"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>\r\n\t\t\t\t\t\t\t<td style=\"display:none\"><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->checkbox('ParametrosBusqueda"+strSeparadorName+"chbGenerarReporte')?></td>";
																
								
								strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td>";
								//strHtml+="<select id=\"ParametrosBusqueda-djcmbTiposRelaciones\" name=\"ParametrosBusqueda-djcmbTiposRelaciones\" title=\"TIPOS DE RELACIONES\" style=\"width:150px\"></select>";
								strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->select('ParametrosBusqueda"+strSeparadorName+"djcmbTiposRelaciones',$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->tiposRelaciones,''); ?>";
								strHtml+="</td>";
								
							} else {
								strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><select id=\"ParametrosBusqueda-djcmbTiposRelaciones\" name=\"ParametrosBusqueda-djcmbTiposRelaciones\" title=\"TIPOS DE RELACIONES\" style=\"width:150px\"></select></td>";
							}
						}
						//COMBO RELACIONES
						
						
						//RICH COMBO BOX NO ES UN CONTROL SELECT
						//rich:comboBox
						/*
						strHtml+="\t\t\t<h:selectOneMenu id=\"djcmbGenerarReporte\" value=\"<?php echo $"+strObjectFace+"->strGenerarReporte ?>\"  rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\">\r\n";			
						strHtml+="\t\t\t<f:selectItems value=\"<?php echo $"+strObjectFace+"->tiposReportes ?>\"/>\r\n";
						strHtml+="\t\t\t</h:selectOneMenu>\r\n";
						*/
												
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
									//Original con CakePhp
									/*
									strHtml+="\t\t\t"+strTab+"\r\n\t\t\t\t\t\t\t<td><?php echo $form->select('ParametrosBusqueda"+strSeparadorName+"djcmbGenerarReporte',$"+strObjectFace+"->tiposReportes,$"+strObjectFace+"->strTipoReporte"+strDefault+"); ?></td>";
									strHtml+="\r\n\t\t\t\t\t\t\t<td><?php echo $ajax->submit('IMP. PAGINA', array('id'=>'btnImprimirPagina"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnImprimirPagina"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','before'=>'funcionGeneral.mostrarOcultarProcesando(true,null);','complete' => 'funcionGeneral.printWebPage();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>";
									strHtml+="\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n";
									*/
							
							//V! con PhpBasico
							/*
							strHtml+="\t\t\t"+strTab+"\r\n\t\t\t\t\t\t\t<td><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->select('ParametrosBusqueda"+strSeparadorName+"djcmbGenerarReporte',$"+strObjectFace+"->tiposReportes,$"+strObjectFace+"->strTipoReporte"+strDefault+"); ?></td>";
							strHtml+="\r\n\t\t\t\t\t\t\t<td><?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('IMP. PAGINA', array('id'=>'btnImprimirPagina"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'btnImprimirPagina"+GetNombreClaseC(TablaBase.ToString())+"','class'=>'botonnormal','before'=>'funcionGeneral.mostrarOcultarProcesando(true,null);','complete' => 'funcionGeneral.printWebPage();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>";
							strHtml+="\r\n\t\t\t\t\t\t</tr>";
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t<?php } ?>";
							strHtml+="\r\n\t\t\t\t\t\t</table>\r\n";
							*/
							
							
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td>";
							//strHtml+="<select id=\"ParametrosBusqueda-djcmbAcciones\" name=\"ParametrosBusqueda-djcmbAcciones\" title=\"TIPOS DE ACCIONES\" style=\"width:200px\"></select>";
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->select('ParametrosBusqueda"+strSeparadorName+"djcmbAcciones',$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->tiposAcciones,$"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->strTipoAccion,array('onchange'=>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneralBasico.manejarAccion();')); ?>";
							strHtml+="</td>";
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"ConEditar\"><label>";
							//strHtml+="<input id=\"ParametrosBusqueda-chbConEditar\" name=\"ParametrosBusqueda-chbConEditar\" title=\"EDITAR INFORMACION\" type=\"checkbox\">"+strEdicion;
							strHtml+="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->checkbox('ParametrosBusqueda"+strSeparadorName+"chbConEditar',false)?>";
							strHtml+=strEdicion+"</label></td>";
							
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t</tr>";								
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t<?php } ?>";							
							strHtml+="\r\n\t\t\t\t\t\t\t\t</table>\r\n";								
							
						} else {							
							//strHtml+="\t\t\t"+strTab+"\r\n\t\t\t\t\t\t\t\t\t\t<td><select id=\"ParametrosBusqueda"+strSeparadorName+"djcmbGenerarReporte\" name=\"ParametrosBusqueda"+strSeparadorName+"djcmbGenerarReporte\"></select></td>";
										//strHtml+="\r\n\t\t\t\t\t\t\t<td><?php echo $ajax->submit('IMP. PAGINA', array('class'=>'botonnormal','complete' => 'funcionGeneral.printWebPage();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?></td>";
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><select id=\"ParametrosBusqueda-djcmbAcciones\" name=\"ParametrosBusqueda-djcmbAcciones\" title=\"TIPOS DE ACCIONES\" style=\"width:200px\"></select></td>";										
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"ConEditar\"><label><input id=\"ParametrosBusqueda-chbConEditar\" name=\"ParametrosBusqueda-chbConEditar\" title=\"EDITAR INFORMACION\" type=\"checkbox\">"+strEdicion+"</label></td>";							
							
							//strHtml+="\r\n\t\t\t\t\t\t\t\t\t\t<td><h2>"+strEdicion+"</h2><input id=\"ParametrosBusqueda-chbConEditar\" name=\"ParametrosBusqueda-chbConEditar\" title=\"EDITAR INFORMACION\" type=\"checkbox\"></td>";							
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t</tr>";	
							
							strHtml+="\r\n\t\t\t\t\t\t\t\t\t<?php } ?>";
							
							strHtml+="\r\n\t\t\t\t\t\t\t\t</table>\r\n";	
							
						}
						//rich:comboBox
					}
				}
				
				strHtml+="\r\n\t\t\t"+strTab+"</td>";
								
				
				
			}
			
			}
						
			strHtml+="\r\n\t\t"+strTab+"</tr>";
			
			
			
			strHtml+="\r\n\t\t\t\t\t</table>";
			
			return  strHtml;
		}
		
		public String GetWebRowParametrosBusquedaTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool esParaReportes,bool esBusquedaDesdeForeignKey,bool ConFaces,bool ConRichFaces,bool blnEsParaBusquedaRapida) 
		{
			String strHtml="";
			strHtml+="<tr class=\"busqueda\" style=\"display:none\">";
			strHtml+="\r\n\t\t\t<td>";
			
			String strObjectFace="";
			
			if(ConFaces||ConRichFaces)
			{
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
			
			strHtml+="\r\n\t\t\t\t<div align=\"left\">";
			strHtml+="\r\n\t\t\t\t<img style=\"visibility:visible\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/flechaarriba.gif\" width=\"15\" height=\"15\" onclick=\"funcionGeneral.irAreaDePagina('ControlesSecciones')\"/>";
			//strHtml+="\r\n\t\t\t\t<a4j:commandButton id=\"img"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+"->irA"+GetNombreClaseC(TablaBase.ToString())+"FkActual}\" image=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/atras.gif\" rendered=\"<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"SessionBean->bitPermiteNavegacionHaciaForeignKeyDesde"+GetNombreClaseC(TablaBase.ToString())+" ?>\"/>";
			strHtml+="\r\n\t\t\t\t</div>";
			
			//ESTO FUE TRASLADADO A LAS BUSQUEDAS
			//EL CODIGO FUE TRASLADADO A OTRA FUNCION, PARA ACTIVAR SOLO DESCOMENTAR LA SIGUIENTE LINEA
			//strHtml+=GetWebTablaRowParametrosBusquedaTablaClaseC(TablaBase,esMantenimientoSimple,esParaForeignKey,esParaReportes,esBusquedaDesdeForeignKey,ConFaces,ConRichFaces,"") 
			/*
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t<form name=\"frmParametrosBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
			}
			else
			{		
				//SE ENVIA LOS PARAMETROS DE BUSQUEDA Y AUXILIARES EN UN SOLO FORMULARIO
				if(!ConRichFaces) {
					//strHtml+="\r\n\t\t\t\t<h:form id=\"frmParametrosBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";						
				} else {
					//strHtml+="\r\n\t\t\t\t<form id=\"frmParametrosBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";						
				}
			}
			
			
			
			strHtml+="\r\n\t\t\t\t\t<table id=\"tblParametrosBusquedaNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"left\">";
			strHtml+="\r\n\t\t\t\t\t\t<tr id=\"trParametrosBusquedaNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\"  style=\"visibility:hidden;display:none\">";
			strHtml+="\r\n\t\t\t\t\t\t\t<td>";
			
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="<h1>"+strNumeroDe +GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+strAProcesar+":</h1>";
			} else {
				//strHtml+="<h1><h:outputText value=\""+strNumeroDe +GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+strAProcesar+"\" rendered=\"<?php echo $"+strObjectFace+"->isMostrarNumeroPaginacion ?>\"/></h1>";
			}
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td colspan=\"2\">";
			
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<input name=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" type=\"text\" size=\"5\" value=\"10\" onBlur=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.validarFormularioParametrosNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"()\">";
			}
			else
			{				
				if(!ConRichFaces) {
					strHtml+="<h:inputText id=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" size=\"5\" value=\"<?php echo $"+strObjectFace+"->iNumeroPaginacion ?>\" rendered=\"<?php echo $"+strObjectFace+"->isMostrarNumeroPaginacion ?>\" />";
				} else {
					//strHtml+="<h:inputText id=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" size=\"5\" value=\"<?php echo $"+strObjectFace+"->iNumeroPaginacion ?>\" rendered=\"<?php echo $"+strObjectFace+"->isMostrarNumeroPaginacion ?>\" />";
					//strHtml+="<h:inputText id=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" size=\"5\" value=\"<?php echo $"+strObjectFace+"->iNumeroPaginacion ?>\" rendered=\"<?php echo $"+strObjectFace+"->isMostrarNumeroPaginacion ?>\" />";
					strHtml+="<?php $form->input('ParametrosBusqueda.txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"', array('label' => '"+strNumeroDe +GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+strAProcesar+"')); ?>";
				}
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t</tr>";
			
			strHtml+="\r\n\t\t<tr id=\"trRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\">";
			
			
			
			
			String strRecargarInformacionVisibility="";
			
			if(GetEsReporteFromPropertiesC(TablaBase))
			{
				strRecargarInformacionVisibility="style=\"display:none\"";
			}
			
			if(!GetEsInternoFromPropertiesC(TablaBase)||esBusquedaDesdeForeignKey)
			{
				if(!ConFaces&&!ConRichFaces)
				{
					strHtml+="\r\n\t\t<td "+strRecargarInformacionVisibility+"><br><br><a:widget id=\"btndjdjtRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strRecargarInformacion+"'}\" />";
				}
				else
				{
					if(!ConRichFaces) {
						strHtml+="\r\n\t\t<td "+strRecargarInformacionVisibility+"><br><br><h:commandButton id=\"btndjdjtRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\"  action=\"#{"+strObjectFace+"->recargarInformacion}\" value=\""+strRecargarInformacion+"\" />";
					} else {
						//strHtml+="\r\n\t\t<td "+strRecargarInformacionVisibility+"><br><br><a4j:commandButton id=\"btndjdjtRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\"  action=\"#{"+strObjectFace+"->recargarInformacion}\" value=\""+strRecargarInformacion+"\"  reRender=\"div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete()\"/>";
						strHtml+="\r\n\t\t<td "+strRecargarInformacionVisibility+"><br><br><?php echo $ajax->submit('"+strRecargarInformacion+"', array('url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'recargarInformacion'), 'update' => 'div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"')); ?>";
					}
					
				}
				
				strHtml+="\r\n\t\t</td>";
			}
			
			if((esMantenimientoSimple&&!esParaForeignKey)||esParaReportes)
			{
				
				
				strHtml+="\r\n\t\t<td class=\"elementos\" style=\"display:none\">";
				
				if(!ConFaces&&!ConRichFaces)
				{
					strHtml+="\r\n\t\t<h2>"+strGenerarReporte+"</h2><input type=\"checkbox\" id=\"chbGenerarReporte\" name=\"chbGenerarReporte\"><a:widget id=\"djcmbGenerarReporte\" name=\"dojo.dijit.combobox\" service=\"/FuncionesServlet?accion=traerJSonTiposReportes\"/>";
				}
				else
				{					
					if(!ConRichFaces) {
						strHtml+="\r\n\t\t<h2>"+strGenerarReporte+"</h2><h:selectBooleanCheckbox id=\"chbGenerarReporte\" value=\"<?php echo $"+strObjectFace+"->bitGenerarReporte ?>\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\"/>\r\n";
					
						strHtml+="\t\t\t<h:selectOneMenu id=\"djcmbGenerarReporte\" value=\"<?php echo $"+strObjectFace+"->strGenerarReporte ?>\"  rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\">\r\n";			
						strHtml+="\t\t\t<f:selectItems value=\"<?php echo ${"+strObjectFace+"->tiposReportes ?>\"/>\r\n";
						strHtml+="\t\t\t</h:selectOneMenu>\r\n";
					} else {
						//strHtml+="\r\n\t\t<h2>"+strGenerarReporte+"</h2><h:selectBooleanCheckbox id=\"chbGenerarReporte\" value=\"<?php echo $"+strObjectFace+"->bitGenerarReporte ?>\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\"/>\r\n";
						strHtml+="\r\n\t\t<h2>"+strGenerarReporte+"</h2><?php echo $this->Form->checkbox('ParametrosBusqueda.chbGenerarReporte')?>\r\n";
						//RICH COMBO BOX NO ES UN CONTROL SELECT
						//rich:comboBox
						
						//strHtml+="\t\t\t<h:selectOneMenu id=\"djcmbGenerarReporte\" value=\"<?php echo $"+strObjectFace+"->strGenerarReporte ?>\"  rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\">\r\n";			
						//strHtml+="\t\t\t<f:selectItems value=\"<?php echo $"+strObjectFace+"->tiposReportes ?>\"/>\r\n";
						//strHtml+="\t\t\t</h:selectOneMenu>\r\n";
						
						strHtml+="\t\t\t<?php	echo $form->select('ParametrosBusqueda.djcmbGenerarReporte',$"+strObjectFace+"->tiposReportes); ?>\r\n";
						//rich:comboBox
					}
				}
				
				strHtml+="\r\n\t\t</td>";
				
				strHtml+="\r\n\t\t<td class=\"elementos\">";
				
				if(!ConFaces&&!ConRichFaces)
				{
					strHtml+="\r\n\t\t<h2>"+strGenerarReporteTodos+"</h2><input type=\"checkbox\" id=\"chbGenerarTodos\" name=\"chbGenerarTodos\">";
				}
				else
				{					
					if(!ConRichFaces) {
						strHtml+="\r\n\t\t<h2>"+strGenerarReporteTodos+"</h2><h:selectBooleanCheckbox id=\"chbGenerarTodos\" value=\"<?php echo $"+strObjectFace+"->bitMostrarTodosResultadosReporte ?>\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\"/>";
					} else {
						//strHtml+="\r\n\t\t<h2>"+strGenerarReporteTodos+"</h2><h:selectBooleanCheckbox id=\"chbGenerarTodos\" value=\"<?php echo $"+strObjectFace+"->bitMostrarTodosResultadosReporte ?>\" rendered=\"<?php echo $"+strObjectFace+"->bitPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+" ?>\"/>";
						strHtml+="\r\n\t\t<h2>"+strGenerarReporteTodos+"</h2><?php echo $this->Form->checkbox('ParametrosBusqueda.chbGenerarTodos')?>";
					}
				}
				
				
				strHtml+="\r\n\t\t</td>";
			}
			
			strHtml+="\r\n\t\t</tr>";
			
			
			
			strHtml+="\r\n\t\t\t\t\t</table>";
			*/
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t</form>";
				//strHtml+="\r\n\t\t\t\t<?php echo $form->end(); ?>";
			}
			else
			{
				//SE ENVIA EL FORMULARIO CON TODAS LAS BUSQUEDAS Y AUXILIARES
				if(!ConRichFaces) {
						//strHtml+="\r\n\t\t\t\t</h:form>";
				} else {
					//strHtml+="\r\n\t\t\t\t</form>";
				}
			}
			
			strHtml+="\r\n\t\t\t</td>";
			strHtml+="\r\n\t\t</tr>";
			
			//FORMULARIO GENERAL PARA ENVIAR LOS PARAMETROS DE TODAS LAS BUSQUEDAS Y AUXILIARES
			if(ConFaces||ConRichFaces)
			{
				//strHtml+="\r\n\t</form>";
				//strHtml+="\r\n\t<?php echo $form->end(); ?>";
				//DIV_BUSQUEDA COMENTADO
				//strHtml+="\r\n\t</div>";
			}
			
			//SE UBICA LAS BUSQUEDAS DE FK PARA CUANDO CONBUSQUEDA=TRUE, ESTOS DEBEN ESTAR EN UN FORMULARIO APARTE DEL PRINCIPAL
			foreach(String strBusquedaPorTablaFK in arrBusquedaPorTablaFK) {
				strHtml+=strBusquedaPorTablaFK;
			}
			
			//BORRO O INICIALIZO
			arrBusquedaPorTablaFK=new ArrayList();
			
			return strHtml;
		}
		
		public String GetWebRowTituloTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaReportes,bool ConFaces,bool ConRichFaces) 
		{
			String strHtml="";
			
			/*
			strHtml+="<tr class=\"cabecera\">";
			strHtml+="\r\n\t\t\t<td>";
			*/
			if(!esParaReportes)
			{
				/*
				strHtml+="<h1>"+strMantenimientoDe+GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+"</h1>";
				strHtml+="\r\n\t\t\t</td>	";	
				strHtml+="\r\n\t\t</tr>";
				*/
				
				String strObjectFace="";
			
				if(ConFaces||ConRichFaces)
				{
					strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
				}
			
				strHtml+="\r\n\t<?php if($strESBUSQUEDA=='false' && $strESRELACIONADO=='false') {?>";
				
				strHtml+="\r\n\t<tr class=\"navegacion\">";
				strHtml+="\r\n\t\t<td>";
				strHtml+="\r\n\t\t\t<form name=\"frmExpandirColapsar\">";				
				strHtml+="\r\n\t\t\t\t<table style=\"width: 100%; border: 0px solid black;padding: 0px; border-spacing: 0px\">";//border=\"\" 
				strHtml+="\r\n\t\t\t\t\t<tr align=\"left\" style=\"width: 505px\">";
				
				//EXPANDIR COLAPSAR ARBOL
				strHtml+="\r\n\t\t\t\t\t\t<td align=\"left\" style=\"width: 4%\">";
				strHtml+="\r\n\t\t\t\t\t\t\t<img id=\"imgExpandirColapsar\" align=\"left\" style=\"visibility:visible\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/collapse.gif\" title=\"MOSTRAR U OCULTAR ARBOL DE OPCIONES\" width=\"25\" height=\"25\"  onclick=\"funcionGeneral.colapsar('<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/"+/*GetRelativePathC(TablaBase)+*/"')\"/>";
				
				if(!blnConJQueryCode) {
					strHtml+="\r\n\t\t\t\t\t\t\t<a href=\"#\"><?php echo $"+strObjectFace+"->strTituloPathPagina ?></a>";				
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t<a href=\"#\"></a>";//"+GetNombreClaseC(TablaBase.ToString())+"
				}
				
				strHtml+="\r\n\t\t\t\t\t\t</td>";
				
				
				
				
				
				strHtml+="\r\n\t\t\t\t\t\t<?php if($strESRELACIONADO=='false' && $strESPOPUP=='false') {?>";
				
				//IR A MENU PRINCIPAL
				strHtml+="\r\n\t\t\t\t\t\t<td align=\"left\" style=\"width: 3%\">";
				strHtml+="\r\n\t\t\t\t\t\t\t<img id=\"imgIrMain\" style=\"visibility:visible;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/ir_main.gif\" title=\"IR A ARBOL DE OPCIONES PRINCIPAL\" width=\"25\" height=\"25\"  onclick=\"funcionGeneral.irWindowAuxiliar('MENU PRINCIPAL','view=Main&action=index&typeonload=onloadhijos')\"/>";
				strHtml+="\r\n\t\t\t\t\t\t</td>";
				
				//CERRAR SESION
				
				strHtml+="\r\n\t\t\t\t\t\t<td align=\"left\" style=\"width: 3%\">";
				strHtml+="\r\n\t\t\t\t\t\t\t<img id=\"imgCerrarSesion\" style=\"visibility:visible;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/cerrar_sesion.gif\" title=\"CERRAR SESION\" width=\"25\" height=\"25\"/>";
				strHtml+="\r\n\t\t\t\t\t\t</td>";
				
				strHtml+="\r\n\t\t\t\t\t\t<?php }?>";
				
				
				
				
				
				strHtml+="\r\n\t\t\t\t\t\t<td  align=\""+GetAlignTableFromPropertiesC(TablaBase)+"\" style=\"width: 70%\">";
				strHtml+="\r\n\t\t\t\t\t\t\t<table>";
				strHtml+="\r\n\t\t\t\t\t\t\t\t<tr>";
				
				strHtml+="\r\n\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"NuevoToolBar\"><img id=\"imgNuevoToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgNuevoToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\""+strNuevo+" "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/nuevo.gif\" width=\"25\" height=\"25\"/></td>";
				
				strHtml+="\r\n\r\n\t\t\t\t\t\t\t\t\t<?php if($strESRELACIONES=='false') {?>";			
				strHtml+="\r\n\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"NuevoGuardarCambiosToolBar\"><img id=\"imgNuevoGuardarCambiosToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgNuevoGuardarCambiosToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\""+strNuevo+" TABLA "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/nuevoguardarcambios.gif\" width=\"25\" height=\"25\"/></td>";				
				strHtml+="\r\n\t\t\t\t\t\t\t\t\t<?php } ?>";
				
				strHtml+="\r\n\r\n\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"GuardarCambiosToolBar\"><img id=\"imgGuardarCambiosToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgGuardarCambiosToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\""+strGuardarCambios+" "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/guardarcambiostabla.gif\" width=\"25\" height=\"25\"/></td>";
				strHtml+="\r\n\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"CopiarToolBar\"><img id=\"imgCopiarToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgCopiarToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\""+strCopiar+" "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/copiar.gif\" width=\"25\" height=\"25\"/></td>";				
				strHtml+="\r\n\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"DuplicarToolBar\"><img id=\"imgDuplicarToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgDuplicarToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\""+strDuplicar+" "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/duplicar.gif\" width=\"25\" height=\"25\"/></td>";
				strHtml+="\r\n\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"RecargarInformacionToolBar\"><img id=\"imgRecargarInformacionToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgRecargarInformacionToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\""+strRecargarInformacion+" "+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/recargar.gif\" width=\"25\" height=\"25\"/></td>";
				strHtml+="\r\n\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"AnterioresToolBar\"><img id=\"imgAnterioresToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgAnterioresToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\""+strAnteriores+"\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/anteriores.gif\" width=\"25\" height=\"25\"/></td>";
				strHtml+="\r\n\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"SiguientesToolBar\"><img id=\"imgSiguientesToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgSiguientesToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\""+strSiguientes+"\" style=\"width: 25px; height: 25px; text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/siguientes.gif\" width=\"25\" height=\"25\"/></td>";
				strHtml+="\r\n\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"AbrirOrderByToolBar\"><img id=\"imgAbrirOrderByToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgAbrirOrderByToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\""+strOrden+" DE DATOS\" style=\"width: 25px; height: 25px; text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/orden.gif\" width=\"25\" height=\"25\"/></td>";								
				strHtml+="\r\n\t\t\t\t\t\t\t\t\t<td id=\"td"+GetNombreClaseC(TablaBase.ToString())+"CerrarPaginaToolBar\"><img id=\"imgCerrarPaginaToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"imgCerrarPaginaToolBar"+GetNombreClaseC(TablaBase.ToString())+"\" title=\""+strCerrar+"\" style=\"width: 25px; height: 25px; text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/cerrar.gif\" width=\"25\" height=\"25\"/></td>";
				
				
				strHtml+="\r\n\t\t\t\t\t\t\t\t</tr>";
				strHtml+="\r\n\t\t\t\t\t\t\t</table>";
				strHtml+="\r\n\t\t\t\t\t\t</td>";
								
				strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\" style=\"width: 20%\">";
				strHtml+="\r\n\t\t\t\t\t\t\t<a id=\"ControlesSecciones\" ></a>";
				strHtml+="\r\n\t\t\t\t\t\t\t<img id=\"imgAreaBusquedas\" align=\"right\" style=\"visibility:hidden\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/busqueda.gif\" width=\"20\" height=\"20\"  onclick=\"funcionGeneral.irAreaDePagina('Busquedas')\"/>";
				strHtml+="\r\n\t\t\t\t\t\t\t<img id=\"imgAreaControles\" align=\"right\" style=\"visibility:hidden\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/controles.gif\" width=\"20\" height=\"20\"  onclick=\"funcionGeneral.irAreaDePagina('Campos')\"/>";
				strHtml+="\r\n\t\t\t\t\t\t\t<img id=\"imgAreaAcciones\" align=\"right\" style=\"visibility:hidden\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/acciones.gif\" width=\"20\" height=\"20\"  onclick=\"funcionGeneral.irAreaDePagina('Acciones')\"/>";
				strHtml+="\r\n\t\t\t\t\t\t\t<img id=\"imgAtras\" align=\"right\" style=\"visibility:visible\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/atras.gif\" width=\"20\" height=\"20\"  onclick=\"history.back()\"/>";
				strHtml+="\r\n\t\t\t\t\t\t</td>";
								
				strHtml+="\r\n\t\t\t\t\t</tr>";
								
				strHtml+="\r\n\t\t\t\t</table>";
				strHtml+="\r\n\t\t\t</form>";
				strHtml+="\r\n\t\t</td>";
				strHtml+="\r\n\t</tr>";
				strHtml+="\r\n\t<?php } ?>";
			}
			else
			{
				;//strHtml+="<h1>"+strReporteDe+GetTituloNombreTableFromPropertiesC(TablaBase)+"</h1>";
			}
			
			
			return strHtml;
		}
		
	public bool TieneColumnaBusquedaFkVariableGlobalC(IndexSchema indexSchema)  {
		bool blnExisteBusquedaFkVariableGlobal=false;
		
			if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual"))) {
				
				foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
					if(EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)
						|| EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)) {
					
						blnExisteBusquedaFkVariableGlobal=true;
						break;
					}
				}
			}
		
		return blnExisteBusquedaFkVariableGlobal;
	}
		
	public String GetWebRowControlesBusquedasIndicesTablasClasesC(TableSchema TablaBase,TableSchema TablaBasePadre,bool esMantenimientoSimple,bool esParaForeignKey,bool esParaReportes,bool ConFaces,bool ConRichFaces,bool blnEsParaBusquedaRapida,String JQueryUIVersion,bool conEditar) 
		{
			String strBusquedasDe="";
			String strBusquedaFK="";
			String strBusquedaFKVisibleCabbecera="";
								
			String strObjectFace="";
			
			String strTitle="";	
			String strPlaceHolderBase="";
	
			if(ConFaces||ConRichFaces)
			{
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
			
			if(esParaForeignKey)
			{
				strBusquedasDe=" "+strDe+" ";
				strBusquedasDe+=GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase);
				 strBusquedaFKVisibleCabbecera="";
			}
			else
			{
				if(!(ConFaces||ConRichFaces)) {
				 	strBusquedaFKVisibleCabbecera=" style=\"display:none\" ";
				} else {
					if(!blnConJQueryCode) {
						strBusquedaFKVisibleCabbecera=" style=\"display:<?php echo $"+strObjectFace+"->strPermisoBusqueda"+GetNombreClaseC(TablaBase.ToString())+" ?>\" ";
					} else {
						strBusquedaFKVisibleCabbecera=" style=\"display:table-row\" ";						
						//strBusquedaFKVisibleCabbecera=" style=\"<?php echo($strStyleBusqueda); ?>\" ";
					}
				}
			}
			
			if(!esMantenimientoSimple)
			{
				strBusquedasDe=strDe+GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase);
			}
			
			String strHtml=">";
			String strRowFormularioSearch="";
			String strRowSearch="";
			String strDisplayForeignKey="";
				
			//FORMULARIO GENERAL PARA ENVIAR LOS PARAMETROS DE TODAS LAS BUSQUEDAS Y AUXILIARES
			if(ConFaces||ConRichFaces)
			{
				//ESTO IBA AL FINAL PERO LLAMABA VARIAS VECES Y CUANDO NO TRAIA DATOS EN BUSQUEDA NUNCA MAS LO HACIA, POR LO QUE MEJOR QUITE
				//rendered=\"#{"+strObjectFace+"->"+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel.rowCount>0}\"
				
				//strPermisoBusqueda
				if(!esParaForeignKey) {
					if(!blnConJQueryCode) {
						strDisplayForeignKey="<?php echo $"+strObjectFace+"->strPermisoBusqueda"+GetNombreClaseC(TablaBase.ToString())+" ?>";
					} else {
						strDisplayForeignKey="table-row";	
					}
				} else {
					strDisplayForeignKey="table-row";
				}
			
				//DIV_BUSQUEDA COMENTADO
				//strRowFormularioSearch+="\r\n\t<div id=\"divBusqueda"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" style=\"display:"+strDisplayForeignKey+"\">";
						//strRowFormularioSearch+="\r\n\t<form id=\"frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
						//strRowFormularioSearch+="\r\n\t<?php echo $ajax->form('/buscar', 'post', array('update' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"')); ?>";
			}
			//AJAX-BUSQ
			strRowSearch+=strRowFormularioSearch+"\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"CabeceraBusquedas\" class=\"busquedacabecera\""+strBusquedaFKVisibleCabbecera+">\r\n\t\t\t<td>\r\n\t\t\t\t<img id=\"imgExpandirContraerRowBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\" title=\"MOSTRAR U OCULTAR BÚSQUEDAS\" align=\"left\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/xcollapse.png\" class=\"imagencabecera\"  onclick=\"funcionGeneral.mostrarOcultarFilaCambiarImagenRelative('trBusqueda"+GetNombreClaseC(TablaBase.ToString())+"',this,'"+GetRelativePathC(TablaBase)+"')\"><font>"+strBusquedas+strBusquedasDe+"</font>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n";//'tr"+GetNombreClaseC(TablaBase.ToString())+"Busquedas'
			//strRowSearch+=strRowFormularioSearch+"\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"CabeceraBusquedas\" class=\"busquedacabecera\""+strBusquedaFKVisibleCabbecera+">\r\n\t\t\t<td>\r\n\t\t\t\t<img id=\"imgExpandirContraerRowBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"left\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/xcollapse.png\" width=\"25\" height=\"25\"  onclick=\"funcionGeneral.mostrarOcultarAjaxDivCambiarImagenRelative('divBusquedas"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"','tr"+GetNombreClaseC(TablaBase.ToString())+"Busquedas',this,'"+GetRelativePathC(TablaBase)+"')\"><font>"+strBusquedas+strBusquedasDe+"</font>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n";
			
			String strhtmlformularioinicial="";
			String strFormFinal="";
			
			String strFormInicial="";
			
			if(!ConFaces&&!ConRichFaces)
			{
				strFormInicial="<form name=\"frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
				strFormFinal="</form>";
			}
			else
			{
				//SE ENVIA UN SOLO FORMULARIO PARA TODAS LAS BUSQUEDAS Y AUXILIARES
				if(!ConRichFaces) {
					//strFormInicial="<h:form id=\"frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
					//strFormFinal="</h:form>";
				} else {					
					//strFormFinal="</form>";
					//strFormInicial="<?php echo $ajax->form('/buscar"+GetNombreClaseC(TablaBase.ToString())+"s', 'post', array('update' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"')); ?>";
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strFormInicial="<?php echo $ajax->form(null,'post',array('id'=>'frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
						strFormInicial="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->form(null,'post',array('id'=>'frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"','name'=>'frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"')); ?>";
					} else {
						strFormInicial="<form id=\"frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
					}
				}
			}
			
			
			//String strHtmlInicial0="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Busquedas\" class=\"busqueda\" style=\"display:none\">\r\n\t\t\t<td align=\"center\">\r\n\t\t\t\t<a id=\"Busquedas\"></a>\r\n\r\n\t\t\t\t"+strFormInicial+"\r\n\r\n\t\t\t\t";
			//strPermisoBusqueda
			if(!esParaForeignKey) {				
				if(!blnConJQueryCode) {
					strDisplayForeignKey="<?php echo $"+strObjectFace+"->strPermisoBusqueda"+GetNombreClaseC(TablaBase.ToString())+" ?>";
				} else {
					strDisplayForeignKey="display:table-row";	
					//strDisplayForeignKey="<?php echo($strStyleBusqueda); ?>";	
				}		
			} else {
				strDisplayForeignKey="display:table-row";
				//strDisplayForeignKey="<?php echo($strStyleBusqueda); ?>";
			}
			
						
			//<?php echo($strStyleBusqueda); ?>
			
			String strHtmlInicial0="\r\n\t\t<tr id=\"trBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\" class=\"busqueda\" style=\""+strDisplayForeignKey+"\">\r\n\t\t\t<td align=\"center\">\r\n\t\t\t\t<a id=\"Busquedas\"></a>\r\n\t\t\t\t";
			//NO PONER STYLE SE DAÑA DRAGGABLE AJAX
			//AJAX-BUSQ
			//PARA CARGAR COMBOS EN BUSQUEDA USAR div de ajax			
			
			String strClassTab="";
			String strKeyTabs="";
			String strNombreDivBusqueda="divBusquedas"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart;
				
				
			if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
				//strHtmlInicial0+="\r\n\t\t\t\t<?php echo $ajax->div('divBusquedas"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>\r\n\t\t\t\t";
				strHtmlInicial0+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->div('divBusquedas"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>\r\n\t\t\t\t";
			} else {
				
				if(JQueryUIVersion.Equals("1.10.4") && blnConTabsBusqueda) {
					strNombreDivBusqueda="tabs";
					strClassTab=" class=\"tabs\"";
					strKeyTabs="BYDAN_TABS";
				} else {		
					//DIV PRINCIPAL EN NORMALES
					strHtmlInicial0+="\r\n\t\t\t\t<div id=\""+strNombreDivBusqueda+"\""+strClassTab+" >"+strKeyTabs+"\r\n\t\t\t\t";//style=\"display:table-row\"		
				}
			}
			strHtmlInicial0+="\r\n\r\n\t\t\t\t"+strFormInicial+"\r\n\t\t\t\t";
			strHtmlInicial0+="<table style=\"visibility:visible; text-align:left; width: "+GetWidthBusquedaTableFromPropertiesC(TablaBase)+"\">";
			
			//Adiciono para que la tabla grande sea independiente con una celda
			//AJAX-BUSQ
			String strDisplayInicial="";
			
			if(ConRichFaces) {
				strDisplayInicial="display:none";
							
				if(JQueryUIVersion.Equals("1.10.4") && blnConTabsBusqueda) {
					strDisplayInicial="display:table-row";					
				}
				
				strHtmlInicial0+="\r\n\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Busquedas\" class=\"busqueda\" style=\"BYDAN_DISPLAY_BUSQUEDA\"><td>";//"+strDisplayInicial+"
				
				//DIV PRINCIPAL EN JQUERY PARA TABS
				if(JQueryUIVersion.Equals("1.10.4") && blnConTabsBusqueda) {
					//DEPENDE DE TABLA Y PORCENTAJE SE UBICA PANELES DEBAJO O DERECHA
					String strWidthBusquedas="50";
					
					if(intNumeroIndicesBusquedas<=3) {
						strWidthBusquedas="70";//40
						
					} else if(intNumeroIndicesBusquedas<=6) {
						strWidthBusquedas="80";//60
						
					} else {
						strWidthBusquedas="95";//85
					}
					
					strHtmlInicial0+="\r\n\t\t\t\t<?php if($strESRELACIONADO=='false') {?>";
					strHtmlInicial0+="\r\n\t\t\t\t<div id=\""+strNombreDivBusqueda+"\""+strClassTab+" style=\"width: "+strWidthBusquedas+"%\">"+strKeyTabs+"\r\n\t\t\t\t";//style=\"display:table-row\"		
				}
			}
			
			String strHtmlFinal0ConRichFaces="";
			//Adiciono para que la tabla grande sea independiente con una celda
			if(ConRichFaces) {
				//FIN DIV PRINCIPAL EN JQUERY PARA TABS
				if(JQueryUIVersion.Equals("1.10.4") && blnConTabsBusqueda) {
					String strStyleDisplayPaginacion="table-row";
					
					if(blnEsProceso) {
						strStyleDisplayPaginacion="none";
					}
			
					strHtmlFinal0ConRichFaces="\r\n\t\t\t\t</div>\r\n\t\t\t\t";
					strHtmlFinal0ConRichFaces+="<?php } ?>\r\n\t\t\t\t</td>\r\n\t\t\t\t</tr>";
					strHtmlFinal0ConRichFaces+="\r\n\r\n\t\t\t\t<tr style=\"display:"+strStyleDisplayPaginacion+"\"><td>\r\n\t\t\t\t<div id=\"divParametrosBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
				} else {
					//FIN DIV PRINCIPAL NORMALES
					strHtmlFinal0ConRichFaces="\r\n\t\t\t\t</td></tr><tr><td>";
				}
			}
			
			String strHtmlFinal0="\r\n\t\t\t\t"+strHtmlFinal0ConRichFaces+"";
			
			//Adiciono tabla parametros por problemas al envio de Parametros en busquedas
			if(ConRichFaces) {
				strHtmlFinal0+=GetWebTablaRowParametrosBusquedaTablaClaseC(TablaBase,esMantenimientoSimple,esParaForeignKey,esParaReportes,esParaForeignKey,ConFaces,ConRichFaces,"\t\t\t\t",blnEsParaBusquedaRapida);
				
				//DIV PARAMETROS PARA NORMALES
				if(JQueryUIVersion.Equals("1.10.4") && blnConTabsBusqueda) {
					strHtmlFinal0+="\r\n\t\t\t\t</div>";
				}
				
				strHtmlFinal0+="\r\n\t\t\t\t</td></tr>";
				strHtmlFinal0+="\r\n\t\t\t\t</table>";
			}
			
						
			if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
				//strHtmlFinal0+="\r\n\t\t\t\t"+"<?php echo $form->end(); ?>";
				strHtmlFinal0+="\r\n\t\t\t\t"+"<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->end(); ?>";
			} else {
				strHtmlFinal0+="\r\n\t\t\t\t"+"</form>";		
			}
			//PARA BUSQUEDAS USAR ajax div
			
			if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
				//strHtmlFinal0+="\r\n\t\t\t\t<?php echo $ajax->divEnd('divBusquedas"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
				strHtmlFinal0+="\r\n\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Html->divEnd('divBusquedas"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"'); ?>";
			} else {
				//NORMALES
				if(!(JQueryUIVersion.Equals("1.10.4") && blnConTabsBusqueda)) {
					strHtmlFinal0+="\r\n\t\t\t\t"+"</div>";
				}
			}
			
			strHtmlFinal0+="\r\n\t\t\t\t"+strFormFinal+"\r\n\r\n\t\t\t</td>\r\n\t\t</tr>";
			
			String strHtmlInicial="\r\n<tr class=\"busqueda\">\r\n<td align=\"center\">\r\n<a id=\"Busquedas\"></a>\r\n<table style=\"visibility:visible;width: 100%;text-align: center\">";
			String strHtmlFinal="\r\n\t</tr>\r\n</table>\r\n</td>\r\n</tr>";
			strHtmlInicial+="";
			strHtmlFinal+="";;
			
			String strTituloBusquedaInicialConRichFaces="";
			
			//Adiciono por cada tipo de busqueda sera una tabla y en ella un control simpletogglepanel
			if(ConRichFaces) {//labelbydanreplace para luego ser reemplazado por en nombre de la busqueda
				
				if(!blnConJQueryCode) {
					strTituloBusquedaInicialConRichFaces="\r\n\t\t\t\t\t<div id=\"divvisibilidadvariablebydanreplace\" style=\"<?php echo $"+strObjectFace+"->visibilidadvariablebydanreplace ?>\"><span class=\"busquedatitulo\">labelbydanreplace</span> \r\n\t\t\t\t\t<table id=\"tblvisibilidadvariablebydanreplace\" class=\"busqueda\">";
					//style=\"display:table-row\" 
				} else {
					strTituloBusquedaInicialConRichFaces="\r\n\t\t\t\t\t<div id=\"divvisibilidadvariablebydanreplace\">";
					
					//SOBRA EL SPAN POR TABS
					//strTituloBusquedaInicialConRichFaces+="<span class=\"busquedatitulo\">labelbydanreplace</span>";
					
					strTituloBusquedaInicialConRichFaces+="\r\n\t\t\t\t\t<table id=\"tblvisibilidadvariablebydanreplace\" class=\"busqueda\">";	
					//style=\"display:table-row\"
				}
			}
			
			String strTituloBusquedaFinalConRichFaces="";
			//Adiciono por cada tipo de busqueda sera una tabla y en ella un control simpletogglepanel
			if(ConRichFaces) {
				strTituloBusquedaFinalConRichFaces="\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>";
			}
			
			String strBusquedaConRichFaces=strBusqueda;
			
			//quito la palabra "BUSQUEDAS", es decir para que quede vacio,el titulo ira en el simpletoggle
			if(ConRichFaces) {
				strBusquedaConRichFaces="";
			}
			
			String strHtmlFormularioFinal="";
			String strTituloBusqueda="";
			String strTituloBusquedaInicial="";//strTituloBusquedaInicialConRichFaces+"\r\n\t\t\t\t\t<tr class=\"busquedatitulo\">\r\n\t\t\t\t\t\t<td colspan=\"3\" align=\"left\" class=\"busquedatitulo\">\r\n\t\t\t\t\t\t\t<font>"+strBusquedaConRichFaces;
			
			if(!ConRichFaces) {
				strTituloBusquedaInicial=strTituloBusquedaInicialConRichFaces+"\r\n\t\t\t\t\t<tr class=\"busquedatitulo\">\r\n\t\t\t\t\t\t<td colspan=\"3\" align=\"left\" class=\"busquedatitulo\">\r\n\t\t\t\t\t\t\t<font>"+strBusquedaConRichFaces;
			} else {
				strTituloBusquedaInicial=strTituloBusquedaInicialConRichFaces;
			}
			
			
			String strTituloBusquedaMiddle="";
			String strTituloBusquedaFinal="";//"</font>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>";
			
			if(!ConRichFaces) {
				strTituloBusquedaFinal="</font>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>";
			} else {
				strTituloBusquedaFinal="";
			}
			
			String strTitulo=string.Empty;
			String strComboText=string.Empty;
			String strBoton=string.Empty;
			String strBotonBusqueda=string.Empty;
			String strCombo=string.Empty;
			
			String strFuncion=string.Empty;
			String strTabsLista=string.Empty;
			String strTabLista=string.Empty;
			bool existe=false;
			
			
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			String sVisibiliadIndice=String.Empty;
			String sVisibiliadIndiceStyle=String.Empty;
			
			
			int intNumeroBusquedas=0;
			String strFilaGeneralIniBusqueda="<tr>";
			String strFilaGeneralFinBusqueda="</tr>";
			
			String strFilaIniBusqueda="";
			String strFilaFinBusqueda="";
			String strCeldaBotonAuxiliarBusqueda="";
			String strWidthBotonBusqueda=" ";
			//width=\"11%\"
			
			if(JQueryUIVersion.Equals("1.10.4") && blnConTabsBusqueda) {
				strFilaIniBusqueda="\r\n\t\t\t\t\t\t<tr>";
				strFilaFinBusqueda="\r\n\t\t\t\t\t\t</tr>";
				strCeldaBotonAuxiliarBusqueda="\r\n\t\t\t\t\t\t<td></td>";
				strWidthBotonBusqueda=" align=\"center\" ";
			}
			
			if(!esParaReportes)
			{
				String strPrefijoControl="<?php echo($strSuf)?>";
				
				
				//PHP_BASICO
				if(!blnConJQueryCode) {
					strPrefijoControl="";
				}
				
				foreach(IndexSchema indexSchema in TablaBase.Indexes)
				{					
					strCombo="";
					
					if(!indexSchema.IsPrimaryKey)
					{
						if(blnEsParaBusquedaRapida && intNumeroBusquedas>=3) {
							break;
						}
						
						if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
							continue;
						}
					
					
						if(TieneColumnaBusquedaFkVariableGlobalC(indexSchema)) {
							continue;	
						}
						
						sVisibiliadIndice="strVisibilidad"+strPrefijoControl+indexSchema.Name;
						sVisibiliadIndiceStyle="strVisibilidad"+indexSchema.Name;
						
						if(indexSchema.IsUnique)
						{
							continue;
																						//strTitulo=GetNombreClaseC(TablaBase.ToString())+"</td>";
							//strBoton="\r\n\t\t<td width=\"11%\"><input type=\"button\" value=\"Buscar\" onclick=\"PaginaWebInteraccion"+  GetNombreClaseC(TablaBase.ToString())+"Buscar"+GetNombreClaseC(TablaBase.ToString())+"s('"+indexSchema.Name+ "')\">\r\n\t\t</td>";
																						//strCombo="<td width=\"79%\"><a:widget id=\"djcmb"+  GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.combobox\"/></td>";					
					
																						//strInitFuncion+=GetNombreClaseC(TablaBase.ToString())+" "+"Traer"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
						}
						else
						{
							existe=true;
							//strTitulo=GetNombreClaseC(TablaBase.ToString())+"s</td>";
							//strBoton="\r\n\t\t\t\t\t\t<td width=\"11%\">\r\n\t\t\t\t\t\t\t<input type=\"button\" value=\"Buscar\" onclick=\"PaginaWebInteraccion"+  GetNombreClaseC(TablaBase.ToString())+"Buscar"+GetNombreClaseC(TablaBase.ToString())+"s('"+indexSchema.Name+ "')\">\r\n\t\t\t\t\t\t</td>";
							
							if(!ConFaces&&!ConRichFaces)
							{
								strBotonBusqueda="<a:widget id=\"btndjdjtBuscar"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strBuscar+"'}\" />";
								
							}
							else
							{
								if(!ConRichFaces) {
									strBotonBusqueda="<h:commandButton id=\"btndjdjtBuscar"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"\"  action=\"#{"+strObjectFace+"->"+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+""+"}\" value=\""+strBuscar+"\"/>";
								} else {
									//strBotonBusqueda="<a4j:commandButton id=\"btndjdjtBuscar"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"\"  action=\"#{"+strObjectFace+"->"+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+""+"}\" value=\""+strBuscar+"\" reRender=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete()\"/>";
									//strBotonBusqueda="<?php echo $form->submit('Buscar',array('name'=>'btn"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"','escape'=>false)); ?>";
									String strControllerReturn="";
									
									if(esParaForeignKey && TablaBasePadre!=null) {
										//TablaBasePadreFK
										strControllerReturn=",'"+GetCakeModelControllerNameC(TablaBasePadre.ToString())+"s'";
									}
									
									if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
										//strBotonBusqueda="<?php echo $ajax->submit('"+strBuscar+"', array('id'=>'btnBuscar"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"','name'=>'btnBuscar"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"ParaProcesar'"+strControllerReturn+"), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'),'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();','complete' =>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
										strBotonBusqueda="<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->submit('"+strBuscar+"', array('id'=>'btnBuscar"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"','name'=>'btnBuscar"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"','class'=>'botonnormal','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBase.ToString())+"s', 'action'=>'get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"ParaProcesar'"+strControllerReturn+"), 'update' => array('div"+GetNombreClaseC(TablaBase.ToString())+"s"+strAjaxWebPart+"','divMensajes'),'before' => '"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick();','complete' =>'"+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete();','onmouseover'=>'funcionGeneral.activarBoton(this);','onmouseout'=>'funcionGeneral.desactivarBoton(this);')); ?>";
									} else {
										strBotonBusqueda="<input type=\"button\" id=\"btnBuscar"+GetNombreClaseC(TablaBase.ToString())+strPrefijoControl+indexSchema.Name+"\" name=\"btnBuscar"+GetNombreClaseC(TablaBase.ToString())+strPrefijoControl+indexSchema.Name+"\" title=\"BUSCAR\" value=\""+strBuscar+"\"/>";//class=\"botonnormal\" onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
									}
								}
							}
			
							strBoton=strFilaIniBusqueda+strCeldaBotonAuxiliarBusqueda+"\r\n\t\t\t\t\t\t<td"+strWidthBotonBusqueda+">\r\n\t\t\t\t\t\t\t"+strBotonBusqueda+"\r\n\t\t\t\t\t\t</td>"+strFilaFinBusqueda+"\r\n\t\t\t\t\t";//</tr>
							
							
							
							strComboText="";
							strTitulo="";
							strTituloBusquedaMiddle="";
							
							if(indexSchema.Name.Contains(strFK))
							{
								
								
								
								TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);
								
								strTitle=" title=\""+GetWebNombreTituloColumnFromPropertiesC(indexSchema.MemberColumns[0])+"\" ";	
								strPlaceHolderBase=" placeholder=\""+GetWebNombreTituloColumnFromPropertiesC(indexSchema.MemberColumns[0])+"\" "+strTitle+" ";
	
								if(tableRelacionada.Name!=TablaBase.Name)
								{
									bool blnConBusqueda=GetBusquedaForeignKeyColumnFromPropertiesC(indexSchema.MemberColumns[0]);
									
									if(ConBusquedaAnterior && blnConBusqueda)
									{	//Trace.WriteLine("here");
										ArrayList arrTemp=new ArrayList();
										
										strBusquedaFK="\r\n\t\t<tr id=\"trFk"+GetNombreClaseC(tableRelacionada.ToString())+"Busqueda\" style=\"display:none\">\r\n\t<td>\r\n\t<table bgcolor=\""+strColorBusquedaAnidada+"\" style=\"width: 100%;text-align: center\">";
										strBusquedaFK+=GetWebRowControlesBusquedasIndicesTablasClasesC(tableRelacionada,TablaBase,true,true,false,ConFaces,ConRichFaces,blnConBusqueda,JQueryUIVersion,conEditar);
										strBusquedaFK+=GetWebRowParametrosBusquedaTablaClaseC(tableRelacionada,true,true,false,true,ConFaces,ConRichFaces,blnConBusqueda);
										strBusquedaFK+=GetWebRowTablaDatosTablaClaseC(tableRelacionada,TablaBase,indexSchema.MemberColumns[0],true,true,TablaBase,false,false,ConFaces,ConRichFaces,blnConBusqueda,conEditar);
										strBusquedaFK+=GetWebRowPaginacionYNuevoTablaClaseC(tableRelacionada,true,true,false,ConFaces,ConRichFaces,blnConBusqueda);								
										strBusquedaFK+="\r\n\t\t</table>\r\n\t</td>\r\n\t</tr>";
										
										arrBusquedaPorTablaFK.Add(strBusquedaFK);
									}
								}
								
								//strTitulo+=strBusquedaFK;
								//width=\"10%\"
								strTitulo+="\r\n\t\t\t\t\t\t<td><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(indexSchema.MemberColumns[0])+"</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";							
								
								if(!ConFaces&&!ConRichFaces)
								{
									strCombo="<a:widget id=\""+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\" name=\"dojo.dijit.combobox\" value=\"[{label : 'Alabama', value : 'AL'}]\"/>";									
								}
								else
								{
									if(!ConRichFaces) {
										strCombo="<h:selectOneMenu id=\""+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\" value=\"<?php echo $"+strObjectFace+"->"+GetPrefijoTipoC(indexSchema.MemberColumns[0])+GetNombreColumnaClaseC(indexSchema.MemberColumns[0])+indexSchema.Name+" ?>\"> \r\n";					
										strCombo+="<f:selectItems value=\"<?php echo $"+strObjectFace+"->"+GetNombreCompletoClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]).ToLower() +"s"+strForeignKey+"ListSelectItem ?>\"/>\r\n";
										strCombo+="</h:selectOneMenu>";
									
									} else {
										//rich:comboBox	richPanel
										if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
											//strCombo="\r\n\t\t\t\t\t\t\t<?php echo $ajax->div('div"+ GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"'); ?>\r\n";
										} else {
											//strCombo="\r\n\t\t\t\t\t\t\t<div id=\"div"+ GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\">\r\n";
										}
										/*
										strCombo+="\t\t\t\t\t\t\t<h:selectOneMenu id=\""+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\" value=\"<?php echo $"+strObjectFace+"->"+GetPrefijoTipoC(indexSchema.MemberColumns[0])+GetNombreColumnaClaseC(indexSchema.MemberColumns[0])+indexSchema.Name+" ?>\"> \r\n";					
										strCombo+="\t\t\t\t\t\t\t<f:selectItems value=\"<?php echo $"+strObjectFace+"->"+GetNombreCompletoClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]).ToLower() +"s"+strForeignKey+"ListSelectItem ?>\"/>\r\n";
										strCombo+="\t\t\t\t\t\t\t</h:selectOneMenu>\r\n";
										*/
										//strCombo+="\t\t\t\t\t\t\t<?php	echo $form->select('"+indexSchema.Name+"."+GetPrefijoTipoC(indexSchema.MemberColumns[0])+GetNombreColumnaClaseC(indexSchema.MemberColumns[0])+"',$"+GetNombreCompletoClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]).ToLower()+"s); ?>\r\n";
																				
										if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
											//strCombo+="\r\n\t\t\t\t\t\t\t\t<?php echo $form->select('"+indexSchema.Name+".cmb"+strIdGetSet+GetNombreClaseC(GetTableSchemaFromColumnForeignKey(indexSchema.MemberColumns[0]).ToString())+"',$"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->"+GetNombreCompletoClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]).ToLower()+"s"+strForeignKey+",$"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->"+strId+GetNombreCompletoClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]).ToLower()+strDefault+strForeignKey+"); ?>\r\n";
											strCombo+="\r\n\t\t\t\t\t\t\t\t<?php echo $"+GetNombreClaseObjetoC(TablaBase.ToString())+"Controller->Form->select('"+indexSchema.Name+strSeparadorName+"cmb"+GetNombreColumnaClaseC(indexSchema.MemberColumns[0])+"',$"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->"+GetNombreCompletoClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]).ToLower()+"s"+strForeignKey+",$"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->"+strId+GetNombreCompletoClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]).ToLower()+strDefault+strForeignKey+"); ?>\r\n";//strIdGetSet+GetNombreClaseC(GetTableSchemaFromColumnForeignKey(indexSchema.MemberColumns[0]).ToString())
										} else {
											strCombo+="<select id=\""+strPrefijoControl+indexSchema.Name+strSeparadorName+"cmb"+GetNombreColumnaClaseC(indexSchema.MemberColumns[0])/*strIdGetSet+GetNombreClaseC(GetTableSchemaFromColumnForeignKey(indexSchema.MemberColumns[0]).ToString())*/+"\" name=\""+strPrefijoControl+indexSchema.Name+"-cmb"+GetNombreColumnaClaseC(indexSchema.MemberColumns[0])/*strIdGetSet+GetNombreClaseC(GetTableSchemaFromColumnForeignKey(indexSchema.MemberColumns[0]).ToString())*/+"\""+strTitle+"></select>";		
										}
										
										if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
											//strCombo+="\t\t\t\t\t\t\t<?php echo $ajax->divEnd('div"+ GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"'); ?>";
										} else {
											//strCombo+="\t\t\t\t\t\t\t</div>";
										}
										
										//rich:comboBox
									}
								}
								
								//width=\"79%\"
								strComboText="\r\n\t\t\t\t\t\t<td align=\"center\">\r\n\t\t\t\t\t\t\t"+strCombo+"\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t"+strFilaFinBusqueda;								
								strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(indexSchema.MemberColumns[0]);
								
								strTitulo=strFilaIniBusqueda+strTitulo;
								
								//solo cambia el comentario
								//Trace.WriteLine(strTitulo);
								
								if(ConRichFaces) {
									strTituloBusqueda=strTituloBusquedaInicial+/*strTituloBusquedaMiddle+ */strTituloBusquedaFinal;
								} else {
									strTituloBusqueda=strTituloBusquedaInicial+strTituloBusquedaMiddle+ strTituloBusquedaFinal;
								}
								
							}
						}	
						
						if(!indexSchema.Name.Contains("FK"))
						{
							strComboText="";
							strTitulo="";
							strTituloBusquedaMiddle="";
							int count=1;	count+=0;
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
							{
								if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
								{
									//strTitulo
									//width=\"10%\"
									strComboText+=strFilaIniBusqueda+"\r\n\t\t\t\t\t\t<td class=\"busquedatitulocampo\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
									//width=\"79%\"
									strComboText+="\r\n\t\t\t\t\t\t<td align=\"center\">\r\n\t\t\t\t\t\t\t"+ GetControlHtmlBusqueda( memberColumnSchema.Column,indexSchema.Name,ConFaces,ConRichFaces,false)+"\r\n\t\t\t\t\t\t</td>"+strFilaFinBusqueda;
									strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column);
									
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										//width=\"10%\"
										strComboText+=strFilaIniBusqueda+"\r\n\t\t\t\t\t\t<td class=\"busquedatitulocampo\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" "+strSufijoRangoFinal.ToUpper()+"</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
										//width=\"79%\"
										strComboText+="\r\n\t\t\t\t\t\t<td align=\"center\">\r\n\t\t\t\t\t\t\t"+ GetControlHtmlBusqueda( memberColumnSchema.Column,indexSchema.Name,ConFaces,ConRichFaces,true)+"\r\n\t\t\t\t\t\t</td>"+strFilaFinBusqueda;
										strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" "+strSufijoRangoFinal.ToUpper();
									}
								}
								else
								{
									if(!indexSchema.Name.Contains("BusquedaRango"))
									{
										//strTitulo
										//width=\"10%\"
										strComboText+="\r\n\t\t\t\t\t\t<td class=\"busquedatitulocampo\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
										//width=\"79%\"
										strComboText+="\r\n\t\t\t\t\t\t<td align=\"center\">\r\n\t\t\t\t\t\t"+ GetControlHtmlBusqueda( memberColumnSchema.Column,indexSchema.Name,ConFaces,ConRichFaces,false)+"\r\n\t\t\t\t\t\t</td>";
										
										if(indexSchema.Name.Contains("BusquedaMayor"))
										{
											strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Inicial";
										}
										else if(indexSchema.Name.Contains("BusquedaMenor"))
										{
											strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Final";
										}
									}
									else
									{
										//strTitulo
										//width=\"10%\"
										strComboText+="\r\n\t\t\t\t\t\t<td class=\"busquedatitulocampo\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Inicial</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
										//width=\"79%\"
										strComboText+="\r\n\t\t\t\t\t\t<td align=\"center\">\r\n\t\t\t\t\t\t"+ GetControlHtmlBusqueda( memberColumnSchema.Column,indexSchema.Name,ConFaces,ConRichFaces,false).Replace(memberColumnSchema.Column.Name+indexSchema.Name+"\"",memberColumnSchema.Column.Name+indexSchema.Name+"Inicial\"")+"\r\n\t\t\t\t\t\t</td>";
										
										//strTitulo
										//width=\"10%\"
										strComboText+="\r\n\t\t\t\t\t\t<td class=\"busquedatitulocampo\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Final</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
										//width=\"79%\"
										strComboText+="\r\n\t\t\t\t\t\t<td align=\"center\">\r\n\t\t\t\t\t\t\t"+ GetControlHtmlBusqueda( memberColumnSchema.Column,indexSchema.Name,ConFaces,ConRichFaces,false).Replace(memberColumnSchema.Column.Name+indexSchema.Name+"\"",memberColumnSchema.Column.Name+indexSchema.Name+"Final\"")+"\r\n\t\t\t\t\t\t</td>";
										
										strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Inicial";
										strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Final";
										break;
									}
								}
							}
							
							//solo cambia el comentario
							if(ConRichFaces) {
								strTituloBusqueda=strTituloBusquedaInicial+/*strTituloBusquedaMiddle+*/ strTituloBusquedaFinal;
							} else {
								strTituloBusqueda=strTituloBusquedaInicial+strTituloBusquedaMiddle+ strTituloBusquedaFinal;
							}
							
							
						}
						//solo cambia el replace						
						
						if(JQueryUIVersion.Equals("1.10.4") && blnConTabsBusqueda) {
							strFilaGeneralIniBusqueda="";
							strFilaGeneralFinBusqueda="";
						}
						
						if(ConRichFaces) {
							strInitFuncion+=strTituloBusqueda.Replace("labelbydanreplace",strTituloBusquedaMiddle).Replace("visibilidadvariablebydanreplace",sVisibiliadIndice)+"\r\n\t\t\t\t\t"+strFilaGeneralIniBusqueda+""+strTitulo+strComboText+strBoton+strFilaGeneralFinBusqueda+"\r\n\r"+strTituloBusquedaFinalConRichFaces;
						} else {
							strInitFuncion+=strTituloBusqueda+"\r\n\t\t\t\t\t<tr>"+strTitulo+strComboText+strBoton+"\r\n\r"+strTituloBusquedaFinalConRichFaces;
						}
						
						strTabLista="\r\n\t\t\t\t\t\t<li id=\"livisibilidadvariablebydanreplace\" class=\"titulotab\" style=\"display:table-row\"><a href=\"#divvisibilidadvariablebydanreplace\">"+strTituloBusquedaMiddle/*strTituloBusqueda*/+"</a></li>";
						strTabLista=strTabLista.Replace("visibilidadvariablebydanreplace",sVisibiliadIndice);
						//strTabLista=strTabLista.Replace("Visibilidadvariablebydanreplace",sVisibiliadIndiceStyle);
						
						//style=\"<?php echo($"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"->Visibilidadvariablebydanreplace)?>\"
						
						strTabsLista+=strTabLista;
						
						intNumeroBusquedas++;
					}
					
				}												
			}
			else
			{
						
						
							strComboText="";
							strTitulo="";
							strTituloBusquedaMiddle="";
							int count=1;	count+=0;
							bool blExisteParametro=false;
							
							foreach(ColumnSchema columnSchema in TablaBase.Columns)
							{
								if(!columnSchema.Name.Contains(strPrefijoParametro))
								{
									continue;
								}
								else
								{
									blExisteParametro=true;
								}
								
								//width=\"10%\"
								strComboText+="\r\n\t\t\t\t\t\t<td><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(columnSchema)+"</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
								//width=\"79%\"
								strComboText+="\r\n\t\t\t\t\t\t<td align=\"center\">\r\n\t\t\t\t\t\t\t"+ GetControlHtmlBusqueda( columnSchema,TablaBase.Name,ConFaces,ConRichFaces,false)+"\r\n\t\t\t\t\t\t</td>";
								strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(columnSchema);
							}
							
							if(!blExisteParametro)
							{
								return "";
							}
							
							//solo cambia el comentario
							if(ConRichFaces) {
								strTituloBusqueda=strTituloBusquedaInicial+/*strTituloBusquedaMiddle+*/ strTituloBusquedaFinal;
							} else {
								strTituloBusqueda=strTituloBusquedaInicial+strTituloBusquedaMiddle+ strTituloBusquedaFinal;
							}
							
						//solo cambia el replace	
						if(ConRichFaces) {
							strInitFuncion+=strTituloBusqueda.Replace("labelbydanreplace",strTituloBusquedaMiddle).Replace("visibilidadvariablebydanreplace",sVisibiliadIndice)+"\r\n\t\t\t\t\t<tr>"+strTitulo+strComboText+strBoton+"\r\n\r\n"+strTituloBusquedaFinalConRichFaces;
						} else {
							strInitFuncion+=strTituloBusqueda+"\r\n\t\t\t\t\t<tr>"+strTitulo+strComboText+strBoton+"\r\n\r\n"+strTituloBusquedaFinalConRichFaces;
						}
						
										
			}
			
			if(existe) {
				strTabsLista="\r\n\t\t\t\t\t<ul>"+strTabsLista+"\r\n\t\t\t\t\t</ul>";	
			}
			
			strHtml=strRowSearch+strHtmlInicial0.Replace("BYDAN_TABS",strTabsLista)+strhtmlformularioinicial+strInitFuncion +strHtmlFormularioFinal+strHtmlFinal0+"\r\n\r\n";
			
			//Trace.WriteLine(strHtml);
			
			if(existe) {
				strHtml=strHtml.Replace("BYDAN_DISPLAY_BUSQUEDA",strDisplayInicial);	
				
			} else {
				strHtml=strHtml.Replace("BYDAN_DISPLAY_BUSQUEDA","display:none");
				
				//ANTES VACIO PERO AHORA SI NO TIENE BUSQUEDAS AL MENOS EL FORMULARIO DE RICHFACES (SI ES) <a4j-form> PARA QUE TENGA FORMULARIO ABIERTO-CERRADO
						//strHtml="";
				//strHtml=strRowFormularioSearch;
			}
								
			return strHtml;//+strBusquedaFK; 
		}
		
		public String GetWebRowControlesBusquedasIndicesTablasClasesC(TableSchema TablaBase,String strIncludeInit,String strIncludeEnd) 
		{
			String strBusquedaFK="";
			
				foreach(IndexSchema indexSchema in TablaBase.Indexes)
				{
				
					
					
					if(!indexSchema.IsPrimaryKey)
					{		
						if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name))
						{
							continue;
						}
						
						if(indexSchema.IsUnique)
						{
							continue;
						}
						else
						{
							
							if(indexSchema.Name.Contains(strFK))
							{
							
								TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);						
								
								if(ConBusquedaAnterior && GetBusquedaForeignKeyColumnFromPropertiesC(indexSchema.MemberColumns[0]))
								{									
									//strBusquedaFK+="\r\n\t\tfuncionGeneral.Import('JavaScript/PaginaWebInteraccion/"+GetNombreClaseC(tableRelacionada.ToString())+"PaginaWebInteraccionEvents.jsp');";									
									strBusquedaFK+=strIncludeInit+"\""+GetRelativePathC(TablaBase)+"JavaScript/PaginaWebInteraccion/"+GetNombreClaseC(tableRelacionada.ToString())+"PaginaWebInteraccionEvents.jsp\""+strIncludeEnd;
								}								
							}
						}	
					}
					
				}
			
					
			return strBusquedaFK; 
		}
		
		public String GetSetUnicoComboFromForeignKeysC(TableSchema TablaBase) 
		{
			String strBusquedaFK="";
			
				foreach(IndexSchema indexSchema in TablaBase.Indexes)
				{
				
					
					
					if(!indexSchema.IsPrimaryKey)
					{					
						if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name))
						{
							continue;
						}
						
						if(indexSchema.IsUnique)
						{
							continue;
						}
						else
						{
							
							if(indexSchema.Name.Contains(strFK))
							{
							
								TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);						
								
								if(ConBusquedaAnterior && GetBusquedaForeignKeyColumnFromPropertiesC(indexSchema.MemberColumns[0]))
								{									
									//strBusquedaFK+="\r\n\t\tfuncionGeneral.Import('JavaScript/PaginaWebInteraccion/"+GetNombreClaseC(tableRelacionada.ToString())+"PaginaWebInteraccionEvents.js');";									
									strBusquedaFK+="\r\n\t\tthis.Bit"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]))+"UtilizaBusqueda=true;";
									strBusquedaFK+="\r\n\t\t"+GetNombreClaseObjetoC(tableRelacionada.ToString())+"FuncionGeneral.ObjetoServicio="+GetNombreClaseObjetoC(TablaBase.ToString())+"Servicio;";	
									strBusquedaFK+="\r\n\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"Servicio.Set"+GetNombreClaseC(tableRelacionada.ToString())+"Unico(-1,\"ninguno\");";									
									
								}								
							}
						}	
					}
					
				}
			
					
			return strBusquedaFK; 
		}

	
public string GetColumnsTableMaintenanceC(ColumnSchema column,bool esMantenimientoDeImagen)
{
		
		String strTipo=GetTipoColumnaClaseC(column);	
		String strPrefijo=" "+GetPrefijoTipoC(column);	
		String strColumna=GetNombreColumnaClaseC(column);
		
		String strColumnName="";
		String strColumnLabel="'"+GetWebNombreTituloColumnFromPropertiesC(column)+"'";
		String strColumn="";
		
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strVersionRow))
		{
				return string.Empty;
		}
		else
		{
			if(!column.IsForeignKeyMember&&column.DataType!=DbType.Boolean&&column.NativeType!="image"&&column.DataType!=DbType.Binary)
			{
				strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"'";
				strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
			}
			else if(column.DataType==DbType.Boolean)
			{
				strColumna= GetNombreColumnaClaseC(column);
				strColumna=strColumna.Replace(strId,"");
				strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
				
				strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Control'";
				strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";	
			}
			else if(column.IsForeignKeyMember)
			{
				strColumna= GetNombreColumnaClaseC(column);
				strColumna=strColumna.Replace(strId,"");
				strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
				
				strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Descripcion'";
				strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
			}
			else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
			{
				if(esMantenimientoDeImagen)
				{
					strColumna= GetNombreColumnaClaseC(column);
					strColumna=strColumna.Replace(strId,"");
					strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
					
					strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Mostrar'";
					strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
				}
				else
				{
					strColumna= GetNombreColumnaClaseC(column);
					strColumna=strColumna.Replace(strId,"");
					strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
					
					strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Actualizar'";
					strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
				}
			}
		}	
			
	return strColumn;
}

public bool PermiteColumnaTablaC(ColumnSchema column, int iNoFk,bool EsParaBusquedaRapida) {
	bool permiteColumna=true;
	
	if(EsParaBusquedaRapida) {
		if(!column.IsForeignKeyMember && iNoFk>5) {
			permiteColumna=false;
		}
	}
	
	return permiteColumna;
}

public string GetColumnsFacesTituloTableMaintenanceC(ColumnSchema column,TableSchema TablaBasePadre,ColumnSchema columnSchemaPadre,bool esParaForeignKey,TableSchema TablaBasePadreFK,bool esMantenimientoDeImagen,bool ConFaces,bool ConRichFaces,bool EsParaBusquedaRapida,int i,bool conEditar)
{		
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=GetPrefijoTipoC(column);	
	String strColumna=GetNombreColumnaClaseC(column);
		
	String strPrefijoCampo="";
	
	strPrefijoCampo=GetPrefijoTablaC().ToLower();
	
	String strPrefijoColumn=strPrefijoCampo+strPrefijo;	
	strPrefijoColumn+=strColumna;
	
	String strColumnName=GetNombreClaseObjetoC(column.Table.ToString())+"->"+strPrefijoColumn;
	String strColumnLabel="";
	
	if(!column.Name.Equals(strId) && !column.Name.Equals(strVersionRow)) {
		strColumnLabel=""+GetWebNombreTituloColumnFromPropertiesC(column)+"";
	
	} else if(column.Name.Equals(strId)) {
		strColumnLabel=strId.ToUpper()+"__";
	} else {
		strColumnLabel=strVersionRow.ToUpper();
	}
	
	
	if(conEditar) {
		if(!column.AllowDBNull) {
			if(!EsBitColumn(column)) {
				//NO USAR ESPACIO VACIO, SE CREA NUEVA LINEA AUTO
				strColumnLabel+=".(*)";
			}
		}
	}
	
	String strColumn="";
	
	String strPrefijoColumna="th";
	String strOcultarColumna="";						
	
	String strTabulador=GetTabuladorControlVariablesC(column);
	
	//Trace.WriteLine(column.Name+":"+strTabulador);
	
	String strTituloColumnaInit="<?php echo '<b><pre>";//"<?php echo $this->Paginator->sort('";
	String strTituloColumnaEnd=strTabulador+"</pre></b>';?>";//"');?>";
	
	
	if(blnConJQueryCode){
		strTituloColumnaInit="<pre class=\"cabecera_texto_titulo_tabla\">";
		strTituloColumnaEnd=strTabulador+"</pre>";
	}
	
	
	String strTituloColumna=strTituloColumnaInit+strColumnLabel+/*"BYDAN-TITULO"+*/strTituloColumnaEnd;
	
	
	
	bool blnConSeguridadColumn=GetConSeguridadColumnFromPropertiesC(column);				
	
	//strTituloColumna=strTituloColumna.Replace("BYDAN-TITULO",strColumnLabel);
	
	if(ConRichFaces) {	
		strPrefijoColumna="th";
		
		if(!blnConSeguridadColumn) {
			if(GetNoInsertEditColumnFromPropertiesC(column)) {
				
				if(!GetShowTableColumnFromPropertiesC(column)) {
					strOcultarColumna=" style=\"display:none\"";
				}
			}
		} else {
			String strSufijoVariables=GetNombreClaseC(column.Table.ToString())+ GetNombreColumnaClaseC(column);		
			strOcultarColumna=" style=\"<?php echo $"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->strPermisoCssAuxiliar" +strSufijoVariables+" ?>\"";
		}
	}
		
	
	String strNombre = GetNombreColumnaClaseC(column);					
	String strClassCampo=" class=\"bydan\" ";		
	String strClassCampoExtra="";
	
	//strClassCampo=strClassCampo.Replace("bydan","col_"+strNombre);
	strClassCampo=strClassCampo.Replace("bydan","cabecera_titulo_tabla");

	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)/*|| column.Name.Equals(strVersionRow)*/)
	{
		return string.Empty;
	}
	else if(column.Name.Equals(strVersionRow))
	{
		if(!ConRichFaces) {	
			strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+">";
		} else {
			strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+strOcultarColumna+" style=\"display:none\">"+strTituloColumna+"";
		}
		
		if(!ConRichFaces) {		
	
		} else {
			if(!esParaForeignKey) {
			} else {
				//String strNameOnly=GetNameControlHtml(columnSchemaPadre);
				//String strPanelsBusquedasFk=GetRichPanelsFkBusquedasTableC(TablaBasePadre,columnSchemaPadre);
			}
		}	
		strColumn+="</"+strPrefijoColumna+">";	
	}
	else if(column.Name.Equals(strId))
	{		
		if(!ConRichFaces) {	
			strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+">";
		} else {
			strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+">"+strTituloColumna+"";
		}
		
		if(!ConRichFaces) {		
		} else {
			if(!esParaForeignKey) {
			} else {
				//String strNameOnly=GetNameControlHtml(columnSchemaPadre);
				//String strPanelsBusquedasFk=GetRichPanelsFkBusquedasTableC(TablaBasePadre,columnSchemaPadre);
			}
		}
		
		strColumn+="\t\t\t\t\t</"+strPrefijoColumna+">\r\n";	
							
		if(!EsParaBusquedaRapida) {																						
			//COLUMNA ELIMINAR
			strClassCampoExtra=strClassCampo.Replace("cabecera_titulo_tabla","cabecera_titulo_tabla columna_tabla_eli");

			if(!ConRichFaces) {	
				strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampoExtra+">";
			} else {//style=\"display:'.$this->strPermisoEliminar"+GetNombreClaseC(TablaBase.ToString())+".'\"
				String strTituloColumnaAcciones=strTituloColumnaInit+strEli+""/*strColumnLabel*/+/*"BYDAN-TITULO"+*/strTituloColumnaEnd;//ACCIONES
				strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampoExtra+" style=\"display:'.$this->strPermisoEliminar"+GetNombreClaseC(column.Table.ToString())+".'\">"+strTituloColumnaAcciones+"";
			}
				
			strColumn+="\t\t\t\t\t</"+strPrefijoColumna+">\r\n";
			//COLUMNA ELIMINAR
				
			//COLUMNA SELECCIONAR
			strClassCampoExtra=strClassCampo.Replace("cabecera_titulo_tabla","cabecera_titulo_tabla columna_tabla_sel");

			if(!ConRichFaces) {	
				strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampoExtra+">";
			} else {
				String strTituloColumnaAcciones=strTituloColumnaInit+strSel+""/*strColumnLabel*/+/*"BYDAN-TITULO"+*/strTituloColumnaEnd;//ACCIONES
				strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampoExtra+">"+strTituloColumnaAcciones+"";
			}
				
			strColumn+="\t\t\t\t\t</"+strPrefijoColumna+">\r\n";
			//COLUMNA SELECCIONAR
			
			//MOSTRAR-DIVRESUMEN
			if(GetConDivResumenTableFromPropertiesC(column.Table)) {//TieneClasesRelacionadasC
				if(!ConRichFaces) {	
					strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+">";
				} else {
					String strTituloDivResumen=strTituloColumnaInit+"VER"+strTituloColumnaEnd;
					String strTituloColumnaAcciones="";
					
					if(!blnConJQueryCode) {
						strTituloColumnaAcciones=strTituloColumnaInit+""/*strColumnLabel*/+/*"BYDAN-TITULO"+*/strTituloColumnaEnd;
						strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+">"+strTituloDivResumen+"";
					
					} else {
						strTituloColumnaAcciones=strTituloColumnaInit+""/*strColumnLabel*/+/*"BYDAN-TITULO"+*/strTituloColumnaEnd;
						strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+">"+strTituloDivResumen+"";
					}
				}
				
				strColumn+="\t\t\t\t\t</"+strPrefijoColumna+">\r\n";
			}
			//MOSTRAR-DIVRESUMEN
			
			//AGREGA COLUMNA RELACIONES
			if(TieneClasesRelacionadasParaMostrarC(column.Table)) {//TieneClasesRelacionadasC
				
				strClassCampoExtra=strClassCampo.Replace("cabecera_titulo_tabla","cabecera_titulo_tabla columna_tabla_selrel");

				if(!ConRichFaces) {	
					strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampoExtra+">";
				} else {
					String strTituloColumnaAcciones=strTituloColumnaInit+"Rel"/*strColumnLabel*/+/*"BYDAN-TITULO"+*/strTituloColumnaEnd;//ACCIONES
					strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampoExtra+">"+strTituloColumnaAcciones+"";
				}
				
				strColumn+="\t\t\t\t\t</"+strPrefijoColumna+">\r\n";
			}
		}
	}
	else
	{						
		if(!column.IsForeignKeyMember && column.DataType!=DbType.Boolean&&column.NativeType!="image"&&column.DataType!=DbType.Binary )
		{
			if(!EsPathImagenDocumentoArchivoColumn(column)) {
				if(!ConRichFaces) {	
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+">";
				} else {//sortBy=\" \"
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+strOcultarColumna+">"+strTituloColumna+"";
				}
	
				strColumn+="</"+strPrefijoColumna+">";
	
				if(blnEsTablaLatitudLongitud&&column.Name.Equals("Longitud")) {
				}
			} else {
				String strLabelLink="Imagen";strLabelLink+="";
						
					if(EsPathDocumentoColumn(column)) {
						strLabelLink="Documento";
					}
						
				if(!ConRichFaces) {	
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+">";
				} else {
					//sortBy=\"\"
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+strOcultarColumna+">"+strTituloColumna+"";
				}
				strColumn+="</"+strPrefijoColumna+">";
				
				if(!ConRichFaces) {	
				
				} else {
					//NO-ACTUALIZAR-ARCHIVO-PAGINA
					if(ConArchivosV1Cake) {
						strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strOcultarColumna+">"+" "+strTituloColumna.Replace("<b><pre>","<b><pre>"+strActualizar+" ")+"";
						strColumn+="</"+strPrefijoColumna+">";
					}
				}
			}
			
		}
		else if(column.DataType==DbType.Boolean)
		{
			strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+""+strOcultarColumna+">";
			//strColumn+="<?php echo Funciones::getCheckBox($"+strColumnName+"); ?>";
			strColumn+=strTituloColumna;

			strColumn+="</"+strPrefijoColumna+">";
			
		}
		else if(column.IsForeignKeyMember)
		{
			if(!blnNoStandardTableFromProperties) {
				strColumna= GetNombreColumnaClaseC(column);
				strColumna=strColumna.Replace(strId,"");
				strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
					
				strColumnName=""+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->cargarDescripcion"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+strForeignKey+"($"+strColumnName+");";
								
				if(!ConRichFaces) {	
					//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+">\r\n";
				} else {
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+strOcultarColumna+">"+strTituloColumna+"";//strId
				}
				
				strColumn+="</"+strPrefijoColumna+">";
			
			} else {
				if(!ConRichFaces) {	
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+">";
				} else {
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+strOcultarColumna+">"+strTituloColumna+"";
				}
			
				//strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"<?php echo $"+strColumnName+" ?>\"/>\r\n";
				strColumn+="\t\t\t\t\t</"+strPrefijoColumna+">\r\n";	
			}
		}
		else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
		{
			if(esMantenimientoDeImagen)
			{

			}
			else
			{

			}
		}
	}	
			
	return strColumn;
}

//CUANDO ES BUSQUEDA INTERNA
//,TableSchema TablaBasePadre,ColumnSchema columnSchemaPadre
public string GetColumnsFacesTableMaintenanceC(ColumnSchema column,TableSchema TablaBasePadre,ColumnSchema columnSchemaPadre,bool esParaForeignKey,TableSchema TablaBasePadreFK,bool esMantenimientoDeImagen,bool ConFaces,bool ConRichFaces,bool EsParaBusquedaRapida,bool conEditar,String strNombreColumnPartName,String strVariableAppend,bool paraController) {	
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=GetPrefijoTipoC(column);	
	String strColumna=GetNombreColumnaClaseC(column);
		
	String strPrefijoCampo="";
	String strClassCampo=" class=\"elementotabla\" ";
	
	
	String strNombre = GetNombreColumnaClaseC(column);					
	strClassCampo=" class=\"elementotabla bydan\" ";		
	strClassCampo=strClassCampo.Replace("bydan","col_"+strNombre);
		
		
	strPrefijoCampo=GetPrefijoTablaC().ToLower();
	
	String strPrefijoColumn=strPrefijoCampo+strPrefijo;	
	strPrefijoColumn+=strColumna;
	
	//String strColumnName=GetNombreClaseObjetoC(column.Table.ToString())+"['"+GetNombreClaseC(column.Table.ToString())+"']['"+GetNombreColumnFromProperties(column)+"']";
	String strColumnName=GetNombreClaseObjetoC(column.Table.ToString())+"->"+strPrefijoColumn;
	String strColumnLabel=""+GetWebNombreTituloColumnFromPropertiesC(column)+"";
	String strColumn="";
	
	String strPrefijoColumna="td";
	String strOcultarColumna="";
			
	bool blnConSeguridadColumn=GetConSeguridadColumnFromPropertiesC(column);				
	String strObjectFaceOnly=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
	String strSufijoVariables=GetNombreClaseC(column.Table.ToString())+ GetNombreColumnaClaseC(column);		
	String strPhpEcho="";	
	String strCierraPhpEcho="";	
	String strPuntoComaInstruccion="";	
	
	String strCampoObjeto="";		
	
	//EDITAR TABLA
	String strCampoObjetoControl="";
	String strNombreFilaPartName="";
	//String strNombreColumnPartName="";
	
	
	//SI ES CONTROLLER, SE FORZA COMO JQUERY Y SE DEJA COMO ESTABA
	bool blnConJQueryCodeOriginal=blnConJQueryCode;
	
	if(paraController) {
		blnConJQueryCode=true;
	}
	
			
	
	if(!blnConJQueryCode){
		strPhpEcho="<?php echo";
		strCierraPhpEcho="?>";	
		strPuntoComaInstruccion=";";
	} else {
		strPhpEcho="'.";
		strCierraPhpEcho=".'";
		strNombreFilaPartName="i";
		//strNombreFilaPartName="_'.$i.'";
	}
	
	
	String sInitControl="'";
	String sEndControl="'";
	
	if(!ConPhpBasico) {
		sInitControl="'";
		sEndControl="'";
		
	} else {
		sInitControl="";
		sEndControl="'";
	}
	
	
	if(ConRichFaces) {	
		strPrefijoColumna="td";
		
		if(!blnConSeguridadColumn) {
			if(GetNoInsertEditColumnFromPropertiesC(column)) {				
				if(!GetShowTableColumnFromPropertiesC(column)) {
					strOcultarColumna=" style=\"display:none\"";
				}
			}
		} else {
			//strOcultarColumna=" rendered=\"#{"+strObjectFaceOnly+".isPermisoConsulta"+strSufijoVariables+"}\"";
			//String strSufijoVariables=GetNombreClaseC(column.Table.ToString())+ GetNombreColumnaClaseC(column);		
			strOcultarColumna=" style=\""+strPhpEcho+" $"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->strPermisoCssAuxiliar" +strSufijoVariables+" "+strCierraPhpEcho+"\"";
		}
		
		//strOcultarColumna=strClassCampo+strOcultarColumna;
	}
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)/*|| column.Name.Equals(strVersionRow)*/) {
		return string.Empty;
		
	} else if(column.Name.Equals(strVersionRow)) {
		if(!ConRichFaces) {						
			if(!blnConJQueryCode){
				strColumn="\r\n\t\t\t\t\t";
			} else {
				strColumn="";
			}
			
			strColumn+="<"+strPrefijoColumna+">";
			
			if(!blnConJQueryCode){
				strColumn+="\r\n";
			}
			
			//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+">\r\n";
			
		} else {
						//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+"><?php echo $ajax->link(''.$"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".'', array( 'controller' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"s', 'action' => 'seleccionarActual', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'update' => array('div"+GetNombreClaseC(column.Table.ToString())+"s"+strAjaxWebPart+"','div"+GetNombreClaseC(column.Table.ToString())+"s"+strAjaxWebPart+"','divMantenimiento"+GetNombreClaseC(column.Table.ToString())+strAjaxWebPart+"'), 'complete' => '' )); ?>\r\n";
			
			if(!blnConJQueryCode){
				strColumn="\r\n\t\t\t\t\t";
			} else {
				strColumn="";
			}
			
			strCampoObjeto="$"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strVersionRow;
			
			strColumn+="<"+strPrefijoColumna+strClassCampo+strOcultarColumna+" style=\"display:none\">"+" "+strPhpEcho+" "+strCampoObjeto+" "+strCierraPhpEcho+"";
		}
		
		if(!ConRichFaces) {		
	
		} else {
			if(!esParaForeignKey) {
			} else {
				//AQUI SE ASEGURA QUE NO SEA NULO
				String strNameOnly=GetNameControlHtml(columnSchemaPadre);
				String strPanelsBusquedasFk=GetRichPanelsFkBusquedasTableC(TablaBasePadre,columnSchemaPadre);
			}
		}	
		strColumn+="</"+strPrefijoColumna+">";	
		
	} else if(column.Name.Equals(strId)) {	
		if(!ConRichFaces) {	
			//NOSE-TABLA
			//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+"><table><tr>\r\n";
		} else {
					//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+"><?php echo $ajax->link(''.$"+GetNombreClaseObjetoC(column.Table.ToString())+"['"+GetNombreClaseC(column.Table.ToString())+"']['"+strId+"'].'', array( 'controller' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"s', 'action' => 'seleccionarActual', $"+GetNombreClaseObjetoC(column.Table.ToString())+"['"+GetNombreClaseC(column.Table.ToString())+"']['"+strId+"'] ),array( 'update' => array('div"+GetNombreClaseC(column.Table.ToString())+"s"+strAjaxWebPart+"','div"+GetNombreClaseC(column.Table.ToString())+"s"+strAjaxWebPart+"','divMantenimiento"+GetNombreClaseC(column.Table.ToString())+strAjaxWebPart+"'), 'complete' => '' )); ?>\r\n";
			//NOSE-TABLA
			//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+"><table><tr>\r\n";
		}
		
		//onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.mostrarOcultarControlesMantenimiento(true)\"
		
		if(!ConRichFaces) {		
			
		} else {
										
			if(!esParaForeignKey) {
				//strColumn+="\r\n\t\t\t\t\t\t<td><?php echo $ajax->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$html->image('/img/Imagenes/seleccionar.gif', array('width'=>15,'height'=>15, 'alt' => 'Seleccionar', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'seleccionarActual', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => array('div"+GetNombreClaseC(column.Table.ToString())+"s"+strAjaxWebPart+"','div"+GetNombreClaseC(column.Table.ToString())+"s"+strAjaxWebPart+"','divMantenimiento"+GetNombreClaseC(column.Table.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete();' )); ?></td>";
				
				if(!EsParaBusquedaRapida) {
					if(!blnConJQueryCode){
						strColumn+="\r\n\t\t\t\t\t";
					}
			
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico){
						//strColumn+="<td"+strClassCampo+">"+strPhpEcho+" $ajax->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$html->image('/img/Imagenes/seleccionar.gif', array('width'=>15,'height'=>15, 'alt' => 'Seleccionar', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'seleccionarActual', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => array('divMantenimiento"+GetNombreClaseC(column.Table.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete();' )); "+strCierraPhpEcho+"</td>";
						strColumn+="<td"+strClassCampo+">"+strPhpEcho+" $"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->image('/Imagenes/seleccionar.gif', array('width'=>15,'height'=>15, 'alt' => 'Seleccionar', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'seleccionarActual', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => array('divMantenimiento"+GetNombreClaseC(column.Table.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete();' )); "+strCierraPhpEcho+"</td>";
					}
					
					//MOSTRAR-DIVRESUMEN											
					if(GetConDivResumenTableFromPropertiesC(column.Table)) {
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico){
							//strColumn+="\r\n\t\t\t\t\t";
							strColumn+="\r\n\t\t\t\t\t";
						}
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico){
							//strColumn+="<td"+strClassCampo+">"+strPhpEcho+" $ajax->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$html->image('/img/Imagenes/ojo.gif', array('width'=>20,'height'=>15, 'alt' => 'Mostrar "+GetNombreClaseC(column.Table.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'seleccionarMostrarDivResumen"+GetNombreClaseC(column.Table.ToString())+"Actual', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => array('divResumen"+GetNombreClaseC(column.Table.ToString())+"Actual"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionarMostrarDivResumen"+GetNombreClaseC(column.Table.ToString())+"ActualOnClick();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionarMostrarDivResumen"+GetNombreClaseC(column.Table.ToString())+"ActualOnComplete();' )); "+strCierraPhpEcho+"</td>";	
							strColumn+="<td"+strClassCampo+">"+strPhpEcho+" $"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->image('/img/Imagenes/ojo.gif', array('width'=>20,'height'=>15, 'alt' => 'Mostrar "+GetNombreClaseC(column.Table.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'seleccionarMostrarDivResumen"+GetNombreClaseC(column.Table.ToString())+"Actual', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => array('divResumen"+GetNombreClaseC(column.Table.ToString())+"Actual"+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionarMostrarDivResumen"+GetNombreClaseC(column.Table.ToString())+"ActualOnClick();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionarMostrarDivResumen"+GetNombreClaseC(column.Table.ToString())+"ActualOnComplete();' )); "+strCierraPhpEcho+"</td>";	
						}
					}
					
					//MOSTRAR DIV-ACCIONES-RELACIONADAS
					if(TieneClasesRelacionadasParaMostrarC(column.Table)) {//TieneClasesRelacionadasC
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico){
							//strColumn+="\r\n\t\t\t\t\t";
							strColumn+="\r\n\t\t\t\t\t";
						}
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico){
							//strColumn+="<td"+strClassCampo+">"+strPhpEcho+" $ajax->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$html->image('/img/Imagenes/ejecutar_acciones.gif', array('width'=>15,'height'=>15, 'alt' => 'Acciones', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'mostrarEjecutarAcciones', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => array('divAccionesRelaciones"+GetNombreClaseC(column.Table.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete();' )); "+strCierraPhpEcho+"</td>";
							strColumn+="<td"+strClassCampo+">"+strPhpEcho+" $"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->image('/Imagenes/ejecutar_acciones.gif', array('width'=>15,'height'=>15, 'alt' => 'Acciones', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'mostrarEjecutarAcciones', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => array('divAccionesRelaciones"+GetNombreClaseC(column.Table.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete();' )); "+strCierraPhpEcho+"</td>";
						}
					}	
					
				} else {
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico){
						//strColumn+="\r\n\t\t\t\t\t";
						strColumn+="\r\n\t\t\t\t\t";
					}
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico){
						//strColumn+="<td"+strClassCampo+">"+strPhpEcho+" $ajax->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$html->image('/img/Imagenes/seleccionar.gif', array('width'=>15,'height'=>15, 'alt' => 'Seleccionar', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'seleccionarActualAuxiliar', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick();', 'complete' => str_replace('TO_REPLACE',$"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+",$"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->strFuncionBusquedaRapida).'"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete();window.close();' )); "+strCierraPhpEcho+"</td>";
						strColumn+="<td"+strClassCampo+">"+strPhpEcho+" $"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->image('/img/Imagenes/seleccionar.gif', array('width'=>15,'height'=>15, 'alt' => 'Seleccionar', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'seleccionarActualAuxiliar', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick();', 'complete' => str_replace('TO_REPLACE',$"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+",$"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->strFuncionBusquedaRapida).'"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete();window.close();' )); "+strCierraPhpEcho+"</td>";
					}					
				}
				
				/*
				if(!EsParaBusquedaRapida) {
					
				}
				*/
			} else {
				
				//AQUI SE ASEGURA QUE NO SEA NULO
				String strNameOnly=GetNameControlHtml(columnSchemaPadre);
				String strPanelsBusquedasFk=GetRichPanelsFkBusquedasTableC(TablaBasePadre,columnSchemaPadre);
					
				//NO FUNCIONO CON LINK SI CON SUBMIT
				//strColumn+="\r\n\t\t\t\t\t<?php echo $ajax->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$html->image('/img/Imagenes/seleccionar.gif', array('width'=>15,'height'=>15, 'alt' => 'Seleccionar', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(TablaBasePadreFK.ToString())+"s', 'action' => 'seleccionar"+GetNombreClaseC(column.Table.ToString())+"Actual',$"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => array('div"+strNameOnly+strPanelsBusquedasFk+"'), 'before' => '"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(TablaBasePadreFK.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"FuncionGeneral.buscarFk"+GetNombreClaseC(column.Table.ToString())+GetNombreClaseC(TablaBasePadreFK.ToString())+"sOnComplete();"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(TablaBasePadreFK.ToString())+"();' )); ?>";				
				
				if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
					if(!blnConJQueryCode){
						strColumn+="\r\n\t\t\t\t\t";
					}
						
					//strColumn+="<td>"+strPhpEcho+" $ajax->submit('/img/Imagenes/seleccionar.gif', array('id'=>'btnSeleccionar"+GetNombreClaseC(TablaBasePadreFK.ToString())+"','name'=>'btnSeleccionar"+GetNombreClaseC(TablaBasePadreFK.ToString())+"','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/seleccionar.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBasePadreFK.ToString())+"s', 'action'=>'seleccionar"+GetNombreClaseC(column.Table.ToString())+"Actual',$"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBasePadreFK.ToString())+strAjaxWebPart+"','divBusquedas"+GetNombreClaseC(TablaBasePadreFK.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(TablaBasePadreFK.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"FuncionGeneral.buscarFk"+GetNombreClaseC(column.Table.ToString())+GetNombreClaseC(TablaBasePadreFK.ToString())+"sOnComplete();"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(TablaBasePadreFK.ToString())+"();')); "+strCierraPhpEcho+"</td>";
					strColumn+="<td>"+strPhpEcho+" $ajax->submit('/img/Imagenes/seleccionar.gif', array('id'=>'btnSeleccionar"+GetNombreClaseC(TablaBasePadreFK.ToString())+"','name'=>'btnSeleccionar"+GetNombreClaseC(TablaBasePadreFK.ToString())+"','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/seleccionar.gif','url'=> array('controller'=>'"+GetCakeModelControllerNameC(TablaBasePadreFK.ToString())+"s', 'action'=>'seleccionar"+GetNombreClaseC(column.Table.ToString())+"Actual',$"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"), 'update' => array('divMantenimiento"+GetNombreClaseC(TablaBasePadreFK.ToString())+strAjaxWebPart+"','divBusquedas"+GetNombreClaseC(TablaBasePadreFK.ToString())+strAjaxWebPart+"','divMensajes'), 'before' => '"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(TablaBasePadreFK.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"FuncionGeneral.buscarFk"+GetNombreClaseC(column.Table.ToString())+GetNombreClaseC(TablaBasePadreFK.ToString())+"sOnComplete();"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(TablaBasePadreFK.ToString())+"();')); "+strCierraPhpEcho+"</td>";
					
				} else {
					if(!blnConJQueryCode){
						strColumn+="\r\n\t\t\t\t\t";
					}
										
					strColumn+="<td"+strClassCampo+"><input type=\"button\" id=\"btnSeleccionar"+GetNombreClaseC(TablaBasePadreFK.ToString())+"\" name=\"btnSeleccionar"+GetNombreClaseC(TablaBasePadreFK.ToString())+"\" value=\"Seleccionar\"/></td>";//class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
				}
			}
		}
		
		//NOSE-TABLA
		//strColumn+="\t\t\t\t\t</tr></table></"+strPrefijoColumna+">\r\n";				
	} else {				
		
		if(!column.IsForeignKeyMember && column.DataType!=DbType.Boolean&&column.NativeType!="image"&&column.DataType!=DbType.Binary ) {
			if(!EsPathImagenDocumentoArchivoColumn(column)) {
				//strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
				
				if(!ConRichFaces) {	
					if(!blnConJQueryCode){
						strColumn="\r\n\t\t\t\t\t";
					} else {
						strColumn="";
					}
					
					strColumn+="<"+strPrefijoColumna+">";
					
					if(!blnConJQueryCode){
						strColumn+="\r\n";
					}
					
				} else {
					if(!blnConJQueryCode){
						strColumn="\r\n\t\t\t\t\t";
					} else {
						strColumn="";
					}
					
					if(!conEditar) {
						strCampoObjeto="$"+strColumnName;
						
					} else {
						strCampoObjetoControl="'.$"+strColumnName+".'";
						//Trace.WriteLine(strNombreFilaPartName);
						
						strCampoObjeto=sInitControl+GetControlHtml(column,ConFaces,ConRichFaces,true,strCampoObjetoControl,strNombreFilaPartName,strNombreColumnPartName)+sEndControl;
												
						//Trace.WriteLine(strNombrePartName+"->"+strCampoObjeto);
					}					
					
					strColumn+="<"+strPrefijoColumna+strClassCampo+strOcultarColumna+">"+" "+strPhpEcho+" "+strCampoObjeto+" "+strCierraPhpEcho+"";
									
				}
							
				strColumn+="</"+strPrefijoColumna+">";
				
				//SOLO-CCFA														
				if(blnEsTablaLatitudLongitud&&column.Name.Equals("Longitud")) {
				}
				//SOLO-CCFA
				
			} else {
				String strLabelLink="Imagen";strLabelLink+="";						
					
				if(EsPathImagenColumn(column)) {
					strLabelLink="Imagen";
						
				} else if(EsPathDocumentoColumn(column)) {
					strLabelLink="Documento";
						
				} else if(EsPathArchivoColumn(column)) {
					strLabelLink="Archivo";
				}
			
				if(!ConRichFaces) {	
					if(!blnConJQueryCode){
						strColumn="\r\n\t\t\t\t\t";
					} else {
						strColumn="";
					}
					
					strColumn+="<"+strPrefijoColumna+">";
					
				} else {
					//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strOcultarColumna+">"+"<?php echo $this->Html->link('Archivo', Constantes::$STRHTTPINIT.Constantes::$STRDNSNAMESERVER.'/'.Constantes::$STRCONTEXTSERVER.'/'.$"+strColumnName+", array('class' => 'button', 'target' => '_blank')); ?>"+"";
					if(!blnConJQueryCode) {
						strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strOcultarColumna+">"+""+strPhpEcho+" $this->Html->link('Archivo', array('controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'descargarArchivo', str_replace('/','-.-',$"+strColumnName+")), array('class' => 'button', 'target' => '_blank')); "+strCierraPhpEcho+"";
					
					} else {
						//\r\n\t\t\t\t\t
						strCampoObjeto="<a href=\"'.$"+strColumnName+".'\" target=\"_blank\">"+strLabelLink+"</a>";
						
						strColumn="<"+strPrefijoColumna+strClassCampo+strOcultarColumna+">"+strCampoObjeto+"";
					}
				}
							
				strColumn+="</"+strPrefijoColumna+">";
				
				if(!ConRichFaces) {					
				} else {
					//NO-ACTUALIZAR-ARCHIVO-PAGINA
					if(ConArchivosV1Cake) {
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+strOcultarColumna+">"+strPhpEcho+" $ajax->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$html->image('/img/Imagenes/seleccionar.gif', array('width'=>15,'height'=>15, 'alt' => '"+strActualizar+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'seleccionarActualArchivo"+column.Name+"', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => 'divMensajes', 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionarActualArchivo"+column.Name+"();"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete();' )); "+strCierraPhpEcho+"</"+strPrefijoColumna+">";
							strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+strOcultarColumna+">"+strPhpEcho+" $"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+".$"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->image('/img/Imagenes/seleccionar.gif', array('width'=>15,'height'=>15, 'alt' => '"+strActualizar+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'seleccionarActualArchivo"+column.Name+"', $"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => 'divMensajes', 'before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionarActualArchivo"+column.Name+"();"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete();' )); "+strCierraPhpEcho+"</"+strPrefijoColumna+">";
						} else {
							
						}
					}
				}
			}			
		} else if(column.DataType==DbType.Boolean) {
			String strEsEditar="";
			
			if(!blnConJQueryCode){
				strColumn="\r\n\t\t\t\t\t";
			} else {
				strColumn="";
			}
					
			strColumn+="<"+strPrefijoColumna+strClassCampo+""+strOcultarColumna+">";
			
			if(conEditar) {
				strEsEditar="Editar";
			}
			
			String strNameJQuery=GetNameControlJQueryHtml(column,conEditar,strNombreFilaPartName,strNombreColumnPartName);
			//Trace.WriteLine(strNameJQuery);
			
			strCampoObjeto="Funciones::getCheckBox"+strEsEditar+"($"+strColumnName+",'"+strNameJQuery+"',$paraReporte)"+strPuntoComaInstruccion;
			
			strColumn+=""+strPhpEcho+" "+strCampoObjeto+" "+strCierraPhpEcho+"";

			strColumn+="</"+strPrefijoColumna+">";
			
		} else if(column.IsForeignKeyMember) {
			String strNameJQuery=GetNameControlJQueryHtml(column,conEditar,strNombreFilaPartName,strNombreColumnPartName);
			
			if(!blnNoStandardTableFromProperties) {
				strColumna= GetNombreColumnaClaseC(column);
				strColumna=strColumna.Replace(strId,"");
				strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
								
				//PARA FOREIGN KEY USAR DESCRIPCION
				//SI SE QUIERE USAR LO ANTERIOR SIMPLEMENTE COMENTAR LA LINEA
				//strColumnName=GetNombreClaseObjetoC(column.Table.ToString())+"->"+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+strDescripcion;
				
				//strColumnName=""+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->cargarDescripcion"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+strForeignKey+"($"+strColumnName+");";
				
				string strPrefijoTabla=GetPrefijoTablaC().ToLower();
				string strPrefijoFuncion="\r\n\t";
				string strPrefijoTipo = "";
				//string strNombre = "";	
				
				strPrefijo=strPrefijoFuncion;	
	
				strPrefijoTipo = GetPrefijoTipoC(column);
				strNombre = GetNombreColumnaClaseC(column);
				
				strPrefijo=strPrefijoTabla+strPrefijoTipo;
	
				strPrefijo+=strNombre;
				
				strColumnName=GetNombreClaseObjetoC(column.Table.ToString())+"->"+strPrefijo+strDescription+"";
				String strColumnValue=GetNombreClaseObjetoC(column.Table.ToString())+"->"+strPrefijo;
				
				
				if(!ConRichFaces) {
					if(!blnConJQueryCode){
						strColumn="\r\n\t\t\t\t\t";
					} else {
						strColumn="";
					}
			
					strColumn+="<"+strPrefijoColumna+strClassCampo+">";
					
					if(!blnConJQueryCode){
						strColumn+="\r\n";
					}
					
				} else {
					if(!blnConJQueryCode){
						//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strOcultarColumna+"><?php echo $"+strColumnName+" ?>"+strOcultarColumna+"";//strId
						strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strOcultarColumna+">"+strPhpEcho+" $"+strColumnName+" "+strCierraPhpEcho+""+strOcultarColumna+"";//strId
					} else {
						//\r\n\t\t\t\t\t
						String strEsEditar="";
						
						if(!conEditar) {							
							strCampoObjeto=GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones::get"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"Descripcion($"+GetNombreClaseObjetoC(column.Table.ToString())+"->get"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"())";
						
						} else {
							strEsEditar="Editar";
							strCampoObjeto="Funciones::getComboBox"+strEsEditar+"($"+strColumnName+",$"+strColumnValue+",'"+strNameJQuery+"')"+strPuntoComaInstruccion;
						}
						
						strColumn="<"+strPrefijoColumna+strClassCampo+strOcultarColumna+">"+strOcultarColumna+"'."+strCampoObjeto+".'";//strId	//Relationship_
					}
				}
					
				//strColumn+="\r\n\t\t\t\t\t\t<?php echo $"+strColumnName+" ?>/>\r\n";//<h:outputText value=\"
				strColumn+="</"+strPrefijoColumna+">";
			
			} else {
				if(!ConRichFaces) {
					if(!blnConJQueryCode){
						strColumn="\r\n\t\t\t\t\t";
					} else {
						strColumn="";
					}
					
					strColumn+="<"+strPrefijoColumna+strClassCampo+">";
					
					if(!blnConJQueryCode){
						strColumn+="\r\n";
					}
					
				} else {
					if(!blnConJQueryCode){
						strColumn="\r\n\t\t\t\t\t";
					} else {
						strColumn="";
					}
					
					strColumn+="<"+strPrefijoColumna+strClassCampo+" sortBy=\""+strPhpEcho+" $"+strColumnName+" "+strCierraPhpEcho+"\""+strOcultarColumna+">";
					
					if(!blnConJQueryCode){
						strColumn+="\r\n";
					}
				}
				
				if(!blnConJQueryCode){
					strColumn+="\r\n\t\t\t\t\t\t";
				}
					
				strColumn+="<h:outputText value=\""+strPhpEcho+" $"+strColumnName+" "+strCierraPhpEcho+"\"/>";
				
				if(!blnConJQueryCode){
					strColumn+="\r\n";
				}
				
				if(!blnConJQueryCode){
					strColumn+="\t\t\t\t\t";
				}
					
				strColumn+="</"+strPrefijoColumna+">";
				
				if(!blnConJQueryCode){
					strColumn+="\r\n";
				}
			}
			
		} else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow)) {
			
			if(esMantenimientoDeImagen) {
				
			} else {
				
			}
		}
	}	
	
	//JQUERY
	if(blnConJQueryCode){
		if(!(EsColumnaVariableGlobalDataBaseFromPropertiesC(column) || EsColumnaVariableModuloGlobalC(column))) {					
			//NORMAL
			strColumn="\r\n\t\t\t\t"+strVariableAppend+".='"+strColumn+"';";
		} else {
			//VARIABLE GLOBAL
			strColumn="\r\n\t\t\t\tif(Constantes::$ISDEVELOPING) {\r\n\t\t\t\t"+strVariableAppend+".='"+strColumn+"';\r\n\t\t\t\t}";
		}
	}
	//JQUERY
	
	
	//SI ES CONTROLLER, SE FORZA COMO JQUERY Y SE DEJA COMO ESTABA
	if(paraController) {
		blnConJQueryCode=blnConJQueryCodeOriginal;
	}
	
	return strColumn;
}

/* 
//REMMPLAZOS QUE ESTABA CON blnConJQueryCode
public String GetJQueryHtmlTablaReemplaceColumn(String strGetColumnsFaces,bool conEditar) {
	
	strGetColumnsFaces=strGetColumnsFaces.Replace("\r\n","");
	strGetColumnsFaces=strGetColumnsFaces.Replace("\t","");
	
	strGetColumnsFaces="\r\n\t\t\t\t$this->htmlTabla"+GetNombreClaseC(TablaBase.ToString())+"s.='"+strGetColumnsFaces+"';";
	
	strGetColumnsFaces=strGetColumnsFaces.Replace("<?php echo '","");
	strGetColumnsFaces=strGetColumnsFaces.Replace("</b>';?>","");
	strGetColumnsFaces=strGetColumnsFaces.Replace("?></td>",".'</td>");
	strGetColumnsFaces=strGetColumnsFaces.Replace("<td> <?php echo ","<td> '.");
	strGetColumnsFaces=strGetColumnsFaces.Replace("style=\"display:none\"> <?php echo","style=\"display:none\">'.");
	strGetColumnsFaces=strGetColumnsFaces.Replace("<td><?php echo ","<td> '.");
	strGetColumnsFaces=strGetColumnsFaces.Replace("; .",".");					
			
	
	return strGetColumnsFaces;
}
*/

public string GetTituloColumnsFacesTableMaintenanceC(TableSchema table,TableSchema tablaRelacionadaObjetivo,String strNombreAdicional,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaConJQueryCode,String strVariableAppend,bool blnParaController)
{
	if(esParaForeignKey) {
		return "";
	}
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
	String strColumnName="";strColumnName+="";
	String strColumnLabel=""+GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo).Replace(GetTituloNombreTableFromPropertiesC(table),"")+""+strNombreAdicional.ToUpper()+strPlural+"";
	String strColumn="";
	String strPrefijoColumna="th";		
	
	if(ConFaces|| ConRichFaces) {
		String strObjectFace=GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces;
		
		if(!ConRichFaces){
			/*
			strColumn="\r\n\t\t\t\t\t<h:column>\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"" +strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t\t<h:commandLink action=\"#{detalleLibroBean.detalleLibro}\" value=\"" +strColumnLabel+"\" styleClass=\"link1\">\r\n";
			strColumn+="\t\t\t\t\t\t\t\t<f:setPropertyActionListener value=\"<?php echo $libro.id ?>\" target=\"<?php echo $detalleLibroBean.id ?>\" />\r\n";
			strColumn+="\t\t\t\t\t\t\t</h:commandLink>\r\n";
			strColumn+="\t\t\t\t\t</h:column>\r\n";
			*/
		} else {						
			if(!blnParaConJQueryCode || blnParaController){
				
				strColumn="\r\n\t\t"+strVariableAppend+".='<"+strPrefijoColumna+" style=\"display:table-cell\"><b><pre>"+strColumnLabel+"</pre></b>";
				strColumn+="</"+strPrefijoColumna+">';";									
								
			} else {				
				
				strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+" style=\"display:<?php echo $"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->strTienePermisos"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+";?>\"><?php echo '<b><pre>"+strColumnLabel+"</pre></b>';?>";
				strColumn+="</"+strPrefijoColumna+">";								
			}
					
		}
	}
	
	return strColumn;
}

public string GetHtmlTituloColumnsFacesTableMaintenanceC(TableSchema table,TableSchema tablaRelacionadaObjetivo,String strNombreAdicional,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaConJQueryCode,String strVariableAppend,bool paraDivVertical)
{
	if(esParaForeignKey) {
		return "";
	}
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
	String strColumnName="";strColumnName+="";
	String strColumnLabel=""+GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo).Replace(GetTituloNombreTableFromPropertiesC(table),"")+""+strNombreAdicional.ToUpper()+strPlural+"";
	String strColumn="";
	String strPrefijoColumna="th";		
	
	if(ConFaces|| ConRichFaces) {
		String strObjectFace=GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces;
		
		if(!ConRichFaces){
			/*
			strColumn="\r\n\t\t\t\t\t<h:column>\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"" +strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t\t<h:commandLink action=\"#{detalleLibroBean.detalleLibro}\" value=\"" +strColumnLabel+"\" styleClass=\"link1\">\r\n";
			strColumn+="\t\t\t\t\t\t\t\t<f:setPropertyActionListener value=\"<?php echo $libro.id ?>\" target=\"<?php echo $detalleLibroBean.id ?>\" />\r\n";
			strColumn+="\t\t\t\t\t\t\t</h:commandLink>\r\n";
			strColumn+="\t\t\t\t\t</h:column>\r\n";
			*/
		} else {
			if((!blnParaConJQueryCode && ConCakePhp) || ConPhpBasico){
						/*
						strColumn="\r\n\t\t\t\t<tr><td><"+strPrefijoColumna+" style=\"display:<?php echo $"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->strTienePermisos"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+";?>\"><?php echo '<b><pre>"+strColumnLabel+"</pre></b>';?>";
						strColumn+="</"+strPrefijoColumna+"></td></tr>";
						*/
						
				//strColumn="\r\n\t\t\t\t<tr style=\"display:<?php echo str_replace('cell','row',$"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->strTienePermisos"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+");?>\"><td>"+"<?php echo '<b>"+strColumnLabel+"</b>';?>";
				//strColumn+="</td>";
				//strColumn+="<td>";
				//strColumn+="<?php echo $ajax->link($"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->"+GetNombreClaseObjetoC(table.ToString())+/*GetNombreClaseObjetoC(table.ToString())+*/"->"+strId+".$html->image('/img/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif', array('width'=>35,'height'=>35, 'alt' => '"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(table.ToString())+"s', 'action' => 'registrarSesion"+GetNombreClaseC(table.ToString())+strNombreAdicional+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"', $"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+/*GetNombreClaseObjetoC(table.ToString())*/"->"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => "+/*"array('divAccionesRelaciones"+GetNombreClaseC(table.ToString())+strAjaxWebPart+',)*/"'divMensajes','before' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(table.ToString())+"();' )); ?>";
				//strColumn+="</td>";
				//strColumn+="</tr>";
				
				strColumn="\r\n\t\t\t\t<tr style=\"display:<?php echo str_replace('cell','row',$"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->strTienePermisos"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+");?>\"><td>"+"<?php echo '<b>"+strColumnLabel+"</b>';?>";
				strColumn+="</td>";
				strColumn+="<td>";
				strColumn+="<?php echo $"+GetNombreClaseObjetoC(table.ToString())+"Controller->Html->link($"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->"+GetNombreClaseObjetoC(table.ToString())+/*GetNombreClaseObjetoC(table.ToString())+*/"->"+strId+".$"+GetNombreClaseObjetoC(table.ToString())+"Controller->Html->image('/img/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif', array('width'=>35,'height'=>35, 'alt' => '"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(table.ToString())+"s', 'action' => 'registrarSesion"+GetNombreClaseC(table.ToString())+strNombreAdicional+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"', $"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+/*GetNombreClaseObjetoC(table.ToString())*/"->"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => "+/*"array('divAccionesRelaciones"+GetNombreClaseC(table.ToString())+strAjaxWebPart+',)*/"'divMensajes','before' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(table.ToString())+"();' )); ?>";
				strColumn+="</td>";
				strColumn+="</tr>";
				
			} else {
				/*
				strColumn="\r\n\t\t<tr>"+strVariableAppend+".='<"+strPrefijoColumna+" style=\"display:table-cell\"><b><pre>"+strColumnLabel+"</pre></b>";
				strColumn+="</"+strPrefijoColumna+"></td></tr>';";
				*/
				strColumn="\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td style=\"display:table-cell\"><b>"+strColumnLabel+"</b></b></td>";
				strColumn+="\r\n\t\t\t\t\t\t\t\t<td>";
				strColumn+="\r\n\t\t\t\t\t\t\t\t\t<a><img id=\"img"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\" name=\"img"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\" idactual"+GetNombreClaseObjetoC(table.ToString())+"=\"0\" src=\"<?echo(Constantes::$strPathBaseImagenToComplete)?>/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif\" alt=\"Seleccionar\" border=\"\" height=\"15\" width=\"15\"></a>";
				strColumn+="\r\n\t\t\t\t\t\t\t\t</td>";
				strColumn+="\r\n\t\t\t\t\t\t\t</tr>";
			}
					
		}
	}
	
	return strColumn;
}

public string GetColumnsFacesTableMaintenanceC(TableSchema table,TableSchema tablaRelacionadaObjetivo,String strNombreAdicional,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaConJQueryCode,String strVariableAppend,bool esParaDivVertical,bool blnParaController)
{
	//CUANDO TIENE MAS DE UN FK DE UNA MISMA TABLA ESTE ES EL NOMBRE ADICIONAL QUE LO DIFERENCIA strNombreAdicional
	
	if(esParaForeignKey) {
		return "";
	}
	
	String strClassCampo=" class=\"elementotabla\" ";
	
	/*
	String strNombre = GetNombreColumnaClaseC(column);					
	strClassCampo=" class=\"elementotabla bydan\" ";		
	strClassCampo=strClassCampo.Replace("bydan","col_"+strNombre);
	*/
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
	String strColumnName="";strColumnName+="";
	String strColumnLabel=""+GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo)+""+strNombreAdicional.ToUpper()+strPlural+"";
	String strColumn="";
	String strColumnRelacionLabel="";
	String strPrefijoColumna="td";		
	//strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	//strColumn=",{ label :" +strColumnLabel+", id :"+strColumnName+"}";
	String strTabExtra="\t\t";
	String strVariableAppendFinal=strVariableAppend;
	
	String strHtmlInicial="";
	String strHtmlFinal="";
	String strIdImagen="class=\"imgrelacion"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\"";
	
	if(esParaDivVertical) {
		strTabExtra="";
		strVariableAppendFinal="$htmlTabla"+GetNombreClaseC(table.ToString())+"sLocal";
		
		strHtmlInicial="<tr><td class=\"titulocampo\"><h2>"+strColumnLabel+"<h2></td>";
		strHtmlFinal="</tr>";
		
		
		strIdImagen="id=\"imgdivrelacion"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\" name=\"imgdivrelaciondiv"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\"";
	}
	
	if(ConFaces|| ConRichFaces) {
		String strObjectFace=GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces;
		
		if(!ConRichFaces){
			strColumn="\r\n\t\t\t\t\t<h:column>\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"" +strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t\t<h:commandLink action=\"#{detalleLibroBean.detalleLibro}\" value=\"" +strColumnLabel+"\" styleClass=\"link1\">\r\n";
			strColumn+="\t\t\t\t\t\t\t\t<f:setPropertyActionListener value=\"<?php echo $libro.id ?>\" target=\"<?php echo $detalleLibroBean.id ?>\" />\r\n";
			strColumn+="\t\t\t\t\t\t\t</h:commandLink>\r\n";
			strColumn+="\t\t\t\t\t</h:column>\r\n";
		} else {
			//ESTABA COMENTADO
						
			if(blnParaConJQueryCode || blnParaController){ 
				//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+" align=\"center\" style=\"display:<?php echo $"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->strTienePermisos"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+";?>\"><?php echo $ajax->link($"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".$html->image('/img/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif', array('width'=>15,'height'=>15, 'alt' => '"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(table.ToString())+"s', 'action' => 'registrarSesion"+GetNombreClaseC(table.ToString())+strNombreAdicional+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"', $"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(table.ToString())+"();' )); ?>";
				//strColumn+="</"+strPrefijoColumna+">";
				
				//idactual"+GetNombreClaseObjetoC(table.ToString())+"=\"'.$"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".'\" '.$"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strPrefijoJSFSessionFaces+"->strAtributosLinkPopup.
				
				if(!ConPhpBasico) {
					strColumn="\r\n\t\t"+strTabExtra+strVariableAppendFinal+".='"+strHtmlInicial+"<"+strPrefijoColumna+strClassCampo+" align=\"center\" style=\"display:table-cell\">";
					strColumn+="<a>'.$"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".'<img "+strIdImagen+" idactual"+GetNombreClaseObjetoC(table.ToString())+"=\"'.$"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".'\" title=\""+GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo)+"S DE "+GetTituloNombreTableFromPropertiesC(table)+"\" src=\"'.Constantes::$strPathBaseImagenToComplete.'/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif\" alt=\"Seleccionar\" border=\"\" height=\"15\" width=\"15\"></a>";
					strColumn+="</"+strPrefijoColumna+">"+strHtmlFinal+"';";									
				
				} else {
					//String strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
					
					strColumn="\r\n\r\n\t\t"+strTabExtra+strVariableAppendFinal+".='"+strHtmlInicial+"<"+strPrefijoColumna+strClassCampo+" align=\"center\" style=\"display:table-cell\">';";
					//strColumn+="<a>'.$"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".'<img "+strIdImagen+" idactual"+GetNombreClaseObjetoC(table.ToString())+"=\"'.$"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".'\" title=\""+GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo)+"S DE "+GetTituloNombreTableFromPropertiesC(table)+"\" src=\"'.Constantes::$strPathBaseImagenToComplete.'/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif\" alt=\"Seleccionar\" border=\"\" height=\"15\" width=\"15\"></a>";
					
					strColumn+="\r\n\t\t"+strTabExtra+strVariableAppendFinal+".='<form id=\"frmRegistrarSesion"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"_'.$i.'\" name=\"frmRegistrarSesion"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"_'.$i.'\" method=\"post\" action=\"'.$_SERVER['PHP_SELF'].'\">';";
					strColumn+="\r\n\t\t"+strTabExtra+strVariableAppendFinal+".=$this->Form->getParameterUrlPageForm();";
					strColumn+="\r\n\t\t"+strTabExtra+strVariableAppendFinal+".='<input type=\"hidden\" id=\"id\" name=\"id\" value=\"'.$"+GetNombreClaseObjetoC(table.ToString())+"->getId().'\">';";
					strColumn+="\r\n\t\t"+strTabExtra+strVariableAppendFinal+".='<input type=\"hidden\" id=\"action\" name=\"action\" value=\"registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural+"\">';";
					strColumn+="\r\n\t\t"+strTabExtra+strVariableAppendFinal+".='<input id=\"btnRegistrarSesion"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"\" name=\"btnRegistrarSesion"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"\" type=\"submit\" style=\"background: url(\\''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif\\');background-repeat: no-repeat;\" value=\".\"></input>';";
					strColumn+="\r\n\t\t"+strTabExtra+strVariableAppendFinal+".='</form>';";

					strColumn+="\r\n\t\t"+strTabExtra+strVariableAppendFinal+".='</"+strPrefijoColumna+">"+strHtmlFinal+"';";													
					
				}
				
			} else {
				
				strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+strClassCampo+" align=\"center\" style=\"display:<?php echo $"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->strTienePermisos"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+";?>\"><?php echo $"+GetNombreClaseObjetoC(table.ToString())+"Controller->Html->link($"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".$"+GetNombreClaseObjetoC(table.ToString())+"Controller->Html->image('/img/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif', array('width'=>15,'height'=>15, 'alt' => '"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(table.ToString())+"s', 'action' => 'registrarSesion"+GetNombreClaseC(table.ToString())+strNombreAdicional+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"', $"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(table.ToString())+"();' )); ?>";
				strColumn+="</"+strPrefijoColumna+">";
			}				
		}
	}
	
	return strColumn;
}

public string GetColumnsJQueryEventTableMaintenanceC(TableSchema table,TableSchema tablaRelacionadaObjetivo,String strNombreAdicional,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool esParaDivVertical,bool esFuncionGeneral)
{
	//CUANDO TIENE MAS DE UN FK DE UNA MISMA TABLA ESTE ES EL NOMBRE ADICIONAL QUE LO DIFERENCIA strNombreAdicional
	
	if(esParaForeignKey) {
		return "";
	}
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
	String strColumnName="";strColumnName+="";
	String strColumnLabel=""+GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo)+""+strNombreAdicional.ToUpper()+strPlural+"";
	String strColumn="";
	String strPrefijoColumna="td";		
	//strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	//strColumn=",{ label :" +strColumnLabel+", id :"+strColumnName+"}";
	
	
	if(ConFaces|| ConRichFaces) {
		String strObjectFace=GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces;
		
		if(!ConRichFaces){
			strColumn="\r\n\t\t\t\t\t<h:column>\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"" +strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t\t<h:commandLink action=\"#{detalleLibroBean.detalleLibro}\" value=\"" +strColumnLabel+"\" styleClass=\"link1\">\r\n";
			strColumn+="\t\t\t\t\t\t\t\t<f:setPropertyActionListener value=\"<?php echo $libro.id ?>\" target=\"<?php echo $detalleLibroBean.id ?>\" />\r\n";
			strColumn+="\t\t\t\t\t\t\t</h:commandLink>\r\n";
			strColumn+="\t\t\t\t\t</h:column>\r\n";
		} else {
			
			String strEventoObjetivo=".img";//"link";				
			strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);								
					
			if(esParaDivVertical) {
				strEventoObjetivo="#imgdiv";
			}
					
			if(!blnConJQueryCode){ 
				//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+" align=\"center\" style=\"display:<?php echo $"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->strTienePermisos"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+";?>\"><?php echo $ajax->link($"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".$html->image('/img/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif', array('width'=>15,'height'=>15, 'alt' => '"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(table.ToString())+"s', 'action' => 'registrarSesion"+GetNombreClaseC(table.ToString())+strNombreAdicional+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"', $"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(table.ToString())+"();' )); ?>";
				//strColumn+="</"+strPrefijoColumna+">";
			} else {
				//SIEMPRE img
				
				//PARA EVENTOS DE IMAGENES DE DIV AUXILIAR
				if(esParaDivVertical) {									
					/*
					if(!GetConPopupTableFromProperties(tablaRelacionadaObjetivo)) {
						strEventoObjetivo="img";
					}
					*/
					
					/*
					strColumn="\r\n\t\t\t\t"+strVariableAppend+".='<"+strPrefijoColumna+" align=\"center\" style=\"display:table-cell\">";
					strColumn+="<a>'.$"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".'<img class=\"imgrelacion"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\" idactual"+GetNombreClaseObjetoC(table.ToString())+"=\"'.$"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".'\" src=\"'.Constantes::$strPathBaseImagenToComplete.'/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif\" alt=\"Seleccionar\" border=\"\" height=\"15\" width=\"15\"></a>";
					strColumn+="</"+strPrefijoColumna+">';";		}				
					*/
					
					strColumn="\r\n\r\n\t\tjQuery(\""+strEventoObjetivo+"relacion"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\").click(function(){";
					strColumn+="\r\n\r\n\t\t\tvar idActual=jQuery(this).attr(\"idactual"+GetNombreClaseObjetoC(table.ToString())+"\");";				
					strColumn+="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"JQueryPaginaWebInteraccion.registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"(idActual);";//"+GetNombreClaseObjetoC(table.ToString())+"JQueryPaginaWebInteraccion
					
					/*
					strColumn+="\r\n\t\t\tvar strFormQueryString=\"controller="+GetNombreClaseC(table.ToString())+"&modulo="+GetNombreModuloJsC()+"&sub_modulo="+GetNombreSubModuloJsC()+"&action=registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"&\";";					
					strColumn+="\r\n\r\n\t\t\tstrFormQueryString=strFormQueryString+\"id=\"+idActual;";					
					strColumn+="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(table.ToString())+"();";					
					strColumn+="\r\n\r\n\t\t\tjQuery.post('http://'+constantes.STRIPSERVIDOR+':'+constantes.STRPUERTOSERVIDOR+'/'+constantes.STRCONTEXTOAPLICACIONSERVICIO+'/'+constantes.STRCONTEXTOAPLICACIONTOCOMPLETESERVICIO+'/'+'GlobalController.php', strFormQueryString ,";
					strColumn+="\r\n\t\t\t\tfunction(jsonresult){})";					
					strColumn+="\r\n\r\n\t\t\t\t//.beforeSend(function(){";
					strColumn+="\r\n\t\t\t\t\t//"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(table.ToString())+"OnClick();";
					strColumn+="\r\n\t\t\t\t//})";					
					strColumn+="\r\n\r\n\t\t\t\t.success(function(jsonresult) {";
					strColumn+="\r\n\t\t\t\t\tvar "+GetNombreClaseObjetoC(table.ToString())+"Controller=jQuery.parseJSON(jsonresult);";							
					strColumn+="\r\n\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"JQueryPaginaWebInteraccion.actualizarVariablesPagina"+GetNombreClaseC(table.ToString())+"("+GetNombreClaseObjetoC(table.ToString())+"Controller);";
					strColumn+="\r\n\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"Controller.strAuxiliarUrlPagina=funcionGeneral.cambiarUrlPorServicioTercero("+GetNombreClaseObjetoC(table.ToString())+"Controller.strAuxiliarUrlPagina);";
					strColumn+="\r\n\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLinkParametros"+GetNombreClaseC(table.ToString())+"("+GetNombreClaseObjetoC(table.ToString())+"Controller.strAuxiliarTipo,"+GetNombreClaseObjetoC(table.ToString())+"Controller.strAuxiliarUrlPagina);";
					strColumn+="\r\n\t\t\t\t})";						
					strColumn+="\r\n\r\n\t\t\t\t.error(function(){alert(\"OCURRIO ALGUN ERROR, VUELVA A INTERNARLO Y CONSULTE CON EL ADMINISTRADOR\");})";						
					strColumn+="\r\n\r\n\t\t\t\t.complete(function(jsonresult) {";
					strColumn+="\r\n\t\t\t\t\t";
					strColumn+="\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(table.ToString())+"();";
					strColumn+="\r\n\t\t\t\t});";	
					*/
					
					
					strColumn+="\r\n\t\t});";
				
				} else if(!esFuncionGeneral) {					
					strColumn="\r\n\r\n\t\tjQuery(\""+strEventoObjetivo+"relacion"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\").click(function(){";
					strColumn+="\r\n\r\n\t\t\tvar idActual=jQuery(this).attr(\"idactual"+GetNombreClaseObjetoC(table.ToString())+"\");";				
					strColumn+="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"JQueryPaginaWebInteraccion.registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"(idActual);";//"+GetNombreClaseObjetoC(table.ToString())+"JQueryPaginaWebInteraccion						
					strColumn+="\r\n\t\t});";
					
				} else if(esFuncionGeneral) {
					//this.registerDivAccionesRelaciones<%=GetNombreClaseC(TablaBase.ToString())%>=function() {
					
					strColumn="\r\n\r\n\t\tthis.registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"=function(idActual){";
					//strColumn+="\r\n\r\n\t\t\tvar idActual=jQuery(this).attr(\"idactual"+GetNombreClaseObjetoC(table.ToString())+"\");";				
					strColumn+="\r\n\t\t\tvar strFormQueryString=\"controller="+GetNombreClaseC(table.ToString())+"&modulo="+GetNombreModuloJsC()+"&sub_modulo="+GetNombreSubModuloJsC()+"&action=registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"&\";";					
					strColumn+="\r\n\r\n\t\t\tstrFormQueryString=strFormQueryString+\"id=\"+idActual;";					
					strColumn+="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(table.ToString())+"();";					
					strColumn+="\r\n\r\n\t\t\tjQuery.post('http://'+constantes.STRIPSERVIDOR+':'+constantes.STRPUERTOSERVIDOR+'/'+constantes.STRCONTEXTOAPLICACIONSERVICIO+'/'+constantes.STRCONTEXTOAPLICACIONTOCOMPLETESERVICIO+'/'+'GlobalController.php', strFormQueryString ,";
					strColumn+="\r\n\t\t\t\tfunction(jsonresult){/*alert(\"A\");*/})";					
					strColumn+="\r\n\r\n\t\t\t\t/*.beforeSend(function(){";
					strColumn+="\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.nuevoPreparar"+GetNombreClaseC(table.ToString())+"OnClick();";
					strColumn+="\r\n\t\t\t\t})*/";					
					strColumn+="\r\n\r\n\t\t\t\t.success(function(jsonresult) {";
					strColumn+="\r\n\t\t\t\t\tvar "+GetNombreClaseObjetoC(table.ToString())+"Controller=jQuery.parseJSON(jsonresult);";							
					strColumn+="\r\n\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"JQueryPaginaWebInteraccion.actualizarVariablesPagina"+GetNombreClaseC(table.ToString())+"("+GetNombreClaseObjetoC(table.ToString())+"Controller);";
					strColumn+="\r\n\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"Controller.strAuxiliarUrlPagina=funcionGeneral.cambiarUrlPorServicioTercero("+GetNombreClaseObjetoC(table.ToString())+"Controller.strAuxiliarUrlPagina);";
					strColumn+="\r\n\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLinkParametros"+GetNombreClaseC(table.ToString())+"("+GetNombreClaseObjetoC(table.ToString())+"Controller.strAuxiliarTipo,"+GetNombreClaseObjetoC(table.ToString())+"Controller.strAuxiliarUrlPagina);";
					strColumn+="\r\n\t\t\t\t})";						
					strColumn+="\r\n\r\n\t\t\t\t.error(function(){alert(\"OCURRIO ALGUN ERROR, VUELVA A INTERNARLO Y CONSULTE CON EL ADMINISTRADOR\");})";						
					strColumn+="\r\n\r\n\t\t\t\t.complete(function(jsonresult) {";
					strColumn+="\r\n\t\t\t\t\t/*alert(\"D\");*/";
					strColumn+="\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(table.ToString())+"();";
					strColumn+="\r\n\t\t\t\t});";									
					strColumn+="\r\n\t\t};";
				}
				
				/*
				strColumn+="\r\n\r\n\t\tjQuery('.linkrelacion"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"').popupWindow({"; 
				strColumn+="\r\n\t\t\theight:window.screen.height*0.75,"; 
				strColumn+="\r\n\t\t\twidth:window.screen.width*0.75,"; 
				strColumn+="\r\n\t\t\ttop:window.screen.height*0.13,"; 
				strColumn+="\r\n\t\t\tleft:window.screen.width*0.13,";
				strColumn+="\r\n\t\t\tstatus:1,"; 
				strColumn+="\r\n\t\t\tresizable:1,";
				strColumn+="\r\n\t\t\tscrollbars:1";
				strColumn+="\r\n\t\t});";
				*/
			}
		}
	}
	
	return strColumn;
}

public string GetColumnsJQueryEventControllerTableMaintenanceC(TableSchema table,TableSchema tablaRelacionadaObjetivo,String strNombreAdicional,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaController)
{
	//CUANDO TIENE MAS DE UN FK DE UNA MISMA TABLA ESTE ES EL NOMBRE ADICIONAL QUE LO DIFERENCIA strNombreAdicional
	
	if(esParaForeignKey) {
		return "";
	}
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
	String strColumnName="";strColumnName+="";
	String strColumnLabel=""+GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo)+""+strNombreAdicional.ToUpper()+strPlural+"";
	String strColumn="";
	String strPrefijoColumna="td";		
	//strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	//strColumn=",{ label :" +strColumnLabel+", id :"+strColumnName+"}";
	
	
	if(ConFaces|| ConRichFaces) {
		String strObjectFace=GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces;
		
		if(!ConRichFaces){
			strColumn="\r\n\t\t\t\t\t<h:column>\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"" +strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t\t<h:commandLink action=\"#{detalleLibroBean.detalleLibro}\" value=\"" +strColumnLabel+"\" styleClass=\"link1\">\r\n";
			strColumn+="\t\t\t\t\t\t\t\t<f:setPropertyActionListener value=\"<?php echo $libro.id ?>\" target=\"<?php echo $detalleLibroBean.id ?>\" />\r\n";
			strColumn+="\t\t\t\t\t\t\t</h:commandLink>\r\n";
			strColumn+="\t\t\t\t\t</h:column>\r\n";
		} else {
			
			if(blnParaController) {
				/*
				strColumn="\r\n\t\t\t\t"+strVariableAppend+".='<"+strPrefijoColumna+" align=\"center\" style=\"display:table-cell\">";
				strColumn+="<a>'.$"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".'<img class=\"imgrelacion"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\" idactual"+GetNombreClaseObjetoC(table.ToString())+"=\"'.$"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".'\" src=\"'.Constantes::$strPathBaseImagenToComplete.'/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif\" alt=\"Seleccionar\" border=\"\" height=\"15\" width=\"15\"></a>";
				strColumn+="</"+strPrefijoColumna+">';";		}				
				*/
				/*
				strColumn="\r\n\t\tjQuery(\".imgrelacion"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\").click(function(){";
				strColumn+="\r\n\t\t\tvar strFormQueryString=\"controller="+GetNombreClaseC(table.ToString())+"&action=registrarSesion"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s&\";";					
				*/
				strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
				
				strColumn="\r\n\t\t\telse if($action=='registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"' ) {";
				strColumn+="\r\n\t\t\t\t$this->setCargarDivSeccionesActualizar"+GetNombreClaseC(table.ToString())+"(false,false,false,false,false,false,false,false,false,false,false,false);";			
				strColumn+="\r\n\t\t\t\t$id"+GetNombreClaseC(table.ToString())+"Actual=$this->data['id'];";
				strColumn+="\r\n\t\t\t\t$this->registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"($id"+GetNombreClaseC(table.ToString())+"Actual);";
				strColumn+="\r\n\t\t\t}";
				
			} else {
				if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico){ 
					//strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+" align=\"center\" style=\"display:<?php echo $"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->strTienePermisos"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+";?>\"><?php echo $ajax->link($"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".$html->image('/img/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif', array('width'=>15,'height'=>15, 'alt' => '"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(table.ToString())+"s', 'action' => 'registrarSesion"+GetNombreClaseC(table.ToString())+strNombreAdicional+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"', $"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(table.ToString())+"();' )); ?>";
					//strColumn+="</"+strPrefijoColumna+">";
					
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+" align=\"center\" style=\"display:<?php echo $"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->strTienePermisos"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+";?>\"><?php echo $"+GetNombreClaseObjetoC(table.ToString())+"Controller->Html->link($"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+".$"+GetNombreClaseObjetoC(table.ToString())+"Controller->Html->image('/img/Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s.gif', array('width'=>15,'height'=>15, 'alt' => '"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(table.ToString())+"s', 'action' => 'registrarSesion"+GetNombreClaseC(table.ToString())+strNombreAdicional+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"', $"+GetNombreClaseObjetoC(table.ToString())+"->"+strId+"),array( 'escape'=>false, 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(table.ToString())+"();' )); ?>";
					strColumn+="</"+strPrefijoColumna+">";
				}				
			}
		}
	}
	
	return strColumn;
}

public string GetColumnsTableMaintenanceC(TableSchema table)
{
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(table);
	String strColumnName="";
	String strColumnLabel="'"+GetTituloNombreTableFromPropertiesC(table)+strPlural+"'";
	String strColumn="";
			
	strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	strColumn=",{ label :" +strColumnLabel+", id :"+strColumnName+"}";
			
	return strColumn;
}

public string GetColumnsFacesTableMaintenanceC(TableSchema table)
{
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(table);
	String strColumnName="";strColumnName+="";
	String strColumnLabel=""+GetTituloNombreTableFromPropertiesC(table)+strPlural+"";
	String strColumn="";
			
	//strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	//strColumn=",{ label :" +strColumnLabel+", id :"+strColumnName+"}";
	
	strColumn="\r\n\t\t\t\t\t<h:column>\r\n";
	strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"" +strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
	strColumn+="\r\n\t\t\t\t\t\t\t<h:commandLink action=\"#{detalleLibroBean.detalleLibro}\" value=\"" +strColumnLabel+"\" styleClass=\"link1\">\r\n";
	strColumn+="\t\t\t\t\t\t\t\t<f:setPropertyActionListener value=\"<?php echo $libro.id ?>\" target=\"<?php echo $detalleLibroBean.id ?>\" />\r\n";
	strColumn+="\t\t\t\t\t\t\t</h:commandLink>\r\n";
	strColumn+="\t\t\t\t\t</h:column>\r\n";
							
	return strColumn;
}

public string GetActionsTableMaintenanceC(TableSchema table)
{
	ArrayList arrAccionExtendsProperty=new ArrayList();
	
	arrAccionExtendsProperty=GetAccionExtendsPropertyC(table);
	
	//String strPlural=GetPluralTituloNombreTableFromPropertiesC(table);
	String strColumn="";
	//String strColumnLabel="'"+GetTituloNombreTableFromPropertiesC(table)+strPlural+"'";
	String strColumns="";
			
	//strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	
	String strNombreCodigo="";
	String strNombreWebTitulo="";
	
	
	foreach(MeExtendProperty meExtendProperty in arrAccionExtendsProperty)
	{
		strNombreCodigo=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableNombreProperty);
		strNombreWebTitulo=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableWebNombreProperty);
		
		strColumn="{ label :'"+strNombreWebTitulo+"', id :'"+strNombreCodigo+"'}";
		
		strColumns+=","+strColumn;
		
		
	}
	
	return strColumns;
}

public string GetActionsImagenTableTableMaintenanceC(TableSchema table)
{
	ArrayList arrAccionExtendsProperty=new ArrayList();
	
	arrAccionExtendsProperty=GetAccionExtendsPropertyC(table);
	
	//String strPlural=GetPluralTituloNombreTableFromPropertiesC(table);
	String strColumn="";
	//String strColumnLabel="'"+GetTituloNombreTableFromPropertiesC(table)+strPlural+"'";
	String strColumns="";
			
	//strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	
	String strNombreCodigo="";
	String strNombreWebTitulo="";
	String strNombreFuncionJavaScript="";
	
	foreach(MeExtendProperty meExtendProperty in arrAccionExtendsProperty)
	{
		strNombreCodigo=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableNombreProperty);
		strNombreWebTitulo=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableWebNombreProperty);
		strNombreFuncionJavaScript=strNombreCodigo.Substring(0,1).ToUpper()+strNombreCodigo.Substring(1,strNombreCodigo.Length-1).ToLower();
		
		strColumn=strNombreCodigo+":\"<img src=\\\""+GetRelativePathC(table)+"Imagenes/Accion/"+strNombreCodigo.ToLower()+".jpg\\\" onClick=\\\""+GetNombreClaseObjetoC(table.ToString())+"PaginaWebInteraccionEventsAdditional."+strNombreFuncionJavaScript+"(\"+arrData"+GetNombreClaseC(table.ToString())+"s[i].id+\")\\\" width=\\\"40\\\" height=\\\"40\\\">\"";
		
		strColumns+=","+strColumn;
		
		
	}
	
	return strColumns;
}


public String GetParameterClaseTablasParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {			
				for (int i = 0; i < tableSchema.Columns.Count; i++){ 					
					if(tableSchema.Columns[i].Name==strIsActive||tableSchema.Columns[i].Name==strIsExpired||(tableSchema.Columns[i].Name==strId && !tableSchema.Columns[i].IsForeignKeyMember)||tableSchema.Columns[i].Name==strVersionRow/* || GetEsReporteParametroFromPropertiesC(tableSchema.Columns[i])*/){continue; } 
						strSwing+=GetParameterClaseC(tableSchema.Columns[i],false,false,GetNombreClaseC(tableSchema.ToString())); 
				}				
			}						
		}
		
		return strSwing;
	}
	
	public String GetValueDefaultParameterClaseParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {			
				for (int i = 0; i < tableSchema.Columns.Count; i++){ 					
					if(tableSchema.Columns[i].Name==strIsActive||tableSchema.Columns[i].Name==strIsExpired||tableSchema.Columns[i].Name==strId||tableSchema.Columns[i].Name==strVersionRow/*|| GetEsReporteParametroFromPropertiesC(tableSchema.Columns[i])*/){continue; }
					
					strSwing+="\r\n\t\t\t"+GetValueDefaultParameterClaseC(tableSchema.Columns[i],GetNombreClaseC(tableSchema.ToString())); 
				}				
			}						
		}
		
		return strSwing;
	}
	
	public String GetParameterClaseMethodTablasParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {			
				for (int i = 0; i < tableSchema.Columns.Count; i++){ 					
					if(tableSchema.Columns[i].Name==strIsActive||tableSchema.Columns[i].Name==strIsExpired||(tableSchema.Columns[i].Name==strId /*&& !tableSchema.Columns[i].IsForeignKeyMember*/)||tableSchema.Columns[i].Name==strVersionRow/*|| GetEsReporteParametroFromPropertiesC(tableSchema.Columns[i])*/){continue; }
					
					strSwing+="\r\n\t\t\t"+GetParameterClaseMethodC(tableSchema.Columns[i],false,false,false,GetNombreClaseC(tableSchema.ToString())); 
				}				
			}						
		}
		
		return strSwing;
	}
	
	public String GetParameterClaseSetMethodTablasParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {			
				for (int i = 0; i < tableSchema.Columns.Count; i++){ 					
					if(tableSchema.Columns[i].Name==strIsActive||tableSchema.Columns[i].Name==strIsExpired||(tableSchema.Columns[i].Name==strId /*&& !tableSchema.Columns[i].IsForeignKeyMember*/)||tableSchema.Columns[i].Name==strVersionRow/*|| GetEsReporteParametroFromPropertiesC(tableSchema.Columns[i])*/){continue; }
					
					strSwing+="\r\n\t\t\t"+GetParameterClaseSetMethodC(tableSchema.Columns[i],true,GetNombreClaseC(tableSchema.ToString())); 
				}				
			}						
		}
		
		return strSwing;
	}
	
public String GetFuncionesImagenesC(TableSchema TablaBase) 
		{
			String strFuncionesImagenes="";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{				
				if((columnSchema.NativeType=="image"&&columnSchema.DataType==DbType.Binary&&columnSchema.Name!=strVersionRow)||(columnSchema.DataType==DbType.Binary&&columnSchema.Name!=strVersionRow))
				{
					/*
					//strFuncionesImagenes+="\r\nimport java.io.File;";
					strFuncionesImagenes+="\r\nimport java.util.Iterator;";
					strFuncionesImagenes+="\r\nimport java.util.List;";
					//strFuncionesImagenes+="\r\nimport java.io.FileInputStream;";
					strFuncionesImagenes+="\r\nimport org.apache.commons.fileupload.FileItem;";
					strFuncionesImagenes+="\r\nimport org.apache.commons.fileupload.FileItemFactory;";
					strFuncionesImagenes+="\r\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;";
					strFuncionesImagenes+="\r\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;";
					*/
				}
			}
			return strFuncionesImagenes;
		
		}
		
public String GetClassClasesForeigKeysC(TableSchema TablaBase) 
		{
			String strTablaClaseRelacionada=string.Empty;
										
										
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					strTablaClaseRelacionada+="\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ ".class));\r\n";
				
				}
			}
			
			
				
			return strTablaClaseRelacionada; 
		}

public String GetAddClasseTablasClasesRelacionadasForeigKeysC(TableSchema TablaBase,String strTab) 
		{
			String strTablaClaseRelacionada=string.Empty;
										 			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
					
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t$class=new Classe('"+/*GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+*/GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"');$classes[]=$class;";
					//strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t$classes[]=$class;";
				}
			}
								
			return strTablaClaseRelacionada; 
		}
	
	/*
	public String GetAddClasseTablasClasesRelacionadas1C(TableSchema TablaBase,String strTab) {
		return GetClassClasesRelacionadas1C(TablaBase);		
	}

	public String GetClassClasesRelacionadas1C(TableSchema TablaBase) {
		return GetClassClasesRelacionadas1C(TablaBase,"");	
	}
	
	public String GetClassClasesRelacionadas1C(TableSchema TablaBase,String strTab) 
		{
			String strTablaClaseRelacionada=string.Empty;
										
										
			
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,true);
			
			
			TableSchema tablaRelacionadaObjetivo;
				
			
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
				{
								
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					}	
					else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
						
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
												
					}
					else
					{
						continue;
					}
						
					
					strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t$class=new Classe('"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"');";
					strTablaClaseRelacionada+=" \t$classes[]=$class;";
					
					//strTablaClaseRelacionada+="\t\tclasses.add(new Classe("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+ ".class));\r\n";
					
				}
				
			return strTablaClaseRelacionada; 
	}
	
	
	public String GetOrderByClasesRelacionadasC(TableSchema TablaBase,String strTab) 
		{
			String strTablaClaseRelacionada=string.Empty;
										
										
			
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,true);
			
			
			TableSchema tablaRelacionadaObjetivo;
				
			
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
				{
								
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					}	
					else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
						
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
												
					}
					else
					{
						continue;
					}
						
					
					strTablaClaseRelacionada+="\r\n\r\n\t\t$orderBy=OrderBy::NewOrderBy(false,"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::$STRCLASSWEBTITULO, "+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::$STRCLASSWEBTITULO,false,\""+GetPrefijoSqlTableFromPropertiesC(tablaRelacionadaObjetivo)+"\");";
					strTablaClaseRelacionada+="\r\n\t\t$arrOrderBy[]=$orderBy;";
				
					//strTablaClaseRelacionada+="\t\tclasses.add(new Classe("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+ ".class));\r\n";
					
				}
				
			return strTablaClaseRelacionada; 
	}
	*/
	
	public String GetRowsReportesClassClasesRelacionadasC(TableSchema TablaBase,String strTab,bool esRowsReportes,bool esFkInclude,bool conAddClasseDeepLoad,bool conOrderByClases) {
		String strTablaClaseRelacionada=string.Empty;																							
			
		System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,false);			
			
		TableSchema tablaRelacionadaObjetivo;
				
			
		foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
								
			if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
				tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				continue;
				
			} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {						
				tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
							
				
				
				//strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t$row="+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::getHeaderReportRow($tipo,$this->arrOrderBy,$this->bitParaReporteOrderBy);";
				//strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t$data[]=$row;";
				
			} else {
				continue;					
			}
			
			
			if(esRowsReportes) {
				strTablaClaseRelacionada+="\r\n\r\n\r\n"+strTab+"\t\t\t\t//"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString());
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\tif(Funciones::existeCadenaArrayOrderBy("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::$STRCLASSWEBTITULO,$this->arrOrderByRel,$this->bitParaReporteOrderByRel)) {";								
				
						
				strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\tif(count($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s())>0) {";
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$subheader=array();";																		
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$cellReport=new CellReport(); $cellReport->inicializarTextWidthHeightLine("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::$STRCLASSWEBTITULO,40,7,1); $cellReport->setblnFill(true); $cellReport->setintColSpan(3);$subheader[]=$cellReport;";
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$data[]=$subheader;";
				
				strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\t\t$row="+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::getHeaderReportRow('RELACIONADO',$this->arrOrderBy,$this->bitParaReporteOrderBy);";
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$data[]=$row;";
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t}";
				
				strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\tforeach($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s() as $"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+") {";
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$row="+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::getDataReportRow('RELACIONADO',$"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+",$this->arrOrderBy,$this->bitParaReporteOrderBy);";
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$data[]=$row;";
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t}";
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t}";
			
			} else if(esFkInclude) {
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesCarga::cargarArchivosPaquetesForeignKeys(PaqueteTipo::$LOGIC);";
			
			} else if(conAddClasseDeepLoad) {
				strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t$class=new Classe('"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"');";
				strTablaClaseRelacionada+=" \t$classes[]=$class;";
			
			} else if(conOrderByClases) {
				strTablaClaseRelacionada+="\r\n\r\n\t\t$orderBy=OrderBy::NewOrderBy(false,"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::$STRCLASSWEBTITULO, "+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::$STRCLASSWEBTITULO,false,\""+GetPrefijoSqlTableFromPropertiesC(tablaRelacionadaObjetivo)+"\");";
				strTablaClaseRelacionada+="\r\n\t\t$arrOrderBy[]=$orderBy;";
					
			}
												
			//strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t$class=new Classe('"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"');";
			//strTablaClaseRelacionada+=" \t$classes[]=$class;";								
					
		}
				
		return strTablaClaseRelacionada; 
	}
		
	
	public bool TieneClasesRelacionadasFinalC(TableSchema TablaBase) {
		String strTablaClaseRelacionada=string.Empty;																							
		bool tiene=false;
			
		//Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(TablaBase);
		//TableSchema tablaRelacionadaObjetivo;
							
		//foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
		foreach(TableSchema tablaRelacionadaObjetivo in tablasRelacionadasEncontradas) {										
			if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo)) {
				continue;
			}
					
			tiene=true;				
			break;
		}
				
		return tiene; 
	}
	
public String GetNavegacionTituloTablaTablasClasesRelacionadasC(TableSchema table) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}
				else
				{
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO"))
					{
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo)
				{
					continue;
				}
				
				
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{
					
					
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name))
					{
						encontrado=true;
					}
				}
				
				
				if(!encontrado)
				{
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetColumnsTableMaintenanceC(tablaRelacionadaObjetivo);
				}
				
					
				
			}
								
			return strTablaClaseRelacionada; 
		}

public String GetNavegacionTituloTablaFacesTablasClasesRelacionadasC(TableSchema table) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			ArrayList arrayListTablasRelacionadas=GetOrdenTablasRelacionadasC(table,tablasRelacionadas);
				
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in arrayListTablasRelacionadas)//tablasRelacionadas.Values)
			{
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);					

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}
				else
				{
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO"))
					{
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo)
				{
					continue;
				}
				
				
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{
					
					
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals(""))
					{
						encontrado=true;
					}
				}
				
				
				if(!encontrado)
				{
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetColumnsFacesTableMaintenanceC(tablaRelacionadaObjetivo);
				}
				
					
				
			}
								
			return strTablaClaseRelacionada; 
		}

	public String GetOnChangeJavaScriptComboColumnasTablasClasesRelacionadasC(TableSchema table) {
		String strJavaScriptCode=string.Empty;	
		String strNombre="";
		
		foreach (ColumnSchema column in table.Columns) {
			strNombre = GetNombreColumnaClaseC(column);
			
			strJavaScriptCode+="\r\n\t\t\t\t\telse if(strValueTipoColumna==\""+GetWebNombreTituloColumnFromPropertiesC(column)+"\") {";
			strJavaScriptCode+="\r\n\t\t\t\t\t\tjQuery(\".col_"+strNombre+"\").css({\"border-color\":\"red\"});";
			
			if(column.IsForeignKeyMember) {
				strJavaScriptCode+="\r\n\r\n\t\t\t\t\t\tjQuery('#form"+strSeparadorName+strNombre+"_img').trigger(\"click\" );";
			}
			
			strJavaScriptCode+="\r\n\t\t\t\t\t}";
		}
		
		return strJavaScriptCode;
	}
	
	public String GetOnChangeJavaScriptComboItemsTablasClasesRelacionadasC(TableSchema table,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaConJQueryCode) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			ArrayList arrayListTablasRelacionadas=GetOrdenTablasRelacionadasC(table,tablasRelacionadas);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in arrayListTablasRelacionadas)//tablasRelacionadas.Values)
			{
				strNombreAdicional="";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
				}
				else
				{	
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				if(collectionInfo.CollectionRelationshipType!=RelationshipType.OneToOne) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}	
				} else {
					strNombreAdicional="";
				}
	
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO"))
					{
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo)
				{
					continue;
				}
	
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{	//&&strNombreAdicional.Equals("") SI NO ES VACIO SE PUEDE TRATAR DE MAS DE UNA RELACION FOREIGN KEY HACIA UNA TABLA
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals(""))
					{
						encontrado=true;
					}
				}
	
				if(!encontrado)
				{	//System.Windows.Forms.MessageBox.Show(tablaRelacionadaObjetivo.Name);			
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetOnChangeJavaScriptComboItemTablaClaseRelacionadaC(table,tablaRelacionadaObjetivo,strNombreAdicional,esParaForeignKey,ConFaces,ConRichFaces,blnParaConJQueryCode);
				}
			}
								
			return strTablaClaseRelacionada; 
		}


public string GetOnChangeJavaScriptComboItemTablaClaseRelacionadaC(TableSchema table,TableSchema tablaRelacionadaObjetivo,String strNombreAdicional,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaConJQueryCode)
{
	if(esParaForeignKey) {
		return "";
	}
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
	String strColumnName="";strColumnName+="";
	String strColumnLabel=""+GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo).Replace(GetTituloNombreTableFromPropertiesC(table),"")+""+strNombreAdicional.ToUpper()+strPlural+"";
	String strColumn="";
	String strPrefijoColumna="th";		
	
	if(ConFaces|| ConRichFaces) {
		String strObjectFace=GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces;
		
		if(!ConRichFaces){
			
		} else {
			if(!blnParaConJQueryCode){
			} else {
				/*
				strColumn="\r\n\r\n\r\n\t\t$tipoRelacionReporte=new Reporte();";
				strColumn+="\r\n\t\t$tipoRelacionReporte->setsCodigo('"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"');";
				strColumn+="\r\n\t\t$tipoRelacionReporte->setsDescripcion('"+strColumnLabel+"');";
				strColumn+="\r\n\r\n\t\t$arrTiposRelacionesReportes[]=$tipoRelacionReporte;";
				*/
				
				//strColumn+="\r\n\t\t\t\tthis.registrarSesionPerfilParaPerfilOpciones(idActual);";
				
				strColumn="\r\n\t\t\t\t\t\telse if(strValueTipoRelacion==\""+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"\") {";
				strColumn+="\r\n\t\t\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"JQueryPaginaWebInteraccion.registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"(idActual);";//"+GetNombreClaseObjetoC(table.ToString())+"JQueryPaginaWebInteraccion				
				strColumn+="\r\n\t\t\t\t\t\t}";
			}
					
		}
	}
	
	return strColumn;
}

public String GetReporteComboItemsTablasClasesRelacionadasC(TableSchema table,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaConJQueryCode) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			ArrayList arrayListTablasRelacionadas=GetOrdenTablasRelacionadasC(table,tablasRelacionadas);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in arrayListTablasRelacionadas)//tablasRelacionadas.Values)
			{
				strNombreAdicional="";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
				}
				else
				{	
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				if(collectionInfo.CollectionRelationshipType!=RelationshipType.OneToOne) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}	
				} else {
					strNombreAdicional="";
				}
	
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO"))
					{
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo)
				{
					continue;
				}
	
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{	//&&strNombreAdicional.Equals("") SI NO ES VACIO SE PUEDE TRATAR DE MAS DE UNA RELACION FOREIGN KEY HACIA UNA TABLA
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals(""))
					{
						encontrado=true;
					}
				}
	
				if(!encontrado)
				{	//System.Windows.Forms.MessageBox.Show(tablaRelacionadaObjetivo.Name);			
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetReporteComboItemTablaClaseRelacionadaC(table,tablaRelacionadaObjetivo,strNombreAdicional,esParaForeignKey,ConFaces,ConRichFaces,blnParaConJQueryCode);
				}
			}
								
			return strTablaClaseRelacionada; 
		}


public string GetReporteComboItemTablaClaseRelacionadaC(TableSchema table,TableSchema tablaRelacionadaObjetivo,String strNombreAdicional,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaConJQueryCode)
{
	if(esParaForeignKey) {
		return "";
	}
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
	String strColumnName="";strColumnName+="";
	String strColumnLabel=""+GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo).Replace(GetTituloNombreTableFromPropertiesC(table),"")+""+strNombreAdicional.ToUpper()+strPlural+"";
	String strColumn="";
	String strPrefijoColumna="th";		
	
	if(ConFaces|| ConRichFaces) {
		String strObjectFace=GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces;
		
		if(!ConRichFaces){
			
		} else {
			if(!blnParaConJQueryCode){
			} else {
				//strColumn="\r\n\t\t"+strVariableAppend+".='<"+strPrefijoColumna+" style=\"display:table-cell\"><b><pre>"+strColumnLabel+"</pre></b>";
				//strColumn+="</"+strPrefijoColumna+">';";
				
				strColumn="\r\n\r\n\r\n\t\t$tipoRelacionReporte=new Reporte();";
				strColumn+="\r\n\t\t$tipoRelacionReporte->setsCodigo('"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"');";
				strColumn+="\r\n\t\t$tipoRelacionReporte->setsDescripcion('"+strColumnLabel+"');";
				strColumn+="\r\n\r\n\t\t$arrTiposRelacionesReportes[]=$tipoRelacionReporte;";
			}
					
		}
	}
	
	return strColumn;
}


public String GetNavegacionTituloSoloTablaFacesTablasClasesRelacionadasC(TableSchema table,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaConJQueryCode,String strVariableAppend,bool blnParaController) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			ArrayList arrayListTablasRelacionadas=GetOrdenTablasRelacionadasC(table,tablasRelacionadas);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in arrayListTablasRelacionadas)//tablasRelacionadas.Values)
			{
				strNombreAdicional="";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
				}
				else
				{	
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				if(collectionInfo.CollectionRelationshipType!=RelationshipType.OneToOne) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}	
				} else {
					strNombreAdicional="";
				}
	
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO"))
					{
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo)
				{
					continue;
				}
	
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{	//&&strNombreAdicional.Equals("") SI NO ES VACIO SE PUEDE TRATAR DE MAS DE UNA RELACION FOREIGN KEY HACIA UNA TABLA
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals(""))
					{
						encontrado=true;
					}
				}
	
				if(!encontrado)
				{	//System.Windows.Forms.MessageBox.Show(tablaRelacionadaObjetivo.Name);			
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetTituloColumnsFacesTableMaintenanceC(table,tablaRelacionadaObjetivo,strNombreAdicional,esParaForeignKey,ConFaces,ConRichFaces,blnParaConJQueryCode,strVariableAppend,blnParaController);
				}
			}
								
			return strTablaClaseRelacionada; 
		}
		
public String GetHtmlNavegacionTituloSoloTablaFacesTablasClasesRelacionadasC(TableSchema table,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaConJQueryCode,String strVariableAppend,bool paraDivVertical) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strNombreAdicional="";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
				}
				else
				{	
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				if(collectionInfo.CollectionRelationshipType!=RelationshipType.OneToOne) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}	
				} else {
					strNombreAdicional="";
				}
	
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO"))
					{
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo)
				{
					continue;
				}
	
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{	//&&strNombreAdicional.Equals("") SI NO ES VACIO SE PUEDE TRATAR DE MAS DE UNA RELACION FOREIGN KEY HACIA UNA TABLA
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals(""))
					{
						encontrado=true;
					}
				}
	
				if(!encontrado)
				{	//System.Windows.Forms.MessageBox.Show(tablaRelacionadaObjetivo.Name);			
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetHtmlTituloColumnsFacesTableMaintenanceC(table,tablaRelacionadaObjetivo,strNombreAdicional,esParaForeignKey,ConFaces,ConRichFaces,blnParaConJQueryCode,strVariableAppend,paraDivVertical);
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public /*Hashtable*/ArrayList GetOrdenTablasRelacionadasC(TableSchema table,System.Collections.Hashtable tablasRelacionadas) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadasOrden = new System.Collections.Hashtable();
			ArrayList arrLisTtablasRelacionadasOrden=new ArrayList();
			
			TableSchema tablaRelacionadaObjetivo;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String[] strClases;
			String strNombreAdicional="";
			String strClasesNoRelacionadas="";
			bool blClaseNo=false;
			//CollectionInfo collectionInfo=null;
			
			strClasesNoRelacionadas=GetNombresClasesOrdenNavegacionFromTableFromPropertiesC(table);
			String strKey="";
			String strKeyOrden="";
			Object value=null;
			int count=0;
			
			System.Collections.Hashtable hashtableRelacionadasFinal=new System.Collections.Hashtable();
			
			List<string> listRelacionadas = new List<string>();
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
				listRelacionadas.Add(collectionInfo.PkIdxName);
			}
			
			listRelacionadas.Sort();//(StringComparer.CurrentCulture);
			//listRelacionadas.Reverse();
			
			
			foreach(String strRelacionada in listRelacionadas) {
				//Trace.WriteLine(strRelacionada);
				
				foreach(DictionaryEntry dictionaryEntryRelacionada in tablasRelacionadas) {
					CollectionInfo collectionInfo=(CollectionInfo)dictionaryEntryRelacionada.Value;
					
					if(strRelacionada.Equals(collectionInfo.PkIdxName)) {
						//dictionaryEntryRelacionada.Key
						//CAMBIO DE KEY
						//Trace.WriteLine(collectionInfo.PkIdxName);
						//hashtableRelacionadasFinal.Add(collectionInfo.PkIdxName,dictionaryEntryRelacionada.Value);
						arrLisTtablasRelacionadasOrden.Add(collectionInfo);
						break;
					}
				}
				
				count++;
			}
			
			/*
			if(!strClasesNoRelacionadas.Equals("")) {
				strClases=strClasesNoRelacionadas.Split(',');
					
				blClaseNo=false;
					
				foreach(String strClase in strClases) {
					//foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)	{
					foreach (DictionaryEntry dictionaryEntry in tablasRelacionadas) {
						strKey=dictionaryEntry.Key.ToString();
						value=tablasRelacionadas[strKey];
						collectionInfo=(CollectionInfo)value;
						
						if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
							tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
							tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
						} else {	
							tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
						}
						
						if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))) {
							tablasRelacionadasOrden.Add(strKey,collectionInfo);//count.ToString()+"_"+
							arrLisTtablasRelacionadasOrden.Add(collectionInfo);
							count++;
							//Trace.WriteLine(strClase);
							//blClaseNo=true;
							//break;
						}
					}
				}
				
				bool blnExiste=false;
				
				foreach (DictionaryEntry dictionaryEntry in tablasRelacionadas) {
					blnExiste=false;
					
					strKey=dictionaryEntry.Key.ToString();
					value=tablasRelacionadas[strKey];
					collectionInfo=(CollectionInfo)value;
						
					foreach (DictionaryEntry dictionaryEntryOrden in tablasRelacionadasOrden) {
						strKeyOrden=dictionaryEntryOrden.Key.ToString();
						
						if(strKey.Equals(strKeyOrden)) {
						//if(strKeyOrden.Contains(strKey)) {
							//Trace.WriteLine(strKey);
							blnExiste=true;
						}
					}
										
					if(!blnExiste) {
						//Trace.WriteLine(strKey);
						tablasRelacionadasOrden.Add(strKey,collectionInfo);//count.ToString()+"_"+
						arrLisTtablasRelacionadasOrden.Add(collectionInfo);
						count++;
					}
				}
							
				//if(blClaseNo) {
					//continue;
				//}
			} else {
				//Trace.WriteLine("asdf");
				//return tablasRelacionadas;
				foreach (DictionaryEntry dictionaryEntry in tablasRelacionadas) {	
					strKey=dictionaryEntry.Key.ToString();
					value=tablasRelacionadas[strKey];
					collectionInfo=(CollectionInfo)value;
					
					tablasRelacionadasOrden.Add(strKey,collectionInfo);//count.ToString()+"_"+
					arrLisTtablasRelacionadasOrden.Add(collectionInfo);					
				}
				
				return arrLisTtablasRelacionadasOrden;
			}
			*/
			
			//Trace.WriteLine("------------------");
			
			foreach (DictionaryEntry dictionaryEntry in tablasRelacionadas) { //tablasRelacionadasOrden
				strKey=dictionaryEntry.Key.ToString();
				//Trace.WriteLine(strKey);
			}
			
			//return tablasRelacionadasOrden;			
			
			return arrLisTtablasRelacionadasOrden;
		}
		
public String GetNavegacionTituloTablaFacesTablasClasesRelacionadasC(TableSchema table,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaConJQueryCode,String strVariableAppend,bool esParaDivVertical,bool blnParaController) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			ArrayList arrayListTablasRelacionadas=GetOrdenTablasRelacionadasC(table,tablasRelacionadas);
				
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in arrayListTablasRelacionadas)//tablasRelacionadas.Values)
			{
				strNombreAdicional="";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
				}
				else
				{	
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				
				
				if(collectionInfo.CollectionRelationshipType!=RelationshipType.OneToOne) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						//continue;
						//TOMA EL NOMBRE RESTANTE DE LA COLUMNA MAS DE 1 FOREIGN KEY DE UNA TABLA
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}	
				} else {
					strNombreAdicional="";
				}
				
				
				
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO"))
					{
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo)
				{
					continue;
				}
				
				
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{	//&&strNombreAdicional.Equals("") SI NO ES VACIO SE PUEDE TRATAR DE MAS DE UNA RELACION FOREIGN KEY HACIA UNA TABLA
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals(""))
					{
						encontrado=true;
					}
				}
				
				//Trace.WriteLine(encontrado.ToString());
				//Trace.WriteLine("Tabla: " + tablaRelacionadaObjetivo.Name);
				
				
				if(!encontrado)
				{	//System.Windows.Forms.MessageBox.Show(tablaRelacionadaObjetivo.Name);			
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetColumnsFacesTableMaintenanceC(table,tablaRelacionadaObjetivo,strNombreAdicional,esParaForeignKey,ConFaces,ConRichFaces,blnParaConJQueryCode,strVariableAppend,esParaDivVertical,blnParaController);
				}
			}
								
			return strTablaClaseRelacionada; 
		}
	
	public ArrayList GetTipoClasesRelacionadasTablaClasesRelacionadasC(TableSchema table,bool esParaForeignKey,bool ConFaces,bool ConRichFaces) 
		{
			TipoClaseRelacionada tipoClaseRelacionada=new TipoClaseRelacionada();
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			ArrayList tiposClasesRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strNombreAdicional="";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
				}
				else
				{	
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				
				
				if(collectionInfo.CollectionRelationshipType!=RelationshipType.OneToOne) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						//continue;
						//TOMA EL NOMBRE RESTANTE DE LA COLUMNA MAS DE 1 FOREIGN KEY DE UNA TABLA
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}	
				} else {
					strNombreAdicional="";
				}
				
				
				
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO"))
					{
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo)
				{
					continue;
				}
				
				
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{	//&&strNombreAdicional.Equals("") SI NO ES VACIO SE PUEDE TRATAR DE MAS DE UNA RELACION FOREIGN KEY HACIA UNA TABLA
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals(""))
					{
						encontrado=true;
					}
				}
				
				//Trace.WriteLine(encontrado.ToString());
				//Trace.WriteLine("Tabla: " + tablaRelacionadaObjetivo.Name);
				
				
				if(!encontrado)
				{	//System.Windows.Forms.MessageBox.Show(tablaRelacionadaObjetivo.Name);			
					tipoClaseRelacionada=new TipoClaseRelacionada();
					
					tipoClaseRelacionada.table=table;
					tipoClaseRelacionada.tablaRelacionadaObjetivo=tablaRelacionadaObjetivo;
					tipoClaseRelacionada.strNombreAdicional=strNombreAdicional;
					
					tiposClasesRelacionadasEncontradas.Add(tipoClaseRelacionada);
					
					//strTablaClaseRelacionada+=GetColumnsFacesTableMaintenanceC(table,tablaRelacionadaObjetivo,strNombreAdicional,esParaForeignKey,ConFaces,ConRichFaces,blnParaConJQueryCode);
				}
			}
								
			return tiposClasesRelacionadasEncontradas; 
		}
		
	public String GetWebFuncionesTablasClasesRelacionadasC(TableSchema table,bool ConFaces,bool ConRichFaces,String strTipo,String Empresa,String Package,bool esParaGrupoRelaciones,String strGrupoRelaciones) {
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
				strNombreAdicional="";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
					
				} else {	
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}								
				
				if(collectionInfo.CollectionRelationshipType!=RelationshipType.OneToOne) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						//continue;
						//TOMA EL NOMBRE RESTANTE DE LA COLUMNA MAS DE 1 FOREIGN KEY DE UNA TABLA
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}	
				} else {
					strNombreAdicional="";
				}
				
								
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases) {						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO")) {
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo) {
					continue;
				}				
				
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas) {	//&&strNombreAdicional.Equals("") SI NO ES VACIO SE PUEDE TRATAR DE MAS DE UNA RELACION FOREIGN KEY HACIA UNA TABLA
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals("")) {
						encontrado=true;
					}
				}
				
				//Trace.WriteLine(encontrado.ToString());
				//Trace.WriteLine("Tabla: " + tablaRelacionadaObjetivo.Name);				
				
				if(!encontrado) {	
					//System.Windows.Forms.MessageBox.Show(tablaRelacionadaObjetivo.Name);			
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetWebFuncionesTipoTableC(table,tablaRelacionadaObjetivo,strNombreAdicional,ConFaces,ConRichFaces,strTipo,Empresa,Package,esParaGrupoRelaciones,strGrupoRelaciones);
				}
			}
								
		return strTablaClaseRelacionada; 
	}
	
	public string GetReportePdfHeadersC(TableSchema tableSchema,bool paraConstantesFunciones)
	{
		//ANTES EN GENERAR PDF
		//$header=array(<%=GetReportePdfHeaders(TablaBase)%>);
		
		String strColumnLabels="";
		String strThisController="this->";
		String strFill="";
		bool blnEsPrimero=true;
		
		if(paraConstantesFunciones) {
			strThisController="";
			 strFill="$cellReport->setblnFill($blnFill);";
		}
		
		foreach( ColumnSchema column in tableSchema.Columns) {
			if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strVersionRow)) {
				continue;
			}
			
			if(GetEsReporteParametroFromPropertiesC(column)
				|| GetNoInsertEditColumnFromPropertiesC(column)) {
					
				continue;
			}
			
			if(!blnEsPrimero) {
				//strColumnLabels+=",";
			} else {
				blnEsPrimero=false;
			}
			
			strColumnLabels+="\r\n\r\n\t\tif(Funciones::existeCadenaArrayOrderBy('"+GetWebNombreTituloColumnFromPropertiesC(column)+"',$"+strThisController+"arrOrderBy,$"+strThisController+"bitParaReporteOrderBy)){\r\n\t\t\t$cellReport=new CellReport();";
			strColumnLabels+=/*"\r\n\t\t\t"+*/" $cellReport->inicializarTextWidthHeightLine('"+GetWebNombreTituloColumnFromPropertiesC(column)+"',40,7,1);"+strFill;				
			//strColumnLabels+=/*"\r\n\t\t\t"+*/" $cellReport.setstrText('"+GetWebNombreTituloColumnFromPropertiesC(column)+"');";				
			//strColumnLabels+=/*"\r\n\t\t\t"+*/" $cellReport.setintWidth(40);";
			//strColumnLabels+=/*"\r\n\t\t\t"+*/" $cellReport.setintHeigh(7);";
			//strColumnLabels+=/*"\r\n\t\t\t"+*/" $cellReport.setintLine(1);";		
			strColumnLabels+=/*"\r\n\t\t\t"+*/" $header[]=$cellReport;\r\n\t\t}";
		}
				
		return strColumnLabels;
	}

	public string  GetReportePdfRowsC(TableSchema tableSchema,bool paraConstantesFunciones) {
		String strColumnLabels="";
		String strColumnLabel="";
		bool blnEsPrimero=true;
		
		String strTipo="";
		String strPrefijo="";	
		String strColumna="";	
		String strIfElse="";
		
		//$row=array(<%=GetReportePdfRows(TablaBase)%>);
		
		String strThisController="this->";
		String strTabExtra="\t";
		
		if(paraConstantesFunciones) {
			strThisController="";
			strTabExtra="";
		}
		
		foreach( ColumnSchema column in tableSchema.Columns) {
			if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strVersionRow)) {
				continue;
			}
			
			if(GetEsReporteParametroFromPropertiesC(column)
				|| GetNoInsertEditColumnFromPropertiesC(column)) {
				continue;
			}
			
			//strColumnLabels+="\r\n\t\t\t";
			
			if(!blnEsPrimero) {
				//strColumnLabels+=",";
			} else {
				blnEsPrimero=false;
			}
			
			strTipo=GetTipoColumnaClaseC(column);	
			strPrefijo=GetPrefijoTipoC(column);	
			strColumna=GetNombreColumnaClaseC(column);	
			strIfElse="\r\nif($request->getParameter(\""+GetNameControlHtml(column) +"\"+i.tToString())== null||$request->getParameter(\""+GetNameControlHtml(column) + "\"+i.toString())=='')\r\n{\r\n";
			strIfElse+=strPrefijo+strColumna+"=null;\r\n}\r\nelse\r\n{\r\n";	
			
			if(column.Name.Equals(strId)) {
				strColumnLabel="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+strIdGetSet+"()";
				continue;
			}
			
			if(column.Name.Equals(strVersionRow)) {
				strColumnLabel="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+strVersionRowGetSet+"()";
				continue;
			}
			
			if(!column.IsForeignKeyMember) {
				if(!EsBitColumn(column)) {
					strColumnLabel="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+strPrefijo+ strColumna +"()";		
				
				} else {
					strColumnLabel="Funciones::getBitDescription($"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+strPrefijo+ strColumna +"())";		
				}
				//strColumnLabels+="$data[]=$row;";
			} else {
				strColumnLabel="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+strPrefijo+ strColumna +"Description()";		
				//strColumnLabel="$this->cargarDescripcion"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+strForeignKey+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strPrefijo+ strColumna +"(),$connexion)";		
			}
			
			strColumnLabels+="\r\n\r\n\t\t"+strTabExtra+"if(Funciones::existeCadenaArrayOrderBy('"+GetWebNombreTituloColumnFromPropertiesC(column)+"',$"+strThisController+"arrOrderBy,$"+strThisController+"bitParaReporteOrderBy)){\r\n\t\t\t"+strTabExtra+"$cellReport=new CellReport();";
			strColumnLabels+=/*"\r\n\t\t\t"+*/" $cellReport->inicializarTextWidthHeightLine("+strColumnLabel+",40,6,1);";				
			strColumnLabels+=/*"\r\n\t\t\t"+*/" $row[]=$cellReport;\r\n\t\t"+strTabExtra+"}";
			
		}
		
		return strColumnLabels;
	}

	public string GetWebFuncionesTipoTableC(TableSchema table,TableSchema tablaRelacionadaObjetivo,String strNombreAdicional,bool ConFaces,bool ConRichFaces,String strTipo,String Empresa,String Package,bool esParaGrupoRelaciones,String strGrupoRelaciones) {	
		String strColumn="";
		String strModulo="";
		String strSubModulo="";
		String strEventoObjetivo=".img";
		String strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
		bool permiteRelacion=true;
		String strPanelFin="";
		
		
		if(esParaGrupoRelaciones) {				
			permiteRelacion=permiteRelacionPanelFin(strGrupoRelaciones,tablaRelacionadaObjetivo);
		}
			
		/*
		if(esParaGrupoRelaciones) {
			permiteRelacion=false;
		}
		*/
		
		/*
		strColumn="\r\n\r\n\t\tjQuery(\""+strEventoObjetivo+"relacion"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"\").click(function(){";
		strColumn+="\r\n\r\n\t\t\tvar idActual=jQuery(this).attr(\"idactual"+GetNombreClaseObjetoC(table.ToString())+"\");";				
		strColumn+="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"JQueryPaginaWebInteraccion.registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"(idActual);";//"+GetNombreClaseObjetoC(table.ToString())+"JQueryPaginaWebInteraccion						
		strColumn+="\r\n\t\t});";			
		*/
		
		if(strTipo.Equals("LLAMAR_REGISTRAR_SESSION")) {
			strColumn="\r\n\t\t\t\t$this->registrarSesion"+GetNombreClaseC(table.ToString())+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"($id);";
		
		} else if(strTipo.Equals("LLAMAR_JS_ONLOAD")) {
			//if(permiteRelacion) {
				strColumn="\r\n\t\t\t\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"JQueryPaginaWebInteraccion.onLoadWindow"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"();";
			//}
			
		}  else if(strTipo.Equals("LLAMAR_TITULO_WEB_PAGINA")) {
			
			strModulo=GetModuloPaquetePhpFromTableFromPropertiesC(tablaRelacionadaObjetivo,true);						
			
			if(permiteRelacion) {
				strColumn+="\r\n\t\t\t\t\t\techo('<li class=\"titulotab\"><a href=\"#div"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s\">"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s</a></li>');";
			}
			
			/*
			strColumn="\r\n\r\n\t\t\t\t\techo('<div id=\"div"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s\">');";
			strColumn+="\r\n\t\t\t\t\trequire_once('"+Empresa+"/"+Package+"/"+strModulo+"presentation/view/"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"View.php');";
			strColumn+="\r\n\t\t\t\t\techo('</div>');";
			*/

		} else if(strTipo.Equals("LLAMAR_WEB_PAGINA")) {
			//strColumn="\r\n\t\t\t\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"JQueryPaginaWebInteraccion.onLoad"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"();";
			
			strModulo=GetModuloPaquetePhpFromTableFromPropertiesC(tablaRelacionadaObjetivo,true);
			//strSubModulo=GetSubModuloPaquetePhpFromTableFromPropertiesC(tablaRelacionadaObjetivo,true);
			
			//strColumn="\r\n\r\n\t\t\t\t\techo('<tr><td>');";
			
			if(permiteRelacion) {
				strColumn="\r\n\r\n\t\t\t\t\techo('<div id=\"div"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s\">');";
				strColumn+="\r\n\t\t\t\t\trequire_once('"+Empresa+"/"+Package+"/"+strModulo+"presentation/view/"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"View.php');";
				strColumn+="\r\n\t\t\t\t\techo('</div>');";
			}
			
			//strColumn+="\r\n\t\t\t\t\techo('</td></tr>');";
		}
		
		return strColumn;
	}

	public bool permiteRelacionPanelFin(String strGrupoRelaciones,TableSchema tablaRelacionadaObjetivo) {
		bool permiteRelacion=true;
		String strPanelFin="";
		
			permiteRelacion=false;						
				
			strPanelFin=GetPanelFinNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
				
			//PARA GRUPO RELACIONES POR DEFECTO(general)
			//Trace.WriteLine(strGrupoRelaciones+"-"+strPanelFin);
			
			if(strGrupoRelaciones.Equals("GENERAL") || strGrupoRelaciones.Equals("")) {					
				if(strPanelFin.Equals("") || strPanelFin.Equals(strGrupoRelaciones)) {
					permiteRelacion=true;
				}
						
			} else {
				if (strPanelFin.Equals(strGrupoRelaciones)) {
					//PARA GRUPOS DE RELACIONES NORMAL (NO GENERAL O DEFECTO)
							
					permiteRelacion=true;
				}
			}
		
		
		return permiteRelacion;
	}
	
	public String GetJQueryTablaEventsTablasClasesRelacionadasC(TableSchema table,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool esParaDivVertical,bool esFuncionGeneral) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strNombreAdicional="";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
				}
				else
				{	
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				
				
				if(collectionInfo.CollectionRelationshipType!=RelationshipType.OneToOne) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						//continue;
						//TOMA EL NOMBRE RESTANTE DE LA COLUMNA MAS DE 1 FOREIGN KEY DE UNA TABLA
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}	
				} else {
					strNombreAdicional="";
				}
				
				
				
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO"))
					{
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo)
				{
					continue;
				}
				
				
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{	//&&strNombreAdicional.Equals("") SI NO ES VACIO SE PUEDE TRATAR DE MAS DE UNA RELACION FOREIGN KEY HACIA UNA TABLA
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals(""))
					{
						encontrado=true;
					}
				}
				
				//Trace.WriteLine(encontrado.ToString());
				//Trace.WriteLine("Tabla: " + tablaRelacionadaObjetivo.Name);
				
				
				if(!encontrado)
				{	//System.Windows.Forms.MessageBox.Show(tablaRelacionadaObjetivo.Name);			
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetColumnsJQueryEventTableMaintenanceC(table,tablaRelacionadaObjetivo,strNombreAdicional,esParaForeignKey,ConFaces,ConRichFaces,esParaDivVertical,esFuncionGeneral);
				}
			}
								
		return strTablaClaseRelacionada; 
	}
	
	public String GetJQueryTablaEventsControllerTablasClasesRelacionadasC(TableSchema table,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,bool blnParaController) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strNombreAdicional="";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
				}
				else
				{	
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				
				
				if(collectionInfo.CollectionRelationshipType!=RelationshipType.OneToOne) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						//continue;
						//TOMA EL NOMBRE RESTANTE DE LA COLUMNA MAS DE 1 FOREIGN KEY DE UNA TABLA
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}	
				} else {
					strNombreAdicional="";
				}
				
				
				
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO"))
					{
						blClaseNo=true;
						break;
					}
				}
					
				if(blClaseNo)
				{
					continue;
				}
				
				
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{	//&&strNombreAdicional.Equals("") SI NO ES VACIO SE PUEDE TRATAR DE MAS DE UNA RELACION FOREIGN KEY HACIA UNA TABLA
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals(""))
					{
						encontrado=true;
					}
				}
				
				//Trace.WriteLine(encontrado.ToString());
				//Trace.WriteLine("Tabla: " + tablaRelacionadaObjetivo.Name);
				
				
				if(!encontrado)
				{	//System.Windows.Forms.MessageBox.Show(tablaRelacionadaObjetivo.Name);			
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetColumnsJQueryEventControllerTableMaintenanceC(table,tablaRelacionadaObjetivo,strNombreAdicional,esParaForeignKey,ConFaces,ConRichFaces,blnParaController);
				}
			}
								
			return strTablaClaseRelacionada; 
		}
		
	public string GetControlVariablesC(ColumnSchema column,bool ConFaces,bool ConRichFaces,bool blnIniciaFila,bool blnTerminaFila,int intColumnasFormulario,int intColumnasRellenar) {			
		String strControl="";
		String strTabExtra="";
		String strReadOnly="readonly";
		String strTituloControl="";
		
		String strPrefijoControl="";
		
		if(blnConJQueryCode) {
			strPrefijoControl="form<?php echo($strSuf)?>-";
		}
				
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
				
		} else if(column.Name.Equals(strId)) {			
			if(!ConFaces&&!ConRichFaces) {
				strControl="\r\n\t\t\t\t\t\t<td align=\"left\">"+"<input name=\"hdnIdActual\" type=\"text\" readonly=\"readonly\">"+"\r\n\t\t\t\t\t\t</td>";
			
			} else {
				String strObjectFace="";
				
				if(ConFaces||ConRichFaces) {
					strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
				}
				
				//strControl="\r\n\t\t\t\t\t\t<td>"+"<h:inputHidden id=\"hdnIdActual\"  value=\"<?php echo $"+strObjectFace+"->"+GetNombreClaseObjetoC(column.Table.ToString())+"->"+strId+" ?>\"/>";
				//strControl+="\r\n\t\t\t\t\t\t\t<h:inputHidden id=\"maximumSeverity\" value=\"<?php echo $"+strObjectFace+"->maximumSeverity ?>\"/>";				
				
				
				if(!blnTieneIdentityColumn) {
					strTabExtra="\t\t";	
					strReadOnly="";	
				}
		
				
				
				if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
					//strControl="\r\n\t\t\t\t\t\t"+strTabExtra+"<td align=\"left\"><?php echo $this->Form->input('"+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => '','readonly' => '"+strReadOnly+"'))?>";
					strControl="\r\n\t\t\t\t\t\t"+strTabExtra+"<td align=\"left\"><?php echo $"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Form->input('form"+strSeparadorName+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => '','readonly' => '"+strReadOnly+"','value' => $"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->"+GetNombreClaseObjetoC(column.Table.ToString())+"Actual->getId()))?>";
				} else {
					if(!blnEsTablaUnoAUnoFk) {
						strControl="\r\n\t\t\t\t\t\t"+strTabExtra+"<td align=\"left\"><input id=\""+strPrefijoControl+GetNombreColumnFromProperties(column)+"\" name=\""+strPrefijoControl+GetNombreColumnFromProperties(column)+"\" type=\"text\" class=\"inputnormal\" "+strReadOnly+" size=\"10\">";
					} else {
						strControl="\r\n\t\t\t\t\t\t"+strTabExtra+"<td align=\"left\"><select id=\""+strPrefijoControl+GetNombreColumnFromProperties(column)+"\" name=\""+strPrefijoControl+GetNombreColumnFromProperties(column)+"\" class=\"inputnormal\"></select>";
					}
				}
				
				strControl+="\r\n\t\t\t\t\t\t"+strTabExtra+"</td>";
			}								
		} else {
			if(ConFaces||ConRichFaces) {
				if(column.Name.Equals(strVersionRow)) {
					strTabExtra="\t\t";						
				}
			}
			
			strControl="\r\n\t\t\t\t\t\t"+strTabExtra+"<td align=\"left\">"+GetControlHtml(column,ConFaces,ConRichFaces)+"\r\n\t\t\t\t\t\t"+strTabExtra+"</td>";			
		}		
		
		strTituloControl=GetTituloControlVariablesC(column);	
		String strOcultarColumna="";//"visibility:visible";
		bool blnConOcultarColumna=false;
		String strReturn="";
		String strIniciaFila="";
		String strTerminaFila="";
		String strColumnasRellenar="";
		
		if(blnIniciaFila) {
			strIniciaFila="<tr>";
		}
		
		if(blnTerminaFila) {
			strTerminaFila="</tr>";
		}
		
		if(intColumnasRellenar>0) {
			for(int i=0;i<intColumnasRellenar;i++) {
				strColumnasRellenar+="<td></td><td></td>";
			}
		}
		
		if(!GetConSeguridadColumnFromPropertiesC(column)) {
			if(GetNoInsertEditColumnFromPropertiesC(column)) {
				//strOcultarColumna="visibility:hidden;display:none";
				//blnConOcultarColumna=true;
			}
			
			if(column.Name.Equals(strId) && GetIdNoVisibleColumnFromPropertiesC(column)) {
				if(blnTieneIdentityColumn) {
					strOcultarColumna="visibility:hidden;display:none";
				}
				
				blnConOcultarColumna=true;
			}
			
			if(column.Name.Equals(strVersionRow)) {
				strOcultarColumna="visibility:hidden;display:none";
				blnConOcultarColumna=true;
			}
			
		} else {
			blnConOcultarColumna=true;
			
			String strSufijoVariables=GetNombreClaseC(column.Table.ToString())+ GetNombreColumnaClaseC(column);		
			String strObjectFace="";
			
			if(ConFaces||ConRichFaces) {
				strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
			}
			
			strOcultarColumna="<?php echo $"+strObjectFace+"->strPermisoReadOnlyAuxiliar"+strSufijoVariables+" ?>";
		}
		
		String strExtraAdicional=GetExtraAdicionalCampoFormularioC(column);
				
		if(!blnConOcultarColumna) {
			strReturn="\r\n\t\t\t\t\t"+strIniciaFila+strTituloControl+strControl+"\r\n\t\t\t\t\t"+strColumnasRellenar+strTerminaFila+strExtraAdicional;
		} else {
			//colspan=\""+intColumnasFormulario+"\"
			strReturn="\r\n\t\t\t\t\t"+strIniciaFila+"\r\n\t\t\t\t\t<td colspan=\"2\" style=\""+strOcultarColumna+"\">\r\n\t\t\t\t\t\t<table style=\"width:100%\">\r\n\t\t\t\t\t\t\t<tr style=\""+strOcultarColumna+"\">"+strTituloControl+strControl+"\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</td>"+strColumnasRellenar+"\r\n\t\t\t\t\t"+strTerminaFila+strExtraAdicional;
		}
		
		return strReturn;
	}
	
	public string GetNombreTituloControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName)
	{	
		String strTituloControl="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
		{
				return string.Empty;
		}
		else if(column.Name.Equals(strId))
		{
			if(strIndexName=="")
			{
				strTituloControl="jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+strIndexName+strFinalName+"";
			}
			else
			{
				strTituloControl="jLabel"+strIdGetSet+strIdGetSet+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		}
		else
		{
			
			if(column.Name.Equals(strVersionRow))
			{
				return string.Empty;
			}
			if(strIndexName=="")
			{
				strTituloControl="jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
			}
			else
			{
				strTituloControl="jLabel"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		}
		
		return strTituloControl;
	}
	
	public string GetNombreControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName)
	{			
		String strControl="";
		String strTituloControl="";strTituloControl+="";
		String strPrefijo="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
		{
			return string.Empty;
		}
		else if(column.Name.Equals(strId))
		{
			strControl="jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName;	
			return strControl;
		}
		else
		{
			
			if(column.Name.Equals(strVersionRow))
			{
				return string.Empty;
			}			
			
					
			if(!column.IsForeignKeyMember)
			{
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
				{
					if(column.Size<51)
					{
						strPrefijo="jTextField";
					}
					else if(column.Size<200)
					{
						strPrefijo="jTextArea";
					}
					else
					{
						strPrefijo="jTextArea";
					}
				}
				else if(column.DataType==DbType.Boolean)
				{
					strPrefijo="jCheckBox";
				}
				else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
				{
					strPrefijo="jTextField";
				}
				else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
				{
					strPrefijo="jFormattedTextField";
				}
			}
			else
			{
				strPrefijo="jComboBox";		
			}
			
		
		}
		
		if(strIndexName=="")
		{
			strControl=strPrefijo+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString());
		}
		else
		{
			strControl=strPrefijo+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString());
		}
			
		return strControl;
	}
	
	public string GetTabuladorControlVariablesC(ColumnSchema column)
	{			
		String strControl="";strControl+="";
		String strTituloControl="";strTituloControl+="";
		String strPrefijo="";
		
		String strTabFromProperties=GetNumTabuladorForeignKeyColumnFromPropertiesC(column);
		
		int intTabFromProperties=0;
		
		if(strTabFromProperties!=null && strTabFromProperties!="") {
			intTabFromProperties=int.Parse(strTabFromProperties);
			
			for(int i=0;i<intTabFromProperties;i++) {
				strPrefijo+="\t";
			}
			
			return strPrefijo;
		}
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
		{
			return string.Empty;
		}
		else if(column.Name.Equals(strId))
		{
			return string.Empty;
		}
		else
		{
			
			if(column.Name.Equals(strVersionRow))
			{
				return string.Empty;
			}			
			
					
			if(!column.IsForeignKeyMember)
			{
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
				{
					int intNumeroTabuladores=column.Size/50;
					//Trace.WriteLine(intNumeroTabuladores);
					/*if(column.Size<51) {
						strPrefijo="";
					} else if(column.Size<101) {
						strPrefijo="\t";
					} else if(column.Size<151) {
						strPrefijo="\t\t";
					} else {
						strPrefijo="\t\t\t";
					}
					*/
					intNumeroTabuladores--;
					
					if(intNumeroTabuladores>3) {
						intNumeroTabuladores=3;
					}
					
					//Trace.WriteLine(intNumeroTabuladores);
					
					for(int i=0;i<intNumeroTabuladores;i++) {
						strPrefijo+="\t";
					}
				}
				else if(column.DataType==DbType.Boolean)
				{
					strPrefijo="";
				}
				else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
				{
					strPrefijo="";
				}
				else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
				{
					strPrefijo="";
				}
			}
			else
			{
				strPrefijo="";		
			}
			
		
		}
		
		/*
		if(strIndexName=="") {
			strControl=strPrefijo+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString());
		} else {
			strControl=strPrefijo+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString());
		}
		*/
			
		
		return strPrefijo;
	}
	
	public string GetInicializacionControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName)
	{			
		String strControl="";
		String strTituloControl="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
		{
				return string.Empty;
		}
		else if(column.Name.Equals(strId))
		{
			strTituloControl="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+" = new JLabel();;\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+".setText(\""+strIdGetSet+"\");;\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(100,20));;\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(100,20));;\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(100,20));;\r\n\r\n";


			
			strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JLabel();\r\n";
			strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(100,20));\r\n";
			strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(100,20));\r\n";
			strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(100,20));\r\n\r\n\r\n";

		}
		else
		{
			
			if(column.Name.Equals(strVersionRow))
			{
				return string.Empty;
			}			
			
			
			strTituloControl+="\r\n\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+" = new JLabel();\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+".setText(\""+GetWebNombreTituloColumnFromPropertiesC(column)+"\");;\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(100,20));;\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(100,20));;\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(100,20));;\r\n\r\n";

		
			if(!column.IsForeignKeyMember)
			{
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
				{
					if(column.Size<51)
					{
						strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JTextField();\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(100,20));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(100,20));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(100,20));\r\n\r\n\r\n";

					}
					else if(column.Size<200)
					{
						strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JTextArea();\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(100,20));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(100,20));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(100,20));\r\n\r\n\r\n";

					}
					else
					{
						strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JTextArea();\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(100,20));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(100,20));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(100,20));\r\n\r\n\r\n";

					}
				}
				else if(column.DataType==DbType.Boolean)
				{
					strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JCheckBox();\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(100,20));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(100,20));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(100,20));\r\n\r\n\r\n";

				}
				else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
				{
					strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JTextField();\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(100,20));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(100,20));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(100,20));\r\n\r\n\r\n";

				}
				else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
				{
					strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JFormattedTextField();\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(100,20));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(100,20));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(100,20));\r\n\r\n\r\n";

				}
			}
			else
			{
				strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JComboBox();\r\n";
				strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(100,20));\r\n";
				strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(100,20));\r\n";
				strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(100,20));\r\n\r\n\r\n";
	
			}
			
		
		}
		
		
		
		return strTituloControl+strControl;
	}
	
	public string GetDefinicionControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName)
	{			
		String strControl="";
		String strTituloControl="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
		{
				return string.Empty;
		}
		else if(column.Name.Equals(strId))
		{
			strTituloControl="\r\n\tprotected JLabel "+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
			strControl="\tprotected JLabel "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";														
		}
		else
		{
			
			if(column.Name.Equals(strVersionRow))
			{
				return string.Empty;
			}			
			
			
			strTituloControl="\r\n\tprotected JLabel "+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
			
		
			if(!column.IsForeignKeyMember)
			{
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
				{
					if(column.Size<51)
					{
						strControl="\tprotected JTextField "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
					}
					else if(column.Size<200)
					{
						strControl="\tprotected JTextArea "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
					}
					else
					{
						strControl="\tprotected JTextArea "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
					}
				}
				else if(column.DataType==DbType.Boolean)
				{
					strControl="\tprotected JCheckBox "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
				}
				else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
				{
					strControl="\tprotected JTextField "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
				}
				else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
				{
					strControl="\tprotected JFormattedTextField "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
				}
			}
			else
			{
				strControl="\tprotected JComboBox "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";		
			}
			
		
		}
		
		
		
		return strTituloControl+strControl;
	}
	
	public string GetRichPanelsFkBusquedasTableC(TableSchema TablaBase,ColumnSchema columnSchemaObjetivo) {
	String strPanelFkBusqueda="";
	//bool blnEsPrimero;
	
	foreach(IndexSchema indexSchema in TablaBase.Indexes) {	

		if(!indexSchema.IsPrimaryKey) {
			if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
				continue;
			}
			
			if(indexSchema.IsUnique) {
				continue;
				
			} else {

				if(indexSchema.Name.Contains(strFK)) {
					//TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);											
					//strCombo="\t\t\t\t\t\t<div id=\"div"+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\">\r\n";
					
					//,siempre existe combo para cargar elemento
					if(columnSchemaObjetivo.Name.Equals(indexSchema.MemberColumns[0].Name)) {
						strPanelFkBusqueda+=",div"+GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name);
					}
				}
				
				if(!indexSchema.Name.Contains(strFK)) {
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
						if(memberColumnSchema.Column.IsForeignKeyMember) {
							strPanelFkBusqueda+=",div"+GetNameControlHtmlBusqueda(memberColumnSchema.Column,indexSchema.Name);
						}
					}
				}
			}
		}
	}
	
	return strPanelFkBusqueda;
}

public ArrayList GetCombosNamesFkBusquedasTableC(TableSchema TablaBase,ColumnSchema columnSchemaObjetivo) {
	String strPanelFkBusqueda="";
	ArrayList arrCombosNames=new ArrayList();
	String strComboName="";
	String strNombreEntre=".";
	
	if(blnConJQueryCode) {
		strNombreEntre="-";
	}
	
	foreach(IndexSchema indexSchema in TablaBase.Indexes) {	
		if(!indexSchema.IsPrimaryKey) {
			if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
				continue;
			}			
			if(!indexSchema.IsUnique) {
				if(indexSchema.Name.Contains(strFK)) {
						//TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);											
						//strCombo="\t\t\t\t\t\t<div id=\"div"+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\">\r\n";
						
						//,siempre existe combo para cargar elemento
					if(columnSchemaObjetivo.Name.Equals(indexSchema.MemberColumns[0].Name)) {
						//strPanelFkBusqueda+=",div"+GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name);
						strComboName=indexSchema.Name+strNombreEntre+"cmb"+GetNombreColumnaClaseC(indexSchema.MemberColumns[0]);
						
						arrCombosNames.Add(strComboName);
						
						continue;
					}
				}
				
				if(!indexSchema.Name.Contains(strFK)) {
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
						if(memberColumnSchema.Column.IsForeignKeyMember && columnSchemaObjetivo.Name.Equals(memberColumnSchema.Column.Name)) {
							//strPanelFkBusqueda+=",div"+GetNameControlHtmlBusqueda(memberColumnSchema.Column,indexSchema.Name);
							
							//strComboName=GetNameControlHtmlBusqueda(memberColumnSchema.Column,indexSchema.Name);
							strComboName=indexSchema.Name+strNombreEntre+"cmb"+GetNombreColumnaClaseC(memberColumnSchema.Column);
						
							arrCombosNames.Add(strComboName);
							
							break;
						}
					}
				}
			}
		}
	}
	
	return arrCombosNames;
}

	public string GetSetControlesPanelVariablesSwingC(TableSchema table)
	{	
		String strControles="";
		String strControl="";
		String strTituloControl="";
		String strHorizontalGroup="";strHorizontalGroup+="";
		String strVerticalGroup="";strVerticalGroup+="";
		String strEndVerticalGroup="\r\n)))\r\n";
          	   strEndVerticalGroup+=");";
		
		String strHorizontalLabel="";
		String strVerticalLabel="";
		
		String strHorizontalControl="";
		String strVerticalControl="";
		
		String strHorizontalGroupLabels="\r\njPanelCamposLayout"+GetNombreClaseC(table.ToString())+".setHorizontalGroup(\r\n";
        	   strHorizontalGroupLabels+="\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n";
        	   strHorizontalGroupLabels+="\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
        	   strHorizontalGroupLabels+="\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING, false)\r\n";
                				
		String strHorizontalGroupControles=")\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING, false)";
		
		
		String strVerticalGroupLabels=").addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()";
		
		String strVerticalGroupControles="\r\n)\r\n";
        strVerticalGroupControles+="));\r\n";
        strVerticalGroupControles+="\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".setVerticalGroup(\r\n";
        strVerticalGroupControles+="\t\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING)\r\n";
        strVerticalGroupControles+="\t\t.addGroup(GroupLayout.Alignment.TRAILING, jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
        strVerticalGroupControles+="\t\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING)\r\n";
		strVerticalGroupControles+="\t\t\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
						
		foreach(ColumnSchema column in table.Columns)
		{
			if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
			{
					continue;
			}
			else if(column.Name.Equals(strId))
			{
				strTituloControl="\r\n\t\t\t.addComponent(jLabel"+strIdGetSet+GetNombreClaseC(table.ToString())+strIdGetSet+")\r\n";
				strHorizontalLabel+=strTituloControl;
				strVerticalLabel+=strTituloControl;
				
				strControl="jLabel"+strIdGetSet+GetNombreClaseC(table.ToString())+"";
				
				strHorizontalControl+="\r\n\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
				strVerticalControl+="\r\n\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
			}
			else
			{
				
				if(column.Name.Equals(strVersionRow))
				{
					continue;
				}			
				
				strTituloControl="\t\t\t.addComponent(jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+")\r\n";
				strHorizontalLabel+=strTituloControl;
				strVerticalLabel+=strTituloControl;
				
				if(!column.IsForeignKeyMember)
				{
					if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
					{
						if(column.Size<51)
						{
							strControl="jTextField"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						}
						else if(column.Size<200)
						{
							strControl="jTextArea"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						}
						else
						{
							strControl="jTextArea"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						}
					}
					else if(column.DataType==DbType.Boolean)
					{
						strControl="jCheckBox"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
					}
					else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
					{
						strControl="jTextField"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
					}
					else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
					{
						strControl="jFormattedTextField"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
					}
				}
				else
				{
					strControl="jComboBox"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";		
				}
				
				strHorizontalControl+="\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
				strVerticalControl+="\t\t\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
	
			}
		}
		
		strControles+=strHorizontalGroupLabels;
		strControles+=strHorizontalLabel;
		strControles+=strHorizontalGroupControles;
		strControles+=strHorizontalControl;
		
		
		
		strControles+=strVerticalGroupControles;
		strControles+=strVerticalControl;
		strControles+=strVerticalGroupLabels;
		strControles+=strVerticalLabel;
		
		strControles+=strEndVerticalGroup;
		
		return strControles;
	}
	
	public string GetControlVariablesSwingC(ColumnSchema column)
	{			
		String strControl="";
		String strTituloControl="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
		{
				return string.Empty;
		}
		else if(column.Name.Equals(strId))
		{
			
			strControl="\r\n\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+" = new javax.swing.JLabel();\r\n";
			strControl+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setText(\""+strIdGetSet+"\");\r\n\r\n";
			
			strControl+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(100,20));\r\n";
          	strControl+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(100,20));\r\n";
          	strControl+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(100,20));\r\n\r\n";
         
			strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement."+strId+" ?>\"), jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
			strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
			strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
			strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement != null ?>\"), jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
			strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
		}
		else
		{
			
			if(column.Name.Equals(strVersionRow))
			{
				return string.Empty;
			}			
			
			strControl="\t\t"+GetControlSwingC(column);	
		
		}
		
		
		strTituloControl=GetTituloControlSwingVariablesC(column);
		
		return "\r\n\t\t\t\t\t"+strTituloControl+strControl+"\r\n";
	}
	
	public string GetTituloControlSwingVariablesC(ColumnSchema column)
	{
		
		String strTipo=GetTipoColumnaClaseC(column);	
		String strPrefijo=" "+GetPrefijoTipoC(column);	
		String strColumna=GetWebNombreTituloColumnFromPropertiesC(column);
		String strTituloLabel=string.Empty;
		
		strTituloLabel="\r\n\t\tjLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+" = new javax.swing.JLabel();\r\n";
		strTituloLabel+="\t\tjLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setText(\""+strColumna+"\");\r\n";
		
		strTituloLabel+="\t\tjLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(100,20));\r\n";
        strTituloLabel+="\t\tjLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(100,20));\r\n";
        strTituloLabel+="\t\tjLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(100,20));\r\n";
      
		String strTitleControl="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired) )
		{
				return string.Empty;
		}
		else if(column.Name.Equals(strVersionRow))
		{
			return string.Empty;
		}
		else if(column.Name.Equals(strId))
		{
			strTituloLabel="\r\n\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+" = new javax.swing.JLabel();\r\n";
			strTituloLabel+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+".setText(\""+strCodigoUnico+"\");\r\n";
			
			strTituloLabel+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+".setMinimumSize(new Dimension(100,20));\r\n";
        	strTituloLabel+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+".setMaximumSize(new Dimension(100,20));\r\n";
        	strTituloLabel+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+".setPreferredSize(new Dimension(100,20));\r\n";
      
			return strTituloLabel;
		}
		else
		{
			if(!column.IsForeignKeyMember)
			{
				strTitleControl= strTituloLabel +"\r\n";
			}
			else
			{
				
				strTitleControl= strTituloLabel +"\r\n";
			}
		}	
		return strTitleControl;
	}
	
		public string GetTituloControlVariablesC(ColumnSchema column)
{
	
	String strTipo=GetTipoColumnaClaseC(column);	
	String strTipoRequerido="";
	String strPrefijo=" "+GetPrefijoTipoC(column);	
	String strColumna=GetWebNombreTituloColumnFromPropertiesC(column);
	
	if(!column.AllowDBNull) {
		//NO USAR ESPACIO VACIO, SE CREA NUEVA LINEA AUTO
		strTipoRequerido=".(*)";
	}
	
	String strTitleControl="";
	String strTabExtra="";
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired) )
	{
			return string.Empty;
	}
	else if(column.Name.Equals(strVersionRow))
	{
		strTabExtra="\t\t";	
		
		strColumna+=strTipoRequerido;
		
		return "\r\n\t\t\t\t\t\t"+strTabExtra+"<td class=\"titulocampo\">\r\n\t\t\t\t\t\t"+strTabExtra+"</td>";
	}
	else if(column.Name.Equals(strId))
	{
		if(!blnTieneIdentityColumn) {
			strTabExtra="\t\t";	
		}
				
		strColumna+=strTipoRequerido;
		
		return "\r\n\t\t\t\t\t\t"+strTabExtra+"<td class=\"titulocampo\"><h2>"+strCodigoUnico+"</h2>\r\n\t\t\t\t\t\t"+strTabExtra+"</td>";
	}
	else
	{
		String sStyleDisplay="";
		
		if(GetSinTituloColumnFromPropertiesC(column)) {
			sStyleDisplay=" style=\"display:none;\"";
		}
		
		if(!column.IsForeignKeyMember)
		{
			if(!EsBitColumn(column)) {
				strColumna+=strTipoRequerido;
			}
			
			strTitleControl="\r\n\t\t\t\t\t\t<td class=\"titulocampo\""+sStyleDisplay+"><h2>"+ strColumna +"</h2>\r\n\t\t\t\t\t\t</td>";
		}
		else
		{
			/*
			strColumna= GetNombreColumnaClaseC(column);
			strColumna=strColumna.Replace(strId,"");
			strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
			*/
			strColumna+=strTipoRequerido;
			
			strTitleControl="\r\n\t\t\t\t\t\t<td class=\"titulocampo\""+sStyleDisplay+"><h2>"+ strColumna +"</h2>\r\n\t\t\t\t\t\t</td>";
		}
	}	
	return strTitleControl;
}
		
		#endregion	
			
		#region QuerysComplejos
		
		public const String strPrefijoParametros="PRM_";
		
		public static string GetReadOnlyNombreCompletoColumnaClaseC(ColumnSchema column)
		{
			if(column.Name=="id")
			{
				return "Id";
			}
			else if(column.Name=="isActive")
			{
				return "IsActive";
			}
			else if(column.Name=="isExpired")
			{
				return "IsExpired";
			}
			else if(column.Name=="versionRow")
			{
				return "VersionRow";
			}
			
			string strPrefijoTabla="";
			
			if(!column.Name.Contains(strPrefijoParametros))
			{
				strPrefijoTabla=GetPrefijoTablaC();
			}
			else
			{
				strPrefijoTabla=GetPrefijoTablaParametroC();
			}
			
			string strPrefijo =strPrefijoTabla+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
			
			
			return strPrefijo;
		}

		public static string GetReadOnlyXmlColumnaC(ColumnSchema column,String tablaBase)
		{
		string strNombre="";
		string strGetColumn="";
		string strPrefijoTabla="";
		string strPrefijoTipo="";
		string strNombreColumna="";
		
			strPrefijoTabla=GetPrefijoTablaC();
			strPrefijoTipo=GetPrefijoTipoC(column);
			strNombreColumna=GetNombreColumnaClaseC(column);
			strGetColumn="get"+GetReadOnlyNombreCompletoColumnaClaseC(column)+"()"+GetTipoColumnaToString(column);
		
		
		if(column.Name=="id")
		{
		strNombre="$xml=$xml.\"<item code=\\\"\"+"+"readOnly"+GetNombreClaseObjetoC(tablaBase)+"->"+strGetColumn+"+\"\\\">\\r\n\";\r\n";
		}
	
	
		strNombre+= "$xml=$xml.\"<";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
		strNombre+=">\";\r\n";
		
		strNombre+="		$xml=$xml"+"readOnly"+GetNombreClaseObjetoC(tablaBase)+"->"+strGetColumn+";\r\n";
		
		strNombre+="		$xml=$xml.\"</";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
		strNombre+=">\\r\n\";\r\n";
		
				
		return strNombre;
		}
	
		public static string GetParametroNombreCompletoColumnaClaseC(ColumnSchema column)
		{
			if(column.Name=="id")
			{
				return "Id";
			}
			else if(column.Name=="isActive")
			{
				return "IsActive";
			}
			else if(column.Name=="isExpired")
			{
				return "IsExpired";
			}
			else if(column.Name=="versionRow")
			{
				return "VersionRow";
			}
			
			string strPrefijo =GetPrefijoTablaParametroC()+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
			
			
			return strPrefijo;
		}
		
		public static string GetPrefijoTablaParametroC()
		{
			string strPrefijoTabla=strPrefijoParametros;
			return strPrefijoTabla;
		}
	
		public String GetReadOnlyParameterSelection(ColumnSchema column,bool esUltimo) 
		{
			String strParaBusquedaString=""; 
			
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
			strParaBusquedaString="+\"%\"";
			}
			
			String strParameterSelection=String.Empty;
			strParameterSelection="\r\n\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
			strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralEqual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +",ReadOnly"+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";
			
			if(esUltimo)
			{
			strParameterSelection+="ParameterTypeOperator.NONE);";		
			}
			else
			{
			strParameterSelection+=	"ParameterTypeOperator.AND);";	
			}
			
			strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+");";
		
			return strParameterSelection;
		}
		
		public string GetParametroFuncionQueryClase(ColumnSchema column)
		{		
		String strParamtro=string.Empty;	
		
		strParamtro=GetTipoColumnaClaseC(column)+" "+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
		return strParamtro;
		}

		public int GetTotalParametrosFuncionQueryClase(TableSchema table)
		{		int intTotalParamtros=0;	
		
		foreach(ColumnSchema column in table.Columns)
		{
			if(column.Name.Contains(strPrefijoParametros))
			{
			intTotalParamtros++;
			}
		}
		return intTotalParamtros;
		}

		#endregion
		
		#region JavaScript
	
	public String GetJavaScriptArraysClasesRelacionadasC(TableSchema tableSchema) 
	{
				String strTablaClaseRelacionada="";	
				System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(tableSchema);
				
				
				TableSchema tablaRelacionadaObjetivo;
		
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
				{
					
					
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
					{
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					}	
					else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
					{
						
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
					}
					else
					{
						continue;
					}
					
					if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo))
					{
						continue;
					}
					
					strTablaClaseRelacionada+=",arrData"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s";
				}
				
				return strTablaClaseRelacionada; 
	}

	public  String GetJavascriptColumnaDescripcionComboFromTablaPropertiesC(TableSchema tablaRelacionada)
	{
	
		
	string strPrefijoTabla="";strPrefijoTabla+="";
	string strPrefijoTipo =""; strPrefijoTipo +="";
	string strNombre = "";strNombre += "";
	
	String strColumnaDetalle="id";
	String[] descripciones;
	String[] tipo;
	
	foreach(ColumnSchema columnSchema in tablaRelacionada.Columns)
	{
		
		foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBCOMBO"))
						{
							//if(tipo[1]=="true")
							//{
																
								strColumnaDetalle=GetNombreColumnaClaseJavaScriptC(columnSchema);
							//}
							
							break;
						}
					}
			}
					
		}
	}
				
	return strColumnaDetalle;
	}
	
	public string GetNoStandardColumnsActionParamPKActualC(TableSchema table) {	
	String strColumn="";
	
	foreach(ColumnSchema columnSchema in columnSchemaCollectionPK) {
		strColumn+="\r\n\t\t\t\t\t\t\t<a4j:actionparam name=\""+"parametro"+GetNombreCompletoLowerColumnaClaseC(columnSchema)+"\" value=\"<?php echo $"+GetNombreClaseObjetoC(table.ToString())+"->"+GetNombreCompletoLowerColumnaClaseC(columnSchema)+" ?>\" assignTo=\"<?php echo $"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"->"+GetNombreCompletoLowerColumnaClaseC(columnSchema)+GetNombreClaseC(table.ToString())+"Actual ?>\" />\r\n";
	}
	
	return strColumn;
}

	public  String GetJavascriptColumnaDescripcionComboFromPropertiesC(ColumnSchema column)
	{
	
	TableSchema tablaRelacionada=column.Table;//GetNombreTablaRelacionadaFromColumn(column);
	
	String strNombreTabla=GetNombreClaseRelacionadaFromColumn(column);
	
	foreach(TableSchema tableForeignKey in column.Database.Tables)
	{
		if(tableForeignKey.Name.Equals(strNombreTabla))
		{
			tablaRelacionada=tableForeignKey;
		}
	}
	
	string strPrefijoTabla="";strPrefijoTabla+="";
	string strPrefijoTipo =""; strPrefijoTipo +=""; 
	string strNombre = "";strNombre+= "";
	
	String strColumnaDetalle="id";
	String[] descripciones;
	String[] tipo;
	
	foreach(ColumnSchema columnSchema in tablaRelacionada.Columns)
	{
		if(columnSchema.Name!=strId)
		{
			foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
			{
				if(extendedProperty.Name=="CS_Description")
				{
				descripciones=((String)extendedProperty.Value).Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBCOMBO"))
							{
								//if(tipo[1]=="true")
								//{
																	
									strColumnaDetalle=GetNombreColumnaClaseJavaScriptC(columnSchema);
								//}
								
								break;
							}
						}
				}
		}
					
		}
	}
				
	return strColumnaDetalle;
	}
	
		
	public  string GetNombreColumnaClaseJavaScriptFiltradosArrayToTablaC(String strPrefijo,ColumnSchema column,bool blnConPrefijoCompuesto,TableSchema tableNombreArray)
	{
		//CambiarBooleanValueToControl(
		
		String strValor="";
		String strPrefijoTabla="";
		
		if(strPrefijo!=""&&blnConPrefijoCompuesto)
		{
			strPrefijoTabla=GetNombreClaseC(column.Table.ToString());
		}
		
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strId)
		{
			return "";
		}
		
		if(column.DataType!=DbType.Boolean&&!column.IsForeignKeyMember&&!(column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)&&!(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
		{
			strValor=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+":"+ "arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strPrefijo+GetNombreColumnaClaseJavaScriptC(column);
		}
		else if(column.DataType==DbType.Boolean)
		{
			strValor=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+":"+ "arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strPrefijo+GetNombreColumnaClaseJavaScriptC(column);
			strValor+=",";
			strValor+=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+"Control:"+"funcionGeneral.CambiarBooleanValueToControl(arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strPrefijo+GetNombreColumnaClaseJavaScriptC(column)+",arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strId+")";
		}
		else if(column.IsForeignKeyMember)
		{
			strValor=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+"Descripcion:"+"arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strPrefijo+GetNombreColumnaClaseJavaScriptC(column)+"Descripcion";
			strValor+=",";
			strValor+=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+":"+"arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strPrefijo+GetNombreColumnaClaseJavaScriptC(column);
		}		
		else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
		{
			strValor=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+"Mostrar"+":\"<img src=\\\"mostrarimagen.gif\\\" onClick=\\\""+GetNombreClaseObjetoC(tableNombreArray.ToString())+"FuncionGeneral.Mostrar"+GetNombreClaseC(tableNombreArray.ToString())+GetNombreColumnaClaseC(column)+"(\"+arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i].id+\")\\\" width=\\\"35\\\" height=\\\"35\\\">\"";
			strValor+=",";
			strValor+=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+"Actualizar"+":\"<img src=\\\"actualizarimagen.gif\\\" onClick=\\\""+GetNombreClaseObjetoC(tableNombreArray.ToString())+"FuncionGeneral.Actualizar"+GetNombreClaseC(tableNombreArray.ToString())+GetNombreColumnaClaseC(column)+"(\"+arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i].id+\")\\\" width=\\\"35\\\" height=\\\"35\\\">\"";
		}
		
		return strValor;
	}
	
	public String GetImagenesNavegacionTablasClasesRelacionadasC(TableSchema TablaBase) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			TableSchema tablaRelacionadaObjetivo;
			String strPlural=string.Empty;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}
				else
				{
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{
					if(tableSchema.Equals(tablaRelacionadaObjetivo))
					{
						encontrado=true;
					}
				}
				
				
				if(!encontrado)
				{
					strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=","+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strPlural+":\"<img src=\\\""+GetRelativePathC(TablaBase)+"Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+".gif\\\" onClick=\\\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.Actualizar"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural+"Relacionadas"+"(\"+arrData"+GetNombreClaseC(TablaBase.ToString())+"s[i].id+\")\\\" width=\\\"40\\\" height=\\\"40\\\">\"";
				}	
			}
								
			return strTablaClaseRelacionada; 
		}
		
	public string GetNombreColumnaClaseDefaultJavaScriptFiltradosC(ColumnSchema column)
	{
		String strColumna="";
		
	if(column.Name==strIsActive||column.Name==strIsExpired)
		{
		return "";
		}
		
		if(!column.IsForeignKeyMember)
		{
			if(column.Name==strId)
			{
				strColumna=/*GetNombreColumnaClaseJavaScriptC(column)+*/"id:int"+strIdGetSet+"Nuevo"+GetNombreClaseC(column.Table.ToString());
			}
			else if(column.Name==strVersionRow)
			{
				strColumna=GetNombreColumnaClaseJavaScriptC(column)+":\"1900-01-01 01:01:01.1\"";
			}
			else
			{
			strColumna=GetNombreColumnaClaseJavaScriptC(column)+":\"null\"";
			}
		}
		else
		{
			strColumna=GetNombreColumnaClaseJavaScriptC(column)+":\"null\",";
			strColumna+=GetNombreColumnaClaseJavaScriptC(column)+"Descripcion:\"null\"";
		}
		
		return strColumna;
	}

	public static string GetNombreColumnaClaseJavaScriptC(ColumnSchema column)
	{
		string strPrefijoTabla=String.Empty;
		string strPrefijo=String.Empty;
		string strPrefijoTipo=String.Empty;
		string strNombre= String.Empty;
		
		if(column.Name!=strVersionRow)
		{
			strPrefijoTabla=GetPrefijoTablaC().ToLower();
			strPrefijo=String.Empty;
			strPrefijoTipo=GetPrefijoTipoC(column);
			strNombre= GetNombreColumnaClaseC(column);
		}
		else
		{
			strPrefijoTabla="";//GetPrefijoTablaC().ToLower();
			strPrefijo=String.Empty;
			strPrefijoTipo="";//GetPrefijoTipoC(column);
			strNombre= strVersionRow;//GetNombreColumnaClaseC(column);
		}
	
	strPrefijo=strPrefijoTabla+strPrefijoTipo+strNombre;
	
	return strPrefijo;
	}
	
	public static string GetJavaScritpVariablesFromXmlC(ColumnSchema column,bool reemplazarForeigKey,bool reemplazarBooleanValue)
	{
		string strInicio=GetNombreClaseObjetoC(column.Table.ToString())+".getElementsByTagName(strPrefijo+\"";
		string strFin="\")[0].firstChild.nodeValue;";
		string strFin2="\")[0].firstChild)";
	
		string strNombre="";
		string strGetColumn="";
		string strPrefijoTabla="";
		string strPrefijoTipo="";
		string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+strPrefijoTabla+strPrefijoTipo+strNombreColumna+"()"+GetTipoColumnaToString(column);
	
	
		if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
		{
		return "";
		}
		
		string strPrefijoCorreccion=String.Empty;
		string strPrefijoTipoCorreccion =String.Empty;
		string strNombreCorreccion = String.Empty;
			
		if(column.Name!=strId)
		{
			strPrefijoCorreccion=String.Empty;
			strPrefijoTipoCorreccion =GetPrefijoTipoC(column);
			strNombreCorreccion = GetNombreColumnaClaseC(column);
		}
		else
		{
			strNombreCorreccion = "id";
		}
		
	strPrefijoCorreccion=strPrefijoTipoCorreccion+strNombreCorreccion;
	
		if(column.IsForeignKeyMember)
		{
			strNombre="\r\n\r\n\t\t\t\t\tvar "+ strPrefijoCorreccion+ "='';";
			
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower()+strFin2+"{";
			strNombre+=strPrefijoCorreccion+"="+strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=strFin+"}";
			
			strNombre+="\r\n\r\n\t\t\t\t\tvar "+ strPrefijoCorreccion+"Descripcion"+ "='';";
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower()+strFin2+"{";
			strNombre+= strPrefijoCorreccion+"Descripcion"+"="+ strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();		
			strNombre+=strFin+"}";
		}
		else
		{
			strNombre="\r\n\r\n\t\t\t\t\tvar "+ strPrefijoCorreccion+ "='';";
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower()+strFin2+"{";
			
			strNombre+=strPrefijoCorreccion+"="+ strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=strFin+"}";
		}
	
	return strNombre;
	}
	
	public static string GetNombreColumnaClaseJavaScriptFiltradosC(ColumnSchema column,bool conVersionRow)
{
	String strNombreColumna="";
	
	if(column.DataType==DbType.Binary&&column.Name!=strVersionRow)
	{
		return "";		
	}
	
	if(!conVersionRow)
	{
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
		return "";
		}
	}
	else
	{
		if(column.Name==strIsActive||column.Name==strIsExpired)
		{
		return "";
		}
	}
	
	string strPrefijo=String.Empty;
	string strPrefijoTipo =String.Empty;
	string strNombre = String.Empty;
	string strPrefijoTabla=String.Empty;
		
	if(column.Name!=strId)
	{
		strPrefijoTabla=GetPrefijoTablaC().ToLower();
		strPrefijo=String.Empty;
		strPrefijoTipo =GetPrefijoTipoC(column);
		strNombre = GetNombreColumnaClaseC(column);
	}
	else
	{
		strNombre = strId;
	}
	
	if(column.Name!=strVersionRow) {
		strPrefijo=strPrefijoTabla+strPrefijoTipo+strNombre;
	} else {
		strPrefijo=strVersionRow;
	}
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna=strPrefijo;	
	}
	else
	{
	    strNombreColumna=strPrefijo;
		strNombreColumna+=",";
		strNombreColumna+=strPrefijo+"Descripcion";
	}
	
	return strNombreColumna;
}

public static string GetNombreColumnaClaseJavaScriptFiltradosC(ColumnSchema column)
{
	String strNombreColumna="";
	
	if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
	{
		return "";
	}
	
	string strPrefijo=String.Empty;
	string strPrefijoTipo =String.Empty;
	string strNombre = String.Empty;
	string strPrefijoTabla=String.Empty;
	
	if(column.Name!=strId)
	{
		strPrefijoTabla=GetPrefijoTablaC().ToLower();
		strPrefijo=String.Empty;
		strPrefijoTipo =GetPrefijoTipoC(column);
		strNombre = GetNombreColumnaClaseC(column);
	}
	else
	{
		strNombre = strId;
	}
	
	if(column.Name!=strVersionRow) {
		strPrefijo=strPrefijoTabla+strPrefijoTipo+strNombre;
	} else {
		strPrefijo=strVersionRow;
	}
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna="this." +strPrefijo+"="+strPrefijo;
	}
	else
	{
	    strNombreColumna="this." +strPrefijo+"="+strPrefijo;
		strNombreColumna+=";\r\n\t";
		strNombreColumna+="this." +strPrefijo+"Descripcion"+"="+strPrefijo+"Descripcion";
	}
	return strNombreColumna;
}

public static string GetNombreColumnaClaseJavaScriptFiltradosSoloForeigKeyColumnC(ColumnSchema column)
{
	String strNombreColumna="";
	
		
	string strPrefijo=String.Empty;
	string strPrefijoTipo =String.Empty;
	string strNombre = String.Empty;
		
	
		strPrefijo=String.Empty;
		strPrefijoTipo =GetPrefijoTipoC(column);
		strNombre = GetNombreColumnaClaseC(column);
	
		
	strPrefijo=strPrefijoTipo+strNombre;

	
	
		strNombreColumna=strPrefijo;
	
	
	
	return strNombreColumna;
}

public static string GetNombreColumnaClaseMinusculasJavaScriptNullAVacioC(ColumnSchema column)
{
	String strNombreColumna="";
	
if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
	{
	return "";
	}
	
	string strPrefijo=String.Empty;
	string strPrefijoTipo =String.Empty;
	string strNombre = String.Empty;
		
	if(column.Name!=strId)
	{
		strPrefijo=String.Empty;
		strPrefijoTipo =GetPrefijoTipoC(column);
		strNombre = GetNombreColumnaClaseC(column);
	}
	else
	{
		strNombre = "id";
	}
	
	strPrefijo=strPrefijoTipo+strNombre;
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna="\r\n\t"+strPrefijo+"=funcionGeneral.CambiarNullAVacio(" +strPrefijo+");";
	}
	else
	{
	    strNombreColumna="\r\n\t"+strPrefijo+"=funcionGeneral.CambiarNullAVacio(" +strPrefijo+");";
		strNombreColumna+="\r\n\t"+strPrefijo+"Descripcion=funcionGeneral.CambiarNullAVacio(" +strPrefijo+"Descripcion"+");";
	}
	return strNombreColumna;
}

	public static string GetNombreColumnaClaseMinusculasFiltradosC(ColumnSchema column)
{
	String strNombreColumna="";
	
if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
	{
	return "";
	}
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna=GetNombreColumnaClaseMinusculaC(column)+":" +GetNombreColumnaClaseMinusculaC(column);
	}
	else
	{
	    strNombreColumna=GetNombreColumnaClaseMinusculaC(column)+":" +GetNombreColumnaClaseMinusculaC(column);
		strNombreColumna+=",";
		strNombreColumna+=GetNombreColumnaClaseMinusculaC(column)+"Descripcion:" +GetNombreColumnaClaseMinusculaC(column)+"Descripcion";
	}
	return strNombreColumna;
}

public static string GetNombreColumnaClaseMinusculasFiltradosNullAVacioC(ColumnSchema column)
{
	String strNombreColumna="";
	
if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
	{
	return "";
	}
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna=GetNombreColumnaClaseMinusculaC(column)+"=CambiarNullAVacio(" +GetNombreColumnaClaseMinusculaC(column)+");\r\n";
	}
	else
	{
	    strNombreColumna=GetNombreColumnaClaseMinusculaC(column)+"=CambiarNullAVacio(" +GetNombreColumnaClaseMinusculaC(column)+");\r\n";
		strNombreColumna+=GetNombreColumnaClaseMinusculaC(column)+"Descripcion=CambiarNullAVacio(" +GetNombreColumnaClaseMinusculaC(column)+"Descripcion"+");\r\n";
	}
	return strNombreColumna;
}

	public static string GetNombreColumnaClaseMinusculaFiltradosC(ColumnSchema column,bool conVersionRow)
{
	String strNombreColumna="";
	
	if(column.DataType==DbType.Binary&&column.Name!=strVersionRow)
	{
		return "";		
	}
	
	if(!conVersionRow)
	{
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
		return "";
		}
	}
	else
	{
		if(column.Name==strIsActive||column.Name==strIsExpired)
		{
		return "";
		}
	}
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna=GetNombreColumnaClaseMinusculaC(column);	
	}
	else
	{
	    strNombreColumna=GetNombreColumnaClaseMinusculaC(column);
		strNombreColumna+=",";
		strNombreColumna+=GetNombreColumnaClaseMinusculaC(column)+"Descripcion";
	}
	
	return strNombreColumna;
}

public String GetTipoColumnaCastC(ColumnSchema column) {
	String sTipoCast="";
	
	if(TieneColumnaTipoTexto(column)) {
		sTipoCast="(string)";
		
	} else if(EsIntColumn(column) || EsSmallIntColumn(column) || EsBigIntColumn(column)) {
		sTipoCast="(int)";
		
	} else if(EsDecimalColumn(column)) {
		sTipoCast="(float)";
		
	} else if(EsBitColumn(column)) {
		sTipoCast="(bool)";
	}
	
	return sTipoCast;
}

public static ColumnSchema GetColumnaFromNombreC(String strColumnaNombre,TableSchema tableSchema) {
		ColumnSchema columnSchemaEncontrada=null;
		
		columnSchemaEncontrada=GetColumnaFromNombreC(strColumnaNombre,tableSchema,false);
		
		return columnSchemaEncontrada;
	}
	
	public static ColumnSchema GetColumnaFromNombreC(String strColumnaNombre,TableSchema tableSchema,bool conNombreTablaMSSql) {
		ColumnSchema columnSchemaEncontrada=null;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			//if(GetNombreColumnFromProperties(columnSchema).Equals(strId)) {//Constantes.VERSION_ROW
			if(columnSchema.Name.Equals(strId)) {
				columnSchemaEncontrada=columnSchema;
			}
			
			if(!conNombreTablaMSSql) {
				if(GetNombreColumnFromProperties(columnSchema).Equals(strColumnaNombre)) {
					columnSchemaEncontrada=columnSchema;
					break;
				}
			} else {
				if(columnSchema.Name.Equals(strColumnaNombre)) {
					columnSchemaEncontrada=columnSchema;
					break;
				}
			}
		}
			
		return columnSchemaEncontrada;			
	}
	
public string GetExtraAdicionalCampoFormularioC(ColumnSchema column)
	{
		String strExtraAdicional="";
		
		if(column.Name.Equals("Longitud")) {
			strExtraAdicional="<tr><td>";
			strExtraAdicional+="<span class=\"elementotitulocampo\">AMPLITUD:</span><h:inputText  id=\"txtAmpliacion\" maxlength=\"15\" ></h:inputText></td>";
			strExtraAdicional+="<td><input name=\"btnVerMapa\" type=\"button\" value=\"MAPA\" onclick=\"funcionGeneral.ejecutarGrugeMapasConsola(document.getElementById('frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+":txtLatitud').value,document.getElementById('frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+":txtLongitud').value,document.getElementById('frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+":txtAmpliacion').value,'WIN32')\"/>";
			strExtraAdicional+="</td></tr>";
		}
		
		return strExtraAdicional;
		
	}

	public TableSchema GetTablaFromNombreC(String strTableNombre,TableSchema tableSchema) 
		{
			TableSchema tableSchemaEncontrada=tableSchema;
			
			foreach(TableSchema tableSchemai in tableSchema.Database.Tables)
			{
				if(GetNombreTableFromProperties(tableSchemai).Equals(strTableNombre))
				{
					return tableSchemaEncontrada=tableSchemai;
					//break;
				}
			}
			
			return tableSchemaEncontrada;
		}
	
	public TableSchema GetTablaFromNombreClaseC(String strTableNombreClase,TableSchema tableSchema) 
		{
			TableSchema tableSchemaEncontrada=tableSchema;
			
			foreach(TableSchema tableSchemai in tableSchema.Database.Tables)
			{
				if(GetNombreClaseC(tableSchemai.ToString()).Equals(strTableNombreClase))
				{
					return tableSchemai;
					//break;
				}
			}
			
			return tableSchemaEncontrada;
		}
		
	public String SetDataToCombosBusquedasIndiceTablaC(ColumnSchema column,TableSchema tableSchema) 
	{
			String	strDataToCombos="";		
						
			foreach(IndexSchema indexSchema in tableSchema.Indexes)
			{					
				if(indexSchema.IsUnique)
				{
					continue;
				}
				
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
							{
								if(memberColumnSchema.IsForeignKeyMember)
								{
									if(memberColumnSchema.Name.Equals(column.Name))
									{
									strDataToCombos+="\r\n\r\n\t\tif(jmaki.attributes.get('"+ GetNameControlHtmlBusqueda(memberColumnSchema,indexSchema.Name)+  "')!=undefined)";
									strDataToCombos+=" {";
									strDataToCombos+="\r\n\t\t\tjmaki.attributes.get('"+ GetNameControlHtmlBusqueda(memberColumnSchema,indexSchema.Name)+  "').setValues(this.arrData"+GetNombreClaseRelacionadaFromColumn(memberColumnSchema) +");";
									strDataToCombos+="\r\n\t\t}";
									}
								}
							
							}															
			}								
			return  strDataToCombos;
	}
	
		public String SetDataToCombosBusquedasIndiceSoloFKTablaSeleccionadoC(ColumnSchema column,TableSchema tableSchema) 
	{
			String	strDataToCombos="";		
						
			foreach(IndexSchema indexSchema in tableSchema.Indexes)
			{
				if(!indexSchema.Name.Contains(strFK+"_"))
				{
				continue;
				}
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
							{
								if(memberColumnSchema.IsForeignKeyMember&&indexSchema.MemberColumns.Count.Equals(1))
								{
									if(memberColumnSchema.Name.Equals(column.Name))
									{
									strDataToCombos+="\r\n\t\tif(jmaki.attributes.get('"+ GetNameControlHtmlBusqueda(memberColumnSchema,indexSchema.Name)+  "')!=undefined)\r\n";
									strDataToCombos+="\t\t{";
									strDataToCombos+="\r\n\t\t\tjmaki.attributes.get('"+ GetNameControlHtmlBusqueda(memberColumnSchema,indexSchema.Name)+  "').wrapper.dataProvider.setData(arrData"+GetNombreClaseRelacionadaFromColumn(memberColumnSchema) +");";
									strDataToCombos+="\r\n\t\t\tjmaki.attributes.get('"+ GetNameControlHtmlBusqueda(memberColumnSchema,indexSchema.Name)+  "').wrapper.setValue(Servicios"+GetNombreClaseC(tableSchema.ToString())+"IntIdUnico"+GetNombreClaseRelacionadaFromColumn(memberColumnSchema) +");\r\n";
									strDataToCombos+="\t\t}\r\n";
									}
								}
							
							}															
			}								
			return  strDataToCombos;
	}
	
		public static string GetVariablesFromXmlC(ColumnSchema column,bool reemplazarForeigKey,bool reemplazarBooleanValue)
	{
		string strInicio="item.getElementsByTagName(\"";
		string strFin="\")[0].firstChild.nodeValue;";
		string strFin2="\")[0].firstChild)";
	
	string strNombre="";
	string strGetColumn="";
	string strPrefijoTabla="";
	string strPrefijoTipo="";
	string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+strPrefijoTabla+strPrefijoTipo+strNombreColumna+"()"+GetTipoColumnaToString(column);
	
	
		if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
		{
		return "";
		}
	
		if(column.IsForeignKeyMember)
		{
			strNombre="\r\n\r\n\t\t\t\t\tvar "+ column.Name.Substring(0, column.Name.Length).ToLower()+ "='';";
			
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+strFin2+"{";
			strNombre+=column.Name.Substring(0, column.Name.Length).ToLower()+"="+strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
			strNombre+=strFin+"}";
			
			strNombre+="\r\n\r\n\t\t\t\t\tvar "+ column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+ "='';";
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strFin2+"{";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+"="+ strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";		
			strNombre+=strFin+"}";
		}
		else
		{
			strNombre="\r\n\r\n\t\t\t\t\tvar "+ column.Name.Substring(0, column.Name.Length).ToLower()+ "='';";
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+strFin2+"{";
			
			strNombre+=column.Name.Substring(0, column.Name.Length).ToLower()+"="+ strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
			strNombre+=strFin+"}";
		}
	/*if(reemplazarForeigKey)
	{
		if(column.IsForeignKeyMember)
		{
		strNombre="var "+ column.Name.Substring(0, column.Name.Length).ToLower()+ strInicio;
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";
		strNombre+=strFin;
		}
		else
		{
		strNombre="var "+ column.Name.Substring(0, column.Name.Length).ToLower()+ strInicio;
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
		strNombre+=strFin;
		}
	}*/
	/*else
	{
		strNombre="var "+ column.Name.Substring(0, column.Name.Length).ToLower()+ strInicio;
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
		strNombre+=strFin;
	}*/
	/*
	if(reemplazarBooleanValue)
	{
		if(column.DataType==DbType.Boolean)
		{
		strNombre+="\t\t"+ column.Name.Substring(0, column.Name.Length).ToLower()+"=CambiarBooleanValueToControl("+column.Name.Substring(0, column.Name.Length).ToLower() +",id);\r\n";	
		}	
	}
	*/
	return strNombre;
	}
	
	
	#endregion
		
		#region Licence
		
		public String  GetByDanLicence() 
		{
			String strLicencia="";
			
						
			if(strTipoLicencia.Equals("GPL")) {
			
				strLicencia+=" /*";
				strLicencia+="\r\n* ============================================================================";
				strLicencia+="\r\n* GNU Lesser General Public License";
				strLicencia+="\r\n* ============================================================================";
				strLicencia+="\r\n*";
				strLicencia+="\r\n* BYDAN - Free Java BYDAN library.";
				strLicencia+="\r\n* Copyright (C) 2008 ";
				strLicencia+="\r\n* ";
				strLicencia+="\r\n* This library is free software; you can redistribute it and/or";
				strLicencia+="\r\n* modify it under the terms of the GNU Lesser General Public";
				strLicencia+="\r\n* License as published by the Free Software Foundation; either";
				strLicencia+="\r\n* version 2.1 of the License, or (at your option) any later version.";
				strLicencia+="\r\n* ";
				strLicencia+="\r\n* This library is distributed in the hope that it will be useful,";
				strLicencia+="\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of";
				strLicencia+="\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU";
				strLicencia+="\r\n* Lesser General Public License for more details.";
				strLicencia+="\r\n* ";
				strLicencia+="\r\n* You should have received a copy of the GNU Lesser General Public";
				strLicencia+="\r\n* License along with this library; if not, write to the Free Software";
				strLicencia+="\r\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.";
				strLicencia+="\r\n* ";
				strLicencia+="\r\n* BYDAN Corporation";
				strLicencia+="\r\n*/";
			
			} else if(strTipoLicencia.Equals("APACHE")) {
				strLicencia+=" /*";
				strLicencia+="\r\n* Copyright 2013 BYDAN-Byron Danilo Chavez Parra";

				strLicencia+="\r\n\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");";
				strLicencia+="\r\n* you may not use this file except in compliance with the License.";
				strLicencia+="\r\n* You may obtain a copy of the License at";
				
				strLicencia+="\r\n\r\n* 	http://www.apache.org/licenses/LICENSE-2.0";
				
				strLicencia+="\r\n\r\n* Unless required by applicable law or agreed to in writing, software";
				strLicencia+="\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,";
				strLicencia+="\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.";
				strLicencia+="\r\n* See the License for the specific language governing permissions and";
				strLicencia+="\r\n* limitations under the License.";
				strLicencia+="\r\n*/";
				
			} else if(strTipoLicencia.Equals("ME")) {
				strLicencia+=" /*";				
				strLicencia+="\r\n*AVISO LEGAL";
				strLicencia+="\r\n(C) Copyright";				
				strLicencia+="\r\n*Este programa esta protegido por la ley de derechos de autor.";
				strLicencia+="\r\n*La reproduccion o distribucion ilicita de este programa o de cualquiera de"; 
				strLicencia+="\r\n*sus partes esta penado por la ley con severas sanciones civiles y penales,"; 
				strLicencia+="\r\n*y seran objeto de todas las sanciones legales que correspondan.";
				strLicencia+="\r\n\r\n*Su contenido no puede copiarse para fines comerciales o de otras,";
				strLicencia+="\r\n*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.";
				strLicencia+="\r\nSolo esta permitido colocar hipervinculos al sitio web.";
				strLicencia+="\r\n*/";
			}
			
			return strLicencia;
		}
		#endregion
			
		#region Me Extend Properties
	
	public  String GetPropertyAccionTableFromPropertiesC(MeExtendProperty meExtendProperty,String strProperty)
	{
			
		String[] descripciones;
		String[] tipo;
		String strPropertyValue="";
		
		
			if(meExtendProperty.Value!="")
			{			
				descripciones=meExtendProperty.Value.Split('|');
							
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
								
					if(tipo[0].Equals(strProperty))
					{
						strPropertyValue=tipo[1];
						
						break;
					}
				}
			}	
		
		
		
		
		return strPropertyValue;
	}
	
	public  ArrayList GetPropertyAccionsTableFromPropertiesC(TableSchema tableSchema,String strProperty)
	{
		ArrayList arrAccionPropertyValues=new ArrayList();
		
		ArrayList arrAccionExtendsProperty=new ArrayList();
		
		arrAccionExtendsProperty=GetAccionExtendsPropertyC(tableSchema);
		
		String[] descripciones;
		String[] tipo;
		String strPropertyValue="";
		
		foreach(MeExtendProperty meExtendProperty in arrAccionExtendsProperty)
		{
			if(meExtendProperty.Value!="")
			{			
				descripciones=meExtendProperty.Value.Split('|');
							
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
								
					if(tipo[0].Equals(strProperty))
					{
						strPropertyValue=tipo[1];
						arrAccionPropertyValues.Add(strPropertyValue);
						break;
					}
				}
			}	
		}
		
		
		
		return arrAccionPropertyValues;
	}
	
	public ArrayList GetAccionExtendsPropertyC(TableSchema tableSchema)
	{
		ArrayList arrAccionExtendsProperty=new ArrayList();
		
		arrAccionExtendsProperty=GetExtendsPropertyC(tableSchema,strPrefijoAccionTableExtendProperty);
		
		return arrAccionExtendsProperty;
	}
	
	public ArrayList GetExtendsPropertyC(TableSchema tableSchema,String strTipoExtendProperty)
	{
		ArrayList arrExtendsProperty=new ArrayList();
		
		String strExtend=string.Empty;										 						
		
		MeExtendProperty meExtendProperty=new MeExtendProperty();
		
		foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
		{					
			if(extendedProperty.Name.Contains(strPrefijoMeTableExtendProperty+strTipoExtendProperty))
			{
				meExtendProperty=new MeExtendProperty(extendedProperty.Name,extendedProperty.Value.ToString());
				arrExtendsProperty.Add(meExtendProperty);
			}
		}
		//MeExtendProperty
		return arrExtendsProperty;
	}
	
	#endregion
	
		#region Me Extra Code
		
		public static string GetExtra1Servlet(TableSchema table)
		{
			return ExtraCode.GetExtra1Servlet(table);
		}
		
		public static string GetExtra2ServletComment(TableSchema table)
		{
			return ExtraCode.GetExtra2ServletComment(table);
		}
		
		#endregion
	
		#region DataAccess Functions
		public String GetNombreTablaC(TableSchema TablaBase) 
		{
			String strNombreTabla=string.Empty;
										 			
			strNombreTabla=GetNombreTableFromProperties(TablaBase);
								
			return strNombreTabla; 
		}				
		
		public String GetNombreModuloJsC() {
			String strNombreTabla=string.Empty;
										 			
			strNombreTabla=Module.Replace("/","");
								
			return strNombreTabla; 
		}
		
		public String GetNombreSubModuloJsC() {
			String strNombreTabla=string.Empty;
										 			
			if(blnEsReporte) {
				strNombreTabla="report";
			}
								
			return strNombreTabla; 
		}
		
		public String GetNombreModuloJsC(TableSchema tableSchema) {
			String strNombreTabla=string.Empty;
				
			strNombreTabla=GetModuloPaqueteJavaFromTableFromPropertiesC(tableSchema);
			
			strNombreTabla=strNombreTabla.Replace("/","");
								
			return strNombreTabla; 
		}
		
		public String GetNombreSubModuloJsC(TableSchema tableSchema) {
			String strNombreTabla=string.Empty;
			
			/*
			if(blnEsReporte) {
				strNombreTabla="report";
			}
			*/
								
			return strNombreTabla; 
		}
			
		public string GetParameterNoLastIndexC(TableSchema table)
		{		
			string strNombre =String.Empty; 
			int count=0;	
				
			for (int i = 0; i < table.Columns.Count; i++){ 	
			strNombre=table.Columns[i].Name;
			switch (strNombre)
			{
				case strVersionRow:
				{
					break;
				}
				
				default:
				{
					count++;
					break;
				}
		
			}
				} 
				
			return count.ToString();
		}
		
		public string GetParameterLastIndexC(TableSchema table)
		{		
			string strNombre =String.Empty; 
			int count=0;	
				
			for (int i = 0; i < table.Columns.Count; i++){ 	
		
					count++;
					
		
				} 
				
			return count.ToString();
		}

		public static string GetNombreCampoTablaC(ColumnSchema column,bool esParaLabel) {
			string strPrefijo = "";
			
			strPrefijo=GetNombreCampoTablaC(column,false,esParaLabel);
			
			return strPrefijo;
		}
		
		public static string GetNombreCampoTablaC(ColumnSchema column) {
			string strPrefijo = "";
			
			strPrefijo=GetNombreCampoTablaC(column,false,false);
			
			return strPrefijo;
		}
		
		public static string GetNombreCampoTablaC(ColumnSchema column,bool esCampoAuxiliar,bool esParaLabel) {
			string strPrefijo = "";//"\r\n\tpublic static function getColumnName"+column.Name+"()";
			string strPrefijoLabel = "";
			
			if(esParaLabel) {
				strPrefijoLabel = "LABEL_";
			}
			
			if(blnEsColumnaConNombrePrefijoTipo || esCampoAuxiliar) {
				//strPrefijo = "\r\n\tpublic static function getColumnName"+column.Name+"()";
				strPrefijo = "public static $"+strPrefijoLabel+"COLUMNNAME_"+column.Name.ToUpper()+"=";
			} else {
				//strPrefijo = "\r\n\tpublic static function "+GetNombreColumnFromProperties(column)+"()";
				strPrefijo = "public static $"+strPrefijoLabel+column.Name.ToUpper()/*GetNombreColumnFromProperties(column).ToUpper()*/+"=";
			}
			
			//strPrefijo += " {\r\n\t\treturn '"+ GetNombreColumnFromProperties(column)/*column.Name*/+"';\r\n\t}";
			
			if(!esParaLabel) {
				strPrefijo += "'"+ GetNombreColumnFromProperties(column)/*column.Name*/+"';";
			} else {
				strPrefijo += "'"+ GetWebNombreTituloColumnFromPropertiesC(column)/*column.Name*/+"';";
			}
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					strPrefijo=String.Empty;
					break;
				}	
				case strIsExpired:
				{
					strPrefijo=String.Empty;
					break;
				}	
				case strIsActive:
				{
					strPrefijo=String.Empty;
					break;
				}	
				case strId:
				{
					strPrefijo=String.Empty;
					break;
				}
			}
			
			return strPrefijo;
		}
		
		public static string GetNombreCampoTablaNativeUpperConstantC(ColumnSchema column)
		{
			//ANTES DE JPA
			/*
			string strPrefijo = "\r\n\tpublic static String getColumnName"+column.Name+"()";
			strPrefijo += " {\r\n\t\treturn \""+ column.Name+"\";\r\n\t}";
			*/
			
			
			string strPrefijo=String.Empty;
			string strPrefijoTabla=GetPrefijoTablaC().ToLower();
			string strPrefijoTipo =GetPrefijoTipoC(column);
		
			strPrefijo=GetNombreColumnFromProperties(column);//strPrefijoTabla+strPrefijoTipo;
			
			string strNombre = GetNombreColumnaClaseC(column);
			//strPrefijo+=strNombre;
			
			string strFunction="public static $"+column.Name.ToUpper()+"";
			strFunction += "= '"+ strPrefijo+"';";
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					//strPrefijo=String.Empty;
					strFunction=strVersionRow;
					break;
				}	
				case strIsExpired:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsExpired;
					break;
				}	
				case strIsActive:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsActive;
					break;
				}	
				case strId:
				{
					//strPrefijo=String.Empty;
					strFunction=strId;
					break;
				}
			}
			
			//return strFunction;
			return strFunction;
		}
		
		public static string GetLabelCampoTablaC(ColumnSchema column)
		{
			//ANTES DE JPA
			/*
			string strPrefijo = "\r\n\tpublic static String getColumnName"+column.Name+"()";
			strPrefijo += " {\r\n\t\treturn \""+ column.Name+"\";\r\n\t}";
			*/
			
			
			//string strPrefijo=String.Empty;
			//string strPrefijoTabla=GetPrefijoTablaC().ToLower();
			//string strPrefijoTipo =GetPrefijoTipoC(column);
		
			//strPrefijo=strPrefijoTabla+strPrefijoTipo;
			
			//string strNombre = GetNombreColumnaClaseC(column);
			//strPrefijo+=strNombre;
			string strPrefijo=GetWebNombreTituloColumnFromPropertiesC(column);
			
			string strFunction= "\r\n\tpublic static function getColumnLabel"+column.Name+"()";
			strFunction += " {\r\n\t\treturn '"+ strPrefijo+"';\r\n\t}";
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					//strPrefijo=String.Empty;
					strFunction=strVersionRow;
					break;
				}	
				case strIsExpired:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsExpired;
					break;
				}	
				case strIsActive:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsActive;
					break;
				}	
				case strId:
				{
					//strPrefijo=String.Empty;
					strFunction=strId;
					break;
				}
			}
			
			//return strFunction;
			return strFunction;
		}
		
		//YA NO SE USA
		public string GetSqlParameterInsertC(ColumnSchema column)
		{
			
			String param=GetNombreColumnFromProperties(column);
			
			
			
			param+="="+GetTipoParametroStatementColumnaClaseC(column);
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					param=GetNombreColumnFromProperties(column);
					param+="=CURRENT_TIMESTAMP";
					break;
				}	
				/*case "isActive":
				{
					param+="=true";
					break;
				}	
				case "isExpired":
				{
					param+="=false";
					break;
				}	
				*/
				case strId:
				{
					if(!blnEsTablaUnoAUnoFk) {
						param="";
					} else {
						param+=",";
					}
					break;
				}
				
			}
			
			return param;
		}
		
		public string GetSqlParameterValuesInsertC(ColumnSchema column)
		{
			
			String param="";/*GetNombreColumnFromProperties(column);*/
			
			
			
			param+=/*"="+*/GetTipoParametroStatementColumnaClaseC(column);
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					param="";//GetNombreColumnFromProperties(column);
					param+="CURRENT_TIMESTAMP";//=
					break;
				}	
				/*case "isActive":
				{
					param+="=true";
					break;
				}	
				case "isExpired":
				{
					param+="=false";
					break;
				}	
				*/
				case strId:
				{					
					//IMPLICITO
					//if(!blnEsTablaUnoAUnoFk) {
					if(blnTieneIdentityColumn) {
						param="";
					} else {
						param+=",";
					}
					break;
				}
				
			}
			
			return param;
		}
		
		public string GetSqlParameterColumnNameInsertC(ColumnSchema column)
		{
			
			String param=GetNombreColumnFromProperties(column);
			
			
			//NYDAN-DISABLED
			//param+="="+GetTipoParametroStatementColumnaClaseC(column);
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					param=GetNombreColumnFromProperties(column);
					//NYDAN-DISABLED
					//param+="=CURRENT_TIMESTAMP";
					break;
				}	
				/*case "isActive":
				{
					param+="=true";
					break;
				}	
				case "isExpired":
				{
					param+="=false";
					break;
				}	
				*/
				case strId:
				{
					//IMPLICITO
					//if(!blnEsTablaUnoAUnoFk) {
					
					if(blnTieneIdentityColumn) {
						param="";
					} else {
						param+=",";
					}
					break;
				}
				
			}
			
			return param;
		}
		
		public string GetSqlParameterParametroStatementInsertC(ColumnSchema column)
		{
			
			String param=GetTipoParametroStatementColumnaClaseC(column);
			
			
			/*
			param+="=?";
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					param=GetNombreColumnFromProperties(column);
					param+="=CURRENT_TIMESTAMP";
					break;
				}	
				case strId:
				{
					param="";
					break;
				}
				
			}
			*/
			
			return param;
		}
		
		public string GetSqlStoreProcedureParameterInsertC(ColumnSchema column)
		{
			
			String param="";//GetNombreColumnFromProperties(column);	
			
			param+="?";
			
			switch (column.Name)
			{
				/*
				case strVersionRow:
				{
					param="CURRENT_TIMESTAMP";GetNombreColumnFromProperties(column);
					//param+="=CURRENT_TIMESTAMP";
					break;
				}
				*/
				/*case "isActive":
				{
					param+="=true";
					break;
				}	
				case "isExpired":
				{
					param+="=false";
					break;
				}	
				*/
				case strId:case strVersionRow:
				{
					param="";
					break;
				}
				
			}
			
			return param;
		}
		
		public string GetSqlStoreProcedureParameterUpdateC(ColumnSchema column)
		{
			
			String param="";// GetNombreColumnFromProperties(column);
			
			param+="?";
			
			switch (column.Name)
			{
				/*
				case strVersionRow:
				{
					param="CURRENT_TIMESTAMP";// GetNombreColumnFromProperties(column);
					//param+="=CURRENT_TIMESTAMP";
					break;
				}	
				*/
				case strId:case strVersionRow:
				{
					param=String.Empty;
					break;
				}
			}
			
			return param;
		}
		
		public string GetSqlParameterUpdateC(ColumnSchema column)
		{
			
			String param= GetNombreColumnFromProperties(column);
			
			param+="="+GetTipoParametroStatementColumnaClaseC(column);
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					param= GetNombreColumnFromProperties(column);
					param+="=CURRENT_TIMESTAMP";
					break;
				}	
				case strId:
				{
					param=String.Empty;
					break;
				}
			}
			
			return param;
		}
		
		public string GetSqlParameterSelectC(ColumnSchema column,TableSchema TablaBase,String Schema)
		{
			
			String param= "'.Constantes::$STRPREFIJOSCHEMA."+/*GetNombreClaseC(TablaBase.ToString())+"DataAccess*/"self::$SCHEMA.'.'."+/*GetNombreClaseC(TablaBase.ToString())+"DataAccess*/"self::$TABLENAME"+".'."+GetNombreColumnFromProperties(column);
			
			if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired|| column.Name==strVersionRow)
			{
			param="'.Constantes::$STRPREFIJOSCHEMA."+/*GetNombreClaseC(TablaBase.ToString())+"DataAccess*/"self::$SCHEMA.'.'."+/*GetNombreClaseC(TablaBase.ToString())+"DataAccess*/"self::$TABLENAME"+".'."+GetNombreColumnFromProperties(column);
			}
			
			return param;
		}
		#endregion
		
		#region Data Type
		
		public Boolean EsDecimalColumn(ColumnSchema columnSchema) 
		{
			Boolean isDecimal=false;
			
			if(columnSchema.DataType==DbType.Decimal) {
				 isDecimal=true;
			}
			
			return isDecimal;
		}
		
		public Boolean EsBigIntColumn(ColumnSchema columnSchema) 
		{
			Boolean isBigInt=false;
			
			if(columnSchema.DataType==DbType.Int64) {
				 isBigInt=true;
			}
			
			return isBigInt;
		}
		
		public Boolean EsIntColumn(ColumnSchema columnSchema) 
		{
			Boolean isInt=false;
			
			if(columnSchema.DataType==DbType.Int32) {
				 isInt=true;
			}
			
			return isInt;
		}
	
		public Boolean EsSmallIntColumn(ColumnSchema columnSchema) 
		{
			Boolean isSmallInt=false;
			
			if(columnSchema.DataType==DbType.Int16) {
				 isSmallInt=true;
			}
			
			return isSmallInt;
		}
		
		public Boolean EsCharColumn(ColumnSchema columnSchema) 
		{
			Boolean isChar=false;
			
			if(columnSchema.DataType==DbType.AnsiStringFixedLength) {
				 isChar=true;
			}
			
			return isChar;
		}
		
		public Boolean EsVarCharColumn(ColumnSchema columnSchema) 
		{
			Boolean isVarChar=false;
			
			if(columnSchema.DataType==DbType.AnsiString) {
				 isVarChar=true;
			}
			
			return isVarChar;
		}
		
		public Boolean EsDateTimeColumn(ColumnSchema columnSchema) 
		{
			Boolean isDateTime=false;
			
			if(columnSchema.DataType==DbType.DateTime) {
				if(GetTipoColumnaFromColumn(columnSchema).Equals("Timestamp")) {
					isDateTime=true;
				}
				/*
				if(GetTipoColumnaFromColumn(columnSchema).Equals("")) {
					isDateTime=true;
				} else {
					if(GetTipoColumnaFromColumn(columnSchema).Equals("Timestamp")) {
						isDateTime=true;
					}
				}
				*/ 
			}
			
			return isDateTime;
		}
		
		public Boolean EsDateColumn(ColumnSchema columnSchema) 
		{
			Boolean isDate=false;
			
			if(columnSchema.DataType==DbType.DateTime) {	
				if(GetTipoColumnaFromColumn(columnSchema).Equals("")) {
					isDate=true;
				} else {
					if(GetTipoColumnaFromColumn(columnSchema).Equals("Date")) {
						isDate=true;
					}
				}			
			}
			
			return isDate;
		}
		
		public Boolean TieneDateColumnC(TableSchema TablaBase) 
		{
			Boolean isDate=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {
				if(columnSchema.DataType==DbType.DateTime) {	
					if(GetTipoColumnaFromColumn(columnSchema).Equals("")) {
						isDate=true;
						break;
					} else {
						if(GetTipoColumnaFromColumn(columnSchema).Equals("Date")) {
							isDate=true;
							break;
						}
					}			
				}
			}
			
			return isDate;
		}
		
		public Boolean TieneDateTimeColumnC(TableSchema TablaBase) 
		{
			Boolean isDate=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {
				if(columnSchema.DataType==DbType.DateTime) {	
					if(EsDateTimeColumn(columnSchema)) {
						isDate=true;
						break;
					}		
				}
			}
			
			return isDate;
		}
		
		public Boolean TieneTimeColumnC(TableSchema TablaBase) 
		{
			Boolean isDate=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {
				if(columnSchema.DataType==DbType.DateTime) {	
					if(EsTimeColumn(columnSchema)) {
						isDate=true;
						break;
					}		
				}
			}
			
			return isDate;
		}
		
		public Boolean EsTimeColumn(ColumnSchema columnSchema) 
		{
			Boolean isTime=false;
			
			if(columnSchema.DataType==DbType.DateTime) {			
				if(GetTipoColumnaFromColumn(columnSchema).Equals("Time")) {
					isTime=true;
				}
			}
			
			return isTime;
		}
		
		public Boolean EsBitColumn(ColumnSchema columnSchema) 
		{
			Boolean isBit=false;
			
			if(columnSchema.DataType==DbType.Boolean) {
				 isBit=true;
			}
			
			return isBit;
		}
		//SE APLICA PARA VERSIONROW,IMAGE Y BINARY PROPIAMENTE DICHO O CAMPO DE ARCHIVO CUALQUIERA
		public Boolean EsBinaryColumn(ColumnSchema columnSchema) 
		{
			Boolean isBinary=false;
			
			if(columnSchema.DataType==DbType.Binary) {
				 isBinary=true;
			}
			
			return isBinary;
		}
		
		//SE APLICA PARA IMAGENES O ARCHIVOS CUALQUIERA
		public Boolean EsImagenArchivoColumn(ColumnSchema columnSchema) 
		{
			Boolean isBinary=false;
			Boolean isImage=false;
			
			isBinary=EsBinaryColumn(columnSchema);
			
			if(columnSchema.NativeType.Equals("image")) {
				 isImage=true;
			}
			
			return isBinary&&isImage;
		}
		
		//TIPOS QUE NO DEBERIAN ESTAR
		
		public Boolean EsTextColumn(ColumnSchema columnSchema) 
		{
			Boolean isText=false;
			
			if(columnSchema.DataType==DbType.AnsiString&&columnSchema.Size==16) {
				 isText=true;
			}
			
			return isText;
		}
		
		public Boolean EsStringNVarCharColumn(ColumnSchema columnSchema) 
		{
			Boolean isStringNVarChar=false;
			
			if(columnSchema.DataType==DbType.String) {
				 isStringNVarChar=true;
			}
			
			return isStringNVarChar;
		}
		
		public Boolean EsPathImagenColumn(ColumnSchema columnSchema) 
		{
			Boolean isPathImagen=false;
			String strPathImagen="PathImagen";
			
			if(columnSchema.Name.Contains(strPathImagen)) {
				 isPathImagen=true;
			}
			
			return isPathImagen;
		}
		
		public Boolean EsPathImagenDocumentoColumn(ColumnSchema columnSchema) 
		{
			Boolean isPathImagenDocumento=false;
			String strPathImagen="PathImagen";
			String strPathDocumento="PathDocumento";
			
			if(columnSchema.Name.Contains(strPathImagen)||columnSchema.Name.Contains(strPathDocumento)) {
				 isPathImagenDocumento=true;
			}
			
			return isPathImagenDocumento;
		}
		
		public Boolean EsPathArchivoColumn(ColumnSchema columnSchema) 
		{
			Boolean isPathArchivo=false;
			String strPathArchivo="PathArchivo";
			
			if(columnSchema.Name.Contains(strPathArchivo)) {
				 isPathArchivo=true;
			}
			
			return isPathArchivo;
		}
		
		public Boolean EsAutoAuditoriaColumnC(ColumnSchema columnSchema) 
		{
			Boolean isAutoAuditoria=false;
			String strPrefijoUsuario="Aux";
			
			if(columnSchema.Name.Equals(strId+strPrefijoUsuario+"Usuario")
			||columnSchema.Name.Equals("InsertFechaHora")
			||columnSchema.Name.Equals("InsertProceso")
			||columnSchema.Name.Equals(strId+strPrefijoUsuario+"UsuarioUpdate")
			||columnSchema.Name.Equals("UpdateFechaHora")
			||columnSchema.Name.Equals("UpdateProceso")
			) {
				isAutoAuditoria=true;
				return isAutoAuditoria;
			} 
				
			return isAutoAuditoria;
		}		
		#endregion
		
		#region Cake
		
		public string GetCakeModelControllerNameC(String strName)
{
	
	String strNameReturn="";
	
	strName=strName.Replace("dbo.","");
	
	//strNameReturn=strName.ToLower();
	int i=1;
	
	foreach(char c in strName.ToCharArray()) {
		
		if(Char.IsUpper(c)) {
			if(!i.Equals(1)) {
				strNameReturn+="_";
			}
		}
		
		strNameReturn+=c.ToString().ToLower();
		
		i++;
	}
	
	
	return strNameReturn;
}

		public  String CallFuncionesArrayForeignKeysC(TableSchema TablaBase)
{
	String sVariablesArray="";
	
	String strBusquedaFKComment="";
	
	TableSchema tableRelacionada=null;
	
		foreach(ColumnSchema column in TablaBase.Columns)
		{
			if(column.IsForeignKeyMember)
			{
				tableRelacionada=GetNombreTablaRelacionadaFromColumn(column);	
				
				strBusquedaFKComment="\r\n\t\t";
				sVariablesArray+=strBusquedaFKComment+"$this->cargarCombos"+GetNombreClaseC(tableRelacionada.ToString()) +"s"+strForeignKey+"();";			
				
			}	
		}
	
			
	return sVariablesArray;
}

public  string ConstructorVariablesArrayForeignKeysC(TableSchema tableSchema,bool paraConstructor,bool conNinguno,bool paraLogic)
{
	String strVariablesArray="";
	String strThis="this->";
	String strParametroLogic="";
	
	if(paraLogic) {
		strThis="";
		
		strParametroLogic=",$"+GetNombreClaseObjetoC(tableSchema.ToString())+strForeignKey+",$"+GetNombreClaseObjetoC(tableSchema.ToString())+strPrefijoJSFSessionFaces+",$parametroGeneralUsuarioActual,$moduloActual,$arrDatoGeneral,$arrDatoGeneralNo";
	}
	
	
	String strQuery="$"+strThis+"strRecargarFkQuery";
	String strTab="";
	
	if(conNinguno) {
		strQuery="' where id=-1 '";
		strTab="\t";
	}
	
	String strCommentDepend="";
	
	
	
	foreach(ColumnSchema column in tableSchema.Columns) {
		if(column.IsForeignKeyMember) {
			strCommentDepend="";
			
			if(paraConstructor && !GetConEventDependColumnFromPropertiesC(column).Equals("")) {
				strCommentDepend="//";
			}
	
			if(!conNinguno) {
				strVariablesArray+="\r\n\r\n\t\t\tif($"+strThis+"strRecargarFkTipos=='TODOS' || Funciones::existeCadenaSplit('"+GetNombreColumnFromProperties(column)+"',$"+strThis+"strRecargarFkTipos,',')) {";
			} else {
				strVariablesArray+="\r\n\r\n\t\t\t\tif($"+strThis+"strRecargarFkTiposNinguno!='NINGUNO' && Funciones::existeCadenaSplit('"+GetNombreColumnFromProperties(column)+"',$"+strThis+"strRecargarFkTiposNinguno,',')) {";
			}
			
			strVariablesArray+="\r\n\t\t\t\t"+strTab+strCommentDepend+"$this->cargarCombos"+GetNombreCompletoClaseRelacionadaFromColumn(column) +"s"+strForeignKey+"($this->connexion,"+strQuery+strParametroLogic+");";
			strVariablesArray+="\r\n\t\t\t"+strTab+"}";
			
		}	
	}
	return strVariablesArray;
}

public  String GetFuncionesCargarCombosFuncionestrForeignKeysC(TableSchema TablaBase,bool paraLogic)
{
	String sVariablesArray="";
	String strComentarioParaEjb="";strComentarioParaEjb+="";
	String strParametrosLogic="";
	String strThisController="this->";
	String strThisReturnController="this";
	
	String sNombrePakage="";sNombrePakage+="";
	TableSchema tableSchema=null;
	//String strPrefijoJSFSessionFaces="";
	String strTypeNewCollection="";strTypeNewCollection+="";
	
	bool blnVerificarDeshabilitarFk=false;
	String strVerificarDeshabilitarFk="";strVerificarDeshabilitarFk+="";
	bool blnNoLoadFk=false;
	String strComentarioNoLoadFk="";
	
	
	if(paraLogic) {
		strParametrosLogic=",$"+GetNombreClaseObjetoC(TablaBase.ToString())+strForeignKey+",$"+GetNombreClaseObjetoC(TablaBase.ToString()) +strPrefijoJSFSessionFaces+",$parametroGeneralUsuarioActual,$moduloActual,$arrDatoGeneral,$arrDatoGeneralNo";	
		strThisReturnController=GetNombreClaseObjetoC(TablaBase.ToString())+strForeignKey;
		strThisController="";
	}
	
		foreach(ColumnSchema column in TablaBase.Columns)
		{
			if(column.IsForeignKeyMember)
			{
				strComentarioNoLoadFk="";
				blnNoLoadFk=false;
				
				tableSchema=GetNombreTablaRelacionadaFromColumn(column);
				
				//DESHABILITAR VER INFO EN PARTE MAS SUPERIOR
				//blnNoLoadFk=GetConNoLoadForeignKeyColumnFromPropertiesC(column);
				
				if(GetConNoLoadForeignKeyColumnFromPropertiesC(column) 
						|| GetConNoLoadForeignKeyTableFromPropertiesC(tableSchema)) {
					
					blnNoLoadFk=true;
				}
				
				
				if(blnNoLoadFk) {
					strComentarioNoLoadFk="//";	
				}
				
				
				sVariablesArray+="\r\n\tpublic function cargarCombos"+GetNombreCompletoClaseRelacionadaFromColumn(column)/*GetNombreClaseC(tableSchema.ToString()) */+"s"+strForeignKey+"($connexion=null,$strRecargarFkQuery=''"+strParametrosLogic+")";
				sVariablesArray+="{\r\n";
				
				sVariablesArray+="\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic= new "+GetNombreClaseC(tableSchema.ToString()) +"Logic();\r\n";
				sVariablesArray+="\t\t$pagination= new Pagination();\r\n";
				sVariablesArray+="\t\t$"+strThisReturnController+"->"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()/*GetNombreClaseObjetoC(tableSchema.ToString())*/ +"s"+strForeignKey+"=array();\r\n";
				sVariablesArray+="\r\n\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->setConnexion($connexion);\r\n";
				sVariablesArray+="\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->get"+GetNombreClaseC(tableSchema.ToString()) +"DataAccess()->setIsForForeingKeyData(true);\r\n";								
				sVariablesArray+="\t\t$bitUsaCache=false;\r\n\r\n";
				
				if(!paraLogic) {
					sVariablesArray+="\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString()) +strPrefijoJSFSessionFaces+"=unserialize($this->Session->read("+GetNombreClaseC(TablaBase.ToString())  +"ConstantesFunciones::$STRSESSIONNAME));\r\n\r\n";
				}
				
				sVariablesArray+="\t\tif($"+GetNombreClaseObjetoC(TablaBase.ToString()) +strPrefijoJSFSessionFaces+"==null) {\r\n";
				sVariablesArray+="\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())  +strPrefijoJSFSessionFaces+"=new "+GetNombreClaseC(TablaBase.ToString()) +strPrefijoJSFSessionFaces+"();\r\n";
				sVariablesArray+="\t\t}\r\n";
			
				sVariablesArray+="\t\t\r\n\t\tif($"+GetNombreClaseObjetoC(TablaBase.ToString()) +strPrefijoJSFSessionFaces+"->getbitBusquedaDesdeForeignKeySesion"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"()!=true) {\r\n";
				
				
				sVariablesArray+="\t\t\tif(Constantes::$BITUSACACHE==true) {\r\n";
				sVariablesArray+="\t\t\t\tif(apc_exists('"+strPackage+GetNombreCompletoClaseRelacionadaFromColumn(column)+"')) {\r\n";
				sVariablesArray+="\t\t\t\t\t$bitUsaCache=true;\r\n";
				sVariablesArray+="\t\t\t\t}	\r\n";			
				sVariablesArray+="\t\t\t}\r\n\r\n";
					
				sVariablesArray+="\t\t\tif ($bitUsaCache==false) {\r\n";
					
					
				sVariablesArray+="\r\n\t\t\t\t$"+strThisController+"arrDatoGeneral= array();";
				sVariablesArray+="\r\n\t\t\t\t$"+strThisController+"arrDatoGeneralNo= array();";
								
				sVariablesArray+="\r\n\r\n\t\t\t\t$arrColumnasGlobales="+GetNombreClaseC(tableSchema.ToString())+"ConstantesFunciones::getArrayColumnasGlobales"+GetNombreClaseC(tableSchema.ToString())+"($"+strThisController+"arrDatoGeneral,$"+strThisController+"arrDatoGeneralNo);";
				sVariablesArray+="\r\n\t\t\t\t$finalQueryGlobal"+GetNombreClaseC(tableSchema.ToString())+"=Funciones::GetWhereGlobalConstants($"+strThisController+"parametroGeneralUsuarioActual,$"+strThisController+"moduloActual,true,false,$arrColumnasGlobales);";
				
				sVariablesArray+="\r\n\r\n\t\t\t\t$finalQueryGlobal"+GetNombreClaseC(tableSchema.ToString())+"=Funciones::GetFinalQueryAppend($finalQueryGlobal"+GetNombreClaseC(tableSchema.ToString())+", '');";
				sVariablesArray+="\r\n\t\t\t\t$finalQueryGlobal"+GetNombreClaseC(tableSchema.ToString())+".="+GetNombreClaseC(tableSchema.ToString())+"ConstantesFunciones::$STRFINALQUERY;";
				sVariablesArray+="\r\n\t\t\t\t$strRecargarFkQuery=$finalQueryGlobal"+GetNombreClaseC(tableSchema.ToString())+".$strRecargarFkQuery;";

				if(!VerificarColumnaCatalogoGeneralC(column)) {
											
					sVariablesArray+="\t\t\r\n\r\n\t\t\t\t"+strComentarioNoLoadFk+"$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->getTodos"+GetNombreClaseC(tableSchema.ToString()) +"s($strRecargarFkQuery,$pagination);//WithConnection\r\n\r\n";
				
				} else {
					sVariablesArray+="\t\t\t\t"+"$strQueryStringValoresLista"+GetNombreClaseC(tableSchema.ToString())+"='';\r\n";
					sVariablesArray+="\t\t\t\t"+"$strQueryStringValoresLista"+GetNombreClaseC(tableSchema.ToString())+"="+GetNombreClaseC(tableSchema.ToString())+"ConstantesFunciones::getQueryStringValoresLista"+GetNombreClaseC(tableSchema.ToString())+"("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::$STR"+column.Name.ToUpper()+"CODIGO);\r\n\r\n";
					
					
					//sVariablesArray+="\t\t\r\n\t\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->
					sVariablesArray+="\t\t\r\n\t\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters();";
					sVariablesArray+="\t\t\r\n\t\t\t\t$queryWhereSelectParameters->setFinalQuery($strQueryStringValoresLista"+GetNombreClaseC(tableSchema.ToString())+");";
					sVariablesArray+="\t\t\r\n\t\t\t\t$queryWhereSelectParameters->setPagination($pagination);";
					sVariablesArray+="\t\t\r\n\t\t\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->getEntities($queryWhereSelectParameters);//WithConnection\r\n\r\n";
				}
				sVariablesArray+="\t\t\t\tif (Constantes::$BITUSACACHE==true) {\r\n";
				sVariablesArray+="\t\t\t\t\tapc_store('"+strPackage+GetNombreCompletoClaseRelacionadaFromColumn(column)+"', serialize($"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->get"+GetNombreClaseC(tableSchema.ToString()) +"s()), Constantes::$INTTIEMPODEFECTOCACHE);\r\n";				
				sVariablesArray+="\t\t\t\t}\r\n\t\t\t} else {\r\n";
				sVariablesArray+="\t\t\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->set"+GetNombreClaseC(tableSchema.ToString()) +"s(unserialize(apc_fetch('"+strPackage+GetNombreCompletoClaseRelacionadaFromColumn(column)+"')));\r\n";
				sVariablesArray+="\t\t\t}\r\n\r\n";
			
				sVariablesArray+="\t\t\tforeach ($"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->get"+GetNombreClaseC(tableSchema.ToString()) +"s() as $"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Local ) {\r\n";
				sVariablesArray+="\t\t\t\tif($"+strThisReturnController+"->"+strId+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +strDefault+strForeignKey+"==0) {\r\n";
				sVariablesArray+="\t\t\t\t\t$"+strThisReturnController+"->"+strId+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +strDefault+strForeignKey+"=$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Local->get"+strIdGetSet+"();\r\n";
				sVariablesArray+="\t\t\t\t}\r\n\r\n";
				sVariablesArray+="\t\t\t\t$"+strThisReturnController+"->"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()/*GetNombreClaseObjetoC(tableSchema.ToString())*/ +"s"+strForeignKey+"[$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Local->get"+strIdGetSet+"()]="+GetNombreClaseC(TablaBase.ToString()) +"ConstantesFunciones::get"+GetNombreCompletoClaseRelacionadaFromColumn(column)/*GetNombreClaseC(tableSchema.ToString())*/ +"Descripcion($"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Local);\r\n";//Relationship_
				sVariablesArray+="\t\t\t}\r\n\r\n";
				
				sVariablesArray+="\t\t} else {\r\n";
				
				if(!paraLogic) {
					sVariablesArray+="\t\t\t$this->setVisibilidadBusquedasPara"+GetNombreClaseC(tableSchema.ToString()) +"(true);\r\n\r\n";
				}
				
				sVariablesArray+="\r\n\t\t\tif($"+GetNombreClaseObjetoC(TablaBase.ToString()) +strPrefijoJSFSessionFaces+"->getbig"+strId+GetNombreClaseC(tableSchema.ToString()) +"Actual()!=null && $"+GetNombreClaseObjetoC(TablaBase.ToString()) +strPrefijoJSFSessionFaces+"->getbig"+strId+GetNombreClaseC(tableSchema.ToString()) +"Actual() > 0) {\r\n";
				sVariablesArray+="\t\t\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->getEntity($"+GetNombreClaseObjetoC(TablaBase.ToString()) +strPrefijoJSFSessionFaces+"->getbig"+strId+GetNombreClaseC(tableSchema.ToString()) +"Actual());//WithConnection\r\n";
				sVariablesArray+="\r\n\t\t\t\t$"+strThisReturnController+"->"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()/*GetNombreClaseObjetoC(tableSchema.ToString()) +*/+"s"+strForeignKey+"[$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->get"+GetNombreClaseC(tableSchema.ToString()) +"()->get"+strIdGetSet+"()]="+GetNombreClaseC(TablaBase.ToString()) +"ConstantesFunciones::get"+GetNombreCompletoClaseRelacionadaFromColumn(column)/*GetNombreClaseC(tableSchema.ToString())*/ +"Descripcion($"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->get"+GetNombreClaseC(tableSchema.ToString()) +"());\r\n";//Relationship_
				sVariablesArray+="\t\t\t\t$"+strThisReturnController+"->"+strId+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +strDefault+strForeignKey+"=$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->get"+GetNombreClaseC(tableSchema.ToString()) +"()->get"+strIdGetSet+"();\r\n";
				sVariablesArray+="\t\t\t}\r\n";
				sVariablesArray+="\t\t}\r\n";
				//sVariablesArray+="\t\t$this->set('"+GetNombreClaseObjetoC(tableSchema.ToString()) +"s', $this->"+GetNombreClaseObjetoC(tableSchema.ToString()) +"s"+strForeignKey+");\r\n";
		
				sVariablesArray+="\t}\r\n";
				/*
				sVariablesArray+="\t\ttry\r\n\t\t{\r\n";
				sVariablesArray+="\t\t\tthis."+GetNombreClaseObjetoC(tableSchema.ToString()) +"s"+strForeignKey+"=new "+strTypeNewCollection+"<"+ sNombrePakage+GetNombreClaseRelacionadaFromColumn(column)+">();\r\n\r\n";
				
				if(column.AllowDBNull) {
					sVariablesArray+="\t\t\t"+GetNombreClaseRelacionadaFromColumn(column)+" "+GetNombreClaseObjetoC(tableSchema.ToString())+"Nulo = new "+GetNombreClaseRelacionadaFromColumn(column)+"();\r\n\r\n";
				}
				//sVariablesArray+="\t\t\t"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"Nulo.setField_sCodigo(Constantes.SCAMPONONE);";
			
				sVariablesArray+="\t\t\t"+strComentarioParaEjb+GetNombreClaseRelacionadaFromColumn(column)+"Logic "+GetNombreClaseRelacionadaFromColumn(column).ToLower() +"Locic=new "+ GetNombreClaseRelacionadaFromColumn(column)+"Logic();\r\n\r\n";
	
				sVariablesArray+="\t\t\t"+GetNombreClaseC(TablaBase.ToString())+strPrefijoJSFSessionFaces+" "+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"=("+GetNombreClaseC(TablaBase.ToString())+strPrefijoJSFSessionFaces+")$this->Session->read("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.SSESSIONNAME);\r\n\r\n";
								
				sVariablesArray+="\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"==null) {\r\n";
				sVariablesArray+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"=new "+GetNombreClaseC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"();\r\n";
				sVariablesArray+="\t\t\t}";
				
				//if busqueda session
				sVariablesArray+="\r\n\r\n\t\t\tif(!"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".getisBusquedaDesdeForeignKeySesion"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"()) {\r\n";
				*/
				
			}	
		}
	
	
	
	return sVariablesArray;
}

public  String GetFuncionesCargarDescripcionFuncionestrForeignKeysC(TableSchema TablaBase)
{
	String sVariablesArray="";
	String strComentarioParaEjb="";strComentarioParaEjb+="";
	
	String sNombrePakage="";sNombrePakage+="";
	TableSchema tableSchema=null;
	//String strPrefijoJSFSessionFaces="";
	String strTypeNewCollection=""; strTypeNewCollection+="";
	
	bool blnVerificarDeshabilitarFk=false;
	String strVerificarDeshabilitarFk="";strVerificarDeshabilitarFk+="";
	
		foreach(ColumnSchema column in TablaBase.Columns)
		{
			if(column.IsForeignKeyMember)
			{
				tableSchema=GetNombreTablaRelacionadaFromColumn(column);
				
				sVariablesArray+="\r\n\tpublic function cargarDescripcion"+GetNombreCompletoClaseRelacionadaFromColumn(column)/*GetNombreClaseC(tableSchema.ToString())*/ +""+strForeignKey+"($"+strId+GetNombreClaseC(tableSchema.ToString()) +",$connexion=null)";
				sVariablesArray+="{\r\n";
				/*
				sVariablesArray+="\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic= new "+GetNombreClaseC(tableSchema.ToString()) +"Logic();\r\n";
				sVariablesArray+="\t\t$pagination= new Pagination();\r\n";
				sVariablesArray+="\t\t\r\n\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->getTodos"+GetNombreClaseC(tableSchema.ToString()) +"sWithConnection(\"\",$pagination);\r\n\r\n";
				
				sVariablesArray+="\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"s=array();\r\n\r\n";
				sVariablesArray+="\t\tforeach ($"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->get"+GetNombreClaseC(tableSchema.ToString()) +"s() as $"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Local ) {\r\n";
				sVariablesArray+="\t\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"s[$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Local->get"+strIdGetSet+"()]="+GetNombreClaseC(TablaBase.ToString()) +"ConstantesFunciones::get"+GetNombreClaseC(tableSchema.ToString()) +"Descripcion($"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Local);\r\n";//Relationship_
				sVariablesArray+="\t\t}\r\n\r\n";
				
				sVariablesArray+="\t\t$this->set('"+GetNombreClaseObjetoC(tableSchema.ToString()) +"s', $"+GetNombreClaseObjetoC(tableSchema.ToString()) +"s);\r\n";
				*/
				sVariablesArray+="\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic= new "+GetNombreClaseC(tableSchema.ToString()) +"Logic();\r\n";
				sVariablesArray+="\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->setConnexion($connexion);\r\n";
				sVariablesArray+="\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->get"+GetNombreClaseC(tableSchema.ToString()) +"DataAccess()->setIsForForeingKeyData(true);\r\n";
				sVariablesArray+="\t\t$strDescripcion"+GetNombreClaseC(tableSchema.ToString()) +"='';\r\n\r\n";
				
				sVariablesArray+="\t\tif($"+strId+GetNombreClaseC(tableSchema.ToString()) +"!=null && $"+strId+GetNombreClaseC(tableSchema.ToString()) +"!='' && $"+strId+GetNombreClaseC(tableSchema.ToString()) +"!='null') {\r\n";
				sVariablesArray+="\t\t\tif($connexion!=null) {\r\n";
				sVariablesArray+="\t\t\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->getEntity($"+strId+GetNombreClaseC(tableSchema.ToString()) +");//WithConnection\r\n";
				sVariablesArray+="\t\t\t} else {\r\n";
				sVariablesArray+="\t\t\t\t$"+GetNombreClaseObjetoC(tableSchema.ToString()) +"Logic->getEntityWithConnection($"+strId+GetNombreClaseC(tableSchema.ToString()) +");//\r\n";
				sVariablesArray+="\t\t\t}\r\n\r\n";
				
				sVariablesArray+="\t\t\t$strDescripcion"+GetNombreClaseC(tableSchema.ToString()) +"="+GetNombreClaseC(TablaBase.ToString()) +"ConstantesFunciones::get"+GetNombreCompletoClaseRelacionadaFromColumn(column)/*GetNombreClaseC(tableSchema.ToString())*/+"Descripcion($"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic->get"+GetNombreClaseC(tableSchema.ToString())+"());\r\n\r\n";//Relationship_
				sVariablesArray+="\t\t} else {\r\n";
				sVariablesArray+="\t\t\t$strDescripcion"+GetNombreClaseC(tableSchema.ToString()) +"='null';\r\n";
				sVariablesArray+="\t\t}\r\n\r\n";
				
				sVariablesArray+="\t\treturn $strDescripcion"+GetNombreClaseC(tableSchema.ToString())+";\r\n";;
				sVariablesArray+="\t}\r\n";
			}	
		}
	
	
	
	return sVariablesArray;
}

		public String TipoValidacionColumnaClaseC(ColumnSchema columnSchema) 
		{
			String strTipo="";
			
			if(!columnSchema.Name.Equals(strId)) {
				if(EsCharColumn(columnSchema) || EsVarCharColumn(columnSchema)) {
					strTipo="notempty";
				
				} else if(EsSmallIntColumn(columnSchema) || EsIntColumn(columnSchema) || EsBigIntColumn(columnSchema)) {
					strTipo="numeric";
				
				} else {
					strTipo="none";
				}
			} else {
				strTipo="none";
			}
			return strTipo;
		}
		
		public String ValidacionesColumnaClaseC(ColumnSchema columnSchema,bool blnEsUltimaColumna,bool blnConValidaciones) 
		{
			String strTipo="";
			string strNombre = GetNombreColumnFromProperties(columnSchema);//GetNombreColumnaClaseC(column);
			
			string strReturnInitial="";
			strReturnInitial="'"+strNombre+"' => array(";
			
			string strReturnFinal="";
			//strReturnFinal+="\r\n\t\t\t\t'allowEmpty' => false";
			//strReturnFinal+="\r\n\t\t\t\t//'required' => false,";
			//strReturnFinal+="\r\n\t\t\t\t//'last' => false, // Stop validation after this rule";
			//strReturnFinal+="\r\n\t\t\t\t//'on' => 'create', // Limit validation to 'create' or 'update' operations";
			//strReturnFinal+="\r\n\t\t\t)";
			strReturnFinal+="\r\n\t\t)";
		
			if(!blnEsUltimaColumna) {	
				strReturnFinal+=",";
			}
			
			strTipo+=strReturnInitial;
			
			string strValidacionesExtra=ValidacionesExtraColumnaClaseC(columnSchema,strNombre,blnConValidaciones);
			
			string strConValidacion="";
			
			if(!blnConValidaciones || GetNoInsertEditColumnFromPropertiesC(columnSchema) || EsPathImagenDocumentoArchivoColumn(columnSchema) || GetValidacionTodoFromPropertiesC(columnSchema.Table) || GetConValidacionTodoColumnFromPropertiesC(columnSchema)) {
				strConValidacion="//";
			}
			
			if(!columnSchema.Name.Equals(strId)) {
				if(EsCharColumn(columnSchema) || EsVarCharColumn(columnSchema)) {
					//strTipo="notempty";
					
					strTipo+="\r\n\t\t\t"+/*strConValidacion+*/"'maxLength-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+/*strConValidacion+*/"'rule' => array('maxLength',"+columnSchema.Size+"),";
					strTipo+="\r\n\t\t\t\t"+/*strConValidacion+*/"'message' => 'Maximo numero de caracteres "+columnSchema.Size+"'";//Constantes::$STRVALIDACIONLENGTH.
					//strTipo+="\r\n\t\t\t\t"+/*strConValidacion+*/"'allowEmpty' => false";
					strTipo+="\r\n\t\t\t"+/*strConValidacion+*/"),";
					
					strTipo+="\r\n\t\t\t"+strConValidacion+"'regularexpression-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('custom','/^[0-9A-Za-z_ .,\\n=:;_@-]+$/'),"; //ÑñáéíóúÁÉÍÓÚ  //Constantes::$STRREGEXCADENA  //'[^º]*
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'No es cadena'";//Constantes::$STRVALIDACIONCADENA
					strTipo+="\r\n\t\t\t"+strConValidacion+"),";
					
					strTipo+="\r\n\t\t\t"+strConValidacion+"'required-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('minLength',1),";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'allowEmpty' => false,";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'Campo Requerido'";
					strTipo+="\r\n\t\t\t"+strConValidacion+")";
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
				
				} else if(EsSmallIntColumn(columnSchema) || EsIntColumn(columnSchema) || EsBigIntColumn(columnSchema)) {
					//strTipo="numeric";
					strTipo+="\r\n\t\t\t"+strConValidacion+"'numeric-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('numeric'),";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'No es numero'";//Constantes::$STRVALIDACIONNUMEROENTERO
					//strTipo+="\r\n\t\t\t\t"+strConValidacion+"'allowEmpty' => false";
					strTipo+="\r\n\t\t\t"+strConValidacion+"),";
					
					strTipo+="\r\n\t\t\t"+strConValidacion+"'required-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('minLength',1),";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'allowEmpty' => false,";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'Campo Requerido'";
					strTipo+="\r\n\t\t\t"+strConValidacion+")";
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
				} else if (EsDecimalColumn(columnSchema)) {
					strTipo+="\r\n\t\t\t"+strConValidacion+"'decimal-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('decimal',"+columnSchema.Scale+"),";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'No es numero decimal'";//Constantes::$STRVALIDACIONDECIMAL
					//strTipo+="\r\n\t\t\t\t"+strConValidacion+"'allowEmpty' => false";
					strTipo+="\r\n\t\t\t"+strConValidacion+"),";
					
					strTipo+="\r\n\t\t\t"+strConValidacion+"'required-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('minLength',1),";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'allowEmpty' => false,";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'Campo Requerido'";
					strTipo+="\r\n\t\t\t"+strConValidacion+")";
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
				} else if (EsDateColumn(columnSchema) || EsDateTimeColumn(columnSchema) || EsTimeColumn(columnSchema)) {
					string strFormato="";
					
					if(EsDateColumn(columnSchema)) {
						strFormato="Y-m-d";
					} else if(EsDateTimeColumn(columnSchema)) {
						strFormato="Y-m-d H:i:s";
					} else {
						strFormato="H:i:s";
					}
					
					strTipo+="\r\n\t\t\t"+/*strConValidacion+*/"//'date-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+/*strConValidacion+*/"//'rule' => array('date','"+strFormato+"'),";
					strTipo+="\r\n\t\t\t\t"+/*strConValidacion+*/"//'message' => 'No es fecha'";//str_replace('cadena','fecha',Constantes::$STRVALIDACIONCADENA)
					//strTipo+="\r\n\t\t\t\t"+/*strConValidacion+*/"//'allowEmpty' => false";
					strTipo+="\r\n\t\t\t"+/*strConValidacion+*/"//),";
					
					strTipo+="\r\n\t\t\t"+/*strConValidacion+*/"//'required-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+/*strConValidacion+*/"//'rule' => array('minLength',1),";
					strTipo+="\r\n\t\t\t\t"+/*strConValidacion+*/"//'allowEmpty' => false,";
					strTipo+="\r\n\t\t\t\t"+/*strConValidacion+*/"//'message' => 'Campo Requerido'";
					strTipo+="\r\n\t\t\t"+/*strConValidacion+*/"//)";
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
				}
				else {
					strTipo="";
				}
			} else {
				strTipo="";
			}
			
			
			return strTipo;
		}
		
		public String ValidacionesJQueryColumnaClaseC(ColumnSchema columnSchema,bool blnEsUltimaColumna,bool blnConValidaciones,bool esParaEditarTabla,int iNumeroColumna) 
		{
			String strTipo="";
			String strTipoRequerido="";
			String strNombre = "\"form"+strSeparadorName+GetNombreColumnFromProperties(columnSchema)+"\"";//GetNombreColumnaClaseC(column);
			
			//string strNombre = "\"form\"+"+GetNombreClaseObjetoC(columnSchema.Table.ToString())+"Constante.strSUFIJO+\"-"+GetNombreColumnFromProperties(columnSchema)+"\"";//GetNombreColumnaClaseC(column);
			
			String strFinalEditarTabla="";
			
			String strIniElementoEditarTabla="";
			String strFinElementoEditarTabla="";
			
			if(esParaEditarTabla) {
				strIniElementoEditarTabla="strRules=strRules+'\\r\\n";
				strFinElementoEditarTabla="';";
			
				if(!blnEsUltimaColumna) {	
					strFinalEditarTabla=",";
				}
				
				strTipo+="\r\n\t\t\t\tcontrol_name=\"t-cel_\"+i+\"_"+iNumeroColumna.ToString()+"\";";
				strNombre = "\r\n\t\t\t\tstrRules=strRules+'\\r\\n\"'+control_name+'\"";
			}
			
			string strReturnInitial="";
			strReturnInitial=""+strNombre+": {";
			
			if(esParaEditarTabla) {
				strReturnInitial+="';";
			}
			
			string strReturnFinal="";
			//strReturnFinal+="\r\n\t\t\t\t'allowEmpty' => false";
			//strReturnFinal+="\r\n\t\t\t\t//'required' => false,";
			//strReturnFinal+="\r\n\t\t\t\t//'last' => false, // Stop validation after this rule";
			//strReturnFinal+="\r\n\t\t\t\t//'on' => 'create', // Limit validation to 'create' or 'update' operations";
			//strReturnFinal+="\r\n\t\t\t)";
			
			if(!esParaEditarTabla) {
				strReturnFinal+="\r\n\t\t\t}";
			} else {
				strReturnFinal=strReturnFinal+"\r\n\t\t\t\t"+strIniElementoEditarTabla+"}";//+"}';";
				
				if(blnEsUltimaColumna) {
					//strReturnFinal+="';";
				}
			}
			
			if(!esParaEditarTabla) {
				if(!blnEsUltimaColumna) {	
					strReturnFinal+=",\r\n";
				}
			} else {
				//if(!blnEsUltimaColumna) {	
					strReturnFinal+=",';\r\n";
				//}
			}
			
			strTipo+=strReturnInitial;
			
			string strValidacionesExtra=ValidacionesExtraColumnaClaseC(columnSchema,strNombre,blnConValidaciones);
			
			string strConValidacion="";
			
			if(!blnConValidaciones || GetNoInsertEditColumnFromPropertiesC(columnSchema) || EsPathImagenDocumentoArchivoColumn(columnSchema) || GetValidacionTodoFromPropertiesC(columnSchema.Table) || GetConValidacionTodoColumnFromPropertiesC(columnSchema)) {
				strConValidacion="//";
			}
			
			if(!columnSchema.AllowDBNull) {
				strTipoRequerido="\r\n\t\t\t\t"+strIniElementoEditarTabla+"required:true,"+strFinElementoEditarTabla;
			}
			
			if(GetValidacionMinimoLengthColumnFromPropertiesC(columnSchema)) {
				strTipoRequerido="\r\n\t\t\t\t"+strIniElementoEditarTabla+"minlength:"+columnSchema.Size+","+strFinElementoEditarTabla;
			}
			
			if(!columnSchema.Name.Equals(strId)) {
				if(EsCharColumn(columnSchema) || EsVarCharColumn(columnSchema)) {
					
					strTipo+=strTipoRequerido;
					strTipo+="\r\n\t\t\t\t"+strIniElementoEditarTabla+"maxlength:"+columnSchema.Size+strFinElementoEditarTabla;
					
					if(!EsCampoNoValidacionColumnC(columnSchema) && !EsPathImagenDocumentoArchivoColumn(columnSchema)
						&& !GetConValidacionTodoColumnFromPropertiesC(columnSchema)) {
							
						strTipo+="\r\n\t\t\t\t"+strIniElementoEditarTabla+",regexpStringMethod:true"+strFinElementoEditarTabla;
					}
					
					//strTipo="notempty";
					/*
					strTipo+="\r\n\t\t\t"+"'maxLength-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+"'rule' => array('maxLength',"+columnSchema.Size+"),";
					strTipo+="\r\n\t\t\t\t"+"'message' => 'Maximo numero de caracteres "+columnSchema.Size+"',";//Constantes::$STRVALIDACIONLENGTH.
					strTipo+="\r\n\t\t\t\t"+"'allowEmpty' => false";
					strTipo+="\r\n\t\t\t"+"),";
					
					strTipo+="\r\n\t\t\t"+strConValidacion+"'regularexpression-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('custom','/^[0-9A-Za-z_ .,\\n=:;_@-]+$/'),"; //ÑñáéíóúÁÉÍÓÚ  //Constantes::$STRREGEXCADENA  //'[^º]*
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'No es cadena'";//Constantes::$STRVALIDACIONCADENA
					strTipo+="\r\n\t\t\t"+strConValidacion+")";
					*/
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
				
				} else if(EsSmallIntColumn(columnSchema) || EsIntColumn(columnSchema) || EsBigIntColumn(columnSchema)) {
					//strTipo="numeric";
					/*
					strTipo+="\r\n\t\t\t"+strConValidacion+"'numeric-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('numeric'),";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'No es numero',";//Constantes::$STRVALIDACIONNUMEROENTERO
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'allowEmpty' => false";
					strTipo+="\r\n\t\t\t"+strConValidacion+")";
					*/
					
					strTipo+=strTipoRequerido;
					
					if(!columnSchema.IsForeignKeyMember ) {
						strTipo+="\r\n\t\t\t\t"+strIniElementoEditarTabla+"digits:true"+strFinElementoEditarTabla;
						
					} else {																		
						if(!GetEsNullColumnFromPropertiesC(columnSchema)) {
							strTipo+="\r\n\t\t\t\t"+strIniElementoEditarTabla+"digits:true"+strFinElementoEditarTabla;
							
							strTipo+="\r\n\t\t\t\t"+strIniElementoEditarTabla+",min:0"+strFinElementoEditarTabla;
							
							//Trace.WriteLine(strTipo);
						}
					}
					
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
					
				} else if (EsDecimalColumn(columnSchema)) {
					/*
					strTipo+="\r\n\t\t\t"+strConValidacion+"'decimal-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('decimal',"+columnSchema.Scale+"),";
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'No es numero decimal',";//Constantes::$STRVALIDACIONDECIMAL
					strTipo+="\r\n\t\t\t\t"+strConValidacion+"'allowEmpty' => false";
					strTipo+="\r\n\t\t\t"+strConValidacion+")";
					*/
					
					strTipo+=strTipoRequerido;
					strTipo+="\r\n\t\t\t\t"+strIniElementoEditarTabla+"number:true"+strFinElementoEditarTabla;
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
					
				} else if (EsDateColumn(columnSchema)/* || EsDateTimeColumn(columnSchema) || EsTimeColumn(columnSchema)*/) {
					string strFormato="";
					
					if(EsDateColumn(columnSchema)) {
						//strFormato="Y-m-d";
					} else if(EsDateTimeColumn(columnSchema)) {
						//strFormato="Y-m-d H:i:s";
					} else {
						//strFormato="H:i:s";
					}
					
					/*
					strTipo+="\r\n\t\t\t"+"//'date-"+strNombre+"' => array(";
					strTipo+="\r\n\t\t\t\t"+"//'rule' => array('date','"+strFormato+"'),";
					strTipo+="\r\n\t\t\t\t"+"//'message' => 'No es fecha',";//str_replace('cadena','fecha',Constantes::$STRVALIDACIONCADENA)
					strTipo+="\r\n\t\t\t\t"+"//'allowEmpty' => false";
					strTipo+="\r\n\t\t\t"+"//)";
					*/
					
					strTipo+=strTipoRequerido;
					strTipo+="\r\n\t\t\t\t"+strIniElementoEditarTabla+"date:true"+strFinElementoEditarTabla;
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
				}
				else {
					strTipo="";
				}
			} else {
				strTipo="";
			}
			
			//Trace.WriteLine(strTipo);
			
			return strTipo;
		}
		
		public String ValidacionesMessagesJQueryColumnaClaseC(ColumnSchema columnSchema,bool blnEsUltimaColumna,bool blnConValidaciones,bool esParaEditarTabla,int iNumeroColumna) 
		{
			String strTipo="";
			String strTipoRequerido="";
			
			String strNombre = "\"form"+strSeparadorName+GetNombreColumnFromProperties(columnSchema)+"\"";//GetNombreColumnaClaseC(column);
			//String strNombre = "\"form\"+"+GetNombreClaseObjetoC(columnSchema.Table.ToString())+"Constante.strSUFIJO+\"-"+GetNombreColumnFromProperties(columnSchema)+"\"";//GetNombreColumnaClaseC(column);
			
			String strFinalEditarTabla="";
			
			if(esParaEditarTabla) {
				//if(!blnEsUltimaColumna) {	
					strFinalEditarTabla=",";
				//}
				
				strTipo+="\r\n\t\t\t\tcontrol_name=\"t-cel_\"+i+\"_"+iNumeroColumna.ToString()+"\";";
				strNombre = "\r\n\t\t\t\tstrRulesMessage=strRulesMessage+'\\r\\n\"'+control_name+'\"";
			}
			
			
			string strReturnInitial="";
			strReturnInitial=""+strNombre+": \"";
			
			string strReturnFinal="";
		
			if(!esParaEditarTabla) {
				strReturnFinal+="\"";
			} else {
				strReturnFinal+="\""+strFinalEditarTabla+"'"+";";
			}
			
			if(!esParaEditarTabla) {
				if(!blnEsUltimaColumna) {	
					strReturnFinal+=",";
				}
			}
			
			strTipo+=strReturnInitial;
			
			string strValidacionesExtra="";//ValidacionesExtraColumnaClaseC(columnSchema,strNombre,blnConValidaciones);
			
			string strConValidacion="";
			
			if(!blnConValidaciones || GetNoInsertEditColumnFromPropertiesC(columnSchema) || EsPathImagenDocumentoArchivoColumn(columnSchema) || GetValidacionTodoFromPropertiesC(columnSchema.Table) || GetConValidacionTodoColumnFromPropertiesC(columnSchema)) {
				strConValidacion="//";
			}
			
			if(!columnSchema.AllowDBNull) {
				strTipoRequerido="\"+constantes.STRMENSAJE_REQUERIDO+\"";
			}
			
			if(!columnSchema.Name.Equals(strId)) {
				if(EsCharColumn(columnSchema) || EsVarCharColumn(columnSchema)) {
							
					strTipo+=strTipoRequerido;
					strTipo+="\"+constantes.STRMENSAJE_TEXTOINCORRECTO+\"";
					//strTipo+="Texto incorrecto";
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
				
				} else if(EsSmallIntColumn(columnSchema) || EsIntColumn(columnSchema) || EsBigIntColumn(columnSchema)) {
					
					strTipo+=strTipoRequerido;
					strTipo+="\"+constantes.STRMENSAJE_ENTEROINCORRECTO+\"";
					//strTipo+="Valor de numero entero incorrecto";
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
					
				} else if (EsDecimalColumn(columnSchema)) {
					
					strTipo+=strTipoRequerido;
					strTipo+="\"+constantes.STRMENSAJE_DECIMALINCORRECTO+\"";
					//strTipo+="Valor de numero decimal incorrecto";
					
					strTipo+=strValidacionesExtra;
					
					strTipo+=strReturnFinal;
				} else if (EsDateColumn(columnSchema) /*|| EsDateTimeColumn(columnSchema) || EsTimeColumn(columnSchema)*/) {
					string strFormato="";
					
					strTipo+=strTipoRequerido;
					strTipo+="\"+constantes.STRMENSAJE_FECHAINCORRECTO+\"";
					//strTipo+="Valor de fecha incorrecta";
					
					if(EsDateColumn(columnSchema)) {
						//strFormato="Y-m-d";
					} else if(EsDateTimeColumn(columnSchema)) {
						//strFormato="Y-m-d H:i:s";
					} else {
						//strFormato="H:i:s";
					}
										
					//strTipo+="\r\n\t\t\t"+"date:true";
					strTipo+=strReturnFinal;
					
					strTipo+=strValidacionesExtra;
					
					//strTipo+=strReturnFinal;
				}
				else {
					strTipo="";
				}
			} else {
				strTipo="";
			}
			
			
			return strTipo;
		}
		
		public String ValidacionesExtraColumnaClaseC(ColumnSchema columnSchema,string strNombre,bool blnConValidaciones) 
		{
			String strTipo="";strTipo+="";
			string strValidacion=String.Empty;		
			string strValidacionFromProperties=GetJavaValidacionColumnFromPropertiesC(columnSchema);
			String[] arrValidaciones;
			String strValoresCaracteristicaValidacion="";strValoresCaracteristicaValidacion+="";
			String[] arrValoresCaracteristicaValidacion;
			string strConValidacion=String.Empty;
			
			
			if(!blnConValidaciones) {
				strConValidacion="//";
			}
			
			
			if(!strValidacionFromProperties.Equals(string.Empty)) {
				arrValidaciones=strValidacionFromProperties.Split(',');
				
				foreach(String strValidacionItem in arrValidaciones) {						
					if(strValidacionItem.Equals("EMAIL")) {
						//strValidacion+="\r\n\t"+strConValidacion+"@Email(message=\"Debe ser un mail valido\")";
						strValidacion+=",\r\n\t\t\t"+strConValidacion+"'email-"+strNombre+"' => array(";
						strValidacion+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('email', true),";
						strValidacion+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'No es mail'";//str_replace('cadena','mail',Constantes::$STRVALIDACIONCADENA)
						strValidacion+="\r\n\t\t\t"+strConValidacion+")";												
					}
					
					if(strValidacionItem.Equals("URL")) {
						strValidacion+=",\r\n\t\t\t"+strConValidacion+"'url-"+strNombre+"' => array(";
						strValidacion+="\r\n\t\t\t\t"+strConValidacion+"'rule' => array('url'),";
						strValidacion+="\r\n\t\t\t\t"+strConValidacion+"'message' => 'No es url'";//str_replace('cadena','url',Constantes::$STRVALIDACIONCADENA)
						strValidacion+="\r\n\t\t\t"+strConValidacion+")";	
					}
					
				}
			}
			
			return strValidacion;
		}
		#endregion
		
		public static String GetNombreConSeparacionC(String strNombre) {
			String strDescritionTabla=string.Empty;
			bool blnEsPrimero=true;
			
			foreach(char c in strNombre) {
				if(!blnEsPrimero && char.IsUpper(c)) {
					strDescritionTabla+="_";
				}
				
				strDescritionTabla+=c.ToString();
				
				if(blnEsPrimero) {
					blnEsPrimero=false;
				}	
			}
			
			return strDescritionTabla;	
		}
		
		#region ExtraCode
		public void GenerateFoldersExtraCodeC(TableSchema tableSchema) {
			string path = Directory.GetCurrentDirectory();
			int indice=path.IndexOf("\\Global\\");
			string subpath="";
			
			if(indice!=-1) {
				subpath=path.Substring(0,indice+8);
			} else {
				subpath=path+"\\";
			}
			
			//Trace.WriteLine(subpath);
			
			String strAuxPath=subpath+"Code_Additional\\";
			String strAuxPathColumn="";
			
			if (!Directory.Exists(strAuxPath)) {
                Directory.CreateDirectory(strAuxPath);
            }
			
			strAuxPath+=tableSchema.Database.Name+"\\";
			
			if (!Directory.Exists(strAuxPath)) {
                Directory.CreateDirectory(strAuxPath);
            }
			
			strAuxPath+=tableSchema.Name+"\\";
			
			if (!Directory.Exists(strAuxPath)) {
                Directory.CreateDirectory(strAuxPath);
            }
			
			strAuxPath+="Columns\\";
			
			if (!Directory.Exists(strAuxPath)) {
                Directory.CreateDirectory(strAuxPath);
            }
			
			foreach(ColumnSchema columnSchema in tableSchema.Columns) {
				strAuxPathColumn=strAuxPath+columnSchema.Name+"\\";
				//Trace.WriteLine(strAuxPathColumn);
				
				if (!Directory.Exists(strAuxPathColumn)) {
					//Trace.WriteLine(strAuxPathColumn);
					try {
						Directory.CreateDirectory(strAuxPathColumn);
					}catch(Exception e) {
						
					}
				}
			}
			
			//Trace.WriteLine(path+"--"+indice.ToString());
			//Trace.WriteLine(subpath);			
		}
		
		public string GetExtraCodeC(TableSchema tableSchema,String strTemplate,String strBloqueCodigo) {
			string path = Directory.GetCurrentDirectory();
			int indice=path.IndexOf("\\Global\\");
			string subpath="";
			string strExtraCode="";
			
			if(indice!=-1) {
				subpath=path.Substring(0,indice+8);
			} else {
				subpath=path+"\\";
			}
			
			String strAuxPath=subpath+"Code_Additional/";
			String strAuxPathFile="";
			
			strAuxPath+=tableSchema.Database.Name+"\\";
			strAuxPath+=tableSchema.Name+"\\";
			//strAuxPath+="Columns\\";
			//strAuxPath+=columnSchema.Name+"\\";						
			
			String strExtraCodeProperty=GetConExtraCodeTableFromPropertiesC(tableSchema);
			
			//NO NECESARIO Description EN TABLE O COLUMN
			if(false) {
				if(!strExtraCodeProperty.Equals(string.Empty)) {			
					if(ExisteExtraCode(strExtraCodeProperty,strBloqueCodigo)) {
						//Trace.WriteLine(strExtraCodeProperty);
				
						if (Directory.Exists(strAuxPath)) {
							strAuxPathFile=strAuxPath+strTemplate+"\\"+strBloqueCodigo+".txt";
							//Trace.WriteLine(strAuxPathFile);
							if(File.Exists(strAuxPathFile)) {
								strExtraCode=System.IO.File.ReadAllText(strAuxPathFile);
							}
						}	
					}
				}
			}
			
			if (Directory.Exists(strAuxPath)) {
				strAuxPathFile=strAuxPath+strTemplate+"\\"+strBloqueCodigo+".txt";
				
				if(File.Exists(strAuxPathFile)) {
					strExtraCode=System.IO.File.ReadAllText(strAuxPathFile);
				}
			}
			
			return strExtraCode;
		}
		
		public string GetExtraCodeC(ColumnSchema columnSchema,String strTemplate,String strBloqueCodigo) {
			string path = Directory.GetCurrentDirectory();
			int indice=path.IndexOf("\\Global\\");
			string subpath="";
			string strExtraCode="";
			
			if(indice!=-1) {
				subpath=path.Substring(0,indice+8);
			} else {
				subpath=path+"\\";
			}

			String strAuxPath=subpath+"Code_Additional/";
			String strAuxPathFile="";
			
			strAuxPath+=columnSchema.Table.Database.Name+"\\";
			strAuxPath+=columnSchema.Table.Name+"\\";
			strAuxPath+="Columns\\";
			strAuxPath+=columnSchema.Name+"\\";						
			
			String strExtraCodeProperty=GetConExtraCodeColumnFromPropertiesC(columnSchema);
			
			
			//NO NECESARIO Description EN TABLE O COLUMN
			if(false) {
				if(!strExtraCodeProperty.Equals(string.Empty)) {
					
					if(ExisteExtraCode(strExtraCodeProperty,strBloqueCodigo)) {
						//Trace.WriteLine(strExtraCodeProperty);
				
						if (Directory.Exists(strAuxPath)) {
							strAuxPathFile=strAuxPath+strTemplate+"\\"+strBloqueCodigo+".txt";
							//Trace.WriteLine(strAuxPathFile);
							if(File.Exists(strAuxPathFile)) {
								strExtraCode=System.IO.File.ReadAllText(strAuxPathFile);
							}
						}	
					}
				}
			}
			
			if (Directory.Exists(strAuxPath)) {
				strAuxPathFile=strAuxPath+strTemplate+"\\"+strBloqueCodigo+".txt";
				
				if(File.Exists(strAuxPathFile)) {
					strExtraCode=System.IO.File.ReadAllText(strAuxPathFile);
				}
			}
			
			return strExtraCode;
		}
		
		public bool ExisteExtraCode(String strExtraCodeProperty,String strBloqueCodigo) {
			bool existe=false;
			
			String[] arrExtraCodes=strExtraCodeProperty.Split(',');
			
			foreach(string strExtraCode in arrExtraCodes) {
				if(strExtraCode.Equals(strBloqueCodigo)) {
					 existe=true;
					break;
				}
			}
			
			return existe;
		}
		#endregion
		
	public string GetTituloControlVariablesFkC(TableSchema tableSchemaFk)
{
	
	//String strTipo=GetTipoColumnaClaseC(column);	
	//String strPrefijo=" "+GetPrefijoTipoC(column);	
	String strColumna=GetTituloNombreTableFromPropertiesC(tableSchemaFk);
	
	String strTitleControl="";
		
	strTitleControl="\r\n\t\t\t\t\t\t<td class=\"titulocampo\"><"+strHtmlTypeElementoInicial+">"+ strColumna +"</"+strHtmlTypeElementoFinal+">\r\n\t\t\t\t\t\t</td>";
	
	return strTitleControl;
}	

	public bool TieneClasesRelacionadasOForeignKeyC(TableSchema TablaBase)
	{
		bool blnTieneForeignKey=false;
			
			blnTieneForeignKey=TieneForeignKeyC(TablaBase) || TieneClasesRelacionadasC(TablaBase);
				
		return blnTieneForeignKey;
	}
	
	public bool TieneClasesRelacionadasC(TableSchema TablaBase) 
		{
			bool blnTieneRelaciones=false;
			String strTablaClaseRelacionada="";strTablaClaseRelacionada+="";
			String strFuncionInit="\r\n\tpublic void Save"+GetNombreClaseC(TablaBase.ToString())+"RelacionesDetalles(Long idUsuario";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					blnTieneRelaciones=true;
					//strTablaClaseRelacionada+=","+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{	
					blnTieneRelaciones=true;
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					/*
					if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
					*/
					blnTieneRelaciones=true;
					//strTablaClaseRelacionada+=",ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
				}
			}
			
			
			
			return blnTieneRelaciones; 
		}
	
	public bool TieneClasesRelacionadasParaMostrarC(TableSchema TablaBase) 
		{
			bool blnTieneRelaciones=false;
			bool blClaseNo=false;
			String strTablaClaseRelacionada="";strTablaClaseRelacionada+="";
			String strFuncionInit="\r\n\tpublic void Save"+GetNombreClaseC(TablaBase.ToString())+"RelacionesDetalles(Long idUsuario";
			String strClasesNoRelacionadas="";
			String[] strClases;
			TableSchema tablaRelacionadaObjetivo=null;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				blClaseNo=false;
				
				foreach(String strClase in strClases) {						
					if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))||strClase.Equals("NINGUNO")) {
						blClaseNo=true;
						break;
					}
				}
				
				if(blClaseNo) {
					continue;
				}
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					blnTieneRelaciones=true;
					//strTablaClaseRelacionada+=","+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{	
					blnTieneRelaciones=true;
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					/*
					if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
					*/
					blnTieneRelaciones=true;
					//strTablaClaseRelacionada+=",ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
				}
			}
			
			
			
			return blnTieneRelaciones; 
		}
		
	public bool TieneForeignKeyODatoBooleanC(TableSchema TablaBase)
	{
		bool blnTieneForeignKey=false;
			
			blnTieneForeignKey=TieneForeignKeyC(TablaBase)||TieneDatoBooleanC(TablaBase);
				
		return blnTieneForeignKey;
	}

	public bool TieneForeignKeyC(TableSchema TablaBase)
	{
		bool blnTieneForeignKey=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
										
					if(columnSchema.IsForeignKeyMember)
					{
						blnTieneForeignKey=true;
					
					}
				}
				
		return blnTieneForeignKey;
	}
	
	public bool TieneDatoBooleanC(TableSchema TablaBase)
	{
		bool blnTieneForeignKey=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strId||columnSchema.Name==strVersionRow)
					{
						continue; 
					}
					
					if(columnSchema.DataType==DbType.Boolean)
					{
						blnTieneForeignKey=true;
					
					}
				}
				
		return blnTieneForeignKey;
	}
		
		public String SoloSiEsParaSeguridadC(DatabaseSchema databaseSchema) 
		{
			String strSeguridad="";
			//System.Windows.Forms.MessageBox.Show(databaseSchema.Name);
			if(databaseSchema.Name=="Seguridad"||databaseSchema.Name=="SeguridadBasico"||databaseSchema.Name=="Seguridads")
			{
				strSeguridad="Seguridad";
			}			
			
			return strSeguridad;
		}
		
		public void EsConSeguridadC(bool esConSeguridad) 
		{
			strGlobalSeguridadComment="";
			
			if(!esConSeguridad)
			{
				strGlobalSeguridadComment="//";
				strGlobalSeguridadCommentNo="";
			}			
			else
			{
				strGlobalSeguridadCommentNo="//";
			}
			
			//return strGlobalSeguridadComment;
		}
		
		public void EsConAuditoriaC(bool esConAuditoria) 
		{
			strGlobalAuditoriaComment="";
			
			if(!esConAuditoria)
			{
				strGlobalAuditoriaComment="//";
			 	strGlobalAuditoriaCommentNo="";
			}			
			else
			{
				strGlobalAuditoriaCommentNo="//";
			}		
			
			//return strGlobalAuditoriaComment;
		}
		
		public bool ContieneImagenesC(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{				
				if((columnSchema.NativeType=="image"&&columnSchema.DataType==DbType.Binary&&columnSchema.Name!=strVersionRow)||(columnSchema.DataType==DbType.Binary&&columnSchema.Name!=strVersionRow))
				{
					 blContiene=true;
				}
			}
			return blContiene;
		
		}
	
	public TableSchema GetTablaDetalleClaseRelacionadaC(String strTabla,TableSchema TablaBase) 
	{
		TableSchema tablaRelacionada=null;
		String strBusquedaTablaClaseRelacionada="";strBusquedaTablaClaseRelacionada+="";
		System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
				
		foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
		{
			tablaRelacionada=GetTablaFromNombreC(collectionInfo.SecondaryTable,TablaBase);
							
			if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany&&strTabla.Contains(tablaRelacionada.Name))
			{
				break;			
			}
			else
			{
				tablaRelacionada=null;
			}
		}
				
		return tablaRelacionada;
	}

	public bool ExisteBusquedasIndicesTablasClasesC(TableSchema TablaBase) 
		{

			bool existe=false;
			
			
			String strTablaClaseRelacionada=string.Empty;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
			
				if(!indexSchema.IsPrimaryKey)
				{
					
					if(indexSchema.IsUnique)
					{
						continue;
					}
					else
					{
						existe=true;
						
						/*
						if(indexSchema.Name.Contains("FK") ||indexSchema.Name.Contains("fk"))
						{
						}
						*/
					}	
										
				}
				
			}
											
			return existe; 
		}
		
	public  bool GetTableAuxiliarFromPropertiesC(TableSchema table,ref SchemaExplorer.TableSchemaCollection  tablasJunctionrelacionadas,ref SchemaExplorer.TableSchemaCollection tablasDetalleRelacionadas)
	{
		String nombreTabla="false";
		String nombreColumna="false";
		String[] descripciones;
		String[] descripcionesColumna;
		String[] tipo;
		String[] tipoColumna;
		bool esRompimiento=false;
		bool puedeGenerarDetalle=true;
		ColumnSchema columnaSeleccionada;
		columnaSeleccionada=table.Columns[0];
		TableSchema tablaDetalleRelacionada;
		TableSchema junctionTableSchema;
		
		System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
				
		foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
		{
			
			if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
			{

				junctionTableSchema=collectionInfo.JunctionTableSchema;
				tablaDetalleRelacionada=collectionInfo.SecondaryTableSchema;
								
				if(junctionTableSchema.Description!="")
				{
					
					descripciones=table.Description.Split('|');
								
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
									
							if(tipo[0].Equals("NOTABLADETALLE"))
							{
								nombreTabla=tipo[1];
								
								if(nombreTabla.Equals(tablaDetalleRelacionada.Name))
								{
									puedeGenerarDetalle=false;
									break;
								}
							}
						}
				}
								
				if(puedeGenerarDetalle)
				{
					if(!esRompimiento)
					{
						esRompimiento=true;
					}
					
					puedeGenerarDetalle=true;
					
					tablasJunctionrelacionadas.Add(junctionTableSchema);
					tablasDetalleRelacionadas.Add(tablaDetalleRelacionada);
				}
				else
				{
					puedeGenerarDetalle=true;
				}
			}
		}
			
						
		
		return esRompimiento;
	}
	
	public static string GetCascadeTableFromPropertiesC(TableSchema table)
	{
		String nombreTabla="false";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
							
					if(tipo[0].Equals("DELCASCADE"))
					{
						nombreTabla=tipo[1];
						
						break;
					}
				}
		}
		
		return nombreTabla;
	}		

	public static string GetTituloNombreTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=GetNombreClaseC(table.ToString());
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBTITULO"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}		
			
		
		return nombreTabla;
	}
	
	public static string GetTipoDescriptionGenericoTableFromPropertiesC(TableSchema table,String strTipo)	{
		String nombreTabla="";//GetNombreClaseC(table.ToString()).ToUpper();
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strTipo))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
		
	//DONDE
	/*
	0->NOMBRE
	1->NUMERO COLUMNAS
	2->ALINEACION(CENTER,WEST,EAST)
	3->BORDE(NORMAL,NINGUNO,VACIO)
	4->Y --> (Antes X)
	5->X --> (Antes Y)
	6->COLSPAN
	7->ROWSPAN
	*/
	
	//|PANELCONUBICACION=true
	public static string GetPanelNumeroColumnasTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELNUMCOLUMNAS"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetPanelNumeroRelacionesTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELNUMRELACIONES"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetTamanioPaginacionTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="10";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("PAGINACION"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static bool GetEsIgnorarTableFromPropertiesC(TableSchema table)
	{
	bool nombreTabla=false;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("IGNORAR"))
						{
							nombreTabla=true;
							break;
						}
					}
	}		
	//System.Windows.Forms.MessageBox.Show(nombreTabla.ToString());
	return nombreTabla;
	}
	
	public string GetAlignTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="center";
	
	if(GetAlignHorizontalParameterTableC(table)>100) {
		nombreTabla="left";
	}
	
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("ALIGN"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public int GetAlignHorizontalParameterTableC(TableSchema table)
	{
		String nombreTabla="center";nombreTabla+="";
		int intCountLimiteCenter=0;
		
		foreach(ColumnSchema columnSchema in table.Columns) {
			if(EsAutoAuditoriaColumnC(columnSchema)||columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||/*columnSchema.Name==strId||*/columnSchema.Name==strVersionRow) {
				continue; 
			} 
			
			intCountLimiteCenter+=GetValorHorizontalWebColumnaClaseC(columnSchema);
		}	
		
		return intCountLimiteCenter;
	}
	
	public int GetAlignVerticalParameterTableC(TableSchema table)
	{
		String nombreTabla="center";nombreTabla+="";
		int intCountLimiteCenter=0;
		
		foreach(ColumnSchema columnSchema in table.Columns) {
			if(EsAutoAuditoriaColumnC(columnSchema)||columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||/*columnSchema.Name==strId||*/columnSchema.Name==strVersionRow) {
				continue; 
			} 
			
			intCountLimiteCenter+=GetValorVerticalWebColumnaClaseC(columnSchema);
		}	
		
		return intCountLimiteCenter;
	}
	
	public int GetAlignVerticalFormNumeroColumnasTableC(TableSchema table)
	{
		//String nombreTabla="center";
		int intCountLimiteCenter=0;
		int intCountNumeroColumnasAbsoluto=0;
		int intCountNumeroColumnas=0;
		int intValorLimite=100;
		int intNumeroColumnasFromProperties=0;
		
		intNumeroColumnasFromProperties=GetNumeroColumnasTableFromPropertiesC(table);
		
		if(intNumeroColumnasFromProperties<=0) {
			intCountLimiteCenter=GetAlignVerticalParameterTableC(table);
			//Trace.WriteLine("No Total Columnas:"+intCountLimiteCenter);
			
			if(intCountLimiteCenter>intValorLimite) {
				intCountNumeroColumnasAbsoluto=intCountLimiteCenter/intValorLimite;
				
				//Trace.WriteLine("No Total Form Columnas:"+intCountNumeroColumnasAbsoluto);
				
				int intResiduo= intCountLimiteCenter % intValorLimite;
				
				if(intResiduo>=30) {
					intCountNumeroColumnasAbsoluto++;
				}
				
				if(intCountNumeroColumnasAbsoluto>0) {
					intCountNumeroColumnas=intCountNumeroColumnasAbsoluto;
				} else {
					intCountNumeroColumnas=1;
				}
			} else {
				intCountNumeroColumnas=1;
			}
		} else {
			intCountNumeroColumnas=intNumeroColumnasFromProperties;
		}
		
		return intCountNumeroColumnas;
	}
	
	public static string GetWidthBusquedaTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("TAMBUSQUEDA"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}			
	
	if(blnConTabsBusqueda) {
		nombreTabla="100%";
	}
	
		return nombreTabla;
	}
	
	public static int GetNumeroColumnasTableFromPropertiesC(TableSchema table)
	{
	int intNumerocolumnas=0;
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NUMCOLUMNAS"))
						{
							nombreTabla=tipo[1];
							intNumerocolumnas=int.Parse(nombreTabla);
							break;
						}
					}
	}							
	return intNumerocolumnas;
	}
	
	public static int GetNumeroWheresTableFromPropertiesC(TableSchema table)
	{
	int intNumerocolumnas=0;
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NUMWHERES"))
						{
							nombreTabla=tipo[1];
							intNumerocolumnas=int.Parse(nombreTabla);
							break;
						}
					}
	}							
	return intNumerocolumnas;
	}
	
	public static int GetNumeroPaginacionTableFromPropertiesC(TableSchema table)
	{
	int intNumerocolumnas=0;
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NUMPAG"))
						{
							nombreTabla=tipo[1];
							intNumerocolumnas=int.Parse(nombreTabla);
							break;
						}
					}
	}							
	return intNumerocolumnas;
	}
	
	public static string GetNombreTableForeingKeyFromPropertiesC(TableSchema table)
	{
	String nombreTabla=GetNombreTableFromProperties(table);
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NOMBREFK"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetConAtrasTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="false";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBCONATRAS"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetPluralTituloNombreTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="s";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("WEBPLURAL"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla.ToLower();
	}
	
	public static string GetFinalQueryTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("FINALQUERY"))
							{
								nombreTabla=tipo[1];
								nombreTabla=nombreTabla.Replace("()","=");
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetPrefijoSqlIdTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("PREFIJOID"))
							{
								nombreTabla=tipo[1];
								nombreTabla=nombreTabla.Replace("()","=");
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	
	
	public static string GetPrefijoSqlTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("PREFIJOSQL"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetPrefijoSqlTableFromPropertiesC(ColumnSchema columnSchema)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(columnSchema.Description!="")
	{
		
		descripciones=columnSchema.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("PREFIJOSQL"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetSufijoRegexTableFromPropertiesC(ColumnSchema columnSchema)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(columnSchema.Description!="")
	{
		
		descripciones=columnSchema.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("SUFIJOREGEX"))
							{
								nombreTabla="_"+tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetSqlWhereColumnFromPropertiesC(ColumnSchema columnSchema)
	{
	String nombreTabla=string.Empty;
	String[] descripciones;
	String[] tipo;
	
	if(columnSchema.Description!="")
	{
		
		descripciones=columnSchema.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("SQLWHERE"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetRelativePathC(TableSchema table)
	{
		String strRelativePath=strPrefijoRelativePath;
		
		String strRelativePathFromTableProperties=GetRelativePathNavegacionFromTableFromPropertiesC(table);
		String strPath=String.Empty;
		
		String[] strRelativePathsFromTableProperties=strRelativePathFromTableProperties.Split('/');
		bool blnEsPrimera=true;
		
		foreach(String strRelativePathFromTable in strRelativePathsFromTableProperties)
		{
			if(!blnEsPrimera)
			{
				strPath+="../";
			}
			else
			{
				blnEsPrimera=false;
			}
			
		}
		
		return strRelativePath+strPath+"";
	}
	
	public static string GetRelativePathNavegacionFromTableFromPropertiesC(TableSchema table) {
		String nombreTabla="";
		
		if(!CON_VERSION_MODULOS) {
			nombreTabla=GetRelativePathNavegacionFromTableFromPropertiesC(table,false);
		}
		
		return nombreTabla;
	}
	
	public static string GetRelativePathNavegacionFromTableFromPropertiesC(TableSchema table,bool conLower)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="") {		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones) {
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null) {
							if(tipo[0].Equals("PAQUETE")) {
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}
	
		if(nombreTabla=="" && table.Owner!="dbo") {
			nombreTabla=table.Owner;
			
			if(conLower) {
				nombreTabla=nombreTabla.ToLower();
			}
		}
	
		return nombreTabla;
	}
	
	public static string GetRelativePathNavegacionFKFromTableFromPropertiesC(TableSchema table,bool conLower) {
		String sModuleFk="";
		
		sModuleFk=GetRelativePathNavegacionFromTableFromPropertiesC(table,conLower);
		
		if(!sModuleFk.Contains("/")) {
			sModuleFk=sModuleFk+"/";
		}
						
		return sModuleFk;
		
	}
	
	public static string GetModuloDominioConstanteFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="") {		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones) {
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null) {
							if(tipo[0].Equals("MODULODOMI")) {
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}		
	
		return nombreTabla;
	}
	
	public static string GetModuloDominioConstanteFromColumnFromPropertiesC(ColumnSchema column)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(column.Description!="") {		
		descripciones=column.Description.Split('|');
					
					foreach(String descripcion in descripciones) {
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null) {
							if(tipo[0].Equals("MODULODOMI")) {
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}		
	
		return nombreTabla;
	}
	
	public static string GetRelativePathNavegacionFromModuleActualC(TableSchema table)
	{
		/*
		
		nombreTabla=Module.Replace(".","/");
		*/
		String nombreTabla="";
		
		nombreTabla=GetRelativePathNavegacionFromModuleActualC(table,false);
	return nombreTabla;
	}
	
	public static string GetRelativePathNavegacionFromModuleActualC(TableSchema table,bool blnForzarPorTabla)
	{
		String nombreTabla="";
	
		if(!blnForzarPorTabla) {
			nombreTabla=Module.Replace(".","/");
		} else {
			nombreTabla=GetModuloPaqueteJavaFromTableFromPropertiesC(table);
			nombreTabla=nombreTabla.Replace(".","/");
		}
	return nombreTabla;
	}
	
	public static string GetModuloPaqueteJavaFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=string.Empty;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("PAQUETEJAVA"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	
	if(table.Owner!="dbo") {//nombreTabla==string.Empty && 
		nombreTabla=table.Owner.ToLower();
		//Trace.WriteLine(nombreTabla);
	} else {
		//Trace.WriteLine("none");	
	}
	
	return nombreTabla;
	}
	
	public static string GetModuloPaquetePhpFromTableFromPropertiesC(TableSchema table,bool conSlashFinal) {
		String nombreTabla=string.Empty;
		
		nombreTabla=GetModuloPaqueteJavaFromTableFromPropertiesC(table);
		
		nombreTabla=nombreTabla.Replace(".","/");	
		
		if(conSlashFinal) {
			nombreTabla+="/";
		}
		
		return nombreTabla;
	}
	
	public static string GetNombresClasesNoNavegacionFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESNO"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresClasesNoMostrarFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESNOMOSTRAR"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresClasesSiNavegacionFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESSI"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresClasesSiDeepLoadFkFromTableFromPropertiesC(ColumnSchema column)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(column.Description!="")
	{
		
		descripciones=column.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESSI"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static bool GetOnChangeParentFromColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		bool blnNoEdit=false;
		
		if(column.Description!="")
		{
			
			descripciones=column.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("ONCHANGEPARENT"))
								{
									nombreTabla=tipo[1];
								 	blnNoEdit=true;
								
									break;
								}
							}
						}
		}							
		
		//return nombreTabla;
		
		return blnNoEdit;
	}
	
	public static string GetOnChangeParentFromTableFromPropertiesC(TableSchema table)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("ONCHANGEPARENT"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetNombresClasesSiOnChangeFromColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(column.Description!="")
		{
			
			descripciones=column.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("CLASESSIONCHANGE"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetNombresClasesSiOnChangeParentFromColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(column.Description!="")
		{
			
			descripciones=column.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("CLASESSIONCHANGE_PARENT"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetNombresClasesSiOnChangeFromTableFromPropertiesC(TableSchema table)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("CLASESSIONCHANGE"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetNombresClasesOrdenNavegacionFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESORDENR"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresIndicesNoBusquedanFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("INDICESNO"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public bool VerificarIndiceBusquedaTablaC(TableSchema table,String strNombreIndice) 
		{
			String strTablaClaseRelacionada=string.Empty;
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blVerificado=true;
			
			
				
				
				
				strClasesNoRelacionadas=GetNombresIndicesNoBusquedanFromTableFromPropertiesC(table);
				
				//System.Windows.Forms.MessageBox.Show(strClasesNoRelacionadas);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(strNombreIndice)||strClase.Equals("NINGUNO"))
					{
						blVerificado=false;
						break;
					}
				}
						
								
			return blVerificado; 
		}
		
	public  bool VerificarTablaRelacionFromPropertiesC(TableSchema tableRelacionada)
	{
	
		bool verificado=true;
		
		String[] descripciones;
		String[] tipo;
		String relacion;
		
		if(tableRelacionada.Description!="")
		{
			
			descripciones=tableRelacionada.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBRELACIONESNO"))
							{
								relacion=tipo[1];
																
								if(relacion=="false")
								{
									verificado=false;
									break;
								}
																
							}
						}
		}
		
		return verificado;
	}
	
	public bool VerificarColumnaCatalogoGeneralC(ColumnSchema columnSchema)
	{
	bool blnVerificado=false;
	bool blnTieneNombreColumnaValor=false;
	bool blnTieneNombreTablaValor=false;
	bool blnTieneNombreColumnaLista=false;
	bool blnTieneNombreTablaLista=false;
	
	TableSchema tableSchemaFkValor=null;
	ColumnSchema columnSchemaValorEncontrado=null;
	TableSchema tableSchemaFkLista=null;
	
	if(columnSchema.Name.Contains(strCatalogoGeneralValor)) {
		blnTieneNombreColumnaValor=true;
	}
	
	if(blnTieneNombreColumnaValor) {
		tableSchemaFkValor=GetTableSchemaFromColumnForeignKey(columnSchema);
		
		if(tableSchemaFkValor!=null) {
		if(tableSchemaFkValor.Name.Contains(strCatalogoGeneralValor)) {
			blnTieneNombreTablaValor=true;
		}
		
		if(blnTieneNombreTablaValor) {
			foreach (ColumnSchema columnSchemaValor in tableSchemaFkValor.Columns){	
				if(columnSchemaValor.IsForeignKeyMember && columnSchemaValor.Name.Contains(strCatalogoGeneralLista)) {
					blnTieneNombreColumnaLista=true;
					columnSchemaValorEncontrado=columnSchemaValor;
					break;
				}
			}
			
			if(blnTieneNombreColumnaLista) {
				tableSchemaFkLista=GetTableSchemaFromColumnForeignKey(columnSchemaValorEncontrado);
				
				if(tableSchemaFkLista.Name.Contains(strCatalogoGeneralLista)) {
					blnTieneNombreTablaLista=true;
				}
			}
		}
		}
	}
	
		if(blnTieneNombreColumnaValor && blnTieneNombreTablaValor && blnTieneNombreColumnaLista && blnTieneNombreTablaLista) {
			blnVerificado=true;
		} else {
			blnVerificado=false;
		}
	
		return blnVerificado;
	}
	
	public bool VerificarTablaValorCatalogoGeneralC(TableSchema tableSchema)
	{
	bool blnVerificado=false;
	//bool blnTieneNombreColumnaValor=false;
	bool blnTieneNombreTablaValor=false;
	bool blnTieneNombreColumnaLista=false;
	bool blnTieneNombreTablaLista=false;
	
	//TableSchema tableSchemaFkValor=null;
	ColumnSchema columnSchemaValorEncontrado=null;
	TableSchema tableSchemaFkLista=null;
	
	/*
	if(tableSchema.Name.Contains(strCatalogoGeneralValor)) {
		blnTieneNombreColumnaValor=true;
	}
	*/
	
	//if(blnTieneNombreColumnaValor) {
		//tableSchemaFkValor=GetTableSchemaFromColumnForeignKey(columnSchema);
		
		if(/*tableSchemaFkValor*/tableSchema.Name.Contains(strCatalogoGeneralValor)) {
			blnTieneNombreTablaValor=true;
		}
		
		if(blnTieneNombreTablaValor) {
			foreach (ColumnSchema columnSchemaValor in /*tableSchemaFkValor*/tableSchema.Columns){	
				if(columnSchemaValor.IsForeignKeyMember && columnSchemaValor.Name.Contains(strCatalogoGeneralLista)) {
					blnTieneNombreColumnaLista=true;
					columnSchemaValorEncontrado=columnSchemaValor;
					break;
				}
			}
			
			if(blnTieneNombreColumnaLista) {
				tableSchemaFkLista=GetTableSchemaFromColumnForeignKey(columnSchemaValorEncontrado);
				
				if(tableSchemaFkLista.Name.Contains(strCatalogoGeneralLista)) {
					blnTieneNombreTablaLista=true;
				}
			}
		}
	//}
	
		if(/*blnTieneNombreColumnaValor &&*/ blnTieneNombreTablaValor && blnTieneNombreColumnaLista && blnTieneNombreTablaLista) {
			blnVerificado=true;
		} else {
			blnVerificado=false;
		}
	
		return blnVerificado;
	}
	
	public bool GetExistTagTableFromPropertiesC(TableSchema table,String strTag)
	{
		
	bool blnExist=false;
	
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strTag))
						{
							blnExist=true;
							break;
						}
					}
	}
	
	return blnExist;
	}
	
	public static string GetSpDescriptionTableC(TableSchema tableSchema,bool esConUpdate,String strDescriptions) {
		String strDescription="";
		
		String strAddOrUpdate=string.Empty;
	
		strAddOrUpdate="add";
		
		if(esConUpdate) {
			strAddOrUpdate="update";
			
		}
		strDescription+="\r\nEXEC sys.sp_"+strAddOrUpdate+"extendedproperty @name=N'MS_Description', @value=N'"+strDescriptions/*GetTableDescriptions(tableSchema)*/+"' ,@level0type=N'SCHEMA', @level0name=N'"+tableSchema.Owner+"', @level1type=N'TABLE', @level1name=N'"+tableSchema.Name+"'\r\n";
    	strDescription+="GO";
	
		return strDescription;
	}
	
	public static string GetSpDescriptionColumnC(TableSchema tableSchema,ColumnSchema columnSchema,bool esConUpdate,String strDescriptions) {
		String strDescription=GetSpDescriptionColumnC(tableSchema,columnSchema,esConUpdate,strDescriptions,false);
		
		return strDescription;
	}
	
	public static string GetSpDescriptionColumnC(TableSchema tableSchema,ColumnSchema columnSchema,bool esConUpdate,String strDescriptions,bool esEliminar) {
		String strDescription="";
		
		String strAddOrUpdate=string.Empty;
		String strValueDescription=string.Empty;
	
		strAddOrUpdate="add";
		strValueDescription=", @value=N'"+strDescriptions/*GetDescriptionsColumn(SourceDatabaseTables[i].Columns[j])*/+"'";
		
		if(esConUpdate) {
			strAddOrUpdate="update";
			
		}
		
		if(esEliminar) {
			strAddOrUpdate="drop";
			strValueDescription="";
		}
		
		strDescription="\r\nEXEC sys.sp_"+strAddOrUpdate+"extendedproperty @name=N'MS_Description'"+strValueDescription+" ,@level0type=N'SCHEMA', @level0name=N'"+tableSchema.Owner+"', @level1type=N'TABLE', @level1name=N'"+tableSchema.Name+"', @level2type=N'COLUMN', @level2name=N'"+columnSchema.Name+"'\r\n";								   
		strDescription+="GO\r\n";	
	
		return strDescription;
	}
	
	public static string GetActualDescriptionTableC(TableSchema tableSchema) {
		String strDescription="";
		
		strDescription=tableSchema.Description;
	
		return strDescription;
	}
	
	public static string GetActualDescriptionColumnaC(ColumnSchema columnSchema) {
		String strDescription="";
		
		//strDescription=columnSchema.Description;
		
		foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties) {
			if(extendedProperty.Name=="CS_Description") {
				strDescription=((String)extendedProperty.Value);
			}
		}
		
		return strDescription;
	}
	
	public static string GetColumnasVariablesGlobalesDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("COLUMNSVARGLOBAL")) {
					nombreTabla=tipo[1];
					break;
				}
			}
		}		
		
		return nombreTabla;
	}
	
	public static string GetClasesAutoReferenciadasGlobalesDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CLASESAUTOREF")) {
					nombreTabla=tipo[1];
					break;
				}
			}
		}		
		
		return nombreTabla;
	}
	
	public static bool ConFechaSistemaDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		bool esReporteProceso=false;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CONFECHASISTEMA")) {
					nombreTabla=tipo[1];
					esReporteProceso=true;
					break;
				}
			}
		}		
		
		return esReporteProceso;
	}
	
	public static string GetClasesNoDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CLASESNO")) {
					nombreTabla=tipo[1];
					break;
				}
			}
		}		
		
		return nombreTabla;
	}
	
	public static bool ExisteEnListaComasC(String sDescripcionListaComas,String sElementoBusqueda) {
		bool existe=false;
		String sClasesListaComas=sDescripcionListaComas;
			
		String[] sClases=sClasesListaComas.Split(',');
			
		foreach(String sClase in sClases) {						
			if(sClase.Equals(sElementoBusqueda)) {					
				existe=true;
				break;					
			}
		}		
				
		return existe;
	}
	
	public static bool GetEsReporteProcesoDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		bool esReporteProceso=false;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("ESREPORTEPROCESO")) {
					nombreTabla=tipo[1];
					esReporteProceso=true;
					break;
				}
			}
		}		
		
		return esReporteProceso;
	}
	
	public static bool EsColumnaVariableGlobalDataBaseFromPropertiesC(ColumnSchema columnSchema) {
		bool existe=EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema,false,false);
		
		return existe;
	}
	
	public static bool EsColumnaVariableGlobalDataBaseFromPropertiesC(ColumnSchema columnSchema,bool conTodos,bool soloConExisteNo) {
		bool existe=false;
		bool existeNo=false;
		
		if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {
			
			DatabaseSchema databaseSchema=columnSchema.Table.Database;
			
			String sClasesNoRelacionadas=GetColumnasVariablesGlobalesDatabaseFromPropertiesC(databaseSchema);
			
			String sClasesVarGlobalNo=GetVarGlobalNOTableFromPropertiesC(columnSchema.Table);
			
			String[] sClases=sClasesNoRelacionadas.Split(',');
			String[] sClasesNo=sClasesVarGlobalNo.Split(',');						
			
			foreach(String sClase in sClases) {						
				if(sClase.Equals(GetNombreColumnFromPropertiesInterno(columnSchema,true))) {					
					if(!conTodos) {
						foreach(String sClaseNo in sClasesNo) {
							//Trace.WriteLine(sClaseNo+"="+columnSchema.Name/*GetNombreColumnFromPropertiesInterno(columnSchema,true)*/);
							if(sClaseNo.Equals(GetNombreColumnFromPropertiesInterno(columnSchema,true))) {					
								existeNo=true;
							}
						}
					}
					
					if(!existeNo) {
						existe=true;
						break;
					}
				}
			}				
		}
		
		if(soloConExisteNo) {
			existe=existeNo;
		}
		
		return existe;
	}
	
	public static string GetVarGlobalNOTableFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("VARGLOBALNO"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
					break;
				}
						
			}
			
		//nombreColumna=nombreColumna.Replace("-IGUAL-","=");
		//nombreColumna=nombreColumna.Replace("-I-","=");
		
		return nombreColumna;
	}
	
	public int GetNumeroColumnasPrincipalOcultasC(TableSchema table)
	{
		int intNumeroColumnasForm=0;
			
		foreach(ColumnSchema columnSchema in table.Columns){		
			if(EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema) 
				|| EsColumnaVariableModuloGlobalC(columnSchema)
				|| GetNoInsertEditColumnFromPropertiesC(columnSchema)) {
				intNumeroColumnasForm++;
			}
		}
		
		return intNumeroColumnasForm;
	}
	
	public static bool EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(IndexSchema indexSchema,ColumnSchema columnSchema) {
		bool existe=false;
		
		if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {
			if(indexSchema.Name.Contains(strFK)) {
				if(EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema)) {
					existe=true;
				}
			}
		}
		
		return existe;
	}
	
	public static bool EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(IndexSchema indexSchema) {
		bool existe=false;
		ColumnSchema columnSchema=null;
		
		
			if(indexSchema.Name.Contains(strFK)) {
				
				foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
					columnSchema=memberColumnSchema.Column;
					
					if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(indexSchema.Table)) {
						//,ColumnSchema columnSchema
						if(EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema)) {
							existe=true;
							break;
						}
					}
				}
			}
		
		
		return existe;
	}
	
	public static bool TieneGlobalVariableColumnC(TableSchema tableSchema) {
		bool existe=false;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			if(columnSchema.IsForeignKeyMember) {
				if(EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema) || EsColumnaVariableModuloGlobalC(columnSchema)) {
					existe=true;
				}
			}
		}
		
		return existe;
	}
	
	public int NumeroBusquedasFkArbolC(TableSchema tableSchema) {
		int iNumeroBusquedas=0;
		bool esAutoReferenciadaFk=false;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			if(columnSchema.IsForeignKeyMember) {
				TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(columnSchema);
				esAutoReferenciadaFk=GetEsAutoReferenciadaTablaC(tableSchemaFk);
				
				if(esAutoReferenciadaFk) {
					iNumeroBusquedas++;
				}
			}
		}
		
		return iNumeroBusquedas;
	}
	
	public static bool EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(IndexSchema indexSchema,ColumnSchema columnSchema) {
		bool existe=false;
		
		if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {
			if(indexSchema.Name.Contains(strFK)) {
				if(EsColumnaVariableModuloGlobalC(columnSchema)) {
					existe=true;
				}
			}
		}
		
		return existe;
	}
	
	public static bool EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(IndexSchema indexSchema) {
		bool existe=false;
		ColumnSchema columnSchema=null;
		
			if(indexSchema.Name.Contains(strFK)) {
				foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
					columnSchema=memberColumnSchema.Column;
					
					if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {		
						if(EsColumnaVariableModuloGlobalC(columnSchema)) {
							existe=true;
							break;
						}
					}
				}
			}
		
		
		return existe;
	}
	
	
	
	public static bool GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESMANTVARGLOBAL"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool EsColumnaVariableModuloGlobalC(ColumnSchema columnSchema) {
		bool existe=EsColumnaVariableModuloGlobalC(columnSchema,false,false);
		
		return existe;
	}
	
	public static bool EsColumnaVariableModuloGlobalC(ColumnSchema columnSchema,bool conTodos,bool soloConExisteNo) {
		bool existe=false;
		bool existeNo=false;
		
		if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {
			String sClase="";	
			//Trace.WriteLine(strIdModulo);
			//if(strIdModulo.Equals(GetNombreColumnFromPropertiesInterno(columnSchema,true))) {
			if(strIdModulo.Equals(columnSchema.Name)) {
				//existe=true;
				
				String sClasesVarGlobalNo=GetVarGlobalNOTableFromPropertiesC(columnSchema.Table);			
				String[] sClasesNo=sClasesVarGlobalNo.Split(',');
				
				if(!conTodos) {
					foreach(String sClaseNo in sClasesNo) {
						//Trace.WriteLine(sClaseNo+"="+columnSchema.Name/*GetNombreColumnFromPropertiesInterno(columnSchema,true)*/);
						if(sClaseNo.Equals(GetNombreColumnFromPropertiesInterno(columnSchema,true))) {					
							existeNo=true;
						}
					}
				}
				
				if(!existeNo) {
					existe=true;
				}									
			}
		}
		
		if(soloConExisteNo) {
			existe=existeNo;
		}
		
		return existe;
	}
	
	public static string GetNombreTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	
	if(blnEsLowerCaseDBNames) {
		nombreTabla=table.Name.ToLower();
	} else {
		if(blnEsMixedCaseDBNames) {
			nombreTabla=table.Name;
		} else {
			nombreTabla=table.Name.ToUpper();
		}
		
	}
	
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NOMBRE"))
						{
							nombreTabla=tipo[1];
							
							if(blnEsLowerCaseDBNames) {
								nombreTabla=nombreTabla.ToLower();
							} else {
								if(blnEsMixedCaseDBNames) {
									//nombreTabla=nombreTabla;
								} else {
									nombreTabla=nombreTabla.ToUpper();
								}
								
							}
							
							break;
						}
					}
	}
	
	string strPorTablaPrefijoNombreTemp=GetNombrePrefijoTableFromPropertiesC(table);
	
	//SI EXISTE GLOBAL ASIGNAR EL ATRIBUTO
	/*
	if(strGlobalPrefijoDBNombreTablas!=null && !strGlobalPrefijoDBNombreTablas.Equals(string.Empty) && strGlobalPrefijoDBNombreTablas.Length>0) {
		strPorTablaPrefijoNombreTemp=strGlobalPrefijoDBNombreTablas;	
	} 
	*/
	
	//return strPorTablaPrefijoNombreTemp + nombreTabla;
	
	return nombreTabla;
	
	}
	
		public static string GetNombrePrefijoTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String signoSeparador="_";
	
	if(blnEsLowerCaseDBNames) {
		//nombreTabla=table.Name.ToLower();
	} else {
		if(blnEsMixedCaseDBNames) {
			//nombreTabla=table.Name;
		} else {
			//nombreTabla=table.Name.ToUpper();
		}
		
	}
	
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("PREFIJOTABLA"))
						{
							nombreTabla=tipo[1];
							
							if(!nombreTabla.Equals("")) {
								if(blnEsLowerCaseDBNames) {
									nombreTabla=nombreTabla.ToLower();
								} else {
									if(blnEsMixedCaseDBNames) {
										//nombreTabla=nombreTabla;
									} else {
										nombreTabla=nombreTabla.ToUpper();
									}
									
								}
								
								nombreTabla=nombreTabla;//+signoSeparador;
							}
							
							break;
						}
					}
	}
	
	
	
	return nombreTabla;
	}
	
	public static bool GetConAuditoriaTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONAUD"))
						{
							nombreTabla=tipo[1];
							if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
							}
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConNoLoadForeignKeyTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("FKNOLOAD")) {
					nombreTabla=tipo[1];
					blnConAuditoria=true;
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetConCargarPorParteTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CONCARGAR_PARTE")) {
					nombreTabla=tipo[1];
					blnConAuditoria=true;
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetConBusquedaForeignKeyTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CONBUSQUEDA")) {
					nombreTabla=tipo[1];
					blnConAuditoria=true;
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetSinActualizarForeignKeyTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("SINFK_ACTUALIZAR")) {
					nombreTabla=tipo[1];
					blnConAuditoria=true;
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelSinTitulosTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELSINTITULOS")) {
					nombreTabla=tipo[1];
					
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelSinBasicoTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELSINBASICO")) {
					nombreTabla=tipo[1];
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelSinToolBarTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELSINTOOLB")) {
					nombreTabla=tipo[1];
					
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		//Trace.WriteLine(blnConAuditoria);
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelSinMenuTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELSINMENU")) {
					nombreTabla=tipo[1];
					
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		//Trace.WriteLine(blnConAuditoria);
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelConTabTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELCONTAB")) {
					nombreTabla=tipo[1];
					
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static string GetPanelTab_TabAlignTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="";//GetNombreClaseC(table.ToString()).ToUpper();
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELCONTAB_TABALIGN"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
		public static string GetPanelTabBusqueda_AlignTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="";//GetNombreClaseC(table.ToString()).ToUpper();
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("TABSBUSQ_ALIGN"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public static bool GetPanelConUbicacionTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELCONUBICACION")) {
					nombreTabla=tipo[1];
					
					if(nombreTabla=="true") {
						blnConAuditoria=true;
					}
					
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static string GetConExtraCodeTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=string.Empty;//table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONEXTCOD"))
						{
							nombreTabla=tipo[1];
							//if(nombreTabla.Equals("true")) {
								//blnConAuditoria=true;
							//}
							break;
						}
					}
	}							
	//return blnConAuditoria;
	return nombreTabla;
	}
	
	public static bool GetCakeConUsesTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CAKEUSES"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	
	public static bool GetConStoreProceduresTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONSTORE"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static string GetAuditoriaCommentTableFromProperties(TableSchema table)
	{
		String strComment="";
		
		if(!GetConAuditoriaTableFromProperties(table))						
		{
			strComment="//";
		}
	return strComment;
	}
	
	public static bool GetConJavaScriptIncludeTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONJAVASCRIPTIE"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}
	
	
	return blnConAuditoria;
	}
	
	public static bool GetConDivResumenTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONDIVRESUMEN"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}
	
	
	return blnConAuditoria;
	}
	
	public static bool GetConJQueryTableC(TableSchema table)	{
		bool blnConJQuery=false;
		
		blnConJQuery=GetConDivResumenTableFromPropertiesC(table);
		
		if(blnConJQuery){
			return blnConJQuery;
		}
		
		return blnConJQuery;
	}
	
	public static bool GetConRegistreseTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONREGISTRESE"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}
	
	
	return blnConAuditoria;
	}
	
	
	public bool EsTablaUnoAUnoFk(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			if(!blnNoStandardTableFromProperties) {
				foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
					if(columnSchema.IsPrimaryKeyMember && columnSchema.Name.Equals(strId) && columnSchema.IsForeignKeyMember) {
						blContiene=true;
						break;
					}
				}
			}
			return blContiene;			
		}
		
	public String NombreTablaUnoAUnoPk(TableSchema TablaBase) 
		{
			String strNombreTablaPk="";
			//bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.IsPrimaryKeyMember && columnSchema.Name.Equals(strId) && columnSchema.IsForeignKeyMember) {
					strNombreTablaPk=GetNombreClaseRelacionadaFromColumn(columnSchema,true);//blContiene=true;
					break;
				}
			}
			
			return strNombreTablaPk;			
		}
	
	public bool TieneIdentityColumnC(TableSchema tableSchema) {
		bool blnValidacionPK=false;
		
		foreach(ColumnSchema columnSchemaPK in tableSchema.Columns) {
			if(!columnSchemaPK.IsForeignKeyMember && columnSchemaPK.IsPrimaryKeyMember) {
				foreach(ExtendedProperty extendedProperty in columnSchemaPK.ExtendedProperties) {
					if(extendedProperty.Name.Equals("CS_IsIdentity")) {
						if(extendedProperty.Value.Equals(true)) {
							blnValidacionPK=true;								
							break;
							//if(!GetNoIdTableFromPropertiesC(columnSchemaPK.Table) && !GetNoIdentityTableFromPropertiesC(columnSchemaPK.Table)) {
								//blnValidacionPK=false;
								
								//PUEDE NO VALIDAR IDENTITY PERO DEBEN SER TABLAS CON NOMBRE ESTADO
								/*
								if(!C1_EsConPkNOAutoNumerico || (C1_EsConPkNOAutoNumerico && !table.Name.Contains("Estado"))) {
									blnValidacionPK=true;
									strValidation +="No es identity </br>\r\n";
									
								}
								*/
							//}							
						} else {
							
						}
					}
				}
				
				if(blnValidacionPK){
					break;
				}
			}	
		}
		
		return blnValidacionPK;
	}
	
	public bool GetConMaximoRelacionesC(TableSchema tableSchema) {
		bool blnValidacionPK=true;
		
		//Trace.WriteLine(GetNumeroClasesRelacionadasFinalC(tableSchema));
		
		if((GetNumeroClasesRelacionadasFinalC(tableSchema) >12 && (GetNombresClasesNoNavegacionFromTableFromPropertiesC(tableSchema).Equals("") && GetNombresClasesSiNavegacionFromTableFromPropertiesC(tableSchema).Equals(""))) || GetNombresClasesNoNavegacionFromTableFromPropertiesC(tableSchema).Equals(strNINGUNO) || GetNombresClasesSiNavegacionFromTableFromPropertiesC(tableSchema).Equals(strNINGUNO)) {
			 blnValidacionPK=false;			
		}
		
		return blnValidacionPK;
	}
	
	public string GetNombreClaseRelacionadaFromColumn(ColumnSchema column)
	{
		String nombreClase="NONE";
				
		//ANTES FUNCIONABA PERO SIN CATALOGOS GENERALES
		//nombreClase=GetNombreClaseRelacionadaFromColumn(column,false);
		
		TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);;
		
		if(tableSchemaFK!=null) {
			nombreClase=tableSchemaFK.ToString().Replace(tableSchemaFK.Owner+".","");
		} else {
			nombreClase=GetNombreClaseRelacionadaFromColumn(column,false);
		}
		
		/*
		//nombreClase=GetNombreClaseRelacionadaFromColumn(column,false);
		TableSchema tableSchema=GetTableSchemaFromColumnForeignKey(column);
		
		//Trace.WriteLine(column.Table.Name+":"+column.Name);
		
		nombreClase=GetNombreClaseC(tableSchema.ToString());
		*/
		
		return nombreClase;
	}
	
	//SI ES true ES PARA RELACION UNO A UNO	
	public static string GetNombreClaseRelacionadaFromColumn(ColumnSchema column,bool blnEsParaUnoAUno)
	{
	String nombreClase="NONE";
	String tabla=column.Name.Replace(strId,"");
	String[] descripciones;
	String[] tipo;
	
	if(tabla!="") {	
		if(!blnEsParaUnoAUno) {
			nombreClase=GetNombreClaseRelacionadaImproveFromColumn(column);//column.Name.Substring(2,column.Name.Length-2);//tabla;
		} else {
			nombreClase="";
		}
	}
	else
	{
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TABLA"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	}
	
	return nombreClase;
	}
	
	public bool ContieneColumna(TableSchema TablaBase,String sNombrecolumna) {
			bool blContiene=false;
			
			blContiene=ContieneColumna(TablaBase,sNombrecolumna,false);
			
			return blContiene;
		}
		
		public bool ContieneColumna(TableSchema TablaBase,String sNombrecolumna,bool conEsReporteParametro) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(columnSchema.Name.Equals(sNombrecolumna)) {
					if(!conEsReporteParametro) {
						blContiene=true;
						break;
					} else {
						if(GetEsReporteParametroFromPropertiesC(columnSchema)) {
							blContiene=true;
							break;
						}
					}
				}
			}
			
			return blContiene;			
		}
		
	public bool ConSeguridadCampo(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(GetConSeguridadColumnFromPropertiesC(columnSchema)) {
					blContiene=true;
					break;
				}
			}
			//System.Windows.Forms.MessageBox.Show(blContiene.ToString());
			return blContiene;			
		}
		
	public bool ConAuditoriaAuto(TableSchema TablaBase) {
			bool blContiene=false;
			
			blContiene=GetConAutoAuditoriaTableFromProperties(TablaBase);
			//System.Windows.Forms.MessageBox.Show(blContiene.ToString());
			return blContiene;			
		}
		
	//CON ESTA FUNCION PERMITE TENER MAS DE 1 FOREIGN KEY CON LA MISMA TABLA
	public static string GetNombreClaseRelacionadaImproveFromColumn(ColumnSchema column)
	{
		String nombreClase=column.Name.Substring(2,column.Name.Length-2);
		bool existeNombreClase=false;
		
		foreach(TableSchema tableSchema in column.Database.Tables) {
			if(nombreClase.Equals(tableSchema.Name)) {
				existeNombreClase=true;
			}
		}
		
		String strUltimaPalabra="";
		String strUltimaPalabraOrdenada="";
		
		char charActual='a';
		
			
			
		if(!existeNombreClase) {
			for(int i=nombreClase.ToCharArray().Length-1;i>-1;i--) {
				charActual=nombreClase.ToCharArray()[i];
				strUltimaPalabra+=charActual.ToString();
					
				if(Char.IsUpper(charActual)) {
					break;
				}
			}
			
			for(int j=strUltimaPalabra.ToCharArray().Length-1;j>-1;j--) {
				charActual=strUltimaPalabra.ToCharArray()[j];
				
				strUltimaPalabraOrdenada+=charActual.ToString();
			}
			
			nombreClase=nombreClase.Replace(strUltimaPalabraOrdenada,"");
			//Trace.WriteLine(column.Name+"-->"+nombreClase);
		
		}
		
		return nombreClase;
	}
	
	public static bool GetConOriginalTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONORIG"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static string GetOriginalCommentTableFromProperties(TableSchema table)
	{
		String strComment="";
		
		if(!GetConOriginalTableFromProperties(table)&&!GetConAuditoriaTableFromProperties(table))						
		{
			strComment="//";
		}
	return strComment;
	}
	
	public static string GetSchemaTableFromProperties(TableSchema table,String strSchema)
	{
	String nombreTabla=strSchema;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("SCHEMA"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}
	
	//SI EXISTE GLOBAL ASIGNAR EL ATRIBUTO 
	if(strGlobalConexionSchema!=null && !strGlobalConexionSchema.Equals(string.Empty) && strGlobalConexionSchema.Length>0) {
		nombreTabla=strGlobalConexionSchema;	
	} 
	
	return nombreTabla;
	}
	
	public static string GetNombreOrderColumnFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
		
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			foreach(ColumnSchema column in tableSchema.Columns)
			{
				
				
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("WEBORDEN"))
								{
									if(blExiste)
									{
										nombreColumna+=",";
									}
									else
									{
										blExiste=true;
									}
																		
									nombreColumna+=" "+GetNombreColumnFromProperties(column)+" "+tipo[1]+" ";
									break;
								}
							}
					}
							
				}
			}
		
					
		if(!blExiste)
		{
			return "";
		}
		
		return "\" order by "+nombreColumna+"\"+";
	}
	
	public static bool GetEsRompimientoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";nombreColumna+="";
		
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESROMPIMIENTO"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsGuardarRelacionesFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESGUARDARREL"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsGuardarRelacionesPorParteFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESGUARDARREL_PORPARTE"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsInternoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";nombreColumna+="";
		
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESINTERNO"))
								{
									if(tipo[1].Equals("true")){
										blExiste=true;
									}
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsReporteFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";nombreColumna+="";
		
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTE"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsReporteParaGrupoReporteFromPropertiesC(TableSchema tableSchema)	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
					
		String strValorParametroReporte="";	
		String sNombreGrupo="";		
				
		foreach (ColumnSchema column in tableSchema.Columns) {
			sNombreGrupo=GetReporteGrupoTableFromPropertiesC(column);
			
			if(!sNombreGrupo.Equals("")) {
				blExiste=true;
				break;
			}
		}
		
		return blExiste;
	}
	
	public static bool GetEsReporteGuardarFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTEGUARDAR"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsReporteAdditionalFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTEADDITIONAL"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsTablaModuloFromPropertiesC(TableSchema tableSchema)	{
		bool blExiste=false;
		
		if(tableSchema.Name.Equals(tableSchema.Owner)) {
			 blExiste=true;
		}
		
		return blExiste;
	}
	public static bool GetEsReporteVistaFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTEVISTA"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsProcesoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESPROCESO"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsProcesoParamFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESPROCESOPARAM"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsMenuFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";nombreColumna+="";
		
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESMENU"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetExisteWhereFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("EXISTEWHERE"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetPermiteInsertarFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";nombreColumna+="";
		
		
		String[] descripciones;
		String[] tipo;
		bool blPermite=true;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("INSERTNO"))
								{
									
									blPermite=false;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blPermite;
	}
	
	public static bool GetSinTituloColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("SINTITULO"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetBusquedaForeignKeyColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONBUSQUEDA"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetEsNuevaFilaColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESNUEVAFILA"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetConEventChangeColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTCHANGE"))
								{
									if(tipo[1].Equals("true")) {
										blExiste=true;
									}
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static /*bool*/String GetConEventDependColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		String strValor="";
		
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTDEPEND"))
								{
									blExiste=true;
									strValor=tipo[1];
									
									break;
								}
								
							}
					}							
				}
						
		return strValor;//blExiste;
	}
	
	public static /*bool*/String GetConEventUpdatesColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		String strValor="";
		
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTUPDATES"))
								{
									blExiste=true;
									strValor=tipo[1];
									
									break;
								}
								
							}
					}							
				}
						
		return strValor;//blExiste;
	}
	
	public static /*bool*/String GetConEventUpdatesNingunoColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		String strValor="";
		
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTUPDATESNINGUNO"))
								{
									blExiste=true;
									strValor=tipo[1];
									
									break;
								}
								
							}
					}							
				}
						
		return strValor;//blExiste;
	}
	
	public static /*bool*/String GetConEventSetParentDependColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		String strValor="";
		
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTDEPENDSETPARENT"))
								{
									blExiste=true;
									strValor=tipo[1];
									
									break;
								}
								
							}
					}							
				}
						
		return strValor;//blExiste;
	}
	
	public static /*bool*/String GetConEventQueryDependColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		String strValor="";
		
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTDEPENDQUERY"))
								{
									blExiste=true;
									strValor=tipo[1];
									
									break;
								}
								
							}
					}							
				}
						
		return strValor;//blExiste;
	}
	
	public static bool GetConValidacionTodoColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("VALIDACIONTODO"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static string GetNumTabuladorForeignKeyColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("NUMTABUL"))
								{
									nombreColumna=tipo[1];
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return nombreColumna;
	}
	
	public static bool GetEsReporteColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTE"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetConAuditoriaColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=true;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONAUD"))
								{
									blExiste=false;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static String GetConExtraCodeColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";//nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		String nombreTabla=string.Empty;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								
								
								if(tipo[0].Equals("CONEXTCOD"))
								{
									nombreTabla=tipo[1];
								
									//if(nombreTabla.Equals("true")) {
										//blExiste=true;
									
										break;
									//}
									
								}
								
							}
					}							
				}
						
		//return blExiste;
		return nombreTabla;
	}
	
	//BYDAN_VERIFY
	/*
	public static string GetNombreColumnFromProperties(ColumnSchema column)	{
		return GetNombreColumnFromPropertiesInterno(column,false);
	}
	*/
	
	public static string GetNombreColumnFromPropertiesC(ColumnSchema column,bool blnParaSql)	{
		return GetNombreColumnFromPropertiesInterno(column,blnParaSql);
	}
	
	public static string GetNombreColumnFromPropertiesInterno(ColumnSchema column,bool blnParaSql)
	{
	String nombreColumna="";
	
	if(column==null) {
		return nombreColumna;
	}
	
		if(blnEsLowerCaseDBNames) {
			nombreColumna=GetNombreConSeparacionC(column.Name).ToLower();
		} else {	
			if(blnEsMixedCaseDBNames) {
				nombreColumna=column.Name;
			} else {
				nombreColumna=GetNombreConSeparacionC(column.Name).ToUpper();
			}
		}
	
	
	String[] descripciones;
	String[] tipo;
	
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NOMBRE"))
						{
							nombreColumna=tipo[1];
							
							if(blnEsLowerCaseDBNames) {
								nombreColumna=nombreColumna.ToLower();
							} else {	
								if(blnEsMixedCaseDBNames) {
									nombreColumna=nombreColumna;
								} else {
									nombreColumna=nombreColumna.ToUpper();
								}
							}
							break;
						}
					}
			}
					
		}
	
		if(column.Name.Equals(strId)&&column.IsPrimaryKeyMember&&nombreColumna.Equals(strIdDB)) {
			//Trace.WriteLine(column.Table.Name+"-"+nombreColumna+"="+strIdDB);
			if(!blnParaSql) {
				nombreColumna="ConstantesSql.ID";
			} else {
				nombreColumna=strIdDB;
			}
		}
		
		if(column.Name.Equals(strVersionRow)/* && nombreColumna.Equals(strVersionRowDB)*/) {
			//Trace.WriteLine(column.Table.Name+"-"+nombreColumna+"="+strVersionRowDB);						
			if(!blnParaSql) {
				nombreColumna="ConstantesSql.VERSIONROW";
			} else {
				nombreColumna=strVersionRowDB;
			}
		}
		
		return nombreColumna;
	}
	
	public static bool GetConAutoAuditoriaTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONAUDAUTO"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static string GetNombreColumnFromProperties(ColumnSchema column)
	{
	String nombreColumna=column.Name;
	String[] descripciones;
	String[] tipo;
	
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NOMBRE"))
						{
							nombreColumna=tipo[1];
							break;
						}
					}
			}
					
		}
				
	return nombreColumna;
	}
	
	public String GetIdNameC(TableSchema tableSchema) {
		String strIdName=string.Empty;
	
		strIdName=GetIdNameC(tableSchema,false);
		
		return strIdName;
	}
	
	public String GetIdNameC(TableSchema tableSchema,bool esParaLabel) {
	String strIdName=string.Empty;
	String strIdNameValue=string.Empty;
	
	for (int i = 0; i < tableSchema.Columns.Count; i++){
		if(tableSchema.Columns[i].Name.Equals(strId)&&tableSchema.Columns[i].IsPrimaryKeyMember) {
			if(!esParaLabel) {
				strIdNameValue=GetNombreColumnFromProperties(tableSchema.Columns[i]);
			} else {
				strIdNameValue=GetWebNombreTituloColumnFromPropertiesC(tableSchema.Columns[i]);	
			}
			
			if(!strIdNameValue.Equals("ConstantesSql.ID")) {
				strIdName="'"+strIdNameValue+"'";
			}
			
			//TAMANIO PROMEDIO ID,OID
			if(strIdName.Length<5) {
				strIdName=""+strIdName+"";
			}
			
			break;
		}
	}
	
	if(strIdName==string.Empty) {
		strIdName="ConstantesSql.ID";
	}
	
	return strIdName;
				
}
	
	public String GetVersionRowNameC(TableSchema tableSchema) {
		String strIdName=string.Empty;
	
		strIdName=GetVersionRowNameC(tableSchema,false);
		
		return strIdName;
	}
	
	public String GetVersionRowNameC(TableSchema tableSchema,bool esParaLabel) {
	String strIdName=string.Empty;
	String strIdNameValue=string.Empty;
	
	for (int i = 0; i < tableSchema.Columns.Count; i++){
		if(tableSchema.Columns[i].Name.Equals(strVersionRow)) {						
			if(!esParaLabel) {
				strIdNameValue=GetNombreColumnFromProperties(tableSchema.Columns[i]);
			} else {
				strIdNameValue=GetWebNombreTituloColumnFromPropertiesC(tableSchema.Columns[i]);	
			}
			
			if(!strIdNameValue.Equals("ConstantesSql.VERSION_ROW")) {
				strIdName="'"+strIdNameValue+"'";
			}
			
			
			//TAMANIO PROMEDIO ID,OID
			/*
			if(strIdName.Length<5) {
				strIdName=""+strIdName+"";
			}
			*/
			
			break;
		}
	}
	
	if(strIdName==string.Empty) {
		strIdName="ConstantesSql.ID";
	}
	
	return strIdName;
				
}

	public  String GetDescripcionComboColumnFromProperties(TableSchema tableSchema)
	{
	
		
	string strPrefijoTabla="";strPrefijoTabla+="";
	string strPrefijoTipo =""; strPrefijoTipo +=""; 
	string strNombre = "";strNombre += "";
	
	String strColumnaDetalle="id";
	String[] descripciones;
	String[] tipo;
	
	foreach(ColumnSchema columnSchema in tableSchema.Columns)
	{
		if(columnSchema.Name==strId)
		{
			strColumnaDetalle=">get"+strIdGetSet+"()";//.toString()
		}
		
		foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBCOMBO"))
						{
							//if(tipo[1]=="true")
							//{
								strColumnaDetalle="->get"+GetNombreCompletoColumnaClaseC(columnSchema)+"()"+GetTipoColumnaToString(columnSchema);
							//}
							
							break;
						}
					}
			}
					
		}
	}
				
	return strColumnaDetalle;
	}
	
	public static bool GetTieneComboColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("WEBCOMBO"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public  ColumnSchema GetColumnSchemaComboColumnFromProperties(TableSchema tableSchema)
	{
	
	ColumnSchema columnSchemaDetalleCombo=null;
	
	string strPrefijoTabla="";strPrefijoTabla+="";
	string strPrefijoTipo =""; strPrefijoTipo +=""; 
	string strNombre = "";strNombre += "";
	
	String strColumnaDetalle="id";strColumnaDetalle+="";
	String[] descripciones;
	String[] tipo;
	
	foreach(ColumnSchema columnSchema in tableSchema.Columns)
	{
		if(columnSchema.Name==strId)
		{
			columnSchemaDetalleCombo=columnSchema;
		}
		
		foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBCOMBO"))
						{
							columnSchemaDetalleCombo=columnSchema;
							
							break;
						}
					}
			}
					
		}
	}
				
	return  columnSchemaDetalleCombo;
	}
	
	/*
	public  String GetDescripcionComboColumnFromProperties(TableSchema tableSchema)//PUEDE SER DE MAS DE 1 FK
	{
		return GetDescripcionComboColumnFromProperties(tableSchema,"");
	}
	*/
	
	public  String GetDescripcionComboColumnFromPropertiesFinalVersionC(TableSchema tableSchema,bool conVariableDescripcion)
	{			
		string strPrefijoTabla="";
			strPrefijoTabla+="";
		string strPrefijoTipo =""; 
			strPrefijoTipo +="";
		string strNombre = "";
			strNombre += "";
		bool blnExiste=false;
		String strColumnaDetalle="";
		String strColumnatoString="";
		String strColumnaDetalleId="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+strIdGetSet+"();";//.toString()
		String strColumnaDetalleCombo="";
		String[] descripciones;
		String[] tipo;
		
		if(!GetNoStandardTableFromPropertiesC(tableSchema)) {
			
			foreach(ColumnSchema columnSchema in tableSchema.Columns)
			{
				if(columnSchema.Name.Equals(strId)){
					strColumnaDetalleId="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+strIdGetSet+"();";//.toString()
				}
				
				foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("WEBCOMBO"))	{						
									
									//Trace.WriteLine(columnSchema.Name);
									if(blnExiste) {
										strColumnaDetalle+=".'-'.";	
									}
									//if(tipo[1]=="true")
									//{
										strColumnaDetalle+="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+GetNombreCompletoColumnaClaseC(columnSchema)+"()"+GetTipoColumnaToString(columnSchema);
									//}
									
									//break;
									
									if(!blnExiste) {
										blnExiste=true;
									}																
								}
							}
					}
							
				}
			}
			
			if(!blnExiste) {
				ColumnSchema columnSchemaCombo=GetColumnDescripcionComboComboC(tableSchema);
				
				if(columnSchemaCombo!=null) {				
					
					strColumnatoString="";
					
					if(!EsVarCharColumn(columnSchemaCombo) && !EsCharColumn(columnSchemaCombo)) {
						strColumnatoString="";//".toString()";
					}
					
					strColumnaDetalle="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+GetPrefijoTipoC(columnSchemaCombo)+GetNombreColumnaClaseC(columnSchemaCombo)+"()"+strColumnatoString+";";
									
				} else {
					strColumnaDetalle=strColumnaDetalleId;
				}
			} else {
				strColumnaDetalle+=";";
			}
		} else {				
			strColumnaDetalle="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+strIdGetSet+"();";//".toString();";
			
		}
		
		if(conVariableDescripcion) {
			strColumnaDetalle="$sDescripcion="+strColumnaDetalle;	
		}
		
		if(strColumnaDetalle.Contains(strColumnaDetalleId)) {
			strColumnaDetalle="if($"+GetNombreClaseObjetoC(tableSchema.ToString())+"->get"+strIdGetSet+"()!=null) {\r\n\t\t\t\t"+strColumnaDetalle;	
			strColumnaDetalle+="\r\n\t\t\t}";
		}
		return strColumnaDetalle;
	}
	
	public  String GetSetDescripcionComboColumnFromPropertiesFinalVersion(TableSchema tableSchema) {	
		string strPrefijoTabla="";
			strPrefijoTabla+="";
		string strPrefijoTipo =""; 
			strPrefijoTipo +="";
		string strNombre = "";
			strNombre += "";
		bool blnExiste=false;
		String strColumnaDetalle="";
		String strColumnatoString="";
		String strColumnaDetalleId="";
		String strColumnaDetalleCombo="";
		String[] descripciones;
		String[] tipo;
		
	if(!GetNoStandardTableFromPropertiesC(tableSchema)) {		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			if(columnSchema.Name==strId) {
				//strColumnaDetalleId=GetNombreClaseObjetoC(tableSchema.ToString())+".get"+strIdGetSet+"().toString();";
			}
			
			foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties) {
				if(extendedProperty.Name=="CS_Description") {
					descripciones=((String)extendedProperty.Value).Split('|');
						
					foreach(String descripcion in descripciones) {
						tipo=descripcion.Split('=');
							
						if(tipo[0].Equals("WEBCOMBO"))	{														
							//Trace.WriteLine(columnSchema.Name);
							if(blnExiste) {
								strColumnaDetalle+="\r\n";//"+\"-\"+";	
							}
							//if(tipo[1]=="true")
							//{
							if(EsVarCharColumn(columnSchema) || EsCharColumn(columnSchema)) {
								strColumnaDetalle+="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->set"+GetNombreCompletoColumnaClaseC(columnSchema)+"($sValor);";//+GetTipoColumnaToString(columnSchema);
							}
							
							//}
								
							//break;
								
							if(!blnExiste) {
								blnExiste=true;
							}
						}
					}
				}						
			}
		}
		
		if(!blnExiste) {
			ColumnSchema columnSchemaCombo=GetColumnDescripcionComboComboC(tableSchema);
			
			if(columnSchemaCombo!=null) {
				strColumnatoString="";
				
				if(EsVarCharColumn(columnSchemaCombo) || EsCharColumn(columnSchemaCombo)) {
					strColumnatoString="";//".toString()";
					strColumnaDetalle="$"+GetNombreClaseObjetoC(tableSchema.ToString())+"->set"+GetPrefijoTipoC(columnSchemaCombo)+GetNombreColumnaClaseC(columnSchemaCombo)+"($sValor)"+strColumnatoString+";";
				}								
			} else {
				strColumnaDetalle=strColumnaDetalleId;
			}
		} else {
			strColumnaDetalle+=";";
		}
	} else {
		//strColumnaDetalle=GetNombreClaseObjetoC(tableSchema.ToString())+".toString();";
	}
	
	
	return strColumnaDetalle;
	}
	
	public ColumnSchema GetColumnDescripcionComboComboC(TableSchema tableSchema) {
		ColumnSchema columnSchemaCombo=null;
		bool tiene=false;
		int i=1;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {			
			if(columnSchema.Name.Equals("Nombre")) {
				columnSchemaCombo=columnSchema;
				break;
			}
			
			if(EsVarCharColumn(columnSchema) && i<=5) {
				tiene=true;
				columnSchemaCombo=columnSchema;
			}
			
			if(!tiene && EsDateColumn(columnSchema)) {
				columnSchemaCombo=columnSchema;				
			}
			
			i++;
		}
		
		return columnSchemaCombo;
	}
	
	public static string GetWebNombreTituloColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBTITULO"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetTipoDescriptionGenericoColumnFromPropertiesC(ColumnSchema column,String strTipo)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strTipo))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetToolTipColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna=GetWebNombreTituloColumnFromPropertiesC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("TOOLTIP"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public string GetWebNombreTituloLowerColumnFromPropertiesC(ColumnSchema column) {
		bool tiene=false;
		return  GetWebNombreTituloLowerColumnFromPropertiesC(column,ref tiene);
	}
	
	public string GetWebNombreTituloLowerColumnFromPropertiesC(ColumnSchema column,ref bool tiene)
	{
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		bool existe=false;
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBTITULOLOWER"))
							{								
								nombreColumna=tipo[1];
								existe=true;
								tiene=true;
								break;
							}
						}
				}
						
			}
		
		if(!existe) {
			nombreColumna=GetWebNameDescriptionColumnBaseC(column,true,false);	
		}
		
		return nombreColumna;
	}
	
	public String GetWebNameDescriptionColumnBaseC(ColumnSchema columnSchema,bool blnEsLowerCase,bool conClaveDescripcion) {
		String strDescritionTabla=string.Empty;
		
		String strNameTable=string.Empty;
		String strCharNameTable=string.Empty;
		bool esPrimeraVez=true;
		String strColumnName=string.Empty;
		
		if(!columnSchema.IsForeignKeyMember) {
			//Trace.WriteLine(columnSchema.Name);
			
			//DESHABILITAR, NO REEMPLAZAR SI NO ES ID, PUEDEN EXISTIR COLUMNAS CON ID EN MEDIO NOMBRE
			/*
			if(!columnSchema.Name.Equals(strId)) {
				strColumnName=columnSchema.Name.Replace(strId,"");
			} else {
				strColumnName=columnSchema.Name;
			}			
			*/
			
			strColumnName=columnSchema.Name;
			
			if(columnSchema.Name.Equals(strVersionRow)) {
				esPrimeraVez=false;
			}
			
			foreach(Char charName in strColumnName.ToCharArray()) {
				strCharNameTable=charName.ToString();
				
				if(Char.IsUpper(charName)) {
					if(!esPrimeraVez) {
						strCharNameTable=" "+charName.ToString();//.ToLower();;
					} else {
						esPrimeraVez=false;
					}
				}
				
				strNameTable+=strCharNameTable;
			}
			
		} else {
			//Trace.WriteLine(columnSchema.Name);
			 strColumnName=columnSchema.Name.Replace("id","");
			
			foreach(Char charName in strColumnName.ToCharArray()) {
				strCharNameTable=charName.ToString();
				
				if(Char.IsUpper(charName)) {
					if(!esPrimeraVez) {
						strCharNameTable=" "+charName.ToString();//.ToLower();;
					} else {
						esPrimeraVez=false;
					}
				}
				
				strNameTable+=strCharNameTable;
			}
		}
	
		//LOS LABELS SIEMPRE VAN HACER MAYUSCULAS
		//if(!blnEsLowerCaseDBNames)
		//{
		
		if(!blnEsLowerCase) {
			strNameTable=strNameTable.ToUpper();
		}
		
		//}
		
		if(conClaveDescripcion) {
			strDescritionTabla+="|WEBTITULO=";
		}
		
		strDescritionTabla+=strNameTable;
		
		//Trace.WriteLine(strDescritionTabla);
	
		return strDescritionTabla;
	}
	
	public static string GetPanelFinNombreColumnFromPropertiesC(ColumnSchema column) {
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		
		nombreColumna=GetPanelFinNombreColumnFromPropertiesC(column,true);
		
		return nombreColumna;
	}
	
	public static string GetPanelFinNombreColumnFromPropertiesC(ColumnSchema column,bool conFormatoNombre)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELFIN"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
			
		if(!nombreColumna.Equals("")) {
			if(conFormatoNombre) {
				nombreColumna=nombreColumna.Replace(" ","_").ToLower();
			}
		}
		
				
		return nombreColumna;
	}
	
	public static string GetPanelInicioNombreColumnFromPropertiesC(ColumnSchema column) {
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		
		nombreColumna=GetPanelInicioNombreColumnFromPropertiesC(column,true);
		
		return nombreColumna;
	} 
	
	public static string GetPanelInicioNombreColumnFromPropertiesC(ColumnSchema column,bool conFormatoNombre)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELINI"))
							{								
								nombreColumna=tipo[1];								
								break;
							}
						}
				}
						
			}
		
		if(!nombreColumna.Equals("")) {
			if(conFormatoNombre) {
				nombreColumna=nombreColumna.Replace(" ","_").ToLower();
			}
		}
		
		return nombreColumna;
	}
	
	public static string GetPanelInicioNombreColumnReversaFromPropertiesC(String strNombrePanelInicio) {
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		
		nombreColumna=strNombrePanelInicio.Replace("_"," ").ToUpper();
		
		return nombreColumna;
	}
	
	public static string GetPanelFinNombreTableFromPropertiesC(TableSchema tableSchema)	{
		String nombreColumna="";
		
		nombreColumna=GetPanelFinNombreTableFromPropertiesC(tableSchema,false);
		
		return nombreColumna;
	}
	
	
	public static string GetPanelFinNombreTableFromPropertiesC(TableSchema tableSchema,bool conFormatoNombre)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELFIN"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		if(!nombreColumna.Equals("")) {
			if(conFormatoNombre) {
				nombreColumna=nombreColumna.Replace(" ","_").ToLower();
			}
		}
		
		return nombreColumna;
	}
	
	public static string GetPanelInicioNombreTableFromPropertiesC(TableSchema tableSchema,bool conFormatoNombre)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELINI"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		if(!nombreColumna.Equals("")) {
			if(conFormatoNombre) {
				nombreColumna=nombreColumna.Replace(" ","_").ToLower();
			}
		}
		
		return nombreColumna;
	}
	
	public static string GetPanelFinNombreReversaTableFromPropertiesC(String strNombre)	{
		String nombreColumna="";
		
		nombreColumna=strNombre.Replace("_"," ").ToUpper();
		
		return nombreColumna;
	}
	
	public static string GetTituloNuevaFilaColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("TITULOFILA"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static bool GetNoIdTableFromPropertiesC(TableSchema table) {
		bool blnNoId=false;
		String nombreTabla="s";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones) {
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null) {
								if(tipo[0].Equals("NOID")) {
									nombreTabla=tipo[1];
									blnNoId=true;
									break;
								}
							}
						}
		}
		
		return blnNoId;
	}
	
	public static bool GetNoIdentityTableFromPropertiesC(TableSchema table) {
		bool blnNoIdentity=false;
		String nombreTabla="s";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones) {
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null) {
								if(tipo[0].Equals("NOIDENTITY")) {
									nombreTabla=tipo[1];
									blnNoIdentity=true;
									break;
								}
							}
						}
		}
		
		return blnNoIdentity;
	}
	
	public static bool GetNoVersionRowTableFromPropertiesC(TableSchema table) {
		bool blnNoVersionRow=false;
		String nombreTabla="s";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones) {
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null) {
								if(tipo[0].Equals("NOVERSIONROW")) {
									nombreTabla=tipo[1];
									blnNoVersionRow=true;
									break;
								}
							}
						}
		}
		
		return blnNoVersionRow;
	}
	
	public bool GetNoStandardTableFromPropertiesC(TableSchema table) {
		bool blnNoStandard=false;
		String nombreTabla="s";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones) {
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null) {
								if(tipo[0].Equals("NOSTANDARD")) {
									nombreTabla=tipo[1];
									blnNoStandard=true;
									break;
								}
							}
						}
		}
		
		return blnNoStandard;
	}
	
	public string GetKeyListaColumnFromPropertiesC(ColumnSchema column)
	{
		TableSchema tableSchemaPK=GetTableSchemaFromColumnForeignKey(column);
		
		String nombreColumna=column.Name.Replace(strId+tableSchemaPK.Name,"").ToUpper();//=GetNombreColumnaClaseC(column).ToUpper();
		String[] descripciones;
		String[] tipo;
			
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties) {
				if(extendedProperty.Name=="CS_Description") {
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones) {						
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("KEYLISTA")) {								
								nombreColumna=tipo[1];
								break;
							}
						}
				}						
			}
				
		return nombreColumna;
	}
	
	public static string GetJavaScriptValidacionColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("JSVALIDACION"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetJavaValidacionColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("VALIDACION"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static bool GetNoEditColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("EDITNO"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetValidacionMinimoLengthColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("JSVALID_MINLEN"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
		
	public static bool GetEsPasswordColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ESPASSWORD"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public Boolean EsCampoNoValidacionColumnC(ColumnSchema columnSchema) {
		Boolean isValidacion=false;
		
		if(columnSchema.Name.Equals("Url")) {
			isValidacion=true;
		}
		
		return isValidacion;		
	}
			
	public Boolean EsPathImagenDocumentoArchivoColumn(ColumnSchema columnSchema) 
		{
			Boolean isPathImagenDocumento=false;
			String strPathImagen="PathImagen";
			String strPathDocumento="PathDocumento";
			String strPathArchivo="PathArchivo";
			
			if(columnSchema.Name.Contains(strPathImagen)
				||columnSchema.Name.Contains(strPathDocumento)
				||columnSchema.Name.Contains(strPathArchivo)) {
					
				 isPathImagenDocumento=true;
			}
			
			return isPathImagenDocumento;
		}
		
	public Boolean EsPathDocumentoColumn(ColumnSchema columnSchema) 
		{
			Boolean isPathDocumento=false;
			String strPathDocumento="PathDocumento";
			
			if(columnSchema.Name.Contains(strPathDocumento)) {
				 isPathDocumento=true;
			}
			
			return isPathDocumento;
		}
		
	public static int GetWebNumeroFilasColumnFromPropertiesC(ColumnSchema column,bool esParaEditarTabla) {
		int numeroFilasRows=column.Size/50;
		String[] descripciones;
		String[] tipo;
	
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties) {
			if(extendedProperty.Name=="CS_Description") {
				descripciones=((String)extendedProperty.Value).Split('|');
					
				foreach(String descripcion in descripciones) {
					tipo=descripcion.Split('=');
						
					if(tipo[0].Equals("WEBFILAS")) {
						if(int.TryParse(tipo[1],out numeroFilasRows)) {
								numeroFilasRows=int.Parse(tipo[1]);
							}
							
							break;
						}
				}
			}					
		}
				
		if(blnConJQueryCode) {
			if(!esParaEditarTabla) {
				if(numeroFilasRows>3) {
					numeroFilasRows=3;	
				}
			} else {
				if(numeroFilasRows>2) {
					numeroFilasRows=2;	
				}
			}
		}
		
		return numeroFilasRows;
	}
	
	public static bool TieneColumnaTipoTexto(ColumnSchema columnSchema)
	{
		bool tieneColumnaTexto=false;
	
		//foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
		//{
			if(columnSchema.DataType==DbType.AnsiString ||columnSchema.DataType==DbType.AnsiStringFixedLength ||columnSchema.DataType==DbType.String||columnSchema.DataType==DbType.StringFixedLength)
			{
				tieneColumnaTexto=true;
			}
		//}
								
		return tieneColumnaTexto;
	}
	
	public static bool TieneColumnaTipoTexto(IndexSchema indexSchema)
	{
		bool tieneColumnaTexto=false;
	
		foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
		{
			if(memberColumnSchema.DataType==DbType.AnsiString ||memberColumnSchema.DataType==DbType.AnsiStringFixedLength ||memberColumnSchema.DataType==DbType.String||memberColumnSchema.DataType==DbType.StringFixedLength)
			{
				tieneColumnaTexto=true;
			}
		}
								
		return tieneColumnaTexto;
	}
	
	public static bool TieneColumnaEsDefectoC(TableSchema tableSchema) {
		bool tieneColumnaTexto=false;
	
		if(tableSchema.Columns.Count<8) {
			foreach(ColumnSchema columnSchema in tableSchema.Columns){
				if(columnSchema.Name.Equals("EsDefecto")) {
					tieneColumnaTexto=true;
					break;
				}
			}
		}		
		
		return tieneColumnaTexto;
	}
	
	public static bool TieneIdentityColumnC(ColumnSchema columnSchemaPK) {
		bool blnValidacionPK=true;
		
		if(!columnSchemaPK.IsForeignKeyMember && columnSchemaPK.IsPrimaryKeyMember) {
			foreach(ExtendedProperty extendedProperty in columnSchemaPK.ExtendedProperties) {
				if(extendedProperty.Name.Equals("CS_IsIdentity")) {
					if(extendedProperty.Value.Equals(false)) {
						if(!GetNoIdTableFromPropertiesC(columnSchemaPK.Table) && !GetNoIdentityTableFromPropertiesC(columnSchemaPK.Table)) {
							blnValidacionPK=false;
							
							//PUEDE NO VALIDAR IDENTITY PERO DEBEN SER TABLAS CON NOMBRE ESTADO
							/*
							if(!C1_EsConPkNOAutoNumerico || (C1_EsConPkNOAutoNumerico && !table.Name.Contains("Estado"))) {
								blnValidacionPK=true;
								strValidation +="No es identity </br>\r\n";									
							}
							*/
						}
					}
				}
			}
		}	
			
		return blnValidacionPK;
	}
	
	public static bool EsClaseRelacionadaUnoAUnoFromColumnC(ColumnSchema column)
	{
	String nombreClase="NONE";
	String tabla=column.Name.Replace(strId,"");
	String[] descripciones;
	String[] tipo;
	bool esRelacionUnoAUno=false;
	
	if(tabla=="")
	{
		esRelacionUnoAUno=true;
			
	}
		return esRelacionUnoAUno;
	}
	
	public TableSchema GetNombreTablaRelacionadaFromColumn(ColumnSchema column)
	{
	
		System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(column.Table);
		String strNombreColumna=GetNombreColumnFromProperties(column);
		String strTablaEncontrada=GetNombreClaseRelacionadaFromColumn(column);
		
			
			foreach(TableSchema tableSchema in column.Table.Database.Tables)
			{
				
				if(strTablaEncontrada==GetNombreClaseC(tableSchema.ToString()))
				{
					strTablaEncontrada=GetNombreTableFromProperties(tableSchema);
					
					break;
				}
			}
		
		
	
		TableSchema tableSchemaEncontrada=GetTablaFromNombreC(strTablaEncontrada,column.Table);
		
		
		return tableSchemaEncontrada;
	}
	
	public String GetAddClassesForeignKeyC(TableSchema TablaBase,bool conNombresClases)	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		String strElse="";
		
		if(conNombresClases) {
			strClassesForeignKey+="\r\n\r\n\t\t\t\tforeach($arrClasses as $sClasse) {";
		}
		
		foreach(ColumnSchema columnSchema in TablaBase.Columns) {										
			if(columnSchema.IsForeignKeyMember) {
				tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
				
				if(!conNombresClases) {
					strClassesForeignKey+="\r\n\t\t\t\t$classes[]=new Classe("+GetNombreClaseC(tableSchema.ToString())+"::$class);";
				} else {
					//strClassesForeignKey+="\r\n\r\n\t\t\t\tfor(String sClasse:arrClasses) {";
						
					strClassesForeignKey+="\r\n\r\n\t\t\t\t\t"+strElse +"if("+GetNombreClaseC(tableSchema.ToString())+ "::$class==$sClasse) {";
					strClassesForeignKey+="\r\n\t\t\t\t\t\t$classes[]=new Classe("+GetNombreClaseC(tableSchema.ToString())+ "::$class); continue;";
					//strClassesForeignKey+="\r\n\t\t\t\t\t\tcontinue;";
					strClassesForeignKey+="\r\n\t\t\t\t\t}";					
					
					//strClassesForeignKey+="\r\n\t\t\t\t}";
				}
			}
		}
		
		if(conNombresClases) {
			strClassesForeignKey+="\r\n\t\t\t\t}";
		}
				
		return strClassesForeignKey;
	}
	
	public String GetAddClassesForeignKeyIncludeC(TableSchema TablaBase,bool conNombresClases)	{
		String strClassesForeignKey=string.Empty;
		String strElse="";
		TableSchema	tableSchema;
		
		if(conNombresClases) {
			strClassesForeignKey+="\r\n\r\n\t\t\t\tforeach($arrClasses as $sClasse) {";
		}
		
		foreach(ColumnSchema columnSchema in TablaBase.Columns) {										
			if(columnSchema.IsForeignKeyMember) {
				tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						
				if(!conNombresClases) {
					strClassesForeignKey+="\r\n\t\t\t\tforeach($classesP as $clas)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\tif($clas=="+GetNombreClaseC(tableSchema.ToString())+"::$class)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\t\t$classes[]=new Classe("+GetNombreClaseC(tableSchema.ToString())+"::$class);";
					strClassesForeignKey+="\r\n\t\t\t\t\t}\r\n";
					strClassesForeignKey+="\t\t\t\t}\r\n";
				} else {
					strClassesForeignKey+="\r\n\r\n\t\t\t\t\t"+strElse +"if("+GetNombreClaseC(tableSchema.ToString())+ "::$class==$sClasse) {";
					strClassesForeignKey+="\r\n\t\t\t\t\t\t$classes[]=new Classe("+GetNombreClaseC(tableSchema.ToString())+ "::$class); continue;";
					//strClassesForeignKey+="\r\n\t\t\t\t\t\tcontinue;";
					strClassesForeignKey+="\r\n\t\t\t\t\t}";	
				}
			}
		}
		
		if(conNombresClases) {
			strClassesForeignKey+="\r\n\t\t\t\t}";
		}
				
		return strClassesForeignKey;
	}
	
	public String GetAddClassesForeignKeyExcludeC(TableSchema TablaBase,bool conNombresClases) {
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		bool blnExiste=false;
		
		foreach(ColumnSchema columnSchema in TablaBase.Columns) {									
			if(columnSchema.IsForeignKeyMember) {
				if(!blnExiste) {
					blnExiste=true;
				}
						
				tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						
				if(!conNombresClases) {
					strClassesForeignKey+="\r\n\t\t\t\t$existe=false;\r\n";
					strClassesForeignKey+="\r\n\t\t\t\tforeach($classesP as $clas)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\tif($clas=="+GetNombreClaseC(tableSchema.ToString())+"::$class)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\t\t$existe=true;\r\n";
					strClassesForeignKey+="\t\t\t\t\t\tbreak;\r\n";
					strClassesForeignKey+="\t\t\t\t\t}\r\n";
					strClassesForeignKey+="\t\t\t\t}\r\n";
						
					strClassesForeignKey+="\r\n\t\t\t\tif(!$existe)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\t$classes[]=new Classe("+GetNombreClaseC(tableSchema.ToString())+"::$class);";
					strClassesForeignKey+="\r\n\t\t\t\t}\r\n";
				
				} else {
					strClassesForeignKey+="\r\n\t\t\t\t$existe=false;\r\n";		
					strClassesForeignKey+="\r\n\t\t\t\tforeach($arrClasses as $sClase)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\tif("+GetNombreClaseC(tableSchema.ToString())+"::$class==$sClase)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\t\t$existe=true;\r\n";
					strClassesForeignKey+="\t\t\t\t\t\tbreak;\r\n";
					strClassesForeignKey+="\t\t\t\t\t}\r\n";
					strClassesForeignKey+="\t\t\t\t}\r\n";
								
					strClassesForeignKey+="\r\n\t\t\t\tif(!$existe)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\t$classes[]=new Classe("+GetNombreClaseC(tableSchema.ToString())+"::$class);";
					strClassesForeignKey+="\r\n\t\t\t\t}\r\n";
				}
			}
		}
		
		if(blnExiste) {
			strClassesForeignKey="\r\n\t\t\t\t$existe=false;\r\n"+strClassesForeignKey;			
		}
		
		return strClassesForeignKey;
	}
	
	public String GetAddClassesRelacionadasC(TableSchema TablaBase,bool conNombresClases) {
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			bool useClasesSiNo=GetUseClasesSiNoPropertyFromPropertiesC(TablaBase);
			TableSchema tablaRelacionadaObjetivo=null;
			bool esPrimero=true;
			String strElse="";
			
			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {
				
				if(conNombresClases) {
					strTablaClaseRelacionada+="\r\n\r\n\t\t\t\tforeach($arrClasses as $sClasse) {";
				}
				
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
										
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					} else {
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
					}
						
					if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
						continue;					
					}
				
					if(!conNombresClases) {
						strTablaClaseRelacionada+="\r\n\t\t\t\t$classes[]=new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "::$class);";
					} else {
						if(!esPrimero) {
							strElse="";//" else ";
						}
						
						//strTablaClaseRelacionada+="\r\n\r\n\t\t\t\tfor(String sClasse:arrClasses) {";
						
						strTablaClaseRelacionada+="\r\n\r\n\t\t\t\t\t"+strElse +"if("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "::$class==$sClasse) {";
						strTablaClaseRelacionada+="\r\n\t\t\t\t\t\t$classes[]=new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "::$class); continue;";
						//strTablaClaseRelacionada+="\r\n\t\t\t\t\t\tcontinue;";
						strTablaClaseRelacionada+="\r\n\t\t\t\t\t}";
						
						//strTablaClaseRelacionada+="\r\n\t\t\t\t}";
						
						if(esPrimero) {
							esPrimero=false;		
						}
					}
					/*
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
					{
					}
					else
					{
						strTablaClaseRelacionada+="\r\n\tprivate ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;";
					}
					*/
				}
				
				if(conNombresClases) {
					strTablaClaseRelacionada+="\r\n\t\t\t\t}";
				}
			}
			
			return strTablaClaseRelacionada; 
	}
	
	public String GetAddClassesRelacionadasIncludeC(TableSchema TablaBase,bool conNombresClases) 
		{
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
						
			
			bool useClasesSiNo=GetUseClasesSiNoPropertyFromPropertiesC(TablaBase);			
			TableSchema tablaRelacionadaObjetivo=null;
			String strElse="";
			
			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {														
				
				if(conNombresClases) {
					strTablaClaseRelacionada+="\r\n\r\n\t\t\t\tforeach($arrClasses as $sClasse) {";	
				}
				
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					} else {
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
					}
						
					if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
						continue;					
					}
					
					//strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
					
					if(!conNombresClases) {
						strTablaClaseRelacionada+="\r\n\t\t\t\tforeach($classesP as $clas)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\tif($clas=="+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t\t$classes[]=new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class); break;";
						strTablaClaseRelacionada+="\r\n\t\t\t\t\t}\r\n";
						strTablaClaseRelacionada+="\t\t\t\t}\r\n";
					} else {
					
						//strTablaClaseRelacionada+="\r\n\r\n\t\t\t\tfor(String sClasse:arrClasses) {";
							
						strTablaClaseRelacionada+="\r\n\r\n\t\t\t\t\t"+strElse +"if("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "::$class==$sClasse) {";
						strTablaClaseRelacionada+="\r\n\t\t\t\t\t\t$classes[]=new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "::$class); continue;";//break
						//strTablaClaseRelacionada+="\r\n\t\t\t\t\t\tcontinue;";
						strTablaClaseRelacionada+="\r\n\t\t\t\t\t}";
							
						//strTablaClaseRelacionada+="\r\n\t\t\t\t}";
					}
					
					/*
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
					{
					}
					else
					{
						strTablaClaseRelacionada+="\r\n\tprivate ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;";
					}
					*/
				}
				
				if(conNombresClases) {
					strTablaClaseRelacionada+="\r\n\t\t\t\t}";
				}
			}					
			return strTablaClaseRelacionada; 
		}
	
	public String GetAddClassesRelacionadasExcludeC(TableSchema TablaBase,bool conNombresClases) 
		{
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			bool blnExiste=false;
			
			
			bool useClasesSiNo=GetUseClasesSiNoPropertyFromPropertiesC(TablaBase);
			TableSchema tablaRelacionadaObjetivo=null;

			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
				{
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					} else {
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
					}
						
					if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
						continue;					
					}
					
					//strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
					if(!blnExiste)
					{
						blnExiste=true;
					}
					
					if(!conNombresClases) {
						strTablaClaseRelacionada+="\r\n\t\t\t\t$existe=false;\r\n";		
						strTablaClaseRelacionada+="\r\n\t\t\t\tforeach($classesP as $clas)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\tif($clas=="+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t\t$existe=true;\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t\tbreak;\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t}\r\n";
						strTablaClaseRelacionada+="\t\t\t\t}\r\n";
								
						strTablaClaseRelacionada+="\r\n\t\t\t\tif(!$existe)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t$classes[]=new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class);";
						strTablaClaseRelacionada+="\r\n\t\t\t\t}\r\n";
					
					} else {
						
						strTablaClaseRelacionada+="\r\n\t\t\t\t$existe=false;\r\n";		
						strTablaClaseRelacionada+="\r\n\t\t\t\tforeach($arrClasses as $sClase)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\tif("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class==$sClase)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t\t$existe=true;\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t\tbreak;\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t}\r\n";
						strTablaClaseRelacionada+="\t\t\t\t}\r\n";
								
						strTablaClaseRelacionada+="\r\n\t\t\t\tif(!$existe)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t$classes[]=new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class);";
						strTablaClaseRelacionada+="\r\n\t\t\t\t}\r\n";
					}
				}
				
				if(blnExiste)
				{
					strTablaClaseRelacionada="\r\n\t\t\t\t$existe=false;\r\n"+strTablaClaseRelacionada;			
				}
			}
			
			return strTablaClaseRelacionada; 
		}
	
	public static string GetFunctionValidationControlHtmlBusqueda(ColumnSchema column)
	{
		
	String strName="";
	String strLetNull="";
	
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strId)|| column.Name.Equals(strVersionRow))
	{
			return string.Empty;
	}
		
	
	strName=column.Name;
	
		if(!column.IsForeignKeyMember)
		{
		
			if(column.AllowDBNull)
			{
			strLetNull="\"s\"";
			}
			else
			{
			strLetNull="\"s\"";
			}
			
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				
			strName="validacion.check_text(this,"+column.Size+",\"n\",\"n\",\"s\",\"s\",\"s\","+strLetNull+")";
							
			}
			
			else if(column.DataType==DbType.Boolean)
			{
				return string.Empty;
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double)
			{
				strName="validacion.Check_num(this,0,1000000,\"s\","+strLetNull+")";
				
			}
			else if(column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
			strName="validacion.Check_num(this,0,1000000,\"n\","+strLetNull+")";	
			}
			else if(column.DataType==DbType.Int16||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
			strName="validacion.Check_num(this,0,1000,\"n\",\"s\")";	
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				strName="validacion.check_dateDate(this,"+strLetNull+")";
			
			}
		}
		else
		{

		return string.Empty;
		}
	
	
	return strName;
}
	
	public static string GetOnBlurEventValidationControlHtmlBusqueda(ColumnSchema column,String strIndexName)
	{
	/*String strFunctionMensaje="createSimpleYahooDialogErrorValidacion('Validacion campo: "+column.Name+ "',";
	
	String strName=" onBlur=\""+strFunctionMensaje +GetFunctionValidationControlHtmlBusqueda(column)+",this)\"";
	*/
	String strName=" onBlur=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.validarFormulario"+GetNombreClaseC(column.Table.ToString())+strIndexName+"()\"";
	return strName;
	}	

	public static string GetOnBlurEventValidationControlHtml(ColumnSchema column)
	{
	/*
	String strFunctionMensaje="createSimpleYahooDialogErrorValidacion('Validacion campo: "+column.Name+ "',";
	
	String strName=" onBlur=\""+strFunctionMensaje +GetFunctionValidationControlHtml(column)+",this)\"";
	
	*/
	String strName=" onBlur=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.validar"+GetNombreClaseC(column.Table.ToString())+GetNombreColumnaClaseC(column)+"()\"";

	return strName;
	}	
	
	public static string GetFunctionValidationControlHtml(ColumnSchema column)
	{
		
	String strName="";
	String strLetNull="";
	
	/*|| column.Name.Equals(strId)*/
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strVersionRow))
	{
			return string.Empty;
	}
		
	
	strName=column.Name;
	
		if(!column.IsForeignKeyMember)
		{
			
			if(GetJavaScriptValidacionColumnFromPropertiesC(column)!="")
			{
				strName=strValidacion+GetJavaScriptValidacionColumnFromPropertiesC(column);
				return strName;
			}
			
		
			if(column.AllowDBNull)
			{
			strLetNull="\"n\"";
			}
			else
			{
			strLetNull="\"s\"";
			}
			
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				
			strName="validacion.check_text(this,"+column.Size+",\"n\",\"n\",\"s\",\"s\",\"s\","+strLetNull+")";
							
			}
			
			else if(column.DataType==DbType.Boolean)
			{
				return "\"\"";
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double)
			{
				strName="validacion.Check_num(this,0,1000000,\"s\","+strLetNull+")";
				
			}
			else if(column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
			strName="validacion.Check_num(this,0,1000000,\"n\","+strLetNull+")";	
			}
			else if(column.DataType==DbType.Int16||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
			strName="Check_num(this,0,1000,\"n\","+strLetNull+")";	
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				strName="validacion.check_dateDate(this,"+strLetNull+")";
			
			}
		}
		else
		{

		return string.Empty;
		}
	
	
	return strName;
}
	
	public static string GetNameControlHtml(ColumnSchema column)
	{
	
	
	String strName="";
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
	{
			return string.Empty;
	}
		
	if(column.Name.Equals(strId))
	{
		strName="hdnIdActual";
		
	}
	else if(column.Name.Equals(strVersionRow))
	{
		strName="hdn"+column.Name;
		
	}
	else
	{
		if(!column.IsForeignKeyMember)
		{
		
		
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				
				strName="txt"+column.Name;
							
			}
			
			else if(column.DataType==DbType.Boolean)
			{
				strName="chb"+column.Name;
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
				strName="txt"+column.Name;
				
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				strName="dt"+GetNombreClaseC(column.Table.ToString())+column.Name;
			
			}
		}
		else
		{

		strName="cmb"+GetNombreClaseC(column.Table.ToString())+column.Name;
		}
	}
	
	return strName;
}

	public string GetNameControlHtmlBusqueda(ColumnSchema column,String strIndexName)
	{
	
	String strName="";
	//String strSeparadorName="";
	//String strPrefijoControl="<?php echo($strSuf)?>";
	
	/*
	if(!blnConJQueryCode) {
		strSeparadorName=".";
	} else {
		strSeparadorName="-";
	}
	*/
	
	if(!strIndexName.Equals(String.Empty)) {
		strIndexName=/*GetNombreClaseC(column.Table.ToString())+*/strIndexName+strSeparadorName;
	}
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
	{
			return string.Empty;
	}
		
	if(column.Name.Equals(strId))
	{
		strName=strIndexName+"hdnIdActual" ;
		
	}
	else if(column.Name.Equals(strVersionRow))
	{
		strName=strIndexName+"hdn"+column.Name;
		
	}
	else
	{
		if(!column.IsForeignKeyMember)
		{
		
		
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				
			strName=strIndexName+"txt"+column.Name;
							
			}
			
			else if(column.DataType==DbType.Boolean)
			{
				strName=strIndexName+"chb"+column.Name;
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
				strName=strIndexName+"txt"+column.Name;
				
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				strName=strIndexName+"dt"+GetNombreClaseC(column.Table.ToString())+column.Name;
			
			}
		}
		else
		{
					//strName=strIndexName+"djcmb"+GetNombreClaseC(column.Table.ToString())+column.Name;
			//strName=/*strIndexName+*/"cmb"+strIdGetSet+/*GetNombreClaseC(column.Table.ToString())+column.Name*/GetNombreClaseC(GetTableSchemaFromColumnForeignKey(column).ToString());
			
			strName=/*strIndexName+*/"cmb"+GetNombreColumnaClaseC(column);
		}
	}
	
	//strName=strPrefijoControl+strName;
	
	return strName;
}

public string GetControlHtmlBusqueda(ColumnSchema column,String strIndexName,bool ConFaces,bool ConRichFaces,bool ConRangeFinal)
	{
	
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=" "+GetPrefijoTipoC(column);	
	String strColumna=GetNombreColumnaClaseC(column);
	String strPrefijoControl="<?php echo($strSuf)?>";
	
	String strControl="";
	String strType="";
	String strName="";
	
	String strObjectFace="";
	String strValueFace="";
	String strTitle=" title=\""+GetWebNombreTituloColumnFromPropertiesC(column)+"\" ";	
	String strPlaceHolderBase=" placeholder=\""+GetWebNombreTituloColumnFromPropertiesC(column)+"\" "+strTitle+" ";
	//String strPlaceHolder="";
	
	String strSufijoConRangeFinal="";
	
	if(ConRangeFinal) {
		strSufijoConRangeFinal=strSufijoRangoFinal;
	}
	
	if(ConFaces||ConRichFaces)
	{
		strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
	}
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
	{
			return string.Empty;
	}
		
	if(column.Name.Equals(strId))
	{
		//strType="\"hidden\"";
		//strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+"\"";
		strName=strPrefijoControl+GetNameControlHtmlBusqueda(column,strIndexName);
		
		if(!ConFaces&&!ConRichFaces)
		{
			strControl="<input type="+strType+strName+">";
		}
		else
		{
			if(ConFaces||ConRichFaces)
			{
				//strControl="<h:inputHidden "+strName.Replace("name=","id=")+" />";
								
				if(!blnConJQueryCode) {
					strControl="<?php echo $form->input('"+strName.Replace("name=","id=")+"', array('class'=>'inputnormal','label' => '','readonly' => 'readonly')); ?>";
				} else {
					//strPlaceHolder=strPlaceHolderBase;
					
					strControl="<input id=\""+strName.Replace("name=","id=")+"\" name=\""+strName.Replace("name=","id=")+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+" readonly>\r\n";			
				}
			}
		}
	}
	if(column.Name.Equals(strVersionRow))
	{
		//strType="\"hidden\"";
		//strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+"\"";
		strName=strPrefijoControl+GetNameControlHtmlBusqueda(column,strIndexName);
		
		if(!ConFaces&&!ConRichFaces)
		{
			strControl="<input type="+strType+strName+">";
		}
		else
		{
			if(ConFaces||ConRichFaces)
			{
				//strControl="<h:inputHidden "+strName.Replace("name=","id=")+" />";
				
				if(!blnConJQueryCode) {
					strControl="<?php echo $form->input('"+strName.Replace("name=","id=")+"', array('class'=>'inputnormal','label' => '')); ?>";
				} else {
					strControl="<input id=\""+strName.Replace("name=","id=")+"\" name=\""+strName.Replace("name=","id=")+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+" readonly>\r\n";			
				}
			}
		}
	}
	else
	{
		if(!column.IsForeignKeyMember)
		{
		
		
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
			String strMaxLength="";
			String strRows="";
			int numRows=0;
			int numCols=0;
			
			//strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+strSufijoConRangeFinal+"\"";
			strName=strPrefijoControl+GetNameControlHtmlBusqueda(column,strIndexName)+strSufijoConRangeFinal;
			
				if(column.Size<51)
				{
					//strType="\"text\"";
					strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
					
					
					if(!ConFaces&&!ConRichFaces)
					{
						strControl="<input type="+strType+strMaxLength+strName+GetOnBlurEventValidationControlHtmlBusqueda(column,strIndexName)+">";		
					}
					else
					{
						if(ConFaces||ConRichFaces)
						{
							strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoConRangeFinal+strIndexName+" ?>\" ";
							
							//strControl="<h:inputText "+strName.Replace("name=","id=")+strValueFace+strMaxLength+" />";
														
							if(!blnConJQueryCode) {
								strControl="<?php echo $form->input('"+strName.Replace("name=","id=")+"', array('class'=>'inputnormal','label' => '')); ?>";
							} else {
								strControl="<input id=\""+strName.Replace("name=","id=")+"\" name=\""+strName.Replace("name=","id=")+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+">\r\n";		
							}
						}
					}
				}
				else if(column.Size<200)
				{
					numRows=column.Size/15;
					numCols=30;
					
					//strType="<textarea";
					/*
					strRows=" rows=\""+numRows.ToString()+"\"";
					strMaxLength=" cols=\""+numCols.ToString()+"\"";
					*/
					strType="";//",'type'=>'textarea'";
					strRows="";//",'rows' =>"+numRows.ToString()+"";
					strMaxLength="";//",'cols' => "+numCols.ToString()+"";
					
					if(!ConFaces&&!ConRichFaces)
					{
						strControl=strType+strName+strMaxLength+strRows+GetOnBlurEventValidationControlHtmlBusqueda(column,strIndexName)+"></textarea>";
					}
					else
					{
						if(ConFaces||ConRichFaces)
						{
							strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoConRangeFinal+strIndexName+" ?>\" ";
							
							//strControl="<h:inputTextarea "+strName.Replace("name=","id=")+strValueFace+strRows+strMaxLength+" />";							
							
							if(!blnConJQueryCode) {
								strControl="<?php echo $form->input('"+strName.Replace("name=","id=")+"', array('class'=>'inputnormal','label' => ''"+strType+strRows+strMaxLength+")); ?>";
							} else {	
								strControl="<input id=\""+strName.Replace("name=","id=")+"\" name=\""+strName.Replace("name=","id=")+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+">\r\n";		
							}
						}
					}
				}
				else
				{
					numRows=GetWebNumeroFilasColumnFromPropertiesC(column,true);
					numCols=GetWebNumeroColumnasColumnFromPropertiesC(column,true);
					
					//strType="<textarea";
					/*
					strRows=" rows=\""+numRows.ToString()+"\"";
					strMaxLength=" cols=\""+numCols.ToString()+"\"";
					*/
					strType="";//",'type'=>'textarea'";
					strRows="";//",'rows' =>"+numRows.ToString()+"";
					strMaxLength="";//",'cols' => "+numCols.ToString()+"";
					
					if(!ConFaces&&!ConRichFaces)
					{
						strControl=strType+strName+strMaxLength+strRows+GetOnBlurEventValidationControlHtmlBusqueda(column,strIndexName)+"></textarea>";
					}
					else
					{
						if(ConFaces||ConRichFaces)
						{
							strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoConRangeFinal+strIndexName+" ?>\" ";
							
							//strControl="<h:inputTextarea "+strName.Replace("name=","id=")+strValueFace+strRows+strMaxLength+" />";
							
							
							if(!blnConJQueryCode) {
								strControl="<?php echo $form->input('"+strName.Replace("name=","id=")+"', array('class'=>'inputnormal','label' => ''"+strType+strRows+strMaxLength+")); ?>";
							} else {
								strControl="<input id=\""+strName.Replace("name=","id=")+"\" name=\""+strName.Replace("name=","id=")+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+">\r\n";		
							}
						}
					}
				}
			}
			
			else if(column.DataType==DbType.Boolean)
			{
				//strType="\"checkbox\"";
				//strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+"\"";
				strName=strPrefijoControl+GetNameControlHtmlBusqueda(column,strIndexName);
				
				if(!ConFaces&&!ConRichFaces)
				{
					strControl="<input type="+strType+strName+">";
				}
				else
				{
					if(ConFaces||ConRichFaces)
					{
						strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strIndexName+" ?>\" ";
							
						//strControl="<h:selectBooleanCheckbox "+strName.Replace("name=","id=")+strValueFace+" />";
						
						if(!blnConJQueryCode) {
							strControl="<?php echo $form->checkbox('"+strName.Replace("name=","id=")+"', array('label' => '')); ?>";
						} else {
							strControl="<input id=\""+strName.Replace("name=","id=")+"\" name=\""+strName.Replace("name=","id=")+"\" type=\"checkbox\">\r\n";		
						}
					}
				}
	
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
				//strType="\"text\"";
				//strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+strSufijoConRangeFinal+"\"";
				strName=strPrefijoControl+GetNameControlHtmlBusqueda(column,strIndexName)+strSufijoConRangeFinal;
				
				String strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
				
				
				if(!ConFaces&&!ConRichFaces)
				{
					strControl="<input type="+strType+strMaxLength+strName+GetOnBlurEventValidationControlHtmlBusqueda(column,strIndexName)+">";
				}
				else
				{
					if(ConFaces||ConRichFaces)
					{
						strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoConRangeFinal+strIndexName+" ?>\" ";
						
						//strControl="<h:inputText "+strName.Replace("name=","id=")+strValueFace+strMaxLength+" />";
						
						
						if(!blnConJQueryCode) {
							strControl="<?php echo $form->input('"+strName.Replace("name=","id=")+"', array('class'=>'inputnormal','label' => '')); ?>";
						} else {
							strControl="<input id=\""+strName.Replace("name=","id=")+"\" name=\""+strName.Replace("name=","id=")+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+">\r\n";		
						}
					}
				}
	
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{	
				String strDatePattern="";
				String strFinalCalendar="";
				
				//strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+strSufijoConRangeFinal+"\"";
				strName=strPrefijoControl+GetNameControlHtmlBusqueda(column,strIndexName)+strSufijoConRangeFinal;
				
				if(!ConFaces&&!ConRichFaces)
				{
					//strType="\"dojo.dijit.calendar\"";
					//strName=" id=\""+GetNameControlHtmlBusqueda(column,strIndexName)+"\"";
					strName=strPrefijoControl+GetNameControlHtmlBusqueda(column,strIndexName);
					
					strControl="<a:widget  name="+strType+strName+"/>";
				} else {
					if(ConRichFaces) {
						if(EsDateColumn(column)) {
							//strDatePattern="ConstantesJsp.SDATEDATEPATTERN";
							strDatePattern="yyyy-MM-dd";
						}else if(EsDateTimeColumn(column)) {
							//strDatePattern="ConstantesJsp.SDATETIMEDATEPATTERN";
							strDatePattern="yyyy-MM-dd HH:mm:00.0";
						}else if(EsTimeColumn(column)) {
							//strDatePattern="ConstantesJsp.STIMEDATEPATTERN";
							strDatePattern="yyyy-MM-dd HH:mm:00";
						}
						
						strDatePattern=" datePattern=\""+strDatePattern+"\"";
						
						if(EsDateColumn(column)) {
							strFinalCalendar=",'type'=>'date'/*,'selected'=>array('year' => date('Y'),'month' => date('m'),'day' => date('d'))*/,'minYear'=>1900,'maxYear'=>2100, /*'empty'=>true,*/'dateFormat'=>'YMD','timeFormat'=>'NONE'";//" />";
						}else if(EsDateTimeColumn(column)) {
							strFinalCalendar=",'type'=>'datetime'/*,'selected'=>array('year' => date('Y'),'month' => date('m'),'day' => date('d'))*/,'minYear'=>1900,'maxYear'=>2100, /*'empty'=>true,*/'dateFormat'=>'YMD','timeFormat'=>'24'";//" />";
							//strFinalCalendar="";//" showApplyButton=\"true\">\r\n\t\t\t\t\t\t\t\t<f:converter  converterId=\"TimestampConverter\" />\r\n\t\t\t\t\t\t\t</rich:calendar>";
						}else if(EsTimeColumn(column)) {
							strFinalCalendar=",'type'=>'time'/*,'selected' => array('hour' => 1,'minute' => 1,'meridian' => 'am')*/";//" showApplyButton=\"true\">\r\n\t\t\t\t\t\t\t\t<f:converter  converterId=\"TimeConverter\" />\r\n\t\t\t\t\t\t\t</rich:calendar>";
						}
						
						strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoConRangeFinal+strIndexName+" ?>\" ";
							
						//strControl="<rich:calendar "+strName.Replace("name=","id=")+strValueFace+strDatePattern+strFinalCalendar;
						//strControl="<?php echo $form->input('"+strName.Replace("name=","id=")+"', array('label' => '')); ?>";
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strControl="<?php echo $this->Form->input('"+strName.Replace("name=","id=")/*GetNombreColumnFromProperties(column)*/+"',array('class'=>'inputnormal','label' => ''"+strFinalCalendar+"))?>";
							strControl="<?php echo $"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Form->input('form"+strSeparadorName+strName.Replace("name=","id=")/*GetNombreColumnFromProperties(column)*/+"',array('class'=>'inputnormal','label' => ''"+strFinalCalendar+"))?>";
						} else {
							strControl="<input id=\""+strName.Replace("name=","id=")+"\" name=\""+strName.Replace("name=","id=")+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+">";
						}
					}
				}
	
			}
			//System.Windows.Forms.MessageBox.Show(column.Name);
		}
		else
		{
			//System.Windows.Forms.MessageBox.Show("as");
			
			String strNameOnly=strPrefijoControl+GetNameControlHtmlBusqueda(column,strIndexName);
			
			strName=" id=\""+strNameOnly+"\"";
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strControl="<a:widget"+strName+"name=\"dojo.dijit.combobox\" value=\"[{label : 'Alabama', value : 'AL'}]\""+"/>";
			}
			else
			{
				if(ConFaces)
				{
					strControl="<h:selectOneMenu "+strName.Replace("name=","id=")+" value=\"<?php echo $"+strObjectFace+"->"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strIndexName+" ?>\">\r\n";				
					strControl+="<f:selectItems value=\"<?php echo $"+strObjectFace+"->"+GetNombreClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"ListSelectItem ?>\"/>\r\n";
					strControl+="</h:selectOneMenu>\r\n";
					
				} else {
					//rich:comboBox
					/*
					strControl="\t\t\t\t\t\t<div id=\"div"+   strNameOnly+"\">\r\n";														
					strControl+="<h:selectOneMenu "+strName.Replace("name=","id=")+" value=\"<?php echo $"+strObjectFace+"->"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strIndexName+" ?>\">";				
					strControl+="<f:selectItems value=\"<?php echo $"+strObjectFace+"->"+GetNombreClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"ListSelectItem ?>\"/>\r\n";
					strControl+="</h:selectOneMenu>";
					strControl+="</div>";
					*///GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strIndexName
					//strControl="<?php echo $form->input('"+strName.Replace("name=","id=")+"', array('label' => '')); ?>";
					//strControl="<?php echo $form->select('"+strIndexName+"."+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"',$"+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"s); ?>";
					
					if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
						//strControl="<?php echo $form->select('"+strIndexName+"."+/*GetPrefijoTipoC(column)*//*GetNombreColumnaClaseC(column)*/GetNameControlHtmlBusqueda(column,"")+"',$"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"s"+strForeignKey+"); ?>";
						strControl="<?php echo $"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Form->select('"+strIndexName+strSeparadorName+/*GetPrefijoTipoC(column)*//*GetNombreColumnaClaseC(column)*/GetNameControlHtmlBusqueda(column,"")+"',$"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"s"+strForeignKey+"); ?>";
					} else {
						strControl="<select id=\""+strIndexName+"-cmb"+/*GetPrefijoTipoC(column)*/GetNombreColumnaClaseC(column)+"\" name=\""+strIndexName+"-cmb"+/*GetPrefijoTipoC(column)*/GetNombreColumnaClaseC(column)+"\""+strTitle+"></select>\r\n";		
					}
					//rich:comboBox 
				}
							
			}
	
		}
	}
	
	return strControl;
}

public static string GetControlSwingC(ColumnSchema column)
	{
	
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=" "+GetPrefijoTipoC(column);	
	String strColumna=GetNombreColumnaClaseC(column);
	
	String strControl="";
	String strType="";strType+="";
	String strName="";
	
	String strObjectFace="";
	String strValueFace="";
	String strPrefijoCampo="";
	
	
	strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
	strPrefijoCampo=GetPrefijoTablaC().ToLower();
	
	string strFieldColumnaclase=GetPrefijoTablaC().ToLower()+GetPrefijoTipoC(column)+strColumna;
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
	{
			return string.Empty;
	}
		
	if(column.Name.Equals(strId))
	{
		
		strControl="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+"= new JLabel();\r\n\r\n";
		
		strControl+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(100,20));\r\n";
        strControl+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(100,20));\r\n";
        strControl+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(100,20));\r\n\r\n";
		
		strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement."+strId+" ?>\"), jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
		strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
		strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
		strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement != null ?>\"), jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
		strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
	
		
	}
	if(column.Name.Equals(strVersionRow))
	{
		
	
		strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strVersionRow+" ?>\" ";	
		
		strControl="\t\tjLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+"= new JLabel();\r\n\r\n";
		
		strControl+="\t\tjLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(100,20));\r\n";
        strControl+="\t\tjLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(100,20));\r\n";
        strControl+="\t\tjLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(100,20));\r\n\r\n";

				
		strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement."+strVersionRow+" ?>\"), jLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
		strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
		strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
		strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement != null ?>\"), jLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
		strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
			
	}
	else
	{
		if(!column.IsForeignKeyMember)
		{
		
		
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
			String strMaxLength="";
			String strRows="";
			int numRows=0;
			int numCols=0;
			
			strName=" name=\""+GetNameControlHtml(column)+"\"";
			
				if(column.Size<51)
				{
					strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
					
					strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";						
					
					strControl="jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JTextField();\r\n\r\n";
				
					strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(100,20));\r\n";
        			strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(100,20));\r\n";
        			strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(100,20));\r\n\r\n";
					
					strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement."+strFieldColumnaclase+" ?>\"), jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
					strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
					strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
					strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement != null ?>\"), jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
					strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
	

				}
				else if(column.Size<200)
				{
					numRows=column.Size/30;
					numCols=30;
					
					strRows=" rows=\""+numRows.ToString()+"\"";
					strMaxLength=" cols=\""+numCols.ToString()+"\"";
					
					strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";						
					
					strControl="jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JTextArea();\r\n";
				
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(100,20));\r\n";
        			strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(100,20));\r\n";
        			strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(100,20));\r\n\r\n";
					
					strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement."+strFieldColumnaclase+" ?>\"), jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
					strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
					strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
					strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement != null ?>\"), jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
					strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
	
				}
				else
				{
					numRows=GetWebNumeroFilasColumnFromPropertiesC(column,false);
					numCols=50;
					
					strRows=" rows=\""+numRows.ToString()+"\"";
					strMaxLength=" cols=\""+numCols.ToString()+"\"";
					
					strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";						
					
					strControl="jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JTextArea();\r\n";
				
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(100,20));\r\n";
        			strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(100,20));\r\n";
        			strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(100,20));\r\n\r\n";
					
					strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement."+strFieldColumnaclase+" ?>\"), jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
					strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
					strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
					strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement != null ?>\"), jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
					strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
	
				}
			}
			
			else if(column.DataType==DbType.Boolean)
			{
				
				strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";						
				
				
				strControl="jCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JCheckBox();\r\n\r\n";
				
				strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement."+strFieldColumnaclase+" ?>\"), jCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"selected\"));\r\n";	
				//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
				strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
				strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement != null ?>\"), jCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
				strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
	
	
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
				String strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
				
				strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";
				
				strControl="jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JTextField();\r\n";
				
				strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(100,20));\r\n";
        		strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(100,20));\r\n";
        		strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(100,20));\r\n\r\n";

				strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement."+strFieldColumnaclase+" ?>\"), jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
				strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
				strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
				strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement != null ?>\"), jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
				strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
	
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				
				strControl="jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JFormattedTextField();\r\n";
				
				strControl+="\t\tjFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(100,20));\r\n";
        		strControl+="\t\tjFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(100,20));\r\n";
        		strControl+="\t\tjFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(100,20));\r\n\r\n";

				strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement."+strFieldColumnaclase+" ?>\"), jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
				strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
				strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
				strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"<?php echo $selectedElement != null ?>\"), jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
				strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
	
			}
		}
		else
		{

			strName=" id=\""+GetNameControlHtml(column)+"\"";
		
			
			//strControl="<h:selectOneMenu "+strName.Replace("name=","id=")+" value=\"#{"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" >\r\n";
			//strControl+="\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+"->"+GetNombreClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"ListSelectItem}\"/>\r\n";		
			//strControl+="\t\t\t\t\t\t\t</h:selectOneMenu>";
			
			
			strControl="jComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JComboBox();\r\n";
					
	
		}
	}
	
	return strControl;
}

	public string GetControlHtml(ColumnSchema column,bool ConFaces,bool ConRichFaces) {
		String strControl="";
		
		strControl=GetControlHtml(column,ConFaces,ConRichFaces,false,"","","");
		
		return strControl;
	}
	
	public string GetControlHtml(ColumnSchema column,bool ConFaces,bool ConRichFaces,bool esParaEditarTabla,String strValorObjetoPhp,String strObjetoCountName,String strColumnCountName) {	
		String strTipo=GetTipoColumnaClaseC(column);	
		String strPrefijo=" "+GetPrefijoTipoC(column);	
		String strColumna=GetNombreColumnaClaseC(column);
		
		String strControl="";
		String strType="";
		String strName="";
		String strNameJQuery="";
		
		String strObjectFace="";
		String strObjectFaceOnlyFace="";
		String strValueFace="";
		String strPrefijoCampo="";		
		
		String sInitPhpTag="";
		String sEndPhpTag="";
		String strObjectControllerPhpBasico="";		
		String strObjectPhpBasico="";		
		
		if(esParaEditarTabla) {
			if(ConPhpBasico) {
				sInitPhpTag="";
				sEndPhpTag=".'";
				
				strObjectControllerPhpBasico="$this";
				strObjectPhpBasico="$"+GetNombreClaseObjetoC(column.Table.ToString())+"";
			}
		} else {
			if(ConPhpBasico) {
				sInitPhpTag="<?php echo ";
				sEndPhpTag="?>";
				
				strObjectControllerPhpBasico="$"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller";
				strObjectPhpBasico=strObjectControllerPhpBasico+"->"+GetNombreClaseObjetoC(column.Table.ToString())+"Actual";
			}
		}
		
		/*
		if(!strObjetoCountName.Equals("")) {
			//Trace.WriteLine(strObjetoCountName);
		}
		*/
		
		String strTitle=" title=\""+GetWebNombreTituloColumnFromPropertiesC(column)+"\" ";		
		String strPlaceHolderBase=" placeholder=\""+GetWebNombreTituloColumnFromPropertiesC(column)+"\" "+strTitle+" ";
	
		if(ConFaces||ConRichFaces) {
			strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->"+GetNombreClaseObjetoC(column.Table.ToString());
			strObjectFaceOnlyFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
			strPrefijoCampo=GetPrefijoTablaC().ToLower();
		}
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
			return string.Empty;
		}
		
	if(column.Name.Equals(strId)) {
		strType="\"hidden\"";
		strName=" name=\""+GetNameControlHtml(column)+strObjetoCountName+"\"";
		//strNameJQuery=GetNombreColumnFromProperties(column)+strObjetoCountName;
		strNameJQuery=GetNameControlJQueryHtml(column,esParaEditarTabla,strObjetoCountName,strColumnCountName);
		
		if(!ConFaces&&!ConRichFaces) {
			strControl="<input type="+strType+strName+">";
			
		} else {
			if(ConFaces||ConRichFaces) {
				//strControl="<h:inputHidden "+strName.Replace("name=","id=")+" />";
								
				if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
					//strControl="<?php echo $this->Form->input('"+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => '','disabled' => 'disabled','readonly' => 'readonly'))?>\r\n";
					//strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('form"+strSeparadorName+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => '','disabled' => 'disabled','readonly' => 'readonly','value' => "+strObjectPhpBasico+"->getId()))"+sEndPhpTag+"\r\n";
					strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('"+strNameJQuery+"', array('class'=>'inputnormal','label' => '','disabled' => 'disabled','readonly' => 'readonly','value' => "+strObjectPhpBasico+"->getId()))"+sEndPhpTag+"\r\n";
					
					if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
						strValueFace=" value=\""+strValorObjetoPhp+"\" ";									
					}
					
				} else {
					//EDITAR_TABLA
					if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
						strValueFace=" value=\""+strValorObjetoPhp+"\" ";									
					}
									
					strControl="<input id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" type=\"text\" class=\"inputnormal\" "+strValueFace+" "+strPlaceHolderBase+" readonly>";		
				}
				//strControl+="<h:inputHidden id=\"maximumSeverity\" value=\"#{"+strObjectFaceOnlyFace+".maximumSeverity}\"/>";
			}
		}		
	} else if(column.Name.Equals(strVersionRow)){
		strType="\"hidden\"";
		strName=" name=\""+GetNameControlHtml(column)+strObjetoCountName+"\"";
		//strNameJQuery=GetNombreColumnFromProperties(column)+strObjetoCountName;
		strNameJQuery=GetNameControlJQueryHtml(column,esParaEditarTabla,strObjetoCountName,strColumnCountName);
		
		if(!ConFaces&&!ConRichFaces) {
			strControl="<input type="+strType+strName+">";
		} else {
			if(ConFaces||ConRichFaces) {
				if(!blnConJQueryCode) {
					strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strVersionRow+" ?>\" ";
				}
				
				//strControl="<h:inputHidden "+strName.Replace("name=","id=")+strValueFace+" />";
								
				if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
					//strControl="<?php echo $this->Form->input('"+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => ''))?>";
					//strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('form"+strSeparadorName+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => '','value' => "+strObjectPhpBasico+"->getVersionRow()))"+sEndPhpTag;
					strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('"+strNameJQuery+"', array('class'=>'inputnormal','label' => '','value' => "+strObjectPhpBasico+"->getVersionRow()))"+sEndPhpTag;
					
				} else {
					strControl="<input id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+" readonly>";		
				}
			}
		}		
	} else {
		string strMensajeError="";
		string strSufijoMensaje="Mensaje";
		string strPrefijoVariableMensaje="str"+strSufijoMensaje+strColumna;				
		
		if(!blnConJQueryCode) {
			strMensajeError="<span id=\"span"+strPrefijoVariableMensaje+strObjetoCountName+"\" class=\"mensajeerror\"><?php echo $"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->"+strPrefijoVariableMensaje+" ?></span>";//name=\"span"+strPrefijoVariableMensaje+strObjetoCountName+"\"
		} else {
			strMensajeError="<span id=\"span"+strPrefijoVariableMensaje+strObjetoCountName+"\" class=\"mensajeerror\"></span>";//name=\"span"+strPrefijoVariableMensaje+strObjetoCountName+"\" 
		}
		
		if(!column.IsForeignKeyMember) {		
			String strReadOnlyColumna="";
			
			if(ConFaces||ConRichFaces) {
				if(GetNoEditColumnFromPropertiesC(column) || GetReadOnlyColumnFromPropertiesC(column)) {
					strReadOnlyColumna=" readonly=\"readonly\"";
				}
			}
			
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {				
				if(!EsPathImagenDocumentoArchivoColumn(column)) {
					
					String strMaxLength="";
					String strRows="";
					
					String strMaxLengthStyle="";
					String strRowsStyle="";
					
					int numRows=0;
					int numCols=0;
					
					strName=" name=\""+GetNameControlHtml(column)+strObjetoCountName+"\"";
					//strNameJQuery=GetNombreColumnFromProperties(column)+strObjetoCountName;
					strNameJQuery=GetNameControlJQueryHtml(column,esParaEditarTabla,strObjetoCountName,strColumnCountName);										
					
					if(column.Size<51) {
						strType="\"text\"";
						strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
						
						if(!ConFaces&&!ConRichFaces) {
							strControl="<input type="+strType+strMaxLength+strName+GetOnBlurEventValidationControlHtml(column)+">";		
							
						} else {
							if(ConFaces||ConRichFaces) {
								if(!blnConJQueryCode) {
									strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";
								}
								
								//strControl="<h:inputText "+strName.Replace("name=","id=")+strValueFace+strMaxLength+strReadOnlyColumna+" >\r\n";																
								
								if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
									//strControl="<?php echo $this->Form->input('"+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => ''))?>";
									//strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('form"+strSeparadorName+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => '','value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
									strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('"+strNameJQuery+"', array('class'=>'inputnormal','label' => '','value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
									
									if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
										strValueFace=" value=\""+strValorObjetoPhp+"\" ";									
									}
									
								} else {
									//EDITAR_TABLA
									if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
										strValueFace=" value=\""+strValorObjetoPhp+"\" ";									
									}
									
									strControl="<input id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+" "+strMaxLength+strValueFace+strReadOnlyColumna+"/>";		
								}								
							}
						}						
					} else if(column.Size<200) {
						//numRows=column.Size/30;
						//numCols=30;						
						numRows=GetWebNumeroFilasColumnFromPropertiesC(column,esParaEditarTabla);
						numCols=GetWebNumeroColumnasColumnFromPropertiesC(column,esParaEditarTabla);
						
						
						//ANTES CAKE
						//strType="<textarea";strRows=" rows=\""+numRows.ToString()+"\"";strMaxLength=" cols=\""+numCols.ToString()+"\"";
						
						if(!blnConJQueryCode) {
							strType=",'type'=>'textarea'";
							strRows=",'rows' =>"+numRows.ToString()+"";
							strMaxLength=",'cols' => "+numCols.ToString()+"";
						} else {
							
							if(!ConPhpBasico) {
								//strType="<textarea";
								if(!GetEsPasswordColumnFromPropertiesC(column)) {
									strType="<textarea";
									//strType=" type=\"textarea\"";
								} else {
									strType="<input";
									//strType=" type=\"password\"";
								}
								
								strRows=" rows=\""+numRows.ToString()+"\"";
								strMaxLength=" cols=\""+numCols.ToString()+"\"";
								
								strRowsStyle=" height:"+numRows.ToString()+"em;";
								strMaxLengthStyle=" width:"+numCols.ToString()+"em;";
							
							} else {
								if(!GetEsPasswordColumnFromPropertiesC(column)) {
									strType=",'type'=>'textarea'";
								} else {
									strType=",'type'=>'password'";
								}
								
								strRows=",'rows' =>"+numRows.ToString()+"";
								strMaxLength=",'cols' => "+numCols.ToString()+"";
								
								strRowsStyle=" height:"+numRows.ToString()+"em;";
								strMaxLengthStyle=" width:"+numCols.ToString()+"em;";
							}
						}
						
						if(!ConFaces&&!ConRichFaces) {
							strControl=strType+strName+strMaxLength+strRows+GetOnBlurEventValidationControlHtml(column)+"></textarea>";
						} else {
							if(ConFaces||ConRichFaces) {
								if(!blnConJQueryCode) {
									strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";
								}
							
								if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
									//strControl="<?php echo $this->Form->input('"+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => ''"+strType+strRows+strMaxLength+"))?>";
									//strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('form"+strSeparadorName+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => ''"+strType+strRows+strMaxLength+",'value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
									strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('"+strNameJQuery+"', array('class'=>'inputnormal','label' => ''"+strType+strRows+strMaxLength+",'value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
									
									if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
										strValueFace=""+strValorObjetoPhp+"";									
									}
									
								} else {
									//EDITAR_TABLA
									if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
										strValueFace=""+strValorObjetoPhp+"";									
									}
									
									if(!GetEsPasswordColumnFromPropertiesC(column)) {
										strControl="<textarea id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" class=\"inputnormal\" "+strPlaceHolderBase+" style=\"font-size: 13px;\""+strRows+strMaxLength+strReadOnlyColumna+">"+strValueFace+"</textarea>";		
									
									} else {
										strControl="<input id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" type=\"password\" class=\"inputnormal\" "+strPlaceHolderBase+" style=\"font-size: 13px;"+strRowsStyle+strMaxLengthStyle+"\" "+strReadOnlyColumna+">"+/*strValueFace+*/"</input>";//strRows+strMaxLength+		
									}
								}
							}
						}						
					} else {
						numRows=GetWebNumeroFilasColumnFromPropertiesC(column,esParaEditarTabla);
						numCols=GetWebNumeroColumnasColumnFromPropertiesC(column,esParaEditarTabla);
												
						if(!blnConJQueryCode) {
							strType=",'type'=>'textarea'";
							strRows=",'rows' =>"+numRows.ToString()+"";
							strMaxLength=",'cols' => "+numCols.ToString()+"";
						} else {
							
							if(!ConPhpBasico) {
								if(!GetEsPasswordColumnFromPropertiesC(column)) {
									strType=" type=\"textarea\"";
								} else {
									strType=" type=\"password\"";
								}
								
								strRows=" rows =\""+numRows.ToString()+"\"";
								strMaxLength=" cols= \""+numCols.ToString()+"\"";
								
								strRowsStyle=" height:"+numRows.ToString()+"em;";
								strMaxLengthStyle=" width:"+numCols.ToString()+"em;";
								
								//Trace.WriteLine(column.Name);
							} else {
								if(!GetEsPasswordColumnFromPropertiesC(column)) {
									strType=",'type'=>'textarea'";
								} else {
									strType=",'type'=>'password'";	
								}
								
								strRows=",'rows' =>"+numRows.ToString()+"";
								strMaxLength=",'cols' => "+numCols.ToString()+"";
								
								strRowsStyle=" height:"+numRows.ToString()+"em;";
								strMaxLengthStyle=" width:"+numCols.ToString()+"em;";
								
							}
						}
						
						if(!ConFaces&&!ConRichFaces) {
							strControl=strType+strName+strMaxLength+strRows+GetOnBlurEventValidationControlHtml(column)+"></textarea>";
						
						} else {
							if(ConFaces||ConRichFaces) {
								if(!blnConJQueryCode) {
									strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";
								}
								
								if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
									//strControl="<?php echo $this->Form->input('"+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => ''"+strType+strRows+strMaxLength+"))?>";
									//strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('form"+strSeparadorName+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => ''"+strType+strRows+strMaxLength+",'value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
									strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('"+strNameJQuery+"', array('class'=>'inputnormal','label' => ''"+strType+strRows+strMaxLength+",'value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
									
									if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
										strValueFace=""+strValorObjetoPhp+"";									
									}
									
								} else {
									//EDITAR_TABLA
									if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
										strValueFace=""+strValorObjetoPhp+"";									
									}
									
									if(!GetEsPasswordColumnFromPropertiesC(column)) {
										strControl="<textarea id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" class=\"inputnormal\" "+strPlaceHolderBase+" style=\"font-size: 13px;\" "+strRows+strMaxLength+">"+strValueFace+"</textarea>";//strType+
									
									} else {
										strControl="<input id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" type=\"password\" class=\"inputnormal\" "+strPlaceHolderBase+" style=\"font-size: 13px;"+strRowsStyle+strMaxLengthStyle+"\" "+">"+/*strValueFace+*/"</input>";//strRows+strMaxLength+	strType+
									}									
								}
							}
						}						
					}
				} else {//if EsPathImagen Documento
					//strNameJQuery=GetNombreColumnFromProperties(column)+strObjetoCountName;
					strNameJQuery=GetNameControlJQueryHtml(column,esParaEditarTabla,strObjetoCountName,strColumnCountName);
					
					if(ConRichFaces) {
						String strTypes="jpg, gif, png, bmp";strTypes+="";
						String strLabelLink="Ver Imagen (Presionado Ctrl)";strLabelLink+="";
						
						if(EsPathDocumentoColumn(column)) {
							strTypes="doc,docx, xls,xlsx, pdf, txt, ppt,pptx, pps,ppsx";
							strLabelLink="Descargar Documento (Presionado Ctrl)";
						}
												
						//strControl+="\t\t\t\t\t\t\t\r\n\r\n";
						
						if(!EsPathImagenDocumentoArchivoColumn(column)) {
							//strControl+="\t\t\t\t\t\t\t<h:graphicImage id=\"graphicImage"+GetNombreColumnaClaseC(column)+"\" height=\"100px\" width=\"100px\" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\"/>\r\n";
						} else {
							//strControl+="\t\t\t\t\t\t\t<h:outputText value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\"/>\r\n";
							//strControl+="\r\n\t\t\t\t\t\t\t<?php echo $this->Html->link('Archivo', $"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->data['"+GetNombreColumnFromProperties(column)+"'], array('class' => 'button', 'target' => '_blank')); ?>\r\n";
							
							if(EsPathImagenColumn(column)) {
								strLabelLink="Imagen";
								
							} else if(EsPathDocumentoColumn(column)) {
								strLabelLink="Documento";
								
							} else if(EsPathArchivoColumn(column)) {
								strLabelLink="Archivo";
							}
							
							if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {	
								
								//strControl+="\r\n\t\t\t\t\t\t\t<table style=\"width: 270px;padding: 0px; border-spacing: 0px\"><tr>";
								//strControl+="\r\n\t\t\t\t\t\t\t\t<td><?php echo $this->Form->input('"+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => '','readonly' => 'readonly'))?></td>";
								
								strControl+="\r\n\t\t\t\t\t\t\t<table style=\"width: 270px;padding: 0px; border-spacing: 0px\"><tr>";
								//strControl+="\r\n\t\t\t\t\t\t\t\t<td>"+sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('form"+strSeparadorName+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => '','readonly' => 'readonly','value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag+"</td>";
								strControl+="\r\n\t\t\t\t\t\t\t\t<td>"+sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('"+strNameJQuery+"', array('class'=>'inputnormal','label' => '','readonly' => 'readonly','value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag+"</td>";
								
								if(ConArchivosV2Cake && ConCakePhp) {
									//strControl+="\r\n\t\t\t\t\t\t\t\t<td><?php echo $ajax->link($html->image('/img/Imagenes/archivo.gif', array('width'=>15,'height'=>15, 'alt' => '"+strCargarArchivo+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'abrirCargarArchivo"+GetNombreColumnaClaseC(column)+"', $"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->"+strId+GetNombreClaseC(column.Table.ToString())+"Actual),array( 'escape'=>false, 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(column.Table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(column.Table.ToString())+"();' )); ?></td>";
									strControl+="\r\n\t\t\t\t\t\t\t\t<td><?php echo $ajax->link($"+GetNombreClaseObjetoC(column.Table.ToString())+"Controller->Html->image('/img/Imagenes/archivo.gif', array('width'=>15,'height'=>15, 'alt' => '"+strCargarArchivo+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'abrirCargarArchivo"+GetNombreColumnaClaseC(column)+"', $"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->"+strId+GetNombreClaseC(column.Table.ToString())+"Actual),array( 'escape'=>false, 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(column.Table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(column.Table.ToString())+"();' )); ?></td>";
								} else {
									strControl+="\r\n\t\t\t\t\t\t\t\t<td></td>";
								}
								
								/*
								strControl+="\r\n\t\t\t\t\t\t\t</tr><tr>";								
								strControl+="\r\n\t\t\t\t\t\t\t\t<td colspan=\"2\"><?php echo $this->Html->link('"+strArchivo+"', array('controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'descargarArchivo', str_replace('/','-.-',$"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->data['"+GetNombreColumnFromProperties(column)+"'])), array('class' => 'button', 'target' => '_blank')); ?>"+"</td>";
								strControl+="\r\n\t\t\t\t\t\t\t</tr>";
								strControl+="\r\n\t\t\t\t\t\t\t</table>";
								*/
								
								strControl+="\r\n\t\t\t\t\t\t\t</tr><tr>";								
								strControl+="\r\n\t\t\t\t\t\t\t\t<td colspan=\"2\"><?php echo $this->Html->link('"+strArchivo+"', array('controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'descargarArchivo', str_replace('/','-.-',$"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->data['"+GetNombreColumnFromProperties(column)+"'])), array('class' => 'button', 'target' => '_blank')); ?>"+"</td>";
								strControl+="\r\n\t\t\t\t\t\t\t</tr>";
								strControl+="\r\n\t\t\t\t\t\t\t</table>";
								
							} else {
								strControl="\r\n\t\t\t\t\t\t\t<input id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+" readonly>";		
								strControl+="\r\n\t\t\t\t\t\t\t<a id=\"link"+strNameJQuery+"\" href=\"#\" target=\"_blank\">"+strLabelLink+"</a>";
								strControl+="\r\n\t\t\t\t\t\t\t<div id=\"div"+strNameJQuery.Replace("form"+strSeparadorName,"")+"\" class=\"inputnormal\">Cargar</div>";//name=\"div"+GetNombreColumnFromProperties(column)+"\" 
							}
						}
						
						//ES SOLO HTML Y NO SOLUCIONA PROBLEMA
						//strControl+="\t\t\t\t\t\t\t<a href=\""+GetRelativePathC(column.Table)+"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" target=\"_blank\">"+strLabelLink+"</a>\r\n";
						
						//UTILIZAR ESTE AUNQUE HAY Q TENER APLASTADO CONTROL O A SU VEZ CLICK DERECHO ABRIR EN NUEVA PAGINA
						//strControl+="\t\t\t\t\t\t\t<h:outputLink value=\""+GetRelativePathC(column.Table)+"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" target=\"_blank\">"+strLabelLink+"</h:outputLink>";
						
						//NO UTILIZAR AQUI YA QUE SE PIERDE FORMULARIO AL ABRIR LINK
						//strControl+="\r\n\t\t\t\t\t\t\t<h:commandLink value=\""+strLabelLink+"\" onclick=\"funcionGeneral.abrirLink('#{"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}')\"/>";
					}
				}
			} else if(column.DataType==DbType.Boolean) {
				strType="\"checkbox\"";
				strName=" name=\""+GetNameControlHtml(column)+strObjetoCountName+"\"";
				//strNameJQuery=GetNombreColumnFromProperties(column)+strObjetoCountName;
				strNameJQuery=GetNameControlJQueryHtml(column,esParaEditarTabla,strObjetoCountName,strColumnCountName);
				
				if(!ConFaces&&!ConRichFaces) {
					strControl="<input type="+strType+strName+">";
				} else {
					if(ConFaces||ConRichFaces) {
						if(!blnConJQueryCode) {
							strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";
						}
							
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strControl="<?php echo $this->Form->checkbox('"+GetNombreColumnFromProperties(column)+"', array('label' => ''))?>";
							//strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->checkbox('"+GetNombreColumnFromProperties(column)+"',false, array('label' => '','value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
							strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->checkbox('"+strNameJQuery+"',false, array('label' => '','value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
							
						} else {
							strControl="<input id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" type=\"checkbox\">";		
						}
					}
				}								
			} else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
			
				strType="\"text\"";
				strName=" name=\""+GetNameControlHtml(column)+strObjetoCountName+"\"";
				//strNameJQuery=GetNombreColumnFromProperties(column)+strObjetoCountName;
				strNameJQuery=GetNameControlJQueryHtml(column,esParaEditarTabla,strObjetoCountName,strColumnCountName);
				
				String strMaxLength=" maxlength=\""+column.Precision.ToString()+"\"";//strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
				String strSize=" size=\"15\" ";
				
				if(column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
					strSize=" size=\"10\" ";
				}
				
				if(!ConFaces&&!ConRichFaces) {
					strControl="<input type="+strType+strMaxLength+strName+GetOnBlurEventValidationControlHtml(column)+">";
				} else {
					if(ConFaces||ConRichFaces) {
						if(!blnConJQueryCode) {
							strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";
						}
						
						//strControl="<h:inputText "+strName.Replace("name=","id=")+strValueFace+strMaxLength+strReadOnlyColumna+" >\r\n";
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strControl="<?php echo $this->Form->input('"+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => ''))?>";
							//strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('form"+strSeparadorName+GetNombreColumnFromProperties(column)+"', array('class'=>'inputnormal','label' => '','value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
							strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('"+strNameJQuery+"', array('class'=>'inputnormal','label' => '','value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
							
							if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
								strValueFace=" value=\""+strValorObjetoPhp+"\" ";									
							}
							
						} else {
							//EDITAR_TABLA
							if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
								strValueFace=" value=\""+strValorObjetoPhp+"\" ";									
							}
				
							strControl="<input id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+" "+strMaxLength+strSize+strValueFace+strReadOnlyColumna+">";		
						}
					}
				}			
			} else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime) {
				String strDatePattern="";
				String strFinalCalendar="";
				
				strName=" name=\""+GetNameControlHtml(column)+strObjetoCountName+"\"";
				//strNameJQuery=GetNombreColumnFromProperties(column)+strObjetoCountName;
				strNameJQuery=GetNameControlJQueryHtml(column,esParaEditarTabla,strObjetoCountName,strColumnCountName);								
				
				String strSize=" size=\"15\" ";
				
				
				if(!ConFaces&&!ConRichFaces) {
					strType="\"dojo.dijit.calendar\"";
					strName=" id=\""+GetNameControlHtml(column)+"\"";
					strControl="<a:widget  name="+strType+strName+"/>";
					
				} else {
					if(ConRichFaces) {
						if(EsDateColumn(column)) {
							//strDatePattern="ConstantesJsp.SDATEDATEPATTERN";
							strDatePattern="yyyy-MM-dd";
							strSize=" size=\"10\" ";
							
						}else if(EsDateTimeColumn(column)) {
							//strDatePattern="ConstantesJsp.SDATETIMEDATEPATTERN";
							strDatePattern="yyyy-MM-dd HH:mm:00.0";
							strSize=" size=\"20\" ";
							
						}else if(EsTimeColumn(column)) {
							//strDatePattern="ConstantesJsp.STIMEDATEPATTERN";
							strDatePattern="yyyy-MM-dd HH:mm:00";
							strSize=" size=\"8\" ";
						}
						
						//strDatePattern=" datePattern=\"#{"+strDatePattern+"}\"";
						strDatePattern=" datePattern=\""+strDatePattern+"\"";
						
						if(EsDateColumn(column)) {
							strFinalCalendar=",'type'=>'date'/*,'selected'=>array('year' => date('Y'),'month' => date('m'),'day' => date('d'))*/,'minYear'=>1900,'maxYear'=>2100, /*'empty'=>true,*/'dateFormat'=>'YMD','timeFormat'=>'NONE'";//" />";
						
						}else if(EsDateTimeColumn(column)) {
							strFinalCalendar=",'type'=>'datetime'/*,'selected'=>array('year' => date('Y'),'month' => date('m'),'day' => date('d'))*/,'minYear'=>1900,'maxYear'=>2100, /*'empty'=>true,*/'dateFormat'=>'YMD','timeFormat'=>'24'";//" />";
							//strFinalCalendar="";//" showApplyButton=\"true\">\r\n\t\t\t\t\t\t\t\t<f:converter  converterId=\"TimestampConverter\" />\r\n\t\t\t\t\t\t\t</rich:calendar>";
						
						}else if(EsTimeColumn(column)) {
							strFinalCalendar=",'type'=>'time'/*,'selected' => array('hour' => 1,'minute' => 1,'meridian' => 'am')*/";//" showApplyButton=\"true\">\r\n\t\t\t\t\t\t\t\t<f:converter  converterId=\"TimeConverter\" />\r\n\t\t\t\t\t\t\t</rich:calendar>";
						}						
							
						if(!blnConJQueryCode) {
							strValueFace=" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" ";
						}	
						
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strControl="<?php echo $this->Form->input('"+GetNombreColumnFromProperties(column)+"',array('class'=>'inputnormal','label' => ''"+strFinalCalendar+"))?>";
							//strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('form"+strSeparadorName+GetNombreColumnFromProperties(column)+"',array('class'=>'inputnormal','label' => ''"+strFinalCalendar+",'value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
							strControl=sInitPhpTag+strObjectControllerPhpBasico+"->Form->input('"+strNameJQuery+"',array('class'=>'inputnormal','label' => ''"+strFinalCalendar+",'value' => "+strObjectPhpBasico+"->get"+GetNombreColumnFromProperties(column)+"()))"+sEndPhpTag;
							
							if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
								strValueFace=" value=\""+strValorObjetoPhp+"\" ";									
							}
							
						} else {
							//EDITAR_TABLA
							if(esParaEditarTabla && !strValorObjetoPhp.Equals("")) {
								strValueFace=" value=\""+strValorObjetoPhp+"\" ";									
							}
							
							strControl="<input id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\" type=\"text\" class=\"inputnormal\" "+strPlaceHolderBase+" "+strSize+strValueFace+strReadOnlyColumna+">";		
						}
					}
				}				       
			}
		} else {			
			String strDisabledColumna="";
			
			if(ConFaces||ConRichFaces) {
				if(GetNoEditColumnFromPropertiesC(column) || GetReadOnlyColumnFromPropertiesC(column)) {
					//strDisabledColumna=" disabled=\"disabled\"";
				}
			}
			
			if(!blnNoStandardTableFromProperties) {	
				TableSchema tableSchemaForeignKey=GetNombreTablaRelacionadaFromColumn(column);
			
				bool sinActualizarFkDesdeTabla=GetSinActualizarForeignKeyTableFromPropertiesC(tableSchemaForeignKey);
				
				//Trace.WriteLine(tableSchemaForeignKey.Name+"-"+sinActualizarFkDesdeTabla);
				
				String strNameOnly=GetNameControlHtml(column);
				strName=" id=\""+strNameOnly+strObjetoCountName+"\"";
				
				strNameJQuery=GetNameControlJQueryHtml(column,esParaEditarTabla,strObjetoCountName,strColumnCountName);
				//strNameJQuery=GetNombreColumnFromProperties(column)+strObjetoCountName;
				
			
				if(!ConFaces&&!ConRichFaces) {
					strControl="<a:widget"+strName+"name=\"dojo.dijit.combobox\" value=\"[{label : 'Alabama', value : 'AL'}]\""+"/>";
					
				} else {
					if(ConFaces) {
						strControl="<h:selectOneMenu "+strName.Replace("name=","id=")+" value=\"<?php echo $"+strObjectFace+"->"+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+" ?>\" >\r\n";
						strControl+="\t\t\t\t\t\t\t\t<f:selectItems value=\"<?php echo $"+strObjectFaceOnlyFace+"->"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"ListSelectItem ?>\"/>\r\n";		
						strControl+="\t\t\t\t\t\t\t</h:selectOneMenu>";
						
					} else {
						if(!blnConJQueryCode) {
							//strControl="\r\n\t\t\t\t\t\t<?php echo $ajax->div('div"+   strNameOnly+"'); ?>\r\n";
						} else {
							//strControl="\r\n\t\t\t\t\t\t<div id=\"div"+   strNameOnly+"\">\r\n";
						}
																							
						if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
							//strControl+="\r\n\t\t\t\t\t\t\t<?php echo $form->select('"+GetNombreColumnFromProperties(column)+"',$"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"s"+strForeignKey+",$"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->data['"+GetNombreColumnFromProperties(column)+"']); ?>";
							//strControl+="\r\n\t\t\t\t\t\t\t"+sInitPhpTag+strObjectControllerPhpBasico+"->Form->select('form"+strSeparadorName+GetNombreColumnFromProperties(column)+"',$"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"s"+strForeignKey+","+strObjectPhpBasico+"->"+GetNombreColumnFromProperties(column)+");"+sEndPhpTag;
							strControl+="\r\n\t\t\t\t\t\t\t"+sInitPhpTag+strObjectControllerPhpBasico+"->Form->select('"+strNameJQuery+"',$"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"s"+strForeignKey+","+strObjectPhpBasico+"->"+GetNombreColumnFromProperties(column)+");"+sEndPhpTag;
							
						} else {
							strControl="\r\n\t\t\t\t\t\t\t<table><tr>";
							strControl+="\r\n\t\t\t\t\t\t\t<td><select id=\""+strNameJQuery+"\" name=\""+strNameJQuery+"\""+strTitle+strDisabledColumna+"></select></td>";		
							
							if(!esParaEditarTabla) {
								if(!sinActualizarFkDesdeTabla) {
									//Trace.WriteLine("here");
									strControl+="\r\n\t\t\t\t\t\t\t<td><a><img id=\""+strNameJQuery+"_img\" name=\""+strNameJQuery+"_img\" class=\"imagen_actualizar\" title=\"ACTUALIZAR DATOS RELACIONADOS\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/actualizardatos.gif\" alt=\"Actualizar Datos\" border=\"\" height=\"15\" width=\"15\"></a></td>";
								}
							}
						}
						
						if(GetBusquedaForeignKeyColumnFromPropertiesC(column)) {
							
							if((!blnConJQueryCode && ConCakePhp) || ConPhpBasico) {
										//strControl+="\t\t\t\t\t\t\t<?php echo $ajax->submit('/img/Imagenes/busqueda.gif', array('id'=>'btnAbrirBusqueda"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"','name'=>'btnAbrirBusqueda"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"','type'=>'image','src' => ''.Constantes::$strPathBaseImagenToComplete.'/Imagenes/busqueda.gif','before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.abrirBusquedaFk"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(column.Table.ToString())+"sOnClick();', 'complete' => '')); ?>\r\n";
								//strControl+="\r\n\t\t\t\t\t\t\t<?php echo $ajax->link($html->image('/img/Imagenes/busqueda.gif', array('width'=>15,'height'=>15, 'alt' => '"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'abrirBusqueda"+GetNombreClaseC(column.Table.ToString())+"Para"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"', $"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"->"+strId+GetNombreClaseC(column.Table.ToString())+"Actual),array( 'escape'=>false, 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(column.Table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(column.Table.ToString())+"();' )); ?>";
								strControl+="\r\n\t\t\t\t\t\t\t"+sInitPhpTag+strObjectControllerPhpBasico+"->Html->link("+strObjectControllerPhpBasico+"->Html->image('/img/Imagenes/busqueda.gif', array('width'=>15,'height'=>15, 'alt' => '"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"', 'border' =>'0')), array( 'controller' => '"+GetCakeModelControllerNameC(column.Table.ToString())+"s', 'action' => 'abrirBusqueda"+GetNombreClaseC(column.Table.ToString())+"Para"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"', "+strObjectControllerPhpBasico+"->"+strId+GetNombreClaseC(column.Table.ToString())+"Actual),array( 'escape'=>false, 'update' => 'divMensajes','before' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(column.Table.ToString())+"();', 'complete' => '"+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(column.Table.ToString())+"();' ));"+sEndPhpTag;
							} else {
								//strControl+="\r\n\t\t\t\t\t\t\t<input type=\"button\" id=\"btnAbrirBusqueda"+GetNombreClaseC(tableSchemaForeignKey.ToString())+strObjetoCountName+"\" name=\"btnAbrirBusqueda"+GetNombreClaseC(tableSchemaForeignKey.ToString())+strObjetoCountName+"\" value=\"Busqueda\"/>";//class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
								if(!esParaEditarTabla) {
									//strObjetoCountName+
									//strObjetoCountName+
									//strControl+="\r\n\t\t\t\t\t\t\t<input type=\"button\" id=\"btnAbrirBusqueda"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"\" name=\"imgAbrirBusqueda"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"\" value=\"Busqueda\"/>";//class=\"botonnormal\"  onmouseover=\"funcionGeneral.activarBoton(this);\" onmouseout=\"funcionGeneral.desactivarBoton(this);\"
									strControl+="\r\n\t\t\t\t\t\t\t<td><img id=\""+strNameJQuery+"_img_busqueda\" name=\""+strNameJQuery+"_img_busqueda\" title=\""+strBuscar+" "+GetTituloNombreTableFromPropertiesC(tableSchemaForeignKey)+"\" style=\"width: 25px; height: 25px;text-align: center\" src=\"<?php echo Constantes::$strPathBaseImagenToComplete ?>Imagenes/buscar.gif\" width=\"25\" height=\"25\"/></td>";//</td>
								}
							}
						}
						
						if(!blnConJQueryCode) {
							//strControl+="\t\t\t\t\t\t<?php echo $ajax->divEnd('div"+   strNameOnly+"'); ?>";
						} else {
							//strControl+="\t\t\t\t\t\t</div>";
							
							strControl+="\r\n\t\t\t\t\t\t\t</tr></table>";
						}
					}					
				}	
			}
		}
		
		strControl+=strMensajeError;
	}
	
	return strControl;
}
	
	public String GetNameControlJQueryHtml(ColumnSchema column,bool esParaEditarTabla,String strObjetoCountName,String strColumnCountName) {
		String strNameJQuery="";
		
		String strPrefijoControl="";
		
		if(!esParaEditarTabla && blnConJQueryCode) {
			strPrefijoControl="form<?php echo($strSuf)?>-";
		}
		
		//strNombreFilaPartName="_'.$i.'";
		
		if(!esParaEditarTabla) {
			strNameJQuery=strPrefijoControl+GetNombreColumnFromProperties(column)+strObjetoCountName;
		} else {
			strNameJQuery="t-cel_'.$"+strObjetoCountName+".'_"+strColumnCountName;
		}
		
		return strNameJQuery;
	}
	
	public static bool GetSinAuditoriaDetalleTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("SINAUDET"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	//ESTA FUNCION UTILIZAN LOS TEMPLATES --> CACHE=false
	public Hashtable GetTablasRelacionadas(TableSchema table) {
		Hashtable hashChildrenTablesFinalFinal=new Hashtable();			
		//return hashChildrenTablesFinalFinal;
		
		bool conTodasRelaciones=true;
				
		hashChildrenTablesFinalFinal=GetTablasRelacionadas(table,conTodasRelaciones);	
		
		return hashChildrenTablesFinalFinal;
	}	
	
	public Hashtable GetTablasRelacionadas(SchemaExplorer.TableSchema table,bool conTodasRelaciones) {		
		//return new Hashtable();
		Hashtable hashChildrenTablesFinal=new Hashtable();
		Hashtable hashChildrenTablesFinalFinal=new Hashtable();
		
		bool esTablaClasesNoDatabase=false;
		
			String strClasesNoFromProperties="";
			
			strClasesNoFromProperties=GetClasesNoDatabaseFromPropertiesC(table.Database);
			
			if(ExisteEnListaComasC(strClasesNoFromProperties,table.Name)) {
				esTablaClasesNoDatabase=true;						
			}
				
			//VERIFICA NUEVAMENTE PARA NO CREAR RELACIONES MUY GRANDES
			//SI EXISTE NO TRAER TODAS RELACIONES Y SI TIENE NINGUNO NO TRAER NINGUNO
						
			if(conTodasRelaciones) {								
				if(esTablaClasesNoDatabase) {
					conTodasRelaciones=false;
				}
			}
			//VERIFICA NUEVAMENTE PARA NO CREAR RELACIONES MUY GRANDES
			
				SchemaExplorer.TableSchemaCollection tablasRelacionadas=new SchemaExplorer.TableSchemaCollection();										
				
				String strClasesNoRelacionadas=string.Empty;					
				String strClasesSiRelacionadas=string.Empty;
				
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				strClasesSiRelacionadas=GetNombresClasesSiNavegacionFromTableFromPropertiesC(table);
				
				//PUEDE LLAMAR A TODAS LAS RELACIONES DONDE NINGUNO NO APLICA
				if((strClasesNoRelacionadas.Equals(strNINGUNO) || strClasesSiRelacionadas.Equals(strNINGUNO)) && !conTodasRelaciones) {
					return new Hashtable();
				}
				
				//DESCOMENTAR SI ES NECESARIO
				
				//SE REPITE ABAJO PERO NO ESTA MAL
				if(esTablaClasesNoDatabase || (!strClasesNoRelacionadas.Equals("") && !conTodasRelaciones)
										   || (!strClasesSiRelacionadas.Equals("") && !conTodasRelaciones)) {
											
					for (int i = 0; i < table.Database.Tables.Count; i++) { 	
						if(table.Database.Tables[i].Equals(table)) {
							continue;
						}
						
						//SI ES TABLA CLASES NO DATABASE NO TRAER TODAS LAS TABLAS DE DB, SOLO LA QUE TENDRIA RELACION											
						//if(esTablaClasesNoDatabase) {						
						//	if(!GetPermiteClaseRelacionadaC(table,table.Database.Tables[i])) {							
						//		continue;
						//	} else {
								//Trace.WriteLine("SI PERMITE="+table.Database.Tables[i].Name);
						//	}
						//}					
						
						//APLICANDO A TODOS
						//(NO SE GANA MUCHO) Y DEBE COMENTARSE ARRIBA					
						//if(!GetPermiteClaseRelacionadaC(table,table.Database.Tables[i])) {	
							//SI TOMAR EN CUENTA TODAS RELACIONES YA QUE LO GUARDA EN CACHE
							//continue;
						//}
						
							
						tablasRelacionadas.Add(table.Database.Tables[i]);
					}
				}
												
				
				Hashtable hashChildrenTables=new Hashtable();
				
				//SIEMPRE TRAE TODAS LAS RELACIONES YA QUE SE GUARDA EN CACHE DE CODESMITH
				//NO VALE ESTO
				//SI ES CLASES NO DATABASE GLOBAL O SE FILTRA RELACIONADAS CUANDO NO SE NECESITA TODAS RELACIONES
				/*
				if(esTablaClasesNoDatabase || (!strClasesNoRelacionadas.Equals("") && !conTodasRelaciones)
										   || (!strClasesSiRelacionadas.Equals("") && !conTodasRelaciones)) {
					
					if(IS_DEBUG) {
						Trace.WriteLine("TABLAS DB REL DE "+table.Name+"="+tablasRelacionadas.Count);
					}
										
					hashChildrenTables=GetChildrenCollections(table,tablasRelacionadas);// tablasRelacionadas);																																		
										
				} else {
					
					hashChildrenTables=GetChildrenCollections(table,table.Database.Tables);
				}
				*/
				
				ArrayList arrayListChildrenTables=new ArrayList();
				
				hashChildrenTablesFinal=new Hashtable();
				hashChildrenTablesFinalFinal=new Hashtable();				
								
				hashChildrenTables=GetChildrenCollections(table,table.Database.Tables);								
								
				foreach(CollectionInfo collectionInfo in hashChildrenTables.Values)	{
					//NO TOMAR EN CUENTA MULTIPLE
					if(TieneFkMultiple(collectionInfo)) {
						continue;	
					}
					
					if(!ExisteRelacion(arrayListChildrenTables,collectionInfo.SecondaryTable)){
						arrayListChildrenTables.Add(collectionInfo.SecondaryTable);
						
						//Trace.WriteLine(collectionInfo.PropertyName);
						hashChildrenTablesFinal.Add(collectionInfo.PropertyName,collectionInfo);
					}
				}
				
				
					
				String[] sClases;
				bool blClaseNo=false;
				TableSchema tablaRelacionadaObjetivo;							
					
				foreach(CollectionInfo collectionInfo in hashChildrenTablesFinal.Values)	{
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else {
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
					}
					
					//ES/SON TABLAS QUE REPRESENTAN PARAMETROS DE PROCESOS
					if(GetEsProcesoParamFromPropertiesC(tablaRelacionadaObjetivo)) {
						continue;
					}
					
					if(!conTodasRelaciones) {										
						if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo)) {
							continue;
						}
					}
									
					//QUITAR FK MULTIPLE
					//DESHABILITADO
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
						TableKeySchema TableKey =collectionInfo.TableKey;
						
						if(TableKey.PrimaryKeyMemberColumns.Count>1) {
							//continue;
						}
					}
					
					hashChildrenTablesFinalFinal.Add(collectionInfo.PropertyName,collectionInfo);
				}
				
				//Trace.WriteLine(hashChildrenTablesFinalFinal.Count);
				//return hashChildrenTables; 	
		
		
		return hashChildrenTablesFinalFinal; 
	}
	
	public bool TieneReporteRelacionesC(TableSchema table) {
		bool tiene=true;
				
		if(GetNombresClasesNoNavegacionFromTableFromPropertiesC(table).Equals(strNINGUNO)) {
			 tiene=false;
		}
		
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table,false,false,false,false);
			
		if(tablasRelacionadasEncontradas.Count<=0) {
			tiene=false;
		}
		
		return tiene;
	}
	
	public ArrayList GetTablasRelacionadasFinal(TableSchema table,bool conTodos) {
			ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table,true,conTodos,false,false);
			
			return tablasRelacionadasEncontradas;
	}				
	
	public ArrayList GetTablasRelacionadasFinal(TableSchema table,bool conTodos,bool conOrden) {
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table,true,conTodos,conOrden,false);
			
		return tablasRelacionadasEncontradas;
	}
	
	public ArrayList GetTablasRelacionadasFinal(TableSchema table) {
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table,true,false,false,false);
			
		return tablasRelacionadasEncontradas;
	}		
	
	//UTILIZA FUNCION DE ARRIBA
	public ArrayList GetTablasRelacionadasFinal(TableSchema table,bool conMultiple,bool conTodos,bool conOrden,bool conDinamico) {
			Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			ArrayList arrayListTablasRelacionadas= new ArrayList();						
			arrayTablasRelacionadasMe= new ArrayList();
			TableKeySchemaMe tableKeySchemaMe=new TableKeySchemaMe();
			
			//CON ORDEN O NO
			if(!conOrden) {
				arrayListTablasRelacionadas=GetArrayListFromHashtableC(tablasRelacionadas);				
			} else {
				arrayListTablasRelacionadas=GetOrdenTablasRelacionadasC(table,tablasRelacionadas);	
			}
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String sClasesNoRelacionadas=String.Empty;
			String[] sClases;
			bool blClaseNo=false;
			String strNombreAdicional="";
			int intTamanioMaximoDescripcion=3700;
			
			foreach(CollectionInfo collectionInfo in arrayListTablasRelacionadas) {//tablasRelacionadas.Values)			
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);									
				
				if(!conMultiple) {
					if(TieneFkMultiple(collectionInfo)) {
						continue;	
					}
				}
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;	
					
					if(tablaRelacionadaObjetivo.Description.Length < intTamanioMaximoDescripcion) {
						if(conDinamico) {
							//if(!tablaRelacionadaObjetivo.Description.Contains("DIN_UNOAUNO")) {
								//SE GUARDA AUTOMATICA-DESHABILITADO
								//tablaRelacionadaObjetivo.Description+="|DIN_UNOAUNO=true";
								
								if(!ExisteTablaRelacionadaMeC(arrayTablasRelacionadasMe,tablaRelacionadaObjetivo)) {
									tableKeySchemaMe=new TableKeySchemaMe();
								} else {
									tableKeySchemaMe=GetTablaRelacionadaMeEncontradaC(arrayTablasRelacionadasMe,tablaRelacionadaObjetivo);
								}
								
								tableKeySchemaMe.TableSchemaActual=tablaRelacionadaObjetivo;																								
								
								if(!tableKeySchemaMe.Description.Equals("")) {
									tableKeySchemaMe.Description+="|";
								}
								
								tableKeySchemaMe.Description+="DIN_UNOAUNO=true";
								
								arrayTablasRelacionadasMe.Add(tableKeySchemaMe);
							//}
						}
					}
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
								
				if(!strNombreAdicional.Equals("")) {
					if(tablaRelacionadaObjetivo.Description.Length < intTamanioMaximoDescripcion) {
						//Trace.WriteLine("TAMANIO CARACTERES DE "+tablaRelacionadaObjetivo.Name+"= "+tablaRelacionadaObjetivo.Description.Length);
						
						if(conDinamico) {
							//if(!tablaRelacionadaObjetivo.Description.Contains("DIN_NOMBRE_ADDICIONAL")) {
								//SE GUARDA AUTOMATICA-DESHABILITADO
								//tablaRelacionadaObjetivo.Description+="|DIN_NOMBRE_ADDICIONAL="+strNombreAdicional;
								
								if(!ExisteTablaRelacionadaMeC(arrayTablasRelacionadasMe,tablaRelacionadaObjetivo)) {
									tableKeySchemaMe=new TableKeySchemaMe();
								} else {
									tableKeySchemaMe=GetTablaRelacionadaMeEncontradaC(arrayTablasRelacionadasMe,tablaRelacionadaObjetivo);
								}
								
								tableKeySchemaMe.TableSchemaActual=tablaRelacionadaObjetivo;
								
								if(!tableKeySchemaMe.Description.Equals("")) {
									tableKeySchemaMe.Description+="|";
								}
								
								tableKeySchemaMe.Description+="DIN_NOMBRE_ADDICIONAL="+strNombreAdicional;
								
								arrayTablasRelacionadasMe.Add(tableKeySchemaMe);
							//}
						}
					}
				}
				
				if(!conTodos) {											
					if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo)) {
						continue;
					}
				}
												
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas) {										
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)) {
						encontrado=true;
					}
				}				
				
				if(!encontrado) {
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					//sTablaClaseRelacionada+=GetCargarTablesRelacionadas(tablaRelacionadaObjetivo,collectionInfo);
				}		
				
				//Trace.WriteLine(table.Name+":"+tablaRelacionadaObjetivo.Name+"-->"+collectionInfo.CollectionRelationshipType);
			}
			
		return tablasRelacionadasEncontradas;
	}
	
	public String GetListasParametroTablesRelacionadasC(TableSchema table,bool esParaLogic,bool esParaEventos,bool esParaActualizarBeanActual,bool esParaActualizarFormulario,bool esParaActualizarListaConstantesFunciones,bool esParaActualizarObjetoActualRelaciones,bool inicializarObjetosRelacionesSession) {
	String sTablaClaseRelacionada=String.Empty;
	
	//ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table);
	System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table,false);
	
	//GetTablasRelacionadas(table);
	
	//String strSelectedRow="intSelectedRow";
	String strTipoLista="";
	String strTipoObjetos="";
	String strNombreAdicional="";
	
	
		
	foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {								
		strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);		
		strTipoLista="";
		
		if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
			if(!esParaEventos && !esParaActualizarBeanActual && !esParaActualizarFormulario && !esParaActualizarListaConstantesFunciones && !esParaActualizarObjetoActualRelaciones
				&& !inicializarObjetosRelacionesSession) { 
					
				strTipoLista="";//"this."+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
													
				if(!esParaLogic) {
					strTipoObjetos="$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"";
					//strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"";
				} else {
					strTipoObjetos="$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"";
					//strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()";
				}

				sTablaClaseRelacionada+=","+strTipoLista+ strTipoObjetos;
			
			} else if(inicializarObjetosRelacionesSession) {
				String strSaltoTab="\r\n\t\t\t\t\t\t\t";
				
				strTipoObjetos+=strSaltoTab+GetNombreClaseC(table.ToString())+"ConstantesCarga::cargarArchivosPaquetesRelaciones(PaqueteTipo::$LOGIC);";
				
				if(!esParaLogic) {
					//strTipoObjetos=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Controller=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONCONTROLLERNAME));";
					strTipoObjetos+="\r\n"+strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONNAME.'Lista'));";
					strTipoObjetos+=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"sEliminados=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONNAME.'ListaEliminados'));";
					strTipoObjetos+=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s=array_merge($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s,$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"sEliminados);";
					
				} else {
					//strTipoObjetos=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Controller=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONCONTROLLERNAME));";
					strTipoObjetos+="\r\n"+strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONNAME.'Lista'));";
					strTipoObjetos+=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"sEliminados=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONNAME.'ListaEliminados'));";
					strTipoObjetos+=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s=array_merge($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s,$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"sEliminados);";
				}
				
				sTablaClaseRelacionada+=strTipoObjetos;
				
			} else if(esParaEventos) {
				strTipoLista="this."+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()";
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\tfor(Classe clas:classes) {";
				sTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";				
				sTablaClaseRelacionada+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+".set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"("+strTipoLista+ strTipoObjetos+");";//this.
				sTablaClaseRelacionada+="\r\n\t\t\t\t\tbreak;";
				sTablaClaseRelacionada+="\r\n\t\t\t\t}";
				sTablaClaseRelacionada+="\r\n\t\t\t}";
				
			} else if(esParaActualizarBeanActual) {
				strTipoLista=""+GetNombreClaseObjetoC(table.ToString())+strReturnGeneral+".get"+GetNombreClaseC(table.ToString())+"().";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"";
				} else {
					strTipoObjetos="get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()";
				}

				sTablaClaseRelacionada+="\r\n\t\t\tthis."+GetNombreClaseObjetoC(table.ToString())+strClaseBean+".set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"("+strTipoLista+ strTipoObjetos+");";
			
			} else if(esParaActualizarFormulario) {
				strTipoLista="this."+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(";
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\tfor(Classe clas:classes) {";
				sTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";							
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strTipoLista+ strTipoObjetos+""+GetNombreClaseObjetoC(table.ToString())+/*strClaseBean+*/".get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"());";
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strTipoLista+"inicializarActualizarBindingTabla"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(false);";
				sTablaClaseRelacionada+="\r\n\t\t\t\t\tbreak;";
				sTablaClaseRelacionada+="\r\n\t\t\t\t}";
				sTablaClaseRelacionada+="\r\n\t\t\t}";
				
			} else if(esParaActualizarListaConstantesFunciones) {
				strTipoLista=""+GetNombreClaseObjetoC(table.ToString())+".";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Local";
				} else {
					strTipoObjetos="get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()";
				}

				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"Local.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"("+strTipoLista+ strTipoObjetos+");";
			
			} else if(esParaActualizarObjetoActualRelaciones) {
				String strTipoListaRelaciones="this."+GetNombreClaseObjetoC(collectionInfo.SecondaryTableSchema.ToString())+"BeanSwingJInternalFrame";		
				String strTipoObjetosRelaciones=".quitarFilaTotales();";
				
				sTablaClaseRelacionada+="\r\n\r\n\t\t\t\t\t\t\t"+"if("+strTipoListaRelaciones+"!=null && "+strTipoListaRelaciones+".conTotales) {"+strTipoListaRelaciones+ strTipoObjetosRelaciones+"}";		
	
	
	
				strTipoLista=GetNombreClaseObjetoC(table.ToString())+"Aux.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"(this."+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+");";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"());";
				}

				sTablaClaseRelacionada+="\r\n\t\t\t\t\t\t\t"+strTipoLista+ strTipoObjetos;
			}
		
		} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
			if(!esParaEventos && !esParaActualizarBeanActual && !esParaActualizarFormulario && !esParaActualizarListaConstantesFunciones 
				&& !esParaActualizarObjetoActualRelaciones && !inicializarObjetosRelacionesSession) {
					
				strTipoLista="";//"this."+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
				
				
				if(!esParaLogic) {
					strTipoObjetos="$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
					//strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
				} else {
					strTipoObjetos="$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
					//strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()";		
				}
				
				sTablaClaseRelacionada+=","+strTipoLista+ strTipoObjetos;	
			
			} else if(inicializarObjetosRelacionesSession) {
				String strSaltoTab="\r\n\t\t\t\t\t\t\t";
				
				strTipoObjetos+=strSaltoTab+GetNombreClaseC(table.ToString())+"ConstantesCarga::cargarArchivosPaquetesRelaciones(PaqueteTipo::$LOGIC);";
				
				if(!esParaLogic) {
					//strTipoObjetos=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Controller=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONCONTROLLERNAME));";
					strTipoObjetos+="\r\n"+strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONNAME.'Lista'));";
					strTipoObjetos+=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"sEliminados=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONNAME.'ListaEliminados'));";
					strTipoObjetos+=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s=array_merge($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s,$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"sEliminados);";
					
				} else {
					//strTipoObjetos=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Controller=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONCONTROLLERNAME));";
					strTipoObjetos+="\r\n"+strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONNAME.'Lista'));";
					strTipoObjetos+=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"sEliminados=unserialize($this->Session->read("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones::$STRSESSIONNAME.'ListaEliminados'));";
					strTipoObjetos+=strSaltoTab+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s=array_merge($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s,$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"sEliminados);";
				}
				
				sTablaClaseRelacionada+=strTipoObjetos;
				
			} else if(esParaEventos) {
				strTipoLista="this."+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()";		
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\tfor(Classe clas:classes) {";
				sTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+".set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s("+strTipoLista+ strTipoObjetos+");";//this.
				sTablaClaseRelacionada+="\r\n\t\t\t\t\tbreak;";
				sTablaClaseRelacionada+="\r\n\t\t\t\t}";
				sTablaClaseRelacionada+="\r\n\t\t\t}";
			} else if(esParaActualizarBeanActual) {
				strTipoLista=""+GetNombreClaseObjetoC(table.ToString())+strReturnGeneral+".get"+GetNombreClaseC(table.ToString())+"().";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
				} else {
					strTipoObjetos="get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()";
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\tthis."+GetNombreClaseObjetoC(table.ToString())+strClaseBean+".set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s("+strTipoLista+ strTipoObjetos+");";
			
			} else if(esParaActualizarFormulario) {
				strTipoLista="this."+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(";		
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\tfor(Classe clas:classes) {";
				sTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";											
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strTipoLista+ strTipoObjetos+""+GetNombreClaseObjetoC(table.ToString())+/*strClaseBean+*/".get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s());";
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strTipoLista+"inicializarActualizarBindingTabla"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(false);";
				sTablaClaseRelacionada+="\r\n\t\t\t\t\tbreak;";
				sTablaClaseRelacionada+="\r\n\t\t\t\t}";
				sTablaClaseRelacionada+="\r\n\t\t\t}";
				
			} else if(esParaActualizarListaConstantesFunciones) {
				strTipoLista=""+GetNombreClaseObjetoC(table.ToString())+".";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
				} else {
					strTipoObjetos="get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s()";
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+GetNombreClaseObjetoC(table.ToString())+"Local.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s("+strTipoLista+ strTipoObjetos+");";
			
			}  else if(esParaActualizarObjetoActualRelaciones) {
				String strTipoListaRelaciones="this."+GetNombreClaseObjetoC(collectionInfo.SecondaryTableSchema.ToString())+"BeanSwingJInternalFrame";		
				String strTipoObjetosRelaciones=".quitarFilaTotales();";
				
				sTablaClaseRelacionada+="\r\n\r\n\t\t\t\t\t\t\t"+"if("+strTipoListaRelaciones+"!=null && "+strTipoListaRelaciones+".conTotales) {"+strTipoListaRelaciones+ strTipoObjetosRelaciones+"}";		
	
				
	
				strTipoLista=GetNombreClaseObjetoC(table.ToString())+"Aux.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s(this."+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s);";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s());";		
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t\t\t"+strTipoLista+ strTipoObjetos;
			}
		}
	}
	
	return sTablaClaseRelacionada;
}

public bool ExisteTablaRelacionadaMeC(ArrayList arrayTablasRelacionadasMe,TableSchema tableSchemaActual) {
		bool existe=false;
		
		foreach(TableKeySchemaMe tableKeySchemaMe in arrayTablasRelacionadasMe) {
			if(tableKeySchemaMe.TableSchemaActual.Equals(tableSchemaActual)) {
				existe=true;
				break;
			}
		}
		
		return existe;
	}
	
	public TableKeySchemaMe GetTablaRelacionadaMeEncontradaC(ArrayList arrayTablasRelacionadasMe,TableSchema tableSchemaActual) {
		TableKeySchemaMe tableKeySchemaMeEncontrada=null;
		
		foreach(TableKeySchemaMe tableKeySchemaMe in arrayTablasRelacionadasMe) {
			if(tableKeySchemaMe.TableSchemaActual.Equals(tableSchemaActual)) {
				tableKeySchemaMeEncontrada=tableKeySchemaMe;
				break;
			}
		}
		
		return tableKeySchemaMeEncontrada;
	}
	
	public void QuitarParametrosDinamicosTablasC(ArrayList arrayListTablasRelacionadas) {
		foreach(TableSchema tableSchema in arrayListTablasRelacionadas) {
			tableSchema.Description=tableSchema.Description.Replace("|DIN_UNOAUNO=true","");
			tableSchema.Description=tableSchema.Description.Replace("|DIN_NOMBRE_ADDICIONAL=true","");
		}
	}
	
	public bool GetPermiteClaseRelacionadaC(TableSchema table,TableSchema tablaRelacionadaObjetivo) {
		String sClasesNoRelacionadas=String.Empty;
		String sClasesSiRelacionadas=String.Empty;
		String[] sClases;
		bool blClasePermite=true;
													
		sClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
		
		if(!sClasesNoRelacionadas.Equals(String.Empty)) {
			if(!sClasesNoRelacionadas.Equals(strNINGUNO)) {
				sClases=sClasesNoRelacionadas.Split(',');
													
				foreach(String sClase in sClases){						
					if(sClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))) {
						blClasePermite=false;
						break;
					}
				}
			} else {
				blClasePermite=false;
			}
		} else {
			sClasesSiRelacionadas=GetNombresClasesSiNavegacionFromTableFromPropertiesC(table);	
		
			if(!sClasesSiRelacionadas.Equals(strNINGUNO)) {			
				if(!sClasesSiRelacionadas.Equals(String.Empty)) {
					sClases=sClasesSiRelacionadas.Split(',');
						
					blClasePermite=false;
					
					foreach(String sClase in sClases){						
						if(sClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))) {
							blClasePermite=true;
							break;
						}
					}
				}
			} else {
				blClasePermite=false;
			}
		}
		
		return blClasePermite;
	}
	
	public ArrayList GetArrayListFromHashtableC(Hashtable tablasRelacionadas) {
			Hashtable tablasRelacionadasOrden = new Hashtable();
			ArrayList arrLisTtablasRelacionadasOrden=new ArrayList();
					
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
				arrLisTtablasRelacionadasOrden.Add(collectionInfo);
			}
			
			
		return arrLisTtablasRelacionadasOrden;
	}
		
	public bool TieneFkMultiple(CollectionInfo collectionInfo) {
		bool tiene=false;
		
		if(!blnNoStandardTableFromProperties) {
			if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
				TableKeySchema TableKey =collectionInfo.TableKey;
						
				if(TableKey.PrimaryKeyMemberColumns.Count>1) {
					tiene=true;
				}
			}
		}
		
		return tiene;
	}
	
	public int GetNumeroClasesRelacionadasFinalC(TableSchema table) {
		int iTotal=0;
		
		String sTablaClaseRelacionada=String.Empty;
		
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table);				
		
		iTotal=tablasRelacionadasEncontradas.Count;
						
		//Trace.Write(iTotal);
		
		return iTotal;
	}
	
		public bool ExisteRelacion(ArrayList arrayListChildrenTables,String strSecondaryTableItem) {
			bool blnExiste=false;
			
			foreach(String strSecondaryTable in arrayListChildrenTables) {
				if(strSecondaryTable.Equals(strSecondaryTableItem)) {
					blnExiste=true;	
				}
			}
			
			return blnExiste;
		}
		
	public SchemaExplorer.TableSchemaCollection GetTablasRelacionadasDondeTablaEsForeignKeyC(SchemaExplorer.TableSchema table) 
		{
			SchemaExplorer.TableSchemaCollection tablasRelacionadas=new SchemaExplorer.TableSchemaCollection();
										 			
			for (int i = 0; i < table.Database.Tables.Count; i++)
			{ 	
				if(table.Database.Tables[i].Equals(table))
				{
					//continue;
				}
				
				
				foreach(ColumnSchema columnSchema in table.Database.Tables[i].Columns)
				{
					if(!columnSchema.IsForeignKeyMember)
					{
						continue;
					}
					
					if(GetNombreClaseRelacionadaFromColumn(columnSchema).Equals(table.Name))
					{
						tablasRelacionadas.Add(table.Database.Tables[i]);
						break;
					}
				}
			}
								
			return tablasRelacionadas; 
	}
	
	public TableSchemaCollection GetTablasForModuloC(DatabaseSchema SourceDatabase,String SourceModuloForGenerate,bool paraReportes) {
		return GetTablasForModuloC(SourceDatabase,SourceModuloForGenerate,paraReportes,false,TiposGeneracionGrupo.TODOS,TiposGeneracionRelaciones.NINGUNO);
	}
	
	public TableSchemaCollection GetTablasForModuloC(DatabaseSchema SourceDatabase,String SourceModuloForGenerate,bool paraReportes,bool paraProcesos,TiposGeneracionGrupo tipoGeneracionGrupo,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
			
		TableSchemaCollection tableSchemaCollectionForReporte=new TableSchemaCollection();
		String strReporteGrupoAux="";
		
		for (int i = 0; i < SourceDatabase.Tables.Count; i++) {
			strReporteGrupoAux=GetModuloPaqueteJavaFromTableFromPropertiesC(SourceDatabase.Tables[i]);
			
			if(SourceModuloForGenerate!="" && strReporteGrupoAux.Equals(SourceModuloForGenerate)) {
				if(!paraReportes && !paraProcesos) {					
					if(PermiteGenerarC(SourceDatabase.Tables[i],tipoGeneracionGrupo)) {
						tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);							
					}
					
					//AGREGA TABLAS RELACIONADAS
					if(!tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.NINGUNO)) {
						AddTablasRelacionadasC(SourceDatabase.Tables[i],tableSchemaCollectionForReporte,tiposGeneracionRelaciones);					
					}
								
				} else if(paraReportes && GetEsReporteFromPropertiesC(SourceDatabase.Tables[i])) {
					tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
				
				} else if(paraProcesos && GetEsProcesoFromPropertiesC(SourceDatabase.Tables[i])) {
					tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
				}
			}			
		}
		
		//Trace.WriteLine(tableSchemaCollectionForReporte.Count);
		
		return tableSchemaCollectionForReporte;
	}
	
	public TableSchemaCollection GetTablasMemoriaReportesC(DatabaseSchema SourceDatabase,String SourceTablesForGenerateMemoria,bool paraReportes) {
		return GetTablasMemoriaReportesC(SourceDatabase,SourceTablesForGenerateMemoria,paraReportes,false,TiposGeneracionGrupo.TODOS,TiposGeneracionRelaciones.NINGUNO);
	}
	
	public TableSchemaCollection GetTablasMemoriaReportesC(DatabaseSchema SourceDatabase,String SourceTablesForGenerateMemoria,bool paraReportes,bool paraProcesos,TiposGeneracionGrupo tipoGeneracionGrupo,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
			
		TableSchemaCollection tableSchemaCollectionForReporte=new TableSchemaCollection();
		String strReporteGrupoAux="";
		String[] arrTablasMemoria=null;
		int countTablasMemoria=0;
		bool existe=false;
				
		for (int i = 0; i < SourceDatabase.Tables.Count; i++) {							
			if(SourceTablesForGenerateMemoria!="") {
				existe=false;
				
				arrTablasMemoria=SourceTablesForGenerateMemoria.Split(',');
				
				if(arrTablasMemoria!=null && arrTablasMemoria.Length>0) {
					foreach(String strTablaMemoria in arrTablasMemoria) {
						if(SourceDatabase.Tables[i].Name.Equals(strTablaMemoria)) {
							existe=true;
							
							if(!paraReportes && !paraProcesos) {
								if(PermiteGenerarC(SourceDatabase.Tables[i],tipoGeneracionGrupo)) {
									tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);								
								}
								
								//AGREGA TABLAS RELACIONADAS
								if(!tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.NINGUNO)) {
									AddTablasRelacionadasC(SourceDatabase.Tables[i],tableSchemaCollectionForReporte,tiposGeneracionRelaciones);					
								}
								
							} else if(paraReportes && GetEsReporteFromPropertiesC(SourceDatabase.Tables[i])) {
								tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
							
							} else if(paraProcesos && GetEsProcesoFromPropertiesC(SourceDatabase.Tables[i])) {
								tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
							}
							
							break;
						}
					}	
					
					if(existe) {
						countTablasMemoria++;
					}
					
					if(countTablasMemoria.Equals(arrTablasMemoria.Length)) {
						break;	
					}
				}
			}			
		}
		
		//Trace.WriteLine(tableSchemaCollectionForReporte.Count);
		
		return tableSchemaCollectionForReporte;
	}
	
	public TableSchemaCollection GetTablasForEsquemaC(DatabaseSchema SourceDatabase,String SourceEsquemaForGenerate,bool paraReportes) {
		return GetTablasForEsquemaC(SourceDatabase,SourceEsquemaForGenerate,paraReportes,false,TiposGeneracionGrupo.TODOS,TiposGeneracionRelaciones.NINGUNO);
	}
	
	public TableSchemaCollection GetTablasForEsquemaC(DatabaseSchema SourceDatabase,String SourceEsquemaForGenerate,bool paraReportes,bool paraProcesos,TiposGeneracionGrupo tipoGeneracionGrupo,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
			
		TableSchemaCollection tableSchemaCollectionForReporte=new TableSchemaCollection();
		String strReporteGrupoAux="";
		
		for (int i = 0; i < SourceDatabase.Tables.Count; i++) {
			//Trace.WriteLine(SourceDatabase.Tables[i].Name+"-"+SourceEsquemaForGenerate+"-"+SourceDatabase.Tables[i].Owner);
				
			if(SourceEsquemaForGenerate!="" && SourceDatabase.Tables[i].Owner.Equals(SourceEsquemaForGenerate)) {
				//Trace.WriteLine(SourceDatabase.Tables[i].Name+"-"+SourceEsquemaForGenerate+"-"+SourceDatabase.Tables[i].Owner);
				if(!paraReportes && !paraProcesos) {					
					if(PermiteGenerarC(SourceDatabase.Tables[i],tipoGeneracionGrupo)) {
						tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);								
					}
					
					//AGREGA TABLAS RELACIONADAS
					if(!tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.NINGUNO)) {
						AddTablasRelacionadasC(SourceDatabase.Tables[i],tableSchemaCollectionForReporte,tiposGeneracionRelaciones);					
					}
				} else if(paraReportes && GetEsReporteFromPropertiesC(SourceDatabase.Tables[i])) {					
					tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
				
				} else if(paraProcesos && GetEsProcesoFromPropertiesC(SourceDatabase.Tables[i])) {					
					tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
				}
			}
			
		}
		
		return tableSchemaCollectionForReporte;
	}
	
	public TableSchemaCollection GetTablasNormalesReportesC(TableSchemaCollection tableSchemaCollection,bool paraReportes) {
		return GetTablasNormalesReportesC(tableSchemaCollection,paraReportes,false,TiposGeneracionGrupo.TODOS,TiposGeneracionRelaciones.NINGUNO);
	}
	
	public TableSchemaCollection GetTablasNormalesReportesC(TableSchemaCollection tableSchemaCollection,bool paraReportes,bool paraProcesos,TiposGeneracionGrupo tipoGeneracionGrupo,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
			
		TableSchemaCollection tableSchemaCollectionForReporte=new TableSchemaCollection();
	
		foreach (TableSchema tableSchema in tableSchemaCollection) {
			if(!paraReportes && !paraProcesos) {
				if(PermiteGenerarC(tableSchema,tipoGeneracionGrupo)) {
					tableSchemaCollectionForReporte.Add(tableSchema);
				}
				
				//AGREGA TABLAS RELACIONADAS
				if(!tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.NINGUNO)) {
					AddTablasRelacionadasC(tableSchema,tableSchemaCollectionForReporte,tiposGeneracionRelaciones);					
				}
				
			} else if(paraReportes && GetEsReporteFromPropertiesC(tableSchema)) {
				tableSchemaCollectionForReporte.Add(tableSchema);
				
			} else if(paraProcesos && GetEsProcesoFromPropertiesC(tableSchema)) {
				tableSchemaCollectionForReporte.Add(tableSchema);
				
			}
		}
		
		return tableSchemaCollectionForReporte;
	}
	
	public bool PermiteGenerarC(TableSchema tableSchema,TiposGeneracionGrupo tipoGeneracionGrupo) {
		bool permiteGenerar=false;
		
		if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.TODOS)) {
			permiteGenerar=true;
				
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.GUARDAR_RELACIONES) 
			&& GetEsGuardarRelacionesFromPropertiesC(tableSchema) 
			&& !GetEsTablaModuloFromPropertiesC(tableSchema)) {
			
			permiteGenerar=true;
		
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.CATALOGOS_SIMPLES) 
			&& !GetConAdditionalTableFromPropertiesC(tableSchema) && !GetConMaximoCodigoTableFromPropertiesC(tableSchema)
			&& !GetEsTablaModuloFromPropertiesC(tableSchema)) {
			
			permiteGenerar=true;
		
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.RELACIONES_SIMPLES) 
			&& !GetEsGuardarRelacionesFromPropertiesC(tableSchema) && TieneClasesRelacionadasFinalC(tableSchema)
			&& !GetEsTablaModuloFromPropertiesC(tableSchema)) {
			
			permiteGenerar=true;
			
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.TABLAS_MODULO) 
			&& GetEsTablaModuloFromPropertiesC(tableSchema)) {
			
			permiteGenerar=true;
			
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.TABLAS_AUTOREFERENCIADAS) 
			&& GetEsAutoReferenciadaTablaC(tableSchema)) {
			
			permiteGenerar=true;
			
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.TABLAS_SIN_IDENTITY) 
			&& !TieneIdentityColumnC(tableSchema)) {
			
			permiteGenerar=true;
			
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.TABLAS_UNO_A_UNO) 
			&& EsTablaUnoAUnoFk(tableSchema)) {
			
			permiteGenerar=true;
			
		}  else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.VERSION0_TODO_WEB) 
			&& GetConMaximoCodigoWebTableFromPropertiesC(tableSchema)) {
			
			permiteGenerar=true;
		}
				
		return permiteGenerar;
	}
	
	public void AddTablasRelacionadasC(TableSchema tableSchema,TableSchemaCollection tableSchemaCollectionForReporte,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
		bool conTodos=false;
					
		if(tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.TODOS)) {
			conTodos=true;
		}
					
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(tableSchema,conTodos);
					
		foreach(TableSchema tableSchemaAux in tablasRelacionadasEncontradas) {			
			if(!tableSchemaAux.Name.Equals(tableSchema.Name)) {
				tableSchemaCollectionForReporte.Add(tableSchemaAux);
			}
		}
	}
	
	/*
	public bool ExisteTablaEnTablasRelacionadasC(SchemaExplorer.TableSchema table,String tabla) 
		{
			bool existe= false;
			
			SchemaExplorer.TableSchemaCollection tablasRelacionadas=new SchemaExplorer.TableSchemaCollection();
			System.Collections.Hashtable tablasRelacionadasFinales=new System.Collections.Hashtable();
			
			for (int i = 0; i < table.Database.Tables.Count; i++)
			{ 	
         	if(table.Database.Tables[i].Equals(table))
			{
				continue;
			}
			tablasRelacionadas.Add(table.Database.Tables[i]);
			}
								
			tablasRelacionadasFinales= GetChildrenCollections(table, tablasRelacionadas); 
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadasFinales.Values)
			{	//BYDAN-RECURSIVO
				if(collectionInfo.SecondaryTable==tabla&&collectionInfo.SecondaryTable!=table.Name)
				{
				existe= true;
				}
			}
		return existe;
		}
	*/
	
	public String GetEsquemasImportClasesRelacionadas(String strEsquemaIni,String strEsquemaFin) {
		String strImportRel="";
		
		if(arrayListEsquemasRel!=null) {
			foreach(String strEsquema in arrayListEsquemasRel) {
				//Trace.WriteLine(strEsquema);
				//strImportRel+="\r\n"+strEsquemaIni+"."+strEsquema.ToLower()+"."+strEsquemaFin+"";
				strImportRel+=GetEsquemasImportClasesRelacionadas("",strEsquemaIni,strEsquema,strEsquemaFin);
			}
		}
		
		return strImportRel;
	}
	
	public String GetEsquemasImportClasesRelacionadas(String strComment,String strEsquemaIni,String strEsquema,String strEsquemaFin) {
		String strReturn="";
		
		strReturn="\r\n"+strComment+strEsquemaIni+"."+strEsquema.ToLower()+"."+strEsquemaFin+"";
		
		return strReturn;
	}
	
	public void GetEsquemasClasesRelacionadas(TableSchema TablaBase,ArrayList arrayListEsquemas,ref int intNumeroMaximoNiveles) {//ArrayList
			//Trace.WriteLine("_____________________________");
		
			String strTablaClaseRelacionada=string.Empty;
			TableSchema tableSchemaFK=null;
			TableSchema tableSchemaRel=null;
			
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			//ArrayList arrayListEsquemas=new ArrayList();
			
			//FOREIGN KEY
			//blnNoStandardTableFromProperties=true;
			if(!blnNoStandardTableFromProperties) {										
				foreach(ColumnSchema columnSchema in TablaBase.Columns)	{						
					if(columnSchema.IsForeignKeyMember)	{
						//Trace.WriteLine(columnSchema.Name);
						
						//strTablaClaseRelacionada+="\r\n\tpublic "+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+" "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+";";
						tableSchemaFK=GetTableSchemaFromColumnForeignKey(columnSchema);
						
						//Trace.WriteLine(tableSchemaFK.Owner);
						
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))	{
						//if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),tableSchemaFK))	{
							continue;
						}
						
						//Trace.WriteLine(tableSchemaFK.Owner);						
						
						AgregarEsquema(arrayListEsquemas,tableSchemaFK.Owner,TablaBase);
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
								
				//foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					//strTablaClaseRelacionada+="\r\n\tpublic "+GetNombreClaseC(tableSchemaForeignKey.ToString())+" "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(tableSchemaForeignKey.ToString())+";";					
				//}
			}
				
			
			
			//RELACIONADAS
			//String strTablaClaseRelacionada=string.Empty;
			/*Hashtable*/ tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			ArrayList arrayListRelaciones=new ArrayList();
			Hashtable tablasRelacionadasHijos=new Hashtable();
			String strNombreAdicional="";
			
			
			//Trace.WriteLine("TABLAS-RELACIONADAS");
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);					
				//NO FUNCIONA EN DESORDEN DE RELACIONES
								
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					//strTablaClaseRelacionada+="\r\n\tpublic "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+";";
					tableSchemaRel=collectionInfo.SecondaryTableSchema;
					AgregarEsquema(arrayListEsquemas,tableSchemaRel.Owner,TablaBase);
					
					if(!TablaBase.Name.Equals(tableSchemaRel.Name)) {
						tablasRelacionadasHijos=GetTablasRelacionadas(tableSchemaRel);
						
						if(tablasRelacionadasHijos.Count>0) {
							if(intNumeroMaximoNiveles<=intNumeroMaximoNivelesGlobal) {
								intNumeroMaximoNiveles++;
								//Trace.WriteLine(TablaBase.Name+"->"+tableSchemaRel.Name);
								GetEsquemasClasesRelacionadas(tableSchemaRel,arrayListEsquemas,ref intNumeroMaximoNiveles);
							}
						}
					}
				} else {
					//strTablaClaseRelacionada+="\r\n\tpublic "+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+ "s;";
					tableSchemaRel=collectionInfo.SecondaryTableSchema;
					AgregarEsquema(arrayListEsquemas,tableSchemaRel.Owner,TablaBase);
					
					if(!TablaBase.Name.Equals(tableSchemaRel.Name)) {
						tablasRelacionadasHijos=GetTablasRelacionadas(tableSchemaRel);
						
						if(tablasRelacionadasHijos.Count>0) {
							if(intNumeroMaximoNiveles<=intNumeroMaximoNivelesGlobal) {
								intNumeroMaximoNiveles++;
								//Trace.WriteLine(TablaBase.Name+"->"+tableSchemaRel.Name);
								GetEsquemasClasesRelacionadas(tableSchemaRel,arrayListEsquemas,ref intNumeroMaximoNiveles);
							}
						}
					}
				}
				
				//Trace.WriteLine(tableSchemaRel.Owner);
				//Trace.WriteLine(TablaBase.Name+"-"+tableSchemaRel.Name+"->"+intNumeroMaximoNiveles);
			}			
			
			String strEsquemasExtra=GetEsquemasExtraTableFromPropertiesC(TablaBase);
			String [] arrEsquemasExtra = null;
			
			if(!strEsquemasExtra.Equals("")) {
				arrEsquemasExtra = strEsquemasExtra.Split(',');
				
				foreach(String strEsquemaExtra in arrEsquemasExtra) {
					AgregarEsquema(arrayListEsquemas,strEsquemaExtra.ToLower(),TablaBase);
				}
			}
		//return arrayListEsquemas; 
	}
		
	public static void AgregarEsquema(ArrayList arrayListEsquemas,String strEsquemaNuevo,TableSchema TablaBase) {
		bool blnExiste=false;
		
		foreach(String strEsquema in arrayListEsquemas) {
			//Trace.WriteLine(strEsquema+"="+strEsquemaNuevo);
			
			if(strEsquema.Equals(strEsquemaNuevo)) {
				blnExiste=true;
				
				break;
			}
		}
		
		if(!blnExiste) {
			if((!blnEsReporte && !strEsquemaNuevo.Equals(TablaBase.Owner)) || blnEsReporte) {
				//Trace.WriteLine(strEsquemaNuevo);
				//Trace.WriteLine(TablaBase.Name);
				arrayListEsquemas.Add(strEsquemaNuevo);
			}
		}
	}
	
	public bool ExisteTablaEnTablasRelacionadasC(SchemaExplorer.TableSchema table,String tabla) {
		return ExisteTablaEnTablasRelacionadasC(table,tabla,null,null);
	}
	
	public bool ExisteTablaEnTablasRelacionadasC(SchemaExplorer.TableSchema table,String tabla,ColumnSchema columnSchema) {
		return ExisteTablaEnTablasRelacionadasC(table,tabla,columnSchema,null);
	}
	
	public bool ExisteTablaEnTablasRelacionadasC(SchemaExplorer.TableSchema table,String tabla,TableSchema tableSchema) {
		return ExisteTablaEnTablasRelacionadasC(table,tabla,null,tableSchema);
	}
	
	public bool ExisteTablaEnTablasRelacionadasC(SchemaExplorer.TableSchema table,String tabla,ColumnSchema columnSchema,TableSchema tableSchema) {
		bool existe= false;
			
		SchemaExplorer.TableSchemaCollection tablasRelacionadas=new SchemaExplorer.TableSchemaCollection();
		Hashtable tablasRelacionadasFinales=new Hashtable();
		
		
		/*
		for (int i = 0; i < table.Database.Tables.Count; i++) { 	
         	if(table.Database.Tables[i].Equals(table)) {
				continue;
			}
			
			tablasRelacionadas.Add(table.Database.Tables[i]);
		}
		*/
		
		bool conTodasRelaciones=true;
				
		tablasRelacionadasFinales=GetTablasRelacionadas(table,conTodasRelaciones);
		
		//ANTES
		//tablasRelacionadasFinales= GetChildrenCollections(table, tablasRelacionadas); 
		
		
		
			
		foreach(CollectionInfo collectionInfo in tablasRelacionadasFinales.Values) {
			//BYDAN-RECURSIVO
			if(collectionInfo.SecondaryTable.Equals(tabla)&&!collectionInfo.SecondaryTable.Equals(table.Name))	{
				existe= true;
				//Trace.WriteLine(columnSchema.Name);
			}
		}
		
		
		
		//CUANDO ES FK MULTIPLE
		//Trace.WriteLine(columnSchema.Name+"-"+GetNombreClaseRelacionadaFromColumn(columnSchema));
		
		String sNombreClaseRelacionada="XXX";
		//String sNombreTablaRelacionadaFromColumn=columnSchema.Name.Replace(strID,"");
		
		
		if(columnSchema!=null) {
			sNombreClaseRelacionada=GetNombreClaseRelacionadaFromColumn(columnSchema);
		} else if(tableSchema!=null) {
			sNombreClaseRelacionada=GetNombreClaseC(tableSchema.ToString());
		}
				
		/*		
		if(columnSchema!=null) {
			//NO TOMAR EN CUENTA SI ES RELACION UNO A UNO
			//if(!columnSchema.IsPrimaryKeyMember) { 
			if(columnSchema.IsPrimaryKeyMember) { 
				if(!columnSchema.Name.Contains(sNombreClaseRelacionada)) {
					existe= true;
					//tablaTrace.WriteLine(tabla);
					//Trace.WriteLine(sNombreClaseRelacionada);
				}
			}
		}
		*/
		
		return existe;
	}
	
	public static string GetAltoAuxiliarTableFromPropertiesC(TableSchema table)
	{
		String strAnchoAuxiliar="";
		String nombreTabla="";
		nombreTabla=GetAnchoAltoAuxiliarTableFromPropertiesC(table);
		int intValorTotal=0;
		int intValorBase=150;
		int intValorBasePorColumna=85;
		
		int intNumeroColumnas=GetNumeroColumnasC(table);
		
		
		if(nombreTabla.Equals("")) {
			intValorTotal=intValorBase+(intNumeroColumnas*intValorBasePorColumna);
			
			//System.Windows.Forms.MessageBox.Show(intValorTotal.ToString());
			
			if(intValorTotal<400) {
				strAnchoAuxiliar=intValorTotal.ToString();
			} else if (intValorTotal<600 && intNumeroColumnas<=4) {
				strAnchoAuxiliar="350";
			} else {
				strAnchoAuxiliar="500";
			}
			
		} else {
			strAnchoAuxiliar=nombreTabla.Split(',')[1];
		}
		
		return strAnchoAuxiliar;
	}		
	
	public void InicializarVariablesEmpresaC(String NombreEmpresa,bool blnConFuncionesSqlNativasParam) {
	String strTipoEmpresa=NombreEmpresa;
	blnConFuncionesSqlNativas=blnConFuncionesSqlNativasParam;
	
	arrBusquedaPorTablaFK=new ArrayList();
	
	if(strTipoEmpresa.Equals("ME")) {
		//Trace.WriteLine("ini ME");
		//POR DEFECTO TRABAJAR CON NOMBRES MINUSCULAS (mysql y postgress)
		blnEsLowerCaseDBNames=true;
		blnEsMixedCaseDBNames=false;
		
		if(blnEsLowerCaseDBNames) {
			strIdDB="id";
			strVersionRowDB="versionrow";
		}
		
		//strId="id";
		//strVersionRow="versionRow";
		strIdSeguridad="id";
		strIdGetSetSeguridad="Id";
		strEmpresaSeguridad="com/bydan";
		strPackageEntitiesSeguridad="entity";
		strPackageUtilsSeguridad="util";
		strPackageDataAccessSeguridad="dataaccess";
		strPackageBusinessSeguridad="business";
		strPackageLogicSeguridad="logic";
		strPackageServiceSeguridad="service";
		strEjbSeguridad="ejb";
		strEjbInterfaceSeguridad="interfaces";
		
		strEmpresaAuditoria="com/bydan";
		strPackageAuditoria="seguridad";
		
		/*
		strPackageEntitiesAuditoria="entity";		
		strPackageBusinessAuditoria="business";
		strPackageLogicAuditoria="logic";
		strPackageUtilsAuditoria="util";
		strPackageDataAccessAuditoria="dataaccess";
		*/
		//strIdDB="id";
		//strVersionRowDB="versionrow";
		
		if(!blnEsLowerCaseDBNames&&!blnEsMixedCaseDBNames) {
			strIdDB="ID";//"id";
			strVersionRowDB="VERSIONROW";//"versionRow";
		}
		
		//VARIABLES CORRECION
		strCorreccionGetUserName="getField_sUserName";
		
	} else if(strTipoEmpresa.Equals("TAME")) {
		//Trace.WriteLine("ini TAME");
		blnEsLowerCaseDBNames=false;
		blnEsMixedCaseDBNames=false;
		//strId="id";
		//strVersionRow="versionRow";
		strIdSeguridad="oid";
		strIdGetSetSeguridad="Oid";
		strEmpresaSeguridad="Tame";
		strPackageEntitiesSeguridad="Entities";
		strPackageUtilsSeguridad="Utils";
		strPackageDataAccessSeguridad="DataAccess";
		strPackageBusinessSeguridad="Business";
		strPackageLogicSeguridad="Logic";
		strPackageServiceSeguridad="Service";
		strEjbSeguridad="Ejb";
		strEjbInterfaceSeguridad="Inferfaces";
		
		strIdDB="ID";
		strVersionRowDB="VERSIONROW";
		
		//VARIABLES CORRECION
		strCorreccionGetUserName="getField_chaUserName";
		
	} else if(strTipoEmpresa.Equals("CCFA")) {
		//Trace.WriteLine("ini CCFA");
		blnEsLowerCaseDBNames=false;
		blnEsMixedCaseDBNames=false;
		
		blnEsMaximoTamanioPopup=true;
		//strId="id";
		//strVersionRow="versionRow";
		strIdSeguridad="id";
		strIdGetSetSeguridad="Id";
		strEmpresaSeguridad="ec.mil.gruge";
		strPackageEntitiesSeguridad="entity";
		strPackageUtilsSeguridad="util";
		strPackageDataAccessSeguridad="dataaccess";
		strPackageBusinessSeguridad="business";
		strPackageServiceSeguridad="service";
		strEjbSeguridad="ejb";
		strEjbInterfaceSeguridad="interfaces";
		
		strIdDB="ID";
		strVersionRowDB="VERSIONROW";
	
	}else if(strTipoEmpresa.Equals("CCFA-FAE")) {
		InicializarVariablesFaeContratoC();
	}	
}
	
	public void InicializarVariablesFaeContratoC() {
		//Trace.WriteLine("ini CCFA");
		blnEsLowerCaseDBNames=true;
		blnEsMixedCaseDBNames=false;
		
		blnEsMaximoTamanioPopup=true;
		//strId="id";
		//strVersionRow="versionRow";
		strIdSeguridad="id";
		strIdGetSetSeguridad="Id";
		strEmpresaSeguridad="ec/mil/fae";
		strPackageEntitiesSeguridad="entity";
		strPackageUtilsSeguridad="util";
		strPackageDataAccessSeguridad="dataaccess";
		strPackageBusinessSeguridad="business";
		strPackageServiceSeguridad="service";
		strEjbSeguridad="ejb";
		strEjbInterfaceSeguridad="interfaces";
		
		strEmpresaAuditoria="ec/mil/fae";
		strPackageAuditoria="seguridad";
		
		/*
		strPackageEntitiesAuditoria="entity";		
		strPackageBusinessAuditoria="business";
		strPackageLogicAuditoria="logic";
		strPackageUtilsAuditoria="util";
		strPackageDataAccessAuditoria="dataaccess";
		*/
		
		strIdDB="id";
		strVersionRowDB="versionrow";
	}
	
	public void IniciarTiempoC(Stopwatch stopWatch) {
		if(IS_DEBUG) {
			stopWatch = new Stopwatch();
			stopWatch.Start();
		}
	}
	
	public void DetenerTiempoC(Stopwatch stopWatch,PaquetesGenerar paqueteGenerar,String strSubPaquete) {
		if(IS_DEBUG) {
			stopWatch.Stop();	
			ImprimirTiempoC(stopWatch,paqueteGenerar,strSubPaquete);
		}
	}

	public void ImprimirTiempoC(Stopwatch stopWatch,PaquetesGenerar paqueteGenerar,String strSubPaquete) {
		if(IS_DEBUG) {
			TimeSpan timeSpan = stopWatch.Elapsed;	
			
			String strPaqueteGeneral=GetPaqueteGenerarString(paqueteGenerar,strSubPaquete);
			
			Trace.WriteLine(timeSpan+"-------->"+strPaqueteGeneral);
		}
	}
	
	public void InicializarVariablesPorTabla(TableSchema TablaBase,TiposGeneracionGrupo tiposGeneracionGrupo) 
		{			
			strGlobalTablaNoStandardComment="";
			
			blnNoStandardTableFromProperties=GetNoStandardTableFromPropertiesC(TablaBase);
			
			if(blnNoStandardTableFromProperties) {
				strGlobalTablaNoStandardComment="//";
				
				blnTieneTipoPKStandard=GetTieneTipoPKStandardC(TablaBase);
				strPorTablaColumnsPKParametros=GetColumnsPKParametrosC(TablaBase);
				strPorTablaColumnsPKParametrosSinComaPrimero=GetColumnsPKParametrosSinComaPrimeroC(TablaBase);
				strPorTablaColumnsPKParametrosUso=GetColumnsPKParametrosUsoC(TablaBase);
				strPorTablaColumnsPKParametrosUsoSinComaPrimero=GetColumnsPKParametrosUsoSinComaPrimeroC(TablaBase);
				intPorTablaCountColumnsPKC=GetCountColumnsPKC(TablaBase);
				columnSchemaCollectionPK=GetColumnsPKC(TablaBase);
			}
			
			//Trace.WriteLine("HERE");
			
			//VARIABLES CCFA
			blnEsTablaLatitudLongitud=ContieneLatitudLongitudCCFAC(TablaBase);
			//VARIABLES CCFA
			
			blnTieneBusquedas=GetExisteBusquedasTablaC(TablaBase);
			
			intNumeroIndicesBusquedas=0;
			intNumeroMaximoColumnasBusquedas=1;			
			if(blnTieneBusquedas) {
				intNumeroMaximoColumnasBusquedas=GetNumeroMaximoColumnasBusquedasTablaC(TablaBase);
				intNumeroIndicesBusquedas=GetNumeroIndicesBusquedasTablaC(TablaBase);
			}
			
			
			blnTieneValidacionTodo=GetValidacionTodoFromPropertiesC(TablaBase);
			blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
			blnEsReporteGuardar=GetEsReporteGuardarFromPropertiesC(TablaBase);
			blnEsReporteAdditional=GetEsReporteAdditionalFromPropertiesC(TablaBase);						
			blnEsReporteUsaColumnasBase=GetEsReporteUsaColumnasBaseFromPropertiesC(TablaBase);
			
			blnEsReporteParaGrupoReporte=false;			
			strEsReporteComment="";
			
			if(blnEsReporte) {
				blnEsReporteParaGrupoReporte=GetEsReporteParaGrupoReporteFromPropertiesC(TablaBase);
				
				if(!GetEsReporteUsaColumnasBaseFromPropertiesC(TablaBase)) {
					strEsReporteComment="//";
				}				
			}
			
			blnEstablaModulo=GetEsTablaModuloFromPropertiesC(TablaBase);
			blnEsReporteVista=GetEsReporteVistaFromPropertiesC(TablaBase);
			blnEsProceso=GetEsProcesoFromPropertiesC(TablaBase);
			blnEsProcesoParametro=GetEsProcesoParamFromPropertiesC(TablaBase);
			blnTieneIdentityColumn=TieneIdentityColumnC(TablaBase);
			blnConAdditional=GetConAdditionalTableFromPropertiesC(TablaBase);
			
			blnConMinCodigoWeb=GetConMinimoCodigoWebTableFromPropertiesC(TablaBase);
			blnConMaxCodigoWeb=GetConMaximoCodigoWebTableFromPropertiesC(TablaBase);
			
			//blnConMinCodigoWeb=true;
			
			strSufijoVersion="";
			strCommentMinCodigoWebIni="";
			strCommentMinCodigoWebFin="";
			
			//GENERACION NORMAL			
			if(!tiposGeneracionGrupo.Equals(TiposGeneracionGrupo.VERSION0_TODO_WEB)) {			
				if(blnConMinCodigoWeb) {
					strCommentMinCodigoWebIni="/*";
					strCommentMinCodigoWebFin="*/";
					
				} else {
					strCommentMinCodigoWebIni="";
					strCommentMinCodigoWebFin="";
				}
			} else {
				//GENERACION VERSION0
				if(blnConMaxCodigoWeb) {
					strSufijoVersion="TodoWeb";
					strCommentMinCodigoWebIni="";
					strCommentMinCodigoWebFin="";
				}
			}
			
			blnTieneImagen=ContieneImagen(TablaBase);	
			blnTieneDocumento=ContieneDocumento(TablaBase);
			blnTieneArchivo=ContieneArchivo(TablaBase);
			blnTieneDate=TieneDateColumnC(TablaBase);				
			blnTieneDateTime=TieneDateTimeColumnC(TablaBase);
			blnTieneTime=TieneTimeColumnC(TablaBase);
			blnTieneSeguridadCampo=ConSeguridadCampo(TablaBase);
			blnTieneAuditoriaAuto=ConAuditoriaAuto(TablaBase);
		 	blnTieneTextArea=ContieneTextArea(TablaBase);
			blnTieneValidacionTodo=GetValidacionTodoFromPropertiesC(TablaBase);
			//bool isValidacionTodos=GetValidacionTodoFromPropertiesC(column.Table);		
			blnConJQueryFuncionalidadCode=GetConJQueryTableC(TablaBase);
			
			blnEsTablaUnoAUnoFk=EsTablaUnoAUnoFk(TablaBase);
			
			blnTieneForeignKey=TieneForeignKeyC(TablaBase);
			blnTieneRelaciones=TieneClasesRelacionadasC(TablaBase);
			
			if(blnEsTablaUnoAUnoFk) {
				strNombreTablaUnoAUnoPk=NombreTablaUnoAUnoPk(TablaBase);
			}
			
			strPackageJava=GetPackageTableFromProperties(TablaBase);
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
				
				if(EsDateTimeColumn(columnSchema)){
					 blnTieneTimestamp=true;
					break;
				}
			}
			
		if(blnEsMixedCaseLabelNames) {
			GetInicializarVariablesLabel("MIXED_CASE");
		}
		
		if(blnConAdditionalExtraCode) {
			GenerateFoldersExtraCodeC(TablaBase);
		}
		
		blnPanelConTab=GetPanelConTabTableFromPropertiesC(TablaBase);
		blnPanelSinBasico=GetPanelSinBasicoTableFromPropertiesC(TablaBase);
		blnPanelConUbicacion=GetPanelConUbicacionTableFromPropertiesC(TablaBase);
		
		arrayListEsquemasRel=new ArrayList();			
			
		int intNumeroMaximoNiveles=1;
			
		GetEsquemasClasesRelacionadas(TablaBase,arrayListEsquemasRel,ref intNumeroMaximoNiveles);////arrayListEsquemasRel=
		
		strSeparadorName="-";
	
		
		if(!blnConJQueryCode) {
			if(!ConPhpBasico){
				strSeparadorName=".";
			} else {
				strSeparadorName="-";
			}
		} else {
			strSeparadorName="-";
		}
		
		//Trace.WriteLine(strSeparadorName);
	}
	
	public void GetInicializarVariablesLabel(String strTipo) {
		if(strTipo.Equals("MIXED_CASE")) {
			strGenerarReporte="Generar Reporte";
			strGenerarReporteTodos="Todos los Resultados";
			strRecargarInformacion="Recargar";
			strEdicion="Edición";
			strSeleccion="Seleccionar";
			strCodigoUnico="Código Único";
			strNuevo="Nuevo";
			strNuevoTabla="Nuevo T.";
			strActualizar="Actualizar";
			strEliminar="Eliminar";
			strCancelar="Cancelar";
			strContinuar="Continuar";
			strCerrarMensaje="Cerrar Mensaje";
			strGuardarCambios="Guardar";
			strGuardar="Guardar";
			strMantenimientoDe="Mantenimiento de ";
			strReporteDe="Reporte de ";
			strNumeroDe="Número de ";
			strAProcesar=" A Procesar:";
			//strBusquedas="BUSQUEDAS";
			strBusqueda="Búsqueda";
			strBuscar="Buscar";
			strPor="Por";
			strDe=" De ";
			strCatalogosSimples="Catálogos Simples";
			strCatalogosCompuestos="Catálogos Compuestos";
			strCargarArchivo="Cargar Archivo";
			strCerrarPagina="Cerrar Página";
			strCerrar="Cerrar";
			strArchivo="Ver Archivo";
			strDuplicar="Duplicar";
			strCopiar="Copiar";
			strSiguientes="Siguientes";
			strAnteriores="Anteriores";
			strOrden="Orden";
	
			strTipoBusqueda="Tipo=";
			strCodigoDe="Código Único de ";
			strParametrosBusqueda="Parámetros -> ";	
			
			strAltMax="Alt Max.";
			strImprimirPagina="Imp. Datos";
			strSelTodos="Sel.Todos";	
			strSinCerrar="Sin Cerrar";
			strSinMensaje="Sin Mensaje";
			strEli="Eli";
			strSel="Sel";
		}
	}
	
	public static string GetEsquemasExtraTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("ESQUEMAS"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}			
	
	
	
	return nombreTabla;
	}
	
	public String GetSchemaTableFromDBC(TableSchema tableSchema,String Schema) {
		String strSchema=string.Empty;
			
		strSchema=GetSchemaTableFromProperties(tableSchema,"");
		
		if(strSchema.Equals("")) {
			strSchema=tableSchema.Owner.ToLower();	
			
			if(strSchema.Equals("") || strSchema.Equals("dbo")) {
				strSchema=Schema;
			}
		}
		
		return strSchema;
	}
	
	public static string GetPackageTableFromProperties(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("PCKG"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static bool GetValidacionTodoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
										
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("VALIDACIONTODO"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
	
		return blExiste;
	}
	
	public bool ContieneTextArea(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(columnSchema.DataType==DbType.AnsiString ||columnSchema.DataType==DbType.AnsiStringFixedLength ||columnSchema.DataType==DbType.String||columnSchema.DataType==DbType.StringFixedLength) {
					if(columnSchema.Size>50) {
						blContiene=true;
					}
					
					break;
				}
			}
			
			return blContiene;			
		}
		
		
		public bool ContieneImagen(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(EsPathImagenColumn(columnSchema)) {
					blContiene=true;
					break;
				}
			}
			
			return blContiene;			
		}
		
		public bool ContieneDocumento(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(EsPathDocumentoColumn(columnSchema)) {
					blContiene=true;
					break;
				}
			}
			
			return blContiene;			
		}
		
		public bool ContieneArchivo(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(EsPathArchivoColumn(columnSchema)) {
					blContiene=true;
					break;
				}
			}
			
			return blContiene;			
		}
		
	
		
	public bool ContieneLatitudLongitudCCFAC(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			bool blContieneLatitud=false;
			bool blContieneLongitud=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
				
				if(columnSchema.Name.Equals("Latitud")){
					blContieneLatitud=true;					
				}
				
				if(columnSchema.Name.Equals("Longitud")){
					blContieneLongitud=true;			
				}
				
				if(blContieneLatitud&&blContieneLongitud) {
					blContiene=true;
					break;
				}
			}
			
			return blContiene;			
		}
		
	public String GetColumnsPKParametrosUsoC(TableSchema tablaBase) {		
			String strColumnsPKParametros="";
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					strColumnsPKParametros+=GetParameterFunctionUsoColumnC(tablaBase.Columns[i],true) ;
				} 
			} 
			
			return strColumnsPKParametros;
		}
		
		public String GetColumnsPKParametrosUsoSinComaPrimeroC(TableSchema tablaBase) {		
			String strColumnsPKParametros="";
			bool blnEsPrimero=true;
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					strColumnsPKParametros+=GetParameterFunctionUsoColumnC(tablaBase.Columns[i],!blnEsPrimero) ;
					
					if(blnEsPrimero) {
						blnEsPrimero=false;
					}
				} 
			} 
			
			return strColumnsPKParametros;
		}
		//GetParameterSelectionC(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
		
		public String GetParameterFunctionUsoColumnC(ColumnSchema columnSchema,bool blnConComaInicial) 
		{
			String strParameterFunctionColumn="";
			String strComa="";
			
			if(blnConComaInicial) {
				strComa=",";
			}
			
			strParameterFunctionColumn+=strComa+GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema); 
		
			return strParameterFunctionColumn;
		}
		
		public String GetColumnsPKParameterSelectionC(TableSchema tablaBase,bool esNative) {		
			String strColumnsPKParametros="";
			bool esUnico=true;
			bool esUltimo=false;
			bool esRanges=false;
			int countNumeroPK=1;
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					if(countNumeroPK>=intPorTablaCountColumnsPKC) {
						esUltimo=true;
					}
					
					strColumnsPKParametros+=GetParameterSelectionC(tablaBase.Columns[i],esUltimo,esUnico,false,esNative,esRanges,false) ;
					countNumeroPK++;
				} 
			} 
			
			return strColumnsPKParametros;
		}
		
		public String GetParameterSelectionC(ColumnSchema column,bool esUltimo,bool esUnico,bool esCompuesto,bool esNative,bool esRanges,bool esRangesFinal) 
		{
			String strParaConvertirString=""; 
			String strParaConvertirString0=""; 			
			String strParaBusquedaString=""; 
			String strParaBusquedaString0=""; 
			String strParaBusquedaCompuesto=""; 
			String strEqualsLike="Equal";
			
			String strSufijoRangesFinal="";
			String strSufijoRangesFinalName="";
						
						
			if(EsDateColumn(column) || EsDateTimeColumn(column) || EsTimeColumn(column)) {
				strParaConvertirString="'\\''."; 
				strParaConvertirString0=".'\\''"; 	
			}
						
			//SETEO LOS PARAMETROS DEACUERDO SI ES RANGO
			
			if(esRanges) {
				if(esRangesFinal) {
					esUltimo=true;
					strEqualsLike="MenorIgual";
					strSufijoRangesFinal=strSufijoRangoFinal;
					strSufijoRangesFinalName=",'"+strSufijoRangoFinal+"'";	
				} else {
					esUltimo=false;
					strEqualsLike="MayorIgual";
				}
			}
						
			/*
			if(GetConRangoBusquedasColumnFromPropertiesC(column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(column,indexSchema)) {
				if(!esRangesFinalFinal) {
					esRangesFinalInicial=true;
				}
			}
			*/
			
			/*
			if(esRangesFinal) {
				strSufijoRangesFinal=strSufijoRangoFinal;	
			}
			*/
			
			if(esCompuesto)
			{
				strParaBusquedaCompuesto="Constantes::getSSchema()+\".\"+"+GetNombreClaseC(column.Table.ToString())+"DataAccess::$TABLENAME+\".\"+";
										  
			}
			
			if(/*column.DataType==DbType.DateTime ||*/column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				if(!esUnico)	
				{
					strEqualsLike="Like";
					strParaBusquedaString=".\"%\"";
					strParaBusquedaString0="\"%\".";
				}
			}
			
			String strConNative="";
			
			if(esNative) {
				strConNative=strNative;
			}
			
			String strColumnName="";
			
			if(column.Name!=strId) {
				if(blnEsColumnaConNombrePrefijoTipo) {
					strColumnName=column.Name;
				} else {
					strColumnName=GetNombreColumnFromProperties(column);
				}
			} else {
				if(blnEsColumnaConNombrePrefijoTipo) {
					strColumnName=strIdGetSet;
				} else {
					strColumnName=strId;
				}
			}
			
			bool blnEsPKCompuestoTabla=EsPKCompuestoTabla(column.Table);
			String  strPalabraclaveEsPKCompuestoTabla="";
			
			if(blnEsPKCompuestoTabla&&column.IsPrimaryKeyMember) {
				strPalabraclaveEsPKCompuestoTabla="Constantes::$IDCOMPOSEKEY+";
			}
			
			String strParameterSelection=String.Empty;
			strParameterSelection="\r\n\r\n\t\t\t$parameterSelectionGeneral"+column.Name+strSufijoRangesFinal+"= new ParameterSelectionGeneral();";
			strParameterSelection+="\r\n\t\t\t$parameterSelectionGeneral"+column.Name+strSufijoRangesFinal+"->setParameterSelectionGeneral"+strEqualsLike+"(ParameterType::$"+GetTipoColumnaClaseEnumC(column)+","+strParaConvertirString+strParaBusquedaString0+"$"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoRangesFinal+ /*GetTipoColumnaToString(column)+*/strParaBusquedaString +strParaConvertirString0+","+strParaBusquedaCompuesto+strPalabraclaveEsPKCompuestoTabla+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones::$"+/*GetNombreColumnFromProperties(column)*/column.Name.ToUpper()/*strConNative+strColumnName*/+""+strSufijoRangesFinalName+",";//getColumnName(), DataAccess
			
			if(esUltimo) {
			strParameterSelection+="ParameterTypeOperator::$NONE);";		
			}
			else
			{
			strParameterSelection+=	"ParameterTypeOperator::$AND);";	
			}
			
			strParameterSelection+="\r\n\t\t\t$queryWhereSelectParameters->addParameter($parameterSelectionGeneral"+column.Name+strSufijoRangesFinal+");";
		
			return strParameterSelection;
		}
	
	public static bool GetConNoLoadForeignKeyColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("FKNOLOAD"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetConNoSaveForeignKeyColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("FKNOSAVE"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
		public static bool GetConSeguridadColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONSEG"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
		public int GetCountColumnsPKC(TableSchema tablaBase) {		
			int intColumnsPKParametros=0;
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					intColumnsPKParametros++;
				} 
			} 
			
			return intColumnsPKParametros;
		}
		
		
	public String GetParameterFunctionColumnC(ColumnSchema columnSchema,bool blnConComaInicial) 
		{
			String strParameterFunctionColumn="";
			String strComa="";
			
			if(blnConComaInicial) {
				strComa=",";
			}
			
			strParameterFunctionColumn+=strComa+GetTipoColumnaClaseC(columnSchema)+" "+GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema); 
		
			return strParameterFunctionColumn;
		}
		
	public String GetColumnsPKParametrosSinComaPrimeroC(TableSchema tablaBase) {		
			String strColumnsPKParametros="";
			bool blnEsPrimero=true;
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 			
					strColumnsPKParametros+=GetParameterFunctionColumnC(tablaBase.Columns[i],!blnEsPrimero) ;
					
					if(blnEsPrimero) {
						blnEsPrimero=false;
					}
				} 
			} 
			
			return strColumnsPKParametros;
		}
		
	public String GetColumnsPKParametrosC(TableSchema tablaBase) {		
			String strColumnsPKParametros="";
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					strColumnsPKParametros+=GetParameterFunctionColumnC(tablaBase.Columns[i],true) ;
				} 
			} 
			
			return strColumnsPKParametros;
		}
		
	public bool GetTieneTipoPKStandardC(TableSchema tablaBase) {
			bool blnTieneTipoPKStandard=false;
			String strColumnsPKParametros="";
			int intCountPK=0;
			bool blnEsBigIntColumn=false;
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					intCountPK++;
					
					blnEsBigIntColumn=EsBigIntColumn(tablaBase.Columns[i]);					
					
				} 
			} 
			
			if(intCountPK.Equals(1)&&blnEsBigIntColumn) {
				blnTieneTipoPKStandard=true;
			}
			
			return blnTieneTipoPKStandard;
		}		
		
	
	public static string GetReporteGrupoTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="DEFAULT";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strESREPORTEGROUP))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetReporteGrupoTableFromPropertiesC(ColumnSchema column) {
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
	
		if(column.Description!=""){		
			descripciones=column.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals(strESREPORTEGROUP)) {
					nombreTabla=tipo[1];
					break;
				}
			}
		}		
		
		return nombreTabla;
	}
	
	public static bool TieneSchemaTableFromPropertiesC(TableSchema table,String strSchema)
	{
		bool blnTieneSchema=false;
	String nombreTabla=strSchema;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("SCHEMA"))
						{
							blnTieneSchema=true;
							//nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return blnTieneSchema;//nombreTabla;
	}
	
	public static bool GetSinUsoFuncionalidadDatosTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("SINUSODATOS"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}				
	
	//Trace.WriteLine(blnConAuditoria);
	return blnConAuditoria;
	}
	
	
	public static bool GetConAdditionalTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=true;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strCONADDIT))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("false")) {
								blnConAuditoria=false;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConAdditionalParameterReturnTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONADDIT_PARAMRET"))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConMaximoCodigoTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=true;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strCONMAXCODE))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("false")) {
								blnConAuditoria=false;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConMinimoCodigoWebTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONMINCODE_WEB"))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConMaximoCodigoWebTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONMAXCODE_WEB"))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConMaximoCodigoDatabaseFromPropertiesC(DatabaseSchema databaseSchema)
	{
	String nombreTabla="";//table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=true;
	
	if(databaseSchema.Description!="")
	{
		
		descripciones=databaseSchema.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strCONMAXCODE))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("false")) {
								blnConAuditoria=false;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	
	//CONPERSISTENCIA
	
	public static bool GetConPersistenciaTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConPersistencia=true;
	
	if(table.Description!="")
	{
		//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONPERSISTENCIA"))
						{	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
							nombreTabla=tipo[1];
							
							if(nombreTabla!="true") {
								blnConPersistencia=false;
								break;
							}
						}
					}
	}
	
	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
	return blnConPersistencia;
	}
	
	public static bool GetConSeleccionarTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConPersistencia=false;
	
	if(table.Description!="")
	{
		//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
		descripciones=table.Description.Split('|');
		
		//Trace.WriteLine(table.Description);
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONSELEC"))
						{	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConPersistencia=true;
								break;
							}
						}
					}
	}
	
	//Todos tienen esta funcionealidad
	blnConPersistencia=true;
	
	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
	return blnConPersistencia;
	}
	
	public static bool GetConPopupTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	//bool blnConPopup=false;
	bool blnConPopup=true;
	
	if(table.Description!="")
	{
		//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("ESPOPUP"))
						{	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConPopup=true;
								break;
								
							} else if(nombreTabla.Equals("false")) {
								blnConPopup=false;
								break;
							}
						}
					}
	}
	
	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
	//Trace.WriteLine(blnConPopup+table.Name);
	
	return blnConPopup;
	}
	
	/*
    public static string GetNombreClaseC(string strTablaBase)
	{
	//strTablaBase=strTablaBase.Replace("dbo.",string.Empty);
	string [] strTabla = strTablaBase.Split('.');
	string strNombreClase=string.Empty;
	
	strNombreClase=strTabla[1];		
	strNombreClase=strNombreClase.Replace("\"","");		
	
	string[] arrNombreClases = strNombreClase.Split('_');
	
	
	//PARA CUANDO TENGAN PREFIJO EJM_gnr_lista, NO SE TOMA EN CUENTA EL PREFIJO
	if(arrNombreClases.Length>1) {
		//System.Windows.Forms.MessageBox.Show(strNombreClase);
		strNombreClase=arrNombreClases[1];
	}
	
	return strNombreClase;
	}
	*/
	
	public static string GetNombreClaseC(string strTablaBase) {
		//strTablaBase=strTablaBase.Replace("dbo.",string.Empty);
		string [] strTabla = strTablaBase.Split('.');
		string strNombreClase=string.Empty;
		
		strNombreClase=strTabla[1];		
		strNombreClase=strNombreClase.Replace("\"","");		
		return strNombreClase;
	}
	
	public static string GetNombreClaseObjetoC(string strTablaBase)
	{
	//strTablaBase=strTablaBase.Replace("dbo.",string.Empty);
	string [] strTabla = strTablaBase.Split('.');
	string strNombreClase=string.Empty;
	
	strNombreClase=strTabla[1].Substring(0, 1).ToLower()+strTabla[1].Substring(1, strTabla[1].Length-1).ToLower();		
	strNombreClase=strNombreClase.Replace("\"","");		
	return strNombreClase;
	}
	
	public static string GetPrefijoTablaC()	{
		string strPrefijoTabla="";//"Field"+"_";
		if(blnEsColumnaConNombrePrefijoTipo) {
			strPrefijoTabla=GetPrefijoTablaGeneralC();
		}
		
		return strPrefijoTabla;
	}
	
	public static string GetPrefijoTablaGeneralC()	{
		string strPrefijoTabla="";//"Field"+"_";		
		
		return strPrefijoTabla;
	}
	
	public static string GetPrefijoRelacionC() {
		string strPrefijoRelacion="";//"Relationship"+"_";
		
		if(blnEsColumnaConNombrePrefijoTipo) {
			strPrefijoRelacion=GetPrefijoRelacionGeneralC();
		}
		
		return strPrefijoRelacion;
	}
	
	public static string GetPrefijoRelacionGeneralC() {
		string strPrefijoRelacion="Relationship"+"_";		
		return strPrefijoRelacion;
	}
	
	public static string GetPrefijoTipoC(ColumnSchema column) {
		string strPrefijoTipo = column.NativeType.ToString().Substring(0, 3).ToLower();
		
		if(blnEsColumnaConNombrePrefijoTipo) {
			strPrefijoTipo =GetPrefijoTipoGeneralC(column);
		} else {
			strPrefijoTipo ="";
		}
		
		strPrefijoTipo="";
		
		return strPrefijoTipo;
	}
	
	public static string GetPrefijoTipoGeneralC(ColumnSchema column) {
		string strPrefijoTipo = column.NativeType.ToString().Substring(0, 3).ToLower();
	
		if(GetTipoColumnaFromColumn(column)!="") {
			strPrefijoTipo =GetTipoColumnaFromColumn(column).Substring(0, 3).ToLower();
		}
	
		switch (strPrefijoTipo) {
			case "nva": {
				strPrefijoTipo="str" ;
				break;
			} case "var": {
				strPrefijoTipo="str" ;
				break;
			} case "dat": {
				strPrefijoTipo="str" ;
				break;
			} case "tim": {
				if(column.Name==strVersionRow) {
					strPrefijoTipo=  "str";
				}
				
				break;
			}						
		}
		
		return strPrefijoTipo;
	}
	
	public static string GetPrefijoTipoToGetSetC(ColumnSchema column)
	{
		string strPrefijoTipo =column.NativeType.ToString().Substring(0, 1).ToUpper()+ column.NativeType.ToString().Substring(1, 2).ToLower();
	
		if(GetTipoColumnaFromColumn(column)!="") {
			if(blnEsColumnaConNombrePrefijoTipo) {
				strPrefijoTipo =GetTipoColumnaFromColumn(column).Substring(0, 1).ToUpper()+GetTipoColumnaFromColumn(column).Substring(1, 2).ToLower();
			} else {
				strPrefijoTipo ="";
			}
		}
	
		if(blnEsColumnaConNombrePrefijoTipo) {
			switch (strPrefijoTipo)
			{
				case "Nva":
				{
					strPrefijoTipo="Str" ;
					break;
				}
				case "Var":
				{
					strPrefijoTipo="Str" ;
					break;
				}
				case "Dat":
				{
					strPrefijoTipo="Str" ;
					break;
				}
				case "Tim":
				{
					if(column.Name==strVersionRow)
					{
						strPrefijoTipo=  "Str";
					}
					
					break;
				}								
			}
		
		} else {
			strPrefijoTipo ="";
		}
		
		
		return strPrefijoTipo;
	}
	
	public string GetForeignKeysColumnListaValorCodigoC(TableSchema TablaBase)
	{
		string strNombre="";
		
		if(!blnNoStandardTableFromProperties) {	
			for (int i = 0; i < TablaBase.Columns.Count; i++){ 
				if(TablaBase.Columns[i].IsForeignKeyMember) {			
					if(VerificarColumnaCatalogoGeneralC(TablaBase.Columns[i])) {
						strNombre+="\r\n\tpublic static $STR"+TablaBase.Columns[i].Name.ToUpper()+"CODIGO='"+GetKeyListaColumnFromPropertiesC(TablaBase.Columns[i])+"';";	
					}
				}
			}
		} else {
			ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			//string strInitFuncion="\r\n\tpublic static String get"+GetPrefijoRelacionC();
			//string strColumnasDescripcion="";
			//System.Windows.Forms.MessageBox.Show("a");
			int cont=0;
			foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {				
				if(VerificarTablaValorCatalogoGeneralC(tableSchemaForeignKey)) {
					cont++;
					strNombre+="\t\tpublic static String S"+cont.ToString()+"CODIGO=\"\";\r\n\r\n";	
				}
			}
		}
		
	return strNombre;
	}
	
	public String GetForeignKeysDescriptionsC(TableSchema TablaBase)  {
		String strHtml="";
		String strTituloColumna="";
		String strGetColumnsFaces="";
									
		string strPrefijo=String.Empty;
		string strPrefijoTabla=GetPrefijoTablaC();
		string strPrefijoFuncion="set";
		string strPrefijoTipo ="";
		string strNombre ="";
		
		for (int i = 0; i < TablaBase.Columns.Count; i++){		
			strPrefijoTipo = GetPrefijoTipoC(TablaBase.Columns[i]);	
			strPrefijo=strPrefijoFuncion;		
			strNombre = GetNombreColumnaClaseC(TablaBase.Columns[i]);
		
			if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])) { continue; }
			
			if(EsPathImagenDocumentoArchivoColumn(TablaBase.Columns[i])) {
				//||TablaBase.Columns[i].IsForeignKeyMember
				continue;
			}
			
			//strTituloColumna=GetColumnsFacesTituloTableMaintenanceC(TablaBase.Columns[i],TablaBasePadre,columnSchemaPadre,esParaForeignKey,TablaBasePadreFK,esMantenimientoDeImagen,ConFaces,ConRichFaces);		
			//strHtmlTitulosColumnas+=GetJQueryHtmlTablaReemplaceTitulo(strTituloColumna);
		
			if(!TablaBase.Columns[i].Name.Equals(strId)) {
				if(TablaBase.Columns[i].IsForeignKeyMember) {
					//strHtml+="\r\n\t\t\t\t$this->htmlTabla"+GetNombreClaseC(TablaBase.ToString())+"s.='<td> '."+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::getRelationship_"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(TablaBase.Columns[i]))+"Descripcion($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->getRelationship_"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(TablaBase.Columns[i]))+"()).'</td>';";
					strHtml+="\r\n\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strPrefijo+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+"("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::get"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(TablaBase.Columns[i]))+"Descripcion($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(TablaBase.Columns[i]))+"()));";//Relationship_
				}
				
				//continue;
			}				
		}
		
		//if(esMantenimientoSimple){
			//BYDAN-TO-DO
			//Trace.WriteLine("ok-ok-ok-ok-ok-ok-ok");
			//strHtml+=GetNavegacionTituloTablaFacesTablasClasesRelacionadasC(TablaBase,esParaForeignKey,ConFaces,ConRichFaces,true);					
			//strHtmlTitulosColumnas+=GetNavegacionTituloSoloTablaFacesTablasClasesRelacionadasC(TablaBase,esParaForeignKey,ConFaces,ConRichFaces,true);
		//}
		
						
		
							
		return strHtml;
	}

	public static bool GetFinalJspVersionFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("FINALJSPVERSION"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public string GetXmlColumnaFuncionDescripcionC(ColumnSchema column,String tablaBase)
	{
		string strInitFuncion="\r\n\tpublic static function get"+GetPrefijoRelacionC();
		string strNombre="";
		
			
		if(column.IsForeignKeyMember)
		{			
			TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);;
			
			if(column.Table.Name.Equals(tableSchemaFK.Name)) {
				return "";
			}
			
			strNombre+=strInitFuncion+ GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"Descripcion("+/*GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+*/"$"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(column)) +") {\r\n";
			strNombre+="\t\t$sDescripcion='none';\r\n\r\n";
			strNombre+="\t\tif($"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(column)) +"!=null) {\r\n";
			
			//&&$"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(column)) +"->get"+strIdGetSet+"()!=0
			
			strNombre+="\t\t\t$sDescripcion="+GetNombreClaseC(tableSchemaFK.ToString()) +"ConstantesFunciones::get"+GetNombreClaseC(tableSchemaFK.ToString()) +"Descripcion($"+GetNombreClaseObjetoC(tableSchemaFK.ToString()) +");";
			
			//strNombre+="\t\t\t$sDescripcion=$"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(column)) +"->"+GetXmlColumnaFuncionDescripcionFromPropertiesC(column)+";";
			
			strNombre+="\r\n\t\t}\r\n\r\n";
			strNombre+="\t\treturn $sDescripcion;\r\n\t}";	
		}
		
	return strNombre;
	}
	
	public  String GetXmlColumnaFuncionDescripcionFromPropertiesC(ColumnSchema column)
	{
	
	TableSchema tablaRelacionada=column.Table;//GetNombreTablaRelacionadaFromColumn(column);
	
	String strNombreTabla=GetNombreClaseRelacionadaFromColumn(column);
	
	foreach(TableSchema tableForeignKey in column.Database.Tables)
	{
		if(tableForeignKey.Name.Equals(strNombreTabla))
		{
			tablaRelacionada=tableForeignKey;
		}
	}
	
	string strPrefijoTabla="";strPrefijoTabla+="";
	string strPrefijoTipo =""; strPrefijoTipo +=""; 
	string strNombre = "";strNombre += "";
	
	String strColumnaDetalle="get"+strIdGetSet+"()"+GetTipoColumnaToString(column);
	String[] descripciones;
	String[] tipo;
	
	descripciones=null;
	tipo=null;
	
	strColumnaDetalle=GetXmlColumnaFuncionDescripcionFromPropertiesC(tablaRelacionada);
				
	return strColumnaDetalle;
	}
	
	//FUNCION BASE UTILIZADA TAMMIEN PARA ENCONTRAR LA COLUMNA DESCRIPCION DADA SOLO LA TABLA
	public  String GetXmlColumnaFuncionDescripcionFromPropertiesC(TableSchema tablaRelacionada){
		string strPrefijoTabla="";
		string strPrefijoTipo =""; 
		string strNombre = "";
		
		String strColumnaDetalle="get"+strIdGetSet+"()";
		String[] descripciones;
		String[] tipo;
	
		foreach(ColumnSchema columnSchema in tablaRelacionada.Columns)
		{
			if(columnSchema.Name!=strId)
			{
			
				foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
								
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("WEBCOMBO"))
								{
									//if(tipo[1]=="true")
									//{
										strPrefijoTabla=GetPrefijoTablaC();
										strPrefijoTipo = GetPrefijoTipoC(columnSchema);
										strNombre = GetNombreColumnaClaseC(columnSchema);	
										
										strColumnaDetalle="get"+strPrefijoTabla+strPrefijoTipo+strNombre+"()"+GetTipoColumnaToString(columnSchema);
									//}
									
									break;
								}
							}
					}
				
				}
						
			}
		}
		
		return strColumnaDetalle;
	}
	
	public static string GetNewCodeTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NEWCODE"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}					
	
		if(blnEsTablaUnoAUnoFk) {
			nombreTabla="SinIdGenerated";
		}
	return nombreTabla;
	}
	
	public string GetXmlColumnaC(ColumnSchema column,String tablaBase,bool blnEsParaCompuesto)
	{
	string strNombre="\r\n";
	string strGetColumn="";
	string strPrefijoTabla="";
	string strPrefijoTipo="";
	string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+GetNombreCompletoColumnaClaseC(column)+"()"/*+GetTipoColumnaToString(column)*/;
	
	if(column.DataType==DbType.Binary&&column.Name!=strVersionRow)
	{
		return "";
	}
	
	if(column.Name==strId)
	{
	  strNombre="\t$xml=$xml.\"<item code=\\\"\"+$this->"+GetNombreClaseObjetoC(tablaBase)+"->"+strGetColumn+"+\"\\\">\";\r\n\r\n";
	}

	
	if(!blnEsParaCompuesto)
	{
		strNombre+= "\t\t\t\t$xml=$xml.\"<";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
		strNombre+=">\";\r\n";
		
		strNombre+="\t\t\t\t$xml=$xml.$this->"+GetNombreClaseObjetoC(tablaBase)+"->"+strGetColumn+";\r\n";
		
		strNombre+="\t\t\t\t$xml=$xml.\"</";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
		strNombre+=">\";";
	}
	else
	{
		strNombre+= "\t\t\t\t$xml=$xml.\"<";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
		strNombre+=">\";\r\n";
		
		if(column.Name==strId)
		{
			strNombre+="\r\n\t\t\t\tif($"+GetNombreClaseObjetoC(tablaBase)+"->get"+strIdGetSet+"()!=0&&$"+GetNombreClaseObjetoC(tablaBase)+"->get"+strIdGetSet+"()!=null)\r\n\t\t\t\t{\r\n";
			strNombre+="\t\t\t\t\t$xml=$xml.$this->"+GetNombreClaseObjetoC(tablaBase)+"->"+strGetColumn+";\r\n";		
			
			strNombre+="\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t$xml=$xml.$"+strId+"Temporal;\r\n\t\t\t\t\t$"+strId+"Temporal--;\r\n\t\t\t\t}\r\n\r\n";
			
		}
		else
		{
			strNombre+="\t\t\t\t$xml=$xml.$this->"+GetNombreClaseObjetoC(tablaBase)+"->"+strGetColumn+";\r\n";
		}
		
		strNombre+="\t\t\t\t$xml=$xml.\"</";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
		strNombre+=">\";";
	}
	
	if(column.IsForeignKeyMember)
	{
	strNombre+= "\r\n\t\t\t\t$xml=$xml.\"<";
	strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
	strNombre+=">\";\r\n";
	
	strNombre+="\t\t\t\t$xml=$xml."+GetNombreClaseC(tablaBase)+"ConstantesFunciones::get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"Descripcion($this->"+GetNombreClaseObjetoC(tablaBase) +"->get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"());\r\n";
	
	strNombre+="\t\t\t\t$xml=$xml.\"</";
	strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
	strNombre+=">\";\r\n";
	
	}
		
	return strNombre;
	}
	
	
	public string GetXmlColumnaCompuestoC(ColumnSchema column,String tablaBase)
	{
	string strNombre="\r\n";
	string strGetColumn="";
	string strPrefijoTabla="";
	string strPrefijoTipo="";
	string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+GetNombreCompletoColumnaClaseC(column)+"()"+GetTipoColumnaToString(column);
	
	if(column.DataType==DbType.Binary&&column.Name!=strVersionRow)
	{
		return "";
	}
	
	if(column.Name==strId)
	{
	  ;//strNombre="\t$xml=$xml.\"<item code=\\\"\"+"+GetNombreClaseObjetoC(tablaBase)+"->"+strGetColumn+"+\"\\\">\\r\n\");\r\n\r\n";
	}


	strNombre+= "\t\t\t\t$xml=$xml.\"<";
	strNombre+=GetNombreClaseObjetoC(tablaBase)+ column.Name.Substring(0, column.Name.Length).ToLower();
	strNombre+=">\";\r\n";
	
	strNombre+="\t\t\t\t$xml=$xml.$"+GetNombreClaseObjetoC(tablaBase)+"->"+strGetColumn+";\r\n";
	
	strNombre+="\t\t\t\t$xml=$xml.\"</";
	strNombre+=GetNombreClaseObjetoC(tablaBase)+column.Name.Substring(0, column.Name.Length).ToLower();
	strNombre+=">\";";
	
	if(column.IsForeignKeyMember)
	{
		strNombre+= "\r\n\t\t\t\t$xml=$xml.\"<";
		strNombre+=GetNombreClaseObjetoC(tablaBase)+column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";
		strNombre+=">\";\r\n";
		
		strNombre+="\t\t\t\t$xml=$xml."+GetNombreClaseC(tablaBase)+"ConstantesFunciones::get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"Descripcion($"+GetNombreClaseObjetoC(tablaBase) +"->get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"());\r\n";
		
		strNombre+="\t\t\t\t$xml=$xml.\"</";
		strNombre+=GetNombreClaseObjetoC(tablaBase)+column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";
		strNombre+=">\";\r\n";
		
		return strNombre;
	}
		
	return strNombre;
	}
	
	public static string GetAnchoAltoAuxiliarTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WHAUX"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetTopAuxiliarTableFromPropertiesC(TableSchema table)
	{
		String strAnchoAuxiliar="";
		String nombreTabla="";
		nombreTabla="";//GetAnchoAltoAuxiliarTableFromPropertiesC(table);
		int intValorTotal=0;
		int intValorBase=200;
		int intValorBasePorColumna=35;
		
		int intNumeroColumnas=GetNumeroColumnasC(table);
		
		if(nombreTabla.Equals("")) {
			strAnchoAuxiliar="200";
			
			intValorTotal=intValorBase-(intNumeroColumnas*intValorBasePorColumna);
			
			//System.Windows.Forms.MessageBox.Show(intValorTotal.ToString());
			
			if(intValorTotal<=0) {
				strAnchoAuxiliar="40";
				
			} else if(intValorTotal<200&&intNumeroColumnas<=4) {
				strAnchoAuxiliar="200";
				
			} else {
				strAnchoAuxiliar=intValorTotal.ToString();
			}
			
		} else {
			strAnchoAuxiliar=nombreTabla.Split(',')[0];
		}
		
		return strAnchoAuxiliar;
	}
	
		public string GetXmlColumnaAdditionalC(ColumnSchema column,String tablaBase)
	{
	string strNombre="\r\n";
	string strGetColumn="";
	string strPrefijoTabla="";
	string strPrefijoTipo="";
	string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+GetNombreCompletoColumnaClaseC(column)+"()"+GetTipoColumnaToString(column);
	
	if(column.DataType==DbType.Binary&&column.Name!=strVersionRow)
	{
		return "";
	}
	
	if(column.Name==strId)
	{
	  strNombre="\t$xml=$xml.\"<item code=\\\"\"+"+GetNombreClaseObjetoC(tablaBase)+"->"+strGetColumn+"+\"\\\">\\r\n\");\r\n\r\n";
	}


	strNombre+= "\t\t\t\t$xml=$xml.\"<";
	strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
	strNombre+=">\");\r\n";
	
	strNombre+="\t\t\t\t$xml=$xml."+GetNombreClaseObjetoC(tablaBase)+"A."+strGetColumn+");\r\n";
	
	strNombre+="\t\t\t\t$xml=$xml.\"</";
	strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
	strNombre+=">\\r\n\");";
	
	if(column.IsForeignKeyMember)
	{
		strNombre+= "\r\n\t\t\t$xml=$xml.\"<";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";
		strNombre+=">\");\r\n";
		
		strNombre+="\t\t\t$xml=$xml.this.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"Descripcion("+GetNombreClaseObjetoC(tablaBase) +"A.get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"()));\r\n";
		
		strNombre+="\t\t\t$xml=$xml.\"</";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";
		strNombre+=">\\r\n\");\r\n";
		
		return strNombre;
	}
		
	return strNombre;
	}
	
	public static int GetNumeroColumnasC(TableSchema TablaBase)
	{
		int intNumeroColumnas=0;
		
		for (int i = 0; i < TablaBase.Columns.Count; i++){ 
			if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; }
			intNumeroColumnas++;
		}
		
		return intNumeroColumnas;
	}
	
	public string GetAnchoAuxiliarTableFromPropertiesC(TableSchema table)
	{
		String strAnchoAuxiliar="";
		String nombreTabla="";
		nombreTabla=GetAnchoAltoAuxiliarTableFromPropertiesC(table);
		
		//EL ANCHO YA TOMA EN CUENTA UNA COLUMNA
		int intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(table);
			intNumeroColumnasForm--;
			
		int intAnchoNumeroColumnas=intNumeroColumnasForm*280;
		int intAncho=0;
		
		if(nombreTabla.Equals("")) {
			if(blnTieneImagen || blnTieneDocumento || blnTieneTextArea) {
				intAncho=400+intAnchoNumeroColumnas;
				strAnchoAuxiliar=intAncho.ToString();
			} else {
				intAncho=330+intAnchoNumeroColumnas;
				strAnchoAuxiliar=intAncho.ToString();
			}
		} else {
			strAnchoAuxiliar=nombreTabla.Split(',')[0];
		}
		
		return strAnchoAuxiliar;
	}
	
	public static string GetNombreColumnaClaseMinusculaC(ColumnSchema column)
	{
	string strNombre = column.Name.Substring(0, column.Name.Length).ToLower();
	return strNombre;
	}
	
	public static string GetNombreColumnaClaseC(ColumnSchema column) {
		string strNombre = "";
		
		if(blnEsColumnaConNombrePrefijoTipo) {
			if(!column.IsForeignKeyMember) {
				strNombre =column.Name;//.Substring(0, 1).ToUpper() + column.Name.Substring(1, column.Name.Length-1).ToLower();
			} else {
				strNombre =column.Name.Substring(0, 1).ToUpper() + column.Name.Substring(1, column.Name.Length-1);
			}
		} else {
			strNombre = GetNombreColumnFromProperties(column);
		}
		
		return strNombre;
	}
	
	public static  string GetParameterClaseDeepRelacionadoC(CollectionInfo collectionInfo)	{
		String strColumnName="";
		string strPrefijo=String.Empty;
		string strPrefijoTabla="";
		string strPrefijoTipo ="";					
					
		TableKeySchema tableKey=collectionInfo.TableKey;
		ColumnSchemaCollection columnSchemaCollection; 
		
		
		if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
			columnSchemaCollection=tableKey.ForeignKeyMemberColumns;
		} else {
			if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
				columnSchemaCollection=tableKey.ForeignKeyMemberColumns;
			} else {
				columnSchemaCollection=tableKey.ForeignKeyMemberColumns;
			}
		}	
		
		if(columnSchemaCollection!=null) {
			foreach(ColumnSchema columnSchema in columnSchemaCollection) {
					/*
					strPrefijo=String.Empty;
					strPrefijoTabla=GetPrefijoTablaC().ToLower();
					strPrefijoTipo =GetPrefijoTipoC(columnSchema);
				
					strPrefijo=strPrefijoTabla+strPrefijoTipo;
					
					strColumnName = GetNombreColumnaClaseC(columnSchema);
					strColumnName=strPrefijo+strColumnName;
					*/
					strColumnName=GetNombreColumnaClaseC(columnSchema);
					//Trace.WriteLine(strColumnName);
					break;
			}
		}
		return strColumnName;
	}
	
	public string GetParameterClaseC(ColumnSchema column,bool ConValidaciones,bool ConMostrarValidaciones,String strSufijo)	{
		return GetParameterClaseC(column,ConValidaciones,ConMostrarValidaciones,strSufijo,true,false);
	}
	
	public string GetParameterClaseC(ColumnSchema column)
	{
		return GetParameterClaseC(column,false,false,"",false,false);
	}
	//FALTARIA IMPLEMENTAR
	//public string GetParameterClaseC(ColumnSchema column,bool ConValidaciones,bool ConMostrarValidaciones,String strSufijo,bool conSaltoLinea,bool conPublic)
	//SOLO EXISTIA ColumnSchema column
	public string GetParameterClaseC(ColumnSchema column,bool ConValidaciones,bool ConMostrarValidaciones,String strSufijo,bool conSaltoLinea,bool conPublic)
	{
	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	
	string strPrefijo=String.Empty;
	string strPrefijoTabla=string.Empty;//GetPrefijoTablaC().ToLower();
		
	if(blnEsColumnaConNombrePrefijoTipo) {
		//field,Field
		strPrefijoTabla=GetPrefijoTablaC().ToLower();
	}
	
	string strPrefijoTipo =string.Empty;//GetPrefijoTipoC(column);
	
	if(blnEsColumnaConNombrePrefijoTipo) {
		//str,dec,etc
		strPrefijoTipo =GetPrefijoTipoC(column);
	}
	
	strPrefijo=strPrefijoTabla+strPrefijoTipo;
	
	string strNombre = GetNombreColumnaClaseC(column);
	strPrefijo+=strNombre;
		
	string param =  GetTipoColumnaClaseC(column);
	
	string strColumn="public "+/*param+*/"$"+strPrefijo+";";
	
	if(column.IsForeignKeyMember) {
		strColumn+="\r\n\tpublic "+/*param+*/"$"+strPrefijo+strDescription+";";
	}
	
	return strColumn;
}

	public string GetValueDefaultParameterClaseC(ColumnSchema column,String strSufijo) {
		string strValor=String.Empty;
		
		strValor=GetValueDefaultParameterClaseC(column,strSufijo,"$this",false,false,false);
		
		return strValor;
	}
	
	public string GetValueDefaultParameterClaseC(ColumnSchema column) {
		string strValor=String.Empty;
		
		strValor=GetValueDefaultParameterClaseC(column,"","",false,false,false);
		
		return strValor;
	}
	
	//public string GetValueDefaultParameterClaseC(ColumnSchema column,String strSufijo,String strObjetoPadre,bool conSetFuncion) {
	
	//SOLO EXISTIA 1 PARAMETRO, column
	public string GetValueDefaultParameterClaseC(ColumnSchema column,String strSufijo,String strObjetoPadre,bool conSetFuncion,bool conId,bool conVersionRow) {	
	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)	{
		return"";
	}
	
	string strPrefijo=String.Empty;
	string strValor=String.Empty;
	
	string strPrefijoTabla="";//GetPrefijoTablaC().ToLower();
	string strPrefijoTipo ="";//GetPrefijoTipoC(column);

	if(blnEsColumnaConNombrePrefijoTipo) {
		strPrefijoTabla=GetPrefijoTablaC().ToLower();
		strPrefijoTipo =GetPrefijoTipoC(column);
	}
	
	strPrefijo="$this->"+strPrefijoTabla+strPrefijoTipo;
	
	switch(column.Name)	{
		case strIsActive:
		strValor="";
		break;
		
		case strIsExpired:
		strValor="";
		break;
		
		case strVersionRow:
		strValor="";
		break;
		
		default:
		strValor=GetDefaultValueColumna(column);
		break;
	}

	string strNombre = GetNombreColumnaClaseC(column);
	strPrefijo+=strNombre;

	string strColumn=strPrefijo+"="+strValor+";";
	
	if(column.IsForeignKeyMember) {
		strColumn+="\r\n\t\t"+strPrefijo+strDescription+"=\'\';";
	}
	
	return strColumn;
}

public string GetParameterClaseMethodC(ColumnSchema column,bool esGeneral)
{
	return 	GetParameterClaseMethodC(column,esGeneral, false,false,"");
}

//SOLO TENIA 2, FALTA IMPLEMENTAR
public string GetParameterClaseMethodC(ColumnSchema column,bool esGeneral,bool esPKClase,bool ConPersistenciaAnotaciones,String strSufijo)
{	
	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	string strPrefijo=String.Empty;
	string strPrefijoTabla="";//GetPrefijoTablaC();
	string strPrefijoFuncion="\r\n\tpublic function ";
	string strPrefijoTipo = "";//GetPrefijoTipoC(column);

	if(blnEsColumnaConNombrePrefijoTipo) {
		strPrefijoTabla=GetPrefijoTablaC();
		strPrefijoTipo = GetPrefijoTipoC(column);
	}
	
	strPrefijo=strPrefijoFuncion;
	
	String strPrefijoFunctionGeneral="";
			
	if(esGeneral) {
		strPrefijoFunctionGeneral=GetPrefijoTablaGeneralC()+GetPrefijoTipoGeneralC(column);
	}
			
	string strNombre = GetNombreColumnaClaseC(column);		
	string param =  "";//GetTipoColumnaClaseC(column);
		
	strPrefijo+=param+" get"+strPrefijoFunctionGeneral/*strPrefijoTabla+strPrefijoTipo*/+strNombre+"() {";
	strPrefijo+="\r\n\t\treturn $this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+";\r\n\t}";

	
	if(column.IsForeignKeyMember) {
		strPrefijo+="\r\n\t"+param+strPrefijoFuncion+" get"+strPrefijoFunctionGeneral/*strPrefijoTabla+strPrefijoTipo*/+strNombre+strDescription+"() {";
		strPrefijo+="\r\n\t\treturn $this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strDescription+";\r\n\t}";
	}
	
	return strPrefijo;
}

public String GetEsPaqueteReporteC(TableSchema TablaBase) {
		String strPaqueteReporte=string.Empty;
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
		
		if(blnEsReporte) {
			strPaqueteReporte="/"+strPackageReporte;
			
		}
		
		return strPaqueteReporte;				
	}
	
	public String GetEsPaqueteImportReporteC(TableSchema TablaBase) {
		String strPaqueteReporte=string.Empty;
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
		
		if(blnEsReporte) {
			strPaqueteReporte=strPackageReporte+".";
			
		}
		
		return strPaqueteReporte;				
	}

public string GetParameterClaseSetMethodC(ColumnSchema column) {
	return GetParameterClaseSetMethodC(column,false,"");
}

//FALTA IMPLEMENTAR, SOLO EXISTIA 1
public string GetParameterClaseSetMethodC(ColumnSchema column,bool isHerenciaDeGeneralEntity,String strSufijo) {			  
	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)	{
		return"";
	}
	
	string strPrefijo=String.Empty;
	string strPrefijoTabla="";//GetPrefijoTablaC();
	string strPrefijoFuncion="\r\n\tpublic function set";
	string strPrefijoTipo = "";//GetPrefijoTipoC(column);
	
	if(blnEsColumnaConNombrePrefijoTipo) {
		strPrefijoTabla=GetPrefijoTablaC();
		strPrefijoTipo = GetPrefijoTipoC(column);
	}
	
	strPrefijo=strPrefijoFuncion;
	
	string strNombre = GetNombreColumnaClaseC(column);		
	string param =  "";//GetTipoColumnaClaseC(column);
	
	if(column.AllowDBNull) {
		strPrefijo+=strPrefijoTabla+strPrefijoTipo+strNombre+"("+param+ "$new"+strPrefijoTabla+strPrefijoTipo+strNombre +")";
		
		if(TieneColumnaTipoTexto(column)) {
			strPrefijo+="";
		}
		
		strPrefijo+=" {";
		
		strPrefijo+="\r\n\t\tif($this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+"!=="+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+") {";			
		
		if(TieneColumnaTipoTexto(column)) {
			strPrefijo+="\r\n\r\n\t\t\t\tif("+"strlen($new"+strPrefijoTabla+strPrefijoTipo+strNombre+")>"+column.Size+") {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":Ha sobrepasado el numero maximo de caracteres permitidos,Maximo="+GetNombreColumnaClaseC(column)+" en columna "+column.Name+"');\r\n\t\t\t\t\t} catch(Exception $e) {\r\n\t\t\t\t\t\tthrow $e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}";	
		}
		
		
		if(EsIntColumn(column) || EsSmallIntColumn(column) || EsBigIntColumn(column)) {
			strPrefijo+="\r\n\r\n\t\t\t\tif(filter_var($new"+strPrefijoTabla+strPrefijoTipo+strNombre+",FILTER_VALIDATE_INT)===false) {\r\n\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":No es numero entero - "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
		}
		
		if(EsDecimalColumn(column)) {
			strPrefijo+="\r\n\r\n\t\t\t\tif(filter_var($new"+strPrefijoTabla+strPrefijoTipo+strNombre+",FILTER_VALIDATE_FLOAT)===false) {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":No es numero decimal - "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
		}
		
		if(EsBitColumn(column)) {
			strPrefijo+="\r\n\r\n\t\t\t\tif(filter_var($new"+strPrefijoTabla+strPrefijoTipo+strNombre+",FILTER_VALIDATE_BOOLEAN)===false && $new"+strPrefijoTabla+strPrefijoTipo+strNombre+"!==0 && $new"+strPrefijoTabla+strPrefijoTipo+strNombre+"!==false) {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":No es valor booleano - "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
		}
		
		if(EsDateColumn(column)) {
			//strPrefijo+="\r\n\r\n\t\t\t\tif(!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\",$new"+strPrefijoTabla+strPrefijoTipo+strNombre+")) {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":No es fecha - "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
			strPrefijo+="\r\n\r\n\t\t\t\tif(filter_var($new"+strPrefijoTabla+strPrefijoTipo+strNombre+",FILTER_VALIDATE_REGEXP,array(\"options\"=>array(\"regexp\"=>\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\")))===false) {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":No es fecha - "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
		}
		
		strPrefijo+="\r\n\r\n\t\t\t$this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+"=$new"+strPrefijoTabla+strPrefijoTipo+strNombre+";"+ "\r\n\t\t\t$this->setIsChanged(true);\r\n\t\t}\r\n\t}";
	
		
		if(column.IsForeignKeyMember) {
			strPrefijo+="\r\n\r\n\t"+strPrefijoFuncion+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+"("+param+ "$new"+strPrefijoTabla+strPrefijoTipo+strNombre +strDescription+")";
		
			if(TieneColumnaTipoTexto(column)) {
				strPrefijo+="";
			}
			
			strPrefijo+=" {";
			
			strPrefijo+="\r\n\t\tif($this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strDescription+"!="+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+") {";			
			
			if(TieneColumnaTipoTexto(column)) {
				strPrefijo+="\r\n\r\n\t\t\t\tif("+"strlen($new"+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+")>"+column.Size+") {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":Ha sobrepasado el numero maximo de caracteres permitidos,Maximo="+GetNombreColumnaClaseC(column)+" en columna "+column.Name+"');\r\n\t\t\t\t\t} catch(Exception $e) {\r\n\t\t\t\t\t\tthrow $e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}";
			}
			
			strPrefijo+="\r\n\r\n\t\t\t$this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strDescription+"=$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+";"+ "\r\n\t\t\t//$this->setIsChanged(true);\r\n\t\t}\r\n\t}";
		}
	} else {
		strPrefijo+=strPrefijoTabla+strPrefijoTipo+strNombre+"("+param+ "$new"+strPrefijoTabla+strPrefijoTipo+strNombre +")\r\n\t{";
		strPrefijo+="\r\n\t\ttry {\r\n\t\t\tif($this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+"!=="+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+") {\r\n\t\t\t\tif("+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+"==null && $new"+strPrefijoTabla+strPrefijoTipo+strNombre+"!='') {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":Valor nulo no permitido en columna "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";			
		
		if(TieneColumnaTipoTexto(column)) {
			strPrefijo+="\r\n\r\n\t\t\t\tif("+"strlen($new"+strPrefijoTabla+strPrefijoTipo+strNombre+")>"+column.Size+") {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":Ha sobrepasado el numero maximo de caracteres permitidos,Maximo="+column.Size+" en columna "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
		}
				
				
		if(EsIntColumn(column) || EsSmallIntColumn(column) || EsBigIntColumn(column)) {
			strPrefijo+="\r\n\r\n\t\t\t\tif(filter_var($new"+strPrefijoTabla+strPrefijoTipo+strNombre+",FILTER_VALIDATE_INT)===false) {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":No es numero entero - "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
		}
		
		if(EsDecimalColumn(column)) {
			strPrefijo+="\r\n\r\n\t\t\t\tif(filter_var($new"+strPrefijoTabla+strPrefijoTipo+strNombre+",FILTER_VALIDATE_FLOAT)===false) {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":No es numero decimal - "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
		}
		
		if(EsBitColumn(column)) {
			strPrefijo+="\r\n\r\n\t\t\t\tif(filter_var($new"+strPrefijoTabla+strPrefijoTipo+strNombre+",FILTER_VALIDATE_BOOLEAN)===false && $new"+strPrefijoTabla+strPrefijoTipo+strNombre+"!==0 && $new"+strPrefijoTabla+strPrefijoTipo+strNombre+"!==false) {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":No es valor booleano - "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
		}
		
		if(EsDateColumn(column)) {
			//strPrefijo+="\r\n\r\n\t\t\t\tif(!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\",$new"+strPrefijoTabla+strPrefijoTipo+strNombre+")) {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":No es fecha - "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
			
			strPrefijo+="\r\n\r\n\t\t\t\tif(filter_var($new"+strPrefijoTabla+strPrefijoTipo+strNombre+",FILTER_VALIDATE_REGEXP,array(\"options\"=>array(\"regexp\"=>\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\")))===false) {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":No es fecha - "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
		}
		
		
		strPrefijo+="\r\n\r\n\t\t\t\t$this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+"=$new"+strPrefijoTabla+strPrefijoTipo+strNombre+";"+ "\r\n\t\t\t\t$this->setIsChanged(true);\r\n\t\t\t}\r\n\t\t} catch(Exception $e) {\r\n\t\t\tthrow $e;\r\n\t\t}\r\n\t}";
		
		if(column.IsForeignKeyMember) {
			strPrefijo+="\r\n\t"+strPrefijoFuncion+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+"("+param+ "$new"+strPrefijoTabla+strPrefijoTipo+strNombre +strDescription+")\r\n\t{";
			strPrefijo+="\r\n\t\ttry {\r\n\t\t\tif($this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strDescription+"!="+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+") {\r\n\t\t\t\tif("+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+"==null && $new"+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+"!='') {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":Valor nulo no permitido en columna "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";			
			
			if(TieneColumnaTipoTexto(column)) {
				strPrefijo+="\r\n\r\n\t\t\t\tif("+"strlen($new"+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+")>"+column.Size+") {\r\n\t\t\t\t\tthrow new Exception('"+GetNombreClaseC(column.Table.ToString())+":Ha sobrepasado el numero maximo de caracteres permitidos,Maximo="+column.Size+" en columna "+GetNombreColumnaClaseC(column)+"');\r\n\t\t\t\t}";
			}
						
			strPrefijo+="\r\n\r\n\t\t\t\t$this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strDescription+"=$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+";"+ "\r\n\t\t\t\t//$this->setIsChanged(true);\r\n\t\t\t}\r\n\t\t} catch(Exception $e) {\r\n\t\t\tthrow $e;\r\n\t\t}\r\n\t}";		
		}
	}	
	
	return strPrefijo;
}

	public static string GetNombreColumnaClaseTituloC(ColumnSchema column)
	{
		string strNombre =  column.Name.Substring(0, column.Name.Length-1).ToUpper();
		return strNombre;
	}
	
	public bool EsColumnaOcultaTablaC(ColumnSchema column) {
		bool esColumnaOculta=EsColumnaOcultaTablaC(column,true);				
	
		return esColumnaOculta;
	}
	
	public bool EsColumnaOcultaTablaC(ColumnSchema column,bool conVersionRow) {
		bool esColumnaOculta=false;
		
		if(GetEsReporteParametroFromPropertiesC(column) || !GetShowTableColumnFromPropertiesC(column) 
			|| column.Name==strIsActive||column.Name==strIsExpired || (column.Name==strVersionRow && conVersionRow))	{//
			esColumnaOculta=true;
		}
	
		return esColumnaOculta;
	}
	
	public static bool GetExistTagColumnaFromColumnPropiertiesC(ColumnSchema column,String strTag)
	{
	bool blnExistTag=false;
	String nombreClase="";
			nombreClase+="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals(strTag))
					{
						blnExistTag=true;
						//nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return blnExistTag;
	}
	
	public static string GetTipoColumnaFromColumn(ColumnSchema column)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPO"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	
	public static string GetTipoColumnaStoreProcedureFromColumn(ColumnSchema column)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPOSQL"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	
	public static string GetTipoParseColumnaFromColumn(ColumnSchema column,String data)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPO"))
					{
						nombreClase=tipo[1];//+".valueOf("+data+")";
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	public static string GetTipoResultSetColumnaFromColumn(ColumnSchema column)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPO"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	
	public static string GetToStringFromTipoColumnaFromColumn(ColumnSchema column)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPO"))
					{
						nombreClase="";//".toString()";
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	
	public static string GetTipoColumnaClaseC(ColumnSchema column)
	{
	string tipoColumna =  GetTipoColumnaFromColumn(column);
	
	if(tipoColumna!="")
	{
		return tipoColumna;
	}
		
	string param =  column.NativeType;
	string paramType =  column.DataType.ToString();
	
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			param =  "Boolean";
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  "Date";
			}
			else
			{
				param =  "byte []";
			}
			
			break;
		}
		case DbType.DateTime:
		{
			param =  "String";
			break;
		}
		case DbType.AnsiString:
		{
			param =  "String";
			break;
		}
		case DbType.Int32:case DbType.UInt32:
		{
			param =  "Integer";
			break;
		}
		case DbType.Int64:case DbType.UInt64:
		{
			param =  "Long";
			break;
		}
		case DbType.Int16:case DbType.UInt16:
		{
			param =  "Short";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "String";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "String";
			break;
		}
		
		
		case DbType.String:
		{
			param =  "String";
			break;
		}
		
		case DbType.Decimal:case DbType.Double:
		{
			param =  "Double";
			break;
		}
		default:
		{
			param =  "None:"+paramType ;
			break;
		}

	}
	
	return param;
	}
	
	public static int GetValorHorizontalWebColumnaClaseC(ColumnSchema column)
	{
		//Trace.WriteLine("H3123");
	int tipoColumna = 0;// GetTipoColumnaFromColumn(column);
	//System.Windows.Forms.MessageBox.Show("a");
	//Trace.WriteLine(column.Name+"-"+tipoColumna);
	if(tipoColumna>0)
	{
		return tipoColumna;
	}
		
	int param =  10;
	string paramType =  column.DataType.ToString();
	
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			param =  10;
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  10;
				//param =  "Date";
			}
			else
			{	param =  10;
				//param =  "byte []";
			}
			
			break;
		}
		case DbType.DateTime:
		{
			param =  10;
			//param =  strTipoParaFecha;
			break;
		}
		case DbType.AnsiString:
		{
			param =  10;
			break;
		}
		case DbType.Int32:case DbType.UInt32:
		{
			param =  10;
			break;
		}
		case DbType.Int64:case DbType.UInt64:
		{
			param =  10;
			break;
		}
		case DbType.Int16:case DbType.UInt16:
		{
			param =  10;
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  10;
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  10;
			break;
		}
		
		
		case DbType.String:
		{
			param =  10;
			break;
		}
		
		case DbType.Decimal:case DbType.Double:
		{
			param =  10;
			break;
		}
		default:
		{
			param =  10;
			//param =  "None:"+paramType ;
			break;
		}

	}
	
	return param;
	}
	
	public static int GetValorVerticalWebColumnaClaseC(ColumnSchema column)
	{
		//Trace.WriteLine("H3123");
	int tipoColumna = 0;// GetTipoColumnaFromColumn(column);
	//System.Windows.Forms.MessageBox.Show("a");
	//Trace.WriteLine(column.Name+"-"+tipoColumna);
	if(tipoColumna>0)
	{
		return tipoColumna;
	}
		
	int param =  10;
	string paramType =  column.DataType.ToString();
	
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			param =  10;
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  10;
				//param =  "Date";
			}
			else
			{	param =  10;
				//param =  "byte []";
			}
			
			break;
		}
		case DbType.DateTime:
		{
			param =  10;
			//param =  strTipoParaFecha;
			break;
		}
		case DbType.AnsiString:
		{
			param =  10;
			break;
		}
		case DbType.Int32:case DbType.UInt32:
		{
			param =  10;
			break;
		}
		case DbType.Int64:case DbType.UInt64:
		{
			param =  10;
			break;
		}
		case DbType.Int16:case DbType.UInt16:
		{
			param =  10;
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  10;
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  10;
			break;
		}
		
		
		case DbType.String:
		{
			param =  10;
			break;
		}
		
		case DbType.Decimal:case DbType.Double:
		{
			param =  10;
			break;
		}
		default:
		{
			param =  10;
			//param =  "None:"+paramType ;
			break;
		}

	}
	
	return param;
	}
	
	public static string GetTipoParametroStatementColumnaClaseC(ColumnSchema column) {
		string tipoColumnaDefault ="\\'%s\\'";//  GetTipoColumnaFromColumn(column);
		
		if(tipoColumnaDefault!="") {
			;//return tipoColumna;
		}
			
		string param =  column.NativeType;
		string paramType =  column.DataType.ToString();
		
		switch (column.DataType) {
			case DbType.Boolean:
			{			
				param =  "\\'%d\\'";
				break;
			}
			case DbType.Binary:
			{
				if(column.Name==strVersionRow) {
					param =  tipoColumnaDefault;
					
				} else {
					param =  tipoColumnaDefault;
				}
				
				break;
			}
			case DbType.DateTime:
			{				
				param =  tipoColumnaDefault;
				break;
			}
			case DbType.AnsiString:
			{
				param =  tipoColumnaDefault;
				break;
			}
			case DbType.Int32:case DbType.UInt32:
			{
				param =  "%d";
				break;
			}
			case DbType.Int64:case DbType.UInt64:
			{				
				if(!column.IsForeignKeyMember) {
					param =  "%d";
				} else {
					if(!column.AllowDBNull) {
						param =  "%d";
					} else {
						param =  "%s";
					}
				}
				break;
			}
			case DbType.Int16:case DbType.UInt16:
			{
				param =  "%d";
				break;
			}
			case DbType.AnsiStringFixedLength:
			{
				param =  tipoColumnaDefault;
				break;
			}
			case DbType.StringFixedLength:
			{
				param =  tipoColumnaDefault;
				break;
			}
			
			
			case DbType.String:
			{
				param = tipoColumnaDefault;
				break;
			}
			
			case DbType.Decimal:case DbType.Double:
			{
				param =  "%f";
				break;
			}
			default:
			{
				param =  "None:"+paramType ;
				break;
			}
	
		}
		
		return param;
	}
	
	public static string GetTipoParametroObjetoStatementColumnaClaseC(ColumnSchema column) {
		string tipoColumnaDefault ="mysql_real_escape_string($"+GetNombreClaseObjetoC(column.Table.ToString())+"->get"+ GetNombreCompletoColumnaClaseC(column)+"())";
		
		if(column.DataType.Equals(DbType.DateTime)) {
			if(column.AllowDBNull) {
				tipoColumnaDefault ="mysql_real_escape_string($"+GetNombreCompletoColumnaClaseC(column)+")";
			}
		} else if(column.DataType.Equals(DbType.Int64) || column.DataType.Equals(DbType.UInt64)) {
			if(column.IsForeignKeyMember) {
				if(column.AllowDBNull) {
					tipoColumnaDefault ="mysql_real_escape_string($"+GetNombreCompletoColumnaClaseC(column)+")";
				}
			}
		}
		
		//Trace.WriteLine(tipoColumnaDefault);
		
		return tipoColumnaDefault;
	}
	
	public static string GetSetTipoParametroObjetoStatementColumnaClaseC(TableSchema TablaBase) {
		string tipoColumnaDefault="";
		
		foreach (ColumnSchema column in TablaBase.Columns) {
			if(column.DataType.Equals(DbType.DateTime)) {
				if(column.AllowDBNull) {
					tipoColumnaDefault+="\r\n\r\n\t\t\t\t\t$"+GetNombreCompletoColumnaClaseC(column)+"='null';";
					tipoColumnaDefault+="\r\n\t\t\t\t\tif($"+GetNombreClaseObjetoC(column.Table.ToString())+"->get"+ GetNombreCompletoColumnaClaseC(column)+"()!=null) {";
					tipoColumnaDefault+="\r\n\t\t\t\t\t\t$"+GetNombreCompletoColumnaClaseC(column)+"="+"$"+GetNombreClaseObjetoC(column.Table.ToString())+"->get"+ GetNombreCompletoColumnaClaseC(column)+"();";
					tipoColumnaDefault+="\r\n\t\t\t\t\t} else {";
					tipoColumnaDefault+="\r\n\t\t\t\t\t\t$"+GetNombreCompletoColumnaClaseC(column)+"='null';";
					tipoColumnaDefault+="\r\n\t\t\t\t\t}";
				}
			} else if(column.DataType.Equals(DbType.Int64) || column.DataType.Equals(DbType.UInt64)) {
				if(column.IsForeignKeyMember) {
					if(column.AllowDBNull) {
						tipoColumnaDefault+="\r\n\r\n\t\t\t\t\t$"+GetNombreCompletoColumnaClaseC(column)+"='null';";
						tipoColumnaDefault+="\r\n\t\t\t\t\tif($"+GetNombreClaseObjetoC(column.Table.ToString())+"->get"+ GetNombreCompletoColumnaClaseC(column)+"()!=null && $"+GetNombreClaseObjetoC(column.Table.ToString())+"->get"+ GetNombreCompletoColumnaClaseC(column)+"()>=0) {";
						tipoColumnaDefault+="\r\n\t\t\t\t\t\t$"+GetNombreCompletoColumnaClaseC(column)+"="+"$"+GetNombreClaseObjetoC(column.Table.ToString())+"->get"+ GetNombreCompletoColumnaClaseC(column)+"();";
						tipoColumnaDefault+="\r\n\t\t\t\t\t} else {";
						tipoColumnaDefault+="\r\n\t\t\t\t\t\t$"+GetNombreCompletoColumnaClaseC(column)+"='null';";
						tipoColumnaDefault+="\r\n\t\t\t\t\t}";
					}
				}
			}
		}
		
		//Trace.WriteLine(tipoColumnaDefault);
		
		return tipoColumnaDefault;
	}
	
	public static bool EsTipoColumnaStringParaTrimClaseC(ColumnSchema column)
	{
		bool esTipoColumnaParaRegularExpresion=false;
	
		string param =  column.NativeType;
		string paramType =  column.DataType.ToString();
		
		switch (column.DataType) {
			 case DbType.AnsiString: case DbType.AnsiStringFixedLength:case DbType.StringFixedLength:case DbType.String: {
				esTipoColumnaParaRegularExpresion=true;
				break;

			} default: {
				esTipoColumnaParaRegularExpresion=false;
				break;
			}
		}
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public  bool EsTipoColumnaNumeroParaClaseC(ColumnSchema column)
	{
		bool esTipoColumnaParaRegularExpresion=false;
	
		if(EsSmallIntColumn(column)||EsIntColumn(column)||EsBigIntColumn(column)||EsDecimalColumn(column)) {
			esTipoColumnaParaRegularExpresion=true;
		}
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public  bool EsTipoColumnaValorParaClaseC(ColumnSchema column)
	{
		bool esTipoColumnaParaRegularExpresion=false;
	
		if(EsDecimalColumn(column)) {
			esTipoColumnaParaRegularExpresion=true;
		}
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public  bool EsTipoColumnaValorEnteroParaClaseC(ColumnSchema column)
	{
		bool esTipoColumnaParaRegularExpresion=false;
	
		if(EsSmallIntColumn(column)||EsIntColumn(column)||EsBigIntColumn(column)) {
			esTipoColumnaParaRegularExpresion=true;
		}
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public  bool EsTipoColumnaValorGeneralParaClaseC(ColumnSchema column) {
		bool esTipoColumnaParaRegularExpresion=false;
	
		if(EsTipoColumnaValorParaClaseC(column)||EsTipoColumnaValorEnteroParaClaseC(column)) {
			esTipoColumnaParaRegularExpresion=true;
		}
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public static bool EsTipoColumnaParaRegularExpresionClaseC(ColumnSchema column)
	{
		bool esTipoColumnaParaRegularExpresion=false;
		
		esTipoColumnaParaRegularExpresion=EsTipoColumnaStringParaTrimClaseC(column);
		/*
		string param =  column.NativeType;
		string paramType =  column.DataType.ToString();
		
		switch (column.DataType) {
			case DbType.Boolean:{			
				break;
				
			} case DbType.Binary: {				
				break;
				
			} case DbType.DateTime:	{
				break;
				
			} case DbType.AnsiString: {
				esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.Int32:case DbType.UInt32: {
				//esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.Int64:case DbType.UInt64: {
				//esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.Int16:case DbType.UInt16: {
				//esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.AnsiStringFixedLength: {
				esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.StringFixedLength: {
				esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.String: {
				esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.Decimal:case DbType.Double: {
				//esTipoColumnaParaRegularExpresion=true;
				break;
				
			} default: {
				esTipoColumnaParaRegularExpresion=false;
				break;
			}
		}
		*/
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public String GetTipoColumnaRegularExpresionClaseC(ColumnSchema column)
	{
		String strTipoColumnaRegularExpresion="SREGEXTODOS";
	
		string param =  column.NativeType;
		string paramType =  column.DataType.ToString();
		
		
		String strTodos="";
		
		if(blnTieneValidacionTodo||EsPathImagenDocumentoColumn(column)) {
			strTodos="TODOS";
		}
				
		
		switch (column.DataType) {
			case DbType.Boolean:{			
				break;
				
			} case DbType.Binary: {				
				break;
				
			} case DbType.DateTime:	{
				break;
				
			} case DbType.AnsiString: {
				strTipoColumnaRegularExpresion="SREGEXCADENA"+strTodos;
				break;
				
			} case DbType.AnsiStringFixedLength: {
				strTipoColumnaRegularExpresion="SREGEXCADENA"+strTodos;
				break;
				
			} case DbType.StringFixedLength: {
				strTipoColumnaRegularExpresion="SREGEXCADENA"+strTodos;
				break;
				
			} case DbType.String: {
				strTipoColumnaRegularExpresion="SREGEXCADENA"+strTodos;
				break;
				
			} case DbType.Int32:case DbType.UInt32: {
				strTipoColumnaRegularExpresion="SREGEXNUMEROENTERO";
				break;
				
			} case DbType.Int64:case DbType.UInt64: {
				strTipoColumnaRegularExpresion="SREGEXNUMEROENTERO";
				break;
				
			} case DbType.Int16:case DbType.UInt16: {
				strTipoColumnaRegularExpresion="SREGEXNUMEROENTERO";
				break;
				
			} case DbType.Decimal:case DbType.Double: {
				strTipoColumnaRegularExpresion="SREGEXNUMERODOUBLE";
				break;
				
			} default: {
				strTipoColumnaRegularExpresion="SREGEXTODOS";
				break;
			}
		}
		
		String strSufijoRegex=GetSufijoRegexTableFromPropertiesC(column);
		
		return strTipoColumnaRegularExpresion+strSufijoRegex;
	}
	
	public String GetTipoColumnaMensajeRegularExpresionClaseC(ColumnSchema column)
	{
		String strTipoColumnaRegularExpresion="SVALIDACIONTODOS";
	
		string param =  column.NativeType;
		string paramType =  column.DataType.ToString();
		
		switch (column.DataType) {
			case DbType.Boolean:{			
				break;
				
			} case DbType.Binary: {				
				break;
				
			} case DbType.DateTime:	{
				break;
				
			} case DbType.AnsiString: {
				strTipoColumnaRegularExpresion="SVALIDACIONCADENA";
				break;
				
			} case DbType.Int32:case DbType.UInt32: {
				strTipoColumnaRegularExpresion="SVALIDACIONNUMEROENTERO";
				break;
				
			} case DbType.Int64:case DbType.UInt64: {
				strTipoColumnaRegularExpresion="SVALIDACIONNUMEROENTERO";
				break;
				
			} case DbType.Int16:case DbType.UInt16: {
				strTipoColumnaRegularExpresion="SVALIDACIONNUMEROENTERO";
				break;
				
			} case DbType.AnsiStringFixedLength: {
				strTipoColumnaRegularExpresion="SVALIDACIONCADENA";
				break;
				
			} case DbType.StringFixedLength: {
				strTipoColumnaRegularExpresion="SVALIDACIONCADENA";
				break;
				
			} case DbType.String: {
				strTipoColumnaRegularExpresion="SVALIDACIONCADENA";
				break;
				
			} case DbType.Decimal:case DbType.Double: {
				strTipoColumnaRegularExpresion="SVALIDACIONNUMERODOUBLE";
				break;
				
			} default: {
				strTipoColumnaRegularExpresion="SVALIDACIONTODOS";
				break;
			}
		}
		
		if(EsPathImagenDocumentoColumn(column)) {
			strTipoColumnaRegularExpresion="SVALIDACIONTODOS";
		}
		
		String strSufijoRegex=GetSufijoRegexTableFromPropertiesC(column);
		
		return strTipoColumnaRegularExpresion+strSufijoRegex;
	}
	
	public static string GetTipoColumnaStoreProcedureC(ColumnSchema column)
	{
	string tipoColumna =  GetTipoColumnaStoreProcedureFromColumn(column);
	//System.Windows.Forms.MessageBox.Show(tipoColumna);
	if(tipoColumna!="")
	{
		return tipoColumna;
	}
		
	string param =  column.NativeType;
	string paramType =  column.DataType.ToString();
	
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			param =  "tinyint(4)";
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  "timestamp";
			}
			else
			{
				param =  "binary("+column.Size+")";
			}
			
			break;
		}
		case DbType.DateTime:
		{
			param =  "datetime";
			break;
		}
		case DbType.AnsiString:
		{
			param =   "varchar("+column.Size+")";
			break;
		}
		case DbType.Int32:case DbType.UInt32:
		{
			param =  "int("+column.Size+")";
			break;
		}
		case DbType.Int64:case DbType.UInt64:
		{
			param =  "bigint("+column.Size+")";
			break;
		}
		case DbType.Int16:case DbType.UInt16:
		{
			param =  "int("+column.Size+")";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "char("+column.Size+")";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "char("+column.Size+")";
			break;
		}
		
		
		case DbType.String:
		{
			param =  "varchar("+column.Size+")";
			break;
		}
		
		case DbType.Decimal:case DbType.Double:
		{
			param =  "decimal("+column.Size+","+column.Precision+")";
			break;
		}
		default:
		{
			param =  "None:"+paramType ;
			break;
		}

	}
	
	return param;
	}
	
	public static int GetWidthXmlCabeceraReporteColumnaClaseC(ColumnSchema column)
	{
		int intWidth=0;
		
		if(!column.IsForeignKeyMember)
		{
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				intWidth=100;
			}
			else if(column.DataType==DbType.Boolean)
			{
				intWidth=50;
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
				intWidth=50;
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				intWidth=50;
			}
		}
		else
		{
			intWidth=100;
		}
		
		return intWidth;
	}
	
	public static string GetTipoXmlCabeceraReporteColumnaClaseC(ColumnSchema column,int totalWidth,int intSobrante,bool blnNormalOrientation,int contador)
	{					
	//intSobrante=0;
	if(!blnNormalOrientation)
	{
		if(totalWidth>782)
		{
			return "";
		}
	}
		
	string param =  column.NativeType;
	string paramType =  column.DataType.ToString();
	int intWidth=0;
	
	intWidth=GetWidthXmlCabeceraReporteColumnaClaseC(column);
	
	int x=totalWidth;
	//System.Windows.Forms.MessageBox.Show(contador.ToString());
	if(totalWidth!=0)
	{
		if(contador>1)
		{
			x+=intSobrante*contador;	
		}
		else
		{
			x+=intSobrante;	
		}
	}
	
	intWidth+=intSobrante;
	
	String strNombre =  GetWebNombreTituloColumnFromPropertiesC(column);
	
				param="\r\n\t\t\t\t<staticText>";
				param+="\r\n\t\t\t\t\t<reportElement";
				param+="\r\n\t\t\t\t\t\tx=\""+x.ToString()+"\"";
				param+="\r\n\t\t\t\t\t\ty=\"1\"";
				param+="\r\n\t\t\t\t\t\twidth=\""+intWidth.ToString()+"\"";
				param+="\r\n\t\t\t\t\t\theight=\"15\"";
				param+="\r\n\t\t\t\t\t\tforecolor=\"#FFFFFF\"";
				param+="\r\n\t\t\t\t\t\tkey=\"element-90\"/>";
				param+="\r\n\t\t\t\t\t<box leftPadding=\"2\" rightPadding=\"2\">					<topPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t<leftPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t<bottomPen lineWidth=\"0.0\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t<rightPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t</box>";
				param+="\r\n\t\t\t\t\t<textElement>";
				param+="\r\n\t\t\t\t\t\t<font/>";
				param+="\r\n\t\t\t\t\t</textElement>";
				param+="\r\n\t\t\t\t\t<text><![CDATA["+strNombre+"]]></text>";
				param+="\r\n\t\t\t\t</staticText>";
				
	
	return param;
	}
		
	public static string GetTipoXmlReporteColumnaClaseC(ColumnSchema column,int totalWidth,int intSobrante,bool blnNormalOrientation,bool GenerarRelacionesMaestro,int contador)
	{					
	//intSobrante=0;
		int y=1;
		
		if(GenerarRelacionesMaestro)
		{
			y+=intDesplazamientoReporteMaestro;
		}
	
	String strWidthLine="535";
	
	string strPrefijo=String.Empty;
		string strPrefijoTabla=GetPrefijoTablaC().ToLower();
		string strPrefijoTipo =GetPrefijoTipoC(column);
	
		strPrefijo=strPrefijoTabla+strPrefijoTipo;
		
		string strNombre = GetNombreColumnaClaseC(column);
		strPrefijo+=strNombre;
	
	
	if(!blnNormalOrientation)
	{
		if(totalWidth>782)
		{
			return "";
		}
		else
		{
			strWidthLine="782";
		}
	}
	
	string param =  column.NativeType;
	string paramType =  column.DataType.ToString();
	
	int intWidth=0;
	
	intWidth=GetWidthXmlCabeceraReporteColumnaClaseC(column);
	
	int x=totalWidth;
	
	if(totalWidth!=0)
	{
		if(contador>1)
		{
			x+=intSobrante*contador;	
		}
		else
		{
			x+=intSobrante;	
		}
		
	}
	
	intWidth+=intSobrante;
	
	//String strNombre = GetNombreColumnaClaseC(column);
				
				
				param="\r\n\t\t\t\t<line direction=\"TopDown\">";
				param+="\r\n\t\t\t\t\t<reportElement";
				param+="\r\n\t\t\t\t\t\tx=\"0\"";
				param+="\r\n\t\t\t\t\t\ty=\"17\"";
				param+="\r\n\t\t\t\t\t\twidth=\""+strWidthLine+"\"";
				param+="\r\n\t\t\t\t\t\theight=\"0\"";
				
				if(!GenerarRelacionesMaestro)
				{
					param+="\r\n\t\t\t\t\t\tforecolor=\"#808080\"";
				}
				else
				{
					param+="\r\n\t\t\t\t\t\tforecolor=\"#FFFFFF\"";
				}
				
				param+="\r\n\t\t\t\t\t\tkey=\"line\"";
				param+="\r\n\t\t\t\t\t\tpositionType=\"FixRelativeToBottom\"/>";
				param+="\r\n\t\t\t\t\t<graphicElement stretchType=\"NoStretch\">";
				param+="\r\n\t\t\t\t\t<pen lineWidth=\"0.25\" lineStyle=\"Solid\"/>";
				param+="\r\n\t\t\t\t\t</graphicElement>";
				param+="\r\n\t\t\t\t</line>";

				param+="\r\n\t\t\t\t<textField isStretchWithOverflow=\"false\" isBlankWhenNull=\"false\" evaluationTime=\"Now\" hyperlinkType=\"None\"  hyperlinkTarget=\"Self\" >";
				param+="\r\n\t\t\t\t\t<reportElement";
				param+="\r\n\t\t\t\t\t\tx=\""+x.ToString()+"\"";
				param+="\r\n\t\t\t\t\t\ty=\""+y.ToString()+"\"";
				param+="\r\n\t\t\t\t\t\twidth=\""+intWidth.ToString()+"\"";
				param+="\r\n\t\t\t\t\t\theight=\"15\"";
				param+="\r\n\t\t\t\t\t\tkey=\"textField\"/>";
				
				//param+="\r\n\t\t\t\t\t<box topBorder=\"None\" topBorderColor=\"#000000\" leftBorder=\"None\" leftBorderColor=\"#000000\" rightBorder=\"None\" rightBorderColor=\"#000000\" bottomBorder=\"None\" bottomBorderColor=\"#000000\"/>";
				
				
				param+="\r\n\t\t\t\t\t<box>";
				param+="\r\n\t\t\t\t\t\t<topPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t\t<leftPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t\t<bottomPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t\t<rightPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t</box>";
				
				
				param+="\r\n\t\t\t\t\t<textElement>";
				param+="\r\n\t\t\t\t\t\t<font/>";
				param+="\r\n\t\t\t\t\t</textElement>";
				
				String strTipo="java.lang.String";
				
				if(column.DataType==DbType.Boolean||column.IsForeignKeyMember)
				{
					param+="\r\n\t\t\t\t<textFieldExpression   class=\""+strTipo +"\"><![CDATA[$F{"+strPrefijo+strClaseDetalleBean+"}]]></textFieldExpression>";
					
				}
				else
				{
					param+="\r\n\t\t\t\t<textFieldExpression   class=\""+GetTipoReporteColumnaClaseC(column) +"\"><![CDATA[$F{"+strPrefijo+"}]]></textFieldExpression>";
				}
				
				param+="\r\n\t\t\t\t</textField>";
				
	
	return param;
	}
	
	public static string GetTipoReporteColumnaClaseC(ColumnSchema column)
	{
	string tipoColumna =  GetTipoReporteColumnaFromColumn(column);
	
	if(tipoColumna!="")
	{
		return tipoColumna;
	}
		
	string param =  column.NativeType;
	string paramType =  column.DataType.ToString();
	
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			param =  "java.lang.Boolean";
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  "java.lang.Timestamp";
			}
			else
			{
				param =  "byte []";
			}
			
			break;
		}
		case DbType.DateTime:
		{
			param =  "java.lang.String";
			break;
		}
		case DbType.AnsiString:
		{
			param =  "java.lang.String";
			break;
		}
		case DbType.Int32:case DbType.UInt32:
		{
			param =  "java.lang.Integer";
			break;
		}
		case DbType.Int64:case DbType.UInt64:
		{
			param =  "java.lang.Long";
			break;
		}
		case DbType.Int16:case DbType.UInt16:
		{
			param =  "java.lang.Short";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "java.lang.String";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "java.lang.String";
			break;
		}
		
		
		case DbType.String:
		{
			param =  "java.lang.String";
			break;
		}
		
		case DbType.Decimal:case DbType.Double:
		{
			param =  "java.lang.Double";
			break;
		}
		default:
		{
			param =  "None:"+paramType ;
			break;
		}

	}
	
	return param;
	}
	
	public static bool GetEsParametroReporteReemplazoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("PARAMSQLREEM"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsReporteUsaColumnasBaseFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTEBASECOL"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public bool TieneColumnasReporteC(TableSchema tableSchema) {
		bool tiene=false;					
		bool tiene_columnareporte=false;
		
		if(!blnEsReporte) {
			tiene=true;
		} else {
			foreach(ColumnSchema columnSchema in tableSchema.Columns) {
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired
					||columnSchema.Name==strId||columnSchema.Name==strVersionRow){
					continue; 
				}
				
				if(!GetEsReporteParametroFromPropertiesC(columnSchema)) {
					tiene=true;
				}
			}
		}
		
		//Trace.WriteLine(tableSchema.Name+"="+tiene);
		return tiene;
	}
	
	public bool TieneColumnasDatosC(TableSchema tableSchema) {
		bool tiene=false;					
		bool tiene_columnareporte=false;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired
				||columnSchema.Name==strId||columnSchema.Name==strVersionRow){
				continue; 
			}
				
			tiene=true;			
			break;
		}
		
		//Trace.WriteLine(tableSchema.Name+"="+tiene);
		return tiene;
	}
	
	public bool TieneColumnaReporteParametroC(ColumnSchema columnSchema) {
		bool blnTieneColumnaReporteParametro=false;
		
		if(blnEsReporte && GetEsReporteParametroFromPropertiesC(columnSchema)) {
			blnTieneColumnaReporteParametro=true;
		}
		
		return blnTieneColumnaReporteParametro;
	}

	public static bool GetEsReporteAuxiliarFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals(strESREPORTEAUX))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsParametroReporteReemplazoFromPropertiesC(ColumnSchema columnSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("PARAMSQLREEM"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsReporteParametroFromPropertiesC(ColumnSchema columnSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals(strESREPORTEPARAM))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static string GetTipoReporteColumnaFromColumn(ColumnSchema column)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPOREPORTE"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	
	public static string GetTipoColumnaClaseGetResulsetC(ColumnSchema column)
	{
		string tipoColumna =  GetTipoResultSetColumnaFromColumn(column);
	
	if(tipoColumna!="")
	{
		return tipoColumna;
	}
	
string param =  column.NativeType;
	
	switch (column.DataType)
	{
		case DbType.DateTime:
		{
			param =  "String";
			break;
		}
		case DbType.AnsiString:
		{
			param =  "String";
			break;
		}
		case DbType.Boolean:
		{
			param =  "Boolean";
			break;
		}
		case DbType.Int32:
		{
			param =  "Int";
			break;
		}
		case DbType.Int64:
		{
			param =  "Long";
			break;
		}
		case DbType.Int16:
		{
			param =  "Short";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "String";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "String";
			break;
		}
		case DbType.Decimal:
		{
			param =  "Double";
			break;
		}
		
		case DbType.String:
		{
			param =  "String";
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  "String";
			}
			else
			{
				param =  "Bytes";
			}
			
			break;
		}
		default:
		{
			param =  "None";
			break;
		}

	}
	
	return param;
	}
	
	public static string GetTipoControlColumnaClaseC(ColumnSchema column)
	{
string param =  column.NativeType;
	
	switch (column.DataType)
	{
		case DbType.DateTime:
		{
			param =  "dtp";
			break;
		}
		case DbType.Boolean:
		{
			param =  "chk";
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
			param =  "hdn";
			}
			else
			{
			param =  "chk";
			}
			break;
		}
		case DbType.AnsiString:
		{
			param =  "txt";
			break;
		}
		case DbType.Int32:
		{
			param =  "ddl";
			break;
		}
		case DbType.Int64:
		{
			param =  "txt";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "txt";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "txt";
			break;
		}		
		case DbType.String:
		{
			param =  "txt";
			break;
		}
		default:
		{
			param =  "NONE";
			break;
		}
	}	
	return param;
	}
	
	public static String GetConListaValoresColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
			 blnNoEdit=false;
		String strListaValores=string.Empty;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strLISTAVALOR))
							{								
								//nombreColumna=tipo[1];
								strListaValores=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return strListaValores;
	}
	
	public static string GetTipoColumnaClaseEnumC(ColumnSchema column)
	{
string param =  column.NativeType;
	
	switch (column.DataType)
	{
		case DbType.DateTime:
		{
			param =  "DATE";
			break;
		}
		case DbType.Boolean:
		{
			param =  "BOOLEAN";
			break;
		}
		case DbType.Binary:
		{
			param =  "BYTES";
			break;
		}
		case DbType.AnsiString:
		{
			param =  "STRING";
			break;
		}
		case DbType.Int16:
		{
			param =  "SHORT";
			break;
		}
		case DbType.Int32:
		{
			param =  "INT";
			break;
		}
		case DbType.Int64:
		{
			param =  "LONG";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "STRING";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "STRING";
			break;
		}
		
		case DbType.Decimal:
		{
			param =  "DOUBLE";
			break;
		}
		case DbType.String:
		{
			param =  "STRING";
			break;
		}
		default:
		{
			param =  "NONE";
			break;
		}

	}
		param=GetTipoColumnaEnumFromColumn(column,param);
		
	return param;
	}
	
	
	
	//ESTA FUNCION PERMITE TENER EL NOMBRE ADICIONAL DEL FOREIGN KEY, DONDE PUEDE TENER MAS DE 1 CON LA MISMA TABLA
	public static string GetNombreAdicionalClaseRelacionadaFromRelation(CollectionInfo collectionInfo)
	{
		String nombreAdicional="";
		
		TableKeySchema tableKeySchema=collectionInfo.TableKey;
		
		String strNombreTablaPrimary=tableKeySchema.PrimaryKeyTable.Name;
		
		String strNombreTablaForeign=tableKeySchema.ForeignKeyTable.Name;
		
		//Trace.WriteLine("Table Primary:"+strNombreTablaPrimary);		
		//Trace.WriteLine("Table Foreign:"+strNombreTablaForeign);		
		
		//EL REEMPLAZO ES EN BASE A LA UNICA CLAVE FOREIGN OSEA UNICA PK id
		if(tableKeySchema.ForeignKeyMemberColumns.Count.Equals(1)) {
			String strNombreColumnaFKSecondary=tableKeySchema.ForeignKeyMemberColumns[0].Column.Name;
			//Trace.WriteLine("Column Secondary:"+strNombreColumnaFKSecondary);
			
			//Trace.WriteLine("fk Primary:"+strNombreColumnaFKSecondary);
			nombreAdicional=strNombreColumnaFKSecondary.Replace(strId+strNombreTablaPrimary,"");
			
			//Trace.WriteLine("Adicional:"+nombreAdicional);
		}
		
		//Trace.WriteLine("_____________________________________");
		
		return nombreAdicional;
	}
	
	public static bool GetShowTableColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=true;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strSHOWTABLE)) {								
								nombreColumna=tipo[1];
								
								if(nombreColumna.Equals("false")) {
									blnNoEdit=false;
								}
								
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetUseClasesSiNoPropertyFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blPermite=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("USECLASESSINODEEP"))
								{
									
									blPermite=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blPermite;
	}
	
	public static bool GetPermiteEliminarFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blPermite=true;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("DELETENO"))
								{
									
									blPermite=false;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blPermite;
	}
	

	
	public static bool GetConRangoBusquedasColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
			nombreColumna+="";		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONRANGOINDICES"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetConRangoBusquedasIndicesColumnFromPropertiesC(ColumnSchema column,IndexSchema indexSchema)
	{
		String nombreColumna="";
			nombreColumna+="";		
		String[] descripciones=null;
			descripciones=null;
		String[] tipo=null;
			tipo=null;
		bool blExiste=GetConRangoBusquedasIndicesColumnFromPropertiesC(column);
						
		return blExiste;
	}
	
	public static bool GetConRangoBusquedasIndicesColumnFromPropertiesC(ColumnSchema column,String  strIndexSchemaName)
	{
		String nombreColumna="";
			nombreColumna+="";
				
		String[] descripciones;
			descripciones=null;
		String[] tipo;
			tipo=null;
		bool blExiste=GetConRangoBusquedasIndicesColumnFromPropertiesC(column);
		
				
						
		return blExiste;
	}
	
	public static bool GetConRangoBusquedasIndicesColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
			nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONRANGOINDICE"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static string GetTipoColumnaEnumFromColumn(ColumnSchema column,String strEnum)
	{
	String nombreClase="";
	String nombreEnum=strEnum;
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPO"))
					{
						
						nombreClase=tipo[1];
						
						if(nombreClase.Equals("Date"))
						{
							strEnum="DATE";
						}
						else if(nombreClase.Equals("Timestamp"))
						{
							strEnum="TIMESTAMP";
						}
						else if(nombreClase.Equals("Time"))
						{
							strEnum="TIME";
						}
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return strEnum;
	}
	
	public static string GetTipoColumnaToString(ColumnSchema column)
	{
	string tipoColumna = GetToStringFromTipoColumnaFromColumn(column);
	
	if(tipoColumna!="")
	{
		return tipoColumna;
	}
	
string param = "";//".toString()";
	
	switch (column.DataType)
	{
		case DbType.DateTime:
		{
			param = string.Empty;
			break;
		}
		case DbType.AnsiString:
		{
			param =   string.Empty;
			break;
		}
		
		
		case DbType.AnsiStringFixedLength:
		{
			param =   string.Empty;
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  string.Empty;
			break;
		}
		
		
		case DbType.String:
		{
			param =   string.Empty;
			break;
		}
		/*default:
		{
			param =  "None";
			break;
		}
		*/
	}
	
	return param;
	}
	
	public static string GetTipoColumnaParse(ColumnSchema column,String data)
	{
		
string tipoColumna =  GetTipoParseColumnaFromColumn(column,data);
	string param = string.Empty;		
	string paramInit = string.Empty;
	string paramEnd = string.Empty;;

	if(tipoColumna!="")
	{
		if(tipoColumna=="Date") {
			paramInit =  "Funciones.ConvertToDate(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
		} else {
			param=tipoColumna+".valueOf("+data+")";
		}
		
		return param;
	}
	

	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			paramInit =  "Boolean.parseBoolean(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
			break;
		}
		case DbType.Int32:
		{
			paramInit =  "Integer.parseInt(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
			break;
		}
		case DbType.Int64:
		{
			paramInit =  "Long.parseLong(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
			break;
		}
		case DbType.Int16:
		{
			paramInit =  "Short.parseShort(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
			break;
		}
		case DbType.Decimal:
		{
			paramInit =  "Double.parseDouble(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
			break;
		}
		case DbType.DateTime:
		{
			param =   string.Empty;
			break;
		}
		case DbType.AnsiString:
		{
			param =   string.Empty;
			break;
		}
		
		
		case DbType.AnsiStringFixedLength:
		{
			param =   string.Empty;
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  string.Empty;
			break;
		}
		
		
		case DbType.String:
		{
			param =   string.Empty;
			break;
		}
		case DbType.Binary:
		{
			if(column.Name!=strVersionRow)
			{
				param =  "None";
			}
			else
			{
				paramInit =  "Funciones.ConvertToDate(";
				paramEnd=")";
				param=paramInit+data+paramEnd;
			}
			
			break;
		}
		default:
		{
			param =  "None";
			break;
		}

	}
	if(param==string.Empty)
	{
		param=data;
	}
	else if(param=="None")
	{
		param="null";
	}
	return param;
	}
	
	public static bool GetReadOnlyColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("READONLY"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetNoInsertEditColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strINSERTEDITNO))
							{								
								nombreColumna=tipo[1];
								
								if(nombreColumna=="true") {
									blnNoEdit=true;
								}
								
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetSiInsertEditColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("INSERTEDITSI"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetEsNullColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ESNULL"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetOnChangeColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ONCHANGE"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetOnEventDbColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ONEVENT_DB"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetOnEventDbParentColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ONEVENT_DB_PARENT"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static string GetDefaultValueColumna(TableSchema table)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("DEFAULT"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}		
		
		return nombreTabla;
	}
	
	public string GetDefaultValueColumna(ColumnSchema column) {
		string param = string.Empty;		

		if(column.AllowDBNull) {
			return "null";
		}


		String[] descripciones;
		String[] tipo;
		String strDefault="";
	
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties) {
			if(extendedProperty.Name=="CS_Description") {
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones) {
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("DEFAULT")) {
						strDefault=tipo[1];
						break;
					}
				}
				break;
			}					
		}

		if(strDefault!="") {
			strDefault=strDefault.Replace("L","");
			
			return strDefault;
		
		} else {
			if(column.IsForeignKeyMember) {
				TableSchema tableSchemaForeignKey=GetNombreTablaRelacionadaFromColumn(column);
				
				String strDefaultFromTabla=GetDefaultValueColumna(tableSchemaForeignKey);
				
				//Trace.WriteLine(strDefaultFromTabla);
				
				if(strDefaultFromTabla!="") {
					
					return strDefaultFromTabla;
				}
			}
		}


		switch (column.DataType) {
			case DbType.Int32: 
			{
				
				param="0";
				break;
			}
			
			case DbType.Int64:
			{
				if(column.IsForeignKeyMember) {
					param="-1";
				} else {
					param="0";
				}
				
				break;
			}
			
			case DbType.Int16:
			{
				param="0";
				break;
			}
			
			case DbType.Boolean:
			{
				param="false";
				break;
			}
			
			case DbType.DateTime:
			{
				param="date('Y-m-d')";
				break;
			}
			
			case DbType.Decimal:
			{
				param="0.0";
				break;
			}
			
			case DbType.AnsiString:
			{
				param ="''";
				break;
			}
					
			case DbType.AnsiStringFixedLength:
			{
				param ="''";
				break;
			}
			
			case DbType.StringFixedLength:
			{
				param ="''";
				break;
			}
					
			case DbType.String:
			{
				param ="''";
				break;
			}
			
			case DbType.Binary:
			{
				if(column.Name==strVersionRow)
				{
					param =  "''";
				}
				else
				{
					param =  "null";
				}
				
				break;
			}
			
			default:
			{
				param =  "None";
				break;
			}
		}
	
		return param;
	}
			
	public static int GetWebNumeroColumnasColumnFromPropertiesC(ColumnSchema column,bool esParaEditarTabla) {
		int numeroColumnasRows=30;
		String[] descripciones;
		String[] tipo;
	
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties) {
			if(extendedProperty.Name=="CS_Description") {
				descripciones=((String)extendedProperty.Value).Split('|');
					
				foreach(String descripcion in descripciones) {
					tipo=descripcion.Split('=');
						
					if(tipo[0].Equals("WEBCOLUMNS")) {
						if(int.TryParse(tipo[1],out numeroColumnasRows)) {
							numeroColumnasRows=int.Parse(tipo[1]);
						}
							
						break;
					}
				}
			}					
		}
		
		if(blnConJQueryCode){
			if(!esParaEditarTabla) {
				if(numeroColumnasRows>25) {
					numeroColumnasRows=25;	
				}
			} else {
				if(!column.Name.Equals("Descripcion") && !column.Name.Equals("Observacion")) {
					if(numeroColumnasRows>15) {
						numeroColumnasRows=15;	
					}
				} else {
					if(numeroColumnasRows>20) {
						numeroColumnasRows=20;	
					}
				}
			}
		}
		
		return numeroColumnasRows;
	}
	
	public static string GetNombreCompletoColumnaClaseC(ColumnSchema column)
{
	if(column.Name==strId)
	{
		return strIdGetSet;
	}
	else if(column.Name==strIsActive)
	{
		return strIsActiveGetSet;
	}
	else if(column.Name==strIsExpired)
	{
		return strIsExpiredGetSet;
	}
	else if(column.Name==strVersionRow)
	{
		return strVersionRowGetSet;
	}
	
	string strPrefijo ="";//GetPrefijoTablaC()+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
	
	if(blnEsColumnaConNombrePrefijoTipo) {
		strPrefijo =GetPrefijoTablaC()+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
	} else {
		strPrefijo =GetNombreColumnFromProperties(column);
	}
	
	return strPrefijo;
}
	
	public static string GetNombreCompletoColumnaClaseSinPrefijoTablaC(ColumnSchema column)
{
	string strPrefijo =GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
	
	
	return strPrefijo;
}

public static bool GetIdNoVisibleColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{							
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strIDHIDDEN))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
public  string GetNombreCompletoClaseRelacionadaFromColumn(ColumnSchema column)
	{
	String nombreClase="NONE";
	String tabla=column.Name.Replace(strId,"");
	String[] descripciones;
	String[] tipo;
	TableSchema tableSchemaRelacionadaFK=null;
	
	if(tabla!="")
	{	nombreClase=column.Name.Substring(2,column.Name.Length-2);//tabla;			
	}
	else
	{
		tableSchemaRelacionadaFK=GetTableSchemaFromColumnForeignKey(column);
		
		if(tableSchemaRelacionadaFK!=null) {
			nombreClase=GetNombreClaseC(tableSchemaRelacionadaFK.ToString());
			
			return nombreClase;
		}
		
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TABLACOMPLETA"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}				
			
	}
	
	return nombreClase;
	}
	
	public static bool ExisteTablasClasesYaRelacionadas(ArrayList arrayList,String SecondaryTable) {
		bool blnExiste=false;
		
		foreach(String strSecondaryTable in arrayList) {
			if(strSecondaryTable.Equals(SecondaryTable)) {
				blnExiste=true;
				break;
			}
		}
		
		return blnExiste;
	}
	
	public static string GetNombreCompletoLowerColumnaClaseC(ColumnSchema column)
{
	if(column.Name==strId)
	{
		return strIdGetSet;
	}
	else if(column.Name==strIsActive)
	{
		return strIsActiveGetSet;
	}
	else if(column.Name==strIsExpired)
	{
		return strIsExpiredGetSet;
	}
	else if(column.Name==strVersionRow)
	{
		return strVersionRowGetSet;
	}
	
	string strPrefijo =GetPrefijoTablaC().ToLower()+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
	
	
	return strPrefijo;
}

public string GetParameterBusquedaClaseSetMethodC(ColumnSchema column,bool blnConRangoFinal)
	{			  
		String strConRangoFinal="";
		
		if(blnConRangoFinal) {
			strConRangoFinal=strSufijoRangoFinal;
		}
		
		//PARA RELACION UNO A UNO
		//column.Name==strId||
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
			return"";
		}
		string strPrefijo=String.Empty;
		string strPrefijoTabla="";//GetPrefijoTablaC();
		string strPrefijoFuncion="\r\n\tpublic function set";
		string strPrefijoTipo = GetPrefijoTipoC(column);
		
		strPrefijo=strPrefijoFuncion;
		
		string strNombre = GetNombreColumnaClaseC(column);
			
		string param =  "";//GetTipoColumnaClaseC(column);
		
		if(column.AllowDBNull)
		{
			strPrefijo+=strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"("+param+ " $new"+strPrefijoTabla+strPrefijoTipo+strNombre +strConRangoFinal+")";
			
			if(column.DataType==DbType.AnsiString||column.DataType==DbType.AnsiStringFixedLength||
			column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				strPrefijo+="";
			}
			
			strPrefijo+=" {";
			
			strPrefijo+="\r\n\t\tif($this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strConRangoFinal+"!="+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+") {";			
			
			if(column.DataType==DbType.AnsiString||column.DataType==DbType.AnsiStringFixedLength||
			column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				strPrefijo+="\r\n\r\n\t\t\t\tif("+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"!=null && strlen($new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+")>"+column.Size+") {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"=$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"->substring(0,"+(column.Size-2).ToString()+");\r\n\t\t\t\t\t\t//System.out.println(\""+GetNombreClaseC(column.Table.ToString())+strConRangoFinal+":Ha sobrepasado el numero maximo de caracteres permitidos,Maximo="+column.Size+" en columna "+GetNombreColumnaClaseC(column)+strConRangoFinal+"\");\r\n\t\t\t\t\t} catch(Exception $e) {\r\n\t\t\t\t\t\tthrow $e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}";
			}
			
			strPrefijo+="\r\n\r\n\t\t\t$this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strConRangoFinal+"=$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+";"+ "\r\n\t\t}\r\n\t}";//\r\n\t\t\tthis.setIsChanged(true);
		}
		else
		{
			strPrefijo+=strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"("+param+ " $new"+strPrefijoTabla+strPrefijoTipo+strNombre +strConRangoFinal+")\r\n\t{";
			strPrefijo+="\r\n\t\ttry {\r\n\t\t\tif($this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strConRangoFinal+"!="+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+") {\r\n\t\t\t\tif("+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"==null) {\r\n\t\t\t\t\t$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"="+GetDefaultValueColumna(column)+";\r\n\t\t\t\t\t//System.out.println(\""+GetNombreClaseC(column.Table.ToString())+strConRangoFinal+":Valor nulo no permitido en columna "+GetNombreColumnaClaseC(column)+strConRangoFinal+"\");\r\n\t\t\t\t}";			
			
			if(column.DataType==DbType.AnsiString||column.DataType==DbType.AnsiStringFixedLength||
			column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				strPrefijo+="\r\n\r\n\t\t\t\tif("+"$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"!=null && strlen($new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+")>"+column.Size+") {\r\n\t\t\t\t\t$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"=$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"->substring(0,"+(column.Size-2).ToString()+");\r\n\t\t\t\t\t//System.out.println(\""+GetNombreClaseC(column.Table.ToString())+strConRangoFinal+":Ha sobrepasado el numero maximo de caracteres permitidos,Maximo="+column.Size+" en columna "+GetNombreColumnaClaseC(column)+strConRangoFinal+"\");\r\n\t\t\t\t}";
			}
			
			
			strPrefijo+="\r\n\r\n\t\t\t\t$this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strConRangoFinal+"=$new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+";"+ "\r\n\t\t\t}\r\n\t\t} catch(Exception $e) {\r\n\t\t\tthrow $e;\r\n\t\t}\r\n\t}";//\r\n\t\t\t\tthis.setIsChanged(true);
		}
		
		
		return strPrefijo;
	}
	
	public Boolean GetEsColumnaIndiceC(ColumnSchema columnSchema) 
	{
		Boolean blnEsColumnaIndice=false;
		
		foreach(IndexSchema indexSchema in columnSchema.Table.Indexes)
		{
			foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
			{
				if(memberColumnSchema.Column.Equals(columnSchema)) {
					blnEsColumnaIndice=true;
					break;
				}
			}
		}
		
		return blnEsColumnaIndice;
	}
	
	public string GetValueDefaultParameterBusquedaClaseC(ColumnSchema column)
	{
		
		if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
			return"";
		}
		string strPrefijo=String.Empty;
		string strValor=String.Empty;
		
		string strPrefijoTabla="";//GetPrefijoTablaC().ToLower();
		string strPrefijoTipo =GetPrefijoTipoC(column);
	
		strPrefijo="$this->"+strPrefijoTabla+strPrefijoTipo;
		
		switch(column.Name)
		{
			case strIsActive:
			strValor="";
			break;
			
			case strIsExpired:
			strValor="";
			break;
			
			case strVersionRow:
			strValor="";
			break;
			
			default:
			strValor=GetDefaultValueColumna(column);
			break;
		}
		
		
		
		string strNombre = GetNombreColumnaClaseC(column);
		strPrefijo+=strNombre;
	
		String  strReturn=strPrefijo+"="+strValor+";";
		
		if(GetConRangoBusquedasColumnFromPropertiesC(column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(column,"TODOS")) {
			strReturn+="\r\n\t\t"+strPrefijo+strSufijoRangoFinal+"="+strValor+";"; 
		}
		
		return strReturn;
	}
	
	public string GetParameterBusquedaClaseMethodC(ColumnSchema column,bool blnConRangoFinal)
	{	
		
		//PUEDE SER PARA RELACION UNO A UNO
		//column.Name==strId||
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
			return"";
		}
		
		String strConRangoFinal="";
		
		if(blnConRangoFinal) {
			strConRangoFinal=strSufijoRangoFinal;
		}
		
		string strPrefijo=String.Empty;
		string strPrefijoTabla="";//GetPrefijoTablaC();
		string strPrefijoFuncion="\r\n\tpublic ";//"\r\n\t"+GetPersistenciaColumnaClaseC(column)+"\r\n\tpublic ";
		string strPrefijoTipo = GetPrefijoTipoC(column);
	
		strPrefijo=strPrefijoFuncion;	
		string strNombre = GetNombreColumnaClaseC(column);		
		string param =  "function";//GetTipoColumnaClaseC(column);
			
		strPrefijo+=param+" get"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"() {";
		strPrefijo+="\r\n\t\treturn $this->"+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strConRangoFinal+";\r\n\t}";
	
		return strPrefijo;
	}
	
	public string GetParameterBusquedaClaseC(ColumnSchema column)
	{
		//PARA RELACION UNO A UNO
		//column.Name==strId||
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
			return"";
		}
		
		string strPrefijo=String.Empty;
		string strPrefijoTabla="";//GetPrefijoTablaC().ToLower();
		string strPrefijoTipo =GetPrefijoTipoC(column);
	
		strPrefijo="$"+strPrefijoTabla+strPrefijoTipo;
		
		string strNombre = GetNombreColumnaClaseC(column);
		strPrefijo+=strNombre;
			
		string param ="";//  GetTipoColumnaClaseC(column);
		
		String strReturn="public "+param+" "+strPrefijo+";";
		
		if(GetConRangoBusquedasColumnFromPropertiesC(column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(column,"TODOS")) {
			strReturn+="\r\n\tpublic "+param+" "+strPrefijo+strSufijoRangoFinal+"=null;"; 
		}
			
		return strReturn;
	}
	
/*		
	public static string GetNombreCampoTablaC(ColumnSchema column)
{
	string strPrefijo =column.Name;
	
	
	return strPrefijo;
}
*/	
		#region NetTiersFunctions

// [ab 012605] convenience array for checking if a datatype is an integer 
		private readonly static DbType[] aIntegerDbTypes = new DbType[] {DbType.Int16,DbType.Int32, DbType.Int64 };
		
		private string entityFormat 		= "{0}";
		private string componentServiceFormat = "{0}Service";
		private string entityDataFormat 	= "{0}EntityData";
		private string collectionFormat 	= "{0}Collection";
		private string genericListFormat 	= "TList<{0}>";
		private string genericViewFormat 	= "VList<{0}>";
		private string providerFormat 		= "{0}Provider";
		private string interfaceFormat	 	= "I{0}";
		private string baseClassFormat 		= "{0}Base";
		private string unitTestFormat		= "{0}Test";
		private string enumFormat 			= "{0}List";
		private string manyToManyFormat		= "{0}From{1}";
		private string strippedTablePrefixes		= "tbl;tbl_";
		private string customProcedureStartsWith = "_{0}_";
		private string aliasFilePath 		= "";
		private string procedurePrefix = "";
		private string auditUserField = "";
		private string auditDateField = "";
		private bool cspUseDefaultValForNonNullableTypes = false;
		private bool parseDbColDefaultVal  = false;
		private bool changeUnderscoreToPascalCase  = false;
		private bool includeCustoms = true;

		private MethodNamesProperty methodNames = null;
		private Hashtable aliases = null;
		
		#region CSharpKeywords
		
		private string[] csharpKeywords = new string[77] 
		{
				"abstract","event", "new", "struct", 
				"as", "explicit", "null", "switch",
				"base", "extern", "object", "this",
				"bool", "false", "operator", "throw",
				"break", "finally", "out", "true",
				"byte", "fixed", "override", "try",
				"case", "float", "params", "typeof",
				"catch", "for", "private", "uint",
				"char", "foreach", "protected", "ulong",
				"checked", "goto", "public", "unchecked",
				"class", "if", "readonly", "unsafe",
				"const", "implicit", "ref", "ushort",
				"continue","in","return","using",
				"decimal","int","sbyte","virtual",
				"default","interface","sealed","volatile",
				"delegate","internal","short","void",
				"do","is","sizeof","while",
				"double","lock","stackalloc",
				"else","long","static",
				"enum","namespace", "string"
		}; 
		
		#endregion 
		
		/// <summary>
		/// Return a specified number of tabs
		/// </summary>
		/// <param name="n">Number of tabs</param>
		/// <returns>n tabs</returns>
		public string Tab(int n)
		{
			return new String('\t', n);
		}
		
		#region Diagnostics
		
		/// <summary>
		/// Gets or sets a value that indicates if output during generation should
		/// be verbose or not.
		/// </summary>
		protected bool Verbose { get { return verbose; } set { verbose = value; } }
		private bool verbose = false;

		
		/// <summary>
		/// Write a message to the debug log.
		/// </summary>
		protected void DebugWriteLine(string msg)
		{
			if (Verbose && msg != null && msg.Length > 0)
				System.Diagnostics.Debug.WriteLine(msg);
		}
		#endregion
		
		
		#region "9. Code Style public properties"
		MethodNamesProperty MethodNames
		{
			get
			{
				if ( methodNames == null )
				{
					methodNames = new MethodNamesProperty();
				}
				
				return methodNames;
			}
			set { methodNames = value; }
		}
		
		/// <summary>
		/// This property is used to set the MethodNames property from NetTiers.cst
		/// due to runtime error when trying to set it directly using an object value.
		/// </summary>
		string MethodNamesValues
		{
			get { return MethodNames.ToStringList(); }
			set { MethodNames = new MethodNamesProperty(value); }
		}
		
		string StrippedTablePrefixes
		{
			get {return this.strippedTablePrefixes;}
			set	{this.strippedTablePrefixes = value;}
		}
		
		string EntityFormat
		{
			get {return this.entityFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "EntityFormat");
				}
				this.entityFormat = value;
			}
		}
		
		string CollectionFormat
		{
			get {return this.collectionFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "CollectionFormat");
				}
				this.collectionFormat = value;
			}
		}
		
		string GenericViewFormat
		{
			get {return this.genericViewFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "GenericViewFormat");
				}
				this.genericViewFormat = value;
			}
		}
		
		string GenericListFormat
		{
			get {return this.genericListFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "GenericListFormat");
				}
				this.genericListFormat = value;
			}
		}
		
		
		
		string ProviderFormat
		{
			get {return this.providerFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "ProviderFormat");
				}
				this.providerFormat = value;
			}
		}
		
		string InterfaceFormat
		{
			get {return this.interfaceFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "InterfaceFormat");
				}
				this.interfaceFormat = value;
			}
		}
		
		string BaseClassFormat
		{
			get {return this.baseClassFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "BaseClassFormat");
				}
				this.baseClassFormat = value;
			}
		}
		
		string EnumFormat
		{
			get {return this.enumFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "EnumFormat");
				}
				this.enumFormat = value;
			}
		}
		
			string ManyToManyFormat
		{
			get {return this.manyToManyFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "ManyToManyFormat");
				}
				this.manyToManyFormat = value;
			}
		}
				
		bool ParseDbColDefaultVal
		{
			get { return this.parseDbColDefaultVal; }
			set { this.parseDbColDefaultVal = value; }
		}
		
	bool ChangeUnderscoreToPascalCase
		{
			get { return this.changeUnderscoreToPascalCase; }
				set { this.changeUnderscoreToPascalCase = value; }
		}
		
		
				string AliasFilePath
		{
			get {return this.aliasFilePath;}
			set	{this.aliasFilePath = value;}
		}
		
		string ProcedurePrefix
		{
			get {return this.procedurePrefix;}
			set
			{
				if (value == null || value == string.Empty)
					return;
				this.procedurePrefix = value;
			}
		}

		string CustomProcedureStartsWith
		{
			get { return this.customProcedureStartsWith; }
			set { this.customProcedureStartsWith = value; }
		}
		
		bool IncludeCustoms
		{
			get { return this.includeCustoms; }
			set { this.includeCustoms = value; }
		}		
		
			bool CSPUseDefaultValForNonNullableTypes
		{
			get { return this.cspUseDefaultValForNonNullableTypes; }
			set { this.cspUseDefaultValForNonNullableTypes = value; }
		}
		
		public enum CustomNonMatchingReturnType
		{
			DataSet,
			IDataReader
		}
		#endregion

		/// <summary>
		/// Get the safe name for a data object by determining if it contains spaces or other illegal
		/// characters - if so wrap with []
		/// </summary>
		/// <param name="schemaObject">Database schema object (e.g. a table, stored proc, etc)</param>
		/// <returns>The safe name of the object</returns>
		public string GetSafeName(SchemaObjectBase schemaObject)
		{
			return GetSafeName(schemaObject.Name);
		}

		/// <summary>
		/// Get the safe name for a data object by determining if it contains spaces or other illegal
		/// characters - if so wrap with []
		/// </summary>
		/// <param name="objectName">The name of the database schema object</param>
		/// <returns>The safe name of the object</returns>
		public string GetSafeName(string objectName)
		{
			return objectName.IndexOfAny(new char[]{' ', '@', '-', ',', '!'}) > -1 ? "[" + objectName + "]" : objectName;
		}

		/// <summary>
		/// Get the camel cased version of a name.  
		/// If the name is all upper case, change it to all lower case
		/// </summary>
		/// <param name="name">Name to be changed</param>
		/// <returns>CamelCased version of the name</returns>
        public string GetCamelCaseName(string name)
        {
            if (name.Equals(name.ToUpper()) && name.IndexOf("_") == -1)
                return name.ToLower().Replace(" ", "");
            else
            {
                // first get the PascalCase version of the name (DRY)
                string pascalName = GetPascalCaseName(name);
                // now lowercase the first character to transform it to camelCase
                return pascalName.Substring(0, 1).ToLower() + pascalName.Substring(1);
            }
        }

        /// <summary>
        /// Get the Pascal cased version of a name.  
        /// </summary>
        /// <param name="name">Name to be changed</param>
        /// <returns>PascalCased version of the name</returns>
        public string GetPascalCaseName(string name)
        {
			string[] splitNames;
			if (ChangeUnderscoreToPascalCase)
			{
				char[] splitter = {'_', ' '};
				splitNames = name.Split(splitter);
			}	
			else
			{
				char[] splitter =  {' '};
				splitNames = name.Split(splitter);
			}
			
            string pascalName = "";
            foreach (string s in splitNames)
            {
                if (s.Length > 0)
                    pascalName += s.Substring(0, 1).ToUpper() + s.Substring(1);
            }

            return pascalName;
        }

        /// <summary>
        /// Get the Pascal spaced version of a name.  
        /// </summary>
        /// <param name="name">Name to be changed</param>
        /// <returns>PascalSpaced version of the name</returns>
        public string PascalToSpaced(string name)
        {
            Regex regex = new Regex("(?<=[a-z])(?<x>[A-Z])|(?<=.)(?<x>[A-Z])(?=[a-z])");
            return regex.Replace(name, " ${x}");
        }

        /// <summary>
        /// Get the Pascal spaced version of a name.  
        /// </summary>
        /// <param name="name">Name to be changed</param>
        /// <returns>PascalSpaced version of the name</returns>
        public string GetPascalSpacedName(string name)
        {
            return PascalToSpaced(GetClassName(name));
        }		

		/// <summary>
		/// Remove any non-word characters from a SchemaObject's name (word characters are a-z, A-Z, 0-9, _)
		/// so that it may be used in code
		/// </summary>
		/// <param name="schemaObject">DB Object whose name is to be cleaned</param>
		/// <returns>Cleaned up object name</returns>
		public string GetCleanName(SchemaObjectBase schemaObject)
		{
			return GetCleanName(schemaObject.Name);
		}
		
		
		/// <summary>
		/// Applies the configured string format to the table module
		/// </summary>
		private string ApplyBaseClassFormat(string className)
		{
			return string.Format(baseClassFormat, className);
		}
		
		#region Business object class name
		/// <summary>
		/// Gets the abstract class name of a table.
		/// </summary>
		public string GetAbstractClassName(string tableName)
		{
			return ApplyBaseClassFormat(GetClassName(tableName));
		}
		
		/// <summary>
		/// Get the name of the IEntityKey implementation for the specified table.
		/// </summary>
		public string GetKeyClassName(string tableName)

		{
			return String.Format("{0}Key", GetClassName(tableName));
		}
		
		/// <summary>
		/// Get a partial class name from a standard class name.
		/// </summary>
		/// <param name="className">The normal class name.</param>
		public string GetPartialClassName(string className)
		{
			return string.Format("{0}.generated", className);
		}
		
		
		/// <summary>
		/// Get a service based class name from a standard class name.
		/// </summary>
		/// <param name="className">The normal class name.</param>
		public string GetServiceClassName(string className)
		{
			return string.Format("{0}Service", GetClassName(className));
		}

		/// <summary>
		/// Get a partial class name from a standard class name.
		/// </summary>
		/// <param name="className">The normal class name.</param>
		public string GetAbstractServiceClassName(string className)
		{
			return string.Format("{0}ServiceBase", GetClassName(className));
		}
		
		/// <summary>
		/// Get the proxy class name of the Data Repository.
		/// </summary>
		/// <param name="className">The normal class name.</param>
		public string GetProxyClassName(string className)
		{
			return string.Format("{0}Services", className);
		}
		
		/// <summary>
		/// 
		/// </summary>
		public string GetEnumName(string tableName)
		{
			return string.Format(this.enumFormat, GetClassName(tableName));
		}
				
		/// <summary>
		/// 
		/// </summary>
		public string GetStructName(string tableName)
		{
			return string.Format(this.entityDataFormat, GetClassName(tableName));
		}
				
		
		/// <summary>
		/// This function get the alias name for this object name.
		/// </summary>
		/// <remark>This function should not be called directly, but via the GetClassName.</remark>
		public string GetAliasName(string tableName)
		{
			tableName = GetCleanName(tableName);
			
			// If the aliases aren't loaded yet, and the filepath exists, then load the hashtable of aliases.
			if (aliases == null && File.Exists(this.aliasFilePath))
			{				
				//Debugger.Break();
				aliases = new Hashtable();
				using (StreamReader sr = new StreamReader(this.aliasFilePath))
				{
					string line;
					while ((line = sr.ReadLine()) != null)	
					{
						if (line.IndexOf(":") > 0)
						{
							aliases.Add(line.Split(':')[0], (line.Split(':')[1]));
						}
					}
				}
			}
			
			// See if our tablename is in the aliases hashtable, and if so, replace it.
			if (aliases != null)
			{
				//Debugger.Break();
				IDictionaryEnumerator alias = aliases.GetEnumerator();
				while (alias.MoveNext())
				{
					if (tableName.ToLower() == alias.Key.ToString().ToLower())
					{
						tableName = alias.Value.ToString();
						break;
					}
				}
			}
			return tableName;
		}
				
		/// <summary>
		///  Create a class name from a table name, for a business object.
		/// Is an alias file is present, use the defined mapping.
		/// Otherwise, use the cleaned table name.
		/// </summary>
		public string GetClassName(TableSchema tableName)
		{
			return GetClassName(tableName.Name);
		}
		
		/// <summary>
		///  Create a class name from a table name, for a business object.
		/// Is an alias file is present, use the defined mapping.
		/// Otherwise, use the cleaned table name.
		/// </summary>
		public string GetClassName(string tableName)
		{
			
			if (File.Exists(this.aliasFilePath))
			{			
				//See newName there is any alias for this table name
				string tableAlias = GetAliasName(tableName);
				// see if the alias and original table name are the different
				if ( string.Compare(tableName, tableAlias, true) != 0 )
					return tableAlias;

				// ok, just fall thru and allow normal stripping of prefixes
			}
						
			
			// Otherwise just use the old good method ;-) (strip prefix, remove bad char, Pascal case)
			
			// 1. strip prefix
			string newName = tableName;
			
			string[] strips = this.strippedTablePrefixes.Split(new char[] {',', ';'});
			foreach(string strip in strips)
			{
            if (newName.StartsWith(strip))
				{
					newName = newName.Remove(0, strip.Length);
					continue;
				}
			}
			
			// 2.remove space or bad characters
			newName = GetCleanName(string.Format(this.entityFormat, newName));
			
			if (Regex.IsMatch(newName, @"^[\d]"))
				newName="Entity" + newName;
				
			// 3. Set Pascal case
			return GetPascalCaseName(newName);
			
			/*
			// 3. Remove any plural - Experimental, need more grammar analysis//ref: http://www.gsu.edu/~wwwesl/egw/crump.htm
			ArrayList invariants = new ArrayList();
			invariants.Add("alias");
							
			if (invariants.Contains(name.ToLower()))
			{
				return name;
			}
			else if (name.EndsWith("ies"))
			{
				return name.Substring(0, name.Length-3) + "y";
			}
			else if (name.EndsWith("s") && !(name.EndsWith("ss") || name.EndsWith("us")))
			{
				return name.Substring(0, name.Length-1);
			}
			else
				return name;	
			*/		
		}		
		#endregion
		
		
		#region collection class name
		/// <summary>
		/// 
		/// </summary>
		public string GetAbstractCollectionClassName(string tableName)
		{
			return ApplyBaseClassFormat(GetCollectionClassName(tableName));
		}
		/// <summary>
		/// 
		/// </summary>
		public string GetCollectionClassName(string tableName)
		{
			return string.Format(genericListFormat, GetClassName(tableName));
		}
		
		public string GetViewCollectionClassName(string tableName)
		{
			return string.Format(genericViewFormat, GetClassName(tableName));
		}
		
		public string GetCollectionPropertyName(string tableName)
		{
			return string.Format(collectionFormat, GetClassName(tableName));
		}
		
		#endregion

		#region Provider class name
		/// <summary>
		/// 
		/// </summary>
		public string GetProviderName(string tableName)
		{
			return string.Format(providerFormat, GetClassName(tableName));
		}
		
		/// <summary>
		/// 
		/// </summary>
		public string GetProviderClassName(string tableName)
		{
			return GetProviderName(tableName);
		}
		
		/*public string GetProviderDecoratorClassName(string tableName)
		{
			return string.Format(decoratorFormat, GetProviderClassName(tableName));
		}*/
		/// <summary>
		/// 
		/// </summary>
		public string GetIProviderName(string tableName)
		{
			return string.Format(interfaceFormat, GetProviderClassName(tableName));
		}
		/// <summary>
		/// 
		/// </summary>
		public string GetProviderBaseName(string tableName)
		{
			return ApplyBaseClassFormat(GetProviderClassName(tableName));
		}
		/// <summary>
		/// 
		/// </summary>
		public string GetProviderTestName(string tableName)
		{
			return string.Format(unitTestFormat, GetClassName(tableName));
		}
		#endregion
		
		#region Factory class name
				
		/// <summary>
		/// 
		/// </summary>
		public string GetAbstractRepositoryClassName(string tableName)
		{
			return ApplyBaseClassFormat(GetRepositoryClassName(tableName));
		}
		
		/// <summary>
		/// 
		/// </summary>
		public string GetRepositoryClassName(string tableName)
		{
			return GetProviderName(tableName);
		}		
		
		/// <summary>
		/// 
		/// </summary>
		public string GetRepositoryTestClassName(string tableName)
		{
			return string.Format(unitTestFormat, GetClassName(tableName));
		}
		#endregion
		
        #region 6b - Web Advanced Options
        /// <summary>
        /// Build and return a concatened list of columns that are contained in the specified key. (ex: Column1, Column2() )
        /// </summary>
        /// <param name="keys"> the key instance.</param>
        public string GetDataKeyNames(ColumnSchemaCollection keys)
        {
            StringBuilder Name = new StringBuilder();
            for (int x = 0; x < keys.Count; x++)
            {
                Name.Append(GetPropertyName(keys[x].Name));
                if (x < keys.Count - 1)
                {
                    Name.Append(", ");
                }
            }
            return Name.ToString();
        }

        /// <summary>
        /// Returns TableSchemaCollection of tables by a fk
        /// </summary>
        /// <param name="col"></param>
        /// <param name="sourceTables"></param>
        /// <returns></returns>
        public TableSchemaCollection GetTablesCollectionByFk(ColumnSchema col, TableSchemaCollection sourceTables)
        {
            TableSchemaCollection SourceTablesRelated = new TableSchemaCollection();

            for (int x = 0; x < sourceTables.Count; x++)
            {
                TableSchema SourceTable = sourceTables[x];
                foreach (ColumnSchema tCol in SourceTable.Columns)
                {
                    if (col.Name == tCol.Name && col.SystemType == tCol.SystemType && tCol.IsForeignKeyMember && !tCol.IsPrimaryKeyMember)
                        SourceTablesRelated.Add(SourceTable);
                }
            }

            return SourceTablesRelated;
        }

        #endregion

		/// <summary>
		/// Remove any non-word characters from a name (word characters are a-z, A-Z, 0-9, _)
		/// so that it may be used in code
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>Cleaned up object name</returns>
		public string GetCleanName(string name)
		{
			return Regex.Replace(name, @"[\W]", "");
		}
		
		/// <summary>
		/// Remove any non-word characters from a name (word characters are a-z, A-Z, 0-9, _)
		/// with the exception of a period (.)
		/// so that it may be used in code
		/// </summary>
		/// <remarks>
		///		Meant to be used to format things like namespaces and database names.
		///	</remarks>
		/// <param name="name">name to be cleaned</param>
		/// <returns>Cleaned up object name</returns>
		public string GetCleanName2(string name)
		{
			return Regex.Replace(name, @"[^A-Za-z0-9_\.]", "");
		}
		
		/// <summary>
		/// Transform the name of a column into a public class property name.
		/// </summary>
		public string GetPropertyName(ColumnSchema column)
		{
			if (column == null)
				return "";
				
		   	return GetPropertyName(column.Name);
		}
		
		/// <summary>
		/// Transform a name into a public class property name.
		/// </summary>
		public string GetPropertyName(string name)
		{
		   	name = Regex.Replace(name, @"[\W]", "");
		   	name = name.TrimStart(new char[] {'_', '-', '+', '=', '*'});
			name = GetPascalCaseName(name);
			
			if (Regex.IsMatch(name, @"^[\d]"))
				name="Data" + name;
			return name;
		}
		
		/// <summary>
		/// Gets the expression used to set the property value in an entity.  Specificly used to handle nullable columns.
		/// </summary>
		/// <param name="column">The column object </param>
		/// <param name="containerName">The object that has a string indexer for the column (DataRow, IDataReader, etc)</param>
		/// <param name="objectName">The object instance name.</param>
		/// <param name="indent">How tabs should the code be indented</param>
		/// <returns>An expression that sets the property based on contents of the column in the container.</returns>
		/// <remarks>This method should not append the trailing semicolon.</remarks>
		public string GetObjectPropertySetExpression(ColumnSchema column, string containerName, string objectName, int indent)
		{
			if ( column.AllowDBNull )
			{
				return string.Format("{2} = ({1}.IsDBNull({1}.GetOrdinal(\"{0}\")))?null:({3}){1}[\"{0}\"]",
						/*0*/column.Name,
						/*1*/containerName,
						/*2*/GetObjectPropertyAccessor(column,objectName),
						/*3*/GetCSType(column));
			}
			else
			{
				// regular NOT NULL data types, set to default value for type if null
				return string.Format("{2} = ({3}){1}[\"{0}\"]",
					/*0*/column.Name,
					/*1*/containerName,
					/*2*/GetObjectPropertyAccessor(column,objectName),
					/*3*/GetCSType(column),
					/*4*/GetCSDefaultByType(column));
			}
		}
		
		/// <summary>
		/// Gets the expression used to set the property value in an entity.  Specificly used to handle nullable columns.
		/// </summary>
		/// <param name="column">The column object </param>
		/// <param name="containerName">The object that has a string indexer for the column (DataRow, IDataReader, etc)</param>
		/// <param name="objectName">The object instance name.</param>
		/// <param name="indent">How tabs should the code be indented</param>
		/// <returns>An expression that sets the property based on contents of the column in the container.</returns>
		/// <remarks>This method should not append the trailing semicolon.</remarks>
		public string GetOriginalObjectPropertySetExpression(ColumnSchema column, string containerName, string objectName, int indent)
		{
			if ( column.AllowDBNull )
			{
				return string.Format("{2} = ({1}.IsDBNull({1}.GetOrdinal(\"{0}\")))?null:({3}){1}[\"{0}\"]",
						/*0*/column.Name,
						/*1*/containerName,
						/*2*/GetOriginalObjectPropertyAccessor(column,objectName),
						/*3*/GetCSType(column));
			}
			else
			{
				// regular NOT NULL data types, set to default value for type if null
				return string.Format("{2} = ({3}){1}[\"{0}\"]",
					/*0*/column.Name,
					/*1*/containerName,
					/*2*/GetOriginalObjectPropertyAccessor(column,objectName),
					/*3*/GetCSType(column),
					/*4*/GetCSDefaultByType(column));
			}
		}

		/// <summary>
		/// Gets the expression used to set the property value in an entity.  Specificly used to handle nullable columns.
		/// </summary>
		/// <param name="column">The column object </param>
		/// <param name="containerName">The object that has a string indexer for the column (DataRow, IDataReader, etc)</param>
		/// <param name="objectName">The object instance name.</param>
		/// <param name="indent">How tabs should the code be indented</param>
		/// <returns>An expression that sets the property based on contents of the column in the container.</returns>
		/// <remarks>This method should not append the trailing semicolon.</remarks>
		public string GetDatasetPropertySetExpression(ColumnSchema column, string containerName, string objectName, int indent)
		{
			if ( column.AllowDBNull )
			{
				return string.Format("{2} = (Convert.IsDBNull({1}[\"{0}\"]))?null:({3}){1}[\"{0}\"]",
						/*0*/column.Name,
						/*1*/containerName,
						/*2*/objectName,
						/*3*/GetCSType(column));
			}
			else
			{
				// regular NOT NULL data types, set to default value for type if null
				return string.Format("{2} = ({3}){1}[\"{0}\"]",
					/*0*/column.Name,
					/*1*/containerName,
					/*2*/objectName,
					/*3*/GetCSType(column),
					/*4*/GetCSDefaultByType(column));
			}
		}
		
		/// <summary>
		/// Gets the expression used to set the property value in an entity.  Specificly used to handle nullable columns.
		/// </summary>
		/// <param name="column">The column object </param>
		/// <param name="containerName">The object that has a string indexer for the column (DataRow, IDataReader, etc)</param>
		/// <param name="objectName">The object instance name.</param>
		/// <param name="indent">How tabs should the code be indented</param>
		/// <returns>An expression that sets the property based on contents of the column in the container.</returns>
		/// <remarks>This method should not append the trailing semicolon.</remarks>
		public string GetObjectPropertySetExpression(ViewColumnSchema column, string containerName, string objectName, int indent)
		{
			if ( column.AllowDBNull )
			{
				// nullable reference types (strings), set to null if null retrieved from database
				return string.Format("{2} = ({1}.IsDBNull({1}.GetOrdinal(\"{0}\")))?null:({3}){1}[\"{0}\"]",
					/*0*/column.Name,
					/*1*/containerName,
					/*2*/GetObjectPropertyAccessor(column,objectName),
					/*3*/GetCSType(column));
			}
			else
			{
				// regular NOT NULL data types, set to default value for type if null
				return string.Format("{2} = ({3}){1}[\"{0}\"]",
					/*0*/column.Name,
					/*1*/containerName,
					/*2*/GetObjectPropertyAccessor(column,objectName),
					/*3*/GetCSType(column),
					/*4*/GetCSDefaultByType(column));
			}
		}

		/// <summary>
		/// Gets the expression used to set the property value in an entity.  Specificly used to handle nullable columns.
		/// </summary>
		/// <param name="column">The column object </param>
		/// <param name="containerName">The object that has a string indexer for the column (DataRow, IDataReader, etc)</param>
		/// <param name="objectName">The object instance name.</param>
		/// <param name="indent">How tabs should the code be indented</param>
		/// <returns>An expression that sets a temporary variable with a null value if possible.</returns>
		/// <remarks>This method should not append the trailing semicolon.</remarks>
		public string GetKeyIfNullable(ColumnSchema column, string objectName)
		{
			if ( column.AllowDBNull )
			{
				// nullable reference types (strings), set to null if null retrieved from database
				return string.Format("{2} tmp = {1} ?? {1}",
					/*0*/GetObjectPropertyAccessor(column,objectName),
					/*1*/GetCSDefaultByType(column));
			}
			return "";
		}
		
		/// <summary>
		/// Creates a string that reprensents an entity and its property.
		/// </summary>
		/// <param name="objectName">Name of the object.</param>
		/// <param name="column">Name of the column that define the property.</param>
		public string GetObjectPropertyAccessor(ColumnSchema column, string objectName)
		{
			return objectName + "." + GetPropertyName(column.Name);
		}
		
		/// <summary>
		/// Creates a string that reprensents an entity and its property.
		/// </summary>
		/// <param name="objectName">Name of the object.</param>
		/// <param name="column">Name of the column that define the property.</param>
		public string GetObjectPropertyAccessorWithDefault(ColumnSchema column, string objectName)
		{
			
			if ( column.AllowDBNull )
			{
				// nullable reference types (strings), set to null if null retrieved from database
				return string.Format("({0} ?? {1})",
					/*0*/GetObjectPropertyAccessor(column,objectName),
					/*1*/GetCSDefaultByType(column));
			}
			return objectName + "." + GetPropertyName(column.Name);
		}
		
		/// <summary>
		/// Creates a string that reprensents an entity and its property.
		/// </summary>
		/// <param name="objectName">Name of the object.</param>
		/// <param name="column">Name of the column that define the property.</param>
		public string GetOriginalObjectPropertyAccessor(ColumnSchema column, string objectName)
		{
			return objectName + ".Original" + GetPropertyName(column.Name);
		}

		/// <summary>
		/// Creates a string that reprensents an entity and its property.
		/// </summary>
		/// <param name="objectName">Name of the object.</param>
		/// <param name="column">Name of the column that define the property.</param>
		public string GetObjectPropertyAccessor(ViewColumnSchema column, string objectName)
		{
			return objectName + "." + GetPropertyName(column.Name);
		}
		
		/// <summary>
		/// Creates a string that retpresents a column as a class private member.
		/// </summary>
		/// <param name="column">the database column from which we want the generate a private member.</param>
		public string GetPrivateName(ColumnSchema column)
		{
			return GetPrivateName(column.Name);
		}
		

		
		/// <summary>
		/// Creates a string that retpresents a column as a class private member.
		/// </summary>
		/// <param name="name">the name from which we want the generate a private member.</param>
		public string GetPrivateName(string name)
		{		
		   	name = Regex.Replace(name, @"[\W]", "");
			name = GetCamelCaseName(name);
			
			foreach(string keyword in csharpKeywords)
			{
				if (keyword == name)
				{
					name = "@" + name;
				}
			}	
			
			if (Regex.IsMatch(name, @"^[\d]"))
				name="data" + name;
			
			return name;
		}

		/// <summary>
		/// Creates a string that represents a many to many relation name.
		/// </summary>
		/// <param name="junctionTableKey">The key that make the relationship.</param>
		/// <param name="junctionTableName">the table that store the relation.</param>
		public string GetManyToManyName(TableKeySchema junctionTableKey, string junctionTableName)
		{			
			return GetManyToManyName(junctionTableKey.ForeignKeyMemberColumns, junctionTableName);
		}
		
		/// <summary>
		/// Creates a string that represents a many to many relation name.
		/// </summary>
		/// <param name="columns">The columns that belong to the relationship.</param>
		/// <param name="junctionTableName">the table that store the relation.</param>
		public string GetManyToManyName(ColumnSchemaCollection columns, string junctionTableName)
		{
			StringBuilder result = new StringBuilder();
			foreach(ColumnSchema pCol in columns)
			{
				result.Append(GetCleanName(pCol.Name));
			}
			
			//See if there is any alias for this table name (check include in GetClassName)
			junctionTableName = GetClassName(junctionTableName);
			
			return string.Format(this.manyToManyFormat, result.ToString(), junctionTableName);
		}
		
		/// <summary>
		/// Check that a given key has all foreign's columns into the primary key.
		/// </summary>
		/// <param name="key">The key to check.</param>
		public bool IsJunctionKey(TableKeySchema key)
		{
			foreach(ColumnSchema col in key.ForeignKeyMemberColumns)
			{
				if (!col.IsPrimaryKeyMember)
				{
					//BYDAN_NETTIERS
					//System.Windows.Forms.MessageBox.Show(col.Name);
					//return false;
				}
			}
			return true;
		}
		
		/// <summary>
		/// Check that a given table has a primary key.
		/// </summary>
		/// <param name="table">The table to check.</param>
		public bool HasPrimaryKey(TableSchema table)
		{
            if (table.GetType().GetProperty("HasPrimaryKey") != null)
            {
                if (!(bool)table.GetType().GetProperty("HasPrimaryKey").GetValue(table, null)) return false;
            }
			if (table.PrimaryKey == null || table.PrimaryKey.MemberColumns.Count == 0) return false;
			return true;
		}
		
		/// <summary>
		/// Check that a given index has all it's columns into the primary key.
		/// </summary>
		/// <param name="index">The index to check.</param>
		public bool IsPrimaryKey(IndexSchema index)
		{
			foreach(ColumnSchema col in index.MemberColumns)
			{
				if (!col.IsPrimaryKeyMember)
					return false;
			}
			return true;
		}

		/// <summary>
		/// Get the cleaned, camelcased name of a parameter
		/// </summary>
		/// <param name="par">Command Parameter</param>
		/// <returns>the cleaned, camelcased name </returns>
		public string GetCleanParName(ParameterSchema par)
		{
			return GetCleanParName(par.Name);
		}

		/// <summary>
		/// Get the cleaned, camelcased version of a name
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>the cleaned, camelcased name </returns>
		public string GetCleanParName(string name)
		{
			return GetCamelCaseName(GetCleanName(name));
		}

		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="column">The ColumnSchema with the name to be cleaned</param>
		/// <returns>the cleaned, camelcased name with a _ prefix</returns>
		public string GetMemberVariableName(ColumnSchema column)
		{
			return "_" + GetCleanParName(column.Name);
		}

		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>the cleaned, camelcased name with a _ prefix</returns>
		public string GetMemberVariableName(string name)
		{
			return "_" + GetCleanParName(name);
		}
		
		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="column">The column with the name to be cleaned</param>
		/// <returns>the cleaned, pascal cases name with a _Original prefix</returns>
		public string GetOriginalMemberVariableName(ColumnSchema column)
		{
			return GetOriginalMemberVariableName(column.Name);
		}
		
		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>the cleaned, camelcased name with a _ prefix</returns>
		public string GetOriginalMemberVariableName(string name)
		{
			return "_" + GetOriginalPropertyName(name);
		}
		
		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="column">the column from which we want the name to be cleaned</param>
		/// <returns>the cleaned, camelcased name with a _ prefix</returns>
		public string GetOriginalPropertyName(ColumnSchema column)
		{
			return GetOriginalPropertyName(column.Name);
		}
		
		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>the cleaned, camelcased name with a _ prefix</returns>
		public string GetOriginalPropertyName(string name)
		{
			return "Original" + GetPropertyName(name);
		}

		/// <summary>
		/// Get the description ext. property of a column and return as inline SQL comment
		/// </summary>
		/// <param name="schemaObject">Any database object, but typically a column</param>
		/// <returns>Object description, as inline SQL comment</returns>
		public string GetColumnSqlComment(SchemaObjectBase schemaObject)
		{
			return schemaObject.Description.Length > 0 ? "-- " + schemaObject.Description.Replace(Environment.NewLine, Environment.NewLine + "-- ") : "";
		}
		
		#region GetColumnXmlComment
		/// <summary>
		/// Gets the table's description as a well formatted string for C# XML comments.
		/// </summary>
		public string GetColumnXmlComment(TableSchema table, int indentLevel)
		{
			return GetColumnXmlComment(table.Description, indentLevel);
		}

		/// <summary>
		/// Gets the column's description as a well formatted string for C# XML comments.
		/// </summary>
		public string GetColumnXmlComment(ColumnSchema column, int indentLevel)
		{
			return GetColumnXmlComment(column.Description, indentLevel);
		}

		/// <summary>
		/// Gets the view's description as a well formatted string for C# XML comments.
		/// </summary>
		public string GetColumnXmlComment(ViewSchema view, int indentLevel)
		{
			return GetColumnXmlComment(view.Description, indentLevel);
		}

		/// <summary>
		/// Gets the table key's description as a well formatted string for C# XML comments.
		/// </summary>
		public string GetColumnXmlComment(TableKeySchema key, int indentLevel)
		{
			return GetColumnXmlComment(key.Description, indentLevel);
		}
		
		/// <summary>
		/// Internal implementation.  Gets the description text as a clean C# XML comment line.
		/// </summary>
		private string GetColumnXmlComment(string description, int indentLevel)
		{
			string linePrefix = new string('\t', indentLevel) + "/// ";
			return description.Replace(Environment.NewLine, Environment.NewLine + linePrefix);
		}
		#endregion GetColumnXmlComment
		
		#region Component/Composition Helper Methods
			/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="column">The ColumnSchema with the name to be cleaned</param>
		/// <returns>the cleaned, camelcased name </returns>
		public string GetComponentMemberVariableName(ColumnSchema column)
		{
			return GetCleanParName(column.Name);
		}
		
		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>the cleaned, camelcased name</returns>
		public string GetComponentMemberVariableName(string name)
		{
			return GetCleanParName(name);
		}
		
		public string GetForeignKeyCompositeName (string fk, TableKeySchemaCollection fkeys)
		{
			foreach (TableKeySchema key in fkeys)
			{
				foreach (ColumnSchema col in key.ForeignKeyMemberColumns)
				{
					if (col.Name == fk)
					{
						return GetPropertyName(GetClassName(key.PrimaryKeyTable.Name));
					}
				}
			}
			return "//TODO: UNKNOWN, COULD NOT FIND FOREIGN KEY COMPOSITE NAME \t";
		}
				
		public string GetCompositeClassName(string fk, TableKeySchemaCollection fkeys)
		{
			foreach (TableKeySchema key in fkeys)
			{
				foreach (ColumnSchema col in key.ForeignKeyMemberColumns)
				{
					if (col.Name == fk)
					{
						return GetClassName(key.PrimaryKeyTable.Name);
					}
				}
			}
			return "//TODO: UNKNOWN, COULD NOT FIND COMPOSITE CLASS NAME \t" ;
		}
		
		public string GetCompositeMemberVariableName(string fk, TableKeySchemaCollection fkeys)
		{
			foreach (TableKeySchema key in fkeys)
			{
				foreach (ColumnSchema col in key.ForeignKeyMemberColumns)
				{
					if (col.Name == fk)
					{
						return GetComponentMemberVariableName(GetClassName(key.PrimaryKeyTable.Name));
					}
				}
			}
			return "//TODO: UNKNOWN, COULD NOT FIND COMPOSITE MEMBER VARIABLE NAME\t ";
		}
		
				
		public string GetCompositePropertyName(string fk, TableKeySchemaCollection fkeys)
		{
			foreach (TableKeySchema key in fkeys)
			{
				foreach (ColumnSchema col in key.ForeignKeyMemberColumns)
				{
					if (col.Name == fk)
					{
						return GetPropertyName(GetClassName(key.PrimaryKeyTable.Name));
					}
				}
			}
			return "//TODO: UNKNOWN, COULD NOT FIND COMPOSITE PROPERTY NAME\t ";
		}

		public string GetFKPropertyName(string fk, TableKeySchemaCollection fkeys)
		{
			foreach (TableKeySchema key in fkeys)
			{
				foreach (ColumnSchema col in key.ForeignKeyMemberColumns)
				{
					if (col.Name == fk)
					{
						return GetPropertyName(GetClassName(key.PrimaryKeyMemberColumns[0].Name));
					}
				}
			}
			return "//TODO: UNKNOWN, COULD NOT FIND FK COLUMN PROPERTY NAME\t ";
		}
		#endregion 

/*
		/// <summary>
		/// Transform the list of sql parameters to a list of comment param for a method
		/// </summary>
		public string TransformStoredProcedureInputsToMethodComments(ParameterSchemaCollection inputParameters)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<inputParameters.Count; i++)
			{
				temp.AppendFormat("{2}\t/// <param name=\"{0}\"> A <c>{1}</c> instance.</param>", GetPrivateName(inputParameters[i].Name.Substring(1)), GetCSType(inputParameters[i]).Replace("<", "&lt;").Replace(">", "&gt;"), Environment.NewLine);
			}
			
			return temp.ToString();
		}
		
*/

		/// <summary>
		/// Cleans the given text so that it can be used in a [DescriptionAttribute] attribute in C# code.
		/// </summary>
		public string GetDescriptionAttributeText(string text)
		{
			return text.Replace(Environment.NewLine, " ").Replace("\"", "'");
		}
		
		/// <summary>
		/// Determines if the given column has a user defined data type.  
		/// </summary>
		/// <remarks>
		/// User defined data types are dynamically loaded from the database where the column is from.
		/// </remarks>
		public bool IsUserDefinedType(ColumnSchema column)
		{
			// lazy load the user defined user type list
			if ( userDefinedTypes == null )
			{
				userDefinedTypes = GetUserDefinedTypes(column.Database);
			}
			
			foreach (string userDefinedType in userDefinedTypes)
			{
				// compare the data types case ignoring the case.
				if ( String.Compare(column.NativeType, userDefinedType, true) == 0 )
					return true;
			}
			return false;
		}
		
		private string[] userDefinedTypes = null;

		/// <summary>
		/// Determines if the given schema object has a user defined data type.  
		/// -- [ab] this is a generic ver of IsUserDefinedType(ColumnSchema column)
		/// </summary>
		/// <remarks>
		/// User defined data types are dynamically loaded from the database where the schema object is from.
		/// </remarks>
		public bool IsUserDefinedType<TSchemaType>(TSchemaType schemaItem) where TSchemaType:DataObjectBase
		{
			// lazy load the user defined user type list
			if ( userDefinedTypes == null )
			{
				userDefinedTypes = GetUserDefinedTypes(schemaItem.Database);
			}
			
			foreach (string userDefinedType in userDefinedTypes)
			{
				// compare the data types case ignoring the case.
				if ( String.Compare(schemaItem.NativeType, userDefinedType, true) == 0 )
					return true;
			}
			return false;
		}



		/// <summary>
		/// Get the user defined data types from the specified database.
		/// </summary>
		protected string[] GetUserDefinedTypes(DatabaseSchema database)
		{
			switch (database.Provider.Name)
			{
				case "SqlSchemaProvider":
					return GetSqlUserDefinedTypes(database);
				default:
					return new string[0];
			}
		}
		
		/// <summary>
		/// Get the user defined data types from the specified Sql Server database.
		/// </summary>
		protected string[] GetSqlUserDefinedTypes(DatabaseSchema database)
		{
			try
			{
				SqlCommand	command = new SqlCommand();
				command.CommandText = "sp_MShelptype";
				command.CommandType = CommandType.StoredProcedure;
				command.Connection = new SqlConnection(database.ConnectionString);
	   
				command.Parameters.Add("@typename", SqlDbType.NVarChar, 517);
				command.Parameters.Add("@flags", SqlDbType.NVarChar, 10);

				command.Parameters[0].Value = System.DBNull.Value;
				command.Parameters[1].Value = "uddt";  // look in user defined datatypes

				ArrayList udt = new ArrayList();
				command.Connection.Open();
				using (SqlDataReader reader = command.ExecuteReader(CommandBehavior.CloseConnection))
				{
					while(reader.Read()) 
					{
						udt.Add(reader["UserDatatypeName"]);
					}
				}
				
				string[] userDatatypeNames = new string[ udt.Count ];
				udt.CopyTo(userDatatypeNames,0);
				return userDatatypeNames;
			}
			catch 
			{
				return new string[0]; // oh oh, should handle this better.
			}
		}

		/// <summary>
		/// Check if a column is an identity column
		/// </summary>
		/// <param name="column">DB table column to be checked</param>
		/// <returns>Identity?</returns>
		public bool IsIdentityColumn(ColumnSchema column)
		{
			// for sql server
			if (column.ExtendedProperties["CS_IsIdentity"] != null)
				return (bool)column.ExtendedProperties["CS_IsIdentity"].Value;
			
			// for access
			if (column.ExtendedProperties["Autoincrement"] != null)
				return (bool)column.ExtendedProperties["Autoincrement"].Value;
			
			// test mysql
			
			
			return false;
			
			//Autoincrement: 
			//return (bool)column.ExtendedProperties["CS_IsIdentity"].Value;
		} 
		
		/// <summary>
		/// Get's the default value of a column
		/// </summary>
		/// <param name="column">DB table column to be checked</param>
		/// <returns>string representation of the default value</returns>
		public string GetColumnDefaultValue(ColumnSchema column)
		{
			/*
			return "";
			
			// for sql server
			if (column.ExtendedProperties["CS_Default"] != null)
			{
				string value = column.ExtendedProperties["CS_Default"].Value.ToString().ToLower();
				value = value.Replace("getdate()", "DateTime.Now");
				value = value.Replace("newid()", "Guid.NewGuid()");
				
				while(value.StartsWith("(") && value.EndsWith(")"))
    			 	value= value.TrimStart('(').TrimEnd(')');
	
				if (column.DataType == DbType.Boolean)
					value = value.Contains("1") ? "true" : "false";
				else if (!IsNumericType(column) || value.IndexOf("DateTime.Now") > -1 || value.IndexOf("Guid.NewGuid()") > -1)
					value = string.Format("\"{0}\"", value);
					
				return value;
	
				
			// for access
			if (column.ExtendedProperties["DefaultValue"] != null)
				return column.ExtendedProperties["DefaultValue"].Value.ToString();
			
			// test mysql
			}
			
			*/

			return "";			
		} 
		
		/// <summary>
		/// Determines if the column is a numeric column or not.
		/// </summary>
		/// <param name="column">DB table column to be checked</param>
		/// <returns>true when Numeric, otherwise false</returns>
		public bool IsNumericType(ColumnSchema column)
		{
			switch (column.NativeType.ToLower())
			{
				case "bigint":
				case "bit":
				case "decimal":
				case "float":
				case "int":
				case "money":
				case "numeric":
				case "real":
				case "smallint":
				case "smallmoney":
				case "tinyint": return true;
				default: return false;
			}
		}

		/// <summary>
		/// Check if a column is read-only.
		/// </summary>
		public bool IsReadOnlyColumn(ColumnSchema column)
		{
			// sql server
			if (column.ExtendedProperties["CS_ReadOnly"].Value != null && (bool)column.ExtendedProperties["CS_ReadOnly"].Value)
				return true;
			
			// access, if auto inco
			if (column.ExtendedProperties["Autoincrement"] != null && (bool)column.ExtendedProperties["Autoincrement"].Value)
				return true;
				
			// Jet: if auto generate
			if (column.ExtendedProperties["Jet OLEDB:AutoGenerate"] != null && (bool)column.ExtendedProperties["Jet OLEDB:AutoGenerate"].Value)
				return true;
				
			// default
			return false;
			
			//return column.ExtendedProperties.Count == 0 || (bool)column.ExtendedProperties["CS_ReadOnly"].Value;
		}
		
		/// <summary>
		///  Check if a column is computed.
		/// </summary>
		/// <param name="column"></param>
		public bool IsComputed(ColumnSchema column)
		{
			// Sql server extended property
			if (column.ExtendedProperties["CS_IsComputed"] != null && (bool)column.ExtendedProperties["CS_IsComputed"].Value)
				return true;
			
			// sqlserver timestamp field are computed
			if (column.NativeType.ToLower() == "timestamp")
				return true;
				
			// access, if auto inco
			if (column.ExtendedProperties["Autoincrement"] != null && (bool)column.ExtendedProperties["Autoincrement"].Value)
				return true;
				
			// Jet: if auto generate
			if (column.ExtendedProperties["Jet OLEDB:AutoGenerate"] != null && (bool)column.ExtendedProperties["Jet OLEDB:AutoGenerate"].Value)
				return true;
			
			
			return false;
			
			//return (bool)column.ExtendedProperties["CS_IsComputed"].Value == true || column.NativeType.ToLower() == "timestamp";
		}
		
		/// <summary>
		///  Check if a column is a guid (uniqueidentifier).
		/// </summary>
		/// <param name="column"></param>
		public bool IsGuidColumn( ColumnSchema column )
		{
			return column.SystemType.ToString() == typeof(System.Guid).ToString();
		}

		/// <summary>
		/// Get the owner of a table.
		/// </summary>
		/// <param name="table">The table to check</param>
		/// <returns>The safe name of the owner of the table</returns>
		public string GetOwner(TableSchema table)
		{
			return (table.Owner.Length > 0) ? GetSafeName(table.Owner) + "." : "";
		}
		
		/// <summary>
		/// Get the owner of a view
		/// </summary>
		/// <param name="view">The view to check</param>
		/// <returns>The safe name of the owner of the view</returns>
		public string GetOwner(ViewSchema view)
		{
			return (view.Owner.Length > 0) ? GetSafeName(view.Owner) + "." : "";
		}

		/// <summary>
		/// Get the owner of a command
		/// </summary>
		/// <param name="command">The command to check</param>
		/// <returns>The safe name of the owner of the command</returns>
		public string GetOwner(CommandSchema command)
		{
			return (command.Owner.Length > 0) ? GetSafeName(command.Owner) + "." : "";
		}

		/// <summary>
		/// Does the command have a resultset?
		/// </summary>
		/// <param name="cmd">Command in question</param>
		/// <returns>Resultset?</returns>
		public bool HasResultset(CommandSchema cmd)
		{
			return cmd.CommandResults.Count > 0;
		}
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="columns">Columns for which to get the Sql parameter statement</param>
		/// <returns>Sql Parameter statement</returns>
		public string GetSqlParameterStatement(ColumnSchemaCollection columns)
		{
			StringBuilder result = new StringBuilder();
			
			for(int i=0; i<columns.Count; i++)
			{
				if (i>0) result.Append(", ");
				
				result.Append(GetSqlParameterStatement(columns[i]));
				result.Append(Environment.NewLine);
				
			}	
			return result.ToString();
		}

		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <returns>Sql Parameter statement</returns>
		public string GetSqlParameterStatement(ColumnSchema column)
		{
			return GetSqlParameterStatement(column, false);
		}
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <param name="isOutput">Is this an output parameter?</param>
		/// <returns>Sql Parameter statement</returns>
		public string GetSqlParameterStatement(ColumnSchema column, bool isOutput)
		{
			StringBuilder param = new StringBuilder();
			param.AppendFormat("@{0} {1}", GetPropertyName(column.Name), column.NativeType);
			
			// user defined data types do not need size components
			if ( ! IsUserDefinedType(column) )
			{
			switch (column.DataType)
			{
				case DbType.Decimal:
				{
					if (column.NativeType != "real")
						param.AppendFormat("({0}, {1})", column.Precision, column.Scale);
				
					break;
				}
				// [ab 022205] now handles xxxbinary data type
				case DbType.Binary:
				// 
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				{
					if (column.NativeType != "text" && 
						column.NativeType != "ntext" && 
						column.NativeType != "timestamp" &&
						column.NativeType != "image"
						)

					{
						if (column.Size > 0)
						{
							param.AppendFormat("({0})", column.Size);
						}
					}
					break;
				}
			}
			}
			if (isOutput)
			{
				param.Append(" OUTPUT");
			}
			
			return param.ToString();
		}
		
		
		public bool IsColumnFindable(ColumnSchema column)
		{
			if (column.DataType == DbType.Binary || column.NativeType == "text" || 
					column.NativeType == "ntext" || 
					column.NativeType == "timestamp" ||
					column.NativeType == "image"
				)
				return false;
			
			return true;
		}
		
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <param name="Name">the name of the parameter?</param>
		/// <returns>Sql Parameter statement</returns>
		public string GetSqlParameterStatement(ColumnSchema column, string Name)
		{
			string param = "@" + GetPropertyName(Name) + " " + column.NativeType;
			
			// user defined data types do not need size components
			if ( ! IsUserDefinedType(column) )
			{
			switch (column.DataType)
			{
				case DbType.Decimal:
				{
					param += "(" + column.Precision + ", " + column.Scale + ")";
					break;
				}
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				{
					if (column.NativeType != "text" && column.NativeType != "ntext")
					{
						if (column.Size > 0)
						{
							param += "(" + column.Size + ")";
						}
					}
					break;
				}
			}	
			}
			return param;
		}
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <param name="isOutput">indicates the direction</param>
		/// <returns>Sql Parameter statement</returns>
		public string GetSqlParameterXmlNode(ColumnSchema column, bool isOutput)
		{
			return GetSqlParameterXmlNode(column, column.Name, isOutput, false);
		}
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <param name="parameterName">the name of the parameter?</param>
		/// <param name="isOutput">indicates the direction</param>
		/// <returns>the xml Sql Parameter statement</returns>
		public string GetSqlParameterXmlNode(ColumnSchema column, string parameterName, bool isOutput)
		{
			return GetSqlParameterXmlNode(column, parameterName, isOutput, false);
		}
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <param name="parameterName">the name of the parameter?</param>
		/// <param name="isOutput">indicates the direction</param>
		/// <param name ="nullDefaults">indicates whether to give each parameter a null or empty default.  (used mainly for Find sp's)</param>
		/// <returns>the xml Sql Parameter statement</returns>
		public string GetSqlParameterXmlNode(ColumnSchema column, string parameterName, bool isOutput, bool nullDefaults)
		{
			string formater = "<parameter name=\"@{0}\" type=\"{1}\" direction=\"{2}\" size=\"{3}\" precision=\"{4}\" scale=\"{5}\" param=\"{6}\" nulldefault=\"{7}\"/>";			
			
			string nullDefaultValue = "";
			if (nullDefaults)
			{
				nullDefaultValue = "null";
			}

			bool isReal = false;
			if (column.NativeType.ToLower() == "real") // SQL doesn't like precision or scale on Real
			{
				isReal = true;
			}

			return string.Format(formater, GetPropertyName(parameterName), column.NativeType, isOutput ? "Output" : "Input", column.Size, column.Precision, column.Scale, isReal ? "" : GetSqlParameterParam(column), nullDefaultValue);
		}
		
		/// <summary>
		/// Get an xml representation for a stored procedure parameter - this is for pre-existing (most likely, custom) Stored Procedures
		/// </summary>
		/// <param name="parameter">SP Parameter for which to get the Sql parameter statement</param>
		/// <returns>the xml Sql Parameter statement</returns>
		public string GetSqlParameterXmlNode(ParameterSchema parameter)
		{
			string formater = "<parameter name=\"@{0}\" type=\"{1}\" direction=\"{2}\" size=\"{3}\" precision=\"{4}\" scale=\"{5}\" param=\"{6}\" nulldefault=\"{7}\"/>";			
			
			return string.Format(	formater, 
									parameter.Name.TrimStart('@'),
									parameter.NativeType, 
									parameter.Direction.ToString(), 
									parameter.Size, 
									parameter.Precision, 
									parameter.Scale, 
									parameter.NativeType.ToLower() == "real" ? String.Empty : GetSqlParameterParam<ParameterSchema>(parameter), 
									parameter.AllowDBNull? "null":String.Empty );
		}
		
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="column"></param>
		public string GetSqlParameterParam(ColumnSchema column)
		{
			string param = string.Empty;
			
			// user defined data types do not need size components
			if ( ! IsUserDefinedType(column) )
			{
			switch (column.DataType)
			{
				case DbType.Decimal:
				{
					param = "(" + column.Precision + ", " + column.Scale + ")";
					break;
				}
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				case DbType.Binary:
				{
					if (column.NativeType != "text" && column.NativeType != "ntext" && column.NativeType != "image" && column.NativeType != "timestamp")
					{
						if (column.Size > 0)
						{
							param = "(" + column.Size + ")";
						}
						else if (column.Size == -1)
						{
							param = "(MAX)";
						}
					}
					break;
				}
			}	
			}
			return param;
		}

		/// <summary>
		/// 	[ab] This is a somewhat generic :) version of the singly typed GetSqlParameterParam
		/// </summary>
		/// <param name="column"></param>
		/// <remarks>
		///	
		/// </remarks>
		public string GetSqlParameterParam<TSchemaType>(TSchemaType schemaItem) where TSchemaType:DataObjectBase
		{
			string param = string.Empty;
			
			// user defined data types do not need size components
			if ( ! IsUserDefinedType<TSchemaType>(schemaItem) )
			{
			switch (schemaItem.DataType)
			{
				case DbType.Decimal:
				{
					param = "(" + schemaItem.Precision + ", " + schemaItem.Scale + ")";
					break;
				}
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				case DbType.Binary:				
				{
					if (schemaItem.NativeType != "text" && schemaItem.NativeType != "ntext")
					{
						if (schemaItem.Size > 0)
						{
							param = "(" + schemaItem.Size + ")";
						}
						else if (schemaItem.Size == -1)
						{
							param = "(MAX)";
						}
					}
					break;
				}
			}	
			}
			return param;
		}
		

		/// <summary>
		/// Parse the text of a stored procedure to retrieve any comment prior to the CREATE PROC construct
		/// </summary>
		/// <param name="commandText">Command Text of the procedure</param>
		/// <returns>The procedure header comment</returns>
		public string GetSqlProcedureComment(string commandText)
		{
			string comment = "";
			// Find anything upto the CREATE PROC statement
			Regex regex = new Regex(@"CREATE\s+PROC(?:EDURE)?", RegexOptions.IgnoreCase);	
			comment = regex.Split(commandText)[0];
			//remove comment characters
			regex = new Regex(@"(-{2,})|(/\*)|(\*/)");
			comment = regex.Replace(comment, string.Empty);
			//trim and return
			return comment.Trim();
		}

		/// <summary>
		/// Get any in-line SQL comments on the same lines as parameters
		/// </summary>
		/// <param name="commandText">Command Text of the procedure</param>
		/// <returns>Hashtable of parameter comments, with parameter names as keys</returns>
		public Hashtable GetSqlParameterComments(string commandText)
		{
			Hashtable paramComments = new Hashtable();
			//Get parameter names and comments
			string pattern = @"(?<param>@\w*)[^@]*--(?<comment>.*)";
			//loop through the matches and extract the parameter and the comment, ignoring duplicates
			foreach (Match match in Regex.Matches(commandText, pattern))
				if (!paramComments.ContainsKey(match.Groups["param"].Value))
					paramComments.Add(match.Groups["param"].Value, match.Groups["comment"].Value.Trim());
			//return the hashtable
			return paramComments;
		}
		
		
		#region "Stored procedures input transformations"
		
		/// <summary>
		/// Transform the list of sql parameters to a list of method parameters.
		/// </summary>
		public string TransformStoredProcedureInputsToMethod(ParameterSchemaCollection inputParameters)
		{
			return TransformStoredProcedureInputsToMethod(false, inputParameters);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of method parameters.
		/// </summary>
		public string TransformStoredProcedureInputsToMethod(bool startWithComa, ParameterSchemaCollection inputParameters)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<inputParameters.Count; i++)
			{
				if ((i>0) || startWithComa)
					temp.Append(", ");

				temp.AppendFormat("{0} {1}", GetCSType(inputParameters[i]), GetPrivateName(inputParameters[i].Name.Substring(1)));
			}
			
			return temp.ToString();
		}
		
		public string TransformStoredProcedureInputsToMethod(bool startWithComa, CommandSchema command)
		{
			string temp = string.Empty;
			
			for(int i=0; i<command.InputParameters.Count; i++)
			{
				temp += (temp.Length > 0) || startWithComa ? ", " : "";
				temp += GetCSType(command.InputParameters[i]) + " " + GetPrivateName(command.InputParameters[i].Name.Substring(1));
			}
			for(int j=0; j < command.InputOutputParameters.Count; j++)
			{
				temp += (temp.Length > 0) || (startWithComa)  ? ", out " : " out ";
				temp += GetCSType(command.InputOutputParameters[j]) + " " + GetPrivateName(command.InputOutputParameters[j].Name.Substring(1));
			}
			
			return temp;
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureInputsToDataAccess(ParameterSchemaCollection inputParameters)
		{
			return TransformStoredProcedureInputsToDataAccess(false, inputParameters);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureInputsToDataAccess(bool alwaysStartWithaComa, ParameterSchemaCollection inputParameters)
		{
			return TransformStoredProcedureInputsToDataAccess(alwaysStartWithaComa, inputParameters, false);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureInputsToDataAccess(bool alwaysStartWithaComa, ParameterSchemaCollection inputParameters, bool useCustomPrefix)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<inputParameters.Count; i++)
			{
				if ( (i>0) || alwaysStartWithaComa )
					temp.Append(", ");

				if ( useCustomPrefix )
				{
					temp.Append( GetCustomVariableName(inputParameters[i].Name.Substring(1) , inputParameters[i].Command) );
				}
				else
				{
					temp.Append( GetPrivateName(inputParameters[i].Name.Substring(1)) );
				}
			}
			
			return temp.ToString();
		}
						
		/// <summary>
		/// Transform the list of sql parameters to a list of comment param for a method
		/// </summary>
		public string TransformStoredProcedureInputsToMethodComments(ParameterSchemaCollection inputParameters)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<inputParameters.Count; i++)
			{
				temp.AppendFormat("{2}\t\t/// <param name=\"{0}\"> A <c>{1}</c> instance.</param>", GetPrivateName(inputParameters[i].Name.Substring(1)).Replace("@", ""), GetCSType(inputParameters[i]).Replace("<", "&lt;").Replace(">", "&gt;"), "\r\r\n");
			}
			
			return temp.ToString();
		}

		/// <summary>
		/// Transform the list of sql parameters to a list of comment param for a method
		/// </summary>
		public string TransformStoredProcedureInputsToMethodComments(CommandSchema command)
		{
			string temp = string.Empty;
			for(int i=0; i<command.InputParameters.Count; i++)
			{
				temp += string.Format("{2}\t\t\t/// <param name=\"{0}\"> A <c>{1}</c> instance.</param>", GetPrivateName(command.InputParameters[i].Name.Substring(1)), GetCSType(command.InputParameters[i]), "\r\r\n");
			}
			for(int i=0; i<command.InputOutputParameters.Count; i++)
			{
				temp += string.Format("{2}\t\t\t/// <param name=\"{0}\"> An output  <c>{1}</c> instance.</param>", GetPrivateName(command.InputOutputParameters[i].Name.Substring(1)).Replace("@", ""), GetCSType(command.InputOutputParameters[i]), Environment.NewLine);
			}
			
			return temp;
		}

		#endregion
		
		#region "Stored procedures output transformations"
		
		/// <summary>
		/// Transform the list of sql parameters to a list of method parameters.
		/// </summary>
		public string TransformStoredProcedureOutputsToMethod(ParameterSchemaCollection outputParameters)
		{
			return TransformStoredProcedureOutputsToMethod(false, outputParameters);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of method parameters.
		/// </summary>
		public string TransformStoredProcedureOutputsToMethod(bool startWithComa, ParameterSchemaCollection outputParameters)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<outputParameters.Count; i++)
			{
				if ((i>0) || startWithComa)
					temp.Append(", ");

				temp.AppendFormat("ref {0} {1}", GetCSType(outputParameters[i]), GetPrivateName(outputParameters[i].Name.Substring(1)));
			}
			
			return temp.ToString();
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureOutputsToDataAccess(ParameterSchemaCollection outputParameters)
		{
			return TransformStoredProcedureOutputsToDataAccess(false, outputParameters);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureOutputsToDataAccess(bool alwaysStartWithaComa, ParameterSchemaCollection outputParameters)
		{
			return TransformStoredProcedureOutputsToDataAccess(alwaysStartWithaComa, outputParameters, false);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureOutputsToDataAccess(bool alwaysStartWithaComa, ParameterSchemaCollection outputParameters, bool useCustomPrefix)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<outputParameters.Count; i++)
			{
				if ( (i>0) || alwaysStartWithaComa )
					temp.Append(", ");

				if ( useCustomPrefix )
				{
					temp.AppendFormat("ref {0}", GetCustomVariableName(outputParameters[i].Name.Substring(1), outputParameters[i].Command) );
				}
				else
				{
					temp.AppendFormat("ref {0}", GetPrivateName(outputParameters[i].Name.Substring(1)) );
				}
			}
			
			return temp.ToString();
		}
						
		/// <summary>
		/// Transform the list of sql parameters to a list of comment param for a method
		/// </summary>
		public string TransformStoredProcedureOutputsToMethodComments(ParameterSchemaCollection outputParameters)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<outputParameters.Count; i++)
			{
				temp.AppendFormat("{2}\t\t\t/// <param name=\"{0}\"> A <c>{1}</c> instance.</param>", GetPrivateName(outputParameters[i].Name.Substring(1)).Replace("@", ""), GetCSType(outputParameters[i]).Replace("<", "&lt;").Replace(">", "&gt;"), Environment.NewLine);
			}
			
			return temp.ToString();
		}

		#endregion
		
		/// <summary>
		/// Returns a string that reprenst the given columns formated as method parameters definitions. (ex: string param1, int param2)
		/// </summary>
		/// <param name="columns">The columns to transform.</param>
		public string GetFunctionHeaderParameters(ColumnSchemaCollection columns)
		{
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				output.AppendFormat("{0} {1}", GetCSType(columns[i]), GetPrivateName(columns[i].Name));
				if (i < columns.Count - 1)
				{
					output.Append(", ");
				}
			}
			return output.ToString();
		}
		
		
		/// <summary>
		/// Returns a string that reprenst the given columns formated as method parameters call. (ex: param1, param2)
		/// </summary>
		/// <param name="columns">The columns to transform.</param>
		public string GetFunctionCallParameters(ColumnSchemaCollection columns)
		{
			return GetFunctionCallParameters(columns, string.Empty, null);
		}
		
		public delegate bool AppendIf(ColumnSchema col);
		
		/// <summary>
		/// Returns a string that reprenst the given columns formated as method parameters call. (ex: param1, param2)
		/// </summary>
		/// <param name="columns">The columns to transform.</param>
		public string GetFunctionCallParameters(ColumnSchemaCollection columns, string appendString, AppendIf condition)
		{			
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{		
				output.Append(GetPrivateName(columns[i].Name));
				if (condition != null)
				{
					if (condition(columns[i]))
					{
						output.Append(appendString);
					}
				}
					
				if (i < columns.Count - 1)
				{
					output.Append(", ");
				}
			}
			return output.ToString();
		}
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="columns"></param>
		public string GetFunctionEntityParameters(ColumnSchemaCollection columns)
		{
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				output.AppendFormat("entity.{0}", GetPropertyName(columns[i].Name));
				if (i < columns.Count - 1)
				{
					output.Append(", ");
				}
			}
			return output.ToString();
		}
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="columns"></param>
		/// <param name="accessor"></param>
		public string GetFunctionThisParametersWithNullable(ColumnSchemaCollection columns, string accessor)
		{
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				if (!columns[i].AllowDBNull)
					output.AppendFormat("{1}.{0}", GetPropertyName(columns[i].Name), accessor);
				else
					output.AppendFormat("({1}.{0} ?? {2})", GetPropertyName(columns[i].Name), accessor, GetCSDefaultByType(columns[i]));
				
				if (i < columns.Count - 1)
				{
					output.Append(", ");
				}
			}
			return output.ToString();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="columns"></param>
		/// <param name="objectName"></param>
		public string GetFunctionObjectParameters(ColumnSchemaCollection columns, String objectName)
		{
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				output.AppendFormat("{1}.{0}", GetPropertyName(columns[i].Name), objectName);

				if (i < columns.Count - 1)
				{
					output.Append(", ");
				}
			}
			return output.ToString();
		}

		/// <summary>
		/// Gets the <see cref="System.ComponentModel.DataObjectField" /> Ctor Params
		/// based on the schema information on a column.
		/// The 4 params are 
		///	1. indicates whether the field is the primary key 
		/// 2. whether the field is a database identity field
		/// 3. whether the field can be null
		/// 4. sets the length of the field
		/// </summary>
		/// <param name="column">Column</param>
		/// <returns>The ctor params for the <see cref="System.ComponentModel.DataObjectField" /></returns>
		public string GetDataObjectFieldCallParams(ColumnSchema column)
		{
			return string.Format("{0}, {1}, {2}{3}",
				/*0*/ column.IsPrimaryKeyMember.ToString().ToLower(),
				/*1*/ IsIdentityColumn(column).ToString().ToLower(),
				/*2*/ column.AllowDBNull.ToString().ToLower(),
				/*3*/ (CanCheckLength(column) ? ", " + column.Size.ToString() : ""));
		}
		
		/// <summary>
		/// Gets the parameters needed for the ColumnEnumAttribute class
		/// for the specified column.
		/// </summary>
		/// <param name="column"></param>
		public string GetColumnEnumAttributeParams(ColumnSchema column)
		{
			return string.Format("\"{0}\", typeof({1}), System.Data.{2}, ",
				column.Name,
				GetCSTypeWithoutNullable(column),
				GetDbType(column)
			) + GetDataObjectFieldCallParams(column);
		}

		/// <summary>
		/// Convert database types to C# types
		/// </summary>
		/// <param name="field">Column or parameter</param>
		/// <returns>The C# (rough) equivalent of the field's data type</returns>
		public string GetCSType(DataObjectBase field)
		{		
			if (field.NativeType.ToLower() == "real")
				return "System.Single" + (field.AllowDBNull?"?":"");
			else if (field.NativeType.ToLower() == "xml")
				return "string";
			//else if (field.NativeType.ToLower() == "xml")
			//	return "System.Xml.XmlNode";
			///Only for Custom Stored Procedures that allow nulls for every param
			else if (CSPUseDefaultValForNonNullableTypes 
					&& (field is ParameterSchema)
					&&	!IsCSReferenceDataType(field))
			{			
				if (!DefaultIsNull(	(ParameterSchema)field ))
					return field.SystemType.ToString();
				else 
					return field.SystemType.ToString() + "?";
			}
			else if (!IsCSReferenceDataType(field) && field.AllowDBNull)
			{				
				return field.SystemType.ToString() + "?";
			}
			else
				return field.SystemType.ToString();
		}
		
		#region Defualt Param Value
		
        public static string parseParameterRegex = @"
CREATE\s+PROC(?:EDURE)?                               # find the start of the stored procedure
.*?                                                   # skip all content until we get to the name of the parameter that we are looking for
{0}                                                   # name of the parameter we are interested in
\s+[\w\.\(\)\[\]]+                                    # parameter data type
(?:\s*\=\s*(?<default>(?:'[^']*' | [\w]+)))?          # parameter default value";

		///<summary>
		/// Checks a Parameter Schema if NULL is set to the default value of that procedure param
		///</summary>
		public bool DefaultIsNull(ParameterSchema param)
		{
			if (param == null)
				return false;
			
			System.Text.RegularExpressions.Regex DefaultParamRegex = new System.Text.RegularExpressions.Regex(String.Format(parseParameterRegex, param.Name), 
				System.Text.RegularExpressions.RegexOptions.IgnoreCase | 
				System.Text.RegularExpressions.RegexOptions.Multiline | 
				System.Text.RegularExpressions.RegexOptions.Singleline | 
				System.Text.RegularExpressions.RegexOptions.CultureInvariant | 
				System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace);

		
            System.Text.RegularExpressions.Match match = DefaultParamRegex.Match(param.Command.CommandText);
            if (match != null && match.Success)
			{
				if (match.Groups["default"].Value != null && match.Groups["default"].Value.ToString().Trim().ToUpper() == "NULL")
					return true;
			}	
			return false;
		}
		#endregion 
		
		/// <summary>
		/// Convert database types to C# types, withou nullable support.
		/// </summary>
		/// <param name="field">Column or parameter</param>
		/// <returns>The C# (rough) equivalent of the field's data type</returns>
		public string GetCSTypeWithoutNullable(DataObjectBase field)
		{
			if (field.NativeType.ToLower() == "real")
				return "System.Single";
			else if (field.NativeType.ToLower() == "xml")
				return "string";
			//else if (field.NativeType.ToLower() == "xml")
			//	return "System.Xml.XmlNode";
			else
				return field.SystemType.ToString();
			//return GetCSType(field.DataType);
		}
		
		/// <summary>
		/// Return the DbType enum entry of a specified column. It's a hack of the SchemaExplorer property, as it do not support Xml column properly.
		/// </summary>
		/// <param name="field">Column or parameter</param>
		public string GetDbType(DataObjectBase field)
		{
			if (field.NativeType.ToLower() == "xml")
			{
				return "DbType.Xml";
			}
			else
			{
				return "DbType." + field.DataType.ToString();
			}
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="column"></param>
		public string GetCSDefaultByType(DataObjectBase column)
		{
			return GetCSDefaultByType(column, false);
		}
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="column"></param>
		public string GetCSDefaultByType(DataObjectBase column, bool forceReturnDefault)
		{
			// first attempt to see if the DB defines any default values for this
			// column.  If so, return it.
			string defaultValue;
			if (ParseDbColDefaultVal && !forceReturnDefault)
			{
				defaultValue = GetCSDefaultValueByType(column);
				if (defaultValue != null)
					return defaultValue;
			}

			if (column.NativeType.ToLower() == "real")
				return "0.0F";
			else
			{
				DbType dataType = column.DataType;
				switch (dataType)
				{
					case DbType.AnsiString: 
						return "string.Empty";
						
					case DbType.AnsiStringFixedLength: 
						return "string.Empty";
					
					case DbType.String: 
						return "string.Empty";
						
					case DbType.Boolean: 
						return "false";
					
					case DbType.StringFixedLength: 
						return "string.Empty";
						
					case DbType.Guid: 
						return "Guid.Empty";
					
					
					//Answer modified was just 0
					case DbType.Binary: 
						return "new byte[] {}";
					
					//Answer modified was just 0
					case DbType.Byte:
						return "(byte)0";
						//return "{ 0 }";
					
					case DbType.Currency: 
						return "0";
					
					case DbType.Date: 
						return "DateTime.MinValue";
					
					case DbType.DateTime: 
						return "DateTime.MinValue";
					
					case DbType.Decimal: 
						return "0.0m";
						//return "0M";
						//return "0.0M";
					
					case DbType.Double: 
						return "0.0f";
					
					case DbType.Int16: 
						return "(short)0";
						
					case DbType.Int32: 
						return "(int)0";
						
					case DbType.Int64: 
						return "(long)0";
					
					case DbType.Object: 
						return "null";
					
					case DbType.Single: 
						return "0F";
					
					//case DbType.Time: return "DateTime.MaxValue";
					case DbType.Time: return "new DateTime(1900,1,1,0,0,0,0)";
					case DbType.VarNumeric: return "0";
						//the following won't be used
						//		case DbType.SByte: return "0";
						//		case DbType.UInt16: return "0";
						//		case DbType.UInt32: return "0";
						//		case DbType.UInt64: return "0";
					default: return "null";
				}
			}
		}
		
		/// <summary>
		/// This method returns the default value from the database if it is available.  It returns null
		/// if no default value could be parsed.
		/// 
		/// NOTE: rudimentary support for default values with computations/functions is built in.  Right now th
		///   only supported function is getdate().  Any others can be added below if desired.
		/// </summary>
		/// <param name="column"></param>
		public string GetCSDefaultValueByType(DataObjectBase column)
		{
			if (column == null)
				return null;

			ExtendedProperty defaultValueProperty = column.ExtendedProperties["CS_Default"];
			if (defaultValueProperty == null)
				return null;			
				
			string defaultValue = null;
			
			#region Convert declarations
			bool boolConvert;
			byte byteConvert;
			decimal decimalConvert;
			double doubleConvert;
			float floatConvert;
			int intConvert;
			long longConvert;
			short shortConvert;
			DateTime dateConvert;
			Guid guidConvert; 
			XmlNode xmlNodeConvert;
			#endregion
	
			try
			{
				//Get Default Value 
				defaultValue = defaultValueProperty.Value.ToString();
				
				if (defaultValue == null || defaultValue.Trim().Length == 0)
					return null;
				
				// trim off the surrounding ()'s if they exist (SQL Server)
				while (defaultValue.StartsWith("(") && defaultValue.EndsWith(")") 
					|| defaultValue.StartsWith("\"") && defaultValue.EndsWith("\""))
				{
					defaultValue = defaultValue.Substring(1);
					defaultValue = defaultValue.Substring(0, defaultValue.Length - 1);
				}
				
				if (IsNumericType(column as ColumnSchema))
					defaultValue = defaultValue.TrimEnd('.');
					
				if (defaultValueProperty.DataType == DbType.String)
				{
					// probably a char type.  Let's remove the quotes so parsing is happy
					if (defaultValue.StartsWith("'") && defaultValue.EndsWith("'"))
					{
						defaultValue = defaultValue.Substring(1);
						defaultValue = defaultValue.Substring(0, defaultValue.Length - 1);
					}
		
					//this is probably a custom function, lets handle it sane-like
					if (defaultValue.Contains("()"))
					{
						if ( defaultValue.ToLower() == "getdate()" )
							defaultValue = "DateTime.Now";
						else if ( defaultValue.ToLower() == "newid()" )
							defaultValue = "new Guid()";
						else if ( defaultValue.ToLower() == "getutcdate()" )
							defaultValue = "DateTime.UtcNow";
						else
							return null;
					}
				}

				if (column.NativeType.ToLower() == "real")
				{
					floatConvert = float.Parse(defaultValue);
					if (defaultValue != null)
						return floatConvert.ToString() + "F";
					else
						return null;
				}
				else
				{
					DbType dataType = column.DataType;
					switch (dataType)
					{
						case DbType.AnsiString:
							if (defaultValue != null)
								return "\"" + defaultValue + "\"";
							else
								return null;
			
						case DbType.AnsiStringFixedLength:
							if (defaultValue != null)
								return "\"" + defaultValue + "\"";
							else
								return null;
			
						case DbType.String:
							if (defaultValue != null)
								return "\"" + defaultValue + "\"";
							else
								return null;
			
						case DbType.Boolean:
						
							if (defaultValue != null )
							{
								if (defaultValue == "1") return "true";
								if (defaultValue == "0") return "false";
								if (defaultValue.Trim().ToLower() == "yes") return "true";
								if (defaultValue.Trim().ToLower() == "no") return "false";
								if (defaultValue.Trim().ToLower() == "y") return "true";
								if (defaultValue.Trim().ToLower() == "n") return "false";
								
								boolConvert = bool.Parse(defaultValue);
								return boolConvert.ToString();
							}
							else
								return null;
			
						case DbType.StringFixedLength:
							if (defaultValue != null)
								return "\"" + defaultValue + "\"";
							else
								return null;
			
						case DbType.Guid:
							if (defaultValue == "new Guid()")
								return defaultValue;
								
							guidConvert = new Guid(defaultValue);
							if (defaultValue != null && guidConvert != null)
								return "new Guid(\"" + guidConvert.ToString() + "\")";
							else
								return null;
						case DbType.Xml:
								return null;			
			
						//Answer modified was just 0
						case DbType.Binary:
							return null;
			
						//Answer modified was just 0
						case DbType.Byte:
							if (defaultValue != null )
							{
								byteConvert = byte.Parse(defaultValue);
								return "(byte)" + byteConvert.ToString();
							}
							else
								return null;
			
						case DbType.Currency:
							if (defaultValue != null)
							{
								decimalConvert = decimal.Parse(defaultValue);
								return decimalConvert.ToString() + "m";
							}
							else
								return null;
			
						case DbType.Date:
						case DbType.DateTime:
						
							if (defaultValue == "DateTime.Now")
								return "DateTime.Now";
							if (defaultValue == "DateTime.UtcNow")
								return "DateTime.UtcNow";

							dateConvert = DateTime.Parse(defaultValue);
							if (defaultValue != null )
								return "new DateTime(\"" + dateConvert.ToString() + "\")";
					
							return null;
						
						case DbType.Decimal:
							if (defaultValue != null)
							{
								decimalConvert = decimal.Parse(defaultValue);
								return decimalConvert.ToString() + "m";
							}
							else
								return null;
			
						case DbType.Double:
							if (defaultValue != null)
							{
								floatConvert = float.Parse(defaultValue);
								return floatConvert.ToString() + "f";
							}
							else
								return null;
			
						case DbType.Int16:
							if (defaultValue != null)
							{
								shortConvert = short.Parse(defaultValue);
								return "(short)" + shortConvert.ToString();
							}
							else
								return null;
			
						case DbType.Int32:
							if (defaultValue != null )
							{
								intConvert = int.Parse(defaultValue);
								return "(int)" + intConvert.ToString();
							}
							else
								return null;
			
						case DbType.Int64:
							if (defaultValue != null)
							{
								longConvert = long.Parse(defaultValue);
								return "(long)" + longConvert.ToString();
							}
							else
								return null;
			
						case DbType.Object:
							return null;
			
						case DbType.Single:
							if (defaultValue != null)
							{
								floatConvert = float.Parse(defaultValue);
								return floatConvert.ToString() + "F";
							}
							else
								return null;
			
						case DbType.Time:
							if (defaultValue == "DateTime.Now")
								return defaultValue;
							else if (defaultValue != null)
							{
								dateConvert = DateTime.Parse(defaultValue);
								return "DateTime.Parse(\"" + dateConvert.ToString() + "\")";
							}
							return null;
						case DbType.VarNumeric:
							if (defaultValue != null)
							{	
								decimalConvert = decimal.Parse(defaultValue);
								return decimalConvert.ToString();
							}
							else
								return null;
						//the following won't be used
						//		case DbType.SByte: return "0";
						//		case DbType.UInt16: return "0";
						//		case DbType.UInt32: return "0";
						//		case DbType.UInt64: return "0";
						default: return null;
					}
				}
			}
			catch{}
			return null;
		}
		
		public bool IsLengthType(DataObjectBase column)
		{
			DbType dataType = column.DataType;
			switch (dataType)
			{
				case DbType.AnsiString: 
				case DbType.AnsiStringFixedLength: 
				case DbType.String: 
				case DbType.StringFixedLength: 
				case DbType.Binary: 
					return true;
					
				default: 
						return false;
			}
		}

		/// <summary>
		/// Determines whether base DataObjectBase is a string type
		/// </summary>
		public bool IsStringType(DataObjectBase column)
		{
			DbType dataType = column.DataType;
			switch (dataType)
			{
				case DbType.AnsiString: 
				case DbType.AnsiStringFixedLength: 
				case DbType.String: 
				case DbType.StringFixedLength: 
					return true;
					
				default: 
						return false;
			}
		}
		
		/// <summary>
		/// Determines whether base DataObjectBase is a string type, and not a blob column of text or ntext
		/// </summary>
		public bool CanCheckLength(DataObjectBase column)
		{
			switch (column.DataType)
			{
				case DbType.AnsiString: 
				case DbType.AnsiStringFixedLength: 
				case DbType.String: 
				case DbType.StringFixedLength: 
					return 
					(
						column.NativeType != "text" && 
						column.NativeType != "ntext" && 
						column.Size > 0
					);
					
				default: 
						return false;
			}
		}
		
		
		/// <summary>
		/// Returns true if the column is represented as a reference data type
		/// rather than a value type. In other words, the C# code can set a
		/// column of this data type to \"null\"
		/// </summary>
		public bool IsCSReferenceDataType(DataObjectBase column)
		{
			if (column.NativeType.ToLower() == "real")
				return false;
			else if (column.NativeType.ToLower() == "xml")
				return true;
			else
			{
				DbType dataType = column.DataType;
				switch (dataType)
				{
					case DbType.AnsiString: 
					case DbType.AnsiStringFixedLength: 
					case DbType.String: 
					case DbType.StringFixedLength: 
					case DbType.Binary: 
						return true;
						
					case DbType.Boolean: 
					case DbType.Guid: 
					case DbType.Byte:
					case DbType.Currency: 
					case DbType.Date: 
					case DbType.DateTime: 
					case DbType.Decimal: 
					case DbType.Double:
					case DbType.Int16: 
					case DbType.Int32: 
					case DbType.Int64: 
					case DbType.Object: 
					case DbType.Single: 
					case DbType.Time:
					case DbType.VarNumeric:
						return false;
						
					default: 
						return false;
				}
			}
		}

		
		/// <summary>
		/// Get a mock value for a given data type. Used by the unit test classes.
		/// </summary>
		/// <param name="column">Data type for which to get the default value.</param>
		/// <param name="stringValue">a mock string value.</param>
		/// <param name="bValue">a mock boolean value.</param>
		/// <param name="guidValue">a mock Guid value.</param>
		/// <param name="numValue">a mock numeric value.</param>
		/// <param name="dtValue">a mock datetime value.</param>
		/// <returns>A string representation of the default value.</returns>
		public string GetCSMockValueByType(DataObjectBase column, string stringValue, bool bValue, Guid guidValue, int numValue, DateTime dtValue)
		{	
			if (column.NativeType.ToLower() == "real")
				return numValue.ToString() + "F";
			else if (column.NativeType.ToLower() == "xml")
			{
				return "\"" + "<TEST></TEST>" + "\"";
			}	
			else
			{
				switch (column.DataType)
				{
					case DbType.AnsiString: 
						return "\"" + stringValue + "\"";
						
					case DbType.AnsiStringFixedLength: 
					return "\"" + stringValue + "\"";
					
					case DbType.String: 
						return "\"" + stringValue + "\"";
						
					case DbType.Boolean: 
						return bValue.ToString().ToLower();
					
					case DbType.StringFixedLength: 
						return "\"" + stringValue + "\"";
						
					case DbType.Guid: 
						return "new Guid(\"" + guidValue.ToString() + "\")"; 
					
					
					//Answer modified was just 0
					case DbType.Binary: 
						return "new byte[] {" + numValue.ToString() + "}";
					
					//Answer modified was just 0
					case DbType.Byte:
						return "(byte)" + numValue.ToString() + "";
						//return "{ 0 }";
					
					case DbType.Currency: 
						return numValue.ToString();
					
					case DbType.Date: 
						return string.Format("new DateTime({0}, {1}, {2}, 0, 0, 0, 0)", dtValue.Date.Year, dtValue.Date.Month, dtValue.Date.Day);
					
					case DbType.DateTime: 
						return string.Format("new DateTime({0}, {1}, {2}, {3}, {4}, {5}, {6})", dtValue.Year, dtValue.Month, dtValue.Day, dtValue.Hour, dtValue.Minute, dtValue.Second, dtValue.Millisecond);
					
					case DbType.Decimal: 
						return numValue.ToString() + "m";
						//return "0M";
						//return "0.0M";
					
					case DbType.Double: 
						return numValue.ToString() + ".0f";
					
					case DbType.Int16: 
						return "(short)" + numValue.ToString();
						
					case DbType.Int32: 
						return "(int)" + numValue.ToString();
						
					case DbType.Int64: 
						return "(long)" + numValue.ToString();
					
					case DbType.Object: 
						return "null";
					
					case DbType.Single: 
						return numValue.ToString() + "F";
					
					//case DbType.Time: return "DateTime.MaxValue";
					case DbType.Time: 
						return string.Format("new DateTime({0}, {1}, {2}, {3}, {4}, {5}, {6})", dtValue.Year, dtValue.Month, dtValue.Day, dtValue.Hour, dtValue.Minute, dtValue.Second, dtValue.Millisecond);
						
					case DbType.VarNumeric: 
						return numValue.ToString();
						//the following won't be used
						//		case DbType.SByte: return "0";
						//		case DbType.UInt16: return "0";
						//		case DbType.UInt32: return "0";
						//		case DbType.UInt64: return "0";
					default: return "null";
				}
			}
		}
		
		
		/// <summary>
		/// Generates a random number between the given bounds.
		/// </summary>
		/// <param name="min">lowest bound</param>
		/// <param name="max">highest bound</param>
		public int RandomNumber(int min, int max)
		{
			Random random = new Random();
			return random.Next(min, max); 
		}
		
		public string RandomString(ViewColumnSchema column, bool lowerCase)
		{
			//Debugger.Break();
			int size = 2; // default size
			
			// calculate maximum size of the field
			switch (column.DataType)
			{				
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				{
					if (column.NativeType != "text" && column.NativeType != "ntext")
					{
						if (column.Size > 0)
						{
							size = column.Size;
						}
						
						if (size > 1000)
						{
							size = 1000;	
						}
					}
					break;
				}
			}
			
			return RandomString((size/2) -1, lowerCase);
		}

		public string RandomString(ColumnSchema column, bool lowerCase)
		{
			//Debugger.Break();
			int size = 2; // default size
			
			// calculate maximum size of the field
			switch (column.DataType)
			{				
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				{
					if (column.NativeType != "text" && column.NativeType != "ntext")
					{
						if (column.Size > 0)
						{
							size = column.Size;
						}
						
						if (size > 1000)
						{
							size = 1000;	
						}
					}
					break;
				}
			}
			
			return RandomString((size/2) -1, lowerCase);
		}
		
		/// <summary>
		/// Generates a random string with the given length
		/// </summary>
		/// <param name="size">Size of the string</param>
		/// <param name="lowerCase">If true, generate lowercase string</param>
		/// <returns>Random string</returns>
		/// <remarks>Mahesh Chand  - http://www.c-sharpcorner.com/Code/2004/Oct/RandomNumber.asp</remarks>
		public string RandomString(int size, bool lowerCase)
		{
			StringBuilder builder = new StringBuilder();
			Random random = new Random(size);
			char ch ;
			for(int i=0; i<size; i++)
			{
				ch = Convert.ToChar(Convert.ToInt32(26 * random.NextDouble() + 65)) ;
				builder.Append(ch); 
			}
			if(lowerCase)
			return builder.ToString().ToLower();
			return builder.ToString();
		}


		/// <summary>
		/// Get the Sql Data type of a column
		/// </summary>
		/// <param name="column">Column for which to get the type</param>
		/// <returns>String representing the SQL data type</returns>
		public string GetSqlDbType(DataObjectBase column)	
		{
			switch (column.NativeType)
			{
				case "bigint": return "BigInt";
				case "binary": return "Binary";
				case "bit": return "Bit";
				case "char": return "Char";
				case "datetime": return "DateTime";
				case "decimal": return "Decimal";
				case "float": return "Float";
				case "image": return "Image";
				case "int": return "Int";
				case "money": return "Money";
				case "nchar": return "NChar";
				case "ntext": return "NText";
				case "numeric": return "Decimal";
				case "nvarchar": return "NVarChar";
				case "real": return "Real";
				case "smalldatetime": return "SmallDateTime";
				case "smallint": return "SmallInt";
				case "smallmoney": return "SmallMoney";
				case "sql_variant": return "Variant";
				case "sysname": return "NChar";
				case "text": return "Text";
				case "timestamp": return "Timestamp";
				case "tinyint": return "TinyInt";
				case "uniqueidentifier": return "UniqueIdentifier";
				case "varbinary": return "VarBinary";
				case "varchar": return "VarChar";
				default: return "__UNKNOWN__" + column.NativeType;
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="fkey"></param>
		public string FKColumnName(TableKeySchema fkey)
		{
			StringBuilder Name = new StringBuilder();
			for(int x=0;x < fkey.ForeignKeyMemberColumns.Count;x++)
			{
				Name.Append( GetPropertyName(fkey.ForeignKeyMemberColumns[x].Name) );
			}
			return Name.ToString();
		}
		
		
		
		/// <summary>
		/// Build and return a concatened list of columns that are contained in the specified index. (ex: Column1Column2() )
		/// </summary>
		/// <param name="index"> the index instance.</param>
		public string IXColumnName(IndexSchema index)
		{
			StringBuilder Name = new StringBuilder();
			for(int x=0;x < index.MemberColumns.Count;x++)
			{
				Name.Append( GetPropertyName(index.MemberColumns[x].Name) );
			}
			return Name.ToString();
		}
		
		/// <summary>
		/// Build and return a comma separated list of column contained in the specified index. (ex: column1, column2 )
		/// </summary>
		/// <param name="index"> the index instance.</param>
		public string IXColumnNames(IndexSchema index)
		{
			StringBuilder Name = new StringBuilder();
			for(int x=0;x < index.MemberColumns.Count;x++)
			{
				if ( x > 0 )
					Name.Append(", ");

				Name.Append( GetPrivateName(index.MemberColumns[x].Name) );
			}
			return Name.ToString();
		}
		
		/// <summary>
		/// Build and return a concatened list of columns that are contained in the specified key. (ex: Column1Column2() )
		/// </summary>
		/// <param name="keys"> the key instance.</param>
		public string GetKeysName(ColumnSchemaCollection keys)
		{	
			StringBuilder Name = new StringBuilder();
			for(int x=0; x < keys.Count;x++)
			{
				Name.Append( GetPropertyName(keys[x].Name) );
			}
			return Name.ToString();
		}

		/// <summary>
		/// Indicates if the key is containing more than one column.
		/// </summary>
		/// <param name="keys"> <c>true</c> if > 1; false otherwise.</param>
		public bool IsMultiplePrimaryKeys(ColumnSchemaCollection keys)
		{
			if(keys.Count > 1)
				return true;
			return false;
		}
		
		public bool HasCommonColumn(ColumnSchemaCollection cols1, ColumnSchemaCollection cols2)
		{
			foreach(ColumnSchema col1 in cols1)
			{
				foreach(ColumnSchema col2 in cols2)
				{
					if (col1.Equals(col2))
					return true;
				}	
			}
			return false;
		}
		
		/// <summary>
		/// Return a ColumnSchemaCollection of columns that are contained in all of the tables
		/// </summary>
		/// <param name="sourceTables">Tables to search.</param>
		public ColumnSchemaCollection GetCommonTableColumns(TableSchemaCollection sourceTables)
		{
			ColumnSchemaCollection commonColumns = new ColumnSchemaCollection();
			
			if (sourceTables.Count > 0)
			{
				foreach(ColumnSchema col in sourceTables[0].Columns)
				{
					bool isInEveryTable = true;
					
					//System.Diagnostics.Debug.Write (col.Name + ":" + Environment.NewLine);
					
					for (int k = 1; k < sourceTables.Count ; k++)
					{
						TableSchema table = sourceTables[k];
						bool isInThisTable = false;
							
						// scan each column of this table to find this column
						foreach (ColumnSchema tCol in table.Columns)
						{					
							if (col.Name == tCol.Name && col.SystemType == tCol.SystemType && col.AllowDBNull == tCol.AllowDBNull)
							{
								isInThisTable= true;
							}
						}
						
						//System.Diagnostics.Debug.Write ("\t" + table.Name + " : " + isInThisTable.ToString() + Environment.NewLine);					
						isInEveryTable = isInEveryTable && isInThisTable;			
					}
										
					// If this column is present in every table, put it in the IEnity interface.
					if (isInEveryTable)
					{
						commonColumns.Add(col);
					}
				}
				
			}
			return commonColumns;
		}
		
		/// <summary>
		/// Check a table for enum eligibility
		/// </summary>
		/// <param name="table">the table instance to check.</param>
		/// <exception name="ApplicationException"/>
		public void ValidForEnum(TableSchema table)
		{
			#region "Primary key validation"
			
			// No primary key
			if (!HasPrimaryKey(table))
			{
				throw new ApplicationException("table has no primary key.");
			}
			
			// Multiple column in primary key
			if (table.PrimaryKey.MemberColumns.Count != 1)
			{
				throw new ApplicationException("table primary key contains more than one column.");
			}
			
			// Primary key column is not an integer
			if (!isIntXX(table.PrimaryKey.MemberColumns[0]))
			{
				throw new ApplicationException("table primary key column is not an integer. (used for enum value)");
			}
			
			#endregion
			
			#region "Second column must be a string"
			
			// The table must have 2 columns at least
			if (table.Columns.Count < 2)
			{
				throw new ApplicationException("table must at least contains two columns, an integer primary key, and a string.");
			}
			
			// The second column must be a string (char, varchar) 
			if (table.Columns[1].SystemType != typeof(string))
			{
				throw new ApplicationException("table 2nd column must be a string.");
			}
						
			// The second column must have a unique constraint (index with unique constraint)
			if (!table.Columns[1].IsUnique)
			{
				throw new ApplicationException("table 2nd column must be unique (used for the enum label).");
			}
									
			#endregion
			
			#region "Check relations"
			// the table mustn't have foreign relation
			//if (table.ForeignKeys.Count > 0)
			//{
			//	throw new ApplicationException("table cannot have relations where it is the foreign table.");
			//}
			
			// relation with table as primary key can only be on the first column 
			foreach(TableKeySchema key in table.PrimaryKeys)
			{
				if (key.PrimaryKeyMemberColumns[0].Name != table.Columns[0].Name || key.PrimaryKeyMemberColumns.Count > 1)
				{
					throw new ApplicationException("table cannot have relations where it is the foreign table.");
				}
				
				
			}
			
			#endregion
		}
	
		/// <summary>
		/// Indicates if the output rowset of the command is compliant with the table rowset.
		/// </summary>
		/// <param name="command">The stored procedure</param>
		/// <param name="table">The table</param>
		public bool IsMatching(CommandSchema command, TableSchema table)
		{
			try
			{
				if (command.CommandResults.Count == 0)
					return false;
					
				if (command.CommandResults[0].Columns.Count != table.Columns.Count)
				{
					return false;
				}
				
				for(int i=0; i<table.Columns.Count; i++)
				{
					if (IsComputed(table.Columns[i]))
						continue;
				
					if (!command.CommandResults[0].Columns.Contains(table.Columns[i].Name.ToLower()))
					{
						return false;
					}
					
					// manage the xml column type separately
					if ( table.Columns[i].NativeType == "xml" && (command.CommandResults[0].Columns[i].NativeType == "sql_variant" || command.CommandResults[0].Columns[i].NativeType == "ntext"))
					{
						continue;
					}
					else if (!SqlTypesAreEquivalent(command.CommandResults[0].Columns[i].NativeType, table.Columns[i].NativeType))
					{
						return false;
					}
				}
				return true;
			}	
			catch(Exception )
			{
				System.Diagnostics.Debug.WriteLine("Procedure Threw Exception: " + command.Name);
				return false;	
			}
		}
		
		/// <summary>
		/// Indicates if the output rowset of the command is compliant with the view rowset.
		/// </summary>
		/// <param name="command">The stored procedure</param>
		/// <param name="view">The view</param>
		public bool IsMatching(CommandSchema command, ViewSchema view)
		{
			try
			{
				if (command.CommandResults.Count == 0)
					return false;
					
				if (command.CommandResults[0].Columns.Count != view.Columns.Count)
				{
					return false;
				}
				
				for(int i=0; i<view.Columns.Count; i++)
				{	
					if (!command.CommandResults[0].Columns.Contains(view.Columns[i].Name.ToLower()))
					{
						return false;
					}
					
					// manage the xml column type separately
					if ( view.Columns[i].NativeType == "xml" && (command.CommandResults[0].Columns[i].NativeType == "sql_variant" || command.CommandResults[0].Columns[i].NativeType == "ntext"))
					{
						continue;
					}
					else if (!SqlTypesAreEquivalent(command.CommandResults[0].Columns[i].NativeType, view.Columns[i].NativeType))
					{
						return false;
					}
				}
				return true;
			}	
			catch(Exception  )
			{
				System.Diagnostics.Debug.WriteLine("!!ERROR!! - Procedure Threw Exception: " + command.Name);
				return false;	
			}
		}
		
		/// <summary>
		/// Compares two sql types and determines if they are syntax equivalent.
		/// </summary>
		/// <param name="type1">The first sql type to compare.</param>
		/// <param name="type2">The second sql type to compare.</param>
		public bool SqlTypesAreEquivalent(string type1, string type2)
		{
			type1 = type1.ToLower();
			type2 = type2.ToLower();
			
			if ((type1 == "numeric" && type2 == "decimal") || (type2 == "numeric" && type1 == "decimal"))
			{
				return true;
			}
			else if ((type1 == "varchar" && type2 == "nvarchar") || (type2 == "varchar" && type2 == "nvarchar"))
			{
					return true;   
			}
			return (type1 == type2);
		}
		

		public bool isIntXX(DataObjectBase column)
		{
			bool result = false;

			for(int i = 0; i < aIntegerDbTypes.Length; i++)
			{
				if (aIntegerDbTypes[i] == column.DataType) result=true;
			}
			
			return result;
		}

		/// <summary>
		///	Indicates if a column is an int.
		/// </summary>
		/// <author>ab</author>
		/// <date>01/26/05</date>
		public bool isIntXX(ColumnSchema column)
		{
			bool result = false;

			for(int i = 0; i < aIntegerDbTypes.Length; i++)
			{
				if (aIntegerDbTypes[i] == column.DataType) result=true;
			}
			
			return result;		
		}
		
		#region Long Line Wrapping Handling
		// EntityBase.cst and EntityCollectionBase.cst render constructs with every column
		// in a table as arguments.  For very long tables, the C# compliler complains with
		// "CS1034: Compiler limit exceeded: Line cannot exceed 2046 characters"
		// Data warehouses can have very long tables.
		
		/// <summary>
		/// Stores the current column were are at.
		/// </summary>
		private int wrapCurrentColumn;
		
		/// <summary>
		/// Inititalizes the line wrapping to column 50.
		/// </summary>
		protected void WrapInit()
		{
			wrapCurrentColumn = 50;
		}

		/// <summary>
		/// Increment the wrap column by the normal amount.
		/// </summary>
		/// <remarks>
		/// This is not meant to be exact, rough estimate only.  This is called by
		/// EntityBase.cst and EntityCollectionBase.cst.
		/// </remarks>
		protected void WrapIncr(ColumnSchema column)
		{
			wrapCurrentColumn += GetCSType(column).Length + 1 /*space*/ + column.Table.Name.Length + GetPropertyName(column.Name).Length + 2; /*comma, space*/;
		}

		/// <summary>
		/// Wrap the line of text if the line exceeds 130 columns long.
		/// </summary>
		/// <remarks>
		/// CS1034: Compiler limit exceeded: Line cannot exceed 2046 characters
		/// </remarks>
		protected void WrapLine(int indentLevel)
		{
			if ( wrapCurrentColumn >= 130 ) // keep this reasonable, people do like printing code too
			{
				Response.Write(Environment.NewLine);
				for (int i = 0; i < indentLevel; i++)
					Response.Write("\t");
				wrapCurrentColumn = indentLevel * 4; // most people use 4 space tabs
			}
		}
		#endregion
		
		#region Column Comparer
		// [ab 013105] column name sorting comparer
		public class columnSchemaComparer : IComparer  
		{
	      	int IComparer.Compare( Object x, Object y )  
			{
				if (x is ColumnSchema && y is ColumnSchema)
	          		return( (new CaseInsensitiveComparer()).Compare( ((ColumnSchema)x).Name,  ((ColumnSchema)y).Name ) );
					
				throw new ArgumentException("one or both object(s) are not of type ColumnSchema");
			}
				
      	}
      	#endregion
		
		#region Utils
		
		#region Recursive Copy Code
		///<summary>
		/// Safely Copies all files from one directory to another
		///</summary>
		public void SafeCopyAll(string path, string destination) 
		{ 
			System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(path); 
			SafeCopyAll(dir, destination); 
		} 
		
		///<summary>
		/// Safely Copies all files from one directory to another
		///</summary>
		public void SafeCopyAll(System.IO.DirectoryInfo dir, string destination) 
		{ 
			string path; 
			foreach ( System.IO.FileInfo f in dir.GetFiles() ) 
			{ 
				f.CopyTo(System.IO.Path.Combine(destination, f.Name), true); 
			} 
			
			foreach ( System.IO.DirectoryInfo d in dir.GetDirectories() ) 
			{ 
				path = System.IO.Path.Combine(destination, d.Name); 
				SafeCreateDirectory(path); 
				SafeCopyAll(d, path); 
			} 
		} 
		
		/// <summary>
		/// Copy the specified file.
		/// </summary>
		public void SafeCreateDirectory(string path)
		{
			if (!Directory.Exists(path))
			{
				Directory.CreateDirectory(path);
			}
		}
		
		/// <summary>
		/// Copy the specified file.
		/// </summary>
		public void SafeCopyFile(string path, string destination)
		{
			FileInfo file1 = new FileInfo(path);
			file1.CopyTo(destination, true);
		}

		#endregion 
		
		#region Recursive Get Files
		///<summary>
		/// Get's all available files with the proper extensions for inclusion into a project
		/// NOTE: Not Tested
		///</summary>
		public System.Collections.IList  GetFiles(string path) 
		{ 
				System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(path); 
			
			return GetFiles(dir, new System.Collections.ArrayList()); 
		} 
		
		///<summary>
		/// Get's all available files with the proper extensions for inclusion into a project
		/// NOTE: Not Tested
		///</summary>
		public System.Collections.IList GetFiles(System.IO.DirectoryInfo dir, System.Collections.ArrayList files) 
		{ 
			string path; 
			foreach (System.IO.FileInfo f in dir.GetFiles() ) 
			{
				if (Array.IndexOf(IncludeExtensions, f.Extension) >= 0)
					files.Add(f);
			} 
			
			foreach (System.IO.DirectoryInfo d in dir.GetDirectories() ) 
			{ 
				path = System.IO.Path.Combine(dir.FullName, d.Name); 
				files.AddRange(GetFiles(d, files)); 
			} 
			
			return files;
		} 
		#endregion 
		
      	#region File Extensions
		private static string[] IncludeExtensions = new string[]{".arj", ".asa",".asax", ".ascx", ".asmx", ".ashx", ".asp", ".aspx", ".au", ".avi", ".bat", ".bmp", 
													  ".cab", ".chm", ".com", ".config", ".cs", ".css", ".disco", ".dll", ".doc", 
													  ".exe", ".png", ".gif", ".hlp", ".htm", ".html", ".jpg", ".inc", ".ini", 
													  ".log", ".mdb", ".mid", ".midi", ".mov", ".mp3", ".mpg", ".mpeg", ".fla", ".swf",
													  ".cur", ".ico", ".resx", ".jsl", ".cd", ".rdlc", ".js", ".vbs", ".wsf", ".master", 
													  ".skin", ".pdf", ".ppt", ".psd", ".sys", ".txt", ".tif", ".vb", ".vbs", ".vsdisco", 
													  ".wav", ".wri", ".xls", ".xml", ".xsd", ".xslt", ".zip", ".rpt", ".java",
													  ".settings", ".cfm", ".cfmx", ".jsp", ".mdf", ".ldf" };
													
		#endregion 
		
		#endregion 
		
		#region Custom Stored Procedures
		
		public IDictionary GetCustomProcedures(TableSchema table)
		{
			return GetCustomProcedures(table.Name, table.Database.Commands);
		}
		
		public IDictionary GetCustomProcedures(ViewSchema view)
		{
			return GetCustomProcedures(view.Name, view.Database.Commands);
		}
		
		public IDictionary GetCustomProcedures(string objectName, CommandSchemaCollection allCommands)
		{		
			string customPrefix = string.Format(CustomProcedureStartsWith, objectName, ProcedurePrefix);
			IDictionary procs = new Hashtable();
			string customName;
			bool discover = true;
			System.Collections.ArrayList invalids = new System.Collections.ArrayList();
			string current = string.Empty;
			
			while(discover)
			{
				try
				{
					procs.Clear();
					foreach ( CommandSchema proc in allCommands )
					{
						if (proc == null)
							continue;
							
						current = proc.Name;
						if (invalids.Contains(proc.Name))
							continue;
							
						if ( proc.Name.ToLower().StartsWith(customPrefix.ToLower()) )
						{
							customName = proc.Name.Substring(customPrefix.Length);
							procs.Add(customName, proc);
						}
					}
					discover = false;
				}
				catch(Exception  )
				{
					System.Diagnostics.Debug.WriteLine("Stored Procedure Command Failed: " + current);	
					invalids.Add(current);
				}	
			}
		
			return procs;
		}

		public string GetReturnCustomProcReturnType(CustomNonMatchingReturnType nonMatchingReturnType, SchemaExplorer.TableSchema table, SchemaExplorer.CommandSchema command)
		{
			string returnType = "void";
			try
			{
				if (IsMatching(command, table))
				{
					returnType = GetCollectionClassName(table.Name);
				}
				else if (command.CommandResults != null && command.CommandResults.Count > 0)
				{
					returnType = nonMatchingReturnType.ToString();				
				}
			}
			catch(Exception  )
			{
				System.Diagnostics.Debug.WriteLine("!!ERROR!!: Could not get return type from " + command.Name);	
			}	
			return returnType;	
		}

		
		public string GetReturnCustomProcReturnType(CustomNonMatchingReturnType nonMatchingReturnType, SchemaExplorer.ViewSchema view, SchemaExplorer.CommandSchema command)
		{
			string returnType = "void";
			try
			{
				if (IsMatching(command, view))
				{
					returnType = GetViewCollectionClassName(view.Name);
				}
				else if (command.CommandResults != null && command.CommandResults.Count > 0)
				{
					returnType = nonMatchingReturnType.ToString();
				}
			}
			catch(Exception exc)
			{
				System.Diagnostics.Debug.WriteLine("!!ERROR!!: Could not get return type from " + command.Name);	
			}	
			
			return returnType;	
		}

		public string GetCustomVariableName(string paramName, SchemaExplorer.CommandSchema command)
		{
			int c = 1;
			try
			{
				for(;c < command.Database.Commands.Count; c++)
				{
					CommandSchema tmp = command.Database.Commands[c];
					
					if (tmp.Name == command.Name)
						break;
				}
			} catch{}
			
			return string.Format("sp{1}_{0}", GetPropertyName(paramName), c);
		}
		
		#endregion 
      	
		#region Execute sql file

		public void ExecuteSqlInFile(string pathToScriptFile, string connectionString ) 
		{
			SqlConnection connection;

			StreamReader _reader			= null;

			string sql	= "";

			if( false == System.IO.File.Exists( pathToScriptFile )) 
			{
				throw new Exception("File " + pathToScriptFile + " does not exists");
			}
			using( Stream stream = System.IO.File.OpenRead( pathToScriptFile ) ) 
			{
				_reader = new StreamReader( stream );

				connection = new SqlConnection(connectionString);

				SqlCommand	command = new SqlCommand();

				connection.Open();
				command.Connection = connection;
				command.CommandType	= System.Data.CommandType.Text;

				while( null != (sql = ReadNextStatementFromStream( _reader ) )) 
				{
					command.CommandText = sql;

					command.ExecuteNonQuery();
				}

				_reader.Close();
			}
			connection.Close();			
		}


		private static string ReadNextStatementFromStream( StreamReader _reader ) 
		{			
			StringBuilder sb = new StringBuilder();

			string lineOfText;

			while(true) 
			{
				lineOfText = _reader.ReadLine();
				if( lineOfText == null ) 
				{

					if( sb.Length > 0 ) 
					{
						return sb.ToString();
					}
					else 
					{
						return null;
					}
				}

				if( lineOfText.TrimEnd().ToUpper() == "GO" ) 
				{
					break;
				}
			
				sb.Append(lineOfText + Environment.NewLine);
			}

			return sb.ToString();
		}

		#endregion
		
		#region Children Collections
		
		/////////////////////////////////////////////////////////////////////////////////////
		/// Begin Children Collection 
		/////////////////////////////////////////////////////////////////////////////////////
		
		///<summary>
		///  An ArrayList of all the child collections for this table.
		///</summary>
		private System.Collections.ArrayList _collections = new System.Collections.ArrayList();
		
		///<summary>
		///  An ArrayList of all the properties rendered.  
		///  Eliminate Dupes through common junction tables and fk relationships
		///</summary>
		private System.Collections.Hashtable relationshipDictionary = new System.Collections.Hashtable();
		
		///<summary>
		///	Returns an array list of Child Collections of the object
		///</summary>
		public System.Collections.Hashtable GetChildrenCollections(SchemaExplorer.TableSchema table, SchemaExplorer.TableSchemaCollection tables) 
		{
			//System.Diagnostics.Debugger.Break();
			
			///  An ArrayList of all the child collections for this table.
			System.Collections.Hashtable _collections = new System.Collections.Hashtable();
		
			CurrentTable = table.Name;
			
			//Check Cache
			if( relationshipDictionary[table.Name] == null )
			{
				relationshipDictionary[table.Name] = _collections;
			}
			else 
			{
				return relationshipDictionary[table.Name] as System.Collections.Hashtable;
			}
	
			//Provides Informatoin about the foreign keys
			SchemaExplorer.TableKeySchemaCollection fkeys = table.ForeignKeys;
			
			//Provides information about the indexes contained in the table. 
			IndexSchemaCollection indexes = table.Indexes;
			
			// Begin -- Fix for TableSchema.PrimaryKeys issue 2006-09-21 mwerner
			// Fix to generate code for recursive relations for a table
			
			// All keys that relate to this table
			TableKeySchemaCollection primaryKeyCollection = new TableKeySchemaCollection();
			primaryKeyCollection.AddRange(table.PrimaryKeys);
			
			// Add missing item to primaryKeyCollection 			
			foreach(TableKeySchema keyschema in fkeys)
			{
				if (keyschema.ForeignKeyTable.Equals(table) && keyschema.PrimaryKeyTable.Equals(table))
				{
					bool found = false;
					
					foreach(TableKeySchema primaryKey in primaryKeyCollection)
					{
						if (keyschema.Equals(primaryKey))
						{
							found = true;
							break;
						}
					}
					if (!found)
					{
						primaryKeyCollection.Add(keyschema);
					}					
				}
			}
			
			// End -- Fix for TableSchema.PrimaryKeys issue 2006-09-21 mwerner
			
			
			//for each relationship
			foreach(TableKeySchema keyschema in primaryKeyCollection)
			{
				// add the relationship only if the linked table is part of the selected tables (ie: omit tables without primary key)
				if (!tables.Contains(keyschema.ForeignKeyTable.Owner, keyschema.ForeignKeyTable.Name))
				{	//BYDAN-RECURSIVO				
					//continue;				
				}
				if (IsRelationOneToOne(keyschema))
				{
					//System.Windows.Forms.MessageBox.Show("1 a 1");
					CollectionInfo collectionInfo = new CollectionInfo();

					#region Additional 1:1 meta-data properties
					collectionInfo.PkColNames = GetColumnNames(table.PrimaryKey.MemberColumns);
					collectionInfo.PrimaryTable = GetClassName(table);
					collectionInfo.SecondaryTable = GetClassName(keyschema.ForeignKeyTable);
					collectionInfo.SecondaryTablePkColNames = GetColumnNames(keyschema.ForeignKeyTable.PrimaryKey.MemberColumns);
					collectionInfo.CollectionRelationshipType = RelationshipType.OneToOne;			
					collectionInfo.CollectionName = GetCollectionPropertyName(collectionInfo.SecondaryTable);
					collectionInfo.CollectionTypeName = GetCollectionClassName(collectionInfo.SecondaryTable);
					collectionInfo.TableKey = keyschema;
					collectionInfo.CleanName = GetClassName(collectionInfo.SecondaryTable);
					collectionInfo.SecondaryTableSchema=keyschema.ForeignKeyTable;
					#endregion 

					//Key Name - Each collection should have a unique key namce
					collectionInfo.PkIdxName = keyschema.Name;
										
					// Method to fill this entity
					collectionInfo.GetByKeysName = "GetBy" + GetKeysName(keyschema.ForeignKeyMemberColumns);
					
					// Params to fill this entity
					collectionInfo.CallParams = GetFunctionRelationshipCallParameters(keyschema.PrimaryKeyMemberColumns);
					
					// Property String Name for a this relationship
					collectionInfo.PropertyName = GetClassName(collectionInfo.SecondaryTable);

					// Property String Name for a this relationship
					collectionInfo.PropertyNameUnique = GetClassName(collectionInfo.SecondaryTable);

					// Property Type for this relationship
					collectionInfo.TypeName = GetClassName(collectionInfo.SecondaryTable);
					
					// Field Variable String
					collectionInfo.FieldName = GetPrivateName(collectionInfo.SecondaryTable) + GetKeysName(keyschema.ForeignKeyMemberColumns);

					AddToCollection(_collections, collectionInfo);
				}
				//Add 1-N,N-1 relations
				else
				{
					CollectionInfo collectionInfo = new CollectionInfo();
					//System.Windows.Forms.MessageBox.Show("1 a M");
					
					#region Additional 1:N meta-data properties
					
					collectionInfo.PkColNames = GetColumnNames(table.PrimaryKey.MemberColumns);
					collectionInfo.PrimaryTable = GetClassName(table);
					collectionInfo.SecondaryTable = GetClassName(keyschema.ForeignKeyTable);
					collectionInfo.SecondaryTableSchema = keyschema.ForeignKeyTable;
					collectionInfo.SecondaryTablePkColNames = GetColumnNames(keyschema.ForeignKeyTable.PrimaryKey.MemberColumns);
					collectionInfo.CollectionRelationshipType = RelationshipType.OneToMany;
					collectionInfo.CollectionName = GetCollectionPropertyName(collectionInfo.SecondaryTable);
					collectionInfo.TableKey = keyschema;
					collectionInfo.CleanName = GetClassName(collectionInfo.SecondaryTable); 
					collectionInfo.CollectionTypeName = GetCollectionClassName(collectionInfo.SecondaryTable);
					
					#endregion 
					
					//Key Name - Each collection should have a unique key namce
					collectionInfo.PkIdxName = keyschema.Name;
					
					
					// Gets Method Calls
					if (IsForeignKeyCoveredByIndex(keyschema))
					{
						IndexSchema idx = GetIndexCoveringForeignKey(keyschema);
						
						// Method to fill this entity
						collectionInfo.GetByKeysName = "GetBy" + GetKeysName(idx.MemberColumns);

						// Params to fill this entity
						collectionInfo.CallParams = GetFunctionRelationshipCallParametersInKeyOrder(idx.MemberColumns, keyschema);
					}
					else
					{
						// Method to fill this entity
						collectionInfo.GetByKeysName = "GetBy" + GetKeysName(keyschema.ForeignKeyMemberColumns);
						
						// Params to fill this entity
						collectionInfo.CallParams = GetFunctionRelationshipCallParameters(keyschema.PrimaryKeyMemberColumns);
					}	

					// Usually the same as the property string
					collectionInfo.PropertyName = GetCollectionPropertyName(collectionInfo.SecondaryTable);

					// Usually the same as the property string
					collectionInfo.PropertyNameUnique = GetCollectionPropertyName(collectionInfo.SecondaryTable);

					// Usually the same as the property type
					collectionInfo.TypeName = GetCollectionClassName(collectionInfo.SecondaryTable);

					// Field Variable String
					collectionInfo.FieldName = GetPrivateName(collectionInfo.SecondaryTable) + GetKeysName(keyschema.ForeignKeyMemberColumns);

					AddToCollection(_collections, collectionInfo);
				}
			}

			//Add N-N relations
			foreach(SchemaExplorer.TableKeySchema key in primaryKeyCollection)
			{
				// Check that the key is related to a junction table and that this key relate a PK in this junction table
				
				//System.Windows.Forms.MessageBox.Show(table.Name+" M a M:"+key.ForeignKeyTable.Name);
				
				/*
				if(tables.Contains(key.ForeignKeyTable.Owner, key.ForeignKeyTable.Name))
				{
					System.Windows.Forms.MessageBox.Show(table.Name+" si 1");		
				}
				
				
				if(IsJunctionTable(key.ForeignKeyTable))
				{
					System.Windows.Forms.MessageBox.Show(table.Name+" si 2: IsJunctionTable:"+key.ForeignKeyTable.Name);		
				}
				else
				{
					System.Windows.Forms.MessageBox.Show("No 2:"+key.ForeignKeyTable.Name);
				}
				*/
				//BYDAN_NETTIERS
				
				/*
				if(IsJunctionKey(key))
				{
					System.Windows.Forms.MessageBox.Show(table.Name+" si 3: IsJunctionKey:"+key.ForeignKeyTable.Name);		
				}
				else
				{
					System.Windows.Forms.MessageBox.Show("No 3");
				}
				*/
				
				if ( tables.Contains(key.ForeignKeyTable.Owner, key.ForeignKeyTable.Name) &&  IsJunctionTable(key.ForeignKeyTable) && IsJunctionKey(key))
				{
					//System.Windows.Forms.MessageBox.Show("OK:  M a M");
					TableSchema junctionTable = key.ForeignKeyTable;
					
					// Search for the other(s) key(s) of the junction table' primary key
					foreach(TableKeySchema junctionTableKey in junctionTable.ForeignKeys)
					{				
						if ( tables.Contains(junctionTableKey.ForeignKeyTable.Owner, junctionTableKey.ForeignKeyTable.Name) && IsJunctionKey(junctionTableKey) && junctionTableKey.Name != key.Name )
						{
							//System.Windows.Forms.MessageBox.Show("OK2:  M a M");
							
							TableSchema secondaryTable = junctionTableKey.PrimaryKeyTable;
																			
							CollectionInfo collectionInfo = new CollectionInfo();
					
							#region Additional M:M meta-data 
							collectionInfo.PkColNames = GetColumnNames(table.PrimaryKey.MemberColumns);
							collectionInfo.PrimaryTable = GetClassName(table);
							collectionInfo.SecondaryTable = GetClassName(junctionTableKey.PrimaryKeyTable);
							collectionInfo.SecondaryTablePkColNames = GetColumnNames(junctionTableKey.PrimaryKeyTable.PrimaryKey.MemberColumns);
							collectionInfo.JunctionTableSchema = junctionTable;
							collectionInfo.SecondaryTableSchema = junctionTableKey.PrimaryKeyTable;
							collectionInfo.PrimaryTableSchema = table;
							collectionInfo.JunctionTable = GetClassName(junctionTable);
							collectionInfo.JunctionTablePkColNames = GetColumnNames(junctionTable.PrimaryKey.MemberColumns);
							collectionInfo.CollectionName = string.Format("{0}_From_{1}", GetCollectionPropertyName( collectionInfo.SecondaryTable), GetClassName(collectionInfo.JunctionTable)); //GetManyToManyName(GetCollectionClassName( collectionInfo.SecondaryTable), collectionInfo.JunctionTable);
							collectionInfo.CollectionTypeName = GetCollectionClassName( collectionInfo.SecondaryTable);
							collectionInfo.CollectionRelationshipType = RelationshipType.ManyToMany;
							collectionInfo.FkColNames = GetColumnNames(secondaryTable.PrimaryKey.MemberColumns);
							collectionInfo.TableKey = key;		
							collectionInfo.CleanName = string.Format(manyToManyFormat, GetClassName(collectionInfo.SecondaryTable), GetClassName(junctionTable.Name)); 
							#endregion 
							
							//Key Name - Each collection should have a unique key name
							collectionInfo.PkIdxName = junctionTableKey.Name;
							
							// Property Name
							collectionInfo.PropertyName = string.Format("{0}_From_{1}", GetCollectionPropertyName( collectionInfo.SecondaryTable), GetClassName(collectionInfo.JunctionTable)); 

							// Uninque Property Name, in case of conflict
							collectionInfo.PropertyNameUnique = string.Format("{0}_From_{1}", GetCollectionPropertyName( collectionInfo.SecondaryTable), GetClassName(collectionInfo.JunctionTable)); 

							// Field Variable String
							collectionInfo.FieldName = GetManyToManyName(key, GetCleanName(junctionTable.Name)).Substring(5);
							
							// Property/Field Type Name
							collectionInfo.TypeName = GetCollectionClassName(collectionInfo.SecondaryTable);
							
							//Method Params
							collectionInfo.CallParams = GetFunctionRelationshipCallParameters(table.PrimaryKey.MemberColumns);
							
							//Method Name
							collectionInfo.GetByKeysName = GetManyToManyName(key, GetCleanName(junctionTable.Name));
							
							AddToCollection(_collections, collectionInfo);
						}
					}
				}
			}// end N-N relations
			
			return _collections; 
		}
		
		public void AddToCollection(System.Collections.Hashtable _collections, CollectionInfo collectionInfo)
		{
			if(_collections[collectionInfo.PropertyName] == null)
			{
				_collections[collectionInfo.PropertyName] = collectionInfo;
			}
			else
			{
				CollectionInfo tmp = (CollectionInfo)_collections[collectionInfo.PropertyName];
				tmp.PropertyNameUnique = collectionInfo.PropertyName + tmp.GetByKeysName.Substring(3);

				collectionInfo.PropertyName += collectionInfo.GetByKeysName.Substring(3);
				collectionInfo.PropertyNameUnique += collectionInfo.GetByKeysName.Substring(3);

				if (_collections[collectionInfo.PropertyNameUnique] != null)
				{
					collectionInfo.PropertyName += "From" + GetPropertyName(collectionInfo.PkIdxName);
					collectionInfo.PropertyNameUnique += "From" + GetPropertyName(collectionInfo.PkIdxName);
				}
				_collections[collectionInfo.PropertyName] = collectionInfo;
			}
		}
		#endregion 
		
		#region CollectionInfo class
		///<summary>
		///	Child relationship structure information and their <see cref="RelationshipType" />
		/// to store in the ChildCollections ArrayList
		///</summary>
		public class CollectionInfo 
		{
			public string CleanName;
			public string[] PkColNames;
			public string PkIdxName;
			public string[] FkColNames;
			public string FkIdxName;
			public string PrimaryTable;
			public string SecondaryTable;
			public string[] SecondaryTablePkColNames;
			public string JunctionTable;
			public string[] JunctionTablePkColNames;
			public TableSchema JunctionTableSchema;
			public TableSchema SecondaryTableSchema;
			public TableSchema PrimaryTableSchema;
			public string CollectionName = string.Empty;
			public string CollectionTypeName = string.Empty;
			public string CallParams = string.Empty;
			public string PropertyName = string.Empty;
			public string PropertyNameUnique = string.Empty;
			public string TypeName = string.Empty;
			public string FieldName = string.Empty;
			public string GetByKeysName = string.Empty;
			public RelationshipType CollectionRelationshipType;	
			public TableKeySchema TableKey = null;
		}
		#endregion
			
		#region Relationships
		
		/// <summary>
		/// Gets params for a method based on the columns
		/// </summary>
		public string GetFunctionRelationshipCallParameters(ColumnSchemaCollection columns)
		{
			
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				if (i > 0)
					output.Append(", ");
				output.AppendFormat("entity.{0}", GetPropertyName(columns[i].Name));
			}
			return output.ToString();
		}

		/// <summary>
		/// Orders the params for a method, based on the ordered column list.  It's useful when dealing with the IsForeignKeyCoveredByIndex method, which the 
		/// columns may be in different orders
		/// </summary>
		public string GetFunctionRelationshipCallParametersInKeyOrder(ColumnSchemaCollection orderedColumns, TableKeySchema keySchema)
		{
			ColumnSchemaCollection unorderedColumns = keySchema.ForeignKeyMemberColumns;
			ColumnSchemaCollection entityColumns = keySchema.PrimaryKeyMemberColumns;
			
			StringBuilder output = new StringBuilder();
			for (int j = 0; j < orderedColumns.Count; j++)
			{
				for (int i = 0; i < unorderedColumns.Count; i++)
				{
					if (orderedColumns[j].Name.ToLower() != unorderedColumns[i].Name.ToLower())
						continue;
						
					if (j > 0)
						output.Append(", ");
						
					output.AppendFormat("entity.{0}", GetPropertyName(entityColumns[i].Name));
				}
			}
			return output.ToString();
		}
		

	
		///<summary>
		/// Workaround for when a method in the DAL is using Indexes to create the method
		/// instead of the keys
		/// Sometimes when working with composite primary keys, the orders could be 
		/// different in the index than in the key.
		/// So it could be Col1 Col2 in TableKeySchema.ForeignKeyMemberColumns 
		/// But in Index.MemberColumns it could be Col2, Col1
		///</summary>
		public ColumnSchemaCollection GetCorrectColumnOrder(TableKeySchema key)
		{		
			if(IsForeignKeyCoveredByIndex(key))
			{
				bool found = true;
				foreach (IndexSchema idx in key.PrimaryKeyTable.Indexes)
				{
					foreach(ColumnSchema col in key.ForeignKeyMemberColumns)
					{
						if (!idx.MemberColumns.Contains(col.Name))
							found = false;
					}
					
					if (found)
					{
						return idx.MemberColumns;
					}
				}
			}
			
			return key.ForeignKeyMemberColumns;
		}

		/// <summary>
		/// Determines if the table key represents a identifying relationship.
		/// </summary>
		/// <param name="key">The key to check.</param>
		/// <returns>true if all of the child's foreign key members are part of the primary key.</returns>
		/// <remarks>
		/// An identifying relationship means that the child table cannot 
		/// be uniquely identified without the parent.
		/// </remarks>
		/// <exception cref="ArgumentNullException">key is null</exception>
		public bool IsIdentifyingRelationship(TableKeySchema key)
		{
			if (key == null)
				throw new ArgumentNullException("key");

			PrimaryKeySchema childPrimaryKey = key.ForeignKeyTable.PrimaryKey;
			
			// cant be a identifying relationship if the child does not have a PK
			if ( childPrimaryKey.MemberColumns.Count == 0 )
				return false;

			for (int i = 0; i < key.ForeignKeyMemberColumns.Count; i++)
			{
				// see if the child table's PK has the FK member
				if (childPrimaryKey.MemberColumns[key.ForeignKeyMemberColumns[i].Name] == null){}
					//;//return false;
			}
			return true;
		}


		///<summary>
		/// returns true all primary key columns have is a foreign key relationship
		/// </summary>
		public bool IsJunctionTable(TableSchema table)
		{
			if (!HasPrimaryKey(table))
			{
				//Response.WriteLine(string.Format("IsJunctionTable: The table {0} doesn't have a primary key.", table.Name));
				return false;
			}
			if (table.PrimaryKey.MemberColumns.Count == 1)
			{
				//BYDAN_NETTIERS
				//return false;				
			}
						
			// junction table requires at least 2 FK
			if (table.ForeignKeys.Count < 2)
				return false;

			// we need 2 identifying relationships
			int identifyingRelationshipCount = 0;
			for (int i = 0; i < table.ForeignKeys.Count; i++)
			{
				if(table.ForeignKeys[i].PrimaryKeyTable.Equals(table))
				{
					//System.Windows.Forms.MessageBox.Show(table.Name);
					//System.Windows.Forms.MessageBox.Show(table.ForeignKeys[i].PrimaryKeyTable.Name);
					continue;
				}
				
					
				//BYDAN_NETTIERS	2da condicion no puede ser junction si foreing key es Oid
				if ( IsIdentifyingRelationship(table.ForeignKeys[i])&&table.ForeignKeys[i].ForeignKeyMemberColumns[0].Name!= strId)
					identifyingRelationshipCount++;
			}
			if ( identifyingRelationshipCount != 2 )
				return false;

			//BYDAN_NETTIERS			
			for (int i=0;i < table.PrimaryKey.MemberColumns.Count; i++){
				if (!table.PrimaryKey.MemberColumns[i].IsForeignKeyMember){}
					//;//return false;
			}
			
			//BYDAN_NETTIERS			
			for (int i=0;i < table.ForeignKeyColumns.Count; i++){
				if (!table.Name.Contains(GetNombreClaseRelacionadaFromColumn(table.ForeignKeyColumns[i])))
				{
					return false;
				}
			}
			
			
			return true;			
		}
		

		public bool IsRelationOneToOne(TableKeySchema keyschema) //, PrimaryKeySchema primaryKey)
		{
			bool result = true;
			
			// if this key do not contain
			if (keyschema.PrimaryKeyMemberColumns.Count != keyschema.PrimaryKeyTable.PrimaryKey.MemberColumns.Count)
				return false;
			
			
			// Each member must reference a unique key in the foreign table
			foreach(ColumnSchema column in keyschema.ForeignKeyMemberColumns)
			{
				bool columnIsUnique = false;

				// the only way to find the key in the foreign table is to loop through the indexes
				foreach(IndexSchema i in keyschema.ForeignKeyTable.Indexes)
				{
					
					//The index must be unique and the numer of columns columns
					//in the FK must match the number of columns in the index
					if((i.IsUnique || i.IsPrimaryKey) && (keyschema.ForeignKeyMemberColumns.Count == i.MemberColumns.Count))
					{												
						if(i.MemberColumns.Contains(column.Name) && (!IsJunctionTable(keyschema.ForeignKeyTable)))
						{
							columnIsUnique = true;
						}
					}
				}
				
				result = result && columnIsUnique;
			}
			
			return result;
		}
		
		

		
		public bool IsForeignKeyCoveredByIndex(TableKeySchema fKey)
		{
			bool isCovered = false;
				
			//If the Foreign key is also covered by an index, let the index 
			//processing handle the Get methods
			foreach(IndexSchema i in fKey.ForeignKeyTable.Indexes)
			{
				ColumnSchemaCollection fkCols = fKey.ForeignKeyMemberColumns;
				
				//First, the index must contain the same number of columns as the key
				if (fkCols.Count != i.MemberColumns.Count)
					continue;
					
				//Index must contain the same columns
				bool hasAllColumns = true;
				foreach(ColumnSchema column in fkCols)
				{
					if(!i.MemberColumns.Contains(column.Name))
					{
						hasAllColumns = false;
						break;
					}
				}
				
				if ( hasAllColumns )
				{
					//Index is a match - stop looking
					isCovered = true;
					break;
					
				}	
			}
			
			return isCovered;
		}
		
		
		public IndexSchema GetIndexCoveringForeignKey(TableKeySchema fKey)
		{
			bool isCovered = false;
				 isCovered = false;
			//If the Foreign key is also covered by an index, let the index 
			//processing handle the Get methods
			foreach(IndexSchema i in fKey.ForeignKeyTable.Indexes)
			{
				ColumnSchemaCollection fkCols = fKey.ForeignKeyMemberColumns;
				
				//First, the index must contain the same number of columns as the key
				if (fkCols.Count != i.MemberColumns.Count)
					continue;
					
				//Index must contain the same columns
				bool hasAllColumns = true;
				foreach(ColumnSchema column in fkCols)
				{
					if(!i.MemberColumns.Contains(column.Name))
					{
						hasAllColumns = false;
						break;
					}
				}
				
				if ( hasAllColumns )
				{
					//Index is a match - stop looking
					isCovered = true;
					return i;
				}	
			}
			
			return null;
		}
		
		/// <summary>
		/// 
		/// </summary>
		public ColumnSchemaCollection GetRelationKeyColumns(TableKeySchemaCollection fkeys, IndexSchemaCollection indexes)
		{
			//Debugger.Break();
			for (int j=0; j < fkeys.Count; j++)
			{
				bool skipkey = false;
				foreach(IndexSchema i in indexes)
				{
					if(i.MemberColumns.Contains(fkeys[j].ForeignKeyMemberColumns[0]))
						skipkey = true;			
				}
				if(skipkey)
					continue;

				return fkeys[j].ForeignKeyMemberColumns;
			}
			return new ColumnSchemaCollection();
		}
		
		/// <summary>
		/// Gets the names of all the columns in the collection as a string array.
		/// </summary>
		/// <param name="columns"></param>
		/// <returns></returns>
		private string[] GetColumnNames(ColumnSchemaCollection columns)
		{
			string[] columnNames = new string[ columns.Count ];
			for (int i = 0; i < columns.Count; i++)
				columnNames[i] = GetPropertyName(columns[i].Name);
			return columnNames;
		}

		///<summary>
		/// Get's the constraint side of a column from a m:m relationship to it's corresponding 1:m relationship
		///</summary>
		public ColumnSchema GetCorrespondingRelationship(TableKeySchemaCollection fkeys, string columnName)
		{
			//System.Diagnostics.Debugger.Break();
			for (int j=0; j < fkeys.Count; j++)
			{
				for (int y=0; y < fkeys[j].ForeignKeyMemberColumns.Count; y++)
				{
					if (fkeys[j].ForeignKeyMemberColumns[y].Name.ToLower() 
							== columnName.ToLower())
						return fkeys[j].PrimaryKeyMemberColumns[y];
				}
			}
			return null;
		}


		private string _currentTable = string.Empty;
		
		///<summary>
		///  Store the most recent SourceTable of the templates,
		///  Used to clean up upon new SourceTable execution.  
		///</summary>
		[BrowsableAttribute(false)]
		public  string CurrentTable {
			get{return _currentTable;}
			set {_currentTable = value;}
		}
		
		///<summary>
		///  Store the most recent
		///  Used to keep track of which childcollections have been rendered
		///  Eliminates the Dupes.
		///</summary>
		[BrowsableAttribute(false)]
		public  System.Collections.Hashtable RelationshipDictionary {
			get{return relationshipDictionary;}
			set {relationshipDictionary = value;}
		}
		
		
		///<summary>
		/// Child Collection RelationshipType Enum
		///</summary>
		[BrowsableAttribute(false)]
		public enum RelationshipType{
			None = 0,
			OneToOne,
			OneToMany,
			ManyToOne,
			ManyToMany
		}
		
		#endregion Relationships
		
		#region GetParent/Child Tables
		///<summary>
		/// Get's the parent tables if any based on a child table.
		///</summary>
		public TableSchemaCollection GetParentTables(SchemaExplorer.TableSchema table)
		{
			TableSchemaCollection _tbParent= new TableSchemaCollection();
			if(CurrentTable != table.Name){
				CurrentTable = table.Name;
			}
			DatabaseSchema _dbCurrent;
			_dbCurrent=table.Database;
			
			foreach(TableSchema _tb in _dbCurrent.Tables){
				if(CurrentTable!=_tb.Name){
					foreach(ColumnSchema _col in _tb.PrimaryKey.MemberColumns){
						foreach(ColumnSchema col in table.Columns){
							if (col.Name == _col.Name){
								_tbParent.Add(_tb);
							}
						}                        
					}
				}
			}
			return _tbParent;
		}
			
		///<summary>
		///  Get's all the child tables based on a parent table
		///</summary>
		public TableSchemaCollection GetChildTables(SchemaExplorer.TableSchema table)
		{
			TableSchemaCollection _tbChild= new TableSchemaCollection();
				if(CurrentTable != table.Name){
					CurrentTable = table.Name;
				}
				DatabaseSchema _dbCurrent;
				_dbCurrent=table.Database;
				foreach(TableSchema _tb in _dbCurrent.Tables){
					if(CurrentTable!=_tb.Name){
						foreach(ColumnSchema _col in _tb.Columns){
							foreach(ColumnSchema primaryCol in table.PrimaryKey.MemberColumns){
								if (_col.Name == primaryCol.Name){
									_tbChild.Add(_tb);
								}
							}                       
						}
					}
				}
			return _tbChild;
		}
		#endregion 
	}

	#region Retry
	public enum SleepStyle
	{ 
		/// <summary>Each sleep will be the <i>n</i> milliseconds.</summary>
		Constant, 
		/// <summary>Each sleep will increase by <i>n</i>*<i>attempts</i> milliseconds.</summary>
		Linear, 
		/// <summary>Each sleep will increase exponential by <i>n</i>^<i>attempts</i> milliseconds.</summary>
		Exponential 
	}
	#endregion
	
	#region UnitTests
	
	public enum UnitTestStyle
	{
		/// <summary>No unit test should be included.</summary>
		None,
		/// <summary>NUnit tests should be generated.</summary>
		NUnit,
		/// <summary>VSTS test should be gerenated.</summary>
		VSTS
	}
	#endregion
	
	#region ComponentPatternType
	public enum ComponentPatternType
	{
		/// <summary>No Component Pattern Generation should be included.</summary>
		None,
		/// <summary>A Service Layer Pattern should be included.</summary>
		ServiceLayer,
		/// <summary>A Domain Model Pattern Generation should be included.</summary>
		DomainModel
	}
	#endregion
	
	#region DatabaseType
	public enum DatabaseType
	{
		/// <summary>No specific database type.</summary>
		None,
		/// <summary>SQL Server 2000.</summary>
		//SQLServer2000,
		/// <summary>SQL Server 2005.</summary>
		SQLServer2005
		/// <summary>Oracle 8i.</summary>
		//Oracle8i,
		/// <summary>Oracle 9i.</summary>
		//Oracle9i,
		/// <summary>Oracle 10g.</summary>
		//Oracle10g,
	}
	#endregion

	#region MethodNamesProperty
	
	[Serializable]
	//[TypeConverter(typeof(MethodNamesTypeConverter))]
	[TypeConverter(typeof(ExpandableObjectConverter))]
	[PropertySerializer(typeof(XmlPropertySerializer))]
	public class MethodNamesProperty
	{
		public MethodNamesProperty() { }
		public MethodNamesProperty(string values)
		{
			ParseCore(values);
		}
		
		// used for testing
		private static readonly string _methodNameSuffix = "";
		
		private string _get = "Get" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Get operation.")]
		public string Get
		{
			get { return _get; }
			set { if ( IsValid(value) ) _get = value.Trim(); }
		}
		
		private string _getAll = "GetAll" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a GetAll operation.")]
		public string GetAll
		{
			get { return _getAll; }
			set { if ( IsValid(value) ) _getAll = value.Trim(); }
		}
		
		private string _getPaged = "GetPaged" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a GetPaged operation.")]
		public string GetPaged
		{
			get { return _getPaged; }
			set { if ( IsValid(value) ) _getPaged = value.Trim(); }
		}
		
		private string _find = "Find" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Find operation.")]
		public string Find
		{
			get { return _find; }
			set { if ( IsValid(value) ) _find = value.Trim(); }
		}
		
		private string _insert = "Insert" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Insert operation.")]
		public string Insert
		{
			get { return _insert; }
			set { if ( IsValid(value) ) _insert = value.Trim(); }
		}
		
		private string _update = "Update" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Update operation.")]
		public string Update
		{
			get { return _update; }
			set { if ( IsValid(value) ) _update = value.Trim(); }
		}
		
		private string _save = "Save" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Save operation.")]
		public string Save
		{
			get { return _save; }
			set { if ( IsValid(value) ) _save = value.Trim(); }
		}
		
		private string _delete = "Delete" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Delete operation.")]
		public string Delete
		{
			get { return _delete; }
			set { if ( IsValid(value) ) _delete = value.Trim(); }
		}
		
		private string _deepLoad = "DeepLoad" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a DeepLoad operation.")]
		public string DeepLoad
		{
			get { return _deepLoad; }
			set { if ( IsValid(value) ) _deepLoad = value.Trim(); }
		}
		
		private string _deepSave = "DeepSave" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a DeepSave operation.")]
		public string DeepSave
		{
			get { return _deepSave; }
			set { if ( IsValid(value) ) _deepSave = value.Trim(); }
		}
		
		private string _getTotalItems = "GetTotalItems" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a GetTotalItems operation.")]
		public string GetTotalItems
		{
			get { return _getTotalItems; }
			set { if ( IsValid(value) ) _getTotalItems = value.Trim(); }
		}
		
		private string _bulkInsert = "BulkInsert" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a BulkInsert operation.")]
		public string BulkInsert
		{
			get { return _bulkInsert; }
			set { if ( IsValid(value) ) _bulkInsert = value.Trim(); }
		}
		
		private bool IsValid(string value)
		{
			return ( value != null && value.Trim().Length > 0 );
		}
		
		private void ParseCore(string value)
		{
			if ( value != null && value.Length > 0 )
			{
				string[] values = value.Split(new char[] { ',' });
				
				if ( values.Length > 0 )
					Get = values[0];
				if ( values.Length > 1 )
					GetAll = values[1];
				if ( values.Length > 2 )
					GetPaged = values[2];
				if ( values.Length > 3 )
					Find = values[3];
				if ( values.Length > 4 )
					Insert = values[4];
				if ( values.Length > 5 )
					Update = values[5];
				if ( values.Length > 6 )
					Save = values[6];
				if ( values.Length > 7 )
					Delete = values[7];
				if ( values.Length > 8 )
					DeepLoad = values[8];
				if ( values.Length > 9 )
					DeepSave = values[9];
				if ( values.Length > 10 )
					GetTotalItems = values[10];
				if ( values.Length > 11 )
					BulkInsert = values[11];
			}
		}
		
		public static MethodNamesProperty Parse(string value)
		{
			return new MethodNamesProperty(value);
		}
		
		public string ToStringList()
		{
			string[] names = new string[] {
				Get, GetAll, GetPaged, Find,
				Insert, Update, Save, Delete,
				DeepLoad, DeepSave, GetTotalItems,
				BulkInsert
			};
			
			return string.Join(",", names);
		}
		
		public override string ToString()
		{
			return "(Expand to edit...)";
		}
	}
	
	public class MethodNamesTypeConverter : ExpandableObjectConverter
	{
		public override bool CanConvertFrom(ITypeDescriptorContext context, Type t)
		{
			if ( t == typeof(string) )
			{
				return true;
			}
			else if ( t == typeof(XmlNode) )
			{
				return true;
			}
			
			return base.CanConvertFrom(context, t);
		}
		
		public override bool CanConvertTo(ITypeDescriptorContext context, Type t)
		{
			if ( t == typeof(XmlNode) )
			{
				return true;
			}
			
			return base.CanConvertTo(context, t);
		}
		
		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo info, object value)
		{
			if ( value is string )
			{
				return MethodNamesProperty.Parse(value as string);
			}
			else if ( value is XmlNode )
			{
				XmlNode node = (XmlNode) value;
				XmlSerializer ser = new XmlSerializer(context.PropertyDescriptor.PropertyType);
				XmlNodeReader reader = new XmlNodeReader(node.FirstChild);
				return ser.Deserialize(reader);
			}
			
			return base.ConvertFrom(context, info, value);
		}
		
		public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type t)
		{
			if ( t == typeof(string) )
			{
				return ((MethodNamesProperty) value).ToStringList();
			}
			else if ( t == typeof(XmlNode) )
			{
				XmlSerializer ser = new XmlSerializer(t);
				MemoryStream stream = new MemoryStream();
				ser.Serialize(stream, value);
				stream.Position = 0;
				XmlDocument xml = new XmlDocument();
				xml.Load(stream);
				stream.Close();
				return xml.DocumentElement.FirstChild;
			}
			
			return base.ConvertTo(context, culture, value, t);
		}
		
	#endregion MethodNamesProperty
	


#endregion
	}
	
	#region ExtraCode
	
		public  class ExtraCode 	
		{
			public static string GetExtra1Servlet(TableSchema table)
			{
				String strExtra1Servlet="";
				String strPathFile="";
				
				if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("Curso"))
				{
					
					strExtra1Servlet="\r\n\t\t\tif(session.getAttribute(\"AlumnoActual\")!=null&&request.getParameter(\"accionBusqueda\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\trequest.setAttribute(\"accionAdicional\", \"MOSTRAR_CURSOS_ALUMNOACTUAL\");";
					strExtra1Servlet+="\r\n\t\t\t}";
					
					//strPathFile="ExtraCode/AulaVirtual/Servlet/Extra1/Code.txt";					
					//strExtra1Servlet=ReadFile(strPathFile);
				}
				else if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("UnidadCurricular"))
				{
					strExtra1Servlet="\r\n\t\t\tif(session.getAttribute(\"AlumnoActual\")!=null&&request.getParameter(\"accionBusqueda\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\trequest.setAttribute(\"accionAdicional\", \"MOSTRAR_UNIDADESDECURSO_ALUMNOACTUAL\");";
					
					strExtra1Servlet+="\r\n\r\n\t\t\t\tif(session.getAttribute(\"BusquedaDesdeForeignKeySesionCurso\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\t\t$httpSession.removeAttribute(\"BusquedaDesdeForeignKeySesionCurso\");";
					strExtra1Servlet+="\r\n\t\t\t\t}";
				
					strExtra1Servlet+="\r\n\r\n\t\t\t}";
				}
				else if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("UnidadCurricularTutor"))
				{
					strExtra1Servlet="\r\n\t\t\tif(session.getAttribute(\"AlumnoActual\")!=null&&request.getParameter(\"accionBusqueda\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\trequest.setAttribute(\"accionAdicional\", \"MOSTRAR_TUTORESDEUNIDADES_ALUMNOACTUAL\");";
					
					strExtra1Servlet+="\r\n\r\n\t\t\t\tif(session.getAttribute(\"BusquedaDesdeForeignKeySesionUnidadCurricular\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\t\t$httpSession.removeAttribute(\"BusquedaDesdeForeignKeySesionUnidadCurricular\");";
					strExtra1Servlet+="\r\n\t\t\t\t}";
				
					strExtra1Servlet+="\r\n\r\n\t\t\t}";
				}
				else if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("UnidadCurricularTutorAlumno"))
				{
					strExtra1Servlet="\r\n\t\t\tif(session.getAttribute(\"AlumnoActual\")!=null&&request.getParameter(\"accionBusqueda\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\trequest.setAttribute(\"accionAdicional\", \"MOSTRAR_ALUMNOSDETUTORES_ALUMNOACTUAL\");";
					
					strExtra1Servlet+="\r\n\r\n\t\t\t\tif(session.getAttribute(\"BusquedaDesdeForeignKeySesionUnidadCurricularTutor\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\t\t$httpSession.removeAttribute(\"BusquedaDesdeForeignKeySesionUnidadCurricularTutor\");";
					strExtra1Servlet+="\r\n\t\t\t\t}";
				
					strExtra1Servlet+="\r\n\r\n\t\t\t}";
				}
				else if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("Test"))
				{
					strExtra1Servlet="\r\n\t\t\tif(session.getAttribute(\"AlumnoActual\")!=null&&request.getParameter(\"accionBusqueda\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\trequest.setAttribute(\"accionAdicional\", \"MOSTRAR_TESTSDEUNIDADES_ALUMNOACTUAL\");";
					
					strExtra1Servlet+="\r\n\r\n\t\t\t\tif(session.getAttribute(\"BusquedaDesdeForeignKeySesionUnidadCurricular\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\t\t$httpSession.removeAttribute(\"BusquedaDesdeForeignKeySesionUnidadCurricular\");";
					strExtra1Servlet+="\r\n\t\t\t\t}";
					
					strExtra1Servlet+="\r\n\t\t\t}";
				}
				else if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("Nota"))
				{
					strExtra1Servlet="\r\n\t\t\tif(request.getParameter(\"accionBusqueda\")!=null&&request.getParameter(\"accionBusqueda\").equals(\"FK_IdUnidadCurricularTutorAlumno\"))";
					strExtra1Servlet+="\r\n\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\trequest.setAttribute(\"accionAdicional\", \"MOSTRAR_NOTAS_ALUMNOACTUAL\");";
					strExtra1Servlet+="\r\n\t\t\t}";
				}
				
				return strExtra1Servlet;
			}				
			
			public static string GetExtra2ServletComment(TableSchema table)
			{
				String strExtra1Servlet="";
				
				if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("Alumno"))
				{
					strExtra1Servlet="//";
				}
				
				return strExtra1Servlet;
			}
			/*
			public static string ReadFile(String strPathFile)
			{
				String strExtra="";
				
				try
         		{
					FileStream s = new FileStream(strPathFile, FileMode.Open);
					StreamReader r = new StreamReader(s);
					string t;
					while ((t = r.ReadLine()) != null)
					{
						strExtra+=t;
					}
				}
				catch(IOException e)
				{
					Console.WriteLine("An IO exception has been thrown! con Extra Code");
					Console.WriteLine(e.ToString());
				}
				
				return strExtra;
			}
			*/
		}
		
	public class TipoClaseRelacionada
	{
		public TableSchema table=null;
		public TableSchema tablaRelacionadaObjetivo=null;
		public String strNombreAdicional=null;
		
	   	public TipoClaseRelacionada() {
			strNombreAdicional="";
		}
	}
	
	public class PanelNumeroColumna {
		public String nombre="";
		public int numero_columnas=0;
		public String alineacion="";
		public String borde="";
		public String html="";
		public int x=0;
		public int y=0;
		public int colspan=0;
		public int rowspan=0;
		
	   	public PanelNumeroColumna() {
			this.nombre="";
			this.numero_columnas=0;
			this.alineacion="";
			this.borde="";
			this.html="";
			this.x=0;
			this.y=0;
			this.colspan=0;
			this.rowspan=0;
		}
	}
	
	public class KeyNameTemplate {
		public static String Sisconti_ViewPorTabla="Sisconti_ViewPorTabla";
		
	}
	
	public class KeyName_Sisconti_ViewPorTabla {
		//C1-->DESPUES DE CARGAR COMBO
		public static String C1="C1";
		
		public static String T1="T1";
	}
	#endregion
}
