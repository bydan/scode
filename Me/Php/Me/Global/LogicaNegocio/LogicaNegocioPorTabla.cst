<%@ Template Language="C#" TargetLanguage="C#" Description="Template de la capa de Acceso a Datos" ResponseEncoding="UTF-8"%>    	
<%@ CodeTemplate Src="..\CommonCode\CommonCode.cs" Inherits="Me.CommonCode" Language="C#" TargetLanguage="C#" Description="A base class for the entities." ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import NameSpace="System.Collections" %>
<%@ Import NameSpace="System.Collections.Generic" %>
<%@ Property Name="NombreProgramador" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre del Programdor" %>
<%@ Property Name="Package" Type="System.String" Default="Indefinido" Category="Options" Description="Nombre de la Entidad" %>
<%@ Property Name="SchemaAuditoria" Type="System.String" Default="Auditoria" Category="Options" Description="Nombre del Programdor" %>
<%@ Property Name="TablaBase" Type="SchemaExplorer.TableSchema" EXCLUDED="true"	Category="Context"%>
<%@ Property Name="Empresa" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre de la Empresa" %>
<%@ Property Name="TablasBaseCompuestoJunction" Type="SchemaExplorer.TableSchemaCollection" Category="Context"%>
<%@ Property Name="TablasBaseCompuestoDetalle" Type="SchemaExplorer.TableSchemaCollection" 	Category="Context"%>
<%@ Property Name="TiposGeneracion" Type="System.String" Default=" " Category="Options" Description="Nombre de la Entidad" %>
<%@ Property Name="ConNamespaces" Type="System.Boolean" Default="false" Category="4. Service Architecture" Description="Nombre del Programdor" %>
<%@ Property Name="EsMySql" Type="System.Boolean" Default="true" Category="6. Conexion" Description="Nombre del Programdor" %>
<%@ Property Name="EsPostgres" Type="System.Boolean" Default="false" Category="6. Conexion" Description="Nombre del Programdor" %>

<script runat="template">
String strDesde="_desde";
String strDesdeNombre="Desde";

String strHasta="_hasta";
String strHastaNombre="Hasta";

String strInicio="_inicio";
String strInicioNombre="Inicio";

String strFin="_fin";
String strFinNombre="Fin";

String strBusqueda="_busqueda";
String strBusquedaNombre="Busqueda";

//TALVEZ SE UTILIZE
public String GetTodosTablasClasesRelacionadasForeigKeys() {
	String strTablaClaseRelacionada=string.Empty;
	String strNombreClaseCompleto="";
	String strNombreObjetoCompleto="";
	
	String strNombreClase="";
	String strNombreObjeto="";
	
	foreach(ColumnSchema columnSchema in TablaBase.Columns) {			
		if(columnSchema.IsForeignKeyMember) {
			if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema))) {
					continue;
			}
			strNombreClaseCompleto=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema));
			strNombreObjetoCompleto=GetNombreClaseObjetoC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema));
			
			strNombreClase=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema));
			strNombreObjeto=GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema));
			
			//strTablaClaseRelacionada+="\r\n\tpublic "+/*GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+*/"$"+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+";";
			
			//WITHCONNECTION
			strTablaClaseRelacionada+="\r\n\tpublic function getTodos"+strNombreClaseCompleto+"s"+strForeignKey+"WithConnection($strFinalQuery,$pagination) {";		
			strTablaClaseRelacionada+="\r\n\t\t$"+strNombreObjetoCompleto+"s = array();";
				
			strTablaClaseRelacionada+="\r\n\r\n\t\ttry {";
			strTablaClaseRelacionada+="\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();";			
					
			strTablaClaseRelacionada+="\r\n\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(\"\");";
			strTablaClaseRelacionada+="\r\n\t\t\t$queryWhereSelectParameters->setPagination($pagination);";
			strTablaClaseRelacionada+="\r\n\t\t\t$queryWhereSelectParameters->setFinalQuery($strFinalQuery);";
			
			strTablaClaseRelacionada+="\r\n\r\n\t\t\t$"+strNombreObjeto+"DataAccess=new "+strNombreClase+"DataAccess();";
			strTablaClaseRelacionada+="\r\n\t\t\t$"+strNombreObjetoCompleto+"s=$"+strNombreObjeto+"DataAccess->getEntities($this->connexion,$queryWhereSelectParameters);";
					
			strTablaClaseRelacionada+="\r\n\r\n\t\t\t//if($this->isConDeep) {";
			strTablaClaseRelacionada+="\r\n\t\t\t\t//$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());";
			strTablaClaseRelacionada+="\r\n\t\t\t//}";
					
			strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFuncionesAdditional::check"+GetNombreClase(TablaBase.ToString())+"ToGets($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s,$this->datosCliente);";
			strTablaClaseRelacionada+="\r\n\t\t\t$this->update"+GetNombreClase(TablaBase.ToString())+"ToGetsAuxiliar($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s);";


			strTablaClaseRelacionada+="\r\n\r\n\t\t\t$this->connexion->getConnection()->commit();";
			strTablaClaseRelacionada+="\r\n\t\t\t$this->connexion->getConnection()->close();";
					
			strTablaClaseRelacionada+="\r\n\r\n\t	}  catch(Exception $e) {";
			strTablaClaseRelacionada+="\r\n\t\t\t$this->connexion->getConnection()->rollback();";
			strTablaClaseRelacionada+="\r\n\t\t\t$this->connexion->getConnection()->close();";			
					
			strTablaClaseRelacionada+="\r\n\r\n\t\t\tFunciones::logShowExceptionMessages($e);";
			strTablaClaseRelacionada+="\r\n\t\t\tthrow $e;";
					
			strTablaClaseRelacionada+="\r\n\r\n\t	}\r\n\t//finally {";
			strTablaClaseRelacionada+="\r\n\t\t\t//$this->connexion->getConnection()->close();";
			strTablaClaseRelacionada+="\r\n\t\t//}";
			
			strTablaClaseRelacionada+="\r\n\r\n\t\treturn $"+strNombreObjetoCompleto+"s;";
			
			strTablaClaseRelacionada+="\r\n\t}";
			
			//WITHCONNECTION_FIN
			
			
			strTablaClaseRelacionada+="\r\n\tpublic function getTodos"+strNombreClaseCompleto+"s"+strForeignKey+"($strFinalQuery,$pagination) {";		
			strTablaClaseRelacionada+="\r\n\t\t$"+strNombreObjetoCompleto+"s = array();";
				
			strTablaClaseRelacionada+="\r\n\r\n\t\ttry {";
			//strTablaClaseRelacionada+="\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();";			
					
			strTablaClaseRelacionada+="\r\n\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(\"\");";
			strTablaClaseRelacionada+="\r\n\t\t\t$queryWhereSelectParameters->setPagination($pagination);";
			strTablaClaseRelacionada+="\r\n\t\t\t$queryWhereSelectParameters->setFinalQuery($strFinalQuery);";
			
			strTablaClaseRelacionada+="\r\n\r\n\t\t\t$"+strNombreObjeto+"DataAccess=new "+strNombreClase+"DataAccess();";
			strTablaClaseRelacionada+="\r\n\t\t\t$"+strNombreObjetoCompleto+"s=$"+strNombreObjeto+"DataAccess->getEntities($this->connexion,$queryWhereSelectParameters);";
					
			strTablaClaseRelacionada+="\r\n\r\n\t\t\t//if($this->isConDeep) {";
			strTablaClaseRelacionada+="\r\n\t\t\t\t//$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());";
			strTablaClaseRelacionada+="\r\n\t\t\t//}";
					
			strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFuncionesAdditional::check"+GetNombreClase(TablaBase.ToString())+"ToGets($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s,$this->datosCliente);";
			strTablaClaseRelacionada+="\r\n\t\t\t$this->update"+GetNombreClase(TablaBase.ToString())+"ToGetsAuxiliar($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s);";
			
			//strTablaClaseRelacionada+="\r\n\r\n\t\t\t$this->connexion->getConnection()->commit();";
			//strTablaClaseRelacionada+="\r\n\t\t\t$this->connexion->getConnection()->close();";
					
			strTablaClaseRelacionada+="\r\n\r\n\t	}  catch(Exception $e) {";
			//strTablaClaseRelacionada+="\r\n\t\t\t$this->connexion->getConnection()->rollback();";
			//strTablaClaseRelacionada+="\r\n\t\t\t$this->connexion->getConnection()->close();";			
					
			strTablaClaseRelacionada+="\r\n\r\n\t\t\tFunciones::logShowExceptionMessages($e);";
			strTablaClaseRelacionada+="\r\n\t\t\tthrow $e;";
					
			strTablaClaseRelacionada+="\r\n\r\n\t	}\r\n\t//finally {";
			strTablaClaseRelacionada+="\r\n\t\t\t//$this->connexion->getConnection()->close();";
			strTablaClaseRelacionada+="\r\n\t\t//}";
			
			strTablaClaseRelacionada+="\r\n\r\n\t\treturn $"+strNombreObjetoCompleto+"s;";
			
			strTablaClaseRelacionada+="\r\n\t}";
		}
	}
								
	return strTablaClaseRelacionada; 
}
		
public String GetIndicesSqlReportesTablasClasesReporte(TableSchema tableSchema) 
		{
			
			if(blnEsReporteAdditional) {
				return "";	
			}
			
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strBodyParametrosFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersFuncionUso="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			
			String strWithConnectionGetNew="\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();";//$this->connexion=$this->connexion->getNewConnexion($this->connexionType,$this->parameterDbType,$this->entityManagerFactory);$this->connexion->begin();";
			String strWithConnectionCommit="\r\n\r\n\t\t\t$this->connexion->getConnection()->commit();";//$this->connexion->commit();";
				   strWithConnectionCommit+="\r\n\t\t\t$this->connexion->getConnection()->close();";
			String strWithConnectionClose="//";//"\r\n\t\t\t$this->connexion->close();";
			
			bool blnEsReporteLocal= GetEsReporteFromPropertiesC(tableSchema);
			
			bool tineEmpresaColumna=false;
			bool tineSucursalColumna=false;
			bool tineEjercicioColumna=false;
			bool tinePeriodoColumna=false;
			bool tineUsuarioColumna=false;
			//bool tineModuloColumna=false;
			
			String sCommentEmpresaParametro="";
			String sCommentSucursalParametro="";
			String sCommentEjercicioParametro="";
			String sCommentPeriodoParametro="";
			String sCommentUsuarioParametro="";
			//String sCommentModuloParametro="";
			
			String sCommentExisteWhere="";
			//ESREPORTEPARAM
			
			String strParametroReporte="";
			
			if(blnEsReporteLocal) {
				strParametroReporte=",";//"$parametroGeneralUsuario,$moduloActual,$opcionActual,$usuarioActual,";
			}
			
			String strPrefijoSqlParametro=GetPrefijoSqlTableFromPropertiesC(tableSchema);
			String strPrefijoSqlParametroOriginal="";
	
			if(!strPrefijoSqlParametro.Equals(String.Empty)) {
				strPrefijoSqlParametro=strPrefijoSqlParametro+".";
			}
			
			strPrefijoSqlParametroOriginal=strPrefijoSqlParametro;
			
			bool esParametroReemplazo=GetEsParametroReporteReemplazoFromPropertiesC(tableSchema);
			bool esParametroReemplazoColumn=false;
			
			ColumnSchema columnEmpresa=null;
			ColumnSchema columnSucursal=null;
			
			foreach(IndexSchema indexSchema in tableSchema.Indexes) {
				tineEmpresaColumna=false;
				tineSucursalColumna=false;
				tineEjercicioColumna=false;
				tinePeriodoColumna=false;
				tineUsuarioColumna=false;
				//tineModuloColumna=false;
			
				sCommentEmpresaParametro="//";
				sCommentSucursalParametro="//";
				sCommentEjercicioParametro="//";
				sCommentPeriodoParametro="//";
				sCommentUsuarioParametro="//";
				//sCommentModuloParametro="//";
						
				sCommentExisteWhere="";
				
				//PARAMETROS GLOBALES
				tineEmpresaColumna=ContieneColumna(tableSchema,strIdEmpresa,true);
				tineSucursalColumna=ContieneColumna(tableSchema,strIdSucursal,true);
				tineEjercicioColumna=ContieneColumna(tableSchema,strIdEjercicio,true);
				tinePeriodoColumna=ContieneColumna(tableSchema,strIdPeriodo,true);
				tineUsuarioColumna=ContieneColumna(tableSchema,strIdUsuario,true);
				
				if(tineEmpresaColumna) {
					sCommentEmpresaParametro="";
				}
				
				if(tineSucursalColumna) {
					sCommentSucursalParametro="";
				}
				
				
				if(!indexSchema.IsPrimaryKey)
				{
					if(!VerificarIndiceBusquedaTablaC(tableSchema,indexSchema.Name))
					{
						continue;
					}
					
					strParametersFuncion="";
					strParametersNameFuncion="";
					strBodyParametrosFuncion="";
					
					if(indexSchema.IsUnique)
					{
						/*
						//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(";
							strFunctionsWithConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"WithConnection(";
							//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(true,";
							//strFunctionsNoConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"(";
							//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(isConConnexion,";							
						strBodyFuncion="\r\n\t\ttry {"+strWithConnectionGetNew+"\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+=strWithConnectionCommit;
						strEndFuncion="\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						*/
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal($sFinalQuery,";
							String sSufijoNombre=indexSchema.Name.Replace("Busqueda"+tableSchema.Name,"");
								
								//strFunctionsWithConnection="\r\n\r\n\t@SuppressWarnings(\"resource\")";
								strFunctionsWithConnection+="\r\n\tpublic static function "+"GetSelecSql"+GetNombreClaseC(tableSchema.ToString())+sSufijoNombre+"($connexion,$parameterDbType,$sFinalQuery,$pagination,";//,$parametroGeneralUsuario,$moduloActual,$opcionActual,$usuarioActual//+strParametroReporte;//$connexionType,
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,sFinalQuery,";
								//strFunctionsNoConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"($sFinalQuery,$pagination,"+strParametroReporte;
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,sFinalQuery,";
							
						}
						else
						{
							/*
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(";
								strFunctionsWithConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"WithConnection(";
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,";
								strFunctionsNoConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"(";
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,";
							*/
						}
						//ANTERIOR NEW
						//strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n\t\t\t}\r\n";
						
						strBodyFuncion="\r\n\t\t$sSql='';";
						strBodyFuncion+="\r\n\t\t$sSqlWhere='';";
						strBodyFuncion+="\r\n\t\t$existeWhere=false;";
						
						if(GetExisteWhereFromPropertiesC(tableSchema)) {
							strBodyFuncion+="\r\n\t\t//SQL CON PARTE WHERE INCLUIDO";
							strBodyFuncion+="\r\n\t\t$existeWhere=true;";
						}
						
						//strBodyFuncion+="\r\n\r\n\t\tif($connexionType==$connexionType::$HIBERNATE) {";
							
						String strSufijoDb="Mysql";
						
						if(EsMySql) {
							strSufijoDb="Mysql";
						} else if(EsPostgres) {
							strSufijoDb="Postgres";
						}
						
						//strBodyFuncion+="\r\n\r\n\t\t} else if($connexionType==ConnexionType::$JDBC32) {";
						strBodyFuncion+="\r\n\r\n\r\n\t\t\tif($parameterDbType==ParameterDbType::$POSTGRES) {";
								
						strBodyFuncion+="\r\n\r\n\t\t\t} else if($parameterDbType==ParameterDbType::$MYSQL) {";
						//strBodyFuncion+="\r\n\t\t\t\t//$inputStreamSql = AuxiliarGeneral::getResourceAsStream(\""+GetNombreClaseC(tableSchema.ToString())+"_Postgres.sql\");";
						strBodyFuncion+="\r\n\t\t\t\t//$sSelectQuery ='';// new Scanner($inputStreamSql,Constantes::$S_UTF8)->useDelimiter(Constantes::$S_DELIMITER);";
						strBodyFuncion+="\r\n\t\t\t\t$sSelectQuery =file_get_contents('"+Empresa+"/"+ Package+"/"+Module+""+ "resources"+"/"+ "general"+"/"+GetNombreClaseC(tableSchema.ToString())+"_"+strSufijoDb+".sql');";
						
						if(!esParametroReemplazo) {
							/*
							strBodyFuncion+="\r\n\r\n\t\t\t\tif(parametroGeneralUsuario->getid_empresa()!= null && parametroGeneralUsuario->getid_empresa()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif($existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t"+sCommentEmpresaParametro+"$sSqlWhere.=' and';";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							*/
							
							columnEmpresa=GetColumnaFromNombreC(strIdEmpresaDB,tableSchema);
							
							String strPrefijoSqlParametroColumna=strPrefijoSqlParametro;		
							if(columnEmpresa!=null && !columnEmpresa.Name.Equals(strId)) {
								strPrefijoSqlParametroColumna=GetPrefijoSqlTableFromPropertiesC(columnEmpresa);
								
								if(!strPrefijoSqlParametroColumna.Equals(string.Empty)) {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroColumna+".";
								} else {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroOriginal;
								}
							}
							
							/*
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentEmpresaParametro+"$sSqlWhere.=' "+strPrefijoSqlParametroColumna+"id_empresa='+$parametroGeneralUsuario->getid_empresa();";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentEmpresaParametro+"$existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
							*/
							
							
							/*
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif($parametroGeneralUsuario->getid_sucursal()!= null && $parametroGeneralUsuario->getid_sucursal()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif($existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t"+sCommentSucursalParametro+"$sSqlWhere.=' and';";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							*/
							
							columnSucursal=GetColumnaFromNombreC(strIdSucursalDB,tableSchema);
							
							strPrefijoSqlParametroColumna=strPrefijoSqlParametro;
							if(columnSucursal!=null && !columnSucursal.Name.Equals(strId)) {
								strPrefijoSqlParametroColumna=GetPrefijoSqlTableFromPropertiesC(columnSucursal);
								
								if(!strPrefijoSqlParametroColumna.Equals(string.Empty)) {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroColumna+".";
								} else {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroOriginal;
								}
							}
							
							/*
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentSucursalParametro+"$sSqlWhere.=' "+strPrefijoSqlParametroColumna+"id_sucursal='+$parametroGeneralUsuario->getid_sucursal();";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentSucursalParametro+"$existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
							*/
						} else {
							if(tineEmpresaColumna) {
								strBodyFuncion+="\r\n\r\n\t\t\t\t$sSelectQuery=str_replace('"+strIdEmpresa.ToUpper()+"', $parametroGeneralUsuario->getid_empresa(),$sSelectQuery);";
							}
							
							if(tineSucursalColumna) {
								strBodyFuncion+="\r\n\r\n\t\t\t\t$sSelectQuery=str_replace('"+strIdSucursal.ToUpper()+"', $parametroGeneralUsuario->getid_sucursal(),$sSelectQuery);";
							}
						}
						
						
						/*
						if(tineEjercicioColumna) {
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_ejercicio()!= null && parametroGeneralUsuario.getid_ejercicio()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif($existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t$sSqlWhere.=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\r\n\t\t\t\t\t$sSqlWhere.=\" id_ejercicio=\"+parametroGeneralUsuario.getid_ejercicio();";
							strBodyFuncion+="\r\n\t\t\t\t\t$existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						}
						
						if(tinePeriodoColumna) {
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_periodo()!= null && parametroGeneralUsuario.getid_periodo()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif($existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t$sSqlWhere.=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\r\n\t\t\t\t\t$sSqlWhere.=\" id_periodo=\"+parametroGeneralUsuario.getid_periodo();";
							strBodyFuncion+="\r\n\t\t\t\t\t$existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						}
				
						if(tineUsuarioColumna) {
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_usuario()!= null && parametroGeneralUsuario.getid_usuario()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif($existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t$sSqlWhere.=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\r\n\t\t\t\t\t$sSqlWhere.=\" id_usuario=\"+parametroGeneralUsuario.getid_usuario();";
							strBodyFuncion+="\r\n\t\t\t\t\t$existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						}
						*/
						
						
						if(tineUsuarioColumna) {
							sCommentSucursalParametro="";
						}
						
						strBodyFuncion+="\r\n\t\t\t\tME_SQLPARAMETROS";
						
						if(!esParametroReemplazo) {
							if(GetExisteWhereFromPropertiesC(tableSchema)) {
								sCommentExisteWhere="//";
							}
							
							strBodyFuncion+="\r\n\r\n\t\t\t\t"+sCommentExisteWhere+"if($existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentExisteWhere+"$sSqlWhere=' where '.$sSqlWhere;";
							strBodyFuncion+="\r\n\t\t\t\t"+sCommentExisteWhere+"}";
							
							int intNumWheres=GetNumeroWheresTableFromPropertiesC(tableSchema);
							
							if(intNumWheres<=0) {
								strBodyFuncion+="\r\n\r\n\t\t\t\tif(strpos($sSelectQuery,Constantes::$S_KEYWHERE)!== false ) {";
								strBodyFuncion+="\r\n\t\t\t\t\t$sSql=str_replace(Constantes::$S_KEYWHERE, $sSqlWhere,$sSelectQuery);";//sSelectQuery.replace(Constantes::$S_KEYWHERE,$sSqlWhere);";
								strBodyFuncion+="\r\n\t\t\t\t} else {";
								strBodyFuncion+="\r\n\t\t\t\t\t$sSql=$sSelectQuery.$sSqlWhere;";
								strBodyFuncion+="\r\n\t\t\t\t}";
							} else {
								strBodyFuncion+="\r\n";
								for(int i=1;i<=intNumWheres;i++) {
									strBodyFuncion+="\r\n\t\t\t\t$sSelectQuery=str_replace(Constantes::$S_KEYWHERE+\""+i+"\",$sSqlWhere,$sSelectQuery);";
								}
								
								strBodyFuncion+="\r\n";
								strBodyFuncion+="\r\n\t\t\t\t$sSql=$sSelectQuery;";
							}
						} else {
							strBodyFuncion+="\r\n";
							strBodyFuncion+="\r\n\t\t\t\t$sSql=$sSelectQuery;";
						}
						
						strBodyFuncion+="\r\n\r\n\t\t\t\t//OBTENER EL ORDER BY DESDE FINALQUERY, DONDE PUEDE SER POR ID, POR DEFAUTL DESCRIPTION O FORMADO POR EL CLIENTE DINAMICAMENTE ";
						strBodyFuncion+="\r\n\t\t\t\t$sOrderBy=FuncionesSql::getOrderSqlFromFinalQuery($sFinalQuery,$sSelectQuery);";
						strBodyFuncion+="\r\n\r\n\t\t\t\t$sSql=$sSql.$sOrderBy;";
						strBodyFuncion+="\r\n\r\n\t\t\t\t$sSql.=QueryWhereSelectParameters::getPaginationFinalQueryWithPaginationWithDbType($pagination, $connexion->getDbType());";
						
						strBodyFuncion+="\r\n\r\n\t\t\t\tif(Constantes::$ISDEVELOPING) {";
						strBodyFuncion+="\r\n\t\t\t\t\t//System.out.println(sSql);";
						strBodyFuncion+="\r\n\t\t\t\t}";
						
						strBodyFuncion+="\r\n\t\t\t}";
						//strBodyFuncion+="\r\n\t\t}";
						
						strBodyFuncion+="\r\n\r\n\r\n\t\tif(Constantes::$STRPREFIJOSCHEMA!='') {";
						strBodyFuncion+="\r\n\t\t\t$sSql=str_replace(Constantes::$STRSCHEMA.'.',Constantes::$STRPREFIJOSCHEMA.Constantes::$STRSCHEMA.'.',$sSql);";
						strBodyFuncion+="\r\n\t\t}";
			
						strBodyFuncion+="\r\n\r\n\t\treturn $sSql;";
						strBodyFuncion+="\r\n\t}";
						
						/*
						strBodyFuncion="\r\n\t\ttry {";
						strBodyFuncion+="\r\n\t\t\t"+GetNombreClaseC(tableSchema.ToString())+"Logic "+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic=new "+GetNombreClaseC(tableSchema.ToString())+"Logic();\r\n";
						
						strBodyFuncion+=strWithConnectionGetNew;
						
						strBodyFuncion+="\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic.setConnexion(this.connexion);\r\n";
						strBodyFuncion+="\r\n\t\t\t$sQuerySelect='';";
						strBodyFuncion+="\r\n\t\t\t$sFinalQueryFinal='';";
						
						strBodyFuncion+="\r\n\t\t\tsQuerySelect="+tableSchema.Owner+"Sql::GetSelecSql"+GetNombreClaseC(tableSchema.ToString())+"(this.connexionType,this.parameterDbType,sFinalQuery,pagination,parametroGeneralUsuario,moduloActual,ME_USO_VARIABLES);";
						
						strBodyFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic->getEntities($sQuerySelect, $sFinalQueryFinal);";
						strBodyFuncion+="\r\n\t\t\tthis."+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic.get"+GetNombreClaseC(tableSchema.ToString())+"s();";
						*/
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							/*
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setPagination(pagination);";	
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
							*/
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
						//strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClase(tableSchema.ToString())+"Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),\""+indexSchema.Name+"\",\"\",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());";
			
						//strEndBodyFuncion+="\r\n\r\n\t\t\t//"+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
						//ANTERIOR COMMIT
						//strEndBodyFuncion+="\r\n\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.commit();\r\n\t\t\t}";
						//strEndBodyFuncion+=strWithConnectionCommit;
						
						//ANTERIOR CLOSE
						//strEndFuncion="\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t} finally {\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n";
						//strEndFuncion="\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						esParametroReemplazoColumn=GetEsParametroReporteReemplazoFromPropertiesC(memberColumnSchema.Column);	
							
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								} else {
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strParametersFuncion+=","+/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										strParametersNameFuncion+=","+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
									}	
									
									if(!memberColumnSchema.Column.Name.Equals(strId)) {
										strBodyParametrosFuncion+=GetParametroSql(memberColumnSchema.Column,esParametroReemplazo,esParametroReemplazoColumn);	
									}
									
								}
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
									
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
								else
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
									
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					//strBodyFuncion+="\r\n\t\t\t\tME_SQLPARAMETROS";
					
					strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+") {"+strBodyFuncion.Replace("ME_SQLPARAMETROS",strBodyParametrosFuncion)+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					//strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+" {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"").Replace(strWithConnectionClose,"");
					
					strFunctions=strFunctions.Replace("ME_USO_VARIABLES",strParametersNameFuncion);
					
					strInitFuncion+=strFunctions;
				}
			}
			
								
			return strInitFuncion; 
		}

public String GetParametroSql(ColumnSchema columnSchema,bool esParametroReemplazo,bool esParametroReemplazoColumn) {
	String strAnd=" and ";
	String strIgual=" = ";
	String strSqlWhere="";
	String strNombreColumnaSqlParametro="";
	String strPrefijoSqlParametro=GetPrefijoSqlTableFromPropertiesC(columnSchema.Table);
	String strPrefijoSqlParametroColumna=GetPrefijoSqlTableFromPropertiesC(columnSchema);
	bool esCampoCadena=false;
	String strNoCadenaVacio="";
	String strCadenaInicio="'";
	String strCadenaFin="'";
	
	if(!strPrefijoSqlParametroColumna.Equals(String.Empty)) {
		strPrefijoSqlParametro=strPrefijoSqlParametroColumna;
	}
	
	String strComillaSimpleInicio="";
	String strComillaSimpleFin="";
	
	String strFuncionStringInicio="";
	String strFuncionStringFin="";
	
	String strSufijoDb="Mysql";
	
	if(EsMySql) {
		strSufijoDb="Mysql";
	} else if(EsPostgres) {
		strSufijoDb="Postgres";
	}
	
						
	if(EsDateColumn(columnSchema) || EsDateTimeColumn(columnSchema) || EsTimeColumn(columnSchema)){
		strComillaSimpleInicio="\"'\".";
		strComillaSimpleFin=".\"'\"";
		
		strFuncionStringInicio="Funciones::getString"+strSufijoDb+"Date(";
		strFuncionStringFin=")";
	} else {
		if(!EsVarCharColumn(columnSchema) && !EsCharColumn(columnSchema)) {
			strFuncionStringFin="";//".toString()";			
		} else {
			strComillaSimpleInicio="\"'\".";
			strComillaSimpleFin=".\"'\"";
			esCampoCadena=true;
		}
	}
	
	if(!strPrefijoSqlParametro.Equals(String.Empty)) {
		strPrefijoSqlParametro=strPrefijoSqlParametro+".";
	}
	
	bool esDesde=false;
	bool esHasta=false;
	
	//ESTAS SON VARIABLES GLOBALES
	if(columnSchema.Name.Equals(strIdEmpresa) || columnSchema.Name.Equals(strIdSucursal)) {
		return "";
	}
	
	String strBodyFuncion="";
	String strParametro="$"+GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema);
	String strParametroSql=GetNombreColumnFromPropertiesInterno(columnSchema,true);
	
	strParametroSql=strParametroSql.Replace(strBusqueda,"");
	
	//if(strParametroSql.EndsWith(strDesde) || strParametroSql.EndsWith(strInicio)) {
	if(TieneDesde(columnSchema,true)) {
		esDesde=true;
	}
	
	//if(strParametroSql.EndsWith(strHasta) || strParametroSql.EndsWith(strFin)) {
	if(TieneDesde(columnSchema,false)) {
		esHasta=true;
	}
	
	if(esDesde) {
		strIgual=" between ";
		strParametroSql=strParametroSql.Replace(strDesde,"").Replace(strInicio,"");
	} else {
		if(esHasta) {
			strParametroSql=strParametroSql.Replace(strHasta,"").Replace(strFin,"");
		}
	}
	
	//SI NO UTILIZA LA TECNICA NOMBRE DE PARAMETRO REEMPLAZO POR VALOR
	bool tieneDesdeTabla=TieneDesde(columnSchema.Table,true);
	bool tieneHastaTabla=TieneDesde(columnSchema.Table,false);
		
	if(!esParametroReemplazo && !esParametroReemplazoColumn) {
		if(esCampoCadena) {
			strNoCadenaVacio=" && "+strParametro+"!=\"\"";
		}
		
		strBodyFuncion+="\r\n\r\n\t\t\t\tif("+strParametro+"!= null"+strNoCadenaVacio+") {";
		strBodyFuncion+="\r\n\t\t\t\t\tif($existeWhere) {$sSqlWhere.=\" and \";}";
		//strBodyFuncion+="\r\n\t\t\t\t\t\t";
		//strBodyFuncion+="\r\n\t\t\t\t\t";
		
		strSqlWhere=GetSqlWhereColumnFromPropertiesC(columnSchema);
		
		if(!tieneDesdeTabla && !tieneHastaTabla) {
			if(strSqlWhere.Equals(string.Empty)) {
				strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
			} else {
				strNombreColumnaSqlParametro=strSqlWhere;
			}			
			
			strBodyFuncion+="\r\n\t\t\t\t\t$sSqlWhere.=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+strIgual+"\"."+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
		} else {
			if(!esHasta) {
				if(tieneHastaTabla) {					
					if(strSqlWhere.Equals(string.Empty)) {
						strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
					} else {
						strNombreColumnaSqlParametro=strSqlWhere;
					}
			
					strBodyFuncion+="\r\n\t\t\t\t\t$sSqlWhere.=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+strIgual+"\"."+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				} else {
					//MAYOR_IGUAL					
					if(strSqlWhere.Equals(string.Empty)) {
						strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
					} else {
						strNombreColumnaSqlParametro=strSqlWhere;
					}
					
					strBodyFuncion+="\r\n\t\t\t\t\t$sSqlWhere.=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+">="+"\"."+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				}
			} else {
				if(tieneDesdeTabla) {
					strBodyFuncion+="\r\n\t\t\t\t\t$sSqlWhere.="+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				} else {
					//MENOR_IGUAL					
					if(strSqlWhere.Equals(string.Empty)) {
						strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
					} else {
						strNombreColumnaSqlParametro=strSqlWhere;
					}
					
					strBodyFuncion+="\r\n\t\t\t\t\t$sSqlWhere.=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+"<="+"\"."+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				}
			}
		}
		
		strBodyFuncion+="\r\n\t\t\t\t\t$existeWhere=true;";
		strBodyFuncion+="\r\n\t\t\t\t}";	
	} else {
		String strSufijoAux="";
		
		if(esDesde && tieneHastaTabla) {
			if(!strParametro.ToUpper().Contains("_DESDE")) {
				strSufijoAux="_DESDE";
			}
			
			
		}
		
		strBodyFuncion+="\r\n\r\n\t\t\t\t$sSelectQuery=str_replace('"+strParametro.ToUpper()+strSufijoAux+"', "+strFuncionStringInicio+strParametro+strFuncionStringFin+",$sSelectQuery);";
	}
	
	return strBodyFuncion;
}

public bool TieneDesde(TableSchema tableSchema,bool esTieneDesde) {
	bool tiene=false;
	String strParametroSql="";
	
	foreach(ColumnSchema columnSchema in tableSchema.Columns) {
		strParametroSql=GetNombreColumnFromPropertiesInterno(columnSchema,true);
		
		if(esTieneDesde) {
			//if(strParametroSql.EndsWith(strDesde) || strParametroSql.EndsWith(strInicio)) {
			if(TieneDesde(columnSchema,esTieneDesde)) {
				tiene=true;
				break;
			}
		} else {
			//if(strParametroSql.EndsWith(strHasta) || strParametroSql.EndsWith(strFin)) {
			if(TieneDesde(columnSchema,esTieneDesde)) {
				tiene=true;
				break;
			}
		}
	}
	
	return tiene;
}

public bool TieneDesde(ColumnSchema columnSchema,bool esTieneDesde) {
	bool tiene=false;
	String strParametroSql="";
	
		strParametroSql=GetNombreColumnFromPropertiesInterno(columnSchema,true);
		
		if(esTieneDesde) {
			if(strParametroSql.EndsWith(strDesde) || strParametroSql.EndsWith(strInicio)) {
				tiene=true;
				return tiene;
			} else {
				if(columnSchema.Name.EndsWith(strDesdeNombre) || columnSchema.Name.EndsWith(strInicioNombre)) {
					tiene=true;
					return tiene;
				}
			}
		} else {
			if(strParametroSql.EndsWith(strHasta) || strParametroSql.EndsWith(strFin)) {
				tiene=true;
				return tiene;
			} else {
				if(columnSchema.Name.EndsWith(strHastaNombre) || columnSchema.Name.EndsWith(strFinNombre)) {
					tiene=true;
					return tiene;
				} 
			}
		}
	
	
	return tiene;
}

public String GetIndicesTablasClasesReporte(TableSchema tableSchema) 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersFuncionUso="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			String strAuxPrefijoAdditional="";
			
			String strWithConnectionGetNew="\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();";//$this->connexion=$this->connexion->getNewConnexion($this->connexionType,$this->parameterDbType,$this->entityManagerFactory);$this->connexion->begin();";
			String strWithConnectionCommit="\r\n\r\n\t\t\t$this->connexion->getConnection()->commit();";//$this->connexion->commit();";
				   strWithConnectionCommit+="\r\n\t\t\t$this->connexion->getConnection()->close();";
			String strWithConnectionClose="//";//"\r\n\t\t\t$this->connexion->close();";
			String strWithConnectionRollBack="\r\n\t\t\t$this->connexion->getConnection()->rollback();";//$this->connexion->rollback();";
				   strWithConnectionRollBack+="\r\n\t\t\t$this->connexion->getConnection()->close();	";
			
			bool blnEsReporteLocal= GetEsReporteFromPropertiesC(tableSchema);
			bool blnEsReporteAdditionalLocal= GetEsReporteAdditionalFromPropertiesC(tableSchema);
			bool blnEsProcesoLocal= GetEsProcesoFromPropertiesC(tableSchema);
			bool blnEsReporteAdditional=false;
			
			String strObjetoLogic="";
			String strObjetoLogicProceso="";
			String strObjetoLogicSql="";
			String strParametroReporte="";
			String strCommentAdditional="";
			String strCommentProceso="";
			String strCommentSoloReporte="//";
			
			if(blnEsProcesoLocal) {
				strCommentProceso="//";
			}
			
			if(blnEsReporteLocal) {				
				strParametroReporte=",";//"$parametroGeneralUsuario,$moduloActual,$opcionActual,$usuarioActual,";
				
				//Trace.WriteLine(blnEsReporteAdditional);
				
				if(blnEsProcesoLocal || blnEsReporteAdditionalLocal) {
					strCommentSoloReporte="";
				}
			}
					
			
			
			foreach(IndexSchema indexSchema in tableSchema.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					//strCommentAdditional="";
					
					if(!VerificarIndiceBusquedaTablaC(tableSchema,indexSchema.Name))
					{
						continue;
					}
					
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(";
							strFunctionsWithConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"ParaReporteWithConnection(";
							//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(true,";
							//strFunctionsNoConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"(";
							//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(isConConnexion,";							
						strBodyFuncion="\r\n\t\ttry {"+strWithConnectionGetNew+"\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+=strWithConnectionCommit;
						strEndFuncion="\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t}\r\n\t}\r\n";// finally {"+strWithConnectionClose+"\r\n\t\t}";
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal($sFinalQuery,";
								strFunctionsWithConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"ParaReporteWithConnection($sFinalQuery,$pagination"+strParametroReporte;//","
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,sFinalQuery,";
								//strFunctionsNoConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"($sFinalQuery,$pagination,"+strParametroReporte;
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,sFinalQuery,";
							
						}
						else
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(";
								strFunctionsWithConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"ParaReporteWithConnection(";
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,";
								strFunctionsNoConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"(";
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,";
							
						}
						//ANTERIOR NEW
						//strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n\t\t\t}\r\n";
						
						
						strBodyFuncion="\r\n\t\ttry {";
						
						blnEsReporteAdditional=GetEsReporteAdditionalFromPropertiesC(tableSchema);
						
						if(blnEsReporteAdditional) {
							strAuxPrefijoAdditional=strPrefijoAdditional;
							//strCommentAdditional="//";
						}
						
						strWithConnectionGetNew="\r\n\t\t\t"+strCommentAdditional+"$this->connexion=Connexion::getNewConnexion();;";//"$this->connexion=$this->connexion->getNewConnexion($this->connexionType,$this->parameterDbType,$this->entityManagerFactory);$this->connexion->begin();";
						strWithConnectionCommit="\r\n\r\n\t\t\t"+strCommentAdditional+"$this->connexion->getConnection()->commit();";//"$this->connexion->commit();";
						strWithConnectionCommit+="\r\n\t\t\t"+strCommentAdditional+"$this->connexion->getConnection()->close();";
						
						strWithConnectionClose="//";//"\r\n\t\t\t"+strCommentAdditional+"$this->connexion->close();";
						strWithConnectionRollBack="\r\n\t\t\t"+strCommentAdditional+"$this->connexion->getConnection()->rollback();";//"$this->connexion->rollback();";
						strWithConnectionRollBack+="\r\n\t\t\t"+strCommentAdditional+"$this->connexion->getConnection()->close();";
						
						strBodyFuncion+="\r\n\t\t\t"+strCommentSoloReporte+"$"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+"=new "+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+"(null);\r\n";
						strBodyFuncion+="\r\n\t\t\t"+strCommentSoloReporte+"$"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+"=$this;";
						
						strBodyFuncion+=strWithConnectionGetNew;
						
						strObjetoLogic="$this";//GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional;
						strObjetoLogicProceso=GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional;
						strObjetoLogicSql=GetNombreClaseC(tableSchema.ToString())+"Logic"; //tableSchema.Owner+"SqlReporte";
						
						strBodyFuncion+="\r\n\t\t\t//"+strObjetoLogic+".setConnexion(this.connexion);"+strObjetoLogic+".setConnexionType(this.connexionType);"+strObjetoLogic+".setParameterDbType(this.parameterDbType);"+strObjetoLogic+".setEntityManagerFactory(this.entityManagerFactory);\r\n";
						
						String sSufijoNombre=indexSchema.Name.Replace("Busqueda"+tableSchema.Name,"");
							
						
						if(!blnEsReporteAdditional) {							
							strBodyFuncion+="\r\n\t\t\t$sQuerySelect='';";
							strBodyFuncion+="\r\n\t\t\t$sFinalQueryFinal='';";
							
								
							strBodyFuncion+="\r\n\t\t\t"+strCommentProceso+"$sQuerySelect="+strObjetoLogicSql+"::GetSelecSql"+GetNombreClaseC(tableSchema.ToString())+sSufijoNombre+"($this->connexion,$this->parameterDbType,$sFinalQuery,$pagination,ME_USO_VARIABLES);";//,$parametroGeneralUsuario,$moduloActual,$opcionActual,$usuarioActual//,$this->connexionType
							
							strBodyFuncion+="\r\n\r\n\t\t\t"+strCommentProceso+strObjetoLogic+"->getEntitiesWithQuerySelectWithFinalQuery($sQuerySelect, $sFinalQueryFinal);";
						} else {
							strBodyFuncion+="\r\n\t\t\t"+strObjetoLogicProceso+".Busqueda"+GetNombreClaseC(tableSchema.ToString())+sSufijoNombre+"($this->connexion,$this->parameterDbType,$sFinalQuery,$pagination,ME_USO_VARIABLES);";//,$parametroGeneralUsuario,$moduloActual,$opcionActual,$usuarioActual//,$this->connexionType							
						}
						
						strBodyFuncion+="\r\n\r\n\t\t\t"+strCommentProceso+"$this->"+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+strObjetoLogic+"->get"+GetNombreClaseC(tableSchema.ToString())+"s();";
						
						strBodyFuncion+="\r\n\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFuncionesAdditional::check"+GetNombreClase(TablaBase.ToString())+"ToGets($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s,$this->datosCliente);";
						strBodyFuncion+="\r\n\t\t\t//$this->update"+GetNombreClase(TablaBase.ToString())+"ToGetsAuxiliar($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s);";
			
						if(blnEsProcesoLocal) {
							strBodyFuncion+="\r\n\r\n\t\t\t$generalEntityReturnGeneral=new GeneralEntityReturnGeneral();";		
							strBodyFuncion+="\r\n\r\n\t\t\t$generalEntityReturnGeneral="+GetNombreClaseC(tableSchema.ToString())+"LogicAdditional::ProcesarInformacion"+GetNombreClaseC(tableSchema.ToString())+"($"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+",$this->"+GetNombreClaseObjetoC(tableSchema.ToString())+"s,new GeneralEntityParameterGeneral(),$generalEntityReturnGeneral,\""+indexSchema.Name+"\",ME_USO_VARIABLES);";//parametroGeneralUsuario,moduloActual,opcionActual,usuarioActual,
						}
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							/*
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setPagination(pagination);";	
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
							*/
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
						//strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClase(tableSchema.ToString())+"Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),\""+indexSchema.Name+"\",\"\",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());";
			
						//strEndBodyFuncion+="\r\n\r\n\t\t\t//"+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
						//ANTERIOR COMMIT
						//strEndBodyFuncion+="\r\n\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.commit();\r\n\t\t\t}";
						strEndBodyFuncion+=strWithConnectionCommit;
						
						//ANTERIOR CLOSE
						//strEndFuncion="\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t} finally {\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n";
						strEndFuncion="\r\n\t\t} catch(Exception $e) {"+strWithConnectionRollBack+"\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t}\r\n\t}\r\n";// finally {"+strWithConnectionClose+"\r\n\t\t}";
						
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								} else {
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strParametersFuncion+=","+/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										strParametersNameFuncion+=",$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
									}	
								}
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
									
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
								else
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
									
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+") {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					//strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+" {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"").Replace(strWithConnectionClose,"");
					
					strFunctions=strFunctions.Replace("ME_USO_VARIABLES",strParametersNameFuncion);
					
					strInitFuncion+=strFunctions;
				}
			}
			
								
			return strInitFuncion; 
		}
		
		
public String GetForeignKeysDescriptions(TableSchema TablaBase)  {
	return GetForeignKeysDescriptionsC(TablaBase);
	
	/*
	String strHtml="";
	String strTituloColumna="";
	String strGetColumnsFaces="";
								
	string strPrefijo=String.Empty;
	string strPrefijoTabla=GetPrefijoTablaC();
	string strPrefijoFuncion="set";
	string strPrefijoTipo ="";
	string strNombre ="";
	
	for (int i = 0; i < TablaBase.Columns.Count; i++){		
		strPrefijoTipo = GetPrefijoTipoC(TablaBase.Columns[i]);	
		strPrefijo=strPrefijoFuncion;		
		strNombre = GetNombreColumnaClaseC(TablaBase.Columns[i]);
	
		if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])) { continue; }
		
		if(EsPathImagenDocumentoArchivoColumn(TablaBase.Columns[i])) {
			//||TablaBase.Columns[i].IsForeignKeyMember
			continue;
		}
		
		//strTituloColumna=GetColumnsFacesTituloTableMaintenanceC(TablaBase.Columns[i],TablaBasePadre,columnSchemaPadre,esParaForeignKey,TablaBasePadreFK,esMantenimientoDeImagen,ConFaces,ConRichFaces);		
		//strHtmlTitulosColumnas+=GetJQueryHtmlTablaReemplaceTitulo(strTituloColumna);
	
		if(!TablaBase.Columns[i].Name.Equals(strId)) {
			if(TablaBase.Columns[i].IsForeignKeyMember) {
				//strHtml+="\r\n\t\t\t\t$this->htmlTabla"+GetNombreClaseC(TablaBase.ToString())+"s.='<td> '."+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::getRelationship_"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(TablaBase.Columns[i]))+"Descripcion($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->getRelationship_"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(TablaBase.Columns[i]))+"()).'</td>';";
				strHtml+="\r\n\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strPrefijo+strPrefijoTabla+strPrefijoTipo+strNombre+strDescription+"("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::get"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(TablaBase.Columns[i]))+"Descripcion($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(TablaBase.Columns[i]))+"()));";//Relationship_
			}
			
			//continue;
		}				
	}
	
	//if(esMantenimientoSimple){
		//BYDAN-TO-DO
		//Trace.WriteLine("ok-ok-ok-ok-ok-ok-ok");
		//strHtml+=GetNavegacionTituloTablaFacesTablasClasesRelacionadasC(TablaBase,esParaForeignKey,ConFaces,ConRichFaces,true);					
		//strHtmlTitulosColumnas+=GetNavegacionTituloSoloTablaFacesTablasClasesRelacionadasC(TablaBase,esParaForeignKey,ConFaces,ConRichFaces,true);
	//}
	
					
	
						
	return strHtml;
	*/
}

public String GetAddClassesRelacionadas() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				strTablaClaseRelacionada+="\r\n\t\t\t\t$classes->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "::$class));";
								
				/*
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
				}
				else
				{
					strTablaClaseRelacionada+="\r\n\tprivate ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;";
				}
				*/
			}
								
			return strTablaClaseRelacionada; 
		}

public String GetAddClassesRelacionadasInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				//strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "::$class));";
				
				strTablaClaseRelacionada+="\r\n\t\t\t\tforeach($classesP as $clas)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\tif($clas->clas=="+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t\t$classes->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));";
				strTablaClaseRelacionada+="\r\n\t\t\t\t\t}\r\n";
				strTablaClaseRelacionada+="\t\t\t\t}\r\n";
				/*
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
				}
				else
				{
					strTablaClaseRelacionada+="\r\n\tprivate ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;";
				}
				*/
			}
								
			return strTablaClaseRelacionada; 
		}

public String GetAddClassesRelacionadasExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			bool blnExiste=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				//strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "::$class));";
				if(!blnExiste)
				{
					blnExiste=true;
				}
				
				strTablaClaseRelacionada+="\r\n\t\t\t\t$existe=false;\r\n";		
				strTablaClaseRelacionada+="\r\n\t\t\t\tforeach($classesP as $clas)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\tif($clas->clas=="+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t\t$existe=true;\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t\tbreak;\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t}\r\n";
				strTablaClaseRelacionada+="\t\t\t\t}\r\n";
						
				strTablaClaseRelacionada+="\r\n\t\t\t\tif(!$existe)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t$classes->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));";
				strTablaClaseRelacionada+="\r\n\t\t\t\t}\r\n";
			}
			
			if(blnExiste)
			{
				strTablaClaseRelacionada="\r\n\t\t\t\t$existe=false;\r\n"+strTablaClaseRelacionada;			
			}
			
			return strTablaClaseRelacionada; 
		}
		
public String GetAddClassesForeignKey()
	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
										
					if(columnSchema.IsForeignKeyMember)
					{
						tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						strClassesForeignKey+="\r\n\t\t\t\t$classes->add(new Classe("+GetNombreClaseC(tableSchema.ToString())+"::$class));";
					}
				}
				
		return strClassesForeignKey;
	}

public String GetAddClassesForeignKeyInclude()
	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
										
					if(columnSchema.IsForeignKeyMember)
					{
						tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						
						strClassesForeignKey+="\r\n\t\t\t\tforeach($classesP as $clas)\r\n";
						strClassesForeignKey+="\t\t\t\t{\r\n";
						strClassesForeignKey+="\t\t\t\t\tif($clas->clas=="+GetNombreClaseC(tableSchema.ToString())+"::$class)\r\n";
						strClassesForeignKey+="\t\t\t\t\t{\r\n";
						strClassesForeignKey+="\t\t\t\t\t\t$classes->add(new Classe("+GetNombreClaseC(tableSchema.ToString())+"::$class));";
						strClassesForeignKey+="\r\n\t\t\t\t\t}\r\n";
						strClassesForeignKey+="\t\t\t\t}\r\n";
					}
				}
				
		return strClassesForeignKey;
	}

public String GetAddClassesForeignKeyExclude()
	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		bool blnExiste=false;
		
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
										
					if(columnSchema.IsForeignKeyMember)
					{
						if(!blnExiste)
						{
							blnExiste=true;
						}
						
						tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						
						strClassesForeignKey+="\r\n\t\t\t\t$existe=false;\r\n";
						strClassesForeignKey+="\r\n\t\t\t\tforeach($classesP as $clas)\r\n";
						strClassesForeignKey+="\t\t\t\t{\r\n";
						strClassesForeignKey+="\t\t\t\t\tif($clas->clas=="+GetNombreClaseC(tableSchema.ToString())+"::$class)\r\n";
						strClassesForeignKey+="\t\t\t\t\t{\r\n";
						strClassesForeignKey+="\t\t\t\t\t\t$existe=true;\r\n";
						strClassesForeignKey+="\t\t\t\t\t\tbreak;\r\n";
						strClassesForeignKey+="\t\t\t\t\t}\r\n";
						strClassesForeignKey+="\t\t\t\t}\r\n";
						
						strClassesForeignKey+="\r\n\t\t\t\tif(!$existe)\r\n";
						strClassesForeignKey+="\t\t\t\t{\r\n";
						strClassesForeignKey+="\t\t\t\t\t$classes->add(new Classe("+GetNombreClaseC(tableSchema.ToString())+"::$class));";
						strClassesForeignKey+="\r\n\t\t\t\t}\r\n";
					}
				}
		
		if(blnExiste)
		{
			strClassesForeignKey="\r\n\t\t\t\t$existe=false;\r\n"+strClassesForeignKey;			
		}
		
		return strClassesForeignKey;
	}
	
public String GetClassClasesRelacionadasForeigKeys(TableSchema tableSchema) 
		{
			String strTablaClaseRelacionada=string.Empty;
										
										
			foreach(ColumnSchema columnSchema in tableSchema.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					strTablaClaseRelacionada+="\t\t$classes->add(new Classe("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "::$class));\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}
		
public String GetXmlFuncionesClasesCompuestos() 
{
	String strFuncion=string.Empty;
	
	if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
	{
				
		for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
		{
			strFuncion+="\r\n\r\n\tpublic function getXml"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s()";
			strFuncion+=" {";
			strFuncion+="\r\n\t\t$xml = '';";
			strFuncion+="\r\n\t\t $classes=array();\r\n";
			strFuncion+="\r\n\t\t$"+strId+"Temporal=-1;\r\n";
			
			strFuncion+="\r\n\t\t"+/*GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+Logic*/"$"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"Logic =new "+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"Logic();";
			strFuncion+="\r\n\t\t"+/*GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+Logic*/"$"+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"Logic =new "+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"Logic();\r\n\r\n";
			
			strFuncion+="\r\n\t\t"+/*GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+*/"$"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"=new "+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"();";
			strFuncion+="\r\n\t\t"+/*GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+*/"$"+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"=new "+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"();\r\n\r\n";
			
			strFuncion+=GetClassClasesRelacionadasForeigKeys(TablasBaseCompuestoJunction[i]);
			
			strFuncion+=GetClassClasesRelacionadasForeigKeys(TablasBaseCompuestoDetalle[i]);
				
			strFuncion+="\r\n\t\ttry"; 
			strFuncion+=" {";
			strFuncion+="\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();";
			
			strFuncion+="\r\n\t\t\t$"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString()) +"Logic->setConnexion($this->connexion);";
			strFuncion+="\r\n\t\t\t$"+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"Logic->setConnexion($this->connexion);";
			
			strFuncion+="\r\n\t\t\t$xml=$xml.\"<?xml version=\\\"1.0\\\"?>\";";
			strFuncion+="\r\n\t\t\t$xml=$xml.\"<"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+" generated=\\\"\\\">\";";	    
				
			strFuncion+="\r\n\r\n\t\t\t\tforeach ("+/*GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+*/"$this->"+ GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s as $"+ GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+" )"; 
			strFuncion+=" {";
			
			strFuncion+="\r\n\t\t\t\t\t$"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"=$"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"->get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"();";
			strFuncion+="\r\n\t\t\t\t\t$"+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"=$"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"->get"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"();\r\n\r\n";
			
			strFuncion+="\r\n\t\t\t\t\t$"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"Logic->deepLoad($"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+", false, DeepLoadType::$INCLUDE, $classes);\r\n";
						
				for (int j = 0; j < TablasBaseCompuestoJunction[i].Columns.Count; j++)
				{ 
					strFuncion+=GetXmlColumnaC(TablasBaseCompuestoJunction[i].Columns[j],TablasBaseCompuestoJunction[i].ToString(),true); 	
				} 	     	
				strFuncion+="\r\n\r\n";
				for (int j = 0; j < TablasBaseCompuestoDetalle[i].Columns.Count; j++)
				{ 
					strFuncion+=GetXmlColumnaCompuestoC(TablasBaseCompuestoDetalle[i].Columns[j],TablasBaseCompuestoDetalle[i].ToString()); 	
				} 	
				
			strFuncion+="\r\n\r\n\t\t\t\t\t$xml=$xml.\"</item>\";";			
			strFuncion+="\r\n\t\t\t\t}\r\n";
					
			strFuncion+="\r\n\t\t\t$xml=$xml.\"</"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+">\";";
					
			strFuncion+="\r\n\t\t\t$this->connexion->getConnection()->commit();";
			strFuncion+="\r\n\t\t}"; 
			strFuncion+=" catch(Exception $e)"; 
			strFuncion+=" {";
			strFuncion+="\r\n\t\t\t$this->connexion->getConnection()->rollback();\r\n\t\t\tFunciones::logShowExceptionMessages($e);";
			strFuncion+="\r\n\t\t\tthrow $e;";
			strFuncion+="\r\n\t\t}";
			strFuncion+=" \r\n\t\t//finally";
			strFuncion+=" //{";
			strFuncion+="\r\n\t\t\t//connexion->getConnection()->close();";
			strFuncion+="\r\n\t\t//}";
				
			strFuncion+="\r\n\t\t\treturn Funciones::validarXml($xml,"+GetNombreClaseC(TablaBase.ToString())+"DataAccess::$TABLENAME);";
				
			strFuncion+="\r\n\t}";
		}
	}
	
	return strFuncion;
}


public String GetInicializacionVariableClasesCompuestos() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					
				strInitFuncion+="\r\n\t\t\t$"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s=array();";/* new ArrayList<+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+">();" ;*/																
																																																		
				}													
			}
								
			return strInitFuncion; 
		}
		
public String GetDefinicionVariableClasesCompuestos() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					
					strInitFuncion+="\r\n\tprivate "+/*"ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+>*/"$";
					strInitFuncion+=GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";																
					/*																																			
					strInitFuncion+="\r\n\r\n\tpublic ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s()"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\treturn "+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";	
					
					strInitFuncion+="\r\n\r\n\tpublic function set"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s(ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> "+GetNombreClaseObjetoC(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjetoC(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s)"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\t$this->"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s="+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";																																				
					*/					
				}													
			}
								
			return strInitFuncion; 
		}

public String GetDefinicionVariableClasesCompuestosGetSet() 
	{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					/*
					strInitFuncion+="\r\n\tprivate "+"ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> ";
					strInitFuncion+=GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";																
					*/																																			
					strInitFuncion+="\r\n\r\n\tpublic function "+/*ArrayList< GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+>*/" get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s()"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\treturn "+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";	
					
					strInitFuncion+="\r\n\r\n\tpublic function set"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s("+/*ArrayList<GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+>*/"$"+GetNombreClaseObjetoC(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjetoC(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s)"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\t$this->"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s="+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";																																				
										
				}													
			}
								
			return strInitFuncion; 
	}
		
public String GetIndicesTablasClasesCompuestos() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			
			String strParametroCompuesto="";
			String strParametroCompuesto2="";
			String strParametroCompuestoFinal2="\r\n\t\t\t$queryWhereSelectParameters2->addParameter($parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"2);";

			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
							strParametroCompuesto2="\r\n\r\n\t\t\t$parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"2= new ParameterSelectionGeneral();";
							strParametroCompuesto2+="\r\n\t\t\t$parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"2->setParameterSelectionGeneralEqual(ParameterType::$LONG,$"+strId+GetNombreClase(TablaBase.ToString())+","+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"DataAccess::"+strId+GetNombreClase(TablaBase.ToString())+",ParameterTypeOperator::$NONE,'','');";
					
							strParametroCompuesto="\r\n\r\n\t\t\t$parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"= new ParameterSelectionGeneral();";
							strParametroCompuesto+="\r\n\t\t\t$parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"->setParameterSelectionGeneralEqual(ParameterType::$LONG,"+strId+GetNombreClase(TablaBase.ToString())+","+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"DataAccess::"+strId+GetNombreClase(TablaBase.ToString())+",ParameterTypeOperator::$AND);";
							strParametroCompuesto+="\r\n\t\t\t$queryWhereSelectParameters->addParameter($parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+");";

							strInitFuncion+="\r\n\tpublic function get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"sTodos($strFinalQuery,$"+strId+GetNombreClase(TablaBase.ToString())+")"; 
							strInitFuncion+="\r\n\t{\r\n\t\t";
							strInitFuncion+="\r\n\t\ttry\r\n\t\t{\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();";		
							strInitFuncion+="\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');";	
							strInitFuncion+=strParametroCompuesto.Replace("ParameterTypeOperator::$AND","ParameterTypeOperator::$NONE");
							strInitFuncion+="\r\n\r\n\t\t\t$queryWhereSelectParameters->setFinalQuery($strFinalQuery);\r\n\t\t\t";
							strInitFuncion+="$"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s=$this->"+GetNombreClaseObjeto(TablaBase.ToString())+"DataAccess->getEntities" +strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"($this->connexion,$queryWhereSelectParameters,$queryWhereSelectParameters);";												
							strInitFuncion+="\r\n\t\t\t$this->connexion->getConnection()->commit();\r\n\t\t} ";
							strInitFuncion+="\r\n\t\t\tcatch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\t$this->connexion->getConnection()->rollback();\r\n\t\t\tthrow $e;\r\n\t\t} \r\n\t\t//finally {\r\n\t\t\t//connexion->getConnection()->close();";	
							strInitFuncion+="\r\n\t\t}\r\n\t//}\r\n";
							
					foreach(IndexSchema indexSchema in TablasBaseCompuestoDetalle[i].Indexes)
					{
						
						

						
						if(!indexSchema.IsPrimaryKey)
						{
							
						
							strParametersFuncion="";
							strParametersNameFuncion="";
						
							if(indexSchema.IsUnique)
							{
								continue;
								/*
								strInitFuncion+="\r\n\tpublic function "+"Get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+indexSchema.Name+"(";
								strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();\r\n";
								strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');";		
								strEndBodyFuncion="\r\n\r\n\t\t\t$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"=$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess->getEntity($this->connexion,$queryWhereSelectParameters);";
								strEndBodyFuncion+="\r\n\r\n\t\t\t$this->connexion->getConnection()->commit();";
								strEndFuncion="\r\n\t\t}\r\n\t\tcatch(Exception $e)\r\n\t\t{\r\n\t\t\tthrow $e;\r\n\t\t}\r\n\t\t//finally\r\n\t\t//{\r\n\t\t\t//connexion->getConnection()->close();\r\n\t\t}\r\n\t//}\r\n";
								*/
							}
							else
							{
								
								if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
								{
									strInitFuncion+="\r\n\tpublic function "+"get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s"+indexSchema.Name+"($strFinalQuery,$"+strId+GetNombreClase(TablaBase.ToString())+",";
								}
								else
								{
									strInitFuncion+="\r\n\tpublic function "+"get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s"+indexSchema.Name+"(";
								}
								
								strBodyFuncion="\r\n\t\ttry {\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();\r\n";
								
								if(indexSchema.Name.Contains("Busqueda"))
								{
									strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');\r\n";		
									strBodyFuncion+=strParametroCompuesto;
									strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters->setFinalQuery($strFinalQuery);";	
									
									strBodyFuncion+="\r\n\r\n\t\t\t$queryWhereSelectParameters2=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');\r\n";		
									strBodyFuncion+=strParametroCompuesto2;
									strBodyFuncion+=strParametroCompuestoFinal2;
											
								}
								else
								{
									strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');\r\n";		
									strBodyFuncion+=strParametroCompuesto;
									
									strBodyFuncion+="\r\n\r\n\t\t\t$queryWhereSelectParameters2=new QueryWhereSelectParameters(ParameterDbType::$DB2,'');\r\n";		
									strBodyFuncion+="\r\n\r\n\t\t\t"+strParametroCompuesto2;
									strBodyFuncion+=strParametroCompuestoFinal2;
								}
								
								strEndBodyFuncion="\r\n\r\n\t\t\t$"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s=$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess->getEntities"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"($this->connexion,$queryWhereSelectParameters,$queryWhereSelectParameters2);";
								strEndBodyFuncion+="\r\n\r\n\t\t\t$this->connexion->getConnection()->commit();";
								strEndFuncion="\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t} \r\n\t\t//finally {\r\n\t\t\t//connexion->getConnection()->close();\r\n\t\t//}\r\n\t}\r\n";
							
							}	
							int count=1;	
							strParametersFuncion="";
							strParametersNameFuncion="";	
							strParameterSelection="";
							
							bool esUnico=false;
							bool esRanges=false;
							
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
							{
								if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
									esRanges=true;
								} else {
									esRanges=false;
								}
								
								
									if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
									{
										strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
										strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								
										if(indexSchema.IsUnique)
										{
											esUnico=true;
										}						
									
										if(!count.Equals(indexSchema.MemberColumns.Count))
										{
											//NORMAL FUNCIONABA
											//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,true);
											strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,true,false,esRanges,false);
										}
										else
										{	//NORMAL FUNCIONABA
											//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,true);
											strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,true,false,esRanges,false);
										}
									
										if(!indexSchema.MemberColumns.Count.Equals(count))
										{					
											strParametersFuncion+=",";
											strParametersNameFuncion+=",";	
										}
									}
									else
									{
										if(!indexSchema.Name.Contains("BusquedaRango"))
										{
											strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
											strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
										}
										else
										{
											strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
											strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
											
											strParametersFuncion+=",";
											strParametersNameFuncion+=",";	
											
											strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
											strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									
										}
										strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
										break;
									}
									
								count++;
							}
							
							strInitFuncion+=strParametersFuncion+") {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";																																			
						}
					}
				}													
			}
								
			return strInitFuncion; 
		}

public String GetMaintenanceTablasClasesRelacionadas() 
		{
			String strTablaClaseRelacionada="";
			String strTablaClaseRelacionada3="";
			String strTablaClaseRelacionada4="";
			
			String strFuncionInit="\r\n\tpublic function save"+GetNombreClase(TablaBase.ToString())+"RelacionesWithConnection("+/*GetNombreClase(TablaBase.ToString()) +*/"$"+GetNombreClaseObjetoC(TablaBase.ToString());
			String strFuncionMiddle=") {\r\n";
			strFuncionMiddle+="\t\ttry {\r\n\t\t\t$this->getNewConnexionToDeep();\r\n\t";
			String strFuncionEnd="\r\n\r\n\t\t\t$this->connexion->getConnection()->commit();";
				   strFuncionEnd="\r\n\r\n\t\t\t$this->connexion->getConnection()->close();";
				   strFuncionEnd+="\r\n\r\n\t\t} catch(Exception $e) {";
				   strFuncionEnd+="\r\n\t\t\t$this->connexion->getConnection()->rollback();";
				   strFuncionEnd+="\r\n\t\t\t$this->connexion->getConnection()->close();";
				   strFuncionEnd+="\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\r\n\t\t\tthrow $e;\r\n\t\t} \r\n\t\t//finally {\r\n\t\t\t//$this->closeNewConnexionToDeep();\r\n\t\t//}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,false);
			String strNombreAdicional="";
			
			if(!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) {
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
										
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						strTablaClaseRelacionada+=","+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/ "$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"=null";
						strTablaClaseRelacionada4+="\r\n\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+");";
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
						strTablaClaseRelacionada+=","+/*ArrayList<GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+>*/"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s=array()";
						strTablaClaseRelacionada4+="\r\n\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString()) +"->set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional + "s);";
					}
				}
			}
			
			bool blnEsPrimero=true;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					if(!blnEsPrimero) {
					  strTablaClaseRelacionada3+=",";
					}
					
					blnEsPrimero=false;
					
					strTablaClaseRelacionada3+="$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					if(!blnEsPrimero) {
					  strTablaClaseRelacionada3+=",";
					}
					
					blnEsPrimero=false;
					
					strTablaClaseRelacionada3+="$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
				}
			}
			
			String strTablaClaseRelacionada2="";
			strTablaClaseRelacionada2+=strTablaClaseRelacionada4;
			strTablaClaseRelacionada2+="\r\n\t\t\t$this->set"+GetNombreClaseC(TablaBase.ToString())+"($"+GetNombreClaseObjetoC(TablaBase.ToString()) +");";
			
			
			if(!blnEstablaModulo && TieneIdentityColumnC(TablaBase) && !blnEsTablaUnoAUnoFk) {
				strTablaClaseRelacionada2+="\r\n\r\n\t\t\tif("+GetNombreClaseC(TablaBase.ToString())+"LogicAdditional::validarSaveRelaciones($"+GetNombreClaseObjetoC(TablaBase.ToString()) +",$this)) {";
				strTablaClaseRelacionada2+="\r\n\r\n\t\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"LogicAdditional::updateRelacionesToSave($"+GetNombreClaseObjetoC(TablaBase.ToString()) +",$this);";
			}
			
			strTablaClaseRelacionada2+="\r\n\r\n\t\t\t\tif(($this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"->getIsNew() || $this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"->getIsChanged()) && !$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"->getIsDeleted()"+")";
			strTablaClaseRelacionada2+=" {";
			strTablaClaseRelacionada2+="\r\n\t\t\t\t\t$this->save"+GetNombreClaseC(TablaBase.ToString())+"();";
			strTablaClaseRelacionada2+="\r\n\t\t\t\t\t$this->save"+GetNombreClaseC(TablaBase.ToString())+"RelacionesDetalles("+strTablaClaseRelacionada3+");";
			strTablaClaseRelacionada2+="\r\n\r\n\t\t\t\t}";
			strTablaClaseRelacionada2+=" else if($this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"->getIsDeleted())";
			strTablaClaseRelacionada2+=" {";
			strTablaClaseRelacionada2+="\r\n\t\t\t\t\t$this->save"+GetNombreClaseC(TablaBase.ToString())+"RelacionesDetalles("+strTablaClaseRelacionada3+");";
			strTablaClaseRelacionada2+="\r\n\t\t\t\t\t$this->save"+GetNombreClaseC(TablaBase.ToString())+"();";
			strTablaClaseRelacionada2+="\r\n\t\t\t\t}";
			
			if(!blnEstablaModulo && TieneIdentityColumnC(TablaBase) && !blnEsTablaUnoAUnoFk) {
				strTablaClaseRelacionada2+="\r\n\r\n\t\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"LogicAdditional::updateRelacionesToSaveAfter($"+GetNombreClaseObjetoC(TablaBase.ToString()) +",$this);\r\n";
			}
			
			if(!blnEstablaModulo && TieneIdentityColumnC(TablaBase) && !blnEsTablaUnoAUnoFk) {
				strTablaClaseRelacionada2+="\r\n\t\t\t} else {";
				strTablaClaseRelacionada2+="\r\n\t\t\t\tthrow new Exception('LOS DATOS SON INVALIDOS');";
				strTablaClaseRelacionada2+="\r\n\t\t\t}";
			}
			
			strTablaClaseRelacionada=strFuncionInit+strTablaClaseRelacionada+strFuncionMiddle+strTablaClaseRelacionada2+strFuncionEnd;
			return strTablaClaseRelacionada; 
		}
	
	public String GetMaintenanceTablasClasesRelacionadasDetallesLlamar() {
		String strTablaClaseRelacionada="";
		
		int intNumeroMaximoNiveles=1;
		
		strTablaClaseRelacionada=GetMaintenanceTablasClasesRelacionadasDetalles(TablaBase,TablaBase,true,"",ref intNumeroMaximoNiveles);
		
		return strTablaClaseRelacionada;
	}
	
	public String GetMaintenanceTablasClasesRelacionadasDetalles(TableSchema tableSchema,TableSchema tableSchemaPadre,bool esClasePrincipal,String sTablAcumulado,ref int intNumeroMaximoNiveles) {
			String strTablaClaseRelacionada="";
			String strFuncionInit="\r\n\tpublic function save"+GetNombreClase(tableSchema.ToString())+"RelacionesDetalles(";
			String strFuncionMiddle=") {\r\n";
			strFuncionMiddle+="\t\ttry {\r\n\t";
			String strFuncionEnd="\r\n\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t}\r\n\t}";
			String strPrefijoAutoRef="";
			String strPrefijoNivel="_Desde_"+GetNombreClase(tableSchema.ToString());//"Nivel"+intNumeroMaximoNiveles;
			int intNumeroMaximoNivelesAnterior=intNumeroMaximoNiveles - 1;
			String strPrefijoNivelAnterior="_Desde_"+GetNombreClase(tableSchemaPadre.ToString());//"Nivel"+intNumeroMaximoNivelesAnterior;
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(tableSchema,false);
			System.Collections.Hashtable tablasRelacionadasHijo=new Hashtable();
			
			bool blnEsPrimero=true;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			TableSchema tablaRelacionadaObjetivo;
			bool encontrado=false;
			String sClasesNoRelacionadas=String.Empty;
			String[] sClases;
			bool blClaseNo=false;
			
			if(!esClasePrincipal) {
				strFuncionInit="";
				strFuncionMiddle="";
				strFuncionEnd="";
			}
			
			if(esClasePrincipal) {
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					} else {
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
					}
									
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					
					//NO FUNCIONA EN DESORDEN RELACIONES
					/*
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
						//continue;
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}
					*/
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						if(!blnEsPrimero) {
						strTablaClaseRelacionada+=",";
						}
						
						blnEsPrimero=false;
						
						strTablaClaseRelacionada+=/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)*/ "$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"=null";
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
						if(!blnEsPrimero) {
						strTablaClaseRelacionada+=",";
						}
						
						blnEsPrimero=false;
						strTablaClaseRelacionada+=/*strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "*/"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+ "s=array()";
					}
				}
			}
			
			String strTablaClaseRelacionada2="";
			
			bool blnExisteDetalles=false;
			
			arrayListRelaciones=new ArrayList();
			strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
				strPrefijoAutoRef="";
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				if(tablaRelacionadaObjetivo.Name.Equals(tableSchema.Name)) {
					strPrefijoAutoRef="Hijos";	
				}
				
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				
				//NO FUNCIONA EN DESORDEN RELACIONES
				/*
				if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					//continue;
				} else {
					strNombreAdicional="";
					arrayListRelaciones.Add(collectionInfo.SecondaryTable);
				}
				*/
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					blnExisteDetalles=true;
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+sTablAcumulado+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic "*/"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic();";
					
					if(esClasePrincipal) {
						strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+".set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+");";//strPrefijoNivelAnterior+
					} else {
						strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+sTablAcumulado+"if($"+GetNombreClaseObjetoC(tableSchema.ToString())+strPrefijoNivelAnterior+"->get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"()==null){";
						strTablaClaseRelacionada2+="\r\n\t\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC(tableSchema.ToString())+strPrefijoNivelAnterior+"->set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"(new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"());";
						strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"}\r\n";
						
						strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"($"+GetNombreClaseObjetoC(tableSchema.ToString())+strPrefijoNivelAnterior+"->get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"());";		
					}
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+sTablAcumulado+"if($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"()!=null) {";										
					strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"()->set"+strIdGetSet+"($id"+GetNombreClaseC(tableSchema.ToString())+"Actual);";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"}\r\n";
					
					strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->setConnexion($this->getConnexion());";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->setDatosCliente($this->datosCliente);";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->save"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"();";
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
					blnExisteDetalles=true;
					tablasRelacionadasHijo=GetTablasRelacionadas(collectionInfo.SecondaryTableSchema,false);
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+sTablAcumulado+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic "*/"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic();";
					if(esClasePrincipal) {
						strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"s($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s);";
					} else {
						strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+sTablAcumulado+"if($"+GetNombreClaseObjetoC(tableSchema.ToString())+strPrefijoNivelAnterior+"->get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s()==null){";
						strTablaClaseRelacionada2+="\r\n\t\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC(tableSchema.ToString())+strPrefijoNivelAnterior+"->set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s(array());";
						strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"}\r\n";
						
						strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"s($"+GetNombreClaseObjetoC(tableSchema.ToString())+strPrefijoNivelAnterior+"->get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s());";		
					}
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->setConnexion($this->getConnexion());";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->setDatosCliente($this->datosCliente);";
						
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+sTablAcumulado+"foreach($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strPrefijoAutoRef+strPrefijoNivel+") {";//"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+" "
					strTablaClaseRelacionada2+="\r\n\t\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strPrefijoAutoRef+strPrefijoNivel+"->set"+GetParameterClaseDeepRelacionadoC(collectionInfo)+"($id"+GetNombreClaseC(tableSchema.ToString())+"Actual);";																			
					if(tablasRelacionadasHijo.Count>0) {
						strTablaClaseRelacionada2+="\r\n\r\n\t\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->set"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strPrefijoAutoRef+strPrefijoNivel+");";
						strTablaClaseRelacionada2+="\r\n\t\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->save"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"();";
						
						//PARA NIETOS
						if(!collectionInfo.SecondaryTableSchema.Name.Equals(tableSchema.Name)) {
							if(intNumeroMaximoNiveles<=intNumeroMaximoNivelesGlobal) {
								intNumeroMaximoNiveles++;
								
								if(tablasRelacionadasHijo.Count<=intNumeroMaximoRelacionesHijoGlobal) {
									strTablaClaseRelacionada2+=GetMaintenanceTablasClasesRelacionadasDetalles(collectionInfo.SecondaryTableSchema,tableSchema,false,sTablAcumulado+"\t",ref intNumeroMaximoNiveles);
								}
							}
						}
					}				
					strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"}\r\n";
					
					if(tablasRelacionadasHijo.Count<=0) {
						strTablaClaseRelacionada2+="\r\n\t\t\t"+sTablAcumulado+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic"+strPrefijoAutoRef+strPrefijoNivel+"->save"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"s();";
					}
				}
			}
			
			if(blnExisteDetalles){
				if(esClasePrincipal) {
					strTablaClaseRelacionada2="\r\n\r\n\t\t\t"+sTablAcumulado+"$id"+GetNombreClaseC(tableSchema.ToString())+"Actual=$this->get"+GetNombreClaseC(tableSchema.ToString())+"()->get"+strIdGetSet+"();"+strTablaClaseRelacionada2;
				} else {
					strTablaClaseRelacionada2="\r\n\r\n\t\t\t"+sTablAcumulado+"$id"+GetNombreClaseC(tableSchema.ToString())+"Actual=$"+GetNombreClaseObjetoC(tableSchema.ToString())+/*strPrefijoAutoRef+*/strPrefijoNivelAnterior+"->get"+strIdGetSet+"();"+strTablaClaseRelacionada2;
				}
			}
			
			strTablaClaseRelacionada=strFuncionInit+strTablaClaseRelacionada+strFuncionMiddle+strTablaClaseRelacionada2+strFuncionEnd;
			
			return strTablaClaseRelacionada; 
	}
	
	/*
	public String GetMaintenanceTablasClasesRelacionadasDetalles(TableSchema tableSchema,TableSchema tableSchemaPadre,bool esClasePrincipal,String sTablAcumulado,ref int intNumeroMaximoNiveles) 
		{
			String strTablaClaseRelacionada="";
			String strFuncionInit="\r\n\tprivate function save"+GetNombreClase(TablaBase.ToString())+"RelacionesDetalles(";
			String strFuncionMiddle=") {\r\n";
			strFuncionMiddle+="\t\ttry {\r\n\t";
			String strFuncionEnd="\r\n\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,false);
			
			bool blnEsPrimero=true;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					if(!blnEsPrimero) {
					  strTablaClaseRelacionada+=",";
					}
					
					blnEsPrimero=false;
					
					strTablaClaseRelacionada+=","+ "$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);//GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					if(!blnEsPrimero) {
					  strTablaClaseRelacionada+=",";
					}
					
					blnEsPrimero=false;
					
					strTablaClaseRelacionada+=","+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";//ArrayList<GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+>
				}
			}
			
			String strTablaClaseRelacionada2="";
			
			bool blnExisteDetalles=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					blnExisteDetalles=true;
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +"Logic=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic();";//GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+Logic
					strTablaClaseRelacionada2+="\r\n\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"($this->"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+");";
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\tif($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"()!=null) {";										
					strTablaClaseRelacionada2+="\r\n\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"()->set"+strIdGetSet+"($id"+GetNombreClaseC(TablaBase.ToString())+"Actual);";
					strTablaClaseRelacionada2+="\r\n\t\t\t}\r\n";
					
					strTablaClaseRelacionada2+="\r\n\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->setConnexion($this->getConnexion());";
					strTablaClaseRelacionada2+="\r\n\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->setDatosCliente($this->datosCliente);";
					strTablaClaseRelacionada2+="\r\n\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->save"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"();";
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					blnExisteDetalles=true;
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+"$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +"Logic=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic();";//GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+Logic
					strTablaClaseRelacionada2+="\r\n\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"s($this->"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s);";
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\tforeach($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"s()"+" as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+") {";//GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+
					strTablaClaseRelacionada2+="\r\n\t\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +"->setField_"+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"($id"+GetNombreClaseC(TablaBase.ToString())+"Actual);";
					strTablaClaseRelacionada2+="\r\n\t\t\t}\r\n";
					
					strTablaClaseRelacionada2+="\r\n\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->setConnexion($this->getConnexion());";
					strTablaClaseRelacionada2+="\r\n\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->setDatosCliente($this->datosCliente);";
					strTablaClaseRelacionada2+="\r\n\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic->save"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"s();";
				}
			}
			
			if(blnExisteDetalles)
			{
				strTablaClaseRelacionada2="\r\n\t\t\t$id"+GetNombreClaseC(TablaBase.ToString())+"Actual=$this->get"+GetNombreClaseC(TablaBase.ToString())+"()->get"+strIdGetSet+"();"+strTablaClaseRelacionada2;
			}
			
			strTablaClaseRelacionada=strFuncionInit+strTablaClaseRelacionada+strFuncionMiddle+strTablaClaseRelacionada2+strFuncionEnd;
			return strTablaClaseRelacionada; 
		}
	*/	
		
	public String SetClasesRelacionadasForeigKeysisDeepSaveBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="get"+GetPrefijoRelacionC();
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionada+="\r\n\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$this->connexion);\r\n";
					
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysisDeepSaveBeepInclude() 
		{	
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;							
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strNombreAdicional="";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strNombreAdicional=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema)).Replace(GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)),"");
					
					strTablaClaseRelacionadasave="\r\n\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$this->connexion);\r\n";
					//BYDAN-TOCATALOGOS
					strTablaClaseRelacionada+="\r\n\t\t\tif($clas->clas=="+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"::$class.'"+strNombreAdicional+"')\r\n\t\t\t{"+ strTablaClaseRelacionadasave+"\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysisDeepSaveBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;						
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFor="\r\n\t\tforeach($clases as $clas)\r\n\t\t{";
			String strNombreAdicional="";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					
					strNombreAdicional=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema)).Replace(GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)),"");
					
					strTablaClaseRelacionadasave="\r\n\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$this->connexion);\r\n";
					strTablaClaseRelacionada+="\r\n\r\n\t\t$existe=false;\r\n\r\n"+strInitFor;
					strTablaClaseRelacionada+="\r\n\t\t\tif($clas->clas=="+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"::$class.'"+strNombreAdicional+"')\r\n\t\t\t{\r\n\t\t\t\t$existe=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!$existe)\r\n\t\t{"+ strTablaClaseRelacionadasave+"\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepSaveBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionada+="\r\n\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$this->connexion);\r\n";
					strTablaClaseRelacionada+="\t\t"+/*GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+Logic*/"$"+GetNombreClaseObjeto("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic($this->connexion);\r\n";
					strTablaClaseRelacionada+="\t\t$"+GetNombreClaseObjeto("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"Logic->deepLoad($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t\t\t\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepSaveBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;							
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();			
			String strNombreAdicional="";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strNombreAdicional=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema)).Replace(GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)),"");

					strTablaClaseRelacionadasave="\r\n\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$this->connexion);\r\n";
					
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t\t"+/*GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+Logic*/"$"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic($this->connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t\t$"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic->deepLoad($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$isDeep,$deepLoadType,$clases);"+"\t\t\t\t";
				
					strTablaClaseRelacionada+="\r\n\t\t\tif($clas->clas=="+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"::$class.'"+strNombreAdicional+"')\r\n\t\t\t{"+ strTablaClaseRelacionadasave+strTablaClaseRelacionadaLogicisDeepSave+"\r\n\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysNoisDeepSaveBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;	
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			String strTablaClaseRelacionadaLogic=string.Empty;
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();	
			String strInitFor="\r\n\t\tforeach($clases as $clas)\r\n\t\t{";
			String strNombreAdicional="";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strNombreAdicional=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema)).Replace(GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)),"");

					strTablaClaseRelacionadasave="\r\n\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",$this->connexion);\r\n";
					
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t"+/*GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+Logic*/"$"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"Logic($this->connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t$"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic->deepLoad($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t\t\t\r\n";
				
					strTablaClaseRelacionada+="\r\n\r\n\t\t$existe=false;\r\n\r\n"+strInitFor+"\r\n\t\t\tif($clas->clas=="+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"::$class.'"+strNombreAdicional+"')\r\n\t\t\t{\r\n\t\t\t\t$existe=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!$existe)\r\n\t\t{"+ strTablaClaseRelacionadasave+strTablaClaseRelacionadaLogicisDeepSave+"\t\t}";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}	
		
public String SetClasesRelacionadasForeigKeysisDeepLoadBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="set"+GetPrefijoRelacionC();
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionada+="\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion;						
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysisDeepLoadBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;							
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strNombreAdicional="";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strNombreAdicional=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema)).Replace(GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)),"");
					
					strTablaClaseRelacionadaReturn="\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\r\n\t\t\tif($clas->clas=="+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"::$class.'"+strNombreAdicional+"') {\r\n"+ strTablaClaseRelacionadaReturn+"\t\t\t\tcontinue;\r\n\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysisDeepLoadBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;							
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFor="\r\n\t\tforeach($clases as $clas)\r\n\t\t{";
			String strNombreAdicional="";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strNombreAdicional=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema)).Replace(GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)),"");
					
					strTablaClaseRelacionadaReturn="\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\r\n\t\t$existe=false;\r\n"+strInitFor;
					strTablaClaseRelacionada+="\r\n\t\t\tif($clas->clas=="+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"::$class.'"+strNombreAdicional+"') {\r\n\t\t\t\t$existe=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\r\n\t\tif(!$existe) {\r\n"+ strTablaClaseRelacionadaReturn+"\t\t}";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepLoadBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strTablaClaseRelacionada+="\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion;						
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\t\t"+/*GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+Logic*/"$"+GetNombreClaseObjeto("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic($this->connexion);\r\n";
					strTablaClaseRelacionada+="\t\t$"+GetNombreClaseObjeto("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"Logic->deepLoad($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t\t\t\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepLoadBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;	
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();	
			String strNombreAdicional="";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					
					strNombreAdicional=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema)).Replace(GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)),"");

					strTablaClaseRelacionadaReturn="\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t\t"+/*GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+Logic*/"$"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic($this->connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t\t$"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic->deepLoad($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$isDeep,$deepLoadType,$clases);"+"\t\t\t\t";
				
					strTablaClaseRelacionada+="\r\n\t\t\tif($clas->clas=="+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"::$class.'"+strNombreAdicional+"') {\r\n"+ strTablaClaseRelacionadaReturn+strTablaClaseRelacionadaLogicisDeepSave+"\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysNoisDeepLoadBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;		
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();
			String strInitFor="\r\n\t\tforeach($clases as $clas)\r\n\t\t{";
			String strNombreAdicional="";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema)))
					{
					continue;
					}
					strNombreAdicional=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema)).Replace(GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)),"");

					strTablaClaseRelacionadaReturn="\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t"+/*GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+Logic*/"$"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic($this->connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t$"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic->deepLoad($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t\t\t\r\n";
				
					strTablaClaseRelacionada+="\r\n\r\n\t\t$existe=false;\r\n\r\n"+strInitFor+"\r\n\t\t\tif($clas->clas=="+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"::$class.'"+strNombreAdicional+"') {\r\n\t\t\t\t$existe=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\r\n\t\tif(!$existe) {\r\n"+ strTablaClaseRelacionadaReturn+strTablaClaseRelacionadaLogicisDeepSave+"\t\t}";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}	

public bool ExisteClasesRelacionadasForeigKeys() 
		{
			bool existe= false;
										
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					 existe= true;
				}
			}
								
			return existe; 
		}

public String GetClassClasesRelacionadasForeigKeys() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
										
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					strTablaClaseRelacionada+="$classes->add(new Classe("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "::$class));\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String GetIndicesTablasClasesisDeepSave() 
		{
			String strSufijoRelacionRecursivo="";
			bool existeClaseForeign=false;
			bool existeClaseRelacionada=false;
			
			
			String strInit="\r\n"+GetNombreClaseC(TablaBase.ToString())+"DataAccess::save($"+GetNombreClaseObjeto(TablaBase.ToString())+", $this->connexion);\r\n";
												
			String strTablaClaseRelacionada2=string.Empty;
			System.Collections.Hashtable tablasRelacionadas2=GetTablasRelacionadas(TablaBase);
			String strInitNone="\r\n\tif($deepLoadType==DeepLoadType::$NONE) {\r\n";
			String strInitInclude="\telse if($deepLoadType==DeepLoadType::$INCLUDE) {\r\n";
			String strInitExclude="\telse if($deepLoadType==DeepLoadType::$EXCLUDE) {\r\n";
			String strInitFor="\r\n\t\tforeach($clases as $clas) {";
			String strInitIfClass="\r\n\t\t\tif($clas->clas==";
			
			String strFuncionInclude=string.Empty;
			String strFuncionExclude=string.Empty;
			
            strTablaClaseRelacionada2="\r\nelse {"+strInitNone +SetClasesRelacionadasForeigKeysNoisDeepSaveBeep();
			
			strFuncionInclude="";
			strFuncionExclude="";
			
			existeClaseForeign=ExisteClasesRelacionadasForeigKeys(); 
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				strFuncionInclude+="\r\n"+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class&&$clas->blnActivo) {\r\n";
				strFuncionInclude+="\t\t\t\t$clas->blnActivo=false;\r\n";
				strFuncionExclude+="\r\n\r\n\r\n\t\t$existe=false;\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class&&$clas->blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\t$clas->blnActivo=false;\r\n";
				strFuncionExclude+="\t\t\t\t$existe=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!$existe) {\r\n";

				existeClaseRelacionada=true;
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada2+="\t\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"()->set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$this->connexion);";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic->deepSave($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$isDeep,$deepLoadType,$clases);\r\n";
					
					strFuncionInclude+="\t\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
					strFuncionInclude+="\r\n\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"()->set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());";					
					strFuncionInclude+="\r\n\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$this->connexion);";					
					strFuncionInclude+="\r\n\t\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic->deepSave($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$isDeep,$deepLoadType,$clases);\r\n";
					
					strFuncionExclude+="\t\t\t\t"+"$clases->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));\r\n";					
					strFuncionExclude+="\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic */"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
					strFuncionExclude+="\r\n\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"()->set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());";					
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$this->connexion);";										
					strFuncionExclude+="\r\n\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic->deepSave($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$isDeep,$deepLoadType,$clases);\r\n";
		
				}
				else
				{
					if(TablaBase.Name!=collectionInfo.SecondaryTable){ strSufijoRelacionRecursivo=""; }
					else {strSufijoRelacionRecursivo="Recursivo";}
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
					//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
						strTablaClaseRelacionada2+="\r\n\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ */GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+") {\r\n";
						strTablaClaseRelacionada2+="\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic */"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";					
						strTablaClaseRelacionada2+="\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+"->set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());\r\n";
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n";				
						strTablaClaseRelacionada2+="\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic->deepSave($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t}\r\n";
						
						strFuncionInclude+="\r\n\t\t\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+") {\r\n";
						strFuncionInclude+="\t\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
						strFuncionInclude+="\t\t\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+"->set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());\r\n";						
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n";								
						strFuncionInclude+="\t\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic->deepSave($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t\t\t}\r\n";
						
						strFuncionExclude+="\t\t\t"+"$clases->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+") {\r\n";
						strFuncionExclude+="\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
						strFuncionExclude+="\t\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+"->set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n";												
						strFuncionExclude+="\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic->deepSave($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t\t}\r\n";
					}
					else
					{
						strTablaClaseRelacionada2+="\r\n\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ */GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+") {\r\n";
						strTablaClaseRelacionada2+="\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";					
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n";				
						strTablaClaseRelacionada2+="\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic->deepSave($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t}\r\n";
						
						strFuncionInclude+="\r\n\t\t\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ */GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+") {\r\n";
						strFuncionInclude+="\t\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic */"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n";								
						strFuncionInclude+="\t\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic->deepSave($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t\t\t}\r\n";
						
						strFuncionExclude+="\t\t\t"+"$clases->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/ GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+") {\r\n";
						strFuncionExclude+="\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic */"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n";												
						strFuncionExclude+="\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic->deepSave($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t\t}\r\n";
					}
				
				}
			
				strFuncionInclude+="\t\t\t}";
				strFuncionExclude+="\t\t}";
			
			
			}
			
			strFuncionInclude=strInitInclude+strInitFor+SetClasesRelacionadasForeigKeysNoisDeepSaveBeepInclude()+ strFuncionInclude+ "\r\n\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude+SetClasesRelacionadasForeigKeysNoisDeepSaveBeepExclude()+ strFuncionExclude+ "\r\n\t}\r\n}";
			
			strTablaClaseRelacionada2=strTablaClaseRelacionada2+"\t}\r\n"+strFuncionInclude+strFuncionExclude;
			
			// parte del no if isDeep
			
			
			String strInitIfFuncion=string.Empty;
			String strIfFuncion=string.Empty;
			String strInitElseFuncion=string.Empty;
			String strElseFuncion=string.Empty;
			
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion=" get"+GetPrefijoRelacionC();
			
			strInitIfFuncion=strInit+"\r\nif(!$isDeep) {\r\n";
			strInitElseFuncion="\r\n} else {\r\n";
			
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strInitFuncion="get"+GetPrefijoRelacionC();
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					//strInitFuncion=strInitFuncion;strInitFuncion+="";
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "();";
				}
				else
				{
					//strInitFuncion=strInitFuncion;strInitFuncion+="";
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s();";
			
				}
				
			strFuncion+="$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
			}
			
			
			
			String strTablaClaseRelacionada0=string.Empty;
			System.Collections.Hashtable tablasRelacionadas0=GetTablasRelacionadas(TablaBase);
			
            strTablaClaseRelacionada0=strInitNone+ SetClasesRelacionadasForeigKeysisDeepSaveBeep();
			strFuncionInclude="";
			strFuncionExclude="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				strFuncionInclude+="\r\n"+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class&&$clas->blnActivo) {\r\n";
				strFuncionInclude+="\t\t\t\t$clas->blnActivo=false;\r\n";
				strFuncionExclude+="\r\n\r\n\t\t$existe=false;\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class&&$clas->blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\t$clas->blnActivo=false;\r\n";
				strFuncionExclude+="\t\t\t\t$existe=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!$existe) {\r\n";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada0+="\r\n\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"()->set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());";
					strTablaClaseRelacionada0+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$this->connexion);\r\n";
					
					strFuncionInclude+="\r\n\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"()->set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());";
					strFuncionInclude+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$this->connexion);\r\n";
					
					strFuncionExclude+="\t\t\t\t"+"$clases->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));\r\n";					
					strFuncionExclude+="\r\n\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"()->set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());";
					strFuncionExclude+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$this->connexion);\r\n";
				}
				else
				{
					if(TablaBase.Name!=collectionInfo.SecondaryTable){ strSufijoRelacionRecursivo=""; }
					else {strSufijoRelacionRecursivo="Recursivo";}
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
						//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
						strTablaClaseRelacionada0+="\r\n\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ */GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+") {";
						strTablaClaseRelacionada0+="\r\n\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+"->set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());";						
						strTablaClaseRelacionada0+="\r\n\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n\t\t}\r\n";
					
						strFuncionInclude+="\r\n\t\t\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+ ") {\r\n";
						strFuncionInclude+="\t\t\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+"->set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());";											
						strFuncionInclude+="\r\n\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n\t\t\t\t}\r\n";
						
						strFuncionExclude+="\t\t\t"+"$clases->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+") {\r\n";
						strFuncionExclude+="\t\t\t\t$"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+"->set"+GetPrefijoTablaC()+strIdRelationshipGetSet+GetNombreClaseC(TablaBase.ToString())+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strIdGetSet+"());";																
						strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n\t\t\t}\r\n";
					}
					else
					{
						//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
						strTablaClaseRelacionada0+="\r\n\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ */GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+ ") {\r\n";
						strTablaClaseRelacionada0+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n\t\t}\r\n";
					
						strFuncionInclude+="\r\n\t\t\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ */GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+ ") {\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n\t\t\t\t}\r\n";
						
						strFuncionExclude+="\t\t\t"+"$clases->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ */GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+") {\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess::save($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$this->connexion);"+"\r\n\t\t\t}\r\n";
				
					}
				}
				strFuncionInclude+="\t\t\t}";
				strFuncionExclude+="\r\n\t\t}";
				
			}
			
			strFuncionInclude=strInitInclude+strInitFor+ SetClasesRelacionadasForeigKeysisDeepSaveBeepInclude()+strFuncionInclude +"\r\n\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude+ SetClasesRelacionadasForeigKeysisDeepSaveBeepExclude()+strFuncionExclude+"\r\n\t}\r\n}";
	
			
			strIfFuncion=strInitIfFuncion+strTablaClaseRelacionada0+"\t}\r\n"+strFuncionInclude+strFuncionExclude;//+"\r\n}\r\n"+strInitElseFuncion+strTablaClaseRelacionada0+strTablaClaseRelacionada2+"\r\n}\r\nelse{\r\n"+strTablaClaseRelacionada3+"\r\n}\r\n}\r\n}\r\n";					
		
			
			if(!existeClaseForeign&&!existeClaseRelacionada)
			{
				return "";
			}
			
			return strIfFuncion+strTablaClaseRelacionada2; 
		}
		
public String GetIndicesTablasClasesisDeepLoad() 
		{
			String strSufijoRelacionRecursivo="";
			bool existeClaseForeign=false;
			bool existeClaseRelacionada=false;
			
			String strTablaClaseRelacionada2=string.Empty;
			System.Collections.Hashtable tablasRelacionadas2=GetTablasRelacionadas(TablaBase);
			String strInitNone="\r\n\tif($deepLoadType==DeepLoadType::$NONE) {\r\n\r\n";
			String strInitInclude="\telse if($deepLoadType==DeepLoadType::$INCLUDE) {\r\n";
			String strInitExclude="\telse if($deepLoadType==DeepLoadType::$EXCLUDE) {\r\n";
			String strInitFor="\r\n\t\tforeach($clases as $clas) {";
			String strInitIfClass="\r\n\t\t\tif($clas->clas==";
			String strFuncionInclude=string.Empty;
			String strFuncionExclude=string.Empty;
			
			strFuncionInclude="";
			strFuncionExclude="";
			
            strTablaClaseRelacionada2="\r\nelse {\r\n"+strInitNone+ SetClasesRelacionadasForeigKeysNoisDeepLoadBeep();
			
			String strInitFuncion=" get"+GetPrefijoRelacionC();
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaAux=string.Empty;
			
			existeClaseForeign=ExisteClasesRelacionadasForeigKeys(); 
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				existeClaseRelacionada=true;
				strFuncionInclude+=strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class&&$clas->blnActivo) {\r\n";
				strFuncionInclude+="\t\t\t\t$clas->blnActivo=false;\r\n";
				strFuncionExclude+="\r\n\r\n\t\t$existe=false;\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class&&$clas->blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\t$clas->blnActivo=false;\r\n";
				strFuncionExclude+="\t\t\t\t$existe=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!$existe) {\r\n";
				
				strInitFuncion="set"+GetPrefijoRelacionC();
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada2+="\t\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";						
					strTablaClaseRelacionada2+="\t\t\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic->deepLoad($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+ "(),$isDeep,$deepLoadType,$clases);\r\n";
				
					strFuncionInclude+="\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";
					strFuncionInclude+="\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
					strFuncionInclude+="\r\n\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic->deepLoad($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$isDeep,$deepLoadType,$clases);\r\n";
					
					strFuncionExclude+="\t\t\t\t"+"$clases->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));\r\n";
					strFuncionExclude+="\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";
					strFuncionExclude+="\t\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
					strFuncionExclude+="\r\n\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic->deepLoad($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),$isDeep,$deepLoadType,$clases);\r\n";
					
				}
				else
				{
					if(TablaBase.Name!=collectionInfo.SecondaryTable){ strSufijoRelacionRecursivo=""; }
					else {strSufijoRelacionRecursivo="Recursivo";}
					
					//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "s($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada2+="\r\n\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionadaAux;		
					strTablaClaseRelacionada2+="\r\n\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/GetNombreClaseObjetoC(TablaBase.ToString())+strSufijoRelacionRecursivo+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+") {\r\n";
					strTablaClaseRelacionada2+="\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
					strTablaClaseRelacionada2+="\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic->deepLoad($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t}\r\n";
				
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "s($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";		
					strFuncionInclude+="\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionadaAux;	
					strFuncionInclude+="\r\n\t\t\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/ GetNombreClaseObjetoC(TablaBase.ToString())+strSufijoRelacionRecursivo+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+") {\r\n";
					strFuncionInclude+="\t\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
					strFuncionInclude+="\t\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic->deepLoad($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n";
				
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "s($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";					
					strFuncionExclude+="\t\t\t"+"$clases->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));\r\n";
					strFuncionExclude+="\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionadaAux;	
					strFuncionExclude+="\r\n\t\t\tforeach($"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/GetNombreClaseObjetoC(TablaBase.ToString())+strSufijoRelacionRecursivo+"->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s() as $"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+") {\r\n";
					strFuncionExclude+="\t\t\t\t"+/*GetNombreClase("dbo."+collectionInfo.SecondaryTable)+Logic*/"$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic($this->connexion);\r\n";
					strFuncionExclude+="\t\t\t\t$"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic->deepLoad($"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",$isDeep,$deepLoadType,$clases);"+"\r\n\t\t\t}\r\n";
				
				}
				
				//strFuncion+="\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
				strFuncionInclude+="\t\t\t}\r\n";
				strFuncionExclude+="\t\t}";
				
			}
			
				strFuncionInclude=strInitInclude+strInitFor+ SetClasesRelacionadasForeigKeysNoisDeepLoadBeepInclude()+ strFuncionInclude +"\r\n\t\t}\r\n\t}\r\n";
				strFuncionExclude=strInitExclude+ SetClasesRelacionadasForeigKeysNoisDeepLoadBeepExclude()+ strFuncionExclude+ "\r\n\t}\r\n}";
				
			
			strTablaClaseRelacionada2=strTablaClaseRelacionada2+"\t}\r\n"+strFuncionInclude+strFuncionExclude;
			
			
			//Parte del no if del isDeep
			
			String strInitIfFuncion=string.Empty;
			String strIfFuncion=string.Empty;
			String strInitElseFuncion=string.Empty;
			String strElseFuncion=string.Empty;
			
			strFuncion=string.Empty;
			
			strTablaClaseRelacionada=string.Empty;
			strInitFuncion=" get"+GetPrefijoRelacionC();
			
			strInitIfFuncion="\r\nif(!$isDeep) {\r\n";
			strInitElseFuncion="\r\nelse {\r\n";
			
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			strFuncion=strInitNone+ SetClasesRelacionadasForeigKeysisDeepLoadBeep();
			strFuncionInclude="";
			strFuncionExclude="";
			
			String strTablaObjetoClaseRelacionada="";
			String strTablaClaseSoloRelacionada="";
			String strPlural="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strTablaObjetoClaseRelacionada="";
				strTablaClaseSoloRelacionada="";
				strPlural="";
			
				strFuncionInclude+=strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class&&$clas->blnActivo) {\r\n";
				strFuncionInclude+="\t\t\t\t$clas->blnActivo=false;\r\n";
				strFuncionExclude+="\r\n\r\n\t\t$existe=false;\r\n"+strInitFor +strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class&&$clas->blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\t$clas->blnActivo=false;\r\n";
				strFuncionExclude+="\t\t\t\t$existe=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!$existe) {\r\n";
				
				strInitFuncion="set"+GetPrefijoRelacionC();
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));";
					
					strTablaClaseSoloRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable);
					strTablaObjetoClaseRelacionada=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
					strPlural="";
				}
				else
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "s($this->"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess->get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));";
					
					strTablaClaseSoloRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable);
					strTablaObjetoClaseRelacionada=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
					strPlural="s";
			
				}
				
			strFuncion+="\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionada+"\r\n";			
			
			strFuncionInclude+="\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionada+"\r\n\r\n";
			strFuncionInclude+="\t\t\t\tif($this->isConDeep) {\r\n";
			strFuncionInclude+="\t\t\t\t\t$"+strTablaObjetoClaseRelacionada+"Logic= new "+strTablaClaseSoloRelacionada+"Logic($this->connexion);\r\n";
			strFuncionInclude+="\t\t\t\t\t$"+strTablaObjetoClaseRelacionada+"Logic->set"+strTablaClaseSoloRelacionada+strPlural+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+strTablaClaseSoloRelacionada+strPlural+"());\r\n";
			strFuncionInclude+="\t\t\t\t\t$classesLocal="+strTablaClaseSoloRelacionada+"ConstantesFunciones::getClassesForeignKeysOf"+strTablaClaseSoloRelacionada+"(array(),DeepLoadType::$NONE);\r\n";
			strFuncionInclude+="\t\t\t\t\t$"+strTablaObjetoClaseRelacionada+"Logic->deepLoad"+strPlural+"(false,DeepLoadType::$INCLUDE, $classesLocal,'');\r\n";
			strFuncionInclude+="\t\t\t\t\t"+strTablaClaseSoloRelacionada+"ConstantesFunciones::refrescarForeignKeysDescripciones"+strTablaClaseSoloRelacionada+strPlural+"($"+strTablaObjetoClaseRelacionada+"Logic->get"+strTablaClaseSoloRelacionada+strPlural+"());\r\n";
			strFuncionInclude+="\t\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->set"+strTablaClaseSoloRelacionada+strPlural+"($"+strTablaObjetoClaseRelacionada+"Logic->get"+strTablaClaseSoloRelacionada+strPlural+"());\r\n";
			strFuncionInclude+="\t\t\t\t}\r\n";
			strFuncionInclude+="\r\n\t\t\t\tcontinue;";
			strFuncionInclude+="\r\n\t\t\t}\r\n";			
			
			strFuncionExclude+="\t\t\t"+"$clases->add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"::$class));\r\n";					
			strFuncionExclude+= "\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->"+strInitFuncion+	strTablaClaseRelacionada+"\r\n\t\t}";
			
			}
			
			strFuncionInclude=strInitInclude+strInitFor+SetClasesRelacionadasForeigKeysisDeepLoadBeepInclude() +strFuncionInclude+ "\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude +SetClasesRelacionadasForeigKeysisDeepLoadBeepExclude()+strFuncionExclude+ "\r\n\t}\r\n}";
			
			strIfFuncion=strInitIfFuncion+strFuncion+"\t}\r\n"+strFuncionInclude+strFuncionExclude; //+strInitElseFuncion+strFuncion+strTablaClaseRelacionada2+"\r\n}\r\nelse{\r\n"+strTablaClaseRelacionada3+"\r\n}\r\n}\r\n";					
			
			if(!existeClaseForeign&&!existeClaseRelacionada)
			{
				return "";
			}
			
			return strIfFuncion+strTablaClaseRelacionada2; 
		}

public String GetParameterSelection(ColumnSchema column,bool esUltimo,bool esUnico,bool esCompuesto,bool esNative,bool esRanges,bool esRangesFinal) 
		{
			String strParameterSelection=GetParameterSelectionC(column,esUltimo,esUnico,esCompuesto,esNative,esRanges,esRangesFinal);
			return strParameterSelection;
		}
		
public String GetParameterSelectionDeprecated(ColumnSchema column,bool esUltimo,bool esUnico,bool esCompuesto) 
		{
			String strParaBusquedaString=""; 
			String strParaBusquedaStringInicio=""; 
			String strParaBusquedaCompuesto=""; 
			
			if(esCompuesto)
			{
				strParaBusquedaCompuesto="Constantes::getSSchema()+\".\"+"+GetNombreClase(column.Table.ToString())+"DataAccess::$TABLENAME+\".\"+";
										  
			}
			
			if(column.DataType==DbType.DateTime ||column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				if(!esUnico) {
					strParaBusquedaString=".\"%\"";
					strParaBusquedaStringInicio="\"%\".";
				}
			}
			
			String strColumnName="";
			
			if(column.Name!=strId) {
				if(blnEsColumnaConNombrePrefijoTipo) {
					strColumnName=column.Name;
				} else {
					strColumnName=GetNombreColumnFromProperties(column);
				}
			} else {
				if(blnEsColumnaConNombrePrefijoTipo) {
					strColumnName=strIdGetSet;
				} else {
					strColumnName=strId;
				}
			}
			
			String strParameterSelection=String.Empty;
			strParameterSelection="\r\n\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
			strParameterSelection+="\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"->setParameterSelectionGeneralEqual(ParameterType::$"+GetTipoColumnaClaseEnumC(column)+","+strParaBusquedaStringInicio+"$"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+strParaBusquedaCompuesto+GetNombreClaseC(column.Table.ToString())+"DataAccess::$"+column.Name.ToUpper()/*strColumnName*/+",";//getColumnName
			
			if(esUltimo)
			{
			strParameterSelection+="ParameterTypeOperator::$NONE);";		
			}
			else
			{
			strParameterSelection+=	"ParameterTypeOperator::$AND);";	
			}
			
			strParameterSelection+="\r\n\t\t\t$queryWhereSelectParameters->addParameter($parameterSelectionGeneral"+column.Name+");";
		
			return strParameterSelection;
		}
	
	public String GetParameterSelectionRango(ColumnSchema column,String strIndexName) 
		{
			String strParaBusquedaString=""; 
			
			if(column.DataType==DbType.DateTime ||column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				strParaBusquedaString=".\"%\"";
			}
			
			String strParameterSelection=String.Empty;
			
			if(!strIndexName.Contains("BusquedaRango"))
			{
				strParameterSelection="\r\n\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
				
				if(strIndexName.Contains("BusquedaMayorIgual"))
				{
					strParameterSelection+="\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"->setParameterSelectionGeneralMayorIgual(ParameterType::$"+GetTipoColumnaClaseEnumC(column)+",$"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess::$"+GetNombreCampoTablaC(column)+",";//getColumnName()
				}
				else if(strIndexName.Contains("BusquedaMayor"))
				{
					strParameterSelection+="\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"->setParameterSelectionGeneralMayor(ParameterType::$"+GetTipoColumnaClaseEnumC(column)+",$"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess::$"+GetNombreCampoTablaC(column)+",";//getColumnName()
				}
				else if(strIndexName.Contains("BusquedaMenorIgual"))
				{
					strParameterSelection+="\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"->setParameterSelectionGeneralMenorIgual(ParameterType::$"+GetTipoColumnaClaseEnumC(column)+",$"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess::$"+GetNombreCampoTablaC(column)+",";//getColumnName
				}
				else if(strIndexName.Contains("BusquedaMenor"))
				{
					strParameterSelection+="\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"->setParameterSelectionGeneralMenor(ParameterType::$"+GetTipoColumnaClaseEnumC(column)+",$"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess::$"+GetNombreCampoTablaC(column)+",";//getColumnName
				}
				
				strParameterSelection+="ParameterTypeOperator::$NONE);";	
				
				strParameterSelection+="\r\n\t\t\t$queryWhereSelectParameters->addParameter($parameterSelectionGeneral"+column.Name+");";
			}
			else
			{
				strParameterSelection="\r\n\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"Inicial= new ParameterSelectionGeneral();";				
				if(strIndexName.Contains("BusquedaRangoIgual"))
				{
					strParameterSelection+="\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"Inicial->setParameterSelectionGeneralMayorIgual(ParameterType::$"+GetTipoColumnaClaseEnumC(column)+",$"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Inicial"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess::$"+GetNombreCampoTablaC(column)+",";//getColumnName		
				}
				else
				{
					strParameterSelection+="\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"Inicial->setParameterSelectionGeneralMayor(ParameterType::$"+GetTipoColumnaClaseEnumC(column)+",$"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Inicial"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess::$"+GetNombreCampoTablaC(column)+",";//getColumnName		
				}				
				strParameterSelection+=	"ParameterTypeOperator::$AND);";	
				
				strParameterSelection+="\r\n\t\t\t$queryWhereSelectParameters->addParameter($parameterSelectionGeneral"+column.Name+"Inicial);";
				
				strParameterSelection+="\r\n\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"Final= new ParameterSelectionGeneral();";
				if(strIndexName.Contains("BusquedaRangoIgual"))
				{
					strParameterSelection+="\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"Final->setParameterSelectionGeneralMenorIgual(ParameterType::$"+GetTipoColumnaClaseEnumC(column)+",$"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Final"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess::$"+GetNombreCampoTablaC(column)+",";//getColumnName				
				}
				else
				{
					strParameterSelection+="\r\n\t\t\t$parameterSelectionGeneral"+column.Name+"Final->setParameterSelectionGeneralMenor(ParameterType::$"+GetTipoColumnaClaseEnumC(column)+",$"+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Final"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess::$"+GetNombreCampoTablaC(column)+",";//getColumnName				
				}				
				strParameterSelection+="ParameterTypeOperator::$NONE);";	
				
				strParameterSelection+="\r\n\t\t\t$queryWhereSelectParameters->addParameter($parameterSelectionGeneral"+column.Name+"Final);";
			}
			
						
			
		
			return strParameterSelection;
		}
		
public String GetIndicesTablasClases() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			
			String strWithConnectionGetNew="\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();";
			String strWithConnectionCommit="\r\n\r\n\t\t\t$this->connexion->getConnection()->commit();\r\n\t\t\t$this->connexion->getConnection()->close();";
			String strWithConnectionClose=String.Empty;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						//strInitFuncion+="\r\n\tprivate function "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"Internal(";
							strFunctionsWithConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"WithConnection(";
							//strFunctionsBodyWithConnection="\r\n\t\t$this->"+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"Internal(true,";
							strFunctionsNoConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
							//strFunctionsBodyNoConnection="\r\n\t\t$this->"+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"Internal($isConConnexion,";
							
						strBodyFuncion="\r\n\t\ttry\r\n\t\t{"+strWithConnectionGetNew+"\r\n";
						strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');";		
						strEndBodyFuncion="\r\n\r\n\t\t\t$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"=$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess->getEntity($this->connexion,$queryWhereSelectParameters);";
						
						strEndBodyFuncion+="\r\n\r\n\t\t\tif($this->isConDeep) {";
						strEndBodyFuncion+="\r\n\t\t\t\t$this->deepLoad($this->"+GetNombreClaseObjetoC(TablaBase.ToString())+",$this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases());";
						strEndBodyFuncion+="\r\n\r\n\t\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFunciones::refrescarForeignKeysDescripciones"+GetNombreClase(TablaBase.ToString())+"($this->"+GetNombreClaseObjeto(TablaBase.ToString())+");";
						strEndBodyFuncion+="\r\n\t\t\t}";
						
						strEndBodyFuncion+="\r\n\r\n\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFuncionesAdditional::check"+GetNombreClase(TablaBase.ToString())+"ToGet($this->"+GetNombreClaseObjeto(TablaBase.ToString())+",$this->datosCliente);";
						strEndBodyFuncion+="\r\n\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFuncionesAdditional::update"+GetNombreClase(TablaBase.ToString())+"ToGet($this->"+GetNombreClaseObjeto(TablaBase.ToString())+");";


						strEndBodyFuncion+=strWithConnectionCommit;
						strEndFuncion="\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t} \r\n\t\t//finally {\r\n\t\t\t//$this->connexion->getConnection()->close();\r\n\t\t//}\r\n\t}\r\n";
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strInitFuncion+="\r\n\tprivate function "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal($strFinalQuery,";
								strFunctionsWithConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"WithConnection($strFinalQuery,$pagination,";
								//strFunctionsBodyWithConnection="\r\n\t\t$this->"+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(true,$strFinalQuery,";
								strFunctionsNoConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"($strFinalQuery,$pagination,";
								//strFunctionsBodyNoConnection="\r\n\t\t$this->"+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal($isConConnexion,$strFinalQuery,";
							
						}
						else
						{
							//strInitFuncion+="\r\n\tprivate function "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(";
								strFunctionsWithConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"WithConnection(";
								//strFunctionsBodyWithConnection="\r\n\t\t$this->"+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(true,";
								strFunctionsNoConnection="\r\n\tpublic function "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
								//strFunctionsBodyNoConnection="\r\n\t\t$this->"+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal($isConConnexion,";
							
						}
						
						strBodyFuncion="\r\n\t\ttry\r\n\t\t{"+strWithConnectionGetNew+"\r\n";
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');\r\n";		
							strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters->setPagination($pagination);";	
							strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters->setFinalQuery($strFinalQuery);";			
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');\r\n";		
						}
						
						strEndBodyFuncion="\r\n\r\n\t\t\t$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"s=$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess->getEntities($this->connexion,$queryWhereSelectParameters);";
						
						//ANTERIOR COMMIT
						//strEndBodyFuncion+="\r\n\r\n\t\t\tif($isConConnexion) {\r\n\t\t\t$this->connexion->getConnection()->commit();\r\n\t\t\t$this->connexion->getConnection()->close();\r\n\t\t\t}";
						strEndBodyFuncion+="\r\n\r\n\t\t\tif($this->isConDeep) {";
						strEndBodyFuncion+="\r\n\t\t\t\t$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());";
						strEndBodyFuncion+="\r\n\r\n\t\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFunciones::refrescarForeignKeysDescripciones"+GetNombreClase(TablaBase.ToString())+"s($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s);";
						strEndBodyFuncion+="\r\n\t\t\t}";
						
						strEndBodyFuncion+="\r\n\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFuncionesAdditional::check"+GetNombreClase(TablaBase.ToString())+"ToGets($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s,$this->datosCliente);";
						strEndBodyFuncion+="\r\n\t\t\t$this->update"+GetNombreClase(TablaBase.ToString())+"ToGetsAuxiliar($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s);";
						
						strEndBodyFuncion+=strWithConnectionCommit;
						strEndFuncion="\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t} \r\n\t\t//finally {\r\n\t\t\t//connexion->getConnection()->close();\r\n\t\t//}\r\n\t}\r\n";
					
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								} else {
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strParametersFuncion+=",$"+/*GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+*/GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										strParametersNameFuncion+=",$"+/*GetPrefijoTipoC(memberColumnSchema.Column)+*/GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
									}	
								}						
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{	
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false);
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
									if(esRanges) {
										strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
								else
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false);
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+") {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+") {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"");
					
					
					//strInitFuncion+=strParametersFuncion+")\r\n\t{"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";																																			
				
					//strInitFuncion=strFunctions+strInitFuncion;
					
					strInitFuncion+=strFunctions;
				}
			}
			
								
			return strInitFuncion; 
		}
		
		public String GetIndicesTablasClasesDeReporte() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strQueryChange=String.Empty;
			String strGetFunctionLoadRelaciones=String.Empty;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						strInitFuncion+="\r\n\tpublic function "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
						strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();\r\n";
						strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');";		
						strQueryChange="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::getQuery"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"($queryWhereSelectParameters,";
						strEndBodyFuncion="\r\n\r\n\t\t\t$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"=$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess->getEntity($this->connexion,$queryWhereSelectParameters);";
						strEndBodyFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::cargarTablasRelaciones"+indexSchema.Name+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+");";
						strEndBodyFuncion+="\r\n\r\n\t\t\t$this->connexion->getConnection()->commit();";
						strEndBodyFuncion+="\r\n\r\n\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFuncionesAdditional::check"+GetNombreClase(TablaBase.ToString())+"ToGet($this->"+GetNombreClaseObjeto(TablaBase.ToString())+",$this->datosCliente);";
						strEndBodyFuncion+="\r\n\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFuncionesAdditional::update"+GetNombreClase(TablaBase.ToString())+"ToGet($this->"+GetNombreClaseObjeto(TablaBase.ToString())+");";
						strEndFuncion="\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t} \r\n\t\t//finally {\r\n\t\t\t//connexion->getConnection()->close();\r\n\t\t//}\r\n\t}\r\n";
					}

					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							strInitFuncion+="\r\n\tpublic function "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"($strFinalQuery,";
							strQueryChange="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::getQuery"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"($queryWhereSelectParameters,$strFinalQuery,";
							strGetFunctionLoadRelaciones="\r\n\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::cargarTablasRelaciones"+indexSchema.Name+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"s,";
						}

						else
						{
							strInitFuncion+="\r\n\tpublic function "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
							strQueryChange="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::getQuery"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"($queryWhereSelectParameters,";
							strGetFunctionLoadRelaciones="\r\n\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones::cargarTablasRelaciones"+indexSchema.Name+"($"+GetNombreClaseObjetoC(TablaBase.ToString())+"s,";
						}
						
						strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\t$this->connexion=Connexion::getNewConnexion();\r\n";
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');\r\n";		
							//strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters->setFinalQuery($strFinalQuery);";			
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\t$queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType::$MYSQL,'');\r\n";		
						}
						
						strEndBodyFuncion="\r\n\r\n\t\t\t$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"s=$this->"+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess->getEntities($this->connexion,$queryWhereSelectParameters);";
						
						strEndBodyFuncion+="\r\n\t\t\t"+GetNombreClase(TablaBase.ToString())+"ConstantesFuncionesAdditional::check"+GetNombreClase(TablaBase.ToString())+"ToGets($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s,$this->datosCliente);";
						strEndBodyFuncion+="\r\n\t\t\t$this->update"+GetNombreClase(TablaBase.ToString())+"ToGetsAuxiliar($this->"+GetNombreClaseObjeto(TablaBase.ToString())+"s);";

						strEndBodyFuncion+=strGetFunctionLoadRelaciones+"BYDANCODE1";
						strEndBodyFuncion+="\r\n\r\n\t\t\t$this->connexion->getConnection()->commit();";
						strEndFuncion="\r\n\t\t} catch(Exception $e) {\r\n\t\t\tFunciones::logShowExceptionMessages($e);\r\n\t\t\tthrow $e;\r\n\t\t} \r\n\t\t//finally {\r\n\t\t\t//connexion->getConnection()->close();\r\n\t\t//}\r\n\t}\r\n";
					
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
						if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								}						
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false);
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
								}
								else
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false);
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=/*GetTipoColumnaClaseC(memberColumnSchema.Column)+*/"$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+="$"+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strInitFuncion+=strParametersFuncion+") {"+strBodyFuncion+/*strParameterSelection+*/strQueryChange+strParametersNameFuncion+");"+strEndBodyFuncion.Replace("BYDANCODE1",strParametersNameFuncion+");")/*+strParametersNameFuncion+");"*/+strEndFuncion+"";																																			
				}
			}
			
								
			return strInitFuncion; 
		}
		
public String GetFuncionesTablasClasesRelacionadas() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public  void  get"+GetPrefijoRelacionC();
			
			String strEndFuncion="\r\n}\r\ncatch(Exception $e)\r\n{\r\n;\r\n}\r\n}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "()\r\n{\r\ntry\r\n{\r\n "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"= new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"();\r\n";
					strTablaClaseRelacionada+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"="+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.Traer"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+");";
				}
				else
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()\r\n{\r\ntry\r\n{\r\n "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s= new "+ "ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+">();\r\n";
					strTablaClaseRelacionada+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s="+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.Traer"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s($this->connexion,$"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+")g;";
			
				}
				
			strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n\r\n";
			}
								
			return strFuncion; 
		}
		
public String GetTablasClasesRelacionadas() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";\r\n";
				}
				else
				{
					strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public  string GetAuditoriaSetAuditorias(ColumnSchema column)
{				
	String strSetEntity=string.Empty;
	

	strSetEntity="\r\n\t\t\tif($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->getIsNew()==true || $"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetNombreCompletoColumnaClaseC(column)+"()!=$"+ GetNombreClaseObjetoC(TablaBase.ToString()) +"->get" + GetNombreClaseC(TablaBase.ToString())  +"Original()->get"+ GetNombreCompletoColumnaClaseC(column) +"())\r\n\t\t\t{\r\n";
	
	/*
	strSetEntity+="\t\t\t\tauditoria.setField_strCampo("+ GetNombreClaseC(TablaBase.ToString())+"."+ column.Name+");\r\n";//getColumnName
	strSetEntity+="\t\t\t\tauditoria.setField_strValoranterior("+ GetNombreClaseObjetoC(TablaBase.ToString())+ ".get"+ GetNombreClaseC(TablaBase.ToString()) +"Original().get"+ GetNombreCompletoColumnaClaseC(column)+ "()"+ GetTipoColumnaToString(column)+ " );\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strValoractual("+ GetNombreClaseObjetoC(TablaBase.ToString())+ ".get"+ GetNombreCompletoColumnaClaseC(column)+ "()"+ GetTipoColumnaToString(column)+ ");\r\n";
	*/
	strSetEntity+="\t\t\t\t$strValorActual=null;\r\n";
	strSetEntity+="\t\t\t\t$strValorNuevo=null;\r\n\r\n";
	
	strSetEntity+="\t\t\t\tif($"+ GetNombreClaseObjetoC(TablaBase.ToString())+ "->get"+ GetNombreClaseC(TablaBase.ToString()) +"Original()->get"+ GetNombreCompletoColumnaClaseC(column)+ "()!=null)\r\n\t\t\t\t{\r\n";
	strSetEntity+="\t\t\t\t\t$strValorActual=$"+ GetNombreClaseObjetoC(TablaBase.ToString())+ "->get"+ GetNombreClaseC(TablaBase.ToString()) +"Original()->get"+ GetNombreCompletoColumnaClaseC(column)+ "()"+ GetTipoColumnaToString(column)+";\r\n";
	strSetEntity+="\t\t\t\t}\r\n";
	
	strSetEntity+="\t\t\t\tif($"+ GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+ GetNombreCompletoColumnaClaseC(column)+ "()!=null)\r\n\t\t\t\t{\r\n";
	strSetEntity+="\t\t\t\t\t$strValorNuevo=$"+ GetNombreClaseObjetoC(TablaBase.ToString())+ "->get"+ GetNombreCompletoColumnaClaseC(column)+ "()"+ GetTipoColumnaToString(column)+ " ;\r\n";
	strSetEntity+="\t\t\t\t}\r\n\r\n";
	
	strSetEntity+="\t\t\t\t"+strGlobalAuditoriaComment+"$auditoriaDetalleLogicAdditional->registrarNuevaAuditoriaDetalle($auditoriaObj->getId(),"+ GetNombreClaseC(TablaBase.ToString())+"DataAccess::$"+ /*GetNombreColumnFromProperties(column)*/column.Name.ToUpper()+",$strValorActual,$strValorNuevo);";//getColumnName
	strSetEntity+="\r\n\t\t\t}";
	
	return strSetEntity;
}

public static string GetSetEntityColumna(ColumnSchema column,String table,bool conVersionRow)
{				
	String strSetEntity=string.Empty;
	
	if(conVersionRow)
	{
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)||column.Name.Equals(strIsExpired))
		{
			return strSetEntity;
		}
	}
	else
	{
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)||column.Name.Equals(strIsExpired)||column.Name.Equals(strVersionRow))
		{
			return strSetEntity;
		}
	}
	//usuario.setClave(strClave);
	String strEntityInit=GetNombreClaseObjetoC(table)+".set"+GetNombreCompletoColumnaClaseC(column)+"(";
	String strEntityMiddle=GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
	String strEntityFinal=");";
   strSetEntity=strEntityInit+strEntityMiddle+strEntityFinal;
	
	return strSetEntity;
}

public string GetParametroFuncionNuevoClase(ColumnSchema column)
{		String strParamtro=string.Empty;	
		
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strVersionRow))
		{
			return strParamtro;
		}
		strParamtro=GetTipoColumnaClaseC(column)+" "+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
		return strParamtro;
}

public string GetParametroFuncionActualizarClase(ColumnSchema column)
{		String strParamtro=string.Empty;	

		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
		{
			return strParamtro;
		}
		if(!column.Name.Equals(strId))
		{
		strParamtro=GetTipoColumnaClaseC(column)+" "+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);		
		}
		else
		{
		strParamtro=GetTipoColumnaClaseC(column)+" "+strId;			
		}
		return strParamtro;
}

public string GetNombreClase(string strTablaBase)
{
		return GetNombreClaseC(strTablaBase);
}

public string GetNombreClaseObjeto(string strTablaBase)
{
		return GetNombreClaseObjetoC(strTablaBase);
}

public String getClassesSetAddTablasRelacionadas() 
{
			String strTablaClaseRelacionada="";	
			TableSchema tablaRelacionadaObjetivo;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);

			
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				else
				{
					continue;
				}

				if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo))
				{
					//continue;
				}
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany||collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+="\r\n\t\t\t$classes->add(new Classe("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"::$class));";									
				}				
			}
			
			return strTablaClaseRelacionada; 
}

public String GetForTablasRelacionadasForSetdelete() 
{
			String strTablaClaseRelacionada="";	
			
			TableSchema tablaRelacionadaObjetivo=null;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);

			
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				else
				{
					continue;
				}

				if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo))
				{
					//continue;
				}
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany||collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
						strTablaClaseRelacionada+="\r\n\t\t\tfor("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+" "+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+":"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s())";
						strTablaClaseRelacionada+="\r\n\t\t\t{";
						strTablaClaseRelacionada+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+".setIsDeleted(true);";
						strTablaClaseRelacionada+="\r\n\t\t\t}\r\n";
					}
					else
					{
						strTablaClaseRelacionada+="\r\n\t\t\tif($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"()!=null)";
						strTablaClaseRelacionada+="\r\n\t\t\t{";
						strTablaClaseRelacionada+="\r\n\t\t\t\t$"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetPrefijoRelacionC()+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"().setIsDeleted(true);";
						strTablaClaseRelacionada+="\r\n\t\t\t}\r\n";
					}
				}				
			}
			
			return strTablaClaseRelacionada; 
}


</script>
<%//InicializarVariablesPorTabla(TablaBase);%>
<?php
<%=GetByDanLicence()%>
<%if(ConNamespaces){ %>
<%=strPhp53VersionComment%>namespace <%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageBusiness%>/<%= strPackageLogic%>;


include_once('<%=Empresa%>/<%= strPackageFramework%>/<%= PackageFramework%>/<%= strPackageUtils%>/Constantes.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%= strPackageFramework%>/<%= PackageFramework%>/<%= strPackageUtils%>/Funciones.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=Package%>/<%=Module%><%=strPackageUtils%><%=GetEsPaqueteReporteC(TablaBase)%>/<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesCarga.php');


if(Constantes::$BIT_CONCARGA_INICIAL_POR_ARCHIVO) {
	
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageUtils%>/FuncionesSql.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageUtils%>/Connexion.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageUtils%>/ParameterDbType.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageUtils%>/ParameterType.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageUtils%>/ParameterTypeOperator.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageEntities%>/GeneralEntityParameterGeneral.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageEntities%>/GeneralEntityReturnGeneral.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageEntities%>/Classe.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageLogic%>/DatosCliente.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageLogic%>/DatosDeep.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageLogic%>/QueryWhereSelectParameters.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageLogic%>/ParameterSelectionGeneral.php');
//include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%= strPackageFramework%>/<%= PackageFramework%>/<%= strPackageBusiness%>/<%= strPackageLogic%>\;

include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageUtils%><%=GetEsPaqueteReporteC(TablaBase)%>/<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageUtils%><%=GetEsPaqueteReporteC(TablaBase)%>/<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageBusiness%>/<%= strPackageEntities%><%=GetEsPaqueteReporteC(TablaBase)%>/<%=GetNombreClase(TablaBase.ToString())%>.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%= Package%>/<%= Module%><%=strPackageBusiness%>/<%=strPackageDataAccess%><%=GetEsPaqueteReporteC(TablaBase)%>/<%=GetNombreClase(TablaBase.ToString())%>DataAccess.php');
include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageBusiness%>/<%= strPackageInterface%><%=GetEsPaqueteReporteC(TablaBase)%>/<%=GetNombreClase(TablaBase.ToString())%>Implementable.php');
//include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageBusiness%>/<%= strPackageLogic%>/<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.php');
//include_once(Constantes::$PATH_REL.'<%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageUtils%>\;

<%if(!GetNombreClaseC(TablaBase.ToString()).Equals("Auditoria") && !GetNombreClaseC(TablaBase.ToString()).Equals("AuditoriaDetalle")){%>
<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>include_once(Constantes::$PATH_REL.'<%=strEmpresaAuditoria%>/<%= strPackage%>/<%= strPackageAuditoria%>/<%= strPackageBusinessAuditoria%>/<%= strPackageLogicAuditoria%>/AuditoriaLogicAdditional.php');
<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>include_once(Constantes::$PATH_REL.'<%=strEmpresaAuditoria%>/<%= strPackage%>/<%= strPackageAuditoria%>/<%= strPackageBusinessAuditoria%>/<%= strPackageDataAccessAuditoria%>/AuditoriaDataAccess.php');
<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>include_once(Constantes::$PATH_REL.'<%=strEmpresaAuditoria%>/<%= strPackage%>/<%= strPackageAuditoria%>/<%= strPackageBusinessAuditoria%>/<%= strPackageLogicAuditoria%>/AuditoriaDetalleLogicAdditional.php');
<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>include_once(Constantes::$PATH_REL.'<%=strEmpresaAuditoria%>/<%= strPackage%>/<%= strPackageAuditoria%>/<%= strPackageBusinessAuditoria%>/<%= strPackageDataAccessAuditoria%>/AuditoriaDetalleDataAccess.php');
<%}%>


<%=strPhp53VersionComment%>use <%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageUtils%>\Connexion;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageUtils%>\ParameterDbType;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageUtils%>\ParameterType;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageUtils%>\ParameterTypeOperator;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageEntities%>/Classe;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageLogic%>\DatosCliente;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageLogic%>\QueryWhereSelectParameters;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%=strPackageFramework%>/<%= PackageFramework%>/<%=strPackageBusiness%>/<%=strPackageLogic%>\ParameterSelectionGeneral;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageUtils%>\;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageUtils%>/<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageUtils%>/<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageBusiness%>/<%= strPackageEntities%>/<%=GetNombreClase(TablaBase.ToString())%>;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageBusiness%>/<%= strPackageInterface%>/<%=GetNombreClase(TablaBase.ToString())%>Implementable;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%= strPackageFramework%>/<%= PackageFramework%>/<%= strPackageBusiness%>/<%= strPackageLogic%>\;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%= Package%>/<%= Module%><%= strPackageBusiness%>/<%= strPackageLogic%>/<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%= Package%>/<%= Module%><%=strPackageBusiness%>/<%=strPackageDataAccess%>/<%=GetNombreClase(TablaBase.ToString())%>DataAccess;

<%=strPhp53VersionComment%>use <%=Empresa%>/<%= strPackageFramework%>/<%= PackageFramework%>/<%= strPackageUtils%>\;
<%if(TieneClasesRelacionadasOForeignKeyC(TablaBase)){%><%=strPhp53VersionComment%>use <%=Empresa%>/<%= Package%>/<%= strPackageBusiness%>/<%= strPackageEntities%>\*;<% } %>
<%=strPhp53VersionComment%>use <%=Empresa%>/<%= strPackageAuditoria%>/<%= strPackageBusiness%>/<%= strPackageEntities%>\;
<%=strPhp53VersionComment%>use <%=Empresa%>/<%= strPackageAuditoria%>/<%= strPackageBusiness%>/<%= strPackageLogic%>\*;
<% } %>

} else {
	//<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesCarga::cargarArchivosFrameworkBase('LOGIC');
}


class <%=GetNombreClase(TablaBase.ToString())%>Logic extends GeneralEntityLogic implements <%=GetNombreClase(TablaBase.ToString())%>Implementable {	
	protected $<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess;
	protected $<%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional;
	public $<%=GetNombreClaseObjeto(TablaBase.ToString())%>;
	public $<%=GetNombreClaseObjeto(TablaBase.ToString())%>s;
	protected $connexion;
	public $parameterDbType;
	public $datosCliente;
	public $datosDeep;
	public $isForForeingKeyData;
	public $isConDeep;
	public $isConDeepLoad;
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
	<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>	
	<%=GetDefinicionVariableClasesCompuestos() %>	
	<%}%>	
	<%}%>
	/*
	function __construct () {
		try {
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess = new <%=GetNombreClase(TablaBase.ToString())%>DataAccess();
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s= array();
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>= new <%=GetNombreClase(TablaBase.ToString())%>();
			
			<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
			<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>			
			<%=GetInicializacionVariableClasesCompuestos()%>			
			<%}%>	
			<%}%>
			
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
		}	 
    }
	*/
	
	function __construct ($newConnexion=null){
		try {
			$this->connexion=$newConnexion;
			$this->parameterDbType=ParameterDbType::$MYSQL;
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess = new <%=GetNombreClase(TablaBase.ToString())%>DataAccess();			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s= array();
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>= new <%=GetNombreClase(TablaBase.ToString())%>();
			$this->datosCliente=new DatosCliente();
			$this->datosDeep=new DatosDeep();
			$this->isForForeingKeyData=false;
			$this->isConDeep=false;
			$this->isConDeepLoad=false;
			
			//AUTOREFERENCIA INFINITA TALVEZ
			//$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional = new <%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
			
			<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
			<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>			
			<%=GetInicializacionVariableClasesCompuestos()%>		
			<%}%>	
			<%}%>
			
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
	  	}	 
    }
		
	public function get<%=GetNombreClase(TablaBase.ToString())%>() {	
		//<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente);
		//<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
		return $this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>;
	}
		
	public function set<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClaseC(TablaBase.ToString())%> $new<%=GetNombreClase(TablaBase.ToString())%>) {
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%> = $new<%=GetNombreClase(TablaBase.ToString())%>;
	}
	
	public function get<%=GetNombreClase(TablaBase.ToString())%>DataAccess() {
		return $this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess;
	}
	
	public function set<%=GetNombreClase(TablaBase.ToString())%>DataAccess(<%=GetNombreClase(TablaBase.ToString())%>DataAccess $new<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess) {
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess = $new<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess;
	}
	
	public function get<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional() {
		return $this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional;
	}
	
	public function set<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional($new<%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional) {
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional = $new<%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional;
	}
	
	public function get<%=GetNombreClase(TablaBase.ToString())%>s() {		
		/*
		<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
		
		foreach ($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s as $<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local ) {
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToGet($<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local);
		}
		*/
		
		return $this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s;
	}
	
	public function set<%=GetNombreClase(TablaBase.ToString())%>s(array $new<%=GetNombreClase(TablaBase.ToString())%>s) {
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s = $new<%=GetNombreClase(TablaBase.ToString())%>s;
	}
	
	public function getConnexion() {
		return $this->connexion;		
	}
	
	public function setConnexion(Connexion $newConnexion) {
		$this->connexion=$newConnexion;		
	}
	
	public function getDatosCliente() {
		return $this->datosCliente;
	}

	public function setDatosCliente(DatosCliente $datosCliente) {
		$this->datosCliente = $datosCliente;
	}	
	
	public function getDatosDeep() {
		return $this->datosDeep;
	}

	public function setDatosDeep(DatosDeep $datosDeep) {
		$this->datosDeep = $datosDeep;
	}
	
	public function getIsForForeingKeyData() {
		return $this->isForForeingKeyData;
	}

	public function setIsForForeingKeyData($isForForeingKeyData) {
		$this->isForForeingKeyData = $isForForeingKeyData;
	}
	
	public function getIsConDeep() {
		return $this->isConDeep;
	}

	public function setIsConDeep($isConDeep) {
		$this->isConDeep = $isConDeep;
	}
	
	public function getIsConDeepLoad() {
		return $this->isConDeepLoad;
	}

	public function setIsConDeepLoad($isConDeepLoad) {
		$this->isConDeepLoad = $isConDeepLoad;
	}
	
	public function setDatosDeepParametros($isDeep,$deepLoadType,array $clases,$strTituloMensaje) {
		$this->datosDeep->setIsDeep($isDeep);
		$this->datosDeep->setDeepLoadType($deepLoadType);
		$this->datosDeep->setClases($clases);
		$this->datosDeep->setStrTituloMensaje($strTituloMensaje);
	}
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
	<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>	
	<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>	
	<%=GetDefinicionVariableClasesCompuestosGetSet() %>	
	<%}%>
	<%}%>
	<%}%>
	
	public function getNewConnexionToDeep() {
		try	{
			$this->connexion=Connexion::getNewConnexion();
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
		}
	}
	
	public function commitNewConnexionToDeep() {
		try	{
			$this->connexion->getConnection()->commit();
		}  catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
		}
	}
	
	public function rollbackNewConnexionToDeep() {
		try	{
			$this->connexion->getConnection()->rollback();
		}  catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
		}
	}
	
	public function closeNewConnexionToDeep() {
		try	{
			$this->connexion->getConnection()->close();
		}  catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
		}
	}
	
	public function executeQueryWithConnection($sQueryExecute) {
		try {
			
			$this->connexion=Connexion::getNewConnexion();
					
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->executeQuery($this->connexion, $sQueryExecute);
			
			$this->connexion->getConnection()->commit();			
			$this->connexion->getConnection()->close();	
						
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	} 
		//finally {
		//	connexion.close();			
		//}
	}
	
	public function executeQuery($sQueryExecute) {
		try {			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->executeQuery($this->connexion, $sQueryExecute);   	       	 
			
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	} 
		//finally {
		//	;
		//}
	}
	
	public function getEntityWithConnection($id)  {
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%> = new <%=GetNombreClase(TablaBase.ToString())%>();
		  		  
        try {
			$this->connexion=Connexion::getNewConnexion();				
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntity($this->connexion, $id);   	       	 
			
			if($this->isConDeep) {
				$this->deepLoad($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			}
						
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente);
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);

			$this->connexion->getConnection()->commit();			
			$this->connexion->getConnection()->close();			
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	} 
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function getEntity($id)  {
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		  		  
        try {
		
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntity($this->connexion, $id);   	       							
			
			if($this->isConDeep) {
				$this->deepLoad($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente);
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);

		}  catch(Exception $e) {			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	} 
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function getEntityWithFinalQueryWithConnection($strFinalQuery='')  {
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		  		  
        try {
			$this->connexion=Connexion::getNewConnexion();				
			
			$queryWhereSelectParameters=new QueryWhereSelectParameters();
			$queryWhereSelectParameters->setFinalQuery($strFinalQuery);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntityConnexionWhereSelect($this->connexion, $queryWhereSelectParameters);   	       	 
			
			if($this->isConDeep) {
				$this->deepLoad($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente);
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);

			$this->connexion->getConnection()->commit();			
			$this->connexion->getConnection()->close();			
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	} 
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function getEntityWithFinalQuery($strFinalQuery='')  {
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		  		  
        try {
		
			$queryWhereSelectParameters=new QueryWhereSelectParameters();
			$queryWhereSelectParameters->setFinalQuery($strFinalQuery);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntityConnexionWhereSelect($this->connexion, $queryWhereSelectParameters);   	       							
			
			if($this->isConDeep) {
				$this->deepLoad($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente);
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);

		}  catch(Exception $e) {			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	} 
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function getEntityDatoGeneralMinimoGenericoWithConnection($sSelectQuery,$sFinalQuery='',$classes=array()) {
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		  
		$queryWhereSelectParameters=new QueryWhereSelectParameters();
		$datoGeneralMinimo = new DatoGeneralMinimo();
		
        try {
						
			$queryWhereSelectParameters->setSelectQuery($sSelectQuery);			
			$queryWhereSelectParameters->setFinalQuery($sFinalQuery);
			
			$this->connexion=Connexion::getNewConnexion();
			
			$datoGeneralMinimo =$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntityDatoGeneralMinimoGenerico($this->connexion, $queryWhereSelectParameters,$classes);   	       	 
			
			$this->connexion->getConnection()->commit();			
			$this->connexion->getConnection()->close();
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			
			throw $e;
			
      	}
		// finally {
		//	$connexion->close();			
		//}
		
		return $datoGeneralMinimo;
	}
	
	public function getEntityDatoGeneralMinimoGenerico($sSelectQuery,$sFinalQuery='',$classes=array()) {
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		
		$queryWhereSelectParameters=new QueryWhereSelectParameters();
		$datoGeneralMinimo = new DatoGeneralMinimo();
		
        try {
			
			$queryWhereSelectParameters->setSelectQuery($sSelectQuery);			
			$queryWhereSelectParameters->setFinalQuery($sFinalQuery);
			
			$datoGeneralMinimo=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntityDatoGeneralMinimoGenerico($this->connexion, $queryWhereSelectParameters,$classes);   	       	 			
			
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			
			throw $e;
			
      	}
		// finally {
		//	;
		//}
		
		return $datoGeneralMinimo;
	}
	
	public function getEntitiesDatoGeneralGenericoWithConnection($sSelectQuery,$sFinalQuery='',$classes=array()) {
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		  
		$queryWhereSelectParameters=new QueryWhereSelectParameters();
		$datoGenerals = array();
		
        try {
						
			$queryWhereSelectParameters->setSelectQuery($sSelectQuery);			
			$queryWhereSelectParameters->setFinalQuery($sFinalQuery);
			
			$this->connexion=Connexion::getNewConnexion();
			
			$datoGenerals =$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesDatoGeneralGenerico($this->connexion, $queryWhereSelectParameters,$classes);   	       	 
			
			$this->connexion->getConnection()->commit();			
			$this->connexion->getConnection()->close();
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			
			throw $e;
			
      	}
		// finally {
		//	$connexion->close();			
		//}
		
		return $datoGenerals;
	}
	
	public function getEntitiesDatoGeneralGenerico($sSelectQuery,$sFinalQuery='',array $classes) {
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		
		$queryWhereSelectParameters=new QueryWhereSelectParameters();
		$datoGenerals = array();
		
        try {
			
			$queryWhereSelectParameters->setSelectQuery($sSelectQuery);			
			$queryWhereSelectParameters->setFinalQuery($sFinalQuery);
			
			$datoGenerals=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesDatoGeneralGenerico($this->connexion, $queryWhereSelectParameters,$classes);   	       	 			
			
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			
			throw $e;
			
      	}
		// finally {
		//	;
		//}
		
		return $datoGenerals;
	}
	
	public function getEntitiesDatoGeneralMaximoGenericoWithConnection($sSelectQuery,$sFinalQuery='',$classes=array()) {
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		  
		$queryWhereSelectParameters=new QueryWhereSelectParameters();
		$datoGeneralMaximos = array();
		
        try {
						
			$queryWhereSelectParameters->setSelectQuery($sSelectQuery);			
			$queryWhereSelectParameters->setFinalQuery($sFinalQuery);
			
			$this->connexion=Connexion::getNewConnexion();
			
			$datoGeneralMaximos =$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesDatoGeneralMaximoGenerico($this->connexion, $queryWhereSelectParameters,$classes);   	       	 
			
			$this->connexion->getConnection()->commit();			
			$this->connexion->getConnection()->close();
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			
			throw $e;
			
      	}
		// finally {
		//	$connexion->close();			
		//}
		
		return $datoGeneralMaximos;
	}
	
	public function getEntitiesDatoGeneralMaximoGenerico($sSelectQuery,$sFinalQuery='',$classes=array()) {
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		
		$queryWhereSelectParameters=new QueryWhereSelectParameters();
		$datoGeneralMaximos = array();
		
        try {
			
			$queryWhereSelectParameters->setSelectQuery($sSelectQuery);			
			$queryWhereSelectParameters->setFinalQuery($sFinalQuery);
			
			$datoGeneralMaximos=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesDatoGeneralMaximoGenerico($this->connexion, $queryWhereSelectParameters,$classes);   	       	 			
			
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			
			throw $e;
			
      	}
		//finally {
		//	;
		//}
		
		return $datoGeneralMaximos;
	}
	
	public function getEntitiesWithConnection(QueryWhereSelectParameters $queryWhereSelectParameters) {	
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		  		  
        try {
			$this->connexion=Connexion::getNewConnexion();			
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntities($this->connexion, $queryWhereSelectParameters);    	       	 
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();			
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}	
	}
	
	public function getEntities(QueryWhereSelectParameters $queryWhereSelectParameters) {	
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		  		  
        try {
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntities($this->connexion, $queryWhereSelectParameters);    	       	 			
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

		}  catch(Exception $e) {
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	} 
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function getEntitiesWithFinalQueryWithConnection($strFinalQuery) {	
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		  		  
        try {
			$this->connexion=Connexion::getNewConnexion();			
			
			$queryWhereSelectParameters=new QueryWhereSelectParameters();
			$queryWhereSelectParameters->setFinalQuery($strFinalQuery);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntities($this->connexion, $queryWhereSelectParameters);    	       	 
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();			
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}	
	}
	
	public function getEntitiesWithFinalQuery($strFinalQuery) {	
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		  		  
        try {
			
			$queryWhereSelectParameters=new QueryWhereSelectParameters();
			$queryWhereSelectParameters->setFinalQuery($strFinalQuery);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntities($this->connexion, $queryWhereSelectParameters);    	       	 			
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

		}  catch(Exception $e) {
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function getEntitiesWithQuerySelectWithConnection($strQuerySelect,QueryWhereSelectParameters $queryWhereSelectParameters) {
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		  		  
        try {
			$this->connexion=Connexion::getNewConnexion();			
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesConnexionQuerySelectQueryWhere($this->connexion,$strQuerySelect, $queryWhereSelectParameters);    	       	 
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();			
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally{
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function getEntitiesWithQuerySelectWithFinalQuery($strQuerySelect,$strFinalQuery) {
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		  		  
        try {
			$queryWhereSelectParameters=new QueryWhereSelectParameters();
			$queryWhereSelectParameters->setFinalQuery($strFinalQuery);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesConnexionQuerySelectQueryWhere($this->connexion,$strQuerySelect, $queryWhereSelectParameters);    	       	 
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

		}  catch(Exception $e) {	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;			
      	}
	}
	
	public function getEntitiesWithQuerySelectWithFinalQueryWithConnection($strQuerySelect,$strFinalQuery) {
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		  		  
        try {
			$this->connexion=Connexion::getNewConnexion();			
			
			$queryWhereSelectParameters=new QueryWhereSelectParameters();
			$queryWhereSelectParameters->setFinalQuery($strFinalQuery);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesConnexionQuerySelectQueryWhere($this->connexion,$strQuerySelect, $queryWhereSelectParameters);    	       	 
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();			
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally{
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function getEntitiesWithQuerySelect($strQuerySelect,QueryWhereSelectParameters $queryWhereSelectParameters) {
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		  		  
        try {
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesConnexionQuerySelectQueryWhere($this->connexion,$strQuerySelect, $queryWhereSelectParameters);    	       	 
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}	
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

		}  catch(Exception $e) {
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally{
			//$this->connexion->getConnection()->close();	
		//}
	}
		
	public function getEntitiesSimpleQueryBuildWithConnection($strQuerySelect,QueryWhereSelectParameters $queryWhereSelectParameters) {	
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		  		  
        try {
			
			$this->connexion=Connexion::getNewConnexion();			
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesSimpleQueryBuild($this->connexion,$strQuerySelect, $queryWhereSelectParameters);    	       	 
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();			
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function getEntitiesSimpleQueryBuild($strQuerySelect,QueryWhereSelectParameters $queryWhereSelectParameters) {	
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		  		  
        try {
		
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesSimpleQueryBuild($this->connexion,$strQuerySelect, $queryWhereSelectParameters);    	       	 						
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

		}  catch(Exception $e) {			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar(array &$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s) {
		<%if(blnConAdditional){%>
		if($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional==null) {
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional=new <%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
		}
		
		<%if(blnEsReporte){%>
		<%if(!blnEsReporteUsaColumnasBase){%>
		$i=1;
			
		foreach($<%=GetNombreClaseObjeto(TablaBase.ToString())%>s as $<%=GetNombreClaseObjeto(TablaBase.ToString())%>) {
			$<%=GetNombreClaseObjeto(TablaBase.ToString())%>->setId($i);
				
			$i++;
		}
		<%}%>
		<%}%>
		
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->updateToGets($<%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this);			
		
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->updateToGetsReferencia($<%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this);			
		<%}%>								
	}
	
	/**
	* Trae cualquier tipo de query select
	* @conMapGenerico  Si es true, trae todo como objeto generico, Si es false trae query en campos de la clase, usando unicamente los determinados en listColumns y deepLoadType
	* @deepLoadType  Si conMapGenerico es false trae query select con las columnas de listColumns, incluyento o excludendo deacuerdo a deepLoadType
	*/
	public function getEntitiesGenericoWithConnection($sQuerySelect,$sFinalQuery,array $listColumns,$deepLoadType,$conMapGenerico) {	
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		$queryWhereSelectParameters=new QueryWhereSelectParameters();
		
        try {
			$this->connexion=Connexion::getNewConnexion();
			
			$queryWhereSelectParameters->setFinalQuery($sFinalQuery);
			
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesGenerico($this->connexion,$sQuerySelect, $queryWhereSelectParameters,$listColumns,$deepLoadType,$conMapGenerico);    	       	 
			
			//this.validarGuardarManejar<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			
			if($this->isConDeep) {
				//$this->deepLoads($this->datosDeep->getIsDeep(),this.datosDeep.getDeepLoadType(), this.datosDeep.getClases(),this.datosDeep.getSTituloMensaje());
				
				//<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.refrescarForeignKeysDescripciones<%=GetNombreClaseC(TablaBase.ToString())%>(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s);
				
				//<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			//<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			//$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			
			throw $e;
			
      	}
		//finally {
		//	connexion.close();				
		//}
	}
	
	public function getEntitiesGenerico($sQuerySelect,$sFinalQuery,array $listColumns,$deepLoadType,$conMapGenerico) {	
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		$queryWhereSelectParameters=new QueryWhereSelectParameters();
		
        try {
			
			$queryWhereSelectParameters->setFinalQuery($sFinalQuery);
			
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntitiesGenerico($this->connexion,$sQuerySelect, $queryWhereSelectParameters,$listColumns,$deepLoadType,$conMapGenerico);    	       	 
			
			//this.validarGuardarManejar<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			
			if($this->isConDeep) {
				//this.deepLoads(this.datosDeep.getIsDeep(),this.datosDeep.getDeepLoadType(), this.datosDeep.getClases(),this.datosDeep.getSTituloMensaje());
				
				//<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.refrescarForeignKeysDescripciones<%=GetNombreClaseC(TablaBase.ToString())%>(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s);
				
				//<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			//<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			//$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			
			throw $e;
			
      	}
		// finally {
		//	;
		//}
	}
	
	public function getEntityGenericoWithConnection($sQuerySelect,$sFinalQuery,array $listColumns,$deepLoadType,$conMapGenerico) {	
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		$queryWhereSelectParameters=new QueryWhereSelectParameters();
		
        try {
			$this->connexion=Connexion::getNewConnexion();
			
			$queryWhereSelectParameters->setFinalQuery($sFinalQuery);
			
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntityGenerico($this->connexion,$sQuerySelect, $queryWhereSelectParameters,$listColumns,$deepLoadType,$conMapGenerico);
			
			//this.validarGuardarManejar<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			if($this->isConDeep) {
				//this.deepLoads(this.datosDeep.getIsDeep(),this.datosDeep.getDeepLoadType(), this.datosDeep.getClases(),this.datosDeep.getSTituloMensaje());
				
				//<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.refrescarForeignKeysDescripciones<%=GetNombreClaseC(TablaBase.ToString())%>(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				//<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			
			throw $e;
			
      	}
		// finally {
		//	connexion.close();				
		//}
	}
	
	public function getEntityGenerico($sQuerySelect,$sFinalQuery,array $listColumns,$deepLoadType,$conMapGenerico) {	
		$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%> = new  <%=GetNombreClase(TablaBase.ToString())%>();
		 
		$queryWhereSelectParameters=new QueryWhereSelectParameters();
		
        try {
			
			$queryWhereSelectParameters->setFinalQuery($sFinalQuery);
			
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntityGenerico($this->connexion,$sQuerySelect, $queryWhereSelectParameters,$listColumns,$deepLoadType,$conMapGenerico);    	       	 
			
			//this.validarGuardarManejar<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			if($this->isConDeep) {
				//this.deepLoads(this.datosDeep.getIsDeep(),this.datosDeep.getDeepLoadType(), this.datosDeep.getClases(),this.datosDeep.getSTituloMensaje());
				
				//<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.refrescarForeignKeysDescripciones<%=GetNombreClaseC(TablaBase.ToString())%>(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				//<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			}
			
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			
			throw $e;
			
      	}
		// finally {
		//	;
		//}
	}
	
	public function getTodos<%=GetNombreClase(TablaBase.ToString())%>sWithConnection($strFinalQuery,Pagination $pagination) {		
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		
		try {
			$this->connexion=Connexion::getNewConnexion();			
			
			$queryWhereSelectParameters=new QueryWhereSelectParameters("");	
			$queryWhereSelectParameters->setPagination($pagination);
			$queryWhereSelectParameters->setFinalQuery($strFinalQuery);
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntities($this->connexion,$queryWhereSelectParameters);				
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();			
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function getTodos<%=GetNombreClase(TablaBase.ToString())%>s($strFinalQuery,Pagination $pagination) {		
		$<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = array();
		
		try {
		
			$queryWhereSelectParameters=new QueryWhereSelectParameters("");	
			$queryWhereSelectParameters->setPagination($pagination);
			$queryWhereSelectParameters->setFinalQuery($strFinalQuery);
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntities($this->connexion,$queryWhereSelectParameters);				
			
			if($this->isConDeep) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToGets($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente);
			
			$this->update<%=GetNombreClase(TablaBase.ToString())%>ToGetsAuxiliar($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);

		}  catch(Exception $e) {
		
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	<%if(blnTieneForeignKey) {%>
	public function cargarCombosLote<%=strForeignKey%><%=GetNombreClaseC(TablaBase.ToString())%>WithConnection(
											$strRecargarFkTipos='',$strRecargarFkQuery='',$strRecargarFkColumna='',$intRecargarFkIdPadre=0,$strRecargarFkTiposNinguno=''
											,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strPrefijoJSFSessionFaces%>,$parametroGeneralUsuarioActual,$moduloActual,$arrDatoGeneral,$arrDatoGeneralNo) {		
		try {
			
			$this->connexion=Connexion::getNewConnexion();
			
			$<%=GetNombreClaseObjeto(TablaBase.ToString())%><%=strForeignKey%>=new <%=GetNombreClase(TablaBase.ToString())%><%=strForeignKey%>();
			
			//PARA RECARGAR COMBOS
			if($strRecargarFkTipos!=null && $strRecargarFkTipos!='TODOS' && $strRecargarFkTipos!='') {
				$strRecargarFkQuery=' where '.$strRecargarFkColumna.'='.$intRecargarFkIdPadre;
			}
			
			//CARGA INICIAL O RECARGAR COMBOS
			<%=ConstructorVariablesArrayForeignKeysC(TablaBase,false,false,true)%>	
			
			
			//RECARGAR COMBOS SIN ELEMENTOS
			if($strRecargarFkTiposNinguno!=null && $strRecargarFkTiposNinguno!='NINGUNO' && $strRecargarFkTiposNinguno!='') {						
			<%=ConstructorVariablesArrayForeignKeysC(TablaBase,false,true,true)%>	
			}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();							
			
			return $<%=GetNombreClaseObjeto(TablaBase.ToString())%><%=strForeignKey%>;
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
		}
				
	}
	
	<%=GetFuncionesCargarCombosFuncionestrForeignKeysC(TablaBase,true)%>
	
	<%}%>
	
	public function inicializar<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional() {
		if($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional==null) {
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional=new <%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
		}
	}
	
	public function save<%=GetNombreClase(TablaBase.ToString())%>WithConnection() {	
		 try {	
			$this->connexion=Connexion::getNewConnexion();			
			
			$this->inicializar<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente,$this->connexion);
	       
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoria($this->connexion,$this->datosCliente->getIdUsuario(),$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente->getstrUsuarioPC(),$this->datosCliente->getstrNamePC(),$this->datosCliente->getstrIPPC());
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->checkGeneralEntityToSave($this,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente,$this->connexion);
			
			<%if(blnTieneAuditoriaAuto) {%>
			<%=GetNombreClase(TablaBase.ToString())%>Logic::updateAuditoriaAuto<%=GetNombreClase(TablaBase.ToString())%>($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente->getIdUsuario(),$this->datosCliente->getstrUsuarioPC(),$this->datosCliente->getstrNamePC(),$this->datosCliente->getstrIPPC());
			<%}%>
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess::save($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, $this->connexion);	    	       	 
				
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToSaveAfter($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente,$this->connexion);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->checkGeneralEntityToSaveAfter($this,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente,$this->connexion);
			
			if($this->isConDeep) {
				$this->deepSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases());
			}
			
			if($this->isConDeepLoad) {
				$this->deepLoad($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases());
					
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);				
			}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();			
			
			if($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>->getIsDeleted()) {
				$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>=null;
			}
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function save<%=GetNombreClase(TablaBase.ToString())%>() {	
		 try {	
			
			$this->inicializar<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente,$this->connexion);
	        
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->checkGeneralEntityToSave($this,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente,$this->connexion);
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoria($this->connexion,$this->datosCliente->getIdUsuario(),$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente->getstrUsuarioPC(),$this->datosCliente->getstrNamePC(),$this->datosCliente->getstrIPPC());
			
			<%if(blnTieneAuditoriaAuto) {%>
			<%=GetNombreClase(TablaBase.ToString())%>Logic::updateAuditoriaAuto<%=GetNombreClase(TablaBase.ToString())%>($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente->getIdUsuario(),$this->datosCliente->getstrUsuarioPC(),$this->datosCliente->getstrNamePC(),$this->datosCliente->getstrIPPC());
			<%}%>
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess::save($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, $this->connexion);	    	       	 			
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToSaveAfter($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente,$this->connexion);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->checkGeneralEntityToSaveAfter($this,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosCliente,$this->connexion);
			
			if($this->isConDeep) {
				$this->deepSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases());
			}
			
			if($this->isConDeepLoad) {
				$this->deepLoad($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases());
					
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);				
			}
			
			if($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>->getIsDeleted()) {
				$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>=null;
			}
			
		}  catch(Exception $e) {
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function save<%=GetNombreClase(TablaBase.ToString())%>sWithConnection() {			
		 try {	
			$this->connexion=Connexion::getNewConnexion();			
			
			$this->inicializar<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToSaves($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente,$this->connexion);
	        	
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->checkGeneralEntitiesToSaves($this,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente,$this->connexion);
			
	   		foreach($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s as $<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local) {
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToSave($<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local);
	        	
				<%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoria($this->connexion,$this->datosCliente->getIdUsuario(),$<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,$this->datosCliente->getstrUsuarioPC(),$this->datosCliente->getstrNamePC(),$this->datosCliente->getstrIPPC());
	   
				<%if(blnTieneAuditoriaAuto) {%>
				<%=GetNombreClase(TablaBase.ToString())%>Logic::updateAuditoriaAuto<%=GetNombreClase(TablaBase.ToString())%>($<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,$this->datosCliente->getIdUsuario(),$this->datosCliente->getstrUsuarioPC(),$this->datosCliente->getstrNamePC(),$this->datosCliente->getstrIPPC());
				<%}%>
			
				<%=GetNombreClase(TablaBase.ToString())%>DataAccess::save($<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local, $this->connexion);
				
			}
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToSavesAfter($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente,$this->connexion);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->checkGeneralEntitiesToSavesAfter($this,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente,$this->connexion);
			
			if($this->isConDeep) {
				$this->deepSaves($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
			}
			
			if($this->isConDeepLoad) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();			
			
			$this->quitar<%=GetNombreClase(TablaBase.ToString())%>sEliminados();
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function save<%=GetNombreClase(TablaBase.ToString())%>s() {			
		 try {
			
			$this->inicializar<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToSaves($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente,$this->connexion);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->checkGeneralEntitiesToSaves($this,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente,$this->connexion);
			
	   		foreach($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s as $<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local) {
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToSave($<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local);
	        	
				<%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoria($this->connexion,$this->datosCliente->getIdUsuario(),$<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,$this->datosCliente->getstrUsuarioPC(),$this->datosCliente->getstrNamePC(),$this->datosCliente->getstrIPPC());
	   			
				<%if(blnTieneAuditoriaAuto) {%>
				<%=GetNombreClase(TablaBase.ToString())%>Logic::updateAuditoriaAuto<%=GetNombreClase(TablaBase.ToString())%>($<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,$this->datosCliente->getIdUsuario(),$this->datosCliente->getstrUsuarioPC(),$this->datosCliente->getstrNamePC(),$this->datosCliente->getstrIPPC());
				<%}%>
				
				<%=GetNombreClase(TablaBase.ToString())%>DataAccess::save($<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local, $this->connexion);
				
			}			
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::check<%=GetNombreClase(TablaBase.ToString())%>ToSavesAfter($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente,$this->connexion);
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->checkGeneralEntitiesToSavesAfter($this,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s,$this->datosCliente,$this->connexion);
			
			if($this->isConDeep) {
				$this->deepSaves($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
			}
			
			if($this->isConDeepLoad) {
				$this->deepLoads($this->datosDeep->getIsDeep(),$this->datosDeep->getDeepLoadType(), $this->datosDeep->getClases(),$this->datosDeep->getStrTituloMensaje());
				
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			$this->quitar<%=GetNombreClase(TablaBase.ToString())%>sEliminados();
			
		}  catch(Exception $e) {			
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function procesarAccion<%=GetNombreClaseC(TablaBase.ToString())%>s($parametroGeneralUsuario,$modulo,$opcion,$usuario,$sProceso,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>) {
		$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral=new <%=GetNombreClaseC(TablaBase.ToString())%>ReturnGeneral();
	
		 try {	
			
			<%if(blnConAdditional){%>
			if($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional==null) {
				$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional=new <%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
			}
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->procesarAccionsGeneral(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>$parametroGeneralUsuario,$modulo,<%}%>$opcion,$usuario,$this,$sProceso,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral);
			
			<%}%>
						
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
		
		return $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral;			
	}
	
	public function procesarAccion<%=GetNombreClaseC(TablaBase.ToString())%>sWithConnection($parametroGeneralUsuario,$modulo,$opcion,$usuario,$strProceso,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>) {				
		 try {	
			$this->connexion=Connexion::getNewConnexion();
			
			$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral=new <%=GetNombreClaseC(TablaBase.ToString())%>ReturnGeneral();
	
			<%if(blnConAdditional){%>
			
			if($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional==null) {
				$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional=new <%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
			}
			
			$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->procesarAccionsGeneral(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>$parametroGeneralUsuario,$modulo,<%}%>$opcion,$usuario,$this,$strProceso,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral);
			<%}%>
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
			return $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral;
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;			
      	}
	}
	
	<%if(!blnEstablaModulo) {%>
	public function procesarEventos<%=GetNombreClaseC(TablaBase.ToString())%>s($parametroGeneralUsuario,$moduloActual,$opcionActual,$usuarioActual,$eventoGlobalTipo,$controlTipo,$eventoTipo,$eventoSubTipo,$sTipo,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>,$isEsNuevo<%=GetNombreClaseC(TablaBase.ToString())%>,$clases) {
		 try {	
			$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral=new <%=GetNombreClaseC(TablaBase.ToString())%>ReturnGeneral();
	
			//SI ES PARA FORMULARIO-> NUEVO PREPARAR, RECARGAR POR DEFECTO FORMULARIO (PARA MANEJAR VALORES POR DEFECTO)
			if($eventoGlobalTipo==EventoGlobalTipo::$FORM_RECARGAR && $controlTipo==ControlTipo::$FORM 
				&& $eventoTipo==EventoTipo::$LOAD && $eventoSubTipo==EventoSubTipo::$NEW 
				&& $sTipo=='FORM') {
				
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral->setConRecargarPropiedades(true);
			}
			
			<%if(blnConAdditional){%>
			
			if($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional==null) {
				$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional=new <%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
			}
			
			$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->procesarEventos(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>$parametroGeneralUsuario,$moduloActual,<%}%>$opcionActual,$usuarioActual,$this,$eventoGlobalTipo,$controlTipo,$eventoTipo,$eventoSubTipo,$sTipo,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral,$isEsNuevo<%=GetNombreClaseC(TablaBase.ToString())%>,$clases);
			
			//<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional::procesarEventos(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>$parametroGeneralUsuario,$moduloActual,<%}%>$opcionActual,$usuarioActual,$this,$eventoGlobalTipo,$controlTipo,$eventoTipo,$eventoSubTipo,$sTipo,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral,$isEsNuevo<%=GetNombreClaseC(TablaBase.ToString())%>,$clases);
			<%}%>
			
			return $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral;
			
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
	}
		
	public function procesarEventos<%=GetNombreClaseC(TablaBase.ToString())%>sWithConnection($parametroGeneralUsuario,$moduloActual,$opcionActual,$usuarioActual,$eventoGlobalTipo,$controlTipo,$eventoTipo,$eventoSubTipo,$sTipo,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>,$isEsNuevo<%=GetNombreClaseC(TablaBase.ToString())%>,$clases) {				
		 try {	
			$this->connexion=Connexion::getNewConnexion();
			
			$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral=new <%=GetNombreClaseC(TablaBase.ToString())%>ReturnGeneral();
	
			$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral->set<%=GetNombreClaseC(TablaBase.ToString())%>($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
			
			//SI ES PARA FORMULARIO-> NUEVO PREPARAR, RECARGAR POR DEFECTO FORMULARIO (PARA MANEJAR VALORES POR DEFECTO)
			if($eventoGlobalTipo==EventoGlobalTipo::$FORM_RECARGAR && $controlTipo==ControlTipo::$FORM 
				&& $eventoTipo==EventoTipo::$LOAD && $eventoSubTipo==EventoSubTipo::$NEW 
				&& $sTipo=='FORM') {
				
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral->setConRecargarPropiedades(true);
			}
			
			<%if(blnConAdditional){%>
			if($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional==null) {
				$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional=new <%=GetNombreClase(TablaBase.ToString())%>LogicAdditional();
			}
			
			$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>LogicAdditional->procesarEventos(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>$parametroGeneralUsuario,$moduloActual,<%}%>$opcionActual,$usuarioActual,$this,$eventoGlobalTipo,$controlTipo,$eventoTipo,$eventoSubTipo,$sTipo,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral,$isEsNuevo<%=GetNombreClaseC(TablaBase.ToString())%>,$clases);
			
			//<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional::procesarEventos(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>$parametroGeneralUsuario,$moduloActual,<%}%>$opcionActual,$usuarioActual,$this,$eventoGlobalTipo,$controlTipo,$eventoTipo,$eventoSubTipo,$sTipo,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral,$isEsNuevo<%=GetNombreClaseC(TablaBase.ToString())%>,$clases);
			<%}%>
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
			return $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral;
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	}
	}
	<%}%>
	
	public function quitar<%=GetNombreClase(TablaBase.ToString())%>sEliminados() {				
		
		$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux=array();
		
		foreach($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>) {
			if($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->getIsDeleted()==false) {
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux[]=$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>;
			}
		}
		
		$this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s=$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux;
	}
	
	public function deepLoad(<%=GetNombreClaseC(TablaBase.ToString())%> $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$isDeep,$deepLoadType,array $clases) {
		<%if(TieneClasesRelacionadasOForeignKeyC(TablaBase)){%>$existe=false;<% } %>
		
		try {
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%= GetIndicesTablasClasesisDeepLoad() %>
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
  		}
	}
	
	public function deepSave(<%=GetNombreClaseC(TablaBase.ToString())%> $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$isDeep,$deepLoadType,array $clases) {		
		<%if(TieneClasesRelacionadasOForeignKeyC(TablaBase)){%>$existe=false;<% } %>
		
		try {
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			<%= GetIndicesTablasClasesisDeepSave() %>
		}<% if(GetIndicesTablasClasesisDeepSave()!=""){ %><% } %>catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
  		}	
	}
	
	<%if(!blnEsReporte){%>	
	<%= GetIndicesTablasClases() %>	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
	<%= GetIndicesTablasClasesCompuestos() %>
	<%}%>
	<%}else{%>	
	<%= GetIndicesTablasClases() %>	
	<%=GetIndicesTablasClasesReporte(TablaBase)%>	
	<%=GetIndicesSqlReportesTablasClasesReporte(TablaBase)%>
	<%//= GetIndicesTablasClasesDeReporte() %>
	<%}%>
	
	
	public function deepLoadWithConnection($isDeep,$deepLoadType, array $clases,$strTituloMensaje) {		
		try {
			$this->getNewConnexionToDeep();
			
			$this->deepLoad($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$isDeep,$deepLoadType,$clases);		
			
			$this->connexion->getConnection()->commit();
			$this->closeNewConnexionToDeep();
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->closeNewConnexionToDeep();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
  		}
		//finally {
			//$this->closeNewConnexionToDeep();
  		//}
	}
	
	public function deepLoadsWithConnection($isDeep,$deepLoadType, array $clases,$strTituloMensaje) {		
		try {
			$this->getNewConnexionToDeep();
			
			foreach($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>) {
				$this->deepLoad($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$isDeep,$deepLoadType,$clases);
								
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones::refrescarForeignKeysDescripciones<%=GetNombreClase(TablaBase.ToString())%>s($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s);
			}
			
			Funciones::resetearActivoClasses($clases);
								
			$this->connexion->getConnection()->commit();
			$this->closeNewConnexionToDeep();
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->closeNewConnexionToDeep();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
  		}
		//finally{
			//$this->closeNewConnexionToDeep();
  		//}
	}
	
	public function deepLoads($isDeep,$deepLoadType, array $clases,$strTituloMensaje) {		
		try {
			
			foreach($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>) {
				$this->deepLoad($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$isDeep,$deepLoadType,$clases);
				
				Funciones::resetearActivoClasses($clases);
			}				
		}  catch(Exception $e) {		
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
  		}
		//finally{
			//$this->closeNewConnexionToDeep();
  		//}
	}
	
	public function loadForeignsKeysDescription() {		
		try {
			
			foreach($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>) {
				<%=GetForeignKeysDescriptions(TablaBase)%>
			}				
		}  catch(Exception $e) {		
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
  		}
		//finally{
			//$this->closeNewConnexionToDeep();
  		//}
	}
		
	public function deepSaveWithConnection($isDeep,$deepLoadType,array $clases,$strTituloMensaje) {		
		try {	
			$this->getNewConnexionToDeep();
			
			$this->deepSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$isDeep,$deepLoadType,$clases);	
			
			$this->connexion->getConnection()->commit();
			$this->closeNewConnexionToDeep();
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->closeNewConnexionToDeep();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
  		}
		//finally {
			//$this->closeNewConnexionToDeep();
  		//}
	}
	
	public function deepSavesWithConnection($isDeep,$deepLoadType, array $clases,$strTituloMensaje) {		
		try {				
			$this->getNewConnexionToDeep();
			
			foreach($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>) {
				$this->deepSave($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$isDeep,$deepLoadType,$clases);
				Funciones::resetearActivoClasses($clases);
			}		
			
			$this->connexion->getConnection()->commit();
			$this->closeNewConnexionToDeep();
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->closeNewConnexionToDeep();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
  		}
		//finally{
			//$this->closeNewConnexionToDeep();
  		//}
	}
	
	public function deepSaves($isDeep,$deepLoadType,array $clases,$strTituloMensaje) {		
		try {				
			foreach($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>) {
				$this->deepSave($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$isDeep,$deepLoadType,$clases);
				Funciones::resetearActivoClasses($clases);
			}		
					
		}  catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
  		}
		//finally{
			//$this->closeNewConnexionToDeep();
  		//}
	}
	
	public static function registrarAuditoria(Connexion $connexion,$idUsuario,<%=GetNombreClaseC(TablaBase.ToString())%> $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$strUsuarioPC,$strNamePC,$strIPPC){
		<%if(!GetNombreClaseC(TablaBase.ToString()).Equals("Auditoria") && !GetNombreClaseC(TablaBase.ToString()).Equals("AuditoriaDetalle")){%>
		//Descomentar para inicializar esta bien
		<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>$auditoriaLogicAdditional=new AuditoriaLogicAdditional();
		<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>$auditoriaLogicAdditional->setConnexion($connexion);
		//Descomentar esta bien
		<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>AuditoriaDataAccess::$SCHEMA='<%=SchemaAuditoria%>';
		
		try	{
			if($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->getIsNew())	{
				<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>$auditoriaLogicAdditional->registrarNuevaAuditoria(Constantes::$BIGIDSISTEMAACTUAL,$idUsuario,<%=GetNombreClaseC(TablaBase.ToString())%>DataAccess::$TABLENAME, $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->get<%=strIdGetSet%>(), Constantes::$STRAUDITORIAINSERTAR,'',$strUsuarioPC,$strNamePC,$strIPPC,Funciones::getFechaHoraActual(),'');
				<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%><%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoriaDetalles<%=GetNombreClase(TablaBase.ToString())%>($connexion,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$auditoriaLogicAdditional->getAuditoria());
			} else if($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->getIsDeleted()) {
				/*if(!$<%=GetNombreClaseObjeto(TablaBase.ToString())%>->getIsExpired()) {
					<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>$auditoriaLogicAdditional->registrarNuevaAuditoria(Constantes::$BIGIDSISTEMAACTUAL,$idUsuario,<%=GetNombreClaseC(TablaBase.ToString())%>DataAccess::$TABLENAME, $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->get<%=strIdGetSet%>(), Constantes::$STRAUDITORIAELIMINARLOGICAMENTE,'',$strUsuarioPC,$strNamePC,$strIPPC,Funciones::getFechaHoraActual(),'');
					<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%><%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoriaDetalles<%=GetNombreClase(TablaBase.ToString())%>($connexion,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$auditoriaLogicAdditional->getAuditoria());
				} else {*/
					<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>$auditoriaLogicAdditional->registrarNuevaAuditoria(Constantes.$BIGIDSISTEMAACTUAL,$idUsuario,<%=GetNombreClaseC(TablaBase.ToString())%>DataAccess::$TABLENAME,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->get<%=strIdGetSet%>(), Constantes::$STRAUDITORIAELIMINARFISICAMENTE,'',$strUsuarioPC,$strNamePC,$strIPPC,Funciones::getFechaHoraActual(),'');
				//}
			} else if($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->getIsChanged()) {
				<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>$auditoriaLogicAdditional->registrarNuevaAuditoria(Constantes::$BIGIDSISTEMAACTUAL,$idUsuario,<%=GetNombreClaseC(TablaBase.ToString())%>DataAccess::$TABLENAME, $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->get<%=strIdGetSet%>(), Constantes::$STRAUDITORIAACTUALIZAR,'',$strUsuarioPC,$strNamePC,$strIPPC,Funciones::getFechaHoraActual(),'');
				<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%><%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoriaDetalles<%=GetNombreClase(TablaBase.ToString())%>($connexion,$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$auditoriaLogicAdditional->getAuditoria());
			}
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
		}	
		<% } %>
	}
	
	public static function registrarAuditoriaDetalles<%=GetNombreClase(TablaBase.ToString())%>(Connexion $connexion,<%=GetNombreClaseC(TablaBase.ToString())%> $<%=GetNombreClaseObjeto(TablaBase.ToString())%>,$auditoriaObj) {		
		//Descomentar inicializar esta bien
		<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>$auditoriaDetalleLogicAdditional=new AuditoriaDetalleLogicAdditional(); 
		<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>$auditoriaDetalleLogicAdditional->setConnexion($connexion);
		
		//Descomentar esta bien
		<%=strGlobalAuditoriaComment%><%=GetAuditoriaCommentTableFromProperties(TablaBase)%>AuditoriaDetalleDataAccess::$SCHEMA='<%=SchemaAuditoria%>';
		
		$strValorActual=null;
		$strValorNuevo=null;
		
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strVersionRow||TablaBase.Columns[i].Name==strId||!GetConAuditoriaColumnFromPropertiesC(TablaBase.Columns[i])){continue; } %>
			<%=  GetAuditoriaSetAuditorias(TablaBase.Columns[i]) %>	
			<% } %>
	}
	
	<%if(blnTieneAuditoriaAuto) {%>
	public static function updateAuditoriaAuto<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClaseC(TablaBase.ToString())%> $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,$idUsuario,$strUsuarioPC,$strNamePC,$strIPPC) {		
		try {
			$strDetalleProceso="";
			
			if($strIPPC==null){$strIPPC='';}
			if($strNamePC==null){$strNamePC='';}
			if($strUsuarioPC==null){$strUsuarioPC='';}
			
			if($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->getIsDeleted()==false) {
				$strDetalleProceso=$strIPPC.'-'.$strNamePC.'-'.$strUsuarioPC;
				
				if(strlen($strDetalleProceso)>50) {
					$strDetalleProceso=substr($strDetalleProceso,0,49);
				}
			}
			
			if($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->getIsNew()==true) {
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->setField_bigIdAuxUsuario($idUsuario);
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->setField_timInsertFechaHora(Funciones::getFechaHoraActual());
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->setField_strInsertProceso($strDetalleProceso);
				
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->setField_bigIdAuxUsuarioUpdate($idUsuario);
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->setField_timUpdateFechaHora(Funciones::getFechaHoraActual());
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->setField_strUpdateProceso($strDetalleProceso);
			
			} else if($<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->getIsChanged()==true) {
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->setField_bigIdAuxUsuarioUpdate($idUsuario);
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->setField_timUpdateFechaHora(Funciones::getFechaHoraActual());
				$<%=GetNombreClaseObjetoC(TablaBase.ToString())%>->setField_strUpdateProceso($strDetalleProceso);
			}
		} catch(Exception $e) {
			//Funciones::manageException($logger,$e);
			throw $e;
		}		
	}
	<%}%>
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionGetXmls,TiposGeneracion)) {%>
	public function getXml<%=GetNombreClase(TablaBase.ToString())%>(){	
		$xml = '';
		$classes=array();
		<%=GetClassClasesRelacionadasForeigKeys()%>
			   
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			$xml=$xml."<?xml version=\"1.0\"?>\r\n";
			$xml=$xml."<<%=GetNombreClaseObjeto(TablaBase.ToString())%> generated=''>\r\n";	    
		    
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
	    	$this->deepLoad($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
	 
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%=GetXmlColumnaC(TablaBase.Columns[i],TablaBase.ToString(),false) %>	
			<% } %>	     
		
				$xml=$xml."</item>\r\n";				
				$xml=$xml."</<%=GetNombreClaseObjeto(TablaBase.ToString())%>>\r\n";
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
		
		return Funciones::ValidarXml($xml,<%=GetNombreClaseC(TablaBase.ToString())%>DataAccess::$TABLENAME);	
	}
	
	public function getXml<%=GetNombreClase(TablaBase.ToString())%>s()	{	
		$xml = '';
	  	$classes=array();
		<%=GetClassClasesRelacionadasForeigKeys()%>
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			$xml=$xml."<?xml version=\"1.0\"?>\r\n";
			$xml=$xml."<<%=GetNombreClaseObjeto(TablaBase.ToString())%> generated=''>\r\n";	    
		   
			foreach ($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s  as $<%=GetNombreClaseObjeto(TablaBase.ToString())%>) {
				<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
				
				$this->deepLoad($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
				
				<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
				<%=GetXmlColumnaC(TablaBase.Columns[i],TablaBase.ToString(),false) %>	
				<% } %>	     	
				
	    		$xml=$xml."</item>\r\n";			
			}
			
			$xml=$xml."</<%=GetNombreClaseObjeto(TablaBase.ToString())%>>\r\n";
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
		
		return Funciones::ValidarXml($xml,<%=GetNombreClaseC(TablaBase.ToString())%>DataAccess::$TABLENAME);		
	}
	<%}%>
	
	
	<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>
	<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
	<%if(GenerarTipoGeneracionC(strTipoGeneracionGetXmls,TiposGeneracion)) {%>
	<%=GetXmlFuncionesClasesCompuestos()%> 
	
	<%}%>
	<%}%>
	<%}%>
	
	
	<%//if(GenerarTipoGeneracionC(strTipoGeneracionMantenimientoClasesRelacionadas,TiposGeneracion)) {%>
	
	<%=GetMaintenanceTablasClasesRelacionadas() %>
	
	<%=GetMaintenanceTablasClasesRelacionadasDetallesLlamar() %>
	
	<%//}%>
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionDeletesCascade,TiposGeneracion)) {%>
	public function deleteCascade()  {	
		//AuditoriaLogic auditoriaLogic= new AuditoriaLogic(); 
		 $classes=array();
		
	    try {
	    	
			if(<%=GetNombreClase(TablaBase.ToString())%>DataAccess::$ISDELETECASCADE) {
				<%=getClassesSetAddTablasRelacionadas()%> 
								
				$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>->setIsDeleted(true);
				
				$this->deepLoad($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, true, DeepLoadType::$INCLUDE, $classes);	    	       	 
				
				<%=GetForTablasRelacionadasForSetdelete()%>
				
				<%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoria($this->connexion,$this->datosCliente->getIdUsuario(),$this->datosCliente->getstrUsuarioPC(),$this->datosCliente->getstrNamePC(),$this->datosCliente->getstrIPPC());
			
				$this->deepSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, true, DeepLoadType::$INCLUDE, $classes);				
						
			} else{
	    		;
	    	}
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
      	}		
	}
	
	public function deleteCascadeWithConnection()  {	
		//AuditoriaLogic auditoriaLogic= new AuditoriaLogic(); 
		 $classes=array();
		
	    try {	    	
			$this->connexion=Connexion::getNewConnexion();
			
			if(<%=GetNombreClase(TablaBase.ToString())%>DataAccess::$ISDELETECASCADE) {
				<%=getClassesSetAddTablasRelacionadas()%> 
								
				$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>->setIsDeleted(true);
				
				$this->deepLoad($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, true, DeepLoadType::$INCLUDE, $classes);	    	       	 
				
				<%=GetForTablasRelacionadasForSetdelete()%>
				
				<%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoria($this->connexion,$this->datosCliente->getIdUsuario(),$this->datosCliente->getstrUsuarioPC(),$this->datosCliente->getstrNamePC(),$this->datosCliente->getstrIPPC());
			
				$this->deepSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, true, DeepLoadType::$INCLUDE, $classes);				
						
			} else{
	    		;
	    	}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
      	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function deletesCascade()  {	
	    try {
			if(<%=GetNombreClase(TablaBase.ToString())%>DataAccess::$ISDELETECASCADE) {
				foreach($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s as $<%=GetNombreClaseObjeto(TablaBase.ToString())%> ) {
					$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>=$<%=GetNombreClaseObjeto(TablaBase.ToString())%>;
					$this->deleteCascade();
				}
			} else {
	    		;
	    	}
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
      	}		
	}
	
	public function deletesCascadeWithConnection()  {	
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			if(<%=GetNombreClase(TablaBase.ToString())%>DataAccess::$ISDELETECASCADE) {
				foreach($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>s as $<%=GetNombreClaseObjeto(TablaBase.ToString())%>) {
					$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>=$<%=GetNombreClaseObjeto(TablaBase.ToString())%>;
					$this->deleteCascade();
				}
			} else {
	    		;
	    	}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
      	}	
		//finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	<%}%>
	
	<%//= GetTodosTablasClasesRelacionadasForeigKeys() %>
	
	public static function getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(array $classesP,$deepLoadType){
		try {
			$classes=array();	
			
			if(deepLoadType==DeepLoadType::$NONE) {
				<%=GetAddClassesForeignKey()%>
				
			} else if(deepLoadType==DeepLoadType::$INCLUDE) {
				<%=GetAddClassesForeignKeyInclude()%>
			} else if(deepLoadType==DeepLoadType::$EXCLUDE) {					
				<%=GetAddClassesForeignKeyExclude()%>
			}
			
			return $classes;
			
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
		}
	}
	
	public static function getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(array $classesP,$deepLoadType){
		try {
			 $classes=array();			
			
			if($deepLoadType==DeepLoadType::$NONE) {
				<%=GetAddClassesRelacionadas()%>
				
			} else if($deepLoadType==DeepLoadType::$INCLUDE) {
				<%=GetAddClassesRelacionadasInclude()%>
			} else if($deepLoadType==DeepLoadType::$EXCLUDE) {		
				<%=GetAddClassesRelacionadasExclude()%>
			}
			
			return $classes;
			
		} catch(Exception $e) {
			Funciones::logShowExceptionMessages($e);
			throw $e;
		}
	}
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionDeepForeignKey,TiposGeneracion)) {%>
	public function deepLoadForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(){	
		try {
			$this->deepLoadForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepLoadForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType){	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			$this->deepLoad($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
						
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}				
	}
	
	public function deepLoadsForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(){	
		try {
			$this->deepLoadsForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepLoadsForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType){	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			foreach (<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%> ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				$this->deepLoad($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
				
				Funciones::resetearActivoClasses($classes);
			}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}				
	}

	public function deepSaveForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(){	
		try {
			$this->deepSaveForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepSaveForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType){	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			$this->deepSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
						
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}				
	}
	
	public function deepSavesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(){	
		try {
			$this->deepSavesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepSavesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType){	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			foreach ($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>  ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				$this->deepSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
				
				Funciones::resetearActivoClasses($classes);
			}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			////$this->connexion->getConnection()->close();	
		//}				
	}
	<%}%>
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionDeepRelationship,TiposGeneracion)) {%>
	public function deepLoadRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>()	{	
		try {
			$this->deepLoadRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepLoadRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType)	{	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			$this->deepLoad($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
						
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}				
	}
	
	public function deepLoadsRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(){	
		try {
			$this->deepLoadsRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepLoadsRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType){	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			foreach ($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>  ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				$this->deepLoad($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
				
				Funciones::resetearActivoClasses($classes);
			}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}				
	}
	
	public function deepSaveRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>() {	
		try {
			$this->deepSaveRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepSaveRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType)	{	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			$this->deepSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
						
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}				
	}
	
	public function deepSavesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(){	
		try {
			$this->deepSavesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepSavesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType){	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			foreach ($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>  ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				$this->deepSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
				
				Funciones::resetearActivoClasses($classes);
			}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}				
	}
	<%}%>
	
	<%if(GenerarTipoGeneracionC(strTipoGeneracionDeepForeignKeyAndRelatioship,TiposGeneracion)) {%>
	public function deepLoadRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(){	
		try {
			$this->deepLoadRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepLoadRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType){	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
	  
		try {
			$this->connexion=Connexion::getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			$this->deepLoad($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
						
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}				
	}
	
	public function deepLoadsRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(){	
		try {
			$this->deepLoadsRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepLoadsRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType){	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			foreach ($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%>  ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				$this->deepLoad($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
				
				Funciones::resetearActivoClasses($classes);
			}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}				
	}
	
	public function deepSaveRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(){	
		try {
			$this->deepSaveRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepSaveRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType){	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
			$this->deepSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
						
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//				
	}
	
	public function deepSavesRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(){	
		try {
			$this->deepSavesRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array(),DeepLoadType::$NONE);
		} catch(Exception $e) {
			throw $e;
	  	}		
	}
	
	public function deepSavesRelationshipsAndForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>WithClassesWithDeepLoadType(array $classesP,$deepLoadType){	
		$classes=array();
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		$classes->addAll(<%=GetNombreClaseC(TablaBase.ToString())%>Logic::getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>($classesP,$deepLoadType));
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			foreach ($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>s  as $<%=GetNombreClaseObjetoC(TablaBase.ToString())%> ) {
				<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				
				$this->deepSave($this-><%=GetNombreClaseObjetoC(TablaBase.ToString())%>, false, DeepLoadType::$INCLUDE, $classes);
				
				Funciones::resetearActivoClasses($classes);
			}
			
			$this->connexion->getConnection()->commit();
			$this->connexion->getConnection()->close();	
			
		} catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			$this->connexion->getConnection()->close();	
			
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
	  	}
		//finally {
			//$this->connexion->getConnection()->close();	
		//}				
	}
	<%}%>	
}
?>
<script runat="template">
//IMPLEMENTACIONES SOBRANTES
/*
public function newInstance(<%for (int i = 0; i <TablaBase.Columns.Count; i++){%><%=GetParametroFuncionNuevoClase(TablaBase.Columns[i])%><%if((i!=TablaBase.Columns.Count-1)&&(!GetParametroFuncionNuevoClase(TablaBase.Columns[i]).Equals(string.Empty))){%>,<%}%><%}%>,$idUsuario,$strUsuarioPC,$strNamePC,$strIPPC) {  			
	    try {		
			$this->connexion=Connexion::getNewConnexion();
			
	    	$<%=GetNombreClaseObjeto(TablaBase.ToString())%>= new <%=GetNombreClase(TablaBase.ToString())%>();
		
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
			<%=  GetSetEntityColumna(TablaBase.Columns[i],TablaBase.ToString(),false) %>	
 			<% } %>
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
	   		
			<%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoria($this->connexion,$idUsuario,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$strUsuarioPC,$strNamePC,$strIPPC);
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess::save($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, $this->connexion);
	    				
			$this->connexion->getConnection()->commit();	
			
	   	}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	} //finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function update(<% for (int i = 0; i <TablaBase.Columns.Count; i++){ %><%=GetParametroFuncionActualizarClase(TablaBase.Columns[i])%> <%if((i!=TablaBase.Columns.Count-1)&&(!GetParametroFuncionActualizarClase(TablaBase.Columns[i]).Equals(string.Empty))){%>,<% } %><% } %>,$idUsuario,$strUsuarioPC,$strNamePC,$strIPPC)  {			
		//AuditoriaLogic auditoriaLogic= new AuditoriaLogic(); 
		
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			$<%=GetNombreClaseObjeto(TablaBase.ToString())%>=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntity($this->connexion, $id);
			
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired){continue; } %>
			<%=  GetSetEntityColumna(TablaBase.Columns[i],TablaBase.ToString(),true) %>	
			<% } %>
			
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoria($this->connexion,$idUsuario,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$strUsuarioPC,$strNamePC,$strIPPC);
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess::save($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, $this->connexion);	    	       	 
			
			
			$this->connexion->getConnection()->commit();
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	} //finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
	
	public function delete($id,$idUsuario,$strUsuarioPC,$strNamePC,$strIPPC)  {	
	    try {
			$this->connexion=Connexion::getNewConnexion();
			
			$<%=GetNombreClaseObjeto(TablaBase.ToString())%>=$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess->getEntity($this->connexion, $id);
			$<%=GetNombreClaseObjeto(TablaBase.ToString())%>.setIsDeleted(true);
			<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional::update<%=GetNombreClase(TablaBase.ToString())%>ToSave($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic::registrarAuditoria($this->connexion,$idUsuario,$this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>,$strUsuarioPC,$strNamePC,$strIPPC);
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess::save($this-><%=GetNombreClaseObjeto(TablaBase.ToString())%>, $this->connexion);	    	       	 			
	 		
			$this->connexion->getConnection()->commit();
			
		}  catch(Exception $e) {
			$this->connexion->getConnection()->rollback();
			Funciones::logShowExceptionMessages($e);
			throw $e;
			
      	} //finally {
			//$this->connexion->getConnection()->close();	
		//}
	}
*/
</script>