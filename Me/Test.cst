<%@ CodeTemplate Src="..\Me\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="A base class for the entities." ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table Object should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the sytem." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
Tables:
<%= WriteRelationshipPropertyString() %>

<script runat="template">
///<summary>
/// Many To Many Relationship Class Template Property String
///</summary>
protected static string MANY_TO_MANY = @"
		#region {0}
		
		private {1} {2};
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table {2}
		/// </summary>	
		public {1} {0}
		{{
			get
			{{
				if ({2} == null)
				{{
				{2} = new {1}();
				}}
	
				return {2};
			}}
			set {{ {2} = value; }}
		}}
		
		#endregion 
";

///<summary>
/// One to One Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_ONE = @"
		#region {0}
		
		private {2} {1};
		
		/// <summary>
		///	Holds a  {2} entity object
		///	which is related to this object through the relation {1}
		/// </summary>
		public {2} {0}
		{{
			get {{		return {1};		}}
			set {{ 	{1} = value; 	}}
		}}
		
		#endregion 
";
		
///<summary>
/// One To Many Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_MANY = @"
		#region {0}
		
		private {2} {1};
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation {1}
		/// </summary>	
		public {2} {0}
		{{
			get
			{{
				if ({1} == null)
				{{
				{1} = new {2}();
				}}
	
				return {1};
			}}
			set {{ {1} = value; }}
		}}
		
		#endregion
";
// My methods here.

///<summary>
///   Writes out the property string of all the relationship object collections.
///</summary>
private String WriteRelationshipPropertyString()
{	
	String tablesRelatios=String.Empty;
	///Loop Child Collections
	foreach (CollectionInfo item in GetChildrenCollections(SourceTable, SourceTables).Values)
	{
		///Assign by RelationshipType, Then Write to Response
		switch((int)item.CollectionRelationshipType)
		{
			///One To One Relationship
			case (int)RelationshipType.OneToOne:			
				object[] oneToOneParams = {
							item.PropertyNameUnique,
							item.FieldName,
							item.TypeName
				};
				item.PropertyName = string.Format(ONE_TO_ONE, oneToOneParams);
				tablesRelatios+="OneToOne:"+item.SecondaryTable+"\r\n";
				break;
				
			///One To Many, Many To One
			case (int)RelationshipType.OneToMany:
			case (int)RelationshipType.ManyToOne:
			    object[] oneToManyParams = {
						  item.PropertyNameUnique
						, item.FieldName
						, item.TypeName
				};
			item.PropertyName = string.Format(ONE_TO_MANY, oneToManyParams);
			tablesRelatios+="OneToMany:"+item.SecondaryTable+"\r\n";
			break;
			
			///Many To Many
			case (int)RelationshipType.ManyToMany:
				object[] manyToManyParams = {
						item.PropertyNameUnique,
						item.CollectionTypeName,
						item.FieldName
				};
				item.PropertyName = string.Format(MANY_TO_MANY, manyToManyParams);
				tablesRelatios+="ManyToMany:"+item.SecondaryTable+"\r\n";
				break;
				
			default:
				break;
		}
		
		///Write it out to the response stream
		//Response.Write(item.PropertyName);	
		
	
	}///End foreach loop
	return tablesRelatios;
}

public string SampleMethod()
{
	return "Method output.";
}
</script>