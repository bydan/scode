<%@ Template Language="C#" TargetLanguage="C#" Description="Template de la capa de Acceso a Datos" ResponseEncoding="UTF-8"%>    	
<%@ CodeTemplate Src="..\CommonCode\CommonCode.cs" Inherits="Me.CommonCode" Language="C#" TargetLanguage="C#" Description="A base class for the entities." ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import NameSpace="System.Collections" %>
<%@ Import NameSpace="System.Collections.Generic" %>
<%@ Property Name="NombreProgramador" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre del Programdor" %>
<%@ Property Name="Package" Type="System.String" Default="Indefinido" Category="Options" Description="Nombre de la Entidad" %>
<%@ Property Name="SchemaAuditoria" Type="System.String" Default="Auditoria" Category="Options" Description="Nombre del Programdor" %>
<%@ Property Name="TablaBase" Type="SchemaExplorer.TableSchema" EXCLUDED="true"	Category="Context"%>
<%@ Property Name="Empresa" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre de la Empresa" %>
<%@ Property Name="Schema" Type="System.String" Default="Tame" Category="Options" Description="Schema" %>
<%@ Property Name="TablasBaseCompuestoJunction" Type="SchemaExplorer.TableSchemaCollection" Category="Context"%>
<%@ Property Name="TablasBaseCompuestoDetalle" Type="SchemaExplorer.TableSchemaCollection" 	Category="Context"%>
<%@ Property Name="TablasBaseForReporte" Type="SchemaExplorer.TableSchemaCollection" Category="Context" Description="Select a set of tables." Optional="true"%>
<%@ Property Name="TiposGeneracion" Type="System.String" Default=" " Category="Options" Description="Nombre de la Entidad" %>
<%@ Property Name="GenerarMe" Type="System.Boolean" Default="false" Category="1. General" Description="Nombre del Programdor" %>
<%@ Property Name="PackageSeguridad" Type="System.String" Default="Seguridad" Category="General" Description="Nombre del Programdor" %>

<script runat="template">
String strDesde="_desde";
String strDesdeNombre="Desde";

String strHasta="_hasta";
String strHastaNombre="Hasta";

String strInicio="_inicio";
String strInicioNombre="Inicio";

String strFin="_fin";
String strFinNombre="Fin";

String strBusqueda="_busqueda";
String strBusquedaNombre="Busqueda";

public String GetProcesarInformacionTablasClasesProceso(TableSchema tableSchema,bool esLogicAdditionalNormal,bool conMaximoParametros) {
	String strFuncion=string.Empty;
	String strCommentConnexionAdditional="";
	
	//DESHABILITADO, PROCESO SE GENERA COMO BUSQUEDA
	/*
	if(!esLogicAdditionalNormal) {
		return "";	
	}
	*/
			
	bool blnEsReporteLocal= GetEsReporteFromPropertiesC(tableSchema);
	bool blnEsReporteAdditionalAux=GetEsReporteAdditionalFromPropertiesC(tableSchema);
	
	String strParametroReporte="";
	String strParametroReporteUso="";
	String strAdditionalAux="";
	String strParametrosBusquedas=GetVariablesTodosIndicesTablasC(tableSchema,false,true);
	String strParametrosBusquedasUso=GetVariablesTodosIndicesTablasC(tableSchema,true,true);
	String strTipoRetorno="Boolean";		
	String strParametroLista="";
	
	if(blnEsReporteLocal) {
		strParametroReporte="ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";
		strParametroReporteUso="parametroGeneralUsuario,moduloActual,opcionActual,usuarioActual,";
		
		if(esLogicAdditionalNormal && conMaximoParametros) {
			strParametroReporte+="GeneralEntityLogic generalEntityLogic,Object objects,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,GeneralEntityParameterReturnGeneral generalEntityReturnGeneral,";
			strParametroReporteUso+="generalEntityLogic,objects,generalEntityParameterGeneral,generalEntityReturnGeneral,";
		}
	}
	
	
	if(/*blnEsReporteAdditionalAux && */!esLogicAdditionalNormal) {
		strAdditionalAux="Additional";
		strCommentConnexionAdditional="//";
	}	
	
	String strWithConnectionGetNew="\r\n\t\t\t"+strCommentConnexionAdditional+"this.connexion=this.connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";
	String strWithConnectionCommit="\r\n\r\n\t\t\t"+strCommentConnexionAdditional+"this.connexion.commit();";
	String strWithConnectionClose="\r\n\t\t\t"+strCommentConnexionAdditional+"this.connexion.close();";
	String strWithConnectionRollBack="\r\n\t\t\t"+strCommentConnexionAdditional+"this.connexion.rollback();";
	
	if(esLogicAdditionalNormal) {
		strWithConnectionGetNew="";
		strWithConnectionCommit="";
		strWithConnectionClose="";
		strWithConnectionRollBack="";
	}
	
	if(esLogicAdditionalNormal && conMaximoParametros) {
		strTipoRetorno="static GeneralEntityParameterReturnGeneral";
	}
	
	strParametroLista=strTypeCollection+"<"+GetNombreClaseC(tableSchema.ToString())+"> "+GetNombreClaseObjetoC(tableSchema.ToString())+"s,";
	
	if(esLogicAdditionalNormal) {
		if(conMaximoParametros) {			
			strParametroLista="";
		}
	}
	
	strFuncion="\r\n\tpublic "+strTipoRetorno+" "+"ProcesarInformacion"+GetNombreClaseC(tableSchema.ToString())+""+"("+strParametroReporte+""+strParametroLista+"String sTipoBusqueda"+strParametrosBusquedas+") throws Exception {";
	
	if(!esLogicAdditionalNormal) {
		strFuncion+="\r\n\t\tBoolean procesado=false;";												
	} else {
		if(!conMaximoParametros) {
			strFuncion+="\r\n\t\tBoolean procesado=false;";	
		}
	}
	
	strFuncion+="\r\n\r\n\t\ttry {";
	
	if(!esLogicAdditionalNormal) {
		strFuncion+="\r\n\t\t\t"+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAdditionalAux+" "+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAdditionalAux+"=new "+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAdditionalAux+"();\r\n";
	}
	
	strFuncion+=strWithConnectionGetNew;
	
	if(!esLogicAdditionalNormal) {
		strFuncion+="\t\t\t\r\n\t\t\t"+strCommentConnexionAdditional+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAdditionalAux+".setConnexion(this.connexion);\r\n";
	}
	
	//strFuncion+="\r\n\t\t\tString sQuerySelect=\"\";";
	//strFuncion+="\r\n\t\t\tString sFinalQueryFinal=\"\";";
	
	//String sSufijoNombre=indexSchema.Name.Replace("Busqueda"+tableSchema.Name,"");
	
	if(!esLogicAdditionalNormal) {
		if(!conMaximoParametros) {
			strFuncion+="\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAdditionalAux+".ProcesarInformacion"+GetNombreClaseC(tableSchema.ToString())+"("+strParametroReporteUso+GetNombreClaseObjetoC(tableSchema.ToString())+"s,sTipoBusqueda"+strParametrosBusquedasUso+");";
		}  else {
			strFuncion+="\r\n\t\t\t"+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAdditionalAux+".ProcesarInformacion"+GetNombreClaseC(tableSchema.ToString())+"("+strParametroReporteUso+GetNombreClaseObjetoC(tableSchema.ToString())+"s,sTipoBusqueda"+strParametrosBusquedasUso+");";
		}
	}
	
	strFuncion+=strWithConnectionCommit;
		
	strFuncion+="\r\n\t\t} catch(Exception e) {"+strWithConnectionRollBack+"\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}";
	
	if(!esLogicAdditionalNormal) {
		strFuncion+="\r\n\r\n\t\treturn procesado;";
	} else {
		if(conMaximoParametros) {			
			strFuncion+="\r\n\r\n\t\treturn generalEntityReturnGeneral;";
		} else {
			strFuncion+="\r\n\r\n\t\treturn procesado;";
		}
	}
	
	strFuncion+="\r\n\t}\r\n";

		
	return strFuncion;
}

public String GetIndicesSqlReportesTablasClasesReporte(TableSchema tableSchema) 
		{
			
			if(blnEsReporteAdditional) {
				return "";	
			}
			
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strBodyParametrosFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersFuncionUso="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			
			String strWithConnectionGetNew="\r\n\t\t\tthis.connexion=this.connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);this.connexion.begin();";
			String strWithConnectionCommit="\r\n\r\n\t\t\tthis.connexion.commit();";
			String strWithConnectionClose="\r\n\t\t\tthis.connexion.close();";
			
			bool blnEsReporteLocal= GetEsReporteFromPropertiesC(tableSchema);
			
			bool tineEmpresaColumna=false;
			bool tineSucursalColumna=false;
			bool tineEjercicioColumna=false;
			bool tinePeriodoColumna=false;
			bool tineUsuarioColumna=false;
			//bool tineModuloColumna=false;
			
			String sCommentEmpresaParametro="";
			String sCommentSucursalParametro="";
			String sCommentEjercicioParametro="";
			String sCommentPeriodoParametro="";
			String sCommentUsuarioParametro="";
			//String sCommentModuloParametro="";
			
			String sCommentExisteWhere="";
			//ESREPORTEPARAM
			
			String strParametroReporte="";
			
			if(blnEsReporteLocal) {
				strParametroReporte="ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";
			}
			
			String strPrefijoSqlParametro=GetPrefijoSqlTableFromPropertiesC(tableSchema);
			String strPrefijoSqlParametroOriginal="";
	
			if(!strPrefijoSqlParametro.Equals(String.Empty)) {
				strPrefijoSqlParametro=strPrefijoSqlParametro+".";
			}
			
			strPrefijoSqlParametroOriginal=strPrefijoSqlParametro;
			
			bool esParametroReemplazo=GetEsParametroReporteReemplazoFromPropertiesC(tableSchema);
			bool esParametroReemplazoColumn=false;
			
			ColumnSchema columnEmpresa=null;
			ColumnSchema columnSucursal=null;
			
			foreach(IndexSchema indexSchema in tableSchema.Indexes) {
				tineEmpresaColumna=false;
				tineSucursalColumna=false;
				tineEjercicioColumna=false;
				tinePeriodoColumna=false;
				tineUsuarioColumna=false;
				//tineModuloColumna=false;
			
				sCommentEmpresaParametro="//";
				sCommentSucursalParametro="//";
				sCommentEjercicioParametro="//";
				sCommentPeriodoParametro="//";
				sCommentUsuarioParametro="//";
				//sCommentModuloParametro="//";
						
				sCommentExisteWhere="";
				
				//PARAMETROS GLOBALES
				tineEmpresaColumna=ContieneColumna(tableSchema,strIdEmpresa,true);
				tineSucursalColumna=ContieneColumna(tableSchema,strIdSucursal,true);
				tineEjercicioColumna=ContieneColumna(tableSchema,strIdEjercicio,true);
				tinePeriodoColumna=ContieneColumna(tableSchema,strIdPeriodo,true);
				tineUsuarioColumna=ContieneColumna(tableSchema,strIdUsuario,true);
				
				if(tineEmpresaColumna) {
					sCommentEmpresaParametro="";
				}
				
				if(tineSucursalColumna) {
					sCommentSucursalParametro="";
				}
				
				
				if(!indexSchema.IsPrimaryKey)
				{
					if(!VerificarIndiceBusquedaTablaC(tableSchema,indexSchema.Name))
					{
						continue;
					}
					
					strParametersFuncion="";
					strParametersNameFuncion="";
					strBodyParametrosFuncion="";
					
					if(indexSchema.IsUnique)
					{
						/*
						//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(";
							strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"WithConnection(";
							//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(true,";
							//strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"(";
							//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(isConConnexion,";							
						strBodyFuncion="\r\n\t\ttry {"+strWithConnectionGetNew+"\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+=strWithConnectionCommit;
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						*/
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(String sFinalQuery,";
							String sSufijoNombre=indexSchema.Name.Replace("Busqueda"+tableSchema.Name,"");
								
								strFunctionsWithConnection="\r\n\r\n\t@SuppressWarnings(\"resource\")";
								strFunctionsWithConnection+="\r\n\tpublic static String "+"GetSelecSql"+GetNombreClaseC(tableSchema.ToString())+sSufijoNombre+"(Connexion connexion,ConnexionType connexionType,ParameterDbType parameterDbType,String sFinalQuery,Pagination pagination,ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";//+strParametroReporte;
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,sFinalQuery,";
								//strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"(String sFinalQuery,Pagination pagination,"+strParametroReporte;
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,sFinalQuery,";
							
						}
						else
						{
							/*
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"WithConnection(";
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,";
								strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"(";
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,";
							*/
						}
						//ANTERIOR NEW
						//strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n\t\t\t}\r\n";
						
						strBodyFuncion="\r\n\t\tString sSql=\"\";";
						strBodyFuncion+="\r\n\t\tString sSqlWhere=\"\";";
						strBodyFuncion+="\r\n\t\tBoolean existeWhere=false;";
						
						if(GetExisteWhereFromPropertiesC(tableSchema)) {
							strBodyFuncion+="\r\n\t\t//SQL CON PARTE WHERE INCLUIDO";
							strBodyFuncion+="\r\n\t\texisteWhere=true;";
						}
						
						strBodyFuncion+="\r\n\r\n\t\tif(connexionType.equals(ConnexionType.HIBERNATE)) {";
							
							
						strBodyFuncion+="\r\n\r\n\t\t} else if(connexionType.equals(ConnexionType.JDBC32)) {";
						strBodyFuncion+="\r\n\t\t\tif(parameterDbType.equals(ParameterDbType.MYSQL)) {";
								
						strBodyFuncion+="\r\n\r\n\t\t\t} else if(parameterDbType.equals(ParameterDbType.POSTGRES)) {";
						strBodyFuncion+="\r\n\t\t\t\tInputStream inputStreamSql = AuxiliarGeneral.class.getResourceAsStream(\""+GetNombreClaseC(tableSchema.ToString())+"_Postgres.sql\");";
						strBodyFuncion+="\r\n\t\t\t\tString sSelectQuery = new Scanner(inputStreamSql,Constantes2.S_UTF8).useDelimiter(Constantes2.S_DELIMITER).next();";
						
						if(!esParametroReemplazo) {
							strBodyFuncion+="\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_empresa()!= null && parametroGeneralUsuario.getid_empresa()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t"+sCommentEmpresaParametro+"sSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							
							columnEmpresa=GetColumnaFromNombreC(strIdEmpresaDB,tableSchema);
							
							String strPrefijoSqlParametroColumna=strPrefijoSqlParametro;		
							if(columnEmpresa!=null && !columnEmpresa.Name.Equals(strId)) {
								strPrefijoSqlParametroColumna=GetPrefijoSqlTableFromPropertiesC(columnEmpresa);
								
								if(!strPrefijoSqlParametroColumna.Equals(string.Empty)) {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroColumna+".";
								} else {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroOriginal;
								}
							}
							
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentEmpresaParametro+"sSqlWhere+=\" "+strPrefijoSqlParametroColumna+"id_empresa=\"+parametroGeneralUsuario.getid_empresa();";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentEmpresaParametro+"existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
							
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_sucursal()!= null && parametroGeneralUsuario.getid_sucursal()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t"+sCommentSucursalParametro+"sSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							
							columnSucursal=GetColumnaFromNombreC(strIdSucursalDB,tableSchema);
							
							strPrefijoSqlParametroColumna=strPrefijoSqlParametro;
							if(columnSucursal!=null && !columnSucursal.Name.Equals(strId)) {
								strPrefijoSqlParametroColumna=GetPrefijoSqlTableFromPropertiesC(columnSucursal);
								
								if(!strPrefijoSqlParametroColumna.Equals(string.Empty)) {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroColumna+".";
								} else {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroOriginal;
								}
							}
							
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentSucursalParametro+"sSqlWhere+=\" "+strPrefijoSqlParametroColumna+"id_sucursal=\"+parametroGeneralUsuario.getid_sucursal();";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentSucursalParametro+"existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						} else {
							if(tineEmpresaColumna) {
								strBodyFuncion+="\r\n\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(\""+strIdEmpresa.ToUpper()+"\", parametroGeneralUsuario.getid_empresa().toString());";
							}
							
							if(tineSucursalColumna) {
								strBodyFuncion+="\r\n\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(\""+strIdSucursal.ToUpper()+"\", parametroGeneralUsuario.getid_sucursal().toString());";
							}
						}
						
						
						/*
						if(tineEjercicioColumna) {
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_ejercicio()!= null && parametroGeneralUsuario.getid_ejercicio()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\tsSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\r\n\t\t\t\t\tsSqlWhere+=\" id_ejercicio=\"+parametroGeneralUsuario.getid_ejercicio();";
							strBodyFuncion+="\r\n\t\t\t\t\texisteWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						}
						
						if(tinePeriodoColumna) {
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_periodo()!= null && parametroGeneralUsuario.getid_periodo()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\tsSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\r\n\t\t\t\t\tsSqlWhere+=\" id_periodo=\"+parametroGeneralUsuario.getid_periodo();";
							strBodyFuncion+="\r\n\t\t\t\t\texisteWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						}
				
						if(tineUsuarioColumna) {
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_usuario()!= null && parametroGeneralUsuario.getid_usuario()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\tsSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\r\n\t\t\t\t\tsSqlWhere+=\" id_usuario=\"+parametroGeneralUsuario.getid_usuario();";
							strBodyFuncion+="\r\n\t\t\t\t\texisteWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						}
						*/
						
						
						if(tineUsuarioColumna) {
							sCommentSucursalParametro="";
						}
						
						strBodyFuncion+="\r\n\t\t\t\tME_SQLPARAMETROS";
						
						if(!esParametroReemplazo) {
							if(GetExisteWhereFromPropertiesC(tableSchema)) {
								sCommentExisteWhere="//";
							}
							
							strBodyFuncion+="\r\n\r\n\t\t\t\t"+sCommentExisteWhere+"if(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentExisteWhere+"sSqlWhere=\" where \"+sSqlWhere;";
							strBodyFuncion+="\r\n\t\t\t\t"+sCommentExisteWhere+"}";
							
							int intNumWheres=GetNumeroWheresTableFromPropertiesC(tableSchema);
							
							if(intNumWheres<=0) {
								strBodyFuncion+="\r\n\r\n\t\t\t\tif(sSelectQuery.contains(Constantes2.S_KEYWHERE)) {";
								strBodyFuncion+="\r\n\t\t\t\t\tsSql=sSelectQuery.replace(Constantes2.S_KEYWHERE,sSqlWhere);";
								strBodyFuncion+="\r\n\t\t\t\t} else {";
								strBodyFuncion+="\r\n\t\t\t\t\tsSql=sSelectQuery+sSqlWhere;";
								strBodyFuncion+="\r\n\t\t\t\t}";
							} else {
								strBodyFuncion+="\r\n";
								for(int i=1;i<=intNumWheres;i++) {
									strBodyFuncion+="\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(Constantes2.S_KEYWHERE+\""+i+"\",sSqlWhere);";
								}
								
								strBodyFuncion+="\r\n";
								strBodyFuncion+="\r\n\t\t\t\tsSql=sSelectQuery;";
							}
						} else {
							strBodyFuncion+="\r\n";
							strBodyFuncion+="\r\n\t\t\t\tsSql=sSelectQuery;";
						}
						
						strBodyFuncion+="\r\n\r\n\t\t\t\t//OBTENER EL ORDER BY DESDE FINALQUERY, DONDE PUEDE SER POR ID, POR DEFAUTL DESCRIPTION O FORMADO POR EL CLIENTE DINAMICAMENTE ";
						strBodyFuncion+="\r\n\t\t\t\tString sOrderBy=FuncionesSql.getOrderSqlFromFinalQuery(sFinalQuery,sSelectQuery);";
						strBodyFuncion+="\r\n\r\n\t\t\t\tsSql=sSql+sOrderBy;";
						strBodyFuncion+="\r\n\r\n\t\t\t\tsSql+=QueryWhereSelectParameters.getPaginationFinalQuery(pagination, connexion.getDbType());";
						
						strBodyFuncion+="\r\n\r\n\t\t\t\tif(Constantes.ISDEVELOPING) {";
						strBodyFuncion+="\r\n\t\t\t\t\tSystem.out.println(sSql);";
						strBodyFuncion+="\r\n\t\t\t\t}";
						
						strBodyFuncion+="\r\n\t\t\t}";
						strBodyFuncion+="\r\n\t\t}";
						strBodyFuncion+="\r\n\r\n\t\treturn sSql;";
						strBodyFuncion+="\r\n\t}";
						
						/*
						strBodyFuncion="\r\n\t\ttry {";
						strBodyFuncion+="\r\n\t\t\t"+GetNombreClaseC(tableSchema.ToString())+"Logic "+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic=new "+GetNombreClaseC(tableSchema.ToString())+"Logic();\r\n";
						
						strBodyFuncion+=strWithConnectionGetNew;
						
						strBodyFuncion+="\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic.setConnexion(this.connexion);\r\n";
						strBodyFuncion+="\r\n\t\t\tString sQuerySelect=\"\";";
						strBodyFuncion+="\r\n\t\t\tString sFinalQueryFinal=\"\";";
						
						strBodyFuncion+="\r\n\t\t\tsQuerySelect="+tableSchema.Owner+"Sql.GetSelecSql"+GetNombreClaseC(tableSchema.ToString())+"(this.connexionType,this.parameterDbType,sFinalQuery,pagination,parametroGeneralUsuario,moduloActual,ME_USO_VARIABLES);";
						
						strBodyFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic.getEntities(sQuerySelect, sFinalQueryFinal);";
						strBodyFuncion+="\r\n\t\t\tthis."+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic.get"+GetNombreClaseC(tableSchema.ToString())+"s();";
						*/
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							/*
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setPagination(pagination);";	
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
							*/
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
						//strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClase(tableSchema.ToString())+"Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),\""+indexSchema.Name+"\",\"\",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());";
			
						//strEndBodyFuncion+="\r\n\r\n\t\t\t//"+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
						//ANTERIOR COMMIT
						//strEndBodyFuncion+="\r\n\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.commit();\r\n\t\t\t}";
						//strEndBodyFuncion+=strWithConnectionCommit;
						
						//ANTERIOR CLOSE
						//strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n";
						//strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						esParametroReemplazoColumn=GetEsParametroReporteReemplazoFromPropertiesC(memberColumnSchema.Column);	
							
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								} else {
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strParametersFuncion+=","+GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										strParametersNameFuncion+=","+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
									}	
									
									if(!memberColumnSchema.Column.Name.Equals(strId)) {
										strBodyParametrosFuncion+=GetParametroSql(memberColumnSchema.Column,esParametroReemplazo,esParametroReemplazoColumn);	
									}
									
								}
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
									
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
								else
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
									
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					//strBodyFuncion+="\r\n\t\t\t\tME_SQLPARAMETROS";
					
					strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion.Replace("ME_SQLPARAMETROS",strBodyParametrosFuncion)+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					//strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"").Replace(strWithConnectionClose,"");
					
					strFunctions=strFunctions.Replace("ME_USO_VARIABLES",strParametersNameFuncion);
					
					strInitFuncion+=strFunctions;
				}
			}
			
								
			return strInitFuncion; 
		}

public String GetParametroSql(ColumnSchema columnSchema,bool esParametroReemplazo,bool esParametroReemplazoColumn) {
	String strAnd=" and ";
	String strIgual=" = ";
	String strSqlWhere="";
	String strNombreColumnaSqlParametro="";
	String strPrefijoSqlParametro=GetPrefijoSqlTableFromPropertiesC(columnSchema.Table);
	String strPrefijoSqlParametroColumna=GetPrefijoSqlTableFromPropertiesC(columnSchema);
	bool esCampoCadena=false;
	String strNoCadenaVacio="";
	String strCadenaInicio="'";
	String strCadenaFin="'";
	
	if(!strPrefijoSqlParametroColumna.Equals(String.Empty)) {
		strPrefijoSqlParametro=strPrefijoSqlParametroColumna;
	}
	
	String strComillaSimpleInicio="";
	String strComillaSimpleFin="";
	
	String strFuncionStringInicio="";
	String strFuncionStringFin="";
	
	if(EsDateColumn(columnSchema) || EsDateTimeColumn(columnSchema) || EsTimeColumn(columnSchema)){
		strComillaSimpleInicio="\"'\"+";
		strComillaSimpleFin="+\"'\"";
		
		strFuncionStringInicio="Funciones2.getStringPostgresDate(";
		strFuncionStringFin=")";
	} else {
		if(!EsVarCharColumn(columnSchema) && !EsCharColumn(columnSchema)) {
			strFuncionStringFin=".toString()";			
		} else {
			strComillaSimpleInicio="\"'\"+";
			strComillaSimpleFin="+\"'\"";
			esCampoCadena=true;
		}
	}
	
	if(!strPrefijoSqlParametro.Equals(String.Empty)) {
		strPrefijoSqlParametro=strPrefijoSqlParametro+".";
	}
	
	bool esDesde=false;
	bool esHasta=false;
	
	//ESTAS SON VARIABLES GLOBALES
	if(columnSchema.Name.Equals(strIdEmpresa) || columnSchema.Name.Equals(strIdSucursal)) {
		return "";
	}
	
	String strBodyFuncion="";
	String strParametro=GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema);
	String strParametroSql=GetNombreColumnFromPropertiesInterno(columnSchema,true);
	
	strParametroSql=strParametroSql.Replace(strBusqueda,"");

	//if(strParametroSql.EndsWith(strDesde) || strParametroSql.EndsWith(strInicio)) {
	if(TieneDesde(columnSchema,true)) {
		esDesde=true;
	}
	
	//if(strParametroSql.EndsWith(strHasta) || strParametroSql.EndsWith(strFin)) {
	if(TieneDesde(columnSchema,false)) {
		esHasta=true;
	}
	
	if(esDesde) {
		strIgual=" between ";
		strParametroSql=strParametroSql.Replace(strDesde,"").Replace(strInicio,"");
	} else {
		if(esHasta) {
			strParametroSql=strParametroSql.Replace(strHasta,"").Replace(strFin,"");
		}
	}
	
	//SI NO UTILIZA LA TECNICA NOMBRE DE PARAMETRO REEMPLAZO POR VALOR
	bool tieneDesdeTabla=TieneDesde(columnSchema.Table,true);
	bool tieneHastaTabla=TieneDesde(columnSchema.Table,false);
		
	if(!esParametroReemplazo && !esParametroReemplazoColumn) {
		if(esCampoCadena) {
			strNoCadenaVacio=" && !"+strParametro+".equals(\"\")";
		}
		
		strBodyFuncion+="\r\n\r\n\t\t\t\tif("+strParametro+"!= null"+strNoCadenaVacio+") {";
		strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {sSqlWhere+=\" and \";}";
		//strBodyFuncion+="\r\n\t\t\t\t\t\t";
		//strBodyFuncion+="\r\n\t\t\t\t\t";
		
		strSqlWhere=GetSqlWhereColumnFromPropertiesC(columnSchema);
		
		if(!tieneDesdeTabla && !tieneHastaTabla) {
			if(strSqlWhere.Equals(string.Empty)) {
				strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
			} else {
				strNombreColumnaSqlParametro=strSqlWhere;
			}			
			
			strBodyFuncion+="\r\n\t\t\t\t\tsSqlWhere+=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+strIgual+"\"+"+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
		} else {
			if(!esHasta) {
				if(tieneHastaTabla) {					
					if(strSqlWhere.Equals(string.Empty)) {
						strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
					} else {
						strNombreColumnaSqlParametro=strSqlWhere;
					}
			
					strBodyFuncion+="\r\n\t\t\t\t\tsSqlWhere+=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+strIgual+"\"+"+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				} else {
					//MAYOR_IGUAL					
					if(strSqlWhere.Equals(string.Empty)) {
						strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
					} else {
						strNombreColumnaSqlParametro=strSqlWhere;
					}
					
					strBodyFuncion+="\r\n\t\t\t\t\tsSqlWhere+=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+">="+"\"+"+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				}
			} else {
				if(tieneDesdeTabla) {
					strBodyFuncion+="\r\n\t\t\t\t\tsSqlWhere+="+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				} else {
					//MENOR_IGUAL					
					if(strSqlWhere.Equals(string.Empty)) {
						strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
					} else {
						strNombreColumnaSqlParametro=strSqlWhere;
					}
					
					strBodyFuncion+="\r\n\t\t\t\t\tsSqlWhere+=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+"<="+"\"+"+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				}
			}
		}
		
		strBodyFuncion+="\r\n\t\t\t\t\texisteWhere=true;";
		strBodyFuncion+="\r\n\t\t\t\t}";	
	} else {
		String strSufijoAux="";
		
		if(esDesde && tieneHastaTabla) {
			if(!strParametro.ToUpper().Contains("_DESDE")) {
				strSufijoAux="_DESDE";
			}
			
			
		}
		
		strBodyFuncion+="\r\n\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(\""+strParametro.ToUpper()+strSufijoAux+"\", "+strFuncionStringInicio+strParametro+strFuncionStringFin+");";
	}
	
	return strBodyFuncion;
}

public bool TieneDesde(TableSchema tableSchema,bool esTieneDesde) {
	bool tiene=false;
	String strParametroSql="";
	
	foreach(ColumnSchema columnSchema in tableSchema.Columns) {
		strParametroSql=GetNombreColumnFromPropertiesInterno(columnSchema,true);
		
		if(esTieneDesde) {
			//if(strParametroSql.EndsWith(strDesde) || strParametroSql.EndsWith(strInicio)) {
			if(TieneDesde(columnSchema,esTieneDesde)) {
				tiene=true;
				break;
			}
		} else {
			//if(strParametroSql.EndsWith(strHasta) || strParametroSql.EndsWith(strFin)) {
			if(TieneDesde(columnSchema,esTieneDesde)) {
				tiene=true;
				break;
			}
		}
	}
	
	return tiene;
}

public bool TieneDesde(ColumnSchema columnSchema,bool esTieneDesde) {
	bool tiene=false;
	String strParametroSql="";
	
		strParametroSql=GetNombreColumnFromPropertiesInterno(columnSchema,true);
		
		if(esTieneDesde) {
			if(strParametroSql.EndsWith(strDesde) || strParametroSql.EndsWith(strInicio)) {
				tiene=true;
				return tiene;
			} else {
				if(columnSchema.Name.EndsWith(strDesdeNombre) || columnSchema.Name.EndsWith(strInicioNombre)) {
					tiene=true;
					return tiene;
				}
			}
		} else {
			if(strParametroSql.EndsWith(strHasta) || strParametroSql.EndsWith(strFin)) {
				tiene=true;
				return tiene;
			} else {
				if(columnSchema.Name.EndsWith(strHastaNombre) || columnSchema.Name.EndsWith(strFinNombre)) {
					tiene=true;
					return tiene;
				} 
			}
		}
	
	
	return tiene;
}

public String GetIndicesTablasClasesReporte(TableSchema tableSchema) 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersFuncionUso="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			String strAuxPrefijoAdditional="";
			
			String strWithConnectionGetNew="\r\n\t\t\tthis.connexion=this.connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);this.connexion.begin();";
			String strWithConnectionCommit="\r\n\r\n\t\t\tthis.connexion.commit();";
			String strWithConnectionClose="\r\n\t\t\tthis.connexion.close();";
			String strWithConnectionRollBack="\r\n\t\t\tthis.connexion.rollback();";
			
			bool blnEsReporteLocal= GetEsReporteFromPropertiesC(tableSchema);
			bool blnEsReporteAdditionalLocal= GetEsReporteAdditionalFromPropertiesC(tableSchema);
			bool blnEsProcesoLocal= GetEsProcesoFromPropertiesC(tableSchema);
			bool blnEsReporteAdditional=false;
			
			String strObjetoLogic="";
			String strObjetoLogicProceso="";
			String strObjetoLogicSql="";
			String strParametroReporte="";
			String strCommentAdditional="";
			String strCommentProceso="";
			String strCommentSoloReporte="//";
			
			if(blnEsProcesoLocal) {
				strCommentProceso="//";
			}
			
			if(blnEsReporteLocal) {				
				strParametroReporte="ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";
				
				//Trace.WriteLine(blnEsReporteAdditional);
				
				if(blnEsProcesoLocal || blnEsReporteAdditionalLocal) {
					strCommentSoloReporte="";
				}
			}
					
			
			
			foreach(IndexSchema indexSchema in tableSchema.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					//strCommentAdditional="";
					
					if(!VerificarIndiceBusquedaTablaC(tableSchema,indexSchema.Name))
					{
						continue;
					}
					
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(";
							strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"WithConnection(";
							//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(true,";
							strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"(";
							//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(isConConnexion,";							
						strBodyFuncion="\r\n\t\ttry {"+strWithConnectionGetNew+"\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+=strWithConnectionCommit;
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(String sFinalQuery,";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"WithConnection(String sFinalQuery,Pagination pagination,"+strParametroReporte;
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,sFinalQuery,";
								strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"(String sFinalQuery,Pagination pagination,"+strParametroReporte;
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,sFinalQuery,";
							
						}
						else
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"WithConnection(";
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,";
								strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"(";
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,";
							
						}
						//ANTERIOR NEW
						//strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n\t\t\t}\r\n";
						
						
						strBodyFuncion="\r\n\t\ttry {";
						
						blnEsReporteAdditional=GetEsReporteAdditionalFromPropertiesC(tableSchema);
						
						if(blnEsReporteAdditional) {
							strAuxPrefijoAdditional=strPrefijoAdditional;
							//strCommentAdditional="//";
						}
						
						strWithConnectionGetNew="\r\n\t\t\t"+strCommentAdditional+"this.connexion=this.connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);this.connexion.begin();";
						strWithConnectionCommit="\r\n\r\n\t\t\t"+strCommentAdditional+"this.connexion.commit();";
						strWithConnectionClose="\r\n\t\t\t"+strCommentAdditional+"this.connexion.close();";
						strWithConnectionRollBack="\r\n\t\t\t"+strCommentAdditional+"this.connexion.rollback();";
		
						strBodyFuncion+="\r\n\t\t\t"+strCommentSoloReporte+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+" "+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+"=new "+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+"();\r\n";
						
						strBodyFuncion+=strWithConnectionGetNew;
						
						strObjetoLogic="this";//GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional;
						strObjetoLogicProceso=GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional;
						strObjetoLogicSql=GetNombreClaseC(tableSchema.ToString())+"Logic"; //tableSchema.Owner+"SqlReporte";
						
						strBodyFuncion+="\r\n\t\t\t//"+strObjetoLogic+".setConnexion(this.connexion);"+strObjetoLogic+".setConnexionType(this.connexionType);"+strObjetoLogic+".setParameterDbType(this.parameterDbType);"+strObjetoLogic+".setEntityManagerFactory(this.entityManagerFactory);\r\n";
						
						String sSufijoNombre=indexSchema.Name.Replace("Busqueda"+tableSchema.Name,"");
							
						
						if(!blnEsReporteAdditional) {							
							strBodyFuncion+="\r\n\t\t\tString sQuerySelect=\"\";";
							strBodyFuncion+="\r\n\t\t\tString sFinalQueryFinal=\"\";";
							
								
							strBodyFuncion+="\r\n\t\t\t"+strCommentProceso+"sQuerySelect="+strObjetoLogicSql+".GetSelecSql"+GetNombreClaseC(tableSchema.ToString())+sSufijoNombre+"(this.connexion,this.connexionType,this.parameterDbType,sFinalQuery,pagination,parametroGeneralUsuario,moduloActual,opcionActual,usuarioActual,ME_USO_VARIABLES);";
							
							strBodyFuncion+="\r\n\r\n\t\t\t"+strCommentProceso+strObjetoLogic+".getEntities(sQuerySelect, sFinalQueryFinal);";
						} else {
							strBodyFuncion+="\r\n\t\t\t"+strObjetoLogicProceso+".Busqueda"+GetNombreClaseC(tableSchema.ToString())+sSufijoNombre+"(this.connexion,this.connexionType,this.parameterDbType,sFinalQuery,pagination,parametroGeneralUsuario,moduloActual,opcionActual,usuarioActual,ME_USO_VARIABLES);";							
						}
						
						strBodyFuncion+="\r\n\r\n\t\t\t"+strCommentProceso+"this."+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+strObjetoLogic+".get"+GetNombreClaseC(tableSchema.ToString())+"s();";
						
						if(blnEsProcesoLocal) {
							strBodyFuncion+="\r\n\r\n\t\t\tGeneralEntityParameterReturnGeneral generalEntityReturnGeneral=new GeneralEntityParameterReturnGeneral();";		
							strBodyFuncion+="\r\n\r\n\t\t\tgeneralEntityReturnGeneral="+GetNombreClaseC(tableSchema.ToString())+"LogicAdditional.ProcesarInformacion"+GetNombreClaseC(tableSchema.ToString())+"(parametroGeneralUsuario,moduloActual,opcionActual,usuarioActual,"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+",this."+GetNombreClaseObjetoC(tableSchema.ToString())+"s,new GeneralEntityParameterReturnGeneral(),generalEntityReturnGeneral,\""+indexSchema.Name+"\",ME_USO_VARIABLES);";
						}
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							/*
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setPagination(pagination);";	
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
							*/
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
						//strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClase(tableSchema.ToString())+"Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),\""+indexSchema.Name+"\",\"\",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());";
			
						//strEndBodyFuncion+="\r\n\r\n\t\t\t//"+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
						//ANTERIOR COMMIT
						//strEndBodyFuncion+="\r\n\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.commit();\r\n\t\t\t}";
						strEndBodyFuncion+=strWithConnectionCommit;
						
						//ANTERIOR CLOSE
						//strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n";
						strEndFuncion="\r\n\t\t} catch(Exception e) {"+strWithConnectionRollBack+"\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								} else {
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strParametersFuncion+=","+GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										strParametersNameFuncion+=","+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
									}	
								}
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
									
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
								else
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
									
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					
					strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"").Replace(strWithConnectionClose,"").Replace(strWithConnectionRollBack,"");
					
					strFunctions=strFunctions.Replace("ME_USO_VARIABLES",strParametersNameFuncion);
					
					strInitFuncion+=strFunctions;
				}
			}
			
								
			return strInitFuncion; 
		}
		
public String GetFuncionesTablasClasesRelacionadasForeigKeys() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public ";
			String strInit2Funcion=" get"+GetPrefijoRelacionC();
			
			String strEndFuncion="\r\n\t} catch(Exception e) {\r\n\t;\r\n}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
								
			if(!blnNoStandardTableFromProperties) {												
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					strInitFuncion="\tpublic ";
					strEndFuncion="\r\n} catch(Exception e) {\r\n\t;\r\n}\r\n\t}";
					
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						
						strInitFuncion+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+strInit2Funcion;
							
						strTablaClaseRelacionada=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "(Connexion connexion,"+GetNombreClaseC("dbo."+TablaBase.Name)+ " rel"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+")throws SQLException,Exception {\r\n\r\n\t\t"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+" "+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"= new "+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"();\r\n\r\n\t\ttry {";
						strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess "+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess=new "+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess();\r\n";
						strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.setIsForForeingKeyData(this.isForForeingsKeysDataRelationships);";
						strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.setConnexionType(this.connexionType);";
						strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.setParameterDbType(this.parameterDbType);";
						strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.setEntityManagerFactory(this.entityManagerFactory);";
						strTablaClaseRelacionada+="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"="+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.getEntity(connexion,rel"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+GetNombreCompletoColumnaClaseC(columnSchema)+ "());";
						
						//strTablaClaseRelacionada+="\r\nreturn "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";";
						strEndFuncion="\r\n\t\t} catch(SQLException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n"+"\r\n\treturn "+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+";"+ "\r\n\r\n\t}";
						strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n\r\n";
				
					}
					
				}
				
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
				MemberColumnSchemaCollection memberColumnSchemaCollectionFK=new MemberColumnSchemaCollection();
				String strCallVariablesFK="";
				
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					strInitFuncion="\tpublic ";
					strEndFuncion="\r\n} catch(Exception e) {\r\n\t;\r\n}\r\n\t}";
					
					strInitFuncion+=GetNombreClaseC(tableSchemaForeignKey.ToString())+strInit2Funcion;
							
					strTablaClaseRelacionada=GetNombreClaseC(tableSchemaForeignKey.ToString())+ "(Connexion connexion,"+GetNombreClaseC("dbo."+TablaBase.Name)+ " rel"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+")throws SQLException,Exception {\r\n\r\n\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+" "+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"= new "+GetNombreClaseC(tableSchemaForeignKey.ToString())+"();\r\n\r\n\t\ttry {";
					strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"DataAccess "+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"DataAccess=new "+GetNombreClaseC(tableSchemaForeignKey.ToString())+"DataAccess();\r\n";
					//strTablaClaseRelacionada+="\r\n\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters();\r\n";
					
					memberColumnSchemaCollectionFK=GetMemberColumnSchemaForeignKeysC(TablaBase,tableSchemaForeignKey);		
					//memberColumnSchemaCollectionFK=GetMemberColumnSchemaForeignKeysC(TablaBase,tableSchemaForeignKey);
					strCallVariablesFK=GetColumnsForeignKeysCallDataAccessC(TablaBase,memberColumnSchemaCollectionFK);
					
					strTablaClaseRelacionada+="\t\t\t"+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"="+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"DataAccess.getEntity(connexion"+strCallVariablesFK+/*GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+GetNombreCompletoColumnaClaseC(columnSchema)+ */");";
						
					//strTablaClaseRelacionada+="\r\nreturn "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";";
					strEndFuncion="\r\n\t\t} catch(SQLException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n"+"\r\n\treturn "+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+";"+ "\r\n\r\n\t}";
					strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n\r\n";							
				}
			}			
			
			return strFuncion; 
		}


public  String GetFuncionesCargarCombosFuncionestrForeignKeys()
{
	String sVariablesArray="";
	String strComentarioParaEjb="";
	
	String sNombrePakage="";
	TableSchema tableSchema=null;

	bool blnVerificarDeshabilitarFk=false;
	String strVerificarDeshabilitarFk="";
	bool blnNoLoadFk=false;
	String strComentarioNoLoadFk="";
	String strCommentForeingKeyData="";
	
	if(!blnNoStandardTableFromProperties) {	
		
		foreach(ColumnSchema column in TablaBase.Columns)
		{
			if(column.IsForeignKeyMember)
			{
				strCommentForeingKeyData="";
				strComentarioNoLoadFk="";
				blnNoLoadFk=GetConNoLoadForeignKeyColumnFromPropertiesC(column);
				
				if(blnNoLoadFk) {
					strComentarioNoLoadFk="//";	
				}
				//SI FUNCIONA PERO NO SIEMPRE				
				//tableSchema=GetNombreTablaRelacionadaFromColumn(column);
				//FUNCIONA SIEMPRE
				tableSchema=GetTableSchemaFromColumnForeignKey(column);
		
				sNombrePakage=GetPackageTableFromProperties(tableSchema);
				
				//SI EXISTE COINCIDENCIA Y AL QUERER CARGAR TODOS LOS FK SE DESHABILITA Y SE OCULTA
				blnVerificarDeshabilitarFk=VerificarClaseFkBusquedaTablaC(TablaBase,GetNombreCompletoClaseRelacionadaFromColumn(column) );
				
				if(blnVerificarDeshabilitarFk) {
					strVerificarDeshabilitarFk="";
				} else {
					strVerificarDeshabilitarFk="//";	
				}
				
				//sVariablesArray+="\r\n\tpublic void cargarCombos"+GetNombreCompletoClaseRelacionadaFromColumn(column) +"s"+strForeignKey+"Lista(String sFinalQuery)throws Exception\r\n";
				//sVariablesArray+="\t{\r\n";
				//sVariablesArray+="\t\ttry\r\n\t\t{\r\n";
				sVariablesArray+="\r\n\r\n\t\t\t"+strTypeCollection+"<"+ sNombrePakage+GetNombreClaseRelacionadaFromColumn(column)+"> "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"=new "+strTypeNewCollection+"<"+ sNombrePakage+GetNombreClaseRelacionadaFromColumn(column)+">();\r\n";
				
				//NULO
				if(column.AllowDBNull) {
					//sVariablesArray+="\t\t\t"+GetNombreClaseRelacionadaFromColumn(column)+" "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"Nulo = new "+GetNombreClaseRelacionadaFromColumn(column)+"();\r\n";
					//sVariablesArray+="\t\t\t"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"Nulo.set"+strField_+"sCodigo(Constantes.SCAMPONONE);\r\n";
				}				
			
				sVariablesArray+="\t\t\t"+strComentarioParaEjb+GetNombreClaseRelacionadaFromColumn(column)+"Logic "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"Logic=new "+ GetNombreClaseRelacionadaFromColumn(column)+"Logic();\r\n";
				sVariablesArray+="\t\t\t"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"Logic.setConnexion(this.connexion);\r\n";
				
				if(EsColumnaVariableGlobalDataBaseFromPropertiesC(column,true,false)) {
					strCommentForeingKeyData="//";					
				}
				
				sVariablesArray+="\t\t\t"+strCommentForeingKeyData+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"Logic.get"+GetNombreClaseRelacionadaFromColumn(column)+"DataAccess().setIsForForeingKeyData(true);\r\n";
				
				String strQueryStringValoresLista="sFinalQuery";
				
				if(VerificarColumnaCatalogoGeneralC(column)) {
					sVariablesArray+="\t\t\t"+"String sQueryStringValoresLista"+GetNombreClase(tableSchema.ToString())+"=\"\";\r\n";
					sVariablesArray+="\t\t\t"+"sQueryStringValoresLista"+GetNombreClase(tableSchema.ToString())+"="+GetNombreClase(tableSchema.ToString())+"ConstantesFunciones.getQueryStringValoresLista"+GetNombreClase(tableSchema.ToString())+"("+GetNombreClase(TablaBase.ToString())+"ConstantesFunciones.S"+column.Name.ToUpper()+"CODIGO);\r\n\r\n";
					
					strQueryStringValoresLista="sQueryStringValoresLista"+GetNombreClase(tableSchema.ToString());
				}
				
				/*
				sVariablesArray+="\t\t\tif(this."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"==null) {\r\n";
				sVariablesArray+="\t\t\t\tthis."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"=new "+GetNombreClaseC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"();\r\n";
				sVariablesArray+="\t\t\t}";
				*/
				
				//if busqueda session
				//sVariablesArray+="\r\n\r\n\t\t\tif(!this."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".getisBusquedaDesdeForeignKeySesion"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"()) {\r\n";
				
				//sVariablesArray+="\t\t\t\t//ARCHITECTURE";
				//sVariablesArray+="\r\n\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {";
				sVariablesArray+="\r\n\t\t\t"+strComentarioNoLoadFk+strComentarioParaEjb+strVerificarDeshabilitarFk+"if(!finalQueryGlobal"+GetNombreCompletoClaseRelacionadaFromColumn(column) +".equals(\"NONE\")) {\r\n";
				sVariablesArray+="\t\t\t\t"+strComentarioNoLoadFk+strComentarioParaEjb+strVerificarDeshabilitarFk+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"Logic.getTodos"+ GetNombreClaseRelacionadaFromColumn(column)+"s(finalQueryGlobal"+GetNombreCompletoClaseRelacionadaFromColumn(column) +",new Pagination());\r\n";
				sVariablesArray+="\t\t\t\t"+strComentarioParaEjb+""+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"="+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"Logic.get"+ GetNombreClaseRelacionadaFromColumn(column)+"s();\r\n";				
				sVariablesArray+="\t\t\t"+strComentarioNoLoadFk+strComentarioParaEjb+strVerificarDeshabilitarFk+"}\r\n\r\n";
				
				//NULO
				if(column.AllowDBNull) {
					//sVariablesArray+="\t\t\t\t"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+".add(0, "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"Nulo);\r\n\r\n";
				}
				
				sVariablesArray+="\t\t\t"+strComentarioParaEjb+""+GetNombreClaseObjetoC(TablaBase.ToString())+strForeignKey+".set"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"("+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+");\r\n";
				/*
				sVariablesArray+="\r\n\t\t\t\t}";
				sVariablesArray+=" else if(Constantes.ISUSAEJBREMOTE) {";
				
				sVariablesArray+="\r\n\t\t\t\t} else if(Constantes.ISUSAEJBHOME) {";
				
				sVariablesArray+="\r\n\t\t\t\t}\r\n\r\n";
				*/
				
				
				//sVariablesArray+="\r\n\t\t\t\t//ARCHITECTURE";		
				
				if(!blnVerificarDeshabilitarFk) {
					/*
					sVariablesArray+="\r\n\t\t\t\t//SE VA A DESHABILITAR EL FK PARA BUSCAR";
					sVariablesArray+="\r\n\r\n\t\t\t\tthis.setVisibilidadBusquedasPara"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"(false);";		
					sVariablesArray+="\r\n\t\t\t\tthis.setPermisosMantenimientoUsuario"+GetNombreClase(TablaBase.ToString())+"(false);";	
					*/
				}
				
				//if busqueda session
				/*
				sVariablesArray+="\r\n\t\t\t} else {\r\n";
				sVariablesArray+="\t\t\t\tthis.setVisibilidadBusquedasPara"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"(true);\r\n";//DESHABILITA BUSQUEDAS SIN FK ACTUAL
				
				sVariablesArray+="\t\t\t\t//ARCHITECTURE\r\n";
				sVariablesArray+="\r\n\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {";
				sVariablesArray+="\r\n\t\t\t\t\t"+strComentarioParaEjb+GetNombreClaseRelacionadaFromColumn(column).ToLower() +"Logic.getEntityWithConnection("+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".getl"+strId+GetNombreCompletoClaseRelacionadaFromColumn(column)+"Actual());\r\n";
				sVariablesArray+="\t\t\t\t\t"+strComentarioParaEjb+"this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+".add("+GetNombreClaseRelacionadaFromColumn(column).ToLower() +"Logic.get"+ GetNombreClaseRelacionadaFromColumn(column)+"());";
				sVariablesArray+="\r\n\t\t\t\t}";
				sVariablesArray+=" else if(Constantes.ISUSAEJBREMOTE) {";
				
				sVariablesArray+="\r\n\t\t\t\t} else if(Constantes.ISUSAEJBHOME) {";
				
				sVariablesArray+="\r\n\t\t\t\t}";
				sVariablesArray+="\r\n\t\t\t\t//ARCHITECTURE";
				
				//end else
				sVariablesArray+="\r\n\t\t\t}";
				
				
				sVariablesArray+="\r\n\t\t}\r\n";
				sVariablesArray+="\t\tcatch(Exception e)\r\n";
				sVariablesArray+="\t\t{\r\n";
				sVariablesArray+="\t\t\tthrow e;\r\n";
				sVariablesArray+="\t\t}\r\n";
				sVariablesArray+="\t}\r\n";
				*/
			}	
		}
	} else {
		ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
		bool blnAdmiteNulos=false;
		int cont=0;
		
		foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
				cont++;
				blnAdmiteNulos=false;
				
				//tableSchema=GetNombreTablaRelacionadaFromColumn(column);
				sNombrePakage=GetPackageTableFromProperties(tableSchemaForeignKey);
				
				//SI EXISTE COINCIDENCIA Y AL QUERER CARGAR TODOS LOS FK SE DESHABILITA Y SE OCULTA
				blnVerificarDeshabilitarFk=VerificarClaseFkBusquedaTablaC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()) );
				
				if(blnVerificarDeshabilitarFk) {
					strVerificarDeshabilitarFk="";
				} else {
					strVerificarDeshabilitarFk="//";	
				}
				
				sVariablesArray+="\r\n\tpublic void cargarCombos"+GetNombreClaseC(tableSchemaForeignKey.ToString()) +"s"+strForeignKey+"Lista()throws Exception\r\n";
				sVariablesArray+="\t{\r\n";
				sVariablesArray+="\t\ttry\r\n\t\t{\r\n";
				sVariablesArray+="\t\t\tthis."+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"s"+strForeignKey+"=new "+strTypeNewCollection+"<"+ sNombrePakage+GetNombreClaseC(tableSchemaForeignKey.ToString())+">();\r\n\r\n";
				
				if(blnAdmiteNulos) {
					sVariablesArray+="\t\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+" "+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower()+"Nulo = new "+GetNombreClaseC(tableSchemaForeignKey.ToString())+"();\r\n\r\n";
				}
				
				sVariablesArray+="\t\t\t"+strComentarioParaEjb+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic "+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"Logic = new "+ GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic();\r\n\r\n";
				
				String strQueryStringValoresLista="\"\"";			
				if(VerificarTablaValorCatalogoGeneralC(tableSchemaForeignKey)) {
					sVariablesArray+="\t\t\t"+"String sQueryStringValoresLista"+GetNombreClase(tableSchemaForeignKey.ToString())+"=\"\";\r\n";
					sVariablesArray+="\t\t\t"+"sQueryStringValoresLista"+GetNombreClase(tableSchemaForeignKey.ToString())+"="+GetNombreClase(tableSchemaForeignKey.ToString())+"ConstantesFunciones.getQueryStringValoresLista"+GetNombreClase(tableSchemaForeignKey.ToString())+"("+GetNombreClase(TablaBase.ToString())+"ConstantesFunciones.S"+cont.ToString()+"CODIGO);\r\n\r\n";
					
					strQueryStringValoresLista="sQueryStringValoresLista"+GetNombreClase(tableSchemaForeignKey.ToString());
				}
				
				sVariablesArray+="\t\t\t"+GetNombreClaseC(TablaBase.ToString())+strPrefijoJSFSessionFaces+" "+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"=new "+GetNombreClaseC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"();\r\n\r\n";
				
				
				sVariablesArray+="\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"==null) {\r\n";
				sVariablesArray+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"=new "+GetNombreClaseC(TablaBase.ToString())+strPrefijoJSFSessionFaces+"();\r\n";
				sVariablesArray+="\t\t\t}";
				
				//if busqueda session
				sVariablesArray+="\r\n\r\n\t\t\tif(!"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".getisBusquedaDesdeForeignKeySesion"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"()) {\r\n";
				
				sVariablesArray+="\t\t\t\t//ARCHITECTURE";
				sVariablesArray+="\r\n\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {";
				sVariablesArray+="\r\n\t\t\t\t\t"+strComentarioParaEjb+strVerificarDeshabilitarFk+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"Logic.getTodos"+ GetNombreClaseC(tableSchemaForeignKey.ToString())+"sWithConnection("+strQueryStringValoresLista+",new Pagination());\r\n";
				sVariablesArray+="\t\t\t\t\t"+strComentarioParaEjb+"this."+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"s"+strForeignKey+"="+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"Logic.get"+ GetNombreClaseC(tableSchemaForeignKey.ToString())+"s();";
				sVariablesArray+="\r\n\t\t\t\t}";
				sVariablesArray+=" else if(Constantes.ISUSAEJBREMOTE) {";
				
				sVariablesArray+="\r\n\t\t\t\t} else if(Constantes.ISUSAEJBHOME) {";
				
				sVariablesArray+="\r\n\t\t\t\t}";
				
				if(blnAdmiteNulos) {
					sVariablesArray+="\t\t\t\tthis."+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower()  +"s"+strForeignKey+".add(0, "+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower()+"Nulo);\r\n";
				}
				
				sVariablesArray+="\r\n\t\t\t\t//ARCHITECTURE";		
				
				if(!blnVerificarDeshabilitarFk) {
					sVariablesArray+="\r\n\t\t\t\t//SE VA A DESHABILITAR EL FK PARA BUSCAR";
					sVariablesArray+="\r\n\r\n\t\t\t\tthis.setVisibilidadBusquedasPara"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"(false);";		
					sVariablesArray+="\r\n\t\t\t\tthis.setPermisosMantenimientoUsuario"+GetNombreClase(TablaBase.ToString())+"(false);";	
				}
				
				String strParametrosNoStandardSession="";//GetParametrosCargarCombosFuncionestrForeignKeys(tableSchemaForeignKey);
				//if busqueda session
				sVariablesArray+="\r\n\t\t\t} else {\r\n";
				sVariablesArray+="\t\t\t\tthis.setVisibilidadBusquedasPara"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"(true);\r\n";//DESHABILITA BUSQUEDAS SIN FK ACTUAL
				
				sVariablesArray+="\t\t\t\t//ARCHITECTURE\r\n";
				sVariablesArray+="\r\n\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {";
				//GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".getl"+strId+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Actual
				sVariablesArray+="\r\n\t\t\t\t\t"+strComentarioParaEjb+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"Logic.getEntityWithConnection("+strParametrosNoStandardSession+");\r\n";
				sVariablesArray+="\t\t\t\t\t"+strComentarioParaEjb+"this."+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"s"+strForeignKey+".add("+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"Logic.get"+ GetNombreClaseC(tableSchemaForeignKey.ToString())+"());";
				sVariablesArray+="\r\n\t\t\t\t}";
				sVariablesArray+=" else if(Constantes.ISUSAEJBREMOTE) {";
				
				
				sVariablesArray+="\r\n\t\t\t\t} else if(Constantes.ISUSAEJBHOME) {";
				
				sVariablesArray+="\r\n\t\t\t\t}";
				sVariablesArray+="\r\n\t\t\t\t//ARCHITECTURE";
				
				//end else
				sVariablesArray+="\r\n\t\t\t}";
				
				
				sVariablesArray+="\r\n\t\t}\r\n";
				sVariablesArray+="\t\tcatch(Exception e)\r\n";
				sVariablesArray+="\t\t{\r\n";
				sVariablesArray+="\t\t\tthrow e;\r\n";
				sVariablesArray+="\t\t}\r\n";
				sVariablesArray+="\t}\r\n";									
		}
	}
	
	return sVariablesArray;
}

public String GetCommentVersionRow() 
	{
		String strCommentVersionRow=string.Empty;
			
		strCommentVersionRow=strGlobalTablaNoStandardComment;
			
		if(GetNoVersionRowTableFromPropertiesC(TablaBase)||GetNoStandardTableFromPropertiesC(TablaBase)) {
			strCommentVersionRow="//";
		}
		
		return strCommentVersionRow;
	}
	
public String GetDefinicionVariableClasesReportesGetSet() 
	{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public ";
			strInitFuncion+="";
			String strInit2Funcion="";//" get"+GetPrefijoRelacionC();
			strInit2Funcion+="";
			String strEndFuncion="";//"\r\n\t} catch(Exception e) {\r\n\t;\r\n}\r\n\t}";
			strEndFuncion+="";
			strFuncion+="\r\n\r\n\t//FUNCIONES PARA REPORTES";
			for(int i=0;i<TablasBaseForReporte.Count;i++)
			{
				strFuncion+="\r\n\r\n\tpublic "+strTypeCollection+"<"+GetNombreClase(TablasBaseForReporte[i].ToString())+"> get"+GetNombreClase(TablasBaseForReporte[i].ToString())+"s() throws Exception {";		
					strFuncion+="\r\n\t\t//this.quitar"+GetNombreClase(TablasBaseForReporte[i].ToString())+"sNulos();";
					
					strFuncion+="\r\n\r\n\t\t//"+GetNombreClase(TablaBase.ToString())+"LogicAdditional.check"+GetNombreClase(TablasBaseForReporte[i].ToString())+"ToGets("+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s,this.datosCliente,this.arrDatoGeneral);";
					
					strFuncion+="\r\n\r\n\t\t//for ("+GetNombreClase(TablasBaseForReporte[i].ToString())+" "+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"Local: "+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s ) {";
						strFuncion+="\r\n\t\t\t//"+GetNombreClase(TablaBase.ToString())+"LogicAdditional.update"+GetNombreClase(TablasBaseForReporte[i].ToString())+"ToGet("+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"Local,this.arrDatoGeneral);";
					strFuncion+="\r\n\t\t//}";
					
					strFuncion+="\r\n\r\n\t\treturn "+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s;";
				strFuncion+="\r\n\t}";
				
				strFuncion+="\r\n\r\n\tpublic void set"+GetNombreClase(TablasBaseForReporte[i].ToString())+"s("+strTypeCollection+"<"+GetNombreClase(TablasBaseForReporte[i].ToString())+"> new"+GetNombreClase(TablasBaseForReporte[i].ToString())+"s) {";
					strFuncion+="\r\n\t\tthis."+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s = new"+GetNombreClase(TablasBaseForReporte[i].ToString())+"s;";
				strFuncion+="\r\n\t}";
				
				//strFuncion+="\r\n\t\t\tthis."+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s= new "+strTypeNewCollection+"<"+GetNombreClase(TablasBaseForReporte[i].ToString())+">"+strTypeNewCollectionEnd+";";
								
				//strFuncion+="\r\n\r\n\tvoid getEntities"+GetNombreClase(TablasBaseForReporte[i].ToString())+"WithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception;";
				//strFuncion+="\r\n\tvoid getEntitiesNative"+GetNombreClase(TablasBaseForReporte[i].ToString())+"WithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception;";			 			
			}
								
			return strFuncion; 
	}
	
public String GetInicializacionVariableClasesReportes() 
	{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public ";
				strInitFuncion+="";
			String strInit2Funcion="";//" get"+GetPrefijoRelacionC();
				strInit2Funcion+="";
			String strEndFuncion="";//"\r\n\t} catch(Exception e) {\r\n\t;\r\n}\r\n\t}";
				strEndFuncion+="";
			strFuncion+="\r\n\r\n\t\t\t//FUNCIONES PARA REPORTES";
			for(int i=0;i<TablasBaseForReporte.Count;i++)
			{
				strFuncion+="\r\n\t\t\tthis."+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s= new "+strTypeNewCollection+"<"+GetNombreClase(TablasBaseForReporte[i].ToString())+">"+strTypeNewCollectionEnd+";";
				
				//strFuncion+="\r\n\tprotected "+strTypeCollection+"<"+GetNombreClase(TablasBaseForReporte[i].ToString())+"> "+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s;";
				
				//strFuncion+="\r\n\r\n\tvoid getEntities"+GetNombreClase(TablasBaseForReporte[i].ToString())+"WithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception;";
				//strFuncion+="\r\n\tvoid getEntitiesNative"+GetNombreClase(TablasBaseForReporte[i].ToString())+"WithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception;";			 			
			}
								
			return strFuncion; 
	}
	
public String GetDefinicionVariableClasesReportes() 
	{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public ";
				strInitFuncion+="";
			String strInit2Funcion="";//" get"+GetPrefijoRelacionC();
				strInit2Funcion+="";
			String strEndFuncion="";//"\r\n\t} catch(Exception e) {\r\n\t;\r\n}\r\n\t}";
				strEndFuncion+="";
			strFuncion+="\r\n\r\n\t//FUNCIONES PARA REPORTES";
			for(int i=0;i<TablasBaseForReporte.Count;i++)
			{
				strFuncion+="\r\n\tprotected "+strTypeCollection+"<"+GetNombreClase(TablasBaseForReporte[i].ToString())+"> "+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s;";

				//strFuncion+="\r\n\r\n\tvoid getEntities"+GetNombreClase(TablasBaseForReporte[i].ToString())+"WithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception;";
				//strFuncion+="\r\n\tvoid getEntitiesNative"+GetNombreClase(TablasBaseForReporte[i].ToString())+"WithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception;";			 			
			}
								
			return strFuncion; 
	}
		
		
public String GetFuncionesTablasClasesReportes() 
{
	String strFuncion=string.Empty;
	String strTablaClaseRelacionada=string.Empty;
	String strInitFuncion="public ";
		strInitFuncion+="";
	String strInit2Funcion="";//" get"+GetPrefijoRelacionC();
		strInit2Funcion+="";
	String strEndFuncion="";//"\r\n\t} catch(Exception e) {\r\n\t;\r\n}\r\n\t}";
		strEndFuncion+="";		
	strFuncion+="\r\n\r\n\t//FUNCIONES PARA REPORTES";
	for(int i=0;i<TablasBaseForReporte.Count;i++)
	{
		strFuncion+="\r\n\r\n\tpublic  void getEntities"+GetNombreClase(TablasBaseForReporte[i].ToString())+"WithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception {";	
		strFuncion+="\r\n\t\t"+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s = new  "+strTypeNewCollection+"<"+GetNombreClase(TablasBaseForReporte[i].ToString())+">"+strTypeNewCollectionEnd+";";
					
		strFuncion+="\r\n\r\n\t\ttry {";
		strFuncion+="\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";			
				
		strFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s="+GetNombreClaseObjeto(TablaBase.ToString())+"DataAccess.getEntities"+GetNombreClase(TablasBaseForReporte[i].ToString())+"(connexion,sQuerySelect, queryWhereSelectParameters);";    	       	 
				
		strFuncion+="\r\n\r\n\t\t\tconnexion.commit();";
				
		strFuncion+="\r\n\r\n\t\t} catch(Exception e) {";
		strFuncion+="\r\n\t\t\tconnexion.rollback();";
				
		strFuncion+="\r\n\r\n\t\t\tFunciones.manageException(logger,e);";
		strFuncion+="\r\n\t\t\tthrow e;";
				
		strFuncion+="\r\n\r\n\t\t} finally {";
		strFuncion+="\r\n\t\t\tconnexion.close();";				
		strFuncion+="\r\n\t\t}";
		strFuncion+="\r\n\t}";
	
		//SIN CONNECTION
		strFuncion+="\r\n\r\n\tpublic  void getEntities"+GetNombreClase(TablasBaseForReporte[i].ToString())+"(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception {";	
		strFuncion+="\r\n\t\t"+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s = new  "+strTypeNewCollection+"<"+GetNombreClase(TablasBaseForReporte[i].ToString())+">"+strTypeNewCollectionEnd+";";
					
		strFuncion+="\r\n\r\n\t\ttry {";
		strFuncion+="\r\n\t\t\t//connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";			
				
		strFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s="+GetNombreClaseObjeto(TablaBase.ToString())+"DataAccess.getEntities"+GetNombreClase(TablasBaseForReporte[i].ToString())+"(connexion,sQuerySelect, queryWhereSelectParameters);";    	       	 
				
		strFuncion+="\r\n\r\n\t\t\t//connexion.commit();";
				
		strFuncion+="\r\n\r\n\t\t} catch(Exception e) {";
		strFuncion+="\r\n\t\t\t//connexion.rollback();";
				
		strFuncion+="\r\n\r\n\t\t\tFunciones.manageException(logger,e);";
		strFuncion+="\r\n\t\t\tthrow e;";
				
		strFuncion+="\r\n\r\n\t\t} finally {";
		strFuncion+="\r\n\t\t\t//connexion.close();";				
		strFuncion+="\r\n\t\t}";
		strFuncion+="\r\n\t}";
		
	
	
		strFuncion+="\r\n\r\n\tpublic  void getEntitiesNative"+GetNombreClase(TablasBaseForReporte[i].ToString())+"WithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception {";	
		strFuncion+="\r\n\t\t"+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s = new  "+strTypeNewCollection+"<"+GetNombreClase(TablasBaseForReporte[i].ToString())+">"+strTypeNewCollectionEnd+";";
				
		strFuncion+="\r\n\r\n\t\ttry {";
		strFuncion+="\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";			
				
		strFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s="+GetNombreClaseObjeto(TablaBase.ToString())+"DataAccess.getEntitiesNative"+GetNombreClase(TablasBaseForReporte[i].ToString())+"(connexion,sQuerySelect, queryWhereSelectParameters);";    	       	 
				
		strFuncion+="\r\n\r\n\t\t\tconnexion.commit();";
				
		strFuncion+="\r\n\r\n\t\t} catch(Exception e) {";
		strFuncion+="\r\n\t\t\tconnexion.rollback();";
				
		strFuncion+="\r\n\r\n\t\t\tFunciones.manageException(logger,e);";
		strFuncion+="\r\n\t\t\tthrow e;";
				
		strFuncion+="\r\n\r\n\t\t} finally {";
		strFuncion+="\r\n\t\t\tconnexion.close();";				
		strFuncion+="\r\n\t\t}";
		strFuncion+="\r\n\t}";
		
		//SIN CONNECTION
		strFuncion+="\r\n\r\n\tpublic  void getEntitiesNative"+GetNombreClase(TablasBaseForReporte[i].ToString())+"(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception {";	
		strFuncion+="\r\n\t\t"+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s = new  "+strTypeNewCollection+"<"+GetNombreClase(TablasBaseForReporte[i].ToString())+">"+strTypeNewCollectionEnd+";";
				
		strFuncion+="\r\n\r\n\t\ttry {";
		strFuncion+="\r\n\t\t\t//connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";			
				
		strFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseForReporte[i].ToString())+"s="+GetNombreClaseObjeto(TablaBase.ToString())+"DataAccess.getEntitiesNative"+GetNombreClase(TablasBaseForReporte[i].ToString())+"(connexion,sQuerySelect, queryWhereSelectParameters);";    	       	 
				
		strFuncion+="\r\n\r\n\t\t\t//connexion.commit();";
				
		strFuncion+="\r\n\r\n\t\t} catch(Exception e) {";
		strFuncion+="\r\n\t\t\t//connexion.rollback();";
				
		strFuncion+="\r\n\r\n\t\t\tFunciones.manageException(logger,e);";
		strFuncion+="\r\n\t\t\tthrow e;";
				
		strFuncion+="\r\n\r\n\t\t} finally {";
		strFuncion+="\r\n\t\t\t//connexion.close();";				
		strFuncion+="\r\n\t\t}";
		strFuncion+="\r\n\t}";
		
		//strFuncion+="\r\n\r\n\tvoid getEntities"+GetNombreClase(TablasBaseForReporte[i].ToString())+"WithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception;";
		//strFuncion+="\r\n\tvoid getEntitiesNative"+GetNombreClase(TablasBaseForReporte[i].ToString())+"WithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception;";			 			
	}
								
	return strFuncion; 
}
	
public bool TieneComentarioAuditoria(TableSchema tableSchema) {
	bool blnTieneComentarioAuditoria=false;
	
	if(strGlobalAuditoriaComment=="//"||GetAuditoriaCommentTableFromProperties(tableSchema)=="//") {
		blnTieneComentarioAuditoria=true;
	}
	
	return blnTieneComentarioAuditoria;
}
		
public String GetAddClassesRelacionadas() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
								
				/*
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
				}
				else
				{
					strTablaClaseRelacionada+="\r\n\tprivate ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;";
				}
				*/
			}
								
			return strTablaClaseRelacionada; 
		}

public String GetAddClassesRelacionadasInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				//strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
				
				strTablaClaseRelacionada+="\r\n\t\t\t\tfor(Classe clas:classesP)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));";
				strTablaClaseRelacionada+="\r\n\t\t\t\t\t}\r\n";
				strTablaClaseRelacionada+="\t\t\t\t}\r\n";
				/*
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
				}
				else
				{
					strTablaClaseRelacionada+="\r\n\tprivate ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;";
				}
				*/
			}
								
			return strTablaClaseRelacionada; 
		}

public String GetAddClassesRelacionadasExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			bool blnExiste=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				//strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
				if(!blnExiste)
				{
					blnExiste=true;
				}
				
				strTablaClaseRelacionada+="\r\n\t\t\t\texiste=false;\r\n";		
				strTablaClaseRelacionada+="\r\n\t\t\t\tfor(Classe clas:classesP)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t\texiste=true;\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t\tbreak;\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\t}\r\n";
				strTablaClaseRelacionada+="\t\t\t\t}\r\n";
						
				strTablaClaseRelacionada+="\r\n\t\t\t\tif(!existe)";
				strTablaClaseRelacionada+=" {\r\n";
				strTablaClaseRelacionada+="\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));";
				strTablaClaseRelacionada+="\r\n\t\t\t\t}\r\n";
			}
			
			if(blnExiste)
			{
				strTablaClaseRelacionada="\r\n\t\t\t\tBoolean existe=false;\r\n"+strTablaClaseRelacionada;			
			}
			
			return strTablaClaseRelacionada; 
		}
		
public String GetAddClassesForeignKey()
	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
										
					if(columnSchema.IsForeignKeyMember)
					{
						tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						strClassesForeignKey+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+".class));";
					}
				}
				
		return strClassesForeignKey;
	}

public String GetAddClassesForeignKeyInclude()
	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
										
					if(columnSchema.IsForeignKeyMember)
					{
						tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						
						strClassesForeignKey+="\r\n\t\t\t\tfor(Classe clas:classesP)";
						strClassesForeignKey+=" {\r\n";
						strClassesForeignKey+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchema.ToString())+".class))";
						strClassesForeignKey+=" {\r\n";
						strClassesForeignKey+="\t\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+".class));";
						strClassesForeignKey+="\r\n\t\t\t\t\t}\r\n";
						strClassesForeignKey+="\t\t\t\t}\r\n";
					}
				}
				
		return strClassesForeignKey;
	}

public String GetAddClassesForeignKeyExclude()
	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		bool blnExiste=false;
		
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
										
					if(columnSchema.IsForeignKeyMember)
					{
						if(!blnExiste)
						{
							blnExiste=true;
						}
						
						tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						
						strClassesForeignKey+="\r\n\t\t\t\texiste=false;\r\n";
						strClassesForeignKey+="\r\n\t\t\t\tfor(Classe clas:classesP)";
						strClassesForeignKey+=" {\r\n";
						strClassesForeignKey+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchema.ToString())+".class))";
						strClassesForeignKey+=" {\r\n";
						strClassesForeignKey+="\t\t\t\t\t\texiste=true;\r\n";
						strClassesForeignKey+="\t\t\t\t\t\tbreak;\r\n";
						strClassesForeignKey+="\t\t\t\t\t}\r\n";
						strClassesForeignKey+="\t\t\t\t}\r\n";
						
						strClassesForeignKey+="\r\n\t\t\t\tif(!existe)";
						strClassesForeignKey+=" {\r\n";
						strClassesForeignKey+="\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+".class));";
						strClassesForeignKey+="\r\n\t\t\t\t}\r\n";
					}
				}
		
		if(blnExiste)
		{
			strClassesForeignKey="\r\n\t\t\t\tBoolean existe=false;\r\n"+strClassesForeignKey;			
		}
		
		return strClassesForeignKey;
	}
	
public String GetClassClasesRelacionadasForeigKeys(TableSchema tableSchema) 
		{
			String strTablaClaseRelacionada=string.Empty;
										
										
			foreach(ColumnSchema columnSchema in tableSchema.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					strTablaClaseRelacionada+="\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ ".class));\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}
		
public String GetXmlFuncionesClasesCompuestos() 
{
	String strFuncion=string.Empty;
	
	if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
	{
				
		for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
		{
			strFuncion+="\r\n\r\n\tpublic String getXml"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s()throws Exception";
			strFuncion+=" {";
			strFuncion+="\r\n\t\tStringBuffer xml = new StringBuffer();";
			strFuncion+="\r\n\t\tArrayList<Classe> classes=new ArrayList<Classe>();\r\n";
			strFuncion+="\r\n\t\tInteger "+strId+"Temporal=-1;\r\n";
			
			strFuncion+="\r\n\t\t"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"Logic "+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"Logic =new "+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"Logic();";
			strFuncion+="\r\n\t\t"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"Logic "+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"Logic =new "+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"Logic();\r\n\r\n";
			
			strFuncion+="\r\n\t\t"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+" "+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"=new "+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"();";
			strFuncion+="\r\n\t\t"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+" "+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"=new "+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"();\r\n\r\n";
			
			strFuncion+=GetClassClasesRelacionadasForeigKeys(TablasBaseCompuestoJunction[i]);
			
			strFuncion+=GetClassClasesRelacionadasForeigKeys(TablasBaseCompuestoDetalle[i]);
				
			strFuncion+="\r\n\t\ttry"; 
			strFuncion+=" {";
			strFuncion+="\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";
			
			strFuncion+="\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString()) +"Logic.setConnexion(connexion);";
			strFuncion+="\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"Logic.setConnexion(connexion);";
			
			strFuncion+="\r\n\t\t\txml.append(\"<?xml version=\\\"1.0\\\"?>\");";
			strFuncion+="\r\n\t\t\txml.append(\"<"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+" generated=\\\"\"+System.currentTimeMillis()+\"\\\">\");";	    
				
			strFuncion+="\r\n\r\n\t\t\t\tfor ("+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+" "+ GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+":"+ GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s )"; 
			strFuncion+=" {";
			
			strFuncion+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"="+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+".get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"();";
			strFuncion+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+"="+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+".get"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"();\r\n\r\n";
			
			strFuncion+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+"Logic.deepLoad("+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+", false, DeepLoadType.INCLUDE, classes);\r\n";
						
				for (int j = 0; j < TablasBaseCompuestoJunction[i].Columns.Count; j++)
				{ 
					strFuncion+=GetXmlColumnaC(TablasBaseCompuestoJunction[i].Columns[j],TablasBaseCompuestoJunction[i].ToString(),true); 	
				} 	     	
				strFuncion+="\r\n\r\n";
				for (int j = 0; j < TablasBaseCompuestoDetalle[i].Columns.Count; j++)
				{ 
					strFuncion+=GetXmlColumnaCompuestoC(TablasBaseCompuestoDetalle[i].Columns[j],TablasBaseCompuestoDetalle[i].ToString()); 	
				} 	
				
			strFuncion+="\r\n\r\n\t\t\t\t\txml.append(\"</item>\");";			
			strFuncion+="\r\n\t\t\t\t}\r\n";
					
			strFuncion+="\r\n\t\t\txml.append(\"</"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+">\");";
					
			strFuncion+="\r\n\t\t\tconnexion.commit();";
			strFuncion+="\r\n\t\t}"; 
			strFuncion+=" catch(Exception e)"; 
			strFuncion+=" {";
			strFuncion+="\r\n\t\t\tconnexion.rollback();\r\n\t\t\tFunciones.manageException(logger,e);";
			strFuncion+="\r\n\t\t\tthrow e;";
			strFuncion+="\r\n\t\t}";
			strFuncion+=" finally";
			strFuncion+=" {";
			strFuncion+="\r\n\t\t\tconnexion.close();";
			strFuncion+="\r\n\t\t}";
				
			strFuncion+="\r\n\t\t\treturn Funciones.validarXml(xml.toString(),"+GetNombreClaseC(TablaBase.ToString())+"DataAccess.TABLENAME);";
				
			strFuncion+="\r\n\t}";
		}
	}
	
	return strFuncion;
}


public String GetInicializacionVariableClasesCompuestos() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					
				strInitFuncion+="\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s= new "+strTypeNewCollection+"<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+">"+strTypeNewCollectionEnd+";" ;																
																																																		
				}													
			}
								
			return strInitFuncion; 
		}
		
public String GetDefinicionVariableClasesCompuestos() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					
					strInitFuncion+="\r\n\tprivate "+""+strTypeCollection+"<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> ";
					strInitFuncion+=GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";																
					/*																																			
					strInitFuncion+="\r\n\r\n\tpublic ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s()"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\treturn "+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";	
					
					strInitFuncion+="\r\n\r\n\tpublic void set"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s(ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> "+GetNombreClaseObjetoC(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjetoC(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s)"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\tthis."+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s="+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";																																				
					*/					
				}													
			}
								
			return strInitFuncion; 
		}

public String GetDefinicionVariableClasesCompuestosGetSet() 
	{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					/*
					strInitFuncion+="\r\n\tprivate "+"ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> ";
					strInitFuncion+=GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";																
					*/																																			
					strInitFuncion+="\r\n\r\n\tpublic "+strTypeCollection+"<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s()"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\treturn "+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";	
					
					strInitFuncion+="\r\n\r\n\tpublic void set"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s("+strTypeCollection+"<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> "+GetNombreClaseObjetoC(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjetoC(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s)"; 
					strInitFuncion+=" {";	
					strInitFuncion+="\r\n\t\tthis."+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s="+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s;";
					strInitFuncion+="\r\n\t}";																																				
										
				}													
			}
								
			return strInitFuncion; 
	}
		
public String GetIndicesTablasClasesCompuestos() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			
			String strParametroCompuesto="";
			String strParametroCompuesto2="";
			String strParametroCompuestoFinal2="\r\n\t\t\tqueryWhereSelectParameters2.addParameter(parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"2);";

			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
							strParametroCompuesto2="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"2= new ParameterSelectionGeneral();";
							strParametroCompuesto2+="\r\n\t\t\tparameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"2.setParameterSelectionGeneralEqual(ParameterType.LONG,"+strId+GetNombreClase(TablaBase.ToString())+".toString(),"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"DataAccess.getColumnName"+strId+GetNombreClase(TablaBase.ToString())+"(),ParameterTypeOperator.NONE,\"\",\"\");";
					
							strParametroCompuesto="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+"= new ParameterSelectionGeneral();";
							strParametroCompuesto+="\r\n\t\t\tparameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+".setParameterSelectionGeneralEqual(ParameterType.LONG,"+strId+GetNombreClase(TablaBase.ToString())+".toString(),"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"DataAccess.getColumnName"+strId+GetNombreClase(TablaBase.ToString())+"(),ParameterTypeOperator.AND);";
							strParametroCompuesto+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+strId+GetNombreClase(TablaBase.ToString())+");";

							strInitFuncion+="\r\n\tpublic  void  get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"sTodos(String sFinalQuery,Long "+strId+GetNombreClase(TablaBase.ToString())+")throws SQLException,Exception"; 
							strInitFuncion+="\r\n\t{\r\n\t\t";
							strInitFuncion+="\r\n\t\ttry {\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";		
							strInitFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";	
							strInitFuncion+=strParametroCompuesto.Replace("ParameterTypeOperator.AND","ParameterTypeOperator.NONE");
							strInitFuncion+="\r\n\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);\r\n\t\t\t";
							strInitFuncion+=GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s="+GetNombreClaseObjeto(TablaBase.ToString())+"DataAccess.getEntities" +strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"(connexion,queryWhereSelectParameters,queryWhereSelectParameters);";												
							strInitFuncion+="\r\n\t\t\tconnexion.commit();\r\n\t\t} catch(SQLException e) {\r\n\t\t\tconnexion.rollback();";
							strInitFuncion+="\r\n\t\t\tthrow e;\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tconnexion.rollback();\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tconnexion.close();";	
							strInitFuncion+="\r\n\t\t}\r\n\t}\r\n";
							
					foreach(IndexSchema indexSchema in TablasBaseCompuestoDetalle[i].Indexes)
					{
						
						

						
						if(!indexSchema.IsPrimaryKey)
						{
							
						
							strParametersFuncion="";
							strParametersNameFuncion="";
						
							if(indexSchema.IsUnique)
							{
								continue;
								/*
								strInitFuncion+="\r\n\tpublic void "+"Get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+indexSchema.Name+"(";
								strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n";
								strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
								strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
								strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.commit();";
								strEndFuncion="\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tconnexion.close();\r\n\t\t}\r\n\t}\r\n";
								*/
							}
							else
							{
								
								if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
								{
									strInitFuncion+="\r\n\tpublic void "+"get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s"+indexSchema.Name+"(String sFinalQuery,Long "+strId+GetNombreClase(TablaBase.ToString())+",";
								}
								else
								{
									strInitFuncion+="\r\n\tpublic void "+"get"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"s"+indexSchema.Name+"(";
								}
								
								strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n";
								
								if(indexSchema.Name.Contains("Busqueda"))
								{
									strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
									strBodyFuncion+=strParametroCompuesto;
									strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);";	
									
									strBodyFuncion+="\r\n\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters2=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
									strBodyFuncion+=strParametroCompuesto2;
									strBodyFuncion+=strParametroCompuestoFinal2;
											
								}
								else
								{
									strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
									strBodyFuncion+=strParametroCompuesto;
									
									strBodyFuncion+="\r\n\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters2=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
									strBodyFuncion+="\r\n\r\n\t\t\t"+strParametroCompuesto2;
									strBodyFuncion+=strParametroCompuestoFinal2;
								}
								
								strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjeto(TablasBaseCompuestoJunction[i].ToString())+GetNombreClaseObjeto(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar.ToLower()+"s="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntities"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"(connexion,queryWhereSelectParameters,queryWhereSelectParameters2);";
								strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.commit();";
								strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tconnexion.close();\r\n\t\t}\r\n\t}\r\n";
							
							}	
							int count=1;	
							strParametersFuncion="";
							strParametersNameFuncion="";	
							strParameterSelection="";
							
							bool esUnico=false;
							bool esRanges=false;
							
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
							{
								if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
									esRanges=true;
								} else {
									esRanges=false;
								}
								
								
									if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
									{
										strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
										strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								
										if(indexSchema.IsUnique)
										{
											esUnico=true;
										}						
									
										if(!count.Equals(indexSchema.MemberColumns.Count))
										{
											strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,true,false,esRanges,false);
										}
										else
										{
											strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,true,false,esRanges,false);
										}
									
										if(!indexSchema.MemberColumns.Count.Equals(count))
										{					
											strParametersFuncion+=",";
											strParametersNameFuncion+=",";	
										}
									}
									else
									{
										if(!indexSchema.Name.Contains("BusquedaRango"))
										{
											strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
											strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
										}
										else
										{
											strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
											strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
											
											strParametersFuncion+=",";
											strParametersNameFuncion+=",";	
											
											strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
											strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									
										}
										strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
										break;
									}
									
								count++;
							}
							
							strInitFuncion+=strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+" ";																																			
						}
					}
				}													
			}
								
			return strInitFuncion; 
		}

public String GetMaintenanceTablasClasesRelacionadas() 
		{
			String strTablaClaseRelacionada="";
			String strTablaClaseRelacionada3="";
			
			String strFuncionInit="\r\n\tpublic void save"+GetNombreClase(TablaBase.ToString())+"RelacionesWithConnection("+GetNombreClase(TablaBase.ToString()) +" "+GetNombreClaseObjetoC(TablaBase.ToString());
			String strFuncionMiddle=")throws SQLException,Exception {";
			strFuncionMiddle+="\r\n\t\ttry {\r\n\t\t\tthis.getNewConnexionToDeep();\r\n\t";
			String strFuncionEnd="\r\n\r\n\t\t\tconnexion.commit();\r\n\r\n\t\t} catch(SQLException e) {\r\n\t\t\tconnexion.rollback();\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\r\n\t\t} catch(Exception e) {\r\n\t\t\tconnexion.rollback();\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\r\n\t\t} finally {\r\n\t\t\tthis.closeNewConnexionToDeep();\r\n\t\t}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,false);
			
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			bool encontrado=false;
			String sClasesNoRelacionadas=String.Empty;
			String[] sClases;
			bool blClaseNo=false;
			TableSchema tablaRelacionadaObjetivo;
			
			if(!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) {
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {								
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					
					
					//NO FUNCIONA EN DESORDEN RELACIONES
					/*
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
						//continue;
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}
					*/
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
					{
						strTablaClaseRelacionada+=","+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
					}
					else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
						strTablaClaseRelacionada+=","+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+ "s";
					}
				}
			}
			
			bool blnEsPrimero=true;
			
			arrayListRelaciones=new ArrayList();
			strNombreAdicional="";
			
			if(!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) {
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
				{
					
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				
					//NO FUNCIONA EN DESORDEN RELACIONES
					/*
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
						//continue;
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}
					*/
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
					{
						if(!blnEsPrimero) {
						strTablaClaseRelacionada3+=",";
						}
						
						blnEsPrimero=false;
						
						strTablaClaseRelacionada3+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
					}
					else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
						if(!blnEsPrimero) {
						strTablaClaseRelacionada3+=",";
						}
						
						blnEsPrimero=false;
						
						strTablaClaseRelacionada3+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+ "s";
					}/*
					else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
					{
						if(!blnEsPrimero) {
						strTablaClaseRelacionada3+=",";
						}
						
						blnEsPrimero=false;
						
						strTablaClaseRelacionada3+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+ "s";
					}*/
				}
			}
			
			String strTablaClaseRelacionada2="";
			strTablaClaseRelacionada2+="\r\n\t\t\tthis.set"+GetNombreClaseC(TablaBase.ToString())+"("+GetNombreClaseObjetoC(TablaBase.ToString()) +");";
			
		
			strTablaClaseRelacionada2+="\r\n\r\n\t\t\tif(("+GetNombreClaseObjetoC(TablaBase.ToString())+".getIsNew()||"+GetNombreClaseObjetoC(TablaBase.ToString())+".getIsChanged())&&!"+GetNombreClaseObjetoC(TablaBase.ToString())+".getIsDeleted()"+")";
			strTablaClaseRelacionada2+=" {";
			strTablaClaseRelacionada2+="\r\n\t\t\t\tthis.save"+GetNombreClaseC(TablaBase.ToString())+"();";
			strTablaClaseRelacionada2+="\r\n\t\t\t\tthis.save"+GetNombreClaseC(TablaBase.ToString())+"RelacionesDetalles("+strTablaClaseRelacionada3+");";
			strTablaClaseRelacionada2+="\r\n\r\n\t\t\t}";
			strTablaClaseRelacionada2+=" else if("+GetNombreClaseObjetoC(TablaBase.ToString())+".getIsDeleted())";
			strTablaClaseRelacionada2+=" {";
			strTablaClaseRelacionada2+="\r\n\t\t\t\tthis.save"+GetNombreClaseC(TablaBase.ToString())+"RelacionesDetalles("+strTablaClaseRelacionada3+");";
			strTablaClaseRelacionada2+="\r\n\t\t\t\tthis.save"+GetNombreClaseC(TablaBase.ToString())+"();";
			strTablaClaseRelacionada2+="\r\n\t\t\t}";
			
			strTablaClaseRelacionada=strFuncionInit+strTablaClaseRelacionada+strFuncionMiddle+strTablaClaseRelacionada2+strFuncionEnd;
			return strTablaClaseRelacionada; 
		}
		
public String GetMaintenanceTablasClasesRelacionadasDetalles() 
		{
			String strTablaClaseRelacionada="";
			String strFuncionInit="\r\n\tprivate void save"+GetNombreClase(TablaBase.ToString())+"RelacionesDetalles(";
			String strFuncionMiddle=")throws Exception {\r\n";
			strFuncionMiddle+="\t\ttry {\r\n\t";
			String strFuncionEnd="\r\n\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,false);
			
			bool blnEsPrimero=true;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			TableSchema tablaRelacionadaObjetivo;
			bool encontrado=false;
			String sClasesNoRelacionadas=String.Empty;
			String[] sClases;
			bool blClaseNo=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}
				else
				{
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
								
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				
				//NO FUNCIONA EN DESORDEN RELACIONES
				/*
				if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					//continue;
				} else {
					strNombreAdicional="";
					arrayListRelaciones.Add(collectionInfo.SecondaryTable);
				}
				*/
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					if(!blnEsPrimero) {
					  strTablaClaseRelacionada+=",";
					}
					
					blnEsPrimero=false;
					
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					if(!blnEsPrimero) {
					  strTablaClaseRelacionada+=",";
					}
					
					blnEsPrimero=false;
					strTablaClaseRelacionada+=strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+ "s";
				}
			}
			
			String strTablaClaseRelacionada2="";
			
			bool blnExisteDetalles=false;
			
			arrayListRelaciones=new ArrayList();
			strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}
				else
				{
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
								
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				
				//NO FUNCIONA EN DESORDEN RELACIONES
				/*
				if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					//continue;
				} else {
					strNombreAdicional="";
					arrayListRelaciones.Add(collectionInfo.SecondaryTable);
				}
				*/
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					blnExisteDetalles=true;
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strNombreAdicional+"Logic=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic();";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+");";
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\tif("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"()!=null) {";										
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"().set"+strIdGetSet+"(id"+GetNombreClaseC(TablaBase.ToString())+"Actual);";
					strTablaClaseRelacionada2+="\r\n\t\t\t}\r\n";
					
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.setConnexion(this.getConnexion());";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.setDatosCliente(this.datosCliente);";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.save"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"();";
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					blnExisteDetalles=true;
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strNombreAdicional+"Logic=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"Logic();";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"s("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s);";
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+" "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable) +"s()) {";					
					strTablaClaseRelacionada2+="\r\n\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +".set"+GetParameterClaseDeepRelacionadoC(collectionInfo)+"(id"+GetNombreClaseC(TablaBase.ToString())+"Actual);";
					strTablaClaseRelacionada2+="\r\n\t\t\t}\r\n";
					
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic.setConnexion(this.getConnexion());";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic.setDatosCliente(this.datosCliente);";
					strTablaClaseRelacionada2+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"Logic.save"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"s();";
				}
			}
			
			if(blnExisteDetalles)
			{
				strTablaClaseRelacionada2="\r\n\t\t\tLong id"+GetNombreClaseC(TablaBase.ToString())+"Actual=this.get"+GetNombreClaseC(TablaBase.ToString())+"().get"+strIdGetSet+"();"+strTablaClaseRelacionada2;
			}
			
			strTablaClaseRelacionada=strFuncionInit+strTablaClaseRelacionada+strFuncionMiddle+strTablaClaseRelacionada2+strFuncionEnd;
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysisDeepSaveBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="get"+GetPrefijoRelacionC();
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionada+="\r\n\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
						
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					strTablaClaseRelacionada+="\r\n\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",connexion);\r\n";											
				}
			}
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysisDeepSaveBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;							
			String strInitFuncion="get"+GetPrefijoRelacionC();
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionadasave="\r\n\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
						strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {"+ strTablaClaseRelacionadasave+"\t\t\t}\r\n";
			
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					strTablaClaseRelacionadasave="\r\n\t\t\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",connexion);\r\n";
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchemaForeignKey.ToString())+".class)) {"+ strTablaClaseRelacionadasave+"\t\t\t}\r\n";
										
				}
			}
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysisDeepSaveBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;						
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFor="\r\n\t\tfor(Classe clas:clases)\r\n\t\t{";
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionadasave="\r\n\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
						strTablaClaseRelacionada+="\r\n\t\texiste=false;\r\n"+strInitFor;
						strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {"+ strTablaClaseRelacionadasave+"\t\t}\r\n";
			
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					
					strTablaClaseRelacionadasave="\r\n\t\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",connexion);\r\n";
					strTablaClaseRelacionada+="\r\n\t\texiste=false;\r\n"+strInitFor;
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchemaForeignKey.ToString())+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {"+ strTablaClaseRelacionadasave+"\t\t}\r\n";										
				}
			}
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepSaveBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();
			
			if(!blnNoStandardTableFromProperties) {
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionada+="\r\n\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
						strTablaClaseRelacionada+="\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
						strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjeto("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
					
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					strTablaClaseRelacionada+="\r\n\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",connexion);\r\n";
					strTablaClaseRelacionada+="\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic "+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"Logic= new "+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic(connexion);\r\n";
					strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";											
				}
			}
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepSaveBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;							
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();					
			
			if(!blnNoStandardTableFromProperties) {
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionadasave="\r\n\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
						
						strTablaClaseRelacionadaLogicisDeepSave="\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
						strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\t\t\t\t";
					
						strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {"+ strTablaClaseRelacionadasave+strTablaClaseRelacionadaLogicisDeepSave+"\r\n\t\t\t}\r\n";
			
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					strTablaClaseRelacionadasave="\r\n\t\t\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",connexion);\r\n";
						
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic "+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"Logic= new "+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t\t"+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",isDeep,deepLoadType,clases);"+"\t\t\t\t";
					
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchemaForeignKey.ToString())+".class)) {"+ strTablaClaseRelacionadasave+strTablaClaseRelacionadaLogicisDeepSave+"\r\n\t\t\t}\r\n";
										
				}
			}
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysNoisDeepSaveBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadasave=string.Empty;	
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			String strTablaClaseRelacionadaLogic=string.Empty;
			String strInitFuncion="get"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();	
			String strInitFor="\r\n\t\tfor(Classe clas:clases) {";
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionadasave="\r\n\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
						
						strTablaClaseRelacionadaLogicisDeepSave="\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
						strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
					
						strTablaClaseRelacionada+="\r\n\t\texiste=false;\r\n"+strInitFor+"\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {"+ strTablaClaseRelacionadasave+strTablaClaseRelacionadaLogicisDeepSave+"\t\t}";
			
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					
					strTablaClaseRelacionadasave="\r\n\t\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",connexion);\r\n";
						
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic "+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"Logic= new "+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t"+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
					
					strTablaClaseRelacionada+="\r\n\t\texiste=false;\r\n"+strInitFor+"\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchemaForeignKey.ToString())+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {"+ strTablaClaseRelacionadasave+strTablaClaseRelacionadaLogicisDeepSave+"\t\t}";										
				}
			}
			
			return strTablaClaseRelacionada; 
		}	
		
public String SetClasesRelacionadasForeigKeysisDeepLoadBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="set"+GetPrefijoRelacionC();
			
			if(!blnNoStandardTableFromProperties) {						
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
						strTablaClaseRelacionada+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionada+=GetNombreClaseC(tableSchemaForeignKey.ToString())+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC(tableSchemaForeignKey.ToString())+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";							
				}
			}
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysisDeepLoadBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;							
			String strInitFuncion="set"+GetPrefijoRelacionC();
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionadaReturn="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
						strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
						strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n"+ strTablaClaseRelacionadaReturn+"\t\t\t}\r\n";
			
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					
					strTablaClaseRelacionadaReturn="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC(tableSchemaForeignKey.ToString())+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC(tableSchemaForeignKey.ToString())+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseC(tableSchemaForeignKey.ToString()))+".class)) {\r\n"+ strTablaClaseRelacionadaReturn+"\t\t\t}\r\n";							
				}
			}
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysisDeepLoadBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;							
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFor="\r\n\t\tfor(Classe clas:clases) {";
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionadaReturn="\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
						strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
						strTablaClaseRelacionada+="\r\n\t\texiste=false;\r\n"+strInitFor;
						strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n"+ strTablaClaseRelacionadaReturn+"\t\t}";
			
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					
					strTablaClaseRelacionadaReturn="\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC(tableSchemaForeignKey.ToString())+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC(tableSchemaForeignKey.ToString())+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\r\n\t\texiste=false;\r\n"+strInitFor;
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchemaForeignKey.ToString())+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n"+ strTablaClaseRelacionadaReturn+"\t\t}";										
				}
			}
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepLoadBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
						strTablaClaseRelacionada+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
						strTablaClaseRelacionada+="\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
						strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjeto("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
					
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					
					strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionada+=GetNombreClaseC(tableSchemaForeignKey.ToString())+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC(tableSchemaForeignKey.ToString())+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic "+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"Logic= new "+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic(connexion);\r\n";
					strTablaClaseRelacionada+="\t\t"+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";												
				}
			}
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoisDeepLoadBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;	
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();		
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionadaReturn="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
						strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
						
						strTablaClaseRelacionadaLogicisDeepSave="\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
						strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\t\t\t\t";
					
						strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n"+ strTablaClaseRelacionadaReturn+strTablaClaseRelacionadaLogicisDeepSave+"\r\n\t\t\t}\r\n";
			
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey)) {
						continue;
					}
					strTablaClaseRelacionadaReturn="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC(tableSchemaForeignKey.ToString())+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC(tableSchemaForeignKey.ToString())+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
						
					strTablaClaseRelacionadaLogicisDeepSave="\t\t\t\t"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic "+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"Logic= new "+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t\t"+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",isDeep,deepLoadType,clases);"+"\t\t\t\t";
					
					strTablaClaseRelacionada+="\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchemaForeignKey.ToString())+".class)) {\r\n"+ strTablaClaseRelacionadaReturn+strTablaClaseRelacionadaLogicisDeepSave+"\r\n\t\t\t}\r\n";										
				}
			}
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysNoisDeepLoadBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;		
			String strTablaClaseRelacionadaLogicisDeepSave=string.Empty;
			String strInitFuncion="set"+GetPrefijoRelacionC();
			String strInitFuncionGet="get"+GetPrefijoRelacionC();
			String strInitFor="\r\n\t\tfor(Classe clas:clases) {";
			
			if(!blnNoStandardTableFromProperties) {
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
						strTablaClaseRelacionadaReturn="\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
						strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
						strTablaClaseRelacionadaLogicisDeepSave="\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
						strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
					
						strTablaClaseRelacionada+="\r\n\r\n\t\texiste=false;\r\n\r\n"+strInitFor+"\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n"+ strTablaClaseRelacionadaReturn+strTablaClaseRelacionadaLogicisDeepSave+"\t\t}";
			
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey))
						{
						continue;
						}
						strTablaClaseRelacionadaReturn="\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
						strTablaClaseRelacionadaReturn+=GetNombreClaseC(tableSchemaForeignKey.ToString())+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC(tableSchemaForeignKey.ToString())+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
						strTablaClaseRelacionadaLogicisDeepSave="\t\t\t"+GetNombreClase("dbo."+GetNombreClaseC(tableSchemaForeignKey.ToString()))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseC(tableSchemaForeignKey.ToString()))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseC(tableSchemaForeignKey.ToString()))+"Logic(connexion);\r\n";
						strTablaClaseRelacionadaLogicisDeepSave+="\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseC(tableSchemaForeignKey.ToString()))+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC(tableSchemaForeignKey.ToString())+ "()"+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
					
						strTablaClaseRelacionada+="\r\n\r\n\t\texiste=false;\r\n\r\n"+strInitFor+"\r\n\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseC(tableSchemaForeignKey.ToString()))+".class)) {\r\n\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n"+ strTablaClaseRelacionadaReturn+strTablaClaseRelacionadaLogicisDeepSave+"\t\t}";
										
				}
			}
			
			return strTablaClaseRelacionada; 
		}	

public bool ExisteClasesRelacionadasForeigKeys() 
		{
			bool existe= false;
										
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					 existe= true;
				}
			}
								
			return existe; 
		}

public String GetClassClasesRelacionadasForeigKeys() 
		{
			String strTablaClaseRelacionada=string.Empty;
			ArrayList arrayListRelaciones=new ArrayList();
										
			if(!blnNoStandardTableFromProperties) {								
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)))) {
							continue;
						} else {
							arrayListRelaciones.Add(GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)));
						}
						
						strTablaClaseRelacionada+="classes.add(new Classe("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ ".class));\r\n";
					
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,GetNombreClaseC(tableSchemaForeignKey.ToString()))) {
						continue;
					} else {
						arrayListRelaciones.Add(GetNombreClaseC(tableSchemaForeignKey.ToString()));
					}
						
					strTablaClaseRelacionada+="classes.add(new Classe("+GetNombreClaseC(tableSchemaForeignKey.ToString())+ ".class));\r\n";												
				}
			}
			
			return strTablaClaseRelacionada; 
		}

public String GetIndicesTablasClasesisDeepSave() 
		{
			String strSufijoRelacionRecursivo="";
			bool existeClaseForeign=false;
			bool existeClaseRelacionada=false;
			String strNombreExtraRelacion="";
			
			String strInit="\r\n"+GetNombreClaseC(TablaBase.ToString())+"DataAccess.save("+GetNombreClaseObjeto(TablaBase.ToString())+", connexion);\r\n";
												
			String strTablaClaseRelacionada2=string.Empty;
			System.Collections.Hashtable tablasRelacionadas2=GetTablasRelacionadas(TablaBase);
			String strInitNone="\r\n\tif(deepLoadType.equals(DeepLoadType.NONE)) {\r\n";
			String strInitInclude="\telse if(deepLoadType.equals(DeepLoadType.INCLUDE)) {\r\n";
			String strInitExclude="\telse if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {\r\n";
			String strInitFor="\r\n\t\tfor(Classe clas:clases) {";
			String strInitIfClass="\r\n\t\t\tif(clas.clas.equals(";
			
			String strFuncionInclude=string.Empty;
			String strFuncionExclude=string.Empty;
			
            strTablaClaseRelacionada2="\r\nelse {"+strInitNone +SetClasesRelacionadasForeigKeysNoisDeepSaveBeep();
			
			strFuncionInclude="";
			strFuncionExclude="";
			TableSchema tablaRelacionadaObjetivo;
			
			existeClaseForeign=ExisteClasesRelacionadasForeigKeys(); 
			bool useClasesSiNo=GetUseClasesSiNoPropertyFromPropertiesC(TablaBase);
			
			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {			
				//Trace.WriteLine("here="+useClasesSiNo);
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
					
				if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
					continue;					
				}
				
				strFuncionInclude+="\r\n"+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionInclude+="\t\t\t\tclas.blnActivo=false;\r\n";
				strFuncionExclude+="\r\n\r\n\r\n\t\texiste=false;\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\tclas.blnActivo=false;\r\n";
				strFuncionExclude+="\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n";

				existeClaseRelacionada=true;
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada2+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";					
					if(!blnNoStandardTableFromProperties) {		
						strTablaClaseRelacionada2+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";
					}					
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepSave("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),isDeep,deepLoadType,clases);\r\n";
					
					strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";					
					if(!blnNoStandardTableFromProperties) {	
						strFuncionInclude+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";					
					}					
					strFuncionInclude+="\r\n\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);";					
					strFuncionInclude+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepSave("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),isDeep,deepLoadType,clases);\r\n";
					
					strFuncionExclude+="\t\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
					strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";					
					if(!blnNoStandardTableFromProperties) {	
						strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";					
					}
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);";										
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepSave("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),isDeep,deepLoadType,clases);\r\n";
		
				}
				else
				{
					strNombreExtraRelacion=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					
					if(TablaBase.Name!=collectionInfo.SecondaryTable){ strSufijoRelacionRecursivo=""; }
					else {strSufijoRelacionRecursivo="Recursivo";}
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
					//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
						strTablaClaseRelacionada2+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s()) {\r\n";
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";								
						if(!blnNoStandardTableFromProperties) {	
							strTablaClaseRelacionada2+="\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+GetParameterClaseDeepRelacionadoC(collectionInfo)+/*strNombreExtraRelacion+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());\r\n";
						}
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";				
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t}\r\n";
						
						strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s()) {\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";					
						if(!blnNoStandardTableFromProperties) {	
							strFuncionInclude+="\t\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+GetParameterClaseDeepRelacionadoC(collectionInfo)+/*strNombreExtraRelacion+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());\r\n";						
						}						
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";								
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t}\r\n";
						
						strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s()) {\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
						if(!blnNoStandardTableFromProperties) {	
							strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+GetParameterClaseDeepRelacionadoC(collectionInfo)+/*strNombreExtraRelacion+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());\r\n";
						}
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";												
						strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t}\r\n";
					}
					else
					{
						strTablaClaseRelacionada2+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";					
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";				
						strTablaClaseRelacionada2+="\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t}\r\n";
						
						strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";								
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t}\r\n";
						
						strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n";												
						strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t}\r\n";
					}
				
				}
			
				strFuncionInclude+="\t\t\t}";
				strFuncionExclude+="\t\t}";						
			}
			}
			
			strFuncionInclude=strInitInclude+strInitFor+SetClasesRelacionadasForeigKeysNoisDeepSaveBeepInclude()+ strFuncionInclude+ "\r\n\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude+SetClasesRelacionadasForeigKeysNoisDeepSaveBeepExclude()+ strFuncionExclude+ "\r\n\t}\r\n}";
			
			strTablaClaseRelacionada2=strTablaClaseRelacionada2+"\t}\r\n"+strFuncionInclude+strFuncionExclude;
			
			// parte del no if isDeep
			
			
			String strInitIfFuncion=string.Empty;
			String strIfFuncion=string.Empty;
			String strInitElseFuncion=string.Empty;
			String strElseFuncion=string.Empty;
			
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion=" get"+GetPrefijoRelacionC();
			
			strInitIfFuncion=strInit+"\r\nif(!isDeep) {\r\n";
			strInitElseFuncion="\r\n}\r\nelse {\r\n";
			
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
					
				if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
					continue;					
				}
				
				strInitFuncion="get"+GetPrefijoRelacionC();
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					//strInitFuncion=strInitFuncion;
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "();";
				}
				else
				{
					//strInitFuncion=strInitFuncion;
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s();";
			
				}
				
			strFuncion+=GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
			}
			}
			
			
			String strTablaClaseRelacionada0=string.Empty;
			System.Collections.Hashtable tablasRelacionadas0=GetTablasRelacionadas(TablaBase);
			
            strTablaClaseRelacionada0=strInitNone+ SetClasesRelacionadasForeigKeysisDeepSaveBeep();
			strFuncionInclude="";
			strFuncionExclude="";
			
			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {	
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
					
				if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
					continue;					
				}
				
				strFuncionInclude+="\r\n"+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionInclude+="\t\t\t\tclas.blnActivo=false;\r\n";
				strFuncionExclude+="\r\n\r\n\t\texiste=false;\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\tclas.blnActivo=false;\r\n";
				strFuncionExclude+="\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					if(!blnNoStandardTableFromProperties) {	
						strTablaClaseRelacionada0+="\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";
					}
					strTablaClaseRelacionada0+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);\r\n";
					
					if(!blnNoStandardTableFromProperties) {	
						strFuncionInclude+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";
					}
					strFuncionInclude+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);\r\n";
					
					strFuncionExclude+="\t\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
					if(!blnNoStandardTableFromProperties) {	
						strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"().set"+/*GetPrefijoTablaC()+*/strIdGetSet+/*GetNombreClaseC(TablaBase.ToString())+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";
					}
					strFuncionExclude+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),connexion);\r\n";
				}
				else
				{
					strNombreExtraRelacion=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					
					if(TablaBase.Name!=collectionInfo.SecondaryTable){ strSufijoRelacionRecursivo=""; }
					else {strSufijoRelacionRecursivo="Recursivo";}
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
						//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
						strTablaClaseRelacionada0+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s()) {";
						if(!blnNoStandardTableFromProperties) {	
							strTablaClaseRelacionada0+="\r\n\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+GetParameterClaseDeepRelacionadoC(collectionInfo)+/*strNombreExtraRelacion+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";						
						}
						strTablaClaseRelacionada0+="\r\n\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t}\r\n";
					
						strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s()) {\r\n";
						if(!blnNoStandardTableFromProperties) {	
							strFuncionInclude+="\t\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+GetParameterClaseDeepRelacionadoC(collectionInfo)+/*strNombreExtraRelacion+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";											
						}
						strFuncionInclude+="\r\n\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t\t\t}\r\n";
						
						strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s()) {\r\n";
						if(!blnNoStandardTableFromProperties) {	
							strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable) +strSufijoRelacionRecursivo+".set"+GetPrefijoTablaC()+GetParameterClaseDeepRelacionadoC(collectionInfo)+/*strNombreExtraRelacion+*/"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";																
						}
						strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t\t}\r\n";
					}
					else
					{
						//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
						strTablaClaseRelacionada0+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strTablaClaseRelacionada0+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t}\r\n";
					
						strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t\t\t}\r\n";
						
						strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
						strFuncionExclude+="\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()) {\r\n";
						strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",connexion);"+"\r\n\t\t\t}\r\n";
				
					}
				}
				strFuncionInclude+="\t\t\t}";
				strFuncionExclude+="\r\n\t\t}";
				
			}
			}
			
			strFuncionInclude=strInitInclude+strInitFor+ SetClasesRelacionadasForeigKeysisDeepSaveBeepInclude()+strFuncionInclude +"\r\n\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude+ SetClasesRelacionadasForeigKeysisDeepSaveBeepExclude()+strFuncionExclude+"\r\n\t}\r\n}";
	
			
			strIfFuncion=strInitIfFuncion+strTablaClaseRelacionada0+"\t}\r\n"+strFuncionInclude+strFuncionExclude;//+"\r\n}\r\n"+strInitElseFuncion+strTablaClaseRelacionada0+strTablaClaseRelacionada2+"\r\n}\r\nelse{\r\n"+strTablaClaseRelacionada3+"\r\n}\r\n}\r\n}\r\n";					
		
			
			if(!existeClaseForeign&&!existeClaseRelacionada)
			{
				return "";
			}
			
			return strIfFuncion+strTablaClaseRelacionada2; 
		}
		
public String GetIndicesTablasClasesisDeepLoad() 
		{
			String strNombreExtraRelacion="";
			String strSufijoRelacionRecursivo="";
			bool existeClaseForeign=false;
			bool existeClaseRelacionada=false;
			
			String strTablaClaseRelacionada2=string.Empty;
			System.Collections.Hashtable tablasRelacionadas2=GetTablasRelacionadas(TablaBase);
			String strInitNone="\r\n\tif(deepLoadType.equals(DeepLoadType.NONE)) {\r\n\r\n";
			String strInitInclude="\telse if(deepLoadType.equals(DeepLoadType.INCLUDE)) {\r\n";
			String strInitExclude="\telse if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {\r\n";
			String strInitFor="\r\n\t\tfor(Classe clas:clases) {";
			String strInitIfClass="\r\n\t\t\tif(clas.clas.equals(";
			String strFuncionInclude=string.Empty;
			String strFuncionExclude=string.Empty;
			
			strFuncionInclude="";
			strFuncionExclude="";
			
            strTablaClaseRelacionada2="\r\nelse {\r\n"+strInitNone+ SetClasesRelacionadasForeigKeysNoisDeepLoadBeep();
			
			String strInitFuncion=" get"+GetPrefijoRelacionC();
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaAux=string.Empty;
			TableSchema tablaRelacionadaObjetivo;
			
			existeClaseForeign=ExisteClasesRelacionadasForeigKeys(); 
			bool useClasesSiNo=GetUseClasesSiNoPropertyFromPropertiesC(TablaBase);
			
			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
																	
				if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
					continue;
				}
				
				existeClaseRelacionada=true;
				strFuncionInclude+=strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionInclude+="\t\t\t\tclas.blnActivo=false;\r\n";
				strFuncionExclude+="\r\n\r\n\t\texiste=false;\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\tclas.blnActivo=false;\r\n";
				strFuncionExclude+="\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n";
				
				strInitFuncion="set"+GetPrefijoRelacionC();
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada2+="\t\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";						
					strTablaClaseRelacionada2+="\t\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+ "(),isDeep,deepLoadType,clases);\r\n";
				
					strFuncionInclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";
					strFuncionInclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionInclude+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),isDeep,deepLoadType,clases);\r\n";
					
					strFuncionExclude+="\t\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";
					strFuncionExclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.deepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+collectionInfo.SecondaryTable+"(),isDeep,deepLoadType,clases);\r\n";
					
				}
				else
				{
					strNombreExtraRelacion=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					
					if(TablaBase.Name!=collectionInfo.SecondaryTable){ strSufijoRelacionRecursivo=""; }
					else {strSufijoRelacionRecursivo="Recursivo";}
					
					//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+ "s("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada2+="\r\n\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux;		
					strTablaClaseRelacionada2+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s()) {\r\n";
					strTablaClaseRelacionada2+="\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strTablaClaseRelacionada2+="\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepLoad("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t}\r\n";
				
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+ "s("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";		
					strFuncionInclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux;	
					strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s()) {\r\n";
					strFuncionInclude+="\t\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionInclude+="\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepLoad("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t\t}\r\n";
				
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+ "s("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";					
					strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";
					strFuncionExclude+="\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux;	
					strFuncionExclude+="\r\n\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s()) {\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+"Logic.deepLoad("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strSufijoRelacionRecursivo+",isDeep,deepLoadType,clases);"+"\r\n\t\t\t}\r\n";
				
				}
				
				//strFuncion+="\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
				strFuncionInclude+="\t\t\t}\r\n";
				strFuncionExclude+="\t\t}";
				
			}
			}
				strFuncionInclude=strInitInclude+strInitFor+ SetClasesRelacionadasForeigKeysNoisDeepLoadBeepInclude()+ strFuncionInclude +"\r\n\t\t}\r\n\t}\r\n";
				strFuncionExclude=strInitExclude+ SetClasesRelacionadasForeigKeysNoisDeepLoadBeepExclude()+ strFuncionExclude+ "\r\n\t}\r\n}";
				
			
			strTablaClaseRelacionada2=strTablaClaseRelacionada2+"\t}\r\n"+strFuncionInclude+strFuncionExclude;
			
			
			//Parte del no if del isDeep
			
			String strInitIfFuncion=string.Empty;
			String strIfFuncion=string.Empty;
			String strInitElseFuncion=string.Empty;
			String strElseFuncion=string.Empty;
			
			strFuncion=string.Empty;
			
			strTablaClaseRelacionada=string.Empty;
			strInitFuncion=" get"+GetPrefijoRelacionC();
			
			strInitIfFuncion="\r\nif(!isDeep) {\r\n";
			strInitElseFuncion="\r\nelse {\r\n";
			
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			strFuncion=strInitNone+ SetClasesRelacionadasForeigKeysisDeepLoadBeep();
			strFuncionInclude="";
			strFuncionExclude="";
		
			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
					
				if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
					continue;					
				}
				
				strFuncionInclude+=strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionInclude+="\t\t\t\tclas.blnActivo=false;\r\n";
				strFuncionExclude+="\r\n\r\n\t\texiste=false;\r\n"+strInitFor +strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)&&clas.blnActivo) {\r\n";
				strFuncionExclude+="\t\t\t\tclas.blnActivo=false;\r\n";
				strFuncionExclude+="\t\t\t\texiste=true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!existe) {\r\n";
				
				strInitFuncion="set"+GetPrefijoRelacionC();
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));";
				}
				else
				{
					strNombreExtraRelacion=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
						
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+ "s("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreExtraRelacion+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));";
					//if(collectionInfo.SecondaryTable.Equals("Cliente")) {
						
						/*
						foreach(ColumnSchema cs in collectionInfo.TableKey.ForeignKeyMemberColumns) {
							sd+=cs.Name+",";
						}
						System.Windows.Forms.MessageBox.Show(collectionInfo.TableKey.PrimaryKeyTable.Name+":"+sd);
						*/
						//System.Windows.Forms.MessageBox.Show(sd);
					//}
				}
				
			strFuncion+="\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
			strFuncionInclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n\t\t\t}\r\n";
			strFuncionExclude+="\t\t\t"+"clases.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));\r\n";					
			strFuncionExclude+= "\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n\t\t}";
			
			}
			}
			
			strFuncionInclude=strInitInclude+strInitFor+SetClasesRelacionadasForeigKeysisDeepLoadBeepInclude() +strFuncionInclude+ "\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude +SetClasesRelacionadasForeigKeysisDeepLoadBeepExclude()+strFuncionExclude+ "\r\n\t}\r\n}";
			
			strIfFuncion=strInitIfFuncion+strFuncion+"\t}\r\n"+strFuncionInclude+strFuncionExclude; //+strInitElseFuncion+strFuncion+strTablaClaseRelacionada2+"\r\n}\r\nelse{\r\n"+strTablaClaseRelacionada3+"\r\n}\r\n}\r\n";					
			
			if(!existeClaseForeign&&!existeClaseRelacionada)
			{
				return "";
			}
			
			return strIfFuncion+strTablaClaseRelacionada2; 
		}
		
public String GetParameterSelection(ColumnSchema column,bool esUltimo,bool esUnico,bool esCompuesto,bool esNative,bool esRanges,bool esRangesFinal) 
		{
			String strParameterSelection=GetParameterSelectionC(column,esUltimo,esUnico,esCompuesto,esNative,esRanges,esRangesFinal);
			/*
			String strParaBusquedaString=""; 
			String strParaBusquedaCompuesto=""; 
			String strEqualsLike="Equal";
			
			String strSufijoRangesFinal="";
			String strSufijoRangesFinalName="";
						
			//SETEO LOS PARAMETROS DEACUERDO SI ES RANGO
			
			if(esRanges) {
				if(esRangesFinal) {
					esUltimo=true;
					strEqualsLike="MenorIgual";
					strSufijoRangesFinal=strSufijoRangoFinal;
					strSufijoRangesFinalName=",\""+strSufijoRangoFinal+"\"";	
				} else {
					esUltimo=false;
					strEqualsLike="MayorIgual";
				}
			}
						
			
			
			if(esCompuesto)
			{
				strParaBusquedaCompuesto="Constantes.SCHEMA+\".\"+"+GetNombreClase(column.Table.ToString())+"DataAccess.TABLENAME+\".\"+";
										  
			}
			
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{  //column.DataType==DbType.DateTime ||
				if(!esUnico)	
				{
					strEqualsLike="Like";
					strParaBusquedaString="+\"%\"";
				}
			}
			
			String strConNative="";
			
			if(esNative) {
				strConNative=strNative;
			}
			
			String strColumnName="";
			
			if(column.Name!=strId) {
				strColumnName=column.Name;
			} else {
				strColumnName=strIdGetSet;
			}
			
			bool blnEsPKCompuestoTabla=EsPKCompuestoTabla(column.Table);
			String  strPalabraclaveEsPKCompuestoTabla="";
			
			if(blnEsPKCompuestoTabla&&column.IsPrimaryKeyMember) {
				strPalabraclaveEsPKCompuestoTabla="Constantes.IDCOMPOSEKEY+";
			}
			
			String strParameterSelection=String.Empty;
			strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+strSufijoRangesFinal+"= new ParameterSelectionGeneral();";
			strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+strSufijoRangesFinal+".setParameterSelectionGeneral"+strEqualsLike+"(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoRangesFinal+ strParaBusquedaString +","+strParaBusquedaCompuesto+strPalabraclaveEsPKCompuestoTabla+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+strConNative+strColumnName+"()"+strSufijoRangesFinalName+",";
			
			//GetTipoColumnaToString(column)+
			if(esUltimo) {
			strParameterSelection+="ParameterTypeOperator.NONE);";		
			}
			else
			{
			strParameterSelection+=	"ParameterTypeOperator.AND);";	
			}
			
			strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+strSufijoRangesFinal+");";
			*/
		
			return strParameterSelection;
		}
	
	public String GetParameterSelectionRango(ColumnSchema column,String strIndexName) 
		{
			String strParaBusquedaString=""; 
			
			if(column.DataType==DbType.DateTime ||column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				strParaBusquedaString="+\"%\"";
			}
			
			String strParameterSelection=String.Empty;
			
			if(!strIndexName.Contains("BusquedaRango"))
			{
				strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
				
				if(strIndexName.Contains("BusquedaMayorIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMayorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+/* GetTipoColumnaToString(column)+*/strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				else if(strIndexName.Contains("BusquedaMayor"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMayor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ /*GetTipoColumnaToString(column)+*/strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				else if(strIndexName.Contains("BusquedaMenorIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMenorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ /*GetTipoColumnaToString(column)+*/strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				else if(strIndexName.Contains("BusquedaMenor"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMenor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ /*GetTipoColumnaToString(column)+*/strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				
				strParameterSelection+="ParameterTypeOperator.NONE);";	
				
				strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+");";
			}
			else
			{
				strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"Inicial= new ParameterSelectionGeneral();";				
				if(strIndexName.Contains("BusquedaRangoIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Inicial.setParameterSelectionGeneralMayorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Inicial"+ /*GetTipoColumnaToString(column)+*/strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";		
				}
				else
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Inicial.setParameterSelectionGeneralMayor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Inicial"+ /*GetTipoColumnaToString(column)+*/strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";		
				}				
				strParameterSelection+=	"ParameterTypeOperator.AND);";	
				
				strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+"Inicial);";
				
				strParameterSelection+="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"Final= new ParameterSelectionGeneral();";
				if(strIndexName.Contains("BusquedaRangoIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Final.setParameterSelectionGeneralMenorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Final"+ /*GetTipoColumnaToString(column)+*/strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";				
				}
				else
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Final.setParameterSelectionGeneralMenor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Final"+ /*GetTipoColumnaToString(column)+*/strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+GetNombreCampoTablaC(column)+"(),";				
				}				
				strParameterSelection+="ParameterTypeOperator.NONE);";	
				
				strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+"Final);";
			}
			
						
			
		
			return strParameterSelection;
		}
		
public String GetIndicesTablasClases() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			
			String strWithConnectionGetNew="\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";
			String strWithConnectionCommit="\r\n\r\n\t\t\tconnexion.commit();";
			String strWithConnectionClose="\r\n\t\t\tconnexion.close();";
			
			bool blnEsReporteLocal= GetEsReporteFromPropertiesC(TablaBase);
			
			String strParametroReporte="";
			
			if(blnEsReporteLocal) {
				strParametroReporte="ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";
			}
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(blnEsReporte) {
					if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
						continue;
					}
				}
				
				if(!indexSchema.IsPrimaryKey)
				{
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"Internal(";
							strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"WithConnection(";
							//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"Internal(true,";
							strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
							//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"Internal(isConConnexion,";							
						strBodyFuncion="\r\n\t\ttry {"+strWithConnectionGetNew+"\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+=strWithConnectionCommit;
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(String sFinalQuery,";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"WithConnection(String sFinalQuery,Pagination pagination,"+strParametroReporte;
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(true,sFinalQuery,";
								strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String sFinalQuery,Pagination pagination,"+strParametroReporte;
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,sFinalQuery,";
							
						}
						else
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"WithConnection(";
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(true,";
								strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,";
							
						}
						//ANTERIOR NEW
						//strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n\t\t\t}\r\n";
						strBodyFuncion="\r\n\t\ttry\r\n\t\t{"+strWithConnectionGetNew+"\r\n";
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setPagination(pagination);";	
							strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
						strEndBodyFuncion="\r\n\r\n\t\t\t//"+GetNombreClase(TablaBase.ToString())+"Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),\""+indexSchema.Name+"\",\"\",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());";
			
						strEndBodyFuncion+="\r\n\r\n\t\t\t//"+GetNombreClaseObjetoC(TablaBase.ToString())+"s="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
						//ANTERIOR COMMIT
						//strEndBodyFuncion+="\r\n\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.commit();\r\n\t\t\t}";
						strEndBodyFuncion+=strWithConnectionCommit;
						
						//ANTERIOR CLOSE
						//strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n";
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								} else {
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strParametersFuncion+=","+GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										strParametersNameFuncion+=","+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
									}	
								}
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
									
									if(esRanges) {
										strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
								else
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
									
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"").Replace(strWithConnectionClose,"");
					
					
					//strInitFuncion+=strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";																																			
					
					//strInitFuncion=strFunctions+strInitFuncion;
					
					strInitFuncion+=strFunctions;
				}
			}
			
								
			return strInitFuncion; 
		}
		
		
		public String GetIndicesTablasClasesNative() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			
			String strWithConnectionGetNew="\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";
			String strWithConnectionCommit="\r\n\r\n\t\t\tconnexion.commit();";
			String strWithConnectionClose="\r\n\t\t\tconnexion.close();";
			
			
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"Internal(";
							strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+strNative+"WithConnection(";
							//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"Internal(true,";
							strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+strNative+"(";
							//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"Internal(isConConnexion,";
							
						strBodyFuncion="\r\n\t\ttry {"+strWithConnectionGetNew+"\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntity"+strNative+"(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+=strWithConnectionCommit;
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(String sFinalQuery,";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+strNative+"WithConnection(String sFinalQuery,Pagination pagination,";
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(true,sFinalQuery,";
								strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+strNative+"(String sFinalQuery,Pagination pagination,";
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,sFinalQuery,";
							
						}
						else
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+strNative+"WithConnection(";
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(true,";
								strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+strNative+"(";
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,";
							
						}
						//ANTERIOR NEW
						//strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n\t\t\t}\r\n";
						strBodyFuncion="\r\n\t\ttry\r\n\t\t{"+strWithConnectionGetNew+"\r\n";
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setPagination(pagination);";	
							strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClase(TablaBase.ToString())+"Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),\""+indexSchema.Name+"\",\"\",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());";
			
						strEndBodyFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"s="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntities"+strNative+"(connexion,queryWhereSelectParameters);";
						//ANTERIOR COMMIT
						//strEndBodyFuncion+="\r\n\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.commit();\r\n\t\t\t}";
						strEndBodyFuncion+=strWithConnectionCommit;
						
						//ANTERIOR CLOSE
						//strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n";
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
							 esRanges=true;
						} else {
							 esRanges=false;
						}
						
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								}  else {
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strParametersFuncion+=","+GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										strParametersNameFuncion+=","+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
									}	
								}						
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,true,esRanges,false);
									
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,true,esRanges,true);
									}
								}
								else
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,true,esRanges,false);
									
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,true,esRanges,true);
									}
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"").Replace(strWithConnectionClose,"");
					
					
					//strInitFuncion+=strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";																																			
					
					//strInitFuncion=strFunctions+strInitFuncion;
					
					strInitFuncion+=strFunctions;
				}
			}
			
								
			return strInitFuncion; 
		}
		
		public String GetIndicesTablasClasesDeReporte() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strQueryChange=String.Empty;
			String strGetFunctionLoadRelaciones=String.Empty;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						strInitFuncion+="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
						strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
						strQueryChange="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.GetQuery"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(queryWhereSelectParameters,";
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.CargarTablasRelaciones"+indexSchema.Name+"("+GetNombreClaseObjetoC(TablaBase.ToString())+");";						
						strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.commit();";
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tconnexion.close();\r\n\t\t}\r\n\t}\r\n";
					}

					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							strInitFuncion+="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String sFinalQuery,";
							strQueryChange="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.GetQuery"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(queryWhereSelectParameters,sFinalQuery,";
							strGetFunctionLoadRelaciones="\r\n\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.CargarTablasRelaciones"+indexSchema.Name+"("+GetNombreClaseObjetoC(TablaBase.ToString())+"s,";
						}

						else
						{
							strInitFuncion+="\r\n\tpublic void "+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
							strQueryChange="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.GetQuery"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(queryWhereSelectParameters,";
							strGetFunctionLoadRelaciones="\r\n\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.CargarTablasRelaciones"+indexSchema.Name+"("+GetNombreClaseObjetoC(TablaBase.ToString())+"s,";
						}
						
						strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n";
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							//strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"s="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+=strGetFunctionLoadRelaciones+"BYDANCODE1";
						strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.commit();";
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tconnexion.close();\r\n\t\t}\r\n\t}\r\n";
					
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								}						
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
								}
								else
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strInitFuncion+=strParametersFuncion+")throws Exception {"+strBodyFuncion+/*strParameterSelection+*/strQueryChange+strParametersNameFuncion+");"+strEndBodyFuncion.Replace("BYDANCODE1",strParametersNameFuncion+");")/*+strParametersNameFuncion+");"*/+strEndFuncion+"";																																			
				}
			}
			
								
			return strInitFuncion; 
		}
		
public String GetFuncionesTablasClasesRelacionadas() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public  void  get"+GetPrefijoRelacionC();
			
			String strEndFuncion="\r\n}\r\ncatch(Exception e)\r\n{\r\n;\r\n}\r\n}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "()\r\n{\r\ntry\r\n{\r\n "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"= new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"();\r\n";
					strTablaClaseRelacionada+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"="+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.Traer"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+");";
				}
				else
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()\r\n{\r\ntry\r\n{\r\n "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s= new "+ ""+strTypeNewCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+">"+strTypeNewCollectionEnd+";\r\n";
					strTablaClaseRelacionada+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s="+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.Traer"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+");";
			
				}
				
			strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n\r\n";
			}
								
			return strFuncion; 
		}
		
public String GetTablasClasesRelacionadas() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";\r\n";
				}
				else
				{
					strTablaClaseRelacionada+=""+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public  string GetAuditoriaSetAuditorias(ColumnSchema column)
{				
	String strSetEntity=string.Empty;
	

	strSetEntity="\r\n\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+".getIsNew()||!"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreCompletoColumnaClaseC(column)+"().equals("+ GetNombreClaseObjetoC(TablaBase.ToString()) +".get" + GetNombreClaseC(TablaBase.ToString())  +"Original().get"+ GetNombreCompletoColumnaClaseC(column) +"()))\r\n\t\t\t{\r\n";
	
	/*
	strSetEntity+="\t\t\t\tauditoria.setField_strCampo("+ GetNombreClaseC(TablaBase.ToString())+".getColumnName"+ column.Name+"());\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strValoranterior("+ GetNombreClaseObjetoC(TablaBase.ToString())+ ".get"+ GetNombreClaseC(TablaBase.ToString()) +"Original().get"+ GetNombreCompletoColumnaClaseC(column)+ "()"+ GetTipoColumnaToString(column)+ " );\r\n";
	strSetEntity+="\t\t\t\tauditoria.setField_strValoractual("+ GetNombreClaseObjetoC(TablaBase.ToString())+ ".get"+ GetNombreCompletoColumnaClaseC(column)+ "()"+ GetTipoColumnaToString(column)+ ");\r\n";
	*/
	strSetEntity+="\t\t\t\tstrValorActual=null;\r\n";
	strSetEntity+="\t\t\t\tstrValorNuevo=null;\r\n\r\n";
	
	strSetEntity+="\t\t\t\tif("+ GetNombreClaseObjetoC(TablaBase.ToString())+ ".get"+ GetNombreClaseC(TablaBase.ToString()) +"Original().get"+ GetNombreCompletoColumnaClaseC(column)+ "()!=null)\r\n\t\t\t\t{\r\n";
	strSetEntity+="\t\t\t\t\tstrValorActual="+ GetNombreClaseObjetoC(TablaBase.ToString())+ ".get"+ GetNombreClaseC(TablaBase.ToString()) +"Original().get"+ GetNombreCompletoColumnaClaseC(column)+ "()"+ GetTipoColumnaToString(column)+";\r\n";
	strSetEntity+="\t\t\t\t}\r\n";
	
	strSetEntity+="\t\t\t\tif("+ GetNombreClaseObjetoC(TablaBase.ToString())+".get"+ GetNombreCompletoColumnaClaseC(column)+ "()!=null)\r\n\t\t\t\t{\r\n";
	strSetEntity+="\t\t\t\t\tstrValorNuevo="+ GetNombreClaseObjetoC(TablaBase.ToString())+ ".get"+ GetNombreCompletoColumnaClaseC(column)+ "()"+ GetTipoColumnaToString(column)+ " ;\r\n";
	strSetEntity+="\t\t\t\t}\r\n\r\n";
	
	strSetEntity+="\t\t\t\t"+GetAuditoriaCommentTableFromProperties(TablaBase)+strGlobalAuditoriaComment+"auditoriaDetalleLogicAdditional.registrarNuevaAuditoriaDetalle(auditoriaObj.getId(),"+ GetNombreClaseC(TablaBase.ToString())+"DataAccess.getColumnName"+ column.Name+"(),strValorActual,strValorNuevo);";
	strSetEntity+="\r\n\t\t\t}";
	
	return strSetEntity;
}

public static string GetSetEntityColumna(ColumnSchema column,String table,bool conVersionRow)
{				
	String strSetEntity=string.Empty;
	
	if(conVersionRow)
	{
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)||column.Name.Equals(strIsExpired))
		{
			return strSetEntity;
		}
	}
	else
	{
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)||column.Name.Equals(strIsExpired)||column.Name.Equals(strVersionRow))
		{
			return strSetEntity;
		}
	}
	//usuario.setClave(strClave);
	String strEntityInit=GetNombreClaseObjetoC(table)+".set"+GetNombreCompletoColumnaClaseC(column)+"(";
	String strEntityMiddle=GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
	String strEntityFinal=");";
   strSetEntity=strEntityInit+strEntityMiddle+strEntityFinal;
	
	return strSetEntity;
}

public string GetParametroFuncionNuevoClase(ColumnSchema column)
{		String strParamtro=string.Empty;	
		
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strVersionRow))
		{
			return strParamtro;
		}
		strParamtro=GetTipoColumnaClaseC(column)+" "+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
		return strParamtro;
}

public string GetParametroFuncionActualizarClase(ColumnSchema column)
{		String strParamtro=string.Empty;	

		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
		{
			return strParamtro;
		}
		if(!column.Name.Equals(strId))
		{
		strParamtro=GetTipoColumnaClaseC(column)+" "+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);		
		}
		else
		{
		strParamtro=GetTipoColumnaClaseC(column)+" "+strId;			
		}
		return strParamtro;
}

public string GetNombreClase(string strTablaBase)
{
		return GetNombreClaseC(strTablaBase);
}

public string GetNombreClaseObjeto(string strTablaBase)
{
		return GetNombreClaseObjetoC(strTablaBase);
}

public String getClassesSetAddTablasRelacionadas() 
{
			String strTablaClaseRelacionada="";	
			TableSchema tablaRelacionadaObjetivo;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);

			
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				else
				{
					continue;
				}

				if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo))
				{
					//continue;
				}
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany||collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+="\r\n\t\t\tclasses.add(new Classe("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+".class));";									
				}				
			}
			
			return strTablaClaseRelacionada; 
}

public String GetForTablasRelacionadasForSetdelete() 
{
			String strTablaClaseRelacionada="";	
			
			TableSchema tablaRelacionadaObjetivo=null;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);

			
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				else
				{
					continue;
				}

				if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo))
				{
					//continue;
				}
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany||collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
					{
						strTablaClaseRelacionada+="\r\n\t\t\tfor("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+" "+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+"s())";
						strTablaClaseRelacionada+="\r\n\t\t\t{";
						strTablaClaseRelacionada+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+".setIsDeleted(true);";
						strTablaClaseRelacionada+="\r\n\t\t\t}\r\n";
					}
					else
					{
						strTablaClaseRelacionada+="\r\n\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"()!=null)";
						strTablaClaseRelacionada+="\r\n\t\t\t{";
						strTablaClaseRelacionada+="\r\n\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC()+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"().setIsDeleted(true);";
						strTablaClaseRelacionada+="\r\n\t\t\t}\r\n";
					}
				}				
			}
			
			return strTablaClaseRelacionada; 
}

/*
//CUANDO TRABAJABA CON AUDITORIA
/*
<%=GetAuditoriaCommentTableFromProperties(TablaBase)%><%=strGlobalAuditoriaComment%>import <%=strEmpresaAuditoria%>.<%= strPackageAuditoria%>.<%= strPackageBusiness%>.<%= strPackageEntitiesAuditoria%>.*;
<%=GetAuditoriaCommentTableFromProperties(TablaBase)%><%=strGlobalAuditoriaComment%>import <%=strEmpresaAuditoria%>.<%= strPackageAuditoria%>.<%= strPackageBusiness%>.<%= strPackageLogic%>.*;
<%=GetAuditoriaCommentTableFromProperties(TablaBase)%><%=strGlobalAuditoriaComment%>import <%=strEmpresaAuditoria%>.<%= strPackageAuditoria%>.<%= strPackageBusiness%>.<%= strPackageDataAccessAuditoria%>.*;
*/

/*
import ByDan.Auditoria.Business.Logic.*;
import ByDan.Auditoria.Business.Entities.*;
import ByDan.Seguridad.Business.Entities.*;
import ByDan.Seguridad.Business.Logic.*;
*/

</script>
<%//InicializarVariablesPorTabla(TablaBase);%>
<%=GetByDanLicence()%>
package <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageLogic%><%=GetEsPaqueteReporteC(TablaBase)%>;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Scanner;

import java.io.InputStream;

import java.lang.reflect.Field;

import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.NoResultException;
import javax.persistence.NonUniqueResultException;

<%//if(blnTieneTimestamp){%>
import java.sql.Timestamp;
<%//}%>
import java.sql.SQLException;
import java.util.Date;

import org.json.JSONArray;
import org.json.JSONObject;
import org.apache.log4j.Logger;
import javax.persistence.EntityManagerFactory;

import <%=Empresa%>.<%=strPackageFramework%>.ConstantesCommon;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageDataAccess%>.DataAccessHelper;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageDataAccess%>.DataAccessHelperBase;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageDataAccess%>.DataAccessHelper<%=GetNewCodeTableFromPropertiesC(TablaBase)%>;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.Classe;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.DatoGeneral;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.GeneralEntityLogic;
//import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.GeneralEntityParameterReturnGeneral;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.GeneralEntityParameterReturnGeneral;
import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageLogic%>.*;
import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%= strPackageUtils%>.*;

import <%=strEmpresaSeguridad%>.<%=PackageSeguridad%>.<%=strPackageBusinessSeguridad%>.<%=strPackageEntitiesSeguridad%>.*;

import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%>.*;
import <%=Empresa%>.<%= Package%>.<%= Module%>resources.general.AuxiliarGeneral;
import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClase(TablaBase.ToString())%><%=strParameter%><%=strReturnGeneral%>;
//import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClase(TablaBase.ToString())%><%=strParameterGeneral%>;
import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones;
import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageEntities%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClase(TablaBase.ToString())%>;
<% if(!blnEsReporte){%>import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageInterface%>.<%=GetNombreClase(TablaBase.ToString())%>Implementable;<%}%>
<%=strCommentAdditional%>import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageLogic%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClase(TablaBase.ToString())%>LogicAdditional;
import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageDataAccess%>.*;
import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageEntities%>.*;<%=GetEsImportPaqueteReporteC(TablaBase,"import "+Empresa+"."+ Package+"."+strPackageBusiness+"."+strPackageEntities)%>

<%=GetEsquemasImportClasesRelacionadas("import "+Empresa+"."+Package,strPackageBusiness+"."+strPackageEntities+/*GetEsPaqueteReporteC(TablaBase)+*/".*;")%>

<%=GetEsquemasImportClasesRelacionadas("import "+Empresa+"."+Package,strPackageBusiness+"."+strPackageLogic+".*;")%>

<%=GetEsquemasImportClasesRelacionadas("import "+Empresa+"."+Package,strPackageUtils+".*;")%>

<%=GetEsquemasImportClasesRelacionadas("import "+Empresa+"."+Package,strPackageBusiness+"."+strPackageDataAccess+".*;")%>

<%=strPackageEntitiesExtra%>
<%=strPackageDataAccessExtra%>
<%=strPackageLogicExtra%>
<%=strPackageUtilsExtra%>

@SuppressWarnings("unused")
public class <%=GetNombreClase(TablaBase.ToString())%>Logic extends GeneralEntityLogic <% if(!blnEsReporte){%>implements <%=GetNombreClase(TablaBase.ToString())%>Implementable <% } %>{	
	static Logger logger = Logger.getLogger(<%=GetNombreClase(TablaBase.ToString())%>Logic.class);
	
	public static boolean ISWITHSCHEMA=true;
	
	protected <%=GetNombreClase(TablaBase.ToString())%>Logic <%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess; 		
	protected <%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>;
	protected <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjeto(TablaBase.ToString())%>s;
	protected Object <%=GetNombreClaseObjeto(TablaBase.ToString())%>Object;	
	protected List<Object> <%=GetNombreClaseObjeto(TablaBase.ToString())%>sObject;
	protected ArrayList<DatoGeneral> arrDatoGeneral;
	protected Connexion connexion;
	protected DatosCliente datosCliente;
	protected ConnexionType connexionType;
	protected ParameterDbType parameterDbType;
	protected EntityManagerFactory entityManagerFactory;
		
	//DATAACCESS
	protected Boolean isForForeingsKeysDataRelationships=false;
	
	public  <%=GetNombreClase(TablaBase.ToString())%>Logic()throws SQLException,Exception {
		try	{
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>s= new <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>= new <%=GetNombreClase(TablaBase.ToString())%>();
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>Object=new Object();
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>sObject=new ArrayList<Object>();
			
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess=this;
			this.isForForeingsKeysDataRelationships=false;
			
			this.connexion=new Connexion();
			this.datosCliente=new DatosCliente();
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			
			//INICIALIZA PARAMETROS CONEXION
			this.connexionType=Constantes.CONNEXIONTYPE;
			this.parameterDbType=Constantes.PARAMETERDBTYPE;
			
			if(Constantes.CONNEXIONTYPE.equals(ConnexionType.HIBERNATE)) {
				this.entityManagerFactory=ConstantesCommon.JPAENTITYMANAGERFACTORY;
			}
			
			/*
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.setConnexionType(this.connexionType);
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.setParameterDbType(this.parameterDbType);
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.setEntityManagerFactory(this.entityManagerFactory);
			*/
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
		}	 
    }
	
	public  <%=GetNombreClase(TablaBase.ToString())%>Logic(Connexion newConnexion)throws Exception {
		try	{
			this.connexion=newConnexion;
			
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>s= new <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>= new <%=GetNombreClase(TablaBase.ToString())%>();
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>Object=new Object();
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>sObject=new ArrayList<Object>();
			this.datosCliente=new DatosCliente();
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess=this;
			this.isForForeingsKeysDataRelationships=false;
			
			//INICIALIZA PARAMETROS CONEXION
			this.connexionType=Constantes.CONNEXIONTYPE;
			this.parameterDbType=Constantes.PARAMETERDBTYPE;
			
			if(Constantes.CONNEXIONTYPE.equals(ConnexionType.HIBERNATE)) {
				this.entityManagerFactory=ConstantesCommon.JPAENTITYMANAGERFACTORY;
			}
			
			/*
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.setConnexionType(this.connexionType);
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.setParameterDbType(this.parameterDbType);
			this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.setEntityManagerFactory(this.entityManagerFactory);
			*/
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
	  	}	 
    }
	
	public <%=GetNombreClase(TablaBase.ToString())%> get<%=GetNombreClase(TablaBase.ToString())%>() throws Exception {	
		<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.check<%=GetNombreClase(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,this.datosCliente,this.arrDatoGeneral);
		<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,this.arrDatoGeneral);
		
		return <%=GetNombreClaseObjeto(TablaBase.ToString())%>;
	}
		
	public void set<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClase(TablaBase.ToString())%> new<%=GetNombreClase(TablaBase.ToString())%>) {
		this.<%=GetNombreClaseObjeto(TablaBase.ToString())%> = new<%=GetNombreClase(TablaBase.ToString())%>;
	}
	
	public <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> get<%=GetNombreClase(TablaBase.ToString())%>s() throws Exception {		
		this.quitar<%=GetNombreClase(TablaBase.ToString())%>sNulos();
		
		<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.check<%=GetNombreClase(TablaBase.ToString())%>ToGets(<%=GetNombreClaseObjeto(TablaBase.ToString())%>s,this.datosCliente,this.arrDatoGeneral);
		
		for (<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>Local: <%=GetNombreClaseObjeto(TablaBase.ToString())%>s ) {
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,this.arrDatoGeneral);
		}
		
		return <%=GetNombreClaseObjeto(TablaBase.ToString())%>s;
	}
	
	public void set<%=GetNombreClase(TablaBase.ToString())%>s(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> new<%=GetNombreClase(TablaBase.ToString())%>s) {
		this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new<%=GetNombreClase(TablaBase.ToString())%>s;
	}
	
	public Object get<%=GetNombreClase(TablaBase.ToString())%>Object() {	
		//this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>Object=this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntityObject();
		return this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>Object;
	}
		
	public void set<%=GetNombreClase(TablaBase.ToString())%>Object(Object new<%=GetNombreClase(TablaBase.ToString())%>Object) {
		this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>Object = new<%=GetNombreClase(TablaBase.ToString())%>Object;
	}
	
	public List<Object> get<%=GetNombreClase(TablaBase.ToString())%>sObject() {		
		//this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>sObject=this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntitiesObject();
		return this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>sObject;
	}
		
	public void set<%=GetNombreClase(TablaBase.ToString())%>sObject(List<Object> new<%=GetNombreClase(TablaBase.ToString())%>sObject) {
		this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>sObject = new<%=GetNombreClase(TablaBase.ToString())%>sObject;
	}
	
	public Connexion getConnexion() {
		return this.connexion;		
	}
	
	public void setConnexion(Connexion newConnexion) {
		this.connexion=newConnexion;		
	}
	
	public DatosCliente getDatosCliente() {
		return datosCliente;
	}

	public void setDatosCliente(DatosCliente datosCliente) {
		this.datosCliente = datosCliente;
	}
	
	public ArrayList<DatoGeneral> getArrDatoGeneral() {
		return arrDatoGeneral;
	}

	public void setArrDatoGeneral(ArrayList<DatoGeneral> arrDatoGeneral) {
		this.arrDatoGeneral = arrDatoGeneral;
	}
	
	public ConnexionType getConnexionType() {
		return connexionType;
	}

	public void setConnexionType(ConnexionType connexionType) {
		this.connexionType = connexionType;
	}


	public ParameterDbType getParameterDbType() {
		return parameterDbType;
	}

	public void setParameterDbType(ParameterDbType parameterDbType) {
		this.parameterDbType = parameterDbType;
	}


	public EntityManagerFactory getEntityManagerFactory() {
		return entityManagerFactory;
	}

	public void setEntityManagerFactory(EntityManagerFactory entityManagerFactory) {
		this.entityManagerFactory = entityManagerFactory;
	}
	
	public Boolean getIsForForeingsKeysDataRelationships() {
		return this.isForForeingsKeysDataRelationships;
	}

	public void setIsForForeingsKeysDataRelationships(Boolean isForForeingsKeysDataRelationships) {
		this.isForForeingsKeysDataRelationships = isForForeingsKeysDataRelationships;
	}
	
	public void getNewConnexionToDeep()throws Exception {
		try	{
			this.connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();
			
		} catch(SQLException e) {
			Funciones.manageException(logger,e);
			throw e;
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
		}
	}
	
	public void getNewConnexionToDeep(String sDetalle)throws Exception {
		try	{
			this.connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory,sDetalle);connexion.begin();
			
		} catch(SQLException e) {
			Funciones.manageException(logger,e);
			throw e;
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
		}
	}
	
	public void commitNewConnexionToDeep()throws Exception {
		try	{
			this.connexion.commit();
			
		} catch(SQLException e) {
			Funciones.manageException(logger,e);
			throw e;
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
		}
	}
	
	public void rollbackNewConnexionToDeep()throws Exception {
		try	{
			this.connexion.rollback();
			
		} catch(SQLException e) {
			Funciones.manageException(logger,e);
			throw e;
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
		}
	}
	
	public void closeNewConnexionToDeep()throws Exception {
		try	{
			this.connexion.close();
			
		} catch(SQLException e) {
			Funciones.manageException(logger,e);
			throw e;
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
		}
	}
	
	/*
	public  void getEntitiesWithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		  		  
        try {
			connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();			
			
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=this.getEntities(connexion,sQuerySelect, queryWhereSelectParameters);
			
			connexion.commit();
			
		} catch(Exception e) {
			connexion.rollback();
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			connexion.close();				
		}
	}
	
	public  void getEntities(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		  		  
        try {
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=this.getEntities(connexion,sQuerySelect, queryWhereSelectParameters);    	       	 
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			;
		}
	}
	*/
	
	public  void getEntitiesWithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		  		  
        try {
			connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();			
			
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESNATIVEWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=this.getEntities(connexion,sQuerySelect, queryWhereSelectParameters);    	       	 
			
			connexion.commit();
			
		} catch(Exception e) {
			connexion.rollback();
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			connexion.close();				
		}
	}
	
	public  void getEntities(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters)throws Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		  		  
        try {
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESNATIVEWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=this.getEntities(connexion,sQuerySelect, queryWhereSelectParameters);    	       	 
				
		} catch(Exception e) {
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			;				
		}
	}	
	
	public  void getEntitiesWithConnection(String sQuerySelect,String sFinalQuery)throws Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		
		QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters();		
		queryWhereSelectParameters.setFinalQuery(sFinalQuery);
		
        try {
			connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();			
			
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESNATIVEWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=this.getEntities(connexion,sQuerySelect, queryWhereSelectParameters);    	       	 
			
			connexion.commit();
			
		} catch(Exception e) {
			connexion.rollback();
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			connexion.close();				
		}
	}
	
	public  void getEntities(String sQuerySelect,String sFinalQuery)throws Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		
		QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters();
		queryWhereSelectParameters.setFinalQuery(sFinalQuery);
		
        try {
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESNATIVEWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=this.getEntities(connexion,sQuerySelect, queryWhereSelectParameters);    	       	 
				
		} catch(Exception e) {
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			;				
		}
	}	
	
	public  <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> getEntities(Connexion connexion,String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters) throws SQLException,Exception {
		<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> entities = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();		  
		String sQuery="";
	
        try {
			queryWhereSelectParameters.setConnexionType(this.connexionType);
        	queryWhereSelectParameters.setDbType(this.parameterDbType);
			
			<%if(GenerarMe) {%>
			if(this.connexionType.equals(ConnexionType.JDBC32)) {
				entities =this.getEntitiesJdbc(connexion,sQuerySelect,queryWhereSelectParameters);
			} else {
				entities =this.getEntitiesHibernateNative(connexion,sQuerySelect,queryWhereSelectParameters);
			}	
			<%}else {%>
			entities =this.getEntitiesHibernateNative(connexion,sQuerySelect,queryWhereSelectParameters);
			<%}%>
		} catch(Exception e) {
			throw e;
      	}
		
    	return entities;	
    }
	
	<%if(GenerarMe) {%>
	public  <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> getEntitiesJdbc(Connexion connexion,String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters) throws SQLException,Exception {
		<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> entities = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();		  
		String sQuery="";
	
        try {
			Statement statement = connexion.getConnection().createStatement();
							
			sQuery=DataAccessHelper<%=GetNewCodeTableFromPropertiesC(TablaBase)%>.buildSqlGeneralGetEntitiesJDBC(entity,queryWhereSelectParameters,sQuerySelect);
			
			ResultSet resultSet = statement.executeQuery(sQuery);
        	 
      	    while (resultSet.next()) {
      	    	entity = new <%=GetNombreClase(TablaBase.ToString())%>();
				
				<%if(GetEsReporteUsaColumnasBaseFromPropertiesC(TablaBase)) {%>
      	    	entity=this.getEntity("",entity,resultSet,<%=GetNombreClase(TablaBase.ToString())%>Logic.ISWITHSCHEMA);         		
				<%}%>
				
      	    	entity=<%=GetNombreClase(TablaBase.ToString())%>Logic.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity,resultSet);
      	    	
				<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original( new <%=GetNombreClase(TablaBase.ToString())%>());
      	    	<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(super.getEntity("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA));         		
      	    	<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet));
				
      	    	entities.add(entity);
      	    }

      	    statement.close();  
		} catch(Exception e) {
			throw e;
      	}
		
    	return entities;	
    }
	<%}%>
	
	@SuppressWarnings("unchecked")
	public  <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> getEntitiesHibernateNative(Connexion connexion,String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters) throws SQLException,Exception {
		<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> entities = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();		  
		String sQuery="";
	
        try {     	   
        		
			queryWhereSelectParameters.setConnexionType(this.connexionType);
        	queryWhereSelectParameters.setDbType(this.parameterDbType);
			
			sQuery=DataAccessHelper<%=GetNewCodeTableFromPropertiesC(TablaBase)%>.buildSqlGeneralGetEntities(entity,queryWhereSelectParameters,sQuerySelect);
			
			Query query =null;
			
			if(!queryWhereSelectParameters.getIsGetGeneralObjects()) {
      	    	query =connexion.getEntityManager().createNativeQuery (sQuery,<%=GetNombreClaseC(TablaBase.ToString())%>.class);
			}  else {
				query =connexion.getEntityManager().createNativeQuery (sQuery);
			}
			
			DataAccessHelper<%=GetNewCodeTableFromPropertiesC(TablaBase)%>.buildSqlGeneralSetQueryParameters(query,queryWhereSelectParameters);
			
			DataAccessHelper<%=GetNewCodeTableFromPropertiesC(TablaBase)%>.buildSqlGeneralSetQueryPagination(query,queryWhereSelectParameters);
			
			if(!queryWhereSelectParameters.getIsGetGeneralObjects()) {
				entities= new <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>>((List<<%=GetNombreClase(TablaBase.ToString())%>>) query.getResultList());
				
				//super.SetGeneralEntitiesIsNewFalseIsChangedFalse(entities);
				
				<%=GetOriginalCommentTableFromProperties(TablaBase)%>this.set<%=GetNombreClase(TablaBase.ToString())%>sOriginal(entities);
			
			}  else {
				this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>sObject=query.getResultList();	
			}
			
			//MEJOR QUITAR SE USA EN GET Y AL COMPARAR EN SET SINO EJB HACE UPDATE AUTOMATICAMENTE
			//<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.quitarEspacios<%=GetNombreClase(TablaBase.ToString())%>s(entities);
				
      	} catch(Exception e) {
			throw e;
      	}
		
    	return entities;	
    }
	
	<%if(GetEsReporteUsaColumnasBaseFromPropertiesC(TablaBase)) {%>
	public  <%=GetNombreClase(TablaBase.ToString())%> getEntity(String strPrefijo,<%=GetNombreClase(TablaBase.ToString())%> entityT,ResultSet rs,Boolean isWithSchema) throws Exception {	 
		  entityT.setIsNew(false);
        
		  try {
    	  
      	  if(isWithSchema) {
    	    	entityT.setId(rs.getLong(strPrefijo+DataAccessHelper.getColumnNameId()));	
    	    	//extracted(entityT).setIsActive(rs.getBoolean(strPrefijo+DataAccessHelper.getColumnNameIsActive()));
    	    	//extracted(entityT).setIsExpired(rs.getBoolean(strPrefijo+DataAccessHelper.getColumnNameIsExpired()));
    	    	entityT.setVersionRow(rs.getTimestamp(strPrefijo+DataAccessHelper.getColumnNameVersionRow()));     	    	       	 
      	  }
	      	} catch(Exception ex) {
	            throw new Exception();
	        }
	      	
        return entityT;
  	}
	<%}%>
	
	public  static <%=GetNombreClase(TablaBase.ToString())%> getEntity<%=GetNombreClase(TablaBase.ToString())%>(String strPrefijo,<%=GetNombreClase(TablaBase.ToString())%> entity,ResultSet resultSet) throws Exception
    {		
        try {     	  
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])||TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
			<%=  GetSetEntityColumnaC(TablaBase.Columns[i]) %>
			<% } %>      	    	    		    	    
      	} catch(Exception e) {
			throw e;
      	}
		
    	return entity;	
    }
	
	public  static <%=GetNombreClase(TablaBase.ToString())%> getEntity<%=GetNombreClase(TablaBase.ToString())%>(String strPrefijo,<%=GetNombreClase(TablaBase.ToString())%> entity,ResultSet resultSet,List<String> listColumns) throws Exception {		
        try {     	  
        	for(String sColumn:listColumns) {	        	
				Field field =null;
        		try {
	        		field = <%=GetNombreClase(TablaBase.ToString())%>.class.getDeclaredField(sColumn);//getField
	        		field.setAccessible(true);
					
        		} catch(Exception e) {
        			field = <%=GetNombreClase(TablaBase.ToString())%>.class.getSuperclass().getDeclaredField(sColumn);//getField
    	        	field.setAccessible(true);
        		}
				
				<%=GetNombreClase(TablaBase.ToString())%>Logic.setFieldReflection<%=GetNombreClase(TablaBase.ToString())%>(field,strPrefijo,sColumn,entity,resultSet);
	            //field.set(entity, resultSet.getLong(strPrefijo+"id_opcion"));
        	}            
      	} catch(Exception e) {
			throw e;
      	}
		
    	return entity;	
    }
	
	public  static void setFieldReflection<%=GetNombreClase(TablaBase.ToString())%>(Field field,String strPrefijo,String sColumn,<%=GetNombreClase(TablaBase.ToString())%> entity,ResultSet resultSet) throws Exception {		
        try {    
        	String sCampo=strPrefijo+sColumn;
        	
        	switch(sColumn) {
				<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
				<%//if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
				<%if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])||TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
				<%=  GetSetEntityColumnaReflectionC(TablaBase.Columns[i]) %>
				<% } %>  
				
				default: 
					//CUANDO SE UTILIZA CAMPOS DIFERENCTES A LOS ORIGINALMENTE DEFINIDOS(ADDITIONAL)
					DataAccessHelperBase.setFieldDynamic(entity,sCampo,field,resultSet);
					break;
				/*
        		case "id":
        			field.set(entity, resultSet.getLong(sCampo));
        			break;        		        			
				*/
        	}    
      	} catch(Exception e) {
			throw e;
      	}		
    }
	
	public void quitar<%=GetNombreClase(TablaBase.ToString())%>sNulos() throws Exception {				
		
		<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux= new <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		
		for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>!=null) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux.add(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
			}
		}
		
		<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s=<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux;
	}
	
	@SuppressWarnings("unchecked")
	public <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> getEntitiesHibernate(Connexion connexion,String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters) throws SQLException,Exception {
		<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> entities = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();		  
		String sQuery="";
	
        try {     	   
        					
			sQuery=DataAccessHelper<%=GetNewCodeTableFromPropertiesC(TablaBase)%>.buildSqlGeneralGetEntities(entity,queryWhereSelectParameters,sQuerySelect);
						 
      	    Query query =connexion.getEntityManager().createQuery (sQuery);
			
			DataAccessHelper<%=GetNewCodeTableFromPropertiesC(TablaBase)%>.buildSqlGeneralSetQueryParameters(query,queryWhereSelectParameters);
			
			DataAccessHelper<%=GetNewCodeTableFromPropertiesC(TablaBase)%>.buildSqlGeneralSetQueryPagination(query,queryWhereSelectParameters);
			
			if(!queryWhereSelectParameters.getIsGetGeneralObjects()) {
				entities= new <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>>((List<<%=GetNombreClase(TablaBase.ToString())%>>) query.getResultList());
							
				//super.SetGeneralEntitiesIsNewFalseIsChangedFalse(entities);
				
				<%=GetOriginalCommentTableFromProperties(TablaBase)%>this.set<%=GetNombreClase(TablaBase.ToString())%>sOriginal(entities);
			
			}  else {
				this.<%=GetNombreClaseObjeto(TablaBase.ToString())%>sObject=query.getResultList();	
			}
			
			//MEJOR QUITAR SE USA EN GET Y AL COMPARAR EN SET SINO EJB HACE UPDATE AUTOMATICAMENTE
			//<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.quitarEspacios<%=GetNombreClase(TablaBase.ToString())%>s(entities);
				
      	} catch(Exception e) {
			throw e;
      	}
		
    	return entities;	
    }
	
	public  void getEntitiesWithConnection(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters,List<String> listColumns,Boolean conMapGenerico)throws Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		  		  
        try {
			connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();			
			
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=this.getEntities(connexion,sQuerySelect, queryWhereSelectParameters,listColumns,conMapGenerico);    	       	 
			
			connexion.commit();
			
		} catch(Exception e) {
			connexion.rollback();
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			connexion.close();				
		}
	}
	
	public  void getEntities(String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters,List<String> listColumns,Boolean conMapGenerico)throws Exception {	
		<%=GetNombreClaseObjeto(TablaBase.ToString())%>s = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		  		  
        try {
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),"GETENTITIESWITHSELECT","",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>s=this.getEntities(connexion,sQuerySelect, queryWhereSelectParameters,listColumns,conMapGenerico);    	       	 
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			;
		}
	}
	
	public  <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> getEntities(Connexion connexion,String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters,List<String> listColumns,Boolean conMapGenerico) throws SQLException,Exception {
		<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> entities = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();		  
		String sQuery="";
	
        try {
			queryWhereSelectParameters.setConnexionType(this.connexionType);
        	queryWhereSelectParameters.setDbType(this.parameterDbType);
			
			<%if(GenerarMe) {%>
			if(this.connexionType.equals(ConnexionType.JDBC32)) {
				entities =this.getEntitiesJdbc(connexion,sQuerySelect,queryWhereSelectParameters,listColumns,conMapGenerico);
			} else {
				//entities =this.getEntitiesHibernate(connexion,sQuerySelect,queryWhereSelectParameters,listColumns,conMapGenerico);
			}	
			<%}else {%>
			//entities =this.getEntitiesHibernate(connexion,sQuerySelect,queryWhereSelectParameters,listColumns,conMapGenerico);
			<%}%>
		} catch(Exception e) {
			throw e;
      	}
		
    	return entities;	
    }
	
	<%if(GenerarMe) {%>
	public  <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> getEntitiesJdbc(Connexion connexion,String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters,List<String> listColumns,Boolean conMapGenerico) throws SQLException,Exception {
		<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> entities = new  <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();		  
		String sQuery="";
	
        try {
			Statement statement = connexion.getConnection().createStatement();
							
			sQuery=DataAccessHelper<%=GetNewCodeTableFromPropertiesC(TablaBase)%>.buildSqlGeneralGetEntitiesJDBC(entity,queryWhereSelectParameters,sQuerySelect);
			
			ResultSet resultSet = statement.executeQuery(sQuery);
        	 
      	    while (resultSet.next()) {
      	    	entity = new <%=GetNombreClase(TablaBase.ToString())%>();
				
				if(conMapGenerico) {
					entity.setMap<%=GetNombreClase(TablaBase.ToString())%>( new HashMap<String,Object>());
					
					for(String sColumn:listColumns) {
						entity.getMap<%=GetNombreClase(TablaBase.ToString())%>().put(sColumn, resultSet.getObject(sColumn));
					}
				} else {				
					//entity=super.getEntity("",entity,resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA);         		
					entity=<%=GetNombreClase(TablaBase.ToString())%>Logic.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity,resultSet,listColumns);
					
					//<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original( new <%=GetNombreClase(TablaBase.ToString())%>());
					//<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(super.getEntity("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA));         		
					//<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet));
				}
				
      	    	entities.add(entity);
      	    }

      	    statement.close();  
		} catch(Exception e) {
			throw e;
      	}
		
    	return entities;	
    }
	<%}%>	
	
	<%= GetFuncionesTablasClasesRelacionadasForeigKeys() %>
	
	<%=GetIndicesTablasClasesReporte(TablaBase)%>
	
	<%=GetIndicesSqlReportesTablasClasesReporte(TablaBase)%>
	
	<%if(false/*!GetEsReporteFromPropertiesC(TablaBase)*/){%>
	<%= GetIndicesTablasClases() %>
	<%if(GenerarTipoGeneracionC(strTipoGeneracionCompuestos,TiposGeneracion)) {%>
	<%= GetIndicesTablasClasesCompuestos() %>
	<%}%>
	<%}else{%>
	<%//= GetIndicesTablasClasesDeReporte() %>
	<%}%>
	
	public void deepLoad(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases)throws Exception {
		<%if(TieneClasesRelacionadasOForeignKeyC(TablaBase)){%>Boolean existe=false;<% } %>
		
		try {
			<%//if(blnConMaxCodigo){//SI SE NECESITA PARA CARGAR EN PRESENTACION%>
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToGet(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,this.arrDatoGeneral);
			<%//if(!blnNoStandardTableFromProperties) {%>
			<%//if(!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) {%>
			<%= GetIndicesTablasClasesisDeepLoad() %>
			<%//}%>
			<% //}%>
			<% //}%>
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
  		}		
	}
	
	public void deepLoadWithConnection(Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases,String sTituloMensaje)throws Exception {		
		try {
			this.getNewConnexionToDeep();
			
			this.deepLoad(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,isDeep,deepLoadType,clases);	
			
			if(this.isConRefrescarForeignKeys) {
				<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.refrescarForeignKeysDescripciones<%=GetNombreClaseC(TablaBase.ToString())%>(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
			}
			
			this.connexion.commit();
			
		} catch(Exception e) {
			connexion.rollback();
			Funciones.manageException(logger,e);
			throw e;
			
  		} finally {
			this.closeNewConnexionToDeep();
  		}
	}
	
	public void deepLoad(Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases,String sTituloMensaje)throws Exception {		
		try {
			this.deepLoad(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,isDeep,deepLoadType,clases);	
			
			if(this.isConRefrescarForeignKeys) {
				<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.refrescarForeignKeysDescripciones<%=GetNombreClaseC(TablaBase.ToString())%>(this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
			}
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
  		}
	}
	
	public void deepLoadsWithConnection(Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases,String sTituloMensaje)throws Exception {		
		try {
			this.getNewConnexionToDeep();
			
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s!=null) {
				for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
					this.deepLoad(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,isDeep,deepLoadType,clases);
				}	
				
				if(this.isConRefrescarForeignKeys) {
					<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.refrescarForeignKeysDescripciones<%=GetNombreClaseC(TablaBase.ToString())%>(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s);
				}
			}
			
			this.connexion.commit();
			
		} catch(Exception e) {
			connexion.rollback();
			Funciones.manageException(logger,e);
			throw e;
			
  		} finally {
			this.closeNewConnexionToDeep();
  		}
	}
	
	public void deepLoads(Boolean isDeep,DeepLoadType deepLoadType,ArrayList<Classe> clases,String sTituloMensaje)throws Exception {		
		try {			
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s!=null) {
				for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
					this.deepLoad(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>,isDeep,deepLoadType,clases);
				}	
						
				if(this.isConRefrescarForeignKeys) {
					<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.refrescarForeignKeysDescripciones<%=GetNombreClaseC(TablaBase.ToString())%>(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s);
				}	
			}
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
  		} finally {
			;
		}
	}
	
	public  void executeQueryWithConnection(String sQueryExecute) throws Exception {
		try {
			
			connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();	
					
			this.executeQuery(connexion, sQueryExecute);   	       	 
			
			connexion.commit();
						
		} catch(Exception e) {
			connexion.rollback();
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			connexion.close();			
		}
	}
	
	public  void executeQuery(String sQueryExecute) throws Exception {
		try {			
			this.executeQuery(connexion, sQueryExecute);   	       	 
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			;
		}
	}
	
	public  void executeQuery(Connexion connexion, String sQueryExecute) throws Exception {	
        try {
			if(this.connexionType.equals(ConnexionType.JDBC32)) {
				this.executeQueryJdbc(connexion, sQueryExecute);
			} else {
				//this.executeQueryHibernate(connexion, sQueryExecute);
			}
      	} catch(Exception e) {
			throw e;
      	}		    	
    }
	
	public void executeQueryJdbc(Connexion connexion, String sQueryExecute) throws Exception {		
        try {     				
        	PreparedStatement preparedStatement = connexion.getConnection().prepareStatement(sQueryExecute);
      					
        	preparedStatement.executeUpdate();
        	preparedStatement.close();
      		   	
      	} catch(Exception e) {
			throw e;
      	}		
    }
	
	public <%=GetNombreClaseC(TablaBase.ToString())%><%=strParameter%>ReturnGeneral procesarAccion<%=GetNombreClaseC(TablaBase.ToString())%>s(ParametroGeneralUsuario parametroGeneralUsuario,Modulo modulo,Opcion opcion,Usuario usuario,String sProceso,<%=strTypeCollection%><<%=GetNombreClaseC(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,<%=GetNombreClaseC(TablaBase.ToString())%><%=strParameter%>ReturnGeneral <%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>)throws Exception {
		 try {	
			<%=GetNombreClaseC(TablaBase.ToString())%><%=strParameter%>ReturnGeneral <%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral=new <%=GetNombreClaseC(TablaBase.ToString())%><%=strParameter%>ReturnGeneral();
	
			<%if(blnConAdditional){%>
			<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.procesarAccions(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>parametroGeneralUsuario,modulo,<%}%>opcion,usuario,this,sProceso,<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>,<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral);
			<%}%>
			
			return <%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral;
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			;
		}
	}
	
	public <%=GetNombreClaseC(TablaBase.ToString())%><%=strParameter%>ReturnGeneral procesarAccion<%=GetNombreClaseC(TablaBase.ToString())%>sWithConnection(ParametroGeneralUsuario parametroGeneralUsuario,Modulo modulo,Opcion opcion,Usuario usuario,String sProceso,<%=strTypeCollection%><<%=GetNombreClaseC(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,<%=GetNombreClaseC(TablaBase.ToString())%><%=strParameter%>ReturnGeneral <%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>)throws Exception {				
		 try {	
			this.connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();			
			
			<%=GetNombreClaseC(TablaBase.ToString())%><%=strParameter%>ReturnGeneral <%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral=new <%=GetNombreClaseC(TablaBase.ToString())%><%=strParameter%>ReturnGeneral();
	
			<%if(blnConAdditional){%>
			<%=GetNombreClaseC(TablaBase.ToString())%>LogicAdditional.procesarAccions(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>parametroGeneralUsuario,modulo,<%}%>opcion,usuario,this,sProceso,<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strParameterGeneral%>,<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral);
			<%}%>
			
			this.connexion.commit();
			
			return <%=GetNombreClaseObjetoC(TablaBase.ToString())%>ReturnGeneral;
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			this.connexion.close();
		}
	}
	
	<%if(blnEsProceso) {%>
	<%=GetProcesarInformacionTablasClasesProceso(TablaBase,false,false)%>
	<%}%>
	
	<%if(blnEsReporteGuardar) {%>
	
	public static String SCHEMA="<%=GetSchemaTableFromProperties(TablaBase,Schema)%>";	
	public static String TABLENAME="<%=GetNombreTablaC(TablaBase)%>";
	
	public static boolean ISWITHSTOREPROCEDURES=false;
	
	//POSTGRES
	public static String QUERYINSERT="insert into "+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.SCHEMA+"."+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.TABLENAME+"(<% for (int i = 0; i < TablaBase.Columns.Count; i++){ if(TieneColumnaReporteParametroC(TablaBase.Columns[i])){continue;}%><%= GetSqlParameterInsertPostgresC(TablaBase.Columns[i],false) %><% if (i < TablaBase.Columns.Count - 1&&i!=0) { %>,<% } %><% } %>)values(<% for (int i = 0; i < TablaBase.Columns.Count; i++){ if(TieneColumnaReporteParametroC(TablaBase.Columns[i])){continue;}%><%= GetSqlParameterInsertPostgresC(TablaBase.Columns[i],true) %><% if (i < TablaBase.Columns.Count - 1&&i!=0) { %>,<% } %><% } %>)";
	public static String QUERYUPDATE="update "+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.SCHEMA+"."+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.TABLENAME+" set <% for (int i = 0; i < TablaBase.Columns.Count; i++){ if(TieneColumnaReporteParametroC(TablaBase.Columns[i])){continue;}%><%= GetSqlParameterUpdateC(TablaBase.Columns[i]) %><% if (i < TablaBase.Columns.Count - 1&&i!=0) { %>,<% } %><% } %> where id=? AND version_row=?";
	public static String QUERYDELETE="delete from "+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.SCHEMA+"."+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.TABLENAME+" where id=?";
	public static String QUERYSELECT="select <%=GetNombreClaseObjetoC(TablaBase.ToString())%> from "+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.SPERSISTENCENAME+" <%=GetNombreClaseObjetoC(TablaBase.ToString())%>";
	public static String QUERYSELECTNATIVE="select <% for (int i = 0; i < TablaBase.Columns.Count; i++){ if(TieneColumnaReporteParametroC(TablaBase.Columns[i])){continue;} %><%= GetSqlParameterSelectC(TablaBase.Columns[i],TablaBase,Schema) %><% if (i < TablaBase.Columns.Count - 1) { %>,<% } %><% } %> from "+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.SCHEMA+"."+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.TABLENAME;//+" as "+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.TABLENAME;
	
	public void save<%=GetNombreClase(TablaBase.ToString())%>WithConnection()throws Exception {	
		try {	
			connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();			
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.check<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,this.datosCliente,connexion,this.arrDatoGeneral);
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,this.arrDatoGeneral);
			
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),<%=GetNombreClaseObjeto(TablaBase.ToString())%>,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			//TEMPORAL
			//this.getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>();
			
			<%if(blnTieneAuditoriaAuto) {%>
			<%=GetNombreClase(TablaBase.ToString())%>Logic.updateAuditoriaAuto<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,datosCliente.getIdUsuario(),datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			<%}%>
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, connexion);	    	       	 
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.check<%=GetNombreClase(TablaBase.ToString())%>ToSaveAfter(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,this.datosCliente,connexion,this.arrDatoGeneral);
			
			
			//SOLO FUNCIONA PARA ACTUALIZAR Y CON CONNEXION
			<%=GetCommentVersionRow()%>this.getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>();
			
			connexion.commit();			
			
			if(<%=GetNombreClaseObjeto(TablaBase.ToString())%>.getIsDeleted()) {
				<%=GetNombreClaseObjeto(TablaBase.ToString())%>=null;
			}
			
		} catch(Exception e) {
			connexion.rollback();			
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			connexion.close();			
		}
	}
	
	public void save<%=GetNombreClase(TablaBase.ToString())%>()throws Exception {	
		try {	
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.check<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,this.datosCliente,connexion,this.arrDatoGeneral);
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,this.arrDatoGeneral);
			
			//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),<%=GetNombreClaseObjeto(TablaBase.ToString())%>,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			
			<%if(blnTieneAuditoriaAuto) {%>
			<%=GetNombreClase(TablaBase.ToString())%>Logic.updateAuditoriaAuto<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,datosCliente.getIdUsuario(),datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
			<%}%>
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, connexion);	    	       	 			
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.check<%=GetNombreClase(TablaBase.ToString())%>ToSaveAfter(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,this.datosCliente,connexion,this.arrDatoGeneral);
			
			if(<%=GetNombreClaseObjeto(TablaBase.ToString())%>.getIsDeleted()) {
				<%=GetNombreClaseObjeto(TablaBase.ToString())%>=null;
			}
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			;
		}
	}
	
	public void save<%=GetNombreClase(TablaBase.ToString())%>sWithConnection()throws Exception {				
		 try {	
			connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();			
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.check<%=GetNombreClase(TablaBase.ToString())%>ToSaves(<%=GetNombreClaseObjeto(TablaBase.ToString())%>s,this.datosCliente,connexion,this.arrDatoGeneral);
			
			//TEMPORAL
			//this.getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>s();
			
	   		for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>Local:<%=GetNombreClaseObjeto(TablaBase.ToString())%>s) {				
				<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,this.arrDatoGeneral);
	        	
				//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
	   
				<%if(blnTieneAuditoriaAuto) {%>
				<%=GetNombreClase(TablaBase.ToString())%>Logic.updateAuditoriaAuto<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,datosCliente.getIdUsuario(),datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
				<%}%>
			
				<%=GetNombreClase(TablaBase.ToString())%>Logic.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local, connexion);				
			}
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.check<%=GetNombreClase(TablaBase.ToString())%>ToSavesAfter(<%=GetNombreClaseObjeto(TablaBase.ToString())%>s,this.datosCliente,connexion,this.arrDatoGeneral);
					
			//SOLO FUNCIONA PARA ACTUALIZAR Y CON CONNEXION
			<%=GetCommentVersionRow()%>this.getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>s();
			
			connexion.commit();		
			
			this.quitar<%=GetNombreClase(TablaBase.ToString())%>sEliminados();
			
		} catch(Exception e) {
			connexion.rollback();			
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			connexion.close();				
		}
	}
	
	public void save<%=GetNombreClase(TablaBase.ToString())%>s()throws Exception {				
		 try {	
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.check<%=GetNombreClase(TablaBase.ToString())%>ToSaves(<%=GetNombreClaseObjeto(TablaBase.ToString())%>s,this.datosCliente,connexion,this.arrDatoGeneral);
			
	   		for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>Local:<%=GetNombreClaseObjeto(TablaBase.ToString())%>s) {				
				<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,this.arrDatoGeneral);
	        	
				//<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
	   
				<%if(blnTieneAuditoriaAuto) {%>
				<%=GetNombreClase(TablaBase.ToString())%>Logic.updateAuditoriaAuto<%=GetNombreClase(TablaBase.ToString())%>(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local,datosCliente.getIdUsuario(),datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());
				<%}%>
				
				<%=GetNombreClase(TablaBase.ToString())%>Logic.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>Local, connexion);				
			}
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.check<%=GetNombreClase(TablaBase.ToString())%>ToSavesAfter(<%=GetNombreClaseObjeto(TablaBase.ToString())%>s,this.datosCliente,connexion,this.arrDatoGeneral);
			
			this.quitar<%=GetNombreClase(TablaBase.ToString())%>sEliminados();
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			;
		}
	}
	
	public void getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>WithConnection()throws Exception {	
		//VERIFICA EL OBJETO NO IMPORTA ESTADO			
		if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsChangedAuxiliar() && Constantes.ISSETVERSIONROWUPDATE) {
		  	//TEMPORAL
			//if((<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsDeleted() || (<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsChanged()&&!<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsNew()))&& Constantes.ISSETVERSIONROWUPDATE) {
			Timestamp timestamp=null;
			
			try {	
				connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();					
				
				//<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess
				timestamp=this.getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>(connexion,<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%=strIdGetSet%>());
				
				if(!<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getVersionRow().equals(timestamp)) {	
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setVersionRow(timestamp);
				}
				
				connexion.commit();									
				
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsChangedAuxiliar(false);
				
			} catch(Exception e) {
				connexion.rollback();			
				
				throw e;
				
	      	} finally {
				connexion.close();			
			}
		}
	}
	
	private void getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>()throws Exception {	
		
		if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsChangedAuxiliar() && Constantes.ISSETVERSIONROWUPDATE) {		
		//TEMPORAL
		//if((<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsDeleted() || (<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsChanged()&&!<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsNew()))&& Constantes.ISSETVERSIONROWUPDATE) {
			//<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess
			Timestamp timestamp=this.getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>(connexion,<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%=strIdGetSet%>());
			
			try {							
				if(!<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getVersionRow().equals(timestamp)) {	
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setVersionRow(timestamp);
				}
				
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsChangedAuxiliar(false);
				
			} catch(Exception e) {
				throw e;
				
	      	} finally {
				;			
			}
		}
	}
	
	public void quitar<%=GetNombreClase(TablaBase.ToString())%>sEliminados() throws Exception {				
		
		<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux= new <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%>><%=strTypeNewCollectionEnd%>;
		
		for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
			if(!<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsDeleted()) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux.add(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
			}
		}
		
		<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s=<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux;
	}
	
	private void getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>s()throws Exception {	
		if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s!=null && Constantes.ISSETVERSIONROWUPDATE)	{
			
			try {	
				Timestamp timestamp=null;
				
				for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
					if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getIsChangedAuxiliar()) {
					//TEMPORAL
					//if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getIsDeleted() || (<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getIsChanged()&&!<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getIsNew())) {
						
						//<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess
						timestamp=this.getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>(connexion,<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.get<%=strIdGetSet%>());
						
						if(!<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getVersionRow().equals(timestamp)) {	
							<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.setVersionRow(timestamp);
						}
						
													
						<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.setIsChangedAuxiliar(false);														
					}
				}
					
			} catch(Exception e) {
				throw e;
				
	      	} finally {
				;			
			}
		}
	}
	
	public  Timestamp getSetVersionRow<%=GetNombreClase(TablaBase.ToString())%>(Connexion connexion, Long <%=strId%>) throws SQLException,Exception {
		Timestamp timestampVersionRow=null;
						
        try {     		
			if(connexion.getConnexionType().equals(ConnexionType.HIBERNATE)) {
				Query query =connexion.getEntityManager().createQuery ("SELECT <%=strVersionRowDB%> FROM "+<%=GetNombreClase(TablaBase.ToString())%>.class.getSimpleName()+" WHERE <%=strId%>="+<%=strId%>);
					
				timestampVersionRow=(Timestamp)query.getSingleResult();
			}
							
      	} catch(Exception e) {
			throw e;
      	}
		
    	return timestampVersionRow;
    }
	
	public static void save(<%=GetNombreClase(TablaBase.ToString())%> entity,Connexion connexion)throws SQLException,Exception {	
		try {
			ParametersType parametersType=null;
			String sQuerySave="";
			
			if (entity.getIsDeleted()) {
				parametersType=ParametersType.DELETE;
				sQuerySave=<%=GetNombreClase(TablaBase.ToString())%>Logic.QUERYDELETE;
				
			} else if (entity.getIsChanged()) {
				if(entity.getIsNew()) {
					parametersType=ParametersType.INSERT;
					sQuerySave=<%=GetNombreClase(TablaBase.ToString())%>Logic.QUERYINSERT;
				} else {
					parametersType=ParametersType.UPDATE;
					sQuerySave=<%=GetNombreClase(TablaBase.ToString())%>Logic.QUERYUPDATE;
				}
				
			} 
			
			<%if(GetSchemaTableFromProperties(TablaBase,"").Equals("NINGUNO")) {%>
			sQuerySave=sQuerySave.replace("ninguno.","");
			sQuerySave=sQuerySave.replace("NINGUNO.","");
			<%}%>
			
			ParametersMaintenance parametersMaintenance=new ParametersMaintenance();
			
			if(connexion.getConnexionType().equals(ConnexionType.JDBC32)) {
				parametersMaintenance=<%=GetNombreClase(TablaBase.ToString())%>Logic.buildParametersMaintenance(connexion.getDbType(), parametersType, entity);
			}
			connexion.setFuncionAuxiliar(<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones.SQL_SECUENCIAL);
			
			DataAccessHelper<%=GetNewCodeTableFromPropertiesC(TablaBase)%>.save(entity, connexion,parametersMaintenance,sQuerySave,<%=GetNombreClase(TablaBase.ToString())%>Logic.TABLENAME,<%=GetNombreClase(TablaBase.ToString())%>Logic.ISWITHSTOREPROCEDURES);
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic.set<%=GetNombreClase(TablaBase.ToString())%>OriginalStatic(entity);
			
		} catch(Exception e) {
            throw e;
        }
	}
	
	public static void set<%=GetNombreClase(TablaBase.ToString())%>OriginalStatic(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>)throws Exception  {
		<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.set<%=GetNombreClase(TablaBase.ToString())%>Original((<%=GetNombreClase(TablaBase.ToString())%>)<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.clone());		
	}
	
	public  static ParametersMaintenance buildParametersMaintenance(ParameterDbType newDbType,ParametersType parametersType,<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>) throws Exception {
		ParametersMaintenance parametersMaintenance=new ParametersMaintenance();		
		
		try {
			//ParametersMaintenance parametersMaintenance=super.getParametersMaintenance();		
			ArrayList<ParameterMaintenance> parametersTemp=new ArrayList<ParameterMaintenance>();
			ParameterMaintenance parameterMaintenance;
			ParameterValue<Long> parameterMaintenanceValueId;
			Integer iOrder=1;
			
			<% int iCount=0; %>
				if(!<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsDeleted()) {		
					<% for (int i = 0; i < TablaBase.Columns.Count; i++){ if((TablaBase.Columns[i].Name.Equals(strId) && blnTieneIdentityColumn)||TablaBase.Columns[i].Name.Equals(strVersionRow) || TieneColumnaReporteParametroC(TablaBase.Columns[i])){ continue;}%>
					<% iCount++; %>				
					parameterMaintenance=new ParameterMaintenance();
					parameterMaintenance.setOrder(iOrder++<%//=iCount.ToString()%>);		
					parameterMaintenance.setParameterMaintenanceType(ParameterType.<%= GetTipoColumnaClaseEnumC(TablaBase.Columns[i]) %>);
					ParameterValue<<%= GetTipoColumnaClaseC(TablaBase.Columns[i]) %>> parameterMaintenanceValue<%= GetNombreColumnaClaseC(TablaBase.Columns[i]) %>=new ParameterValue<<%= GetTipoColumnaClaseC(TablaBase.Columns[i]) %>>();
					parameterMaintenanceValue<%= GetNombreColumnaClaseC(TablaBase.Columns[i]) %>.setValue(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%= GetNombreCompletoColumnaClaseC(TablaBase.Columns[i]) %>());
					parameterMaintenance.setParameterMaintenanceValue(parameterMaintenanceValue<%= GetNombreColumnaClaseC(TablaBase.Columns[i]) %>);
					parametersTemp.add(parameterMaintenance);
					
					<% if(TablaBase.Columns[i].Name.Equals(strVersionRow)){iCount--;} %>
					<% } %>				
						if(!<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsNew()) {					
							parameterMaintenance=new ParameterMaintenance();
							parameterMaintenance.setOrder(iOrder++<%//= GetParameterNoLastIndexC(TablaBase)%>);
							parameterMaintenance.setParameterMaintenanceType(ParameterType.LONG);
							parameterMaintenanceValueId=new ParameterValue<Long>();
							parameterMaintenanceValueId.setValue(<%=GetIdParameterColumnC(TablaBase)%>);
							parameterMaintenance.setParameterMaintenanceValue(parameterMaintenanceValueId);		
							parametersTemp.add(parameterMaintenance);
							
							parameterMaintenance=new ParameterMaintenance();
							parameterMaintenance.setOrder(iOrder++<%//= GetParameterLastIndexC(TablaBase)%>);
							parameterMaintenance.setParameterMaintenanceType(ParameterType.TIMESTAMP);
							ParameterValue<Date> parameterMaintenanceValueVersionRow=new ParameterValue<Date>();
							parameterMaintenanceValueVersionRow.setValue(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%=strVersionRowGetSet%>());
							parameterMaintenance.setParameterMaintenanceValue(parameterMaintenanceValueVersionRow);		
							parametersTemp.add(parameterMaintenance);					
						}
				} else {
					parameterMaintenance=new ParameterMaintenance();
					parameterMaintenance.setOrder(iOrder);
					parameterMaintenance.setParameterMaintenanceType(ParameterType.LONG);
					parameterMaintenanceValueId=new ParameterValue<Long>();
					parameterMaintenanceValueId.setValue(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%=strIdGetSet%>());
					parameterMaintenance.setParameterMaintenanceValue(parameterMaintenanceValueId);		
					parametersTemp.add(parameterMaintenance);
				}
			
			parametersMaintenance= new ParametersMaintenance();
			parametersMaintenance.setDbType(newDbType);
			parametersMaintenance.setParametersMaintenance(parametersTemp);
			//super.setParametersMaintenance(parametersMaintenance);		
		} catch(Exception e) {
			throw e;
		}
		
		return parametersMaintenance;
	}
	<%}%>
}
<script runat="template">


//<%if(TieneClasesRelacionadasOForeignKeyC(TablaBase)){%>import <%=Empresa%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageEntities%>.*;<% } %>

//IMPLEMENTACIONES SOBRANTES
/*
public void newInstance(<% for (int i = 0; i <TablaBase.Columns.Count; i++){%><%=GetParametroFuncionNuevoClase(TablaBase.Columns[i])%><%if((i!=TablaBase.Columns.Count-1)&&(!GetParametroFuncionNuevoClase(TablaBase.Columns[i]).Equals(string.Empty))){%>,<%}%><%}%>,Long idUsuario,String sUsuarioPC,String sNamePC,String sIPPC)throws SQLException,Exception {  			
	    try {		
			connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();
			
	    	<%=GetNombreClaseObjeto(TablaBase.ToString())%>= new <%=GetNombreClase(TablaBase.ToString())%>();
		
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
			<%=  GetSetEntityColumna(TablaBase.Columns[i],TablaBase.ToString(),false) %>	
 			<% } %>
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>,this.arrDatoGeneral);
	   		
			<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,idUsuario,<%=GetNombreClaseObjeto(TablaBase.ToString())%>,sUsuarioPC,sNamePC,sIPPC);
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, connexion);
	    				
			connexion.commit();	
			
	   	} catch(SQLException e) {
			connexion.rollback();
			Funciones.manageException(logger,e);
			throw e;
			
      	} catch(Exception e) {
			connexion.rollback();
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			connexion.close();	
		}
	}
	
	public void update(<% for (int i = 0; i <TablaBase.Columns.Count; i++){ %><%=GetParametroFuncionActualizarClase(TablaBase.Columns[i])%> <%if((i!=TablaBase.Columns.Count-1)&&(!GetParametroFuncionActualizarClase(TablaBase.Columns[i]).Equals(string.Empty))){%>,<% } %><% } %>,Long idUsuario,String sUsuarioPC,String sNamePC,String sIPPC) throws SQLException,Exception {			
		//AuditoriaLogic auditoriaLogic= new AuditoriaLogic(); 
		
	    try {
			connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>=<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntity(connexion, id);
			
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired){continue; } %>
			<%=  GetSetEntityColumna(TablaBase.Columns[i],TablaBase.ToString(),true) %>	
			<% } %>
			
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,idUsuario,<%=GetNombreClaseObjeto(TablaBase.ToString())%>,sUsuarioPC,sNamePC,sIPPC);
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, connexion);	    	       	 
						
			connexion.commit();			
			
		} catch(SQLException e) {
			connexion.rollback();
			Funciones.manageException(logger,e);
			throw e;
			
      	} catch(Exception e) {
			connexion.rollback();
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			connexion.close();	
		}		
	}
	
	public void delete(Long id,Long idUsuario,String sUsuarioPC,String sNamePC,String sIPPC) throws SQLException,Exception {	
	    try {
			connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();
			
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>=<%=GetNombreClaseObjeto(TablaBase.ToString())%>DataAccess.getEntity(connexion, id);
			<%=GetNombreClaseObjeto(TablaBase.ToString())%>.setIsDeleted(true);
			<%=strCommentAdditional%><%=GetNombreClase(TablaBase.ToString())%>LogicAdditional.update<%=GetNombreClase(TablaBase.ToString())%>ToSave(<%=GetNombreClaseObjeto(TablaBase.ToString())%>);
			
			<%=GetNombreClase(TablaBase.ToString())%>Logic.registrarAuditoria(this.connexion,idUsuario,<%=GetNombreClaseObjeto(TablaBase.ToString())%>,sUsuarioPC,sNamePC,sIPPC);
			
			<%=GetNombreClase(TablaBase.ToString())%>DataAccess.save(<%=GetNombreClaseObjeto(TablaBase.ToString())%>, connexion);	    	       	 
				 		
			connexion.commit();
			
		} catch(SQLException e) {
			connexion.rollback();
			Funciones.manageException(logger,e);
			throw e;
			
      	} catch(Exception e) {
			connexion.rollback();
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			connexion.close();	
		}
	}
	
*/
</script>