<%@ Template Language="C#" TargetLanguage="C#" Description="Template de la capa de Acceso a Datos" ResponseEncoding="UTF-8"%>    	
<%@ CodeTemplate Src="..\CommonCode\CommonCodeProyecto.cs" Inherits="Me.CommonCodeProyecto" Language="C#" TargetLanguage="C#" Description="A base class for the entities." ResponseEncoding="UTF-8"%>
<%@ CodeTemplate Src="..\CommonCode\CommonCode.cs" Inherits="Me.CommonCode" Language="C#" TargetLanguage="C#" Description="A base class for the entities." ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="Me" %>
<%@ Property Name="NombreProgramador" Type="System.String" Default="Byron Ch?vez" Category="Options" Description="Nombre del Programdor" %>
<%@ Property Name="EntidadesNombre" Type="System.String" Default="Indefinido" Category="Options" Description="Nombre de la Entidad" %>
<%@ Property Name="Schema" Type="System.String" Default="Tame" Category="Options" Description="Schema" %>
<%@ Property Name="Package" Type="System.String" Default="Indefinido" Category="Options" Description="Nombre de la Entidad" %>
<%@ Property Name="PackageSeguridad" Type="System.String" Default="Seguridad" Category="General" Description="Nombre del Programdor" %>

<%@ Property Name="TablaBase" Type="SchemaExplorer.TableSchema" EXCLUDED="true"	Category="Context"%>
<%@ Property Name="TablasBaseForReporte" Type="SchemaExplorer.TableSchemaCollection" Category="Context" Description="Select a set of tables." Optional="true"%>
<%@ Property Name="Empresa" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre de la Empresa" %>
<%@ Property Name="EsConstantesFunciones" Type="System.Boolean" Default="false" Category="Options" Description="Nombre de la Empresa" %>
<%@ Property Name="ConSessionBeans" Type="System.Boolean" Default="true" Category="4. Service Architecture" Description="Nombre del Programdor" %>
<%@ Property Name="ConRMI" Type="System.Boolean" Default="false" Category="4. Service Architecture" Description="Nombre del Programdor" %>
<%@ Property Name="ConSessionBeansHome" Type="System.Boolean" Default="false" Category="4. Service Architecture" Description="Nombre del Programdor" %>
<%@ Property Name="GenerarSqlFuncionesReportes" Type="System.Boolean" Default="false" Category="4. Service Architecture" Description="Nombre del Programdor" %>
<%@ Property Name="GenerarMe" Type="System.Boolean" Default="false" Category="1. General" Description="Nombre del Programdor" %>

<%@ Import NameSpace="System.Collections" %>
<%@ Import NameSpace="System.Collections.Generic" %>
<%@ Property Name="GeneracionPorModuloUnico" Type="System.Boolean" Default="false" Category="0. Tipo Generacion" Description="Nombre del Programdor" %>
<%@ Property Name="EsSwing" Type="System.Boolean" Default="false" Category="Options" Description="Inndica si es Swing"  %>
<%@ Property Name="SourceDatabaseReportes" Type="SchemaExplorer.DatabaseSchema" Category="0.Tipo Generacion" Description="Database to get the extended properties from." Optional="True"%>
<%@ Property Name="GeneracionReportesTablasModulo" Type="System.Boolean" Default="false" Category="0. Tipo Generacion" Description="Nombre del Programdor" %>
<%@ Property Name="ConCapaInterfaceLogic" Type="System.Boolean" Default="true" Category="4. Service Architecture" Description="Nombre del Programdor" %>

<script runat="template">
String strDesde="_desde";
String strDesdeNombre="Desde";

String strHasta="_hasta";
String strHastaNombre="Hasta";

String strInicio="_inicio";
String strInicioNombre="Inicio";

String strFin="_fin";
String strFinNombre="Fin";

public string GetFuncionesModuloTablaReportes() {		
	//TiposGeneracionGrupo tipoGeneracionGrupo=TiposGeneracionGrupo.TODOS;
	String sFunciones="";
	TableSchemaCollection SourceDatabaseTablesReportes;
	TableSchemaCollection SourceDatabaseTablesProcesos=new TableSchemaCollection();
	bool existeProcesos=false;
	bool blnEsReporteAdditionalAux=false;
	
	//NORMALMENTE DEBE ESTAR COMENTADO
	//blnEstablaModulo=true;//
		
	
	if(GeneracionReportesTablasModulo && blnEstablaModulo && blnConReportesPorModulo) {
		
		SourceDatabaseTablesReportes=GetTablasForEsquemaC(SourceDatabaseReportes,TablaBase.Owner,true,false,TiposGeneracionGrupo.TODOS,TiposGeneracionRelaciones.NINGUNO);
		
		if(!GenerarSqlFuncionesReportes) {
			Trace.WriteLine("Generando Variables");
			foreach(TableSchema tableSchema in SourceDatabaseTablesReportes){
				sFunciones+="\r\n\tpublic "+strTypeCollection+"<"+GetNombreClase(tableSchema.ToString())+">"+ GetNombreClaseObjeto(tableSchema.ToString())+"s= new "+strTypeNewCollection+"<"+GetNombreClase(tableSchema.ToString())+">"+strTypeNewCollectionEnd+";";			
			}
			
			Trace.WriteLine("Generando Funciones Variables");
			foreach(TableSchema tableSchema in SourceDatabaseTablesReportes){
				sFunciones+="\r\n\r\n\tpublic "+strTypeCollection+"<"+GetNombreClase(tableSchema.ToString())+"> get"+GetNombreClase(tableSchema.ToString())+"s() {";			
				sFunciones+="\r\n\t\treturn this."+GetNombreClaseObjeto(tableSchema.ToString())+"s;";
				sFunciones+="\r\n\t}";
			}
			
			foreach(TableSchema tableSchema in SourceDatabaseTablesReportes){
				sFunciones+="\r\n\r\n\tpublic void set"+GetNombreClase(tableSchema.ToString())+"s("+strTypeCollection+"<"+GetNombreClase(tableSchema.ToString())+"> new"+GetNombreClase(tableSchema.ToString())+"s) {";
				sFunciones+="\r\n\t\tthis."+GetNombreClaseObjeto(tableSchema.ToString())+"s = new"+GetNombreClase(tableSchema.ToString())+"s;";
				sFunciones+="\r\n\t}";
			}
			
			Trace.WriteLine("Generando Funciones Busquedas");
			foreach(TableSchema tableSchema in SourceDatabaseTablesReportes){
				sFunciones+=GetIndicesTablasClases(tableSchema);
				
				if(GetEsProcesoFromPropertiesC(tableSchema)) {
					SourceDatabaseTablesProcesos.Add(tableSchema);
					
					if(!existeProcesos) {
						existeProcesos=true;	
					}
				}
			}
			
			Trace.WriteLine("Generando Funciones Procesos Acciones");
			foreach(TableSchema tableSchema in SourceDatabaseTablesReportes){
				arrayTablasRelacionadasParametros=CargarTablasParametrosDesdeProcesosC(tableSchema,true);
				//Trace.WriteLine(tableSchema.Name+"="+arrayTablasRelacionadasParametros.Count);
				
				sFunciones+="\r\n\r\n\tpublic "+GetNombreClaseC(tableSchema.ToString())+"ReturnGeneral procesarAccion"+GetNombreClaseC(tableSchema.ToString())+"s(ParametroGeneralUsuario parametroGeneralUsuario,Modulo modulo,Opcion opcion,Usuario usuario,String sProceso,List<"+GetNombreClaseC(tableSchema.ToString())+"> "+GetNombreClaseObjetoC(tableSchema.ToString())+"s,"+GetNombreClaseC(tableSchema.ToString())+strParameterGeneral+" "+GetNombreClaseObjetoC(tableSchema.ToString())+strParameterGeneral+")throws Exception {";
				sFunciones+="\r\n\t\ttry {";
				sFunciones+="\r\n\t\t\t"+GetNombreClaseC(tableSchema.ToString())+"ReturnGeneral "+GetNombreClaseObjetoC(tableSchema.ToString())+"ReturnGeneral=new "+GetNombreClaseC(tableSchema.ToString())+"ReturnGeneral();";
				
				sFunciones+="\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"ReturnGeneral=("+GetNombreClaseC(tableSchema.ToString())+"ReturnGeneral)"+GetNombreClaseC(tableSchema.ToString())+"LogicAdditional.procesarAccions(parametroGeneralUsuario,modulo,opcion,usuario,this,sProceso,"+GetNombreClaseObjetoC(tableSchema.ToString())+"s,"+GetNombreClaseObjetoC(tableSchema.ToString())+strParameterGeneral+","+GetNombreClaseObjetoC(tableSchema.ToString())+"ReturnGeneral);";
						
				sFunciones+="\r\n\t\t\treturn "+GetNombreClaseObjetoC(tableSchema.ToString())+"ReturnGeneral;";
						
				sFunciones+="\r\n\t\t} catch(Exception e) {";
				sFunciones+="\r\n\t\t\tFunciones.manageException(logger,e);";
				sFunciones+="\r\n\t\t\tthrow e;";
						
				sFunciones+="\r\n\t\t} finally {";
				sFunciones+="\r\n\t\t\t;";
				sFunciones+="\r\n\t\t}";
				sFunciones+="\r\n\t}";
				
				sFunciones+="\r\n\r\n\tpublic "+GetNombreClaseC(tableSchema.ToString())+"ReturnGeneral procesarAccion"+GetNombreClaseC(tableSchema.ToString())+"sWithConnection(ParametroGeneralUsuario parametroGeneralUsuario,Modulo modulo,Opcion opcion,Usuario usuario,String sProceso,List<"+GetNombreClaseC(tableSchema.ToString())+"> "+GetNombreClaseObjetoC(tableSchema.ToString())+"s,"+GetNombreClaseC(tableSchema.ToString())+strParameterGeneral+" "+GetNombreClaseObjetoC(tableSchema.ToString())+strParameterGeneral+")throws Exception {";
				sFunciones+="\r\n\t\ttry {";
				sFunciones+="\r\n\t\t\tthis.connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";
						
				sFunciones+="\r\n\t\t\t"+GetNombreClaseC(tableSchema.ToString())+"ReturnGeneral "+GetNombreClaseObjetoC(tableSchema.ToString())+"ReturnGeneral=new "+GetNombreClaseC(tableSchema.ToString())+"ReturnGeneral();";
				
				sFunciones+="\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"ReturnGeneral=("+GetNombreClaseC(tableSchema.ToString())+"ReturnGeneral)"+GetNombreClaseC(tableSchema.ToString())+"LogicAdditional.procesarAccions(parametroGeneralUsuario,modulo,opcion,usuario,this,sProceso,"+GetNombreClaseObjetoC(tableSchema.ToString())+"s,"+GetNombreClaseObjetoC(tableSchema.ToString())+strParameterGeneral+","+GetNombreClaseObjetoC(tableSchema.ToString())+"ReturnGeneral);";
						
				sFunciones+="\r\n\t\t\tthis.connexion.commit();";
						
				sFunciones+="\r\n\t\t\treturn "+GetNombreClaseObjetoC(tableSchema.ToString())+"ReturnGeneral;";
						
				sFunciones+="\r\n\t\t} catch(Exception e) {";
				sFunciones+="\r\n\t\t\tFunciones.manageException(logger,e);";
				sFunciones+="\r\n\t\t\tthrow e;";
						
				sFunciones+="\r\n\t\t} finally {";
				sFunciones+="\r\n\t\t\tthis.connexion.close();";
				sFunciones+="\r\n\t\t}";
				sFunciones+="\r\n\t}";
			}
			
			if(existeProcesos) {
				sFunciones+="\r\n";
			}
			
			foreach(TableSchema tableSchema in SourceDatabaseTablesProcesos){
				sFunciones+=GetProcesarInformacionTablasClases(tableSchema,false,false);
			}	
			
		} else {
			//Trace.WriteLine("here");
			int iTotal=SourceDatabaseTablesReportes.Count;
			int i=1;
			foreach(TableSchema tableSchema in SourceDatabaseTablesReportes){
				blnEsReporteAdditionalAux=GetEsReporteAdditionalFromPropertiesC(tableSchema);
				
				if(blnEsReporteAdditionalAux) {
					//QUIERE DECIR QUE NO UTILIZA UN FUNCION SQL STRING SINO QUE SE MANEJA DENTRO DE LogicAdditional
					continue;	
				}
				
				Trace.WriteLine("Generando "+i+" de "+iTotal+"--->"+tableSchema.Name);
				
				sFunciones+=GetIndicesSqlReportesTablasClases(tableSchema);
				
				if(GetEsProcesoFromPropertiesC(tableSchema)) {
					//sFunciones+=GetProcesarInformacionTablasClases(tableSchema);
				}				
				
				i++;
			}
		}
	}
		
	return sFunciones;
}

public String GetVariablesVisibilidadHabilitarResaltarIndicesVariablesTablasClases(TableSchema TablaBase,bool esVisibilidad,bool esHabilitar, bool esResaltar) {
			String strFuncion=string.Empty;
			String strElse=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n";
			
			strInitFuncion=GetVariablesVisibilidadHabilitarResaltarIndicesVariablesTablasClasesC(TablaBase,esVisibilidad,esHabilitar, esResaltar,EsSwing);
			
			/*
			bool blnExisteBusqueda=false;
			bool blnExisteBusquedaFkVariableGlobal=false;
			bool esPrimero=true;
			
			String strTabPanel=string.Empty;
			String strPanelesBusquedas=string.Empty;
			String strPanelBusqueda=string.Empty;
			String strControlesPanelesBusquedas=string.Empty;
			
			//SIEMPRE DECLARAR PANE BUSQUEDA
			//strTabPanel="\r\n\tpublic JTabbedPane jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+";\r\n";
			
			
			//strPanelesBusquedas="\r\n\tpublic void resaltarPanelBusqueda"+GetNombreClaseC(TablaBase.ToString())+"(String sTipoBusqueda) {";
			//strPanelesBusquedas+="\r\n\t\tint index=0;";
			//strPanelesBusquedas+="\r\n\t\tBoolean existe=false;";
			//strPanelesBusquedas+="\r\n\t\tBorder borderResaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,\"TAB\");\r\n";
			
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
				blnExisteBusquedaFkVariableGlobal=false;
				strPanelBusqueda="";
				
				if(!indexSchema.IsPrimaryKey) {
					strElse=string.Empty;
					
					if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
						continue;
					}
					
					if(indexSchema.IsUnique) {
						continue;
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
					} else {						
						if(!blnExisteBusqueda) {
							blnExisteBusqueda=true;
							//strTabPanel="\r\n\tprotected JTabbedPane jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+";\r\n";
						}
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK")) {
							if(esVisibilidad) {
								strInitFuncion+="\r\n\r\n\tpublic Boolean mostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=true;";
	
								strInitFuncion+="\r\n\r\n\tpublic Boolean getMostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"() {";
								strInitFuncion+="\r\n\t\treturn this.mostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setMostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"(Boolean visibilidadResaltar) {";
								strInitFuncion+="\r\n\t\tthis.mostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= visibilidadResaltar;";
								strInitFuncion+="\r\n\t}";																
							
							} else if(esHabilitar) {
								strInitFuncion+="\r\n\r\n\tpublic Boolean activar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=true;";
	
								strInitFuncion+="\r\n\r\n\tpublic Boolean getActivar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"() {";
								strInitFuncion+="\r\n\t\treturn this.activar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setActivar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"(Boolean habilitarResaltar) {";
								strInitFuncion+="\r\n\t\tthis.activar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= habilitarResaltar;";
								strInitFuncion+="\r\n\t}";
								
							} else if(esResaltar) {
								strInitFuncion+="\r\n\r\n\tpublic Border resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=null;";
	
								strInitFuncion+="\r\n\r\n\tpublic Border getResaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"() {";
								strInitFuncion+="\r\n\t\treturn this.resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setResaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"(Border borderResaltar) {";
								strInitFuncion+="\r\n\t\tthis.resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= borderResaltar;";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setResaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"("+GetNombreClaseC(TablaBase.ToString())+"BeanSwingJInternalFrame "+GetNombreClaseObjetoC(TablaBase.ToString())+"BeanSwingJInternalFrame) {";
								strInitFuncion+="\r\n\t\tBorder borderResaltar=Funciones2.getBorderResaltar("+GetNombreClaseObjetoC(TablaBase.ToString())+"BeanSwingJInternalFrame.getParametroGeneralUsuario(),\"TAB\");";
								//strInitFuncion+="\r\n\t\tthis.jTtoolBarTipoVisual.setBorder(borderResaltar);";
								strInitFuncion+="\r\n\t\tthis.resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= borderResaltar;";
								strInitFuncion+="\r\n\t}";
							}
							
							
							//strPanelBusqueda="\tpublic JPanel jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							//strPanelBusqueda+="\tpublic JButton jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							
							
							if(!esPrimero) {
								strElse="else ";
							}
							
							
							//strPanelBusqueda="\r\n\t\t"+strElse+"if(sTipoBusqueda.equals(\""+indexSchema.Name+"\")) {";							
							//strPanelBusqueda+="\r\n\t\t\tindex= this.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".indexOfComponent(this.jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+");";
							//strPanelBusqueda+="\r\n\r\n\t\t\tthis.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setSelectedIndex(index);";
							//strPanelBusqueda+="\r\n\r\n\t\t\tJPanel jPanel=(JPanel)this.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".getComponent(index);";
							//strPanelBusqueda+="\r\n\r\n\t\t\tjPanel.setBorder(borderResaltar);";
							//strPanelBusqueda+="\r\n\t\t\texiste=true;";
							//strPanelBusqueda+="\r\n\t\t}";
							
							
							//strPanelesBusquedas+="\tprotected JPanel jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							//strPanelesBusquedas+="\tprotected JButton jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String strFinalQuery,";
						} else {
							//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
						}
					}	
					int count=1;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {												
						
						if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual"))) {
							if(EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)
								|| EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)) {
								blnExisteBusquedaFkVariableGlobal=true;
								break;
							}
							
							//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+"\r\n"; 
															
							if(!indexSchema.MemberColumns.Count.Equals(count)) {
								//strInitFuncion+=";\r\n";	
							}
						} else {
							if(!indexSchema.Name.Contains("BusquedaRango")) {
								//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+"\r\n"; 																
							} else {
								//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Inicial",memberColumnSchema.IsForeignKeyMember)+"\r\n";								
								
								//strInitFuncion+=",";
								//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Final",memberColumnSchema.IsForeignKeyMember)+"\r\n"; 																
								break;
							}
						}
						count++;
					}
					
					
					if(blnExisteBusquedaFkVariableGlobal) {
						continue;	
					}
					
					if(esPrimero) {
						esPrimero=false;	
					}
							
					//strInitFuncion+=")throws Exception;";																																			
					
					//strPanelesBusquedas+=strPanelBusqueda;
				}
			}
			
			
			//strInitFuncion=strTabPanel+strPanelesBusquedas+strControlesPanelesBusquedas;
			
			//strInitFuncion+="\r\n\r\n\t\tif(existe) {";
			//strInitFuncion+="\r\n\t\t\tthis.jTtoolBar"+GetNombreClaseC(TablaBase.ToString())+".setBorder(borderResaltar);";
			//strInitFuncion+="\r\n\t\t}";			
			//strInitFuncion+="\r\n\t}";
		*/	
				
			
			return strInitFuncion; 
	}

public String GetDefinitionVariablesResaltarNavegacionColumnsTablaTablasClasesRelacionadas(TableSchema table,bool esFuncionResaltarLote,bool esConBorder,bool esConVisibilidad,bool esConHabilitar) {
	String sTablaClaseRelacionada=String.Empty;
	
	sTablaClaseRelacionada=GetDefinitionVariablesResaltarNavegacionColumnsTablaTablasClasesRelacionadasC(table,esFuncionResaltarLote,esConBorder,esConVisibilidad,esConHabilitar,TablaBase,EsSwing,true);
	
	/*
	String sTablaClaseRelacionada2=String.Empty;
	String sTablaClaseRelacionada3=String.Empty;
	System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
	TableSchema tablaRelacionadaObjetivo;
	ArrayList tablasRelacionadasEncontradas=new ArrayList();
	bool encontrado=false;
	String sClasesNoRelacionadas=String.Empty;
	String[] sClases;sClases= new String[1];
	//bool blClaseNo=false;
			
	String strObjetoController=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoBeanSwing+"JInternalFrame";
	
	if(esFuncionResaltarLote){	
		sTablaClaseRelacionada+="\r\n\t\tif(deepLoadType.equals(DeepLoadType.INCLUDE) || deepLoadType.equals(DeepLoadType.NONE)) {";
		if(esConVisibilidad || esConHabilitar){
			sTablaClaseRelacionada+="\r\n\t\t\tesInicial=false;";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=true;";
			
		} else if(esConBorder){
			sTablaClaseRelacionada+="\r\n\t\t\tesInicial=null;";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=Funciones2.getBorderResaltar("+strObjetoController+".getParametroGeneralUsuario(),\"COLUMNA\");";
		}
		
		sTablaClaseRelacionada+="\r\n\t\t} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {";
		
		if(esConVisibilidad || esConHabilitar){
			sTablaClaseRelacionada+="\r\n\t\t\tesInicial=true;";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=false;";
		} else if(esConBorder){
			sTablaClaseRelacionada+="\r\n\t\t\tesInicial=Funciones2.getBorderResaltar("+strObjetoController+".getParametroGeneralUsuario(),\"COLUMNA\");";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=null;";
		}
		sTablaClaseRelacionada+="\r\n\t\t}\r\n";
		
		//sTablaClaseRelacionada+="\r\n\r\n\t\tfor(Classe clase:clases) {";
	}
	
	foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {				
		if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
			tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
		} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {			
			tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
		} else {
			tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
		}
								
		if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo)) {
			continue;
		}								
				
		encontrado=false;
				
		foreach(TableSchema tableSchema in tablasRelacionadasEncontradas) {										
			if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)) {
				encontrado=true;
			}
		}								
		
		if(!encontrado) {
			tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
			
			if(!esFuncionResaltarLote) {
				sTablaClaseRelacionada+=GetDefinitionVariablesResaltarNavegacionColumnTablaTablasClasesRelacionadas(tablaRelacionadaObjetivo);
			
			} else if(esFuncionResaltarLote){
				sTablaClaseRelacionada2+=GetSetVariablesResaltarLoteNavegacionColumnTablaTablasClasesRelacionadas(tablaRelacionadaObjetivo,false,false,esConBorder,esConVisibilidad,esConHabilitar);				
				sTablaClaseRelacionada3+=GetSetVariablesResaltarLoteNavegacionColumnTablaTablasClasesRelacionadas(tablaRelacionadaObjetivo,true,true,esConBorder,esConVisibilidad,esConHabilitar);				
			}
		}											
	}
	//System.Windows.Forms.MessageBox.Show(sTablaClaseRelacionada);
			
	if(esFuncionResaltarLote){
		sTablaClaseRelacionada=sTablaClaseRelacionada +sTablaClaseRelacionada2;
		
		sTablaClaseRelacionada+="\r\n\r\n\t\tfor(Classe clase:clases) {";
		sTablaClaseRelacionada+=sTablaClaseRelacionada3	;	
		sTablaClaseRelacionada+="\r\n\t\t}";
		
		
		
		//AGREGAR INCLUDE
		//sTablaClaseRelacionada="\r\n\t\tif(deepLoadType.equals(DeepLoadType.INCLUDE) || deepLoadType.equals(DeepLoadType.NONE)) {";					
		//sTablaClaseRelacionada=sTablaClaseRelacionada+"\r\n\t\t}";
	}
	*/
	
	return sTablaClaseRelacionada; 
}

public String GetSetLoteVisibilidadElementosSwingTablaClase(TableSchema TablaBase,bool esParaVisibilidad,bool esParaHabilitar,bool esParaBorder) {
		String strSwing="";
		String strSwing1="";
		String strSwing2="";
		
		strSwing=GetSetLoteVisibilidadElementosSwingTablaClaseC(TablaBase,esParaVisibilidad,esParaHabilitar,esParaBorder);
		
		/*
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(TablaBase.Columns[i].Name.Equals(strVersionRow)) {
				continue;
			}
			
			//if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing1+=GetDefinicionLoteVisibilidadControlVariablesSwing(TablaBase.Columns[i],"","",false,false,esParaVisibilidad,esParaHabilitar,esParaBorder);
				strSwing2+=GetDefinicionLoteVisibilidadControlVariablesSwing(TablaBase.Columns[i],"","",false,true,esParaVisibilidad,esParaHabilitar,esParaBorder);
			//}
		}			
		
		strSwing=strSwing1;
		
		strSwing+="\r\n\r\n\t\tfor(Classe campo:campos) {";
		strSwing+=strSwing2;		
		strSwing+="\r\n\t\t}";
		*/
		
		return strSwing;
}

public String GetDefinirBorderVisibilidadElementosSwingTablaClase(TableSchema TablaBase,bool EsSwing) {
		String strSwing="";
		
		strSwing=GetDefinirBorderVisibilidadElementosSwingTablaClaseC(TablaBase,EsSwing);
		
		/*
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(TablaBase.Columns[i].Name.Equals(strVersionRow)) {
				continue;
			}
			
			//if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing+=GetDefinirBorderVisibilidadControlVariablesSwing(TablaBase.Columns[i],"","",false);
			//}
		}			
		*/
		
		return strSwing;
}

public String GetSetBorderVisibilidadElementosSwingTablaClase(TableSchema TablaBase) {
		String strSwing="";
		
		strSwing=GetSetBorderVisibilidadElementosSwingTablaClaseC(TablaBase,EsSwing);
		
		/*
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(TablaBase.Columns[i].Name.Equals(strVersionRow)) {
				continue;
			}
			
			//if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing+=GetDefinicionBorderVisibilidadControlVariablesSwing(TablaBase.Columns[i],"","",false);
			//}
		}			
		*/
		
		return strSwing;
}

public String SetVariablesTablaToCancelar(ColumnSchema column)
{
	String sTipo=GetTipoColumnaClaseC(column);	
	String sPrefijo=GetPrefijoTipoC(column);	
	String sColumna=GetNombreColumnaClaseC(column);	
	String sIfElse="\r\nif(httpServletRequest.getParameter(\""+GetNameControlHtml(column) +"\"+i.tToString())== null||httpServletRequest.getParameter(\""+GetNameControlHtml(column) + "\"+i.toString())==\"\")\r\n{\r\n";
	sIfElse+=sPrefijo+sColumna+"=null;\r\n}\r\nelse\r\n{\r\n";	
	
	String sValor="";
	
	switch(column.Name)
	{
		case strIsActive:
		sValor="";
		break;
		
		case strIsExpired:
		sValor="";
		break;
		
		case strVersionRow:
		sValor="";
		break;
		
		default:
		sValor=GetDefaultValueColumna(column);
		break;
	}
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
	{
			return String.Empty;
	}
		
	if(column.Name.Equals(strId))
	{
		return  ""+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+strIdGetSet+"("+sValor+");";
	}
	if(column.Name.Equals(strVersionRow))
	{
		return  "";//"this.set"+strVersionRowGetSet+"(\"\");";
	}
	return  ""+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+strField_+""+sPrefijo+ sColumna +"("+sValor+");";
}

public String GetSetVariablesTablaToBean(ColumnSchema column) {
	String sTipo=GetTipoColumnaClaseC(column);	
	String sPrefijo=GetPrefijoTipoC(column);	
	String sColumna=GetNombreColumnaClaseC(column);	
	String sIfElse="\r\nif(httpServletRequest.getParameter(\""+GetNameControlHtml(column) +"\"+i.tToString())== null||httpServletRequest.getParameter(\""+GetNameControlHtml(column) + "\"+i.toString())==\"\")\r\n{\r\n";
	sIfElse+=sPrefijo+sColumna+"=null;\r\n}\r\nelse\r\n{\r\n";	
	String strReturn="";
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
		strReturn=String.Empty;
		
	} else if(column.Name.Equals(strId)) {
		strReturn=""+GetNombreClaseObjetoC(TablaBase.ToString())+"Asignar.set"+strIdGetSet+"("+GetNombreClaseObjeto(TablaBase.ToString())+".get"+strIdGetSet+"());";
		
	} else if(column.Name.Equals(strVersionRow)) {
		strReturn=""+GetNombreClaseObjetoC(TablaBase.ToString())+"Asignar.set"+strVersionRowGetSet+"("+GetNombreClaseObjeto(TablaBase.ToString())+".get"+strVersionRowGetSet+"());";
	
	} else {
		strReturn=""+GetNombreClaseObjetoC(TablaBase.ToString())+"Asignar.set"+strField_+""+sPrefijo+ sColumna +"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strField_+""+sPrefijo+ sColumna+"());";
		
		if(column.IsForeignKeyMember) {
			strReturn+="\r\n\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"Asignar.set"+GetNombreColumnaClaseFkDescripcionC(column)+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreColumnaClaseFkDescripcionC(column)+"());";
		}
	}
	
	return strReturn;
}	

public String GetSetVariableToVariableLocal(ColumnSchema column)
{
	String sTipo=GetTipoColumnaClaseC(column);	
	String sPrefijo=GetPrefijoTipoC(column);	
	String sColumna=GetNombreColumnaClaseC(column);	
	String sIfElse="\r\nif(httpServletRequest.getParameter(\""+GetNameControlHtml(column) +"\"+i.tToString())== null||httpServletRequest.getParameter(\""+GetNameControlHtml(column) + "\"+i.toString())==\"\")\r\n{\r\n";
	sIfElse+=sPrefijo+sColumna+"=null;\r\n}\r\nelse\r\n{\r\n";	
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
	{
			return String.Empty;
	}
		
	if(column.Name.Equals(strId))
	{
		return  GetNombreClaseObjetoC(TablaBase.ToString())+"Local.set"+strIdGetSet+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"());";
	}
	if(column.Name.Equals(strVersionRow))
	{
		return  GetNombreClaseObjetoC(TablaBase.ToString())+"Local.set"+strVersionRowGetSet+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strVersionRowGetSet+"());";
	}
	return  GetNombreClaseObjetoC(TablaBase.ToString())+"Local.set"+strField_+""+sPrefijo+ sColumna +"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strField_+""+sPrefijo+ sColumna+"());";
}

public String GetProcesarInformacionTablasClases(TableSchema tableSchema,bool esLogicAdditionalNormal,bool conMaximoParametros) {
	String strFuncion=string.Empty;
	String strCommentConnexionAdditional="";
	
	//DESHABILITADO, PROCESO SE GENERA COMO BUSQUEDA
	/*
	if(!esLogicAdditionalNormal) {
		return "";	
	}
	*/
			
	bool blnEsReporteLocal= GetEsReporteFromPropertiesC(tableSchema);
	bool blnEsReporteAdditionalAux=GetEsReporteAdditionalFromPropertiesC(tableSchema);
	
	String strParametroReporte="";
	String strParametroReporteUso="";
	String strAdditionalAux="";
	String strParametrosBusquedas=GetVariablesTodosIndicesTablasC(tableSchema,false,true);
	String strParametrosBusquedasUso=GetVariablesTodosIndicesTablasC(tableSchema,true,true);
	String strTipoRetorno="Boolean";		
	String strParametroLista="";
	
	if(blnEsReporteLocal) {
		strParametroReporte="ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";
		strParametroReporteUso="parametroGeneralUsuario,moduloActual,opcionActual,usuarioActual,";
		
		if(esLogicAdditionalNormal && conMaximoParametros) {
			strParametroReporte+="GeneralEntityLogic generalEntityLogic,Object objects,GeneralEntityParameterGeneral generalEntityParameterGeneral,GeneralEntityReturnGeneral generalEntityReturnGeneral,";
			strParametroReporteUso+="generalEntityLogic,objects,generalEntityParameterGeneral,generalEntityReturnGeneral,";
		}
	}
	
	
	if(/*blnEsReporteAdditionalAux && */!esLogicAdditionalNormal) {
		strAdditionalAux="Additional";
		strCommentConnexionAdditional="//";
	}	
	
	String strWithConnectionGetNew="\r\n\t\t\t"+strCommentConnexionAdditional+"this.connexion=this.connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();";
	String strWithConnectionCommit="\r\n\r\n\t\t\t"+strCommentConnexionAdditional+"this.connexion.commit();";
	String strWithConnectionClose="\r\n\t\t\t"+strCommentConnexionAdditional+"this.connexion.close();";
	String strWithConnectionRollBack="\r\n\t\t\t"+strCommentConnexionAdditional+"this.connexion.rollback();";
	
	if(esLogicAdditionalNormal) {
		strWithConnectionGetNew="";
		strWithConnectionCommit="";
		strWithConnectionClose="";
		strWithConnectionRollBack="";
	}
	
	if(esLogicAdditionalNormal && conMaximoParametros) {
		strTipoRetorno="static GeneralEntityReturnGeneral";
	}
	
	strParametroLista=strTypeCollection+"<"+GetNombreClaseC(tableSchema.ToString())+"> "+GetNombreClaseObjetoC(tableSchema.ToString())+"s,";
	
	if(esLogicAdditionalNormal) {
		if(conMaximoParametros) {			
			strParametroLista="";
		}
	}
	
	strFuncion="\r\n\tpublic "+strTipoRetorno+" "+"ProcesarInformacion"+GetNombreClaseC(tableSchema.ToString())+""+"("+strParametroReporte+""+strParametroLista+"String sTipoBusqueda"+strParametrosBusquedas+") throws Exception {";
	
	if(!esLogicAdditionalNormal) {
		strFuncion+="\r\n\t\tBoolean procesado=false;";												
	} else {
		if(!conMaximoParametros) {
			strFuncion+="\r\n\t\tBoolean procesado=false;";	
		}
	}
	
	strFuncion+="\r\n\r\n\t\ttry {";
	
	if(!esLogicAdditionalNormal) {
		strFuncion+="\r\n\t\t\t"+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAdditionalAux+" "+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAdditionalAux+"=new "+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAdditionalAux+"();\r\n";
	}
	
	strFuncion+=strWithConnectionGetNew;
	
	if(!esLogicAdditionalNormal) {
		strFuncion+="\t\t\t\r\n\t\t\t"+strCommentConnexionAdditional+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAdditionalAux+".setConnexion(this.connexion);\r\n";
	}
	
	//strFuncion+="\r\n\t\t\tString sQuerySelect=\"\";";
	//strFuncion+="\r\n\t\t\tString sFinalQueryFinal=\"\";";
	
	//String sSufijoNombre=indexSchema.Name.Replace("Busqueda"+tableSchema.Name,"");
	
	if(!esLogicAdditionalNormal) {
		if(!conMaximoParametros) {
			strFuncion+="\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAdditionalAux+".ProcesarInformacion"+GetNombreClaseC(tableSchema.ToString())+"("+strParametroReporteUso+GetNombreClaseObjetoC(tableSchema.ToString())+"s,sTipoBusqueda"+strParametrosBusquedasUso+");";
		}  else {
			strFuncion+="\r\n\t\t\t"+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAdditionalAux+".ProcesarInformacion"+GetNombreClaseC(tableSchema.ToString())+"("+strParametroReporteUso+GetNombreClaseObjetoC(tableSchema.ToString())+"s,sTipoBusqueda"+strParametrosBusquedasUso+");";
		}
	}
	
	strFuncion+=strWithConnectionCommit;
		
	strFuncion+="\r\n\t\t} catch(Exception e) {"+strWithConnectionRollBack+"\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}";
	
	if(!esLogicAdditionalNormal) {
		strFuncion+="\r\n\r\n\t\treturn procesado;";
	} else {
		if(conMaximoParametros) {			
			strFuncion+="\r\n\r\n\t\treturn generalEntityReturnGeneral;";
		} else {
			strFuncion+="\r\n\r\n\t\treturn procesado;";
		}
	}
	
	strFuncion+="\r\n\t}\r\n";

		
	return strFuncion;
}

public String GetIndicesSqlReportesTablasClases(TableSchema tableSchema) 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strBodyParametrosFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersFuncionUso="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			
			String strWithConnectionGetNew="\r\n\t\t\tthis.connexion=this.connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);this.connexion.begin();";
			String strWithConnectionCommit="\r\n\r\n\t\t\tthis.connexion.commit();";
			String strWithConnectionClose="\r\n\t\t\tthis.connexion.close();";
			
			bool blnEsReporteLocal= GetEsReporteFromPropertiesC(tableSchema);
			
			bool tineEmpresaColumna=false;
			bool tineSucursalColumna=false;
			bool tineEjercicioColumna=false;
			bool tinePeriodoColumna=false;
			bool tineUsuarioColumna=false;
			//bool tineModuloColumna=false;
			
			String sCommentEmpresaParametro="";
			String sCommentSucursalParametro="";
			String sCommentEjercicioParametro="";
			String sCommentPeriodoParametro="";
			String sCommentUsuarioParametro="";
			//String sCommentModuloParametro="";
			
			String sCommentExisteWhere="";
			//ESREPORTEPARAM
			
			String strParametroReporte="";
			
			if(blnEsReporteLocal) {
				strParametroReporte="ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";
			}
			
			String strPrefijoSqlParametro=GetPrefijoSqlTableFromPropertiesC(tableSchema);
			String strPrefijoSqlParametroOriginal="";
	
			if(!strPrefijoSqlParametro.Equals(String.Empty)) {
				strPrefijoSqlParametro=strPrefijoSqlParametro+".";
			}
			
			strPrefijoSqlParametroOriginal=strPrefijoSqlParametro;
			
			bool esParametroReemplazo=GetEsParametroReporteReemplazoFromPropertiesC(tableSchema);
			bool esParametroReemplazoColumn=false;
			
			ColumnSchema columnEmpresa=null;
			ColumnSchema columnSucursal=null;
			
			foreach(IndexSchema indexSchema in tableSchema.Indexes) {
				tineEmpresaColumna=false;
				tineSucursalColumna=false;
				tineEjercicioColumna=false;
				tinePeriodoColumna=false;
				tineUsuarioColumna=false;
				//tineModuloColumna=false;
			
				sCommentEmpresaParametro="//";
				sCommentSucursalParametro="//";
				sCommentEjercicioParametro="//";
				sCommentPeriodoParametro="//";
				sCommentUsuarioParametro="//";
				//sCommentModuloParametro="//";
						
				sCommentExisteWhere="";
				
				//PARAMETROS GLOBALES
				tineEmpresaColumna=ContieneColumna(tableSchema,strIdEmpresa,true);
				tineSucursalColumna=ContieneColumna(tableSchema,strIdSucursal,true);
				tineEjercicioColumna=ContieneColumna(tableSchema,strIdEjercicio,true);
				tinePeriodoColumna=ContieneColumna(tableSchema,strIdPeriodo,true);
				tineUsuarioColumna=ContieneColumna(tableSchema,strIdUsuario,true);
				
				if(tineEmpresaColumna) {
					sCommentEmpresaParametro="";
				}
				
				if(tineSucursalColumna) {
					sCommentSucursalParametro="";
				}
				
				
				if(!indexSchema.IsPrimaryKey)
				{
					if(!VerificarIndiceBusquedaTablaC(tableSchema,indexSchema.Name))
					{
						continue;
					}
					
					strParametersFuncion="";
					strParametersNameFuncion="";
					strBodyParametrosFuncion="";
					
					if(indexSchema.IsUnique)
					{
						/*
						//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(";
							strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"WithConnection(";
							//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(true,";
							//strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"(";
							//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(isConConnexion,";							
						strBodyFuncion="\r\n\t\ttry {"+strWithConnectionGetNew+"\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+=strWithConnectionCommit;
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						*/
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(String sFinalQuery,";
							String sSufijoNombre=indexSchema.Name.Replace("Busqueda"+tableSchema.Name,"");
							
								strFunctionsWithConnection="\r\n\r\n\tpublic static String "+"GetSelecSql"+GetNombreClaseC(tableSchema.ToString())+sSufijoNombre+"(Connexion connexion,ConnexionType connexionType,ParameterDbType parameterDbType,String sFinalQuery,Pagination pagination,ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";//+strParametroReporte;
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,sFinalQuery,";
								//strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"(String sFinalQuery,Pagination pagination,"+strParametroReporte;
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,sFinalQuery,";
							
						}
						else
						{
							/*
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"WithConnection(";
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,";
								strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"(";
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,";
							*/
						}
						//ANTERIOR NEW
						//strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n\t\t\t}\r\n";
						
						strBodyFuncion="\r\n\t\tString sSql=\"\";";
						strBodyFuncion+="\r\n\t\tString sSqlWhere=\"\";";
						strBodyFuncion+="\r\n\t\tBoolean existeWhere=false;";
						
						if(GetExisteWhereFromPropertiesC(tableSchema)) {
							strBodyFuncion+="\r\n\t\t//SQL CON PARTE WHERE INCLUIDO";
							strBodyFuncion+="\r\n\t\texisteWhere=true;";
						}
						
						strBodyFuncion+="\r\n\r\n\t\tif(connexionType.equals(ConnexionType.HIBERNATE)) {";
							
							
						strBodyFuncion+="\r\n\r\n\t\t} else if(connexionType.equals(ConnexionType.JDBC32)) {";
						strBodyFuncion+="\r\n\t\t\tif(parameterDbType.equals(ParameterDbType.MYSQL)) {";
								
						strBodyFuncion+="\r\n\r\n\t\t\t} else if(parameterDbType.equals(ParameterDbType.POSTGRES)) {";
						strBodyFuncion+="\r\n\t\t\t\tInputStream inputStreamSql = AuxiliarGeneral.class.getResourceAsStream(\""+GetNombreClaseC(tableSchema.ToString())+"_Postgres.sql\");";
						strBodyFuncion+="\r\n\t\t\t\tString sSelectQuery = new Scanner(inputStreamSql,Constantes2.S_UTF8).useDelimiter(Constantes2.S_DELIMITER).next();";
						
						if(!esParametroReemplazo) {
							strBodyFuncion+="\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_empresa()!= null && parametroGeneralUsuario.getid_empresa()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t"+sCommentEmpresaParametro+"sSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							
							columnEmpresa=GetColumnaFromNombreC(strIdEmpresaDB,tableSchema);
							
							String strPrefijoSqlParametroColumna=strPrefijoSqlParametro;		
							if(columnEmpresa!=null && !columnEmpresa.Name.Equals(strId)) {
								strPrefijoSqlParametroColumna=GetPrefijoSqlTableFromPropertiesC(columnEmpresa);
								
								if(!strPrefijoSqlParametroColumna.Equals(string.Empty)) {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroColumna+".";
								} else {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroOriginal;
								}
							}
							
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentEmpresaParametro+"sSqlWhere+=\" "+strPrefijoSqlParametroColumna+"id_empresa=\"+parametroGeneralUsuario.getid_empresa();";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentEmpresaParametro+"existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
							
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_sucursal()!= null && parametroGeneralUsuario.getid_sucursal()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t"+sCommentSucursalParametro+"sSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							
							columnSucursal=GetColumnaFromNombreC(strIdSucursalDB,tableSchema);
							
							strPrefijoSqlParametroColumna=strPrefijoSqlParametro;
							if(columnSucursal!=null && !columnSucursal.Name.Equals(strId)) {
								strPrefijoSqlParametroColumna=GetPrefijoSqlTableFromPropertiesC(columnSucursal);
								
								if(!strPrefijoSqlParametroColumna.Equals(string.Empty)) {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroColumna+".";
								} else {
									strPrefijoSqlParametroColumna=strPrefijoSqlParametroOriginal;
								}
							}
							
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentSucursalParametro+"sSqlWhere+=\" "+strPrefijoSqlParametroColumna+"id_sucursal=\"+parametroGeneralUsuario.getid_sucursal();";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentSucursalParametro+"existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						} else {
							if(tineEmpresaColumna) {
								strBodyFuncion+="\r\n\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(\""+strIdEmpresa.ToUpper()+"\", parametroGeneralUsuario.getid_empresa().toString());";
							}
							
							if(tineSucursalColumna) {
								strBodyFuncion+="\r\n\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(\""+strIdSucursal.ToUpper()+"\", parametroGeneralUsuario.getid_sucursal().toString());";
							}
						}
						
						
						/*
						if(tineEjercicioColumna) {
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_ejercicio()!= null && parametroGeneralUsuario.getid_ejercicio()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\tsSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\r\n\t\t\t\t\tsSqlWhere+=\" id_ejercicio=\"+parametroGeneralUsuario.getid_ejercicio();";
							strBodyFuncion+="\r\n\t\t\t\t\texisteWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						}
						
						if(tinePeriodoColumna) {
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_periodo()!= null && parametroGeneralUsuario.getid_periodo()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\tsSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\r\n\t\t\t\t\tsSqlWhere+=\" id_periodo=\"+parametroGeneralUsuario.getid_periodo();";
							strBodyFuncion+="\r\n\t\t\t\t\texisteWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						}
				
						if(tineUsuarioColumna) {
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_usuario()!= null && parametroGeneralUsuario.getid_usuario()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\tsSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\r\n\t\t\t\t\tsSqlWhere+=\" id_usuario=\"+parametroGeneralUsuario.getid_usuario();";
							strBodyFuncion+="\r\n\t\t\t\t\texisteWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						}
						*/
						
						
						if(tineUsuarioColumna) {
							sCommentSucursalParametro="";
						}
						
						strBodyFuncion+="\r\n\t\t\t\tME_SQLPARAMETROS";
						
						if(!esParametroReemplazo) {
							if(GetExisteWhereFromPropertiesC(tableSchema)) {
								sCommentExisteWhere="//";
							}
							
							strBodyFuncion+="\r\n\r\n\t\t\t\t"+sCommentExisteWhere+"if(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentExisteWhere+"sSqlWhere=\" where \"+sSqlWhere;";
							strBodyFuncion+="\r\n\t\t\t\t"+sCommentExisteWhere+"}";
							
							int intNumWheres=GetNumeroWheresTableFromPropertiesC(tableSchema);
							
							if(intNumWheres<=0) {
								strBodyFuncion+="\r\n\r\n\t\t\t\tif(sSelectQuery.contains(Constantes2.S_KEYWHERE)) {";
								strBodyFuncion+="\r\n\t\t\t\t\tsSql=sSelectQuery.replace(Constantes2.S_KEYWHERE,sSqlWhere);";
								strBodyFuncion+="\r\n\t\t\t\t} else {";
								strBodyFuncion+="\r\n\t\t\t\t\tsSql=sSelectQuery+sSqlWhere;";
								strBodyFuncion+="\r\n\t\t\t\t}";
							} else {
								strBodyFuncion+="\r\n";
								for(int i=1;i<=intNumWheres;i++) {
									strBodyFuncion+="\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(Constantes2.S_KEYWHERE+\""+i+"\",sSqlWhere);";
								}
								
								strBodyFuncion+="\r\n";
								strBodyFuncion+="\r\n\t\t\t\tsSql=sSelectQuery;";
							}
						} else {
							strBodyFuncion+="\r\n";
							strBodyFuncion+="\r\n\t\t\t\tsSql=sSelectQuery;";
						}
						
						strBodyFuncion+="\r\n\r\n\t\t\t\t//OBTENER EL ORDER BY DESDE FINALQUERY, DONDE PUEDE SER POR ID, POR DEFAUTL DESCRIPTION O FORMADO POR EL CLIENTE DINAMICAMENTE ";
						strBodyFuncion+="\r\n\t\t\t\tString sOrderBy=FuncionesSql.getOrderSqlFromFinalQuery(sFinalQuery,sSelectQuery);";
						strBodyFuncion+="\r\n\r\n\t\t\t\tsSql=sSql+sOrderBy;";
						strBodyFuncion+="\r\n\r\n\t\t\t\tsSql+=QueryWhereSelectParameters.getPaginationFinalQuery(pagination, connexion.getDbType());";
						
						strBodyFuncion+="\r\n\r\n\t\t\t\tif(Constantes.ISDEVELOPING) {";
						strBodyFuncion+="\r\n\t\t\t\t\tSystem.out.println(sSql);";
						strBodyFuncion+="\r\n\t\t\t\t}";
						
						strBodyFuncion+="\r\n\t\t\t}";
						strBodyFuncion+="\r\n\t\t}";
						strBodyFuncion+="\r\n\r\n\t\treturn sSql;";
						strBodyFuncion+="\r\n\t}";
						
						/*
						strBodyFuncion="\r\n\t\ttry {";
						strBodyFuncion+="\r\n\t\t\t"+GetNombreClaseC(tableSchema.ToString())+"Logic "+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic=new "+GetNombreClaseC(tableSchema.ToString())+"Logic();\r\n";
						
						strBodyFuncion+=strWithConnectionGetNew;
						
						strBodyFuncion+="\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic.setConnexion(this.connexion);\r\n";
						strBodyFuncion+="\r\n\t\t\tString sQuerySelect=\"\";";
						strBodyFuncion+="\r\n\t\t\tString sFinalQueryFinal=\"\";";
						
						strBodyFuncion+="\r\n\t\t\tsQuerySelect="+tableSchema.Owner+"Sql.GetSelecSql"+GetNombreClaseC(tableSchema.ToString())+"(this.connexionType,this.parameterDbType,sFinalQuery,pagination,parametroGeneralUsuario,moduloActual,ME_USO_VARIABLES);";
						
						strBodyFuncion+="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic.getEntities(sQuerySelect, sFinalQueryFinal);";
						strBodyFuncion+="\r\n\t\t\tthis."+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic.get"+GetNombreClaseC(tableSchema.ToString())+"s();";
						*/
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							/*
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setPagination(pagination);";	
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
							*/
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
						//strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClase(tableSchema.ToString())+"Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),\""+indexSchema.Name+"\",\"\",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());";
			
						//strEndBodyFuncion+="\r\n\r\n\t\t\t//"+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
						//ANTERIOR COMMIT
						//strEndBodyFuncion+="\r\n\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.commit();\r\n\t\t\t}";
						//strEndBodyFuncion+=strWithConnectionCommit;
						
						//ANTERIOR CLOSE
						//strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n";
						//strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						esParametroReemplazoColumn=GetEsParametroReporteReemplazoFromPropertiesC(memberColumnSchema.Column);	
							
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								} else {
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strParametersFuncion+=","+GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										strParametersNameFuncion+=","+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
									}	
									
									if(!memberColumnSchema.Column.Name.Equals(strId)) {
										strBodyParametrosFuncion+=GetParametroSql(memberColumnSchema.Column,esParametroReemplazo,esParametroReemplazoColumn);	
									}
									
								}
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
									
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
								else
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
									
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					//strBodyFuncion+="\r\n\t\t\t\tME_SQLPARAMETROS";
					
					strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion.Replace("ME_SQLPARAMETROS",strBodyParametrosFuncion)+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					//strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"").Replace(strWithConnectionClose,"");
					
					strFunctions=strFunctions.Replace("ME_USO_VARIABLES",strParametersNameFuncion);
					
					strInitFuncion+=strFunctions;
				}
			}
			
								
			return strInitFuncion; 
		}

public String GetIndicesLogicAdditionalReportesTablasClases(TableSchema tableSchema) 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strBodyParametrosFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersFuncionUso="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			
			String strWithConnectionGetNew="\r\n\t\t\t//this.connexion=this.connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);this.connexion.begin();";
			String strWithConnectionCommit="\r\n\r\n\t\t\t//this.connexion.commit();";
			String strWithConnectionClose="\r\n\t\t\t//this.connexion.close();";
			
			bool blnEsReporteLocal= GetEsReporteFromPropertiesC(tableSchema);
			
			bool tineEmpresaColumna=false;
			bool tineSucursalColumna=false;
			bool tineEjercicioColumna=false;
			bool tinePeriodoColumna=false;
			bool tineUsuarioColumna=false;
			//bool tineModuloColumna=false;
			
			String sCommentEmpresaParametro="";
			String sCommentSucursalParametro="";
			String sCommentEjercicioParametro="";
			String sCommentPeriodoParametro="";
			String sCommentUsuarioParametro="";
			//String sCommentModuloParametro="";
			
			String sCommentExisteWhere="";
			//ESREPORTEPARAM
			
			String strParametroReporte="";
			
			if(blnEsReporteLocal) {
				strParametroReporte="ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";
			}
			
			String strPrefijoSqlParametro=GetPrefijoSqlTableFromPropertiesC(tableSchema);
	
			if(!strPrefijoSqlParametro.Equals(String.Empty)) {
				strPrefijoSqlParametro=strPrefijoSqlParametro+".";
			}
	
			bool esParametroReemplazo=GetEsParametroReporteReemplazoFromPropertiesC(tableSchema);
			bool esParametroReemplazoColumn=false;
			
			foreach(IndexSchema indexSchema in tableSchema.Indexes) {
				tineEmpresaColumna=false;
				tineSucursalColumna=false;
				tineEjercicioColumna=false;
				tinePeriodoColumna=false;
				tineUsuarioColumna=false;
				//tineModuloColumna=false;
			
				sCommentEmpresaParametro="//";
				sCommentSucursalParametro="//";
				sCommentEjercicioParametro="//";
				sCommentPeriodoParametro="//";
				sCommentUsuarioParametro="//";
				//sCommentModuloParametro="//";
						
				sCommentExisteWhere="";
				
				//PARAMETROS GLOBALES
				tineEmpresaColumna=ContieneColumna(tableSchema,strIdEmpresa,true);
				tineSucursalColumna=ContieneColumna(tableSchema,strIdSucursal,true);
				tineEjercicioColumna=ContieneColumna(tableSchema,strIdEjercicio,true);
				tinePeriodoColumna=ContieneColumna(tableSchema,strIdPeriodo,true);
				tineUsuarioColumna=ContieneColumna(tableSchema,strIdUsuario,true);
				
				if(tineEmpresaColumna) {
					sCommentEmpresaParametro="";
				}
				
				if(tineSucursalColumna) {
					sCommentSucursalParametro="";
				}
				
				
				if(!indexSchema.IsPrimaryKey)
				{
					if(!VerificarIndiceBusquedaTablaC(tableSchema,indexSchema.Name))
					{
						continue;
					}
					
					strParametersFuncion="";
					strParametersNameFuncion="";
					strBodyParametrosFuncion="";
					
					if(indexSchema.IsUnique)
					{
						
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(String sFinalQuery,";
							String sSufijoNombre=indexSchema.Name.Replace("Busqueda"+tableSchema.Name,"");
							
							strFunctionsWithConnection="\r\n\r\n\t@SuppressWarnings(\"resource\")";
							strFunctionsWithConnection+="\r\n\tpublic void "+"Busqueda"+GetNombreClaseC(tableSchema.ToString())+sSufijoNombre+"(Connexion connexion,ConnexionType connexionType,ParameterDbType parameterDbType,String sFinalQuery,Pagination pagination,ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";//+strParametroReporte;
						
						}
						else
						{
							
						}
						//ANTERIOR NEW
						
						
						strBodyFuncion="\r\n\t\tString sSql=\"\";";
						strBodyFuncion+="\r\n\t\tString sSqlWhere=\"\";";
						strBodyFuncion+="\r\n\t\tBoolean existeWhere=false;";
						strBodyFuncion+="\r\n\r\n\t\t//this.connexion=this.connexion.getNewConnexion(connexionType,parameterDbType,this.entityManagerFactory);this.connexion.begin();";
						strBodyFuncion+="\r\n\r\n\t\ttry {";
						
						if(GetExisteWhereFromPropertiesC(tableSchema)) {
							strBodyFuncion+="\r\n\t\t//SQL CON PARTE WHERE INCLUIDO";
							strBodyFuncion+="\r\n\t\texisteWhere=true;";
						}						
						
						strBodyFuncion+="\r\n\r\n\t\tif(connexionType.equals(ConnexionType.HIBERNATE)) {";
							
							
						strBodyFuncion+="\r\n\r\n\t\t} else if(connexionType.equals(ConnexionType.JDBC32)) {";
						strBodyFuncion+="\r\n\t\t\tif(parameterDbType.equals(ParameterDbType.MYSQL)) {";
								
						strBodyFuncion+="\r\n\r\n\t\t\t} else if(parameterDbType.equals(ParameterDbType.POSTGRES)) {";
						
						
						strBodyFuncion+="\r\n\t\t\t\tInputStream inputStreamSql = AuxiliarGeneral.class.getResourceAsStream(\""+GetNombreClaseC(tableSchema.ToString())+"_Postgres.sql\");";
						strBodyFuncion+="\r\n\t\t\t\tString sSelectQuery = new Scanner(inputStreamSql,Constantes2.S_UTF8).useDelimiter(Constantes2.S_DELIMITER).next();";
						
						if(!esParametroReemplazo) {
							strBodyFuncion+="\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_empresa()!= null && parametroGeneralUsuario.getid_empresa()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t"+sCommentEmpresaParametro+"sSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentEmpresaParametro+"sSqlWhere+=\" "+strPrefijoSqlParametro+"id_empresa=\"+parametroGeneralUsuario.getid_empresa();";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentEmpresaParametro+"existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
							
							strBodyFuncion+="\r\n\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getid_sucursal()!= null && parametroGeneralUsuario.getid_sucursal()>0) {";
							strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t\t"+sCommentSucursalParametro+"sSqlWhere+=\" and\";";
							strBodyFuncion+="\r\n\t\t\t\t\t}";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentSucursalParametro+"sSqlWhere+=\" "+strPrefijoSqlParametro+"id_sucursal=\"+parametroGeneralUsuario.getid_sucursal();";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentSucursalParametro+"existeWhere=true;";
							strBodyFuncion+="\r\n\t\t\t\t}";
						} else {
							if(tineEmpresaColumna) {
								strBodyFuncion+="\r\n\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(\""+strIdEmpresa.ToUpper()+"\", parametroGeneralUsuario.getid_empresa().toString());";
							}
							
							if(tineSucursalColumna) {
								strBodyFuncion+="\r\n\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(\""+strIdSucursal.ToUpper()+"\", parametroGeneralUsuario.getid_sucursal().toString());";
							}
						}					
						
						if(tineUsuarioColumna) {
							sCommentSucursalParametro="";
						}
						
						strBodyFuncion+="\r\n\t\t\t\tME_SQLPARAMETROS";
						
						
						if(!esParametroReemplazo) {
							if(GetExisteWhereFromPropertiesC(tableSchema)) {
								sCommentExisteWhere="//";
							}
							
							strBodyFuncion+="\r\n\r\n\t\t\t\t"+sCommentExisteWhere+"if(existeWhere) {";
							strBodyFuncion+="\r\n\t\t\t\t\t"+sCommentExisteWhere+"sSqlWhere=\" where \"+sSqlWhere;";
							strBodyFuncion+="\r\n\t\t\t\t"+sCommentExisteWhere+"}";
							
							int intNumWheres=GetNumeroWheresTableFromPropertiesC(tableSchema);
							
							if(intNumWheres<=0) {
								strBodyFuncion+="\r\n\r\n\t\t\t\tif(sSelectQuery.contains(Constantes2.S_KEYWHERE)) {";
								strBodyFuncion+="\r\n\t\t\t\t\tsSql=sSelectQuery.replace(Constantes2.S_KEYWHERE,sSqlWhere);";
								strBodyFuncion+="\r\n\t\t\t\t} else {";
								strBodyFuncion+="\r\n\t\t\t\t\tsSql=sSelectQuery+sSqlWhere;";
								strBodyFuncion+="\r\n\t\t\t\t}";
							} else {
								strBodyFuncion+="\r\n";
								for(int i=1;i<=intNumWheres;i++) {
									strBodyFuncion+="\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(Constantes2.S_KEYWHERE+\""+i+"\",sSqlWhere);";
								}
								
								strBodyFuncion+="\r\n";
								strBodyFuncion+="\r\n\t\t\t\tsSql=sSelectQuery;";
							}
						} else {
							strBodyFuncion+="\r\n";
							strBodyFuncion+="\r\n\t\t\t\tsSql=sSelectQuery;";
						}
						
						strBodyFuncion+="\r\n\r\n\t\t\t\t//OBTENER EL ORDER BY DESDE FINALQUERY, DONDE PUEDE SER POR ID, POR DEFAUTL DESCRIPTION O FORMADO POR EL CLIENTE DINAMICAMENTE ";
						strBodyFuncion+="\r\n\t\t\t\tString sOrderBy=FuncionesSql.getOrderSqlFromFinalQuery(sFinalQuery,sSelectQuery);";
						strBodyFuncion+="\r\n\r\n\t\t\t\tsSql=sSql+sOrderBy;";
						strBodyFuncion+="\r\n\r\n\t\t\t\tsSql+=QueryWhereSelectParameters.getPaginationFinalQuery(pagination, connexion.getDbType());";
						
						strBodyFuncion+="\r\n\r\n\t\t\t\tif(Constantes.ISDEVELOPING) {";
						strBodyFuncion+="\r\n\t\t\t\t\tSystem.out.println(sSql);";
						strBodyFuncion+="\r\n\t\t\t\t}";
						
						strBodyFuncion+="\r\n\r\n\t\t\t\tthis.getEntities(sSelectQuery, \"\");";
						
						strBodyFuncion+="\r\n\t\t\t}";
						strBodyFuncion+="\r\n\t\t}";
						//strBodyFuncion+="\r\n\r\n\t\treturn sSql;";
						
						strBodyFuncion+="\r\n\r\n\t\t\t//this.connexion.commit();";			
						strBodyFuncion+="\r\n\r\n\t\t} catch(Exception e) {";
						strBodyFuncion+="\r\n\t\t\t//this.connexion.rollback();";
						strBodyFuncion+="\r\n\t\t\tthrow e;";						
						strBodyFuncion+="\r\n\r\n\t\t} finally {";
						strBodyFuncion+="\r\n\t\t\t//this.connexion.close();";
						strBodyFuncion+="\r\n\t\t}";
					
						strBodyFuncion+="\r\n\t}";
						
					
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
					
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						esParametroReemplazoColumn=GetEsParametroReporteReemplazoFromPropertiesC(memberColumnSchema.Column);	
							
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								} else {
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strParametersFuncion+=","+GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										strParametersNameFuncion+=","+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
									}	
									
									if(!memberColumnSchema.Column.Name.Equals(strId)) {
										strBodyParametrosFuncion+=GetParametroSql(memberColumnSchema.Column,esParametroReemplazo,esParametroReemplazoColumn);	
									}
									
								}
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
									
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
								else
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
									
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					//strBodyFuncion+="\r\n\t\t\t\tME_SQLPARAMETROS";
					
					strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion.Replace("ME_SQLPARAMETROS",strBodyParametrosFuncion)+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					//strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"").Replace(strWithConnectionClose,"");
					
					strFunctions=strFunctions.Replace("ME_USO_VARIABLES",strParametersNameFuncion);
											
					
					strInitFuncion+=strFunctions;
				}
			}
			
								
			return strInitFuncion; 
		}
		
public String GetParametroSql(ColumnSchema columnSchema,bool esParametroReemplazo,bool esParametroReemplazoColumn) {
	String strAnd=" and ";
	String strIgual=" = ";
	String strSqlWhere="";
	String strNombreColumnaSqlParametro="";
	String strPrefijoSqlParametro=GetPrefijoSqlTableFromPropertiesC(columnSchema.Table);
	String strPrefijoSqlParametroColumna=GetPrefijoSqlTableFromPropertiesC(columnSchema);
	bool esCampoCadena=false;
	String strNoCadenaVacio="";
	String strCadenaInicio="'";
	String strCadenaFin="'";
	
	if(!strPrefijoSqlParametroColumna.Equals(String.Empty)) {
		strPrefijoSqlParametro=strPrefijoSqlParametroColumna;
	}
	
	String strComillaSimpleInicio="";
	String strComillaSimpleFin="";
	
	String strFuncionStringInicio="";
	String strFuncionStringFin="";
	
	if(EsDateColumn(columnSchema) || EsDateTimeColumn(columnSchema) || EsTimeColumn(columnSchema)){
		strComillaSimpleInicio="\"'\"+";
		strComillaSimpleFin="+\"'\"";
		
		strFuncionStringInicio="Funciones2.getStringPostgresDate(";
		strFuncionStringFin=")";
	} else {
		if(!EsVarCharColumn(columnSchema) && !EsCharColumn(columnSchema)) {
			strFuncionStringFin=".toString()";			
		} else {
			strComillaSimpleInicio="\"'\"+";
			strComillaSimpleFin="+\"'\"";
			esCampoCadena=true;
		}
	}
	
	if(!strPrefijoSqlParametro.Equals(String.Empty)) {
		strPrefijoSqlParametro=strPrefijoSqlParametro+".";
	}
	
	bool esDesde=false;
	bool esHasta=false;
	
	//ESTAS SON VARIABLES GLOBALES
	if(columnSchema.Name.Equals(strIdEmpresa) || columnSchema.Name.Equals(strIdSucursal)) {
		return "";
	}
	
	String strBodyFuncion="";
	String strParametro=GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema);
	String strParametroSql=GetNombreColumnFromPropertiesInterno(columnSchema,true);
	
	//if(strParametroSql.EndsWith(strDesde) || strParametroSql.EndsWith(strInicio)) {
	if(TieneDesde(columnSchema,true)) {
		esDesde=true;
	}
	
	//if(strParametroSql.EndsWith(strHasta) || strParametroSql.EndsWith(strFin)) {
	if(TieneDesde(columnSchema,false)) {
		esHasta=true;
	}
	
	if(esDesde) {
		strIgual=" between ";
		strParametroSql=strParametroSql.Replace(strDesde,"").Replace(strInicio,"");
	} else {
		if(esHasta) {
			strParametroSql=strParametroSql.Replace(strHasta,"").Replace(strFin,"");
		}
	}
	
	//SI NO UTILIZA LA TECNICA NOMBRE DE PARAMETRO REEMPLAZO POR VALOR
	bool tieneDesdeTabla=TieneDesde(columnSchema.Table,true);
	bool tieneHastaTabla=TieneDesde(columnSchema.Table,false);
		
	if(!esParametroReemplazo && !esParametroReemplazoColumn) {
		if(esCampoCadena) {
			strNoCadenaVacio=" && !"+strParametro+".equals(\"\")";
		}
		
		strBodyFuncion+="\r\n\r\n\t\t\t\tif("+strParametro+"!= null"+strNoCadenaVacio+") {";
		strBodyFuncion+="\r\n\t\t\t\t\tif(existeWhere) {sSqlWhere+=\" and \";}";
		//strBodyFuncion+="\r\n\t\t\t\t\t\t";
		//strBodyFuncion+="\r\n\t\t\t\t\t";
		
		strSqlWhere=GetSqlWhereColumnFromPropertiesC(columnSchema);
		
		if(!tieneDesdeTabla && !tieneHastaTabla) {
			if(strSqlWhere.Equals(string.Empty)) {
				strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
			} else {
				strNombreColumnaSqlParametro=strSqlWhere;
			}			
			
			strBodyFuncion+="\r\n\t\t\t\t\tsSqlWhere+=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+strIgual+"\"+"+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
		} else {
			if(!esHasta) {
				if(tieneHastaTabla) {					
					if(strSqlWhere.Equals(string.Empty)) {
						strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
					} else {
						strNombreColumnaSqlParametro=strSqlWhere;
					}
			
					strBodyFuncion+="\r\n\t\t\t\t\tsSqlWhere+=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+strIgual+"\"+"+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				} else {
					//MAYOR_IGUAL					
					if(strSqlWhere.Equals(string.Empty)) {
						strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
					} else {
						strNombreColumnaSqlParametro=strSqlWhere;
					}
					
					strBodyFuncion+="\r\n\t\t\t\t\tsSqlWhere+=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+">="+"\"+"+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				}
			} else {
				if(tieneDesdeTabla) {
					strBodyFuncion+="\r\n\t\t\t\t\tsSqlWhere+="+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				} else {
					//MENOR_IGUAL					
					if(strSqlWhere.Equals(string.Empty)) {
						strNombreColumnaSqlParametro=strPrefijoSqlParametro+strParametroSql;
					} else {
						strNombreColumnaSqlParametro=strSqlWhere;
					}
					
					strBodyFuncion+="\r\n\t\t\t\t\tsSqlWhere+=\" "+strNombreColumnaSqlParametro/*strPrefijoSqlParametro+strParametroSql*/+""+"<="+"\"+"+strComillaSimpleInicio+strFuncionStringInicio+strParametro+strFuncionStringFin+strComillaSimpleFin+";";
				}
			}
		}
		
		strBodyFuncion+="\r\n\t\t\t\t\texisteWhere=true;";
		strBodyFuncion+="\r\n\t\t\t\t}";	
	} else {
		String strSufijoAux="";
		
		if(esDesde && tieneHastaTabla) {
			if(!strParametro.ToUpper().Contains("_DESDE")) {
				strSufijoAux="_DESDE";
			}
			
			
		}
		
		strBodyFuncion+="\r\n\r\n\t\t\t\tsSelectQuery=sSelectQuery.replace(\""+strParametro.ToUpper()+strSufijoAux+"\", "+strFuncionStringInicio+strParametro+strFuncionStringFin+");";
	}
	
	return strBodyFuncion;
}

public bool TieneDesde(TableSchema tableSchema,bool esTieneDesde) {
	bool tiene=false;
	String strParametroSql="";
	
	foreach(ColumnSchema columnSchema in tableSchema.Columns) {
		strParametroSql=GetNombreColumnFromPropertiesInterno(columnSchema,true);
		
		if(esTieneDesde) {
			//if(strParametroSql.EndsWith(strDesde) || strParametroSql.EndsWith(strInicio)) {
			if(TieneDesde(columnSchema,esTieneDesde)) {
				tiene=true;
				break;
			}
		} else {
			//if(strParametroSql.EndsWith(strHasta) || strParametroSql.EndsWith(strFin)) {
			if(TieneDesde(columnSchema,esTieneDesde)) {
				tiene=true;
				break;
			}
		}
	}
	
	return tiene;
}

public bool TieneDesde(ColumnSchema columnSchema,bool esTieneDesde) {
	bool tiene=false;
	String strParametroSql="";
	
		strParametroSql=GetNombreColumnFromPropertiesInterno(columnSchema,true);
		
		if(esTieneDesde) {
			if(strParametroSql.EndsWith(strDesde) || strParametroSql.EndsWith(strInicio)) {
				tiene=true;
				return tiene;
			} else {
				if(columnSchema.Name.EndsWith(strDesdeNombre) || columnSchema.Name.EndsWith(strInicioNombre)) {
					tiene=true;
					return tiene;
				}
			}
		} else {
			if(strParametroSql.EndsWith(strHasta) || strParametroSql.EndsWith(strFin)) {
				tiene=true;
				return tiene;
			} else {
				if(columnSchema.Name.EndsWith(strHastaNombre) || columnSchema.Name.EndsWith(strFinNombre)) {
					tiene=true;
					return tiene;
				} 
			}
		}
	
	
	return tiene;
}

public String GetIndicesTablasClases(TableSchema tableSchema) 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersFuncionUso="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			String strAuxPrefijoAdditional="";
			
			String strWithConnectionGetNew="\r\n\t\t\tthis.connexion=this.connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);this.connexion.begin();";
			String strWithConnectionCommit="\r\n\r\n\t\t\tthis.connexion.commit();";
			String strWithConnectionClose="\r\n\t\t\tthis.connexion.close();";
			String strWithConnectionRollBack="\r\n\t\t\tthis.connexion.rollback();";
			
			bool blnEsReporteLocal= GetEsReporteFromPropertiesC(tableSchema);
			bool blnEsProcesoLocal= GetEsProcesoFromPropertiesC(tableSchema);
			bool blnEsReporteAdditional=false;
			
			String strParametroReporte="";
			String strCommentAdditional="";
			String strCommentProceso="";
			
			if(blnEsProcesoLocal) {
				strCommentProceso="//";
			}
			
			if(blnEsReporteLocal) {
				strParametroReporte="ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,Opcion opcionActual,Usuario usuarioActual,";
			}
			
			foreach(IndexSchema indexSchema in tableSchema.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					//strCommentAdditional="";
					
					if(!VerificarIndiceBusquedaTablaC(tableSchema,indexSchema.Name))
					{
						continue;
					}
					
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(";
							strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"WithConnection(";
							//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(true,";
							//strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"(";
							//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+indexSchema.Name+"Internal(isConConnexion,";							
						strBodyFuncion="\r\n\t\ttry {"+strWithConnectionGetNew+"\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
						strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
						strEndBodyFuncion+=strWithConnectionCommit;
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(String sFinalQuery,";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"WithConnection(String sFinalQuery,Pagination pagination,"+strParametroReporte;
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,sFinalQuery,";
								//strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"(String sFinalQuery,Pagination pagination,"+strParametroReporte;
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,sFinalQuery,";
							
						}
						else
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"WithConnection(";
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(true,";
								strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"(";
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(tableSchema.ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,";
							
						}
						//ANTERIOR NEW
						//strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();\r\n\t\t\t}\r\n";
						
						
						strBodyFuncion="\r\n\t\ttry {";
						
						blnEsReporteAdditional=GetEsReporteAdditionalFromPropertiesC(tableSchema);
						
						if(blnEsReporteAdditional) {
							strAuxPrefijoAdditional=strPrefijoAdditional;
							//strCommentAdditional="//";
						}
						
						strWithConnectionGetNew="\r\n\t\t\t"+strCommentAdditional+"this.connexion=this.connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);this.connexion.begin();";
						strWithConnectionCommit="\r\n\r\n\t\t\t"+strCommentAdditional+"this.connexion.commit();";
						strWithConnectionClose="\r\n\t\t\t"+strCommentAdditional+"this.connexion.close();";
						strWithConnectionRollBack="\r\n\t\t\t"+strCommentAdditional+"this.connexion.rollback();";
		
						strBodyFuncion+="\r\n\t\t\t"+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+" "+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+"=new "+GetNombreClaseC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+"();\r\n";
						
						strBodyFuncion+=strWithConnectionGetNew;
						
						strBodyFuncion+="\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+".setConnexion(this.connexion);"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+".setConnexionType(this.connexionType);"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+".setParameterDbType(this.parameterDbType);"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+".setEntityManagerFactory(this.entityManagerFactory);\r\n";
						
						String sSufijoNombre=indexSchema.Name.Replace("Busqueda"+tableSchema.Name,"");
							
						
						if(!blnEsReporteAdditional) {							
							strBodyFuncion+="\r\n\t\t\tString sQuerySelect=\"\";";
							strBodyFuncion+="\r\n\t\t\tString sFinalQueryFinal=\"\";";
							
								
							strBodyFuncion+="\r\n\t\t\t"+strCommentProceso+"sQuerySelect="+tableSchema.Owner+"SqlReporte.GetSelecSql"+GetNombreClaseC(tableSchema.ToString())+sSufijoNombre+"(this.connexion,this.connexionType,this.parameterDbType,sFinalQuery,pagination,parametroGeneralUsuario,moduloActual,opcionActual,usuarioActual,ME_USO_VARIABLES);";
							
							strBodyFuncion+="\r\n\r\n\t\t\t"+strCommentProceso+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic.getEntities(sQuerySelect, sFinalQueryFinal);";
						} else {
							strBodyFuncion+="\r\n\t\t\t"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strPrefijoAdditional+".Busqueda"+GetNombreClaseC(tableSchema.ToString())+sSufijoNombre+"(this.connexion,this.connexionType,this.parameterDbType,sFinalQuery,pagination,parametroGeneralUsuario,moduloActual,opcionActual,usuarioActual,ME_USO_VARIABLES);";							
						}
						
						strBodyFuncion+="\r\n\r\n\t\t\t"+strCommentProceso+"this."+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+".get"+GetNombreClaseC(tableSchema.ToString())+"s();";
						
						if(blnEsProcesoLocal) {
							strBodyFuncion+="\r\n\r\n\t\t\tGeneralEntityReturnGeneral generalEntityReturnGeneral=new GeneralEntityReturnGeneral();";		
							strBodyFuncion+="\r\n\r\n\t\t\tgeneralEntityReturnGeneral="+GetNombreClaseC(tableSchema.ToString())+"LogicAdditional.ProcesarInformacion"+GetNombreClaseC(tableSchema.ToString())+"(parametroGeneralUsuario,moduloActual,opcionActual,usuarioActual,"+GetNombreClaseObjetoC(tableSchema.ToString())+"Logic"+strAuxPrefijoAdditional+",this."+GetNombreClaseObjetoC(tableSchema.ToString())+"s,new GeneralEntityParameterGeneral(),generalEntityReturnGeneral,\""+indexSchema.Name+"\",ME_USO_VARIABLES);";
						}
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							/*
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setPagination(pagination);";	
							strBodyFuncion+="\r\n\t\t\t//queryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
							*/
						}
						else
						{
							strBodyFuncion+="\r\n\t\t\t//QueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
						//strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClase(tableSchema.ToString())+"Logic.registrarAuditoria(this.connexion,datosCliente.getIdUsuario(),\""+indexSchema.Name+"\",\"\",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());";
			
						//strEndBodyFuncion+="\r\n\r\n\t\t\t//"+GetNombreClaseObjetoC(tableSchema.ToString())+"s="+GetNombreClaseObjetoC(tableSchema.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
						//ANTERIOR COMMIT
						//strEndBodyFuncion+="\r\n\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.commit();\r\n\t\t\t}";
						strEndBodyFuncion+=strWithConnectionCommit;
						
						//ANTERIOR CLOSE
						//strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n";
						strEndFuncion="\r\n\t\t} catch(Exception e) {"+strWithConnectionRollBack+"\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					bool esRanges=false;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								esRanges=true;
							} else {
								esRanges=false;
							}
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								} else {
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strParametersFuncion+=","+GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										strParametersNameFuncion+=","+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
									}	
								}
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
									
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
								else
								{
									//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
									
									//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
									if(esRanges) {
										//strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
									}
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					//strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
					strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"").Replace(strWithConnectionClose,"");
					
					strFunctions=strFunctions.Replace("ME_USO_VARIABLES",strParametersNameFuncion);
					
					strInitFuncion+=strFunctions;
				}
			}
			
								
			return strInitFuncion; 
		}
		
		
public bool ValidacionCampoTotalizar(ColumnSchema column) {
	bool validado=ValidacionCampoTotalizarC(column);
	
	return validado;
}

public string GetTotalVariableTotalClase(ColumnSchema column) {		
	if((column.Name==strId && !column.IsForeignKeyMember)||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)	{
		//Trace.WriteLine(column.Name);
			
		return "";
	}
	
	string strNombre = "";
	
	if(ValidacionCampoTotalizar(column)) {
		strNombre = ""+GetNombreColumnaClaseC(column)+"Total+="+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreColumnaClaseC(column)+"();";
	}
	
	return strNombre;
}

public string GetSetVariableTotalClase(ColumnSchema column) {		
	if( column.Name==strId && !column.IsForeignKeyMember
		||column.Name==strIsActive||column.Name==strIsExpired
		||column.Name==strVersionRow)	{
		//Trace.WriteLine(column.Name);
			
		return "";
	}
	string strNombre ="";
	
	if(ValidacionCampoTotalizar(column)) {
		strNombre="\r\n\t\tdatoGeneral=new DatoGeneral();";
				
		strNombre+="\r\n\t\tdatoGeneral.setsCodigo("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+");";
		strNombre+="\r\n\t\tdatoGeneral.setsDescripcion("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+");";
		strNombre+="\r\n\t\tdatoGeneral.setdValorDouble("+GetNombreColumnaClaseC(column)+"Total);";
		strNombre+="\r\n\t\tarrTotalesDatoGeneral.add(datoGeneral);";
	}
	
	return strNombre;
}

public string GetVariableTotalClase(ColumnSchema column) {		
	if((column.Name==strId && !column.IsForeignKeyMember)||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)	{
		//Trace.WriteLine(column.Name);
			
		return "";
	}
	
	string strNombre = "";
	
	if(ValidacionCampoTotalizar(column)) {
		strNombre = "Double "+GetNombreColumnaClaseC(column)+"Total=0.0;";
	}
	
	return strNombre;
}

public string GetTiposColumnsSeleccionarTodos()
	{		
		string strVariables="";
		string strElse=" else ";
		string strTabsBase="\t\t\t\t\t";
		string strSufijoVariables="";
		bool esPrimero=true;
		string strCommentEjb="";
		
		string strIfFkIni="";
		string strIfFkFin="";
		string strTabFk="";
		
		//System.Windows.Forms.MessageBox.Show("here");
		foreach(ColumnSchema column in TablaBase.Columns) {
			if(/*column.IsForeignKeyMember || */column.Name==strId ||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow) {
				continue;	
			}
			
			//CUANDO SON CATALOGOS SIMPLES NO SE NECESITA CAMBIAR TODAS LAS COLUMNAS
			//SE QUITA CAMPO PARA QUITAR TODOS, PERO SI VALDRIA PARA REPORTES DINAMICOS
			/*
			if(!blnConMaxCodigo && !blnConAdditional && !EsBitColumn(column)) {
				continue;	
			}
			*/
			
			strElse="";
			
			strIfFkIni="";
			strIfFkFin="";
			strTabFk="";
		
			if(column.IsForeignKeyMember) {
				strIfFkIni="\r\n\t\tif(conFk) {";
				strIfFkFin="\r\n\t\t}\r\n";				
				strTabFk="\t";
				
			} else if(EsStringColumnC(column)) {
				strIfFkIni="\r\n\t\tif(conStringColumn) {";
				strIfFkFin="\r\n\t\t}\r\n";				
				strTabFk="\t";
			
			} else if(EsTipoColumnaNumeroParaClaseC(column)) {
				strIfFkIni="\r\n\t\tif(conValorColumn) {";
				strIfFkFin="\r\n\t\t}\r\n";				
				strTabFk="\t";
			
			} else if(EsDateColumn(column)) {
				strIfFkIni="\r\n\t\tif(conFechaColumn) {";
				strIfFkFin="\r\n\t\t}\r\n";				
				strTabFk="\t";
				
			} else if(EsBitColumn(column)) {
				strIfFkIni="\r\n\t\tif(conBitColumn) {";
				strIfFkFin="\r\n\t\t}\r\n";				
				strTabFk="\t";
			}
			
			strVariables+=strIfFkIni;
			
			strVariables+="\r\n\t\t"+strTabFk+"reporte=new Reporte();";
			strVariables+="\r\n\t\t"+strTabFk+"reporte.setsCodigo("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+");";
			strVariables+="\r\n\t\t"+strTabFk+"reporte.setsDescripcion("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+");";			
			strVariables+="\r\n\r\n\t\t"+strTabFk+"arrTiposSeleccionarTodos.add(reporte);";						
		
			strVariables+=strIfFkFin;
			
			if(esPrimero) {
				esPrimero=false;
			}
		}
		
		return strVariables;
	}

public string GetTodosTiposColumnas(bool paraOrdeBy)
	{		
		string strVariables="";
		string strElse=" else ";
		string strTabsBase="\t\t\t\t\t";
		string strSufijoVariables="";
		bool esPrimero=true;
		string strCommentEjb="";
		
		
		//System.Windows.Forms.MessageBox.Show("here");
		foreach(ColumnSchema column in TablaBase.Columns) {
			if(blnEstablaModulo ||  blnEsProceso) {
				continue;
			}
			
			if(blnEsReporte) {
				if(GetEsReporteParametroFromPropertiesC(column)) {
					continue;
				}
			}
			
			//if(column.IsForeignKeyMember || column.Name==strId ||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow) {
			//continue;	
			//}
			
			//CUANDO SON CATALOGOS SIMPLES NO SE NECESITA CAMBIAR TODAS LAS COLUMNAS
			/*
			if(!blnConMaxCodigo && !blnConAdditional && !EsBitColumn(column)) {
				continue;	
			}
			*/
			
			
			strElse="";
			
			if(!paraOrdeBy) {
				strVariables+="\r\n\r\n\t\tsTipoColumna=new String();";
				strVariables+="\r\n\t\tsTipoColumna="+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+";";
				//strVariables+="\r\n\t\treporte.setsDescripcion("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+");";			
				
				strVariables+="\r\n\t\tarrTiposColumnas.add(sTipoColumna);";						
			} else {
				strVariables+="\r\n\r\n\t\torderBy=new OrderBy(false,"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+", "+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+",false,\""+GetPrefijoSqlTableFromPropertiesC(column)+"\");";
				//strVariables+="\r\n\t\tsTipoColumna="+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+";";
				
				
				strVariables+="\r\n\t\tarrOrderBy.add(orderBy);";
			}
			
			if(esPrimero) {
				esPrimero=false;
			}
		}
		
		return strVariables;
	}
	
public  String GetSetFinalQueryVariablesGlobales()
{
	String sVariablesArray="";
	String strComentarioParaEjb="";
	strComentarioParaEjb+="";
		
	/*
	if(ConEjb){
		strComentarioParaEjb="//";
	}
	*/
	
	if(!blnNoStandardTableFromProperties) {
		foreach(ColumnSchema column in TablaBase.Columns)
		{
			if(column.IsForeignKeyMember)
			{
				String sPrefijo=GetPrefijoTipoC(column);	
				String sColumna=GetNombreColumnaClaseC(column);	
				
				if(EsColumnaVariableGlobalDataBaseFromPropertiesC(column,true,false) || EsColumnaVariableModuloGlobalC(column,true,false)) {					
					sVariablesArray+="\r\n\r\n\t\tnoExiste=false;";
					sVariablesArray+="\r\n\t\tfor(String sColumnaGlobalNo:arrColumnasGlobalesNo) {";
					sVariablesArray+="\r\n\t\t\tif(sColumnaGlobalNo.equals("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+")) {";
					sVariablesArray+="\r\n\t\t\t\tnoExiste=true;";
					sVariablesArray+="\r\n\t\t\t}";
					sVariablesArray+="\r\n\t\t}";
					
					sVariablesArray+="\r\n\r\n\t\tif(!noExiste) {";
					sVariablesArray+="\r\n\t\t\tarrColumnasGlobales.add("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+");";
					sVariablesArray+="\r\n\t\t}";
				}
				
				/*
				sVariablesArray+="\t{\r\n";
				sVariablesArray+="\t\ttry\r\n\t\t{\r\n";
				
				sVariablesArray+="\t\t\t"+GetNombreClaseRelacionadaFromColumn(column)+"  "+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Temp=null;\r\n\r\n";
				
				sVariablesArray+="\t\t\tfor("+GetNombreClaseRelacionadaFromColumn(column)+" "+ GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Aux:"+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"s"+strForeignKey+") {\r\n";
				sVariablesArray+="\t\t\t\tif("+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Aux.get"+ strIdGetSet+"().equals("+ strId+GetNombreClaseRelacionadaFromColumn(column)+"Seleccionado)) {\r\n";
				sVariablesArray+="\t\t\t\t\t"+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Temp="+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Aux;\r\n";
				sVariablesArray+="\t\t\t\t}\r\n";
				sVariablesArray+="\t\t\t}\r\n\r\n";
				
				sVariablesArray+="\t\t\tjComboBox"+strIdGetSet+GetNombreClaseRelacionadaFromColumn(column)+GetNombreClaseC(TablaBase.ToString())+".setSelectedItem("+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Temp);\r\n\r\n";
				
				
				sVariablesArray+="\r\n\t\t}\r\n";
				sVariablesArray+="\t\tcatch(Exception e)\r\n";
				sVariablesArray+="\t\t{\r\n";
				sVariablesArray+="\t\t\tthrow e;\r\n";
				sVariablesArray+="\t\t}\r\n";
				sVariablesArray+="\t}\r\n";
				*/
			}	
		}
	} else {
		//UTILIZAR LA FORMA DETALLADA
		/*
		ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
		foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
			String sPrefijo="";//GetPrefijoTipoC(column);	
			String sColumna="";//GetNombreColumnaClaseC(column);	
	.
			sVariablesArray+="\r\n\t\t\tthis.setActual"+GetNombreClaseC(tableSchemaForeignKey.ToString())+strForeignKey+"(this."+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strField_+""+sPrefijo+sColumna+"());";
													
		}
		*/
		ArrayList arrayListForeignKeys =new ArrayList();
		String strParametersSetActualComboForeignKeys="";
		
		foreach(TableKeySchema tableKeySchema in TablaBase.ForeignKeys) {
				if(!ExisteTablaEnListaC(tableKeySchema.PrimaryKeyTable,arrayListForeignKeys)) {
					arrayListForeignKeys.Add(tableKeySchema.PrimaryKeyTable);
					//strParametersSetActualComboForeignKeys=GetSetParametersSetActualComboForeignKeys(tableKeySchema.ForeignKeyTable,tableKeySchema.ForeignKeyMemberColumns);
					
					sVariablesArray+="\r\n\t\t\tthis.setActual"+GetNombreClaseC(tableKeySchema.PrimaryKeyTable.ToString())+strForeignKey+"("+strParametersSetActualComboForeignKeys+");";
				}
			}
	}
	
	return sVariablesArray;
}

public  String GetSetFinalQueryVariablesGlobalesNo()
{
	String sVariablesArray="";
	String strComentarioParaEjb="";
	strComentarioParaEjb+="";
		
	/*
	if(ConEjb){
		strComentarioParaEjb="//";
	}
	*/
	
	if(!blnNoStandardTableFromProperties) {
		foreach(ColumnSchema column in TablaBase.Columns)
		{
			if(column.IsForeignKeyMember)
			{
				String sPrefijo=GetPrefijoTipoC(column);	
				String sColumna=GetNombreColumnaClaseC(column);	
				
				if(EsColumnaVariableGlobalDataBaseFromPropertiesC(column,false,true) || EsColumnaVariableModuloGlobalC(column,false,true)) {					
					sVariablesArray+="\r\n\t\tarrColumnasGlobales.add("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+");";
				}
				
				/*
				sVariablesArray+="\t{\r\n";
				sVariablesArray+="\t\ttry\r\n\t\t{\r\n";
				
				sVariablesArray+="\t\t\t"+GetNombreClaseRelacionadaFromColumn(column)+"  "+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Temp=null;\r\n\r\n";
				
				sVariablesArray+="\t\t\tfor("+GetNombreClaseRelacionadaFromColumn(column)+" "+ GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Aux:"+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"s"+strForeignKey+") {\r\n";
				sVariablesArray+="\t\t\t\tif("+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Aux.get"+ strIdGetSet+"().equals("+ strId+GetNombreClaseRelacionadaFromColumn(column)+"Seleccionado)) {\r\n";
				sVariablesArray+="\t\t\t\t\t"+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Temp="+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Aux;\r\n";
				sVariablesArray+="\t\t\t\t}\r\n";
				sVariablesArray+="\t\t\t}\r\n\r\n";
				
				sVariablesArray+="\t\t\tjComboBox"+strIdGetSet+GetNombreClaseRelacionadaFromColumn(column)+GetNombreClaseC(TablaBase.ToString())+".setSelectedItem("+GetNombreClaseRelacionadaFromColumn(column).ToLower()+"Temp);\r\n\r\n";
				
				
				sVariablesArray+="\r\n\t\t}\r\n";
				sVariablesArray+="\t\tcatch(Exception e)\r\n";
				sVariablesArray+="\t\t{\r\n";
				sVariablesArray+="\t\t\tthrow e;\r\n";
				sVariablesArray+="\t\t}\r\n";
				sVariablesArray+="\t}\r\n";
				*/
			}	
		}
	} else {
		//UTILIZAR LA FORMA DETALLADA
		/*
		ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
		foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
			String sPrefijo="";//GetPrefijoTipoC(column);	
			String sColumna="";//GetNombreColumnaClaseC(column);	
	.
			sVariablesArray+="\r\n\t\t\tthis.setActual"+GetNombreClaseC(tableSchemaForeignKey.ToString())+strForeignKey+"(this."+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strField_+""+sPrefijo+sColumna+"());";
													
		}
		*/
		ArrayList arrayListForeignKeys =new ArrayList();
		String strParametersSetActualComboForeignKeys="";
		
		foreach(TableKeySchema tableKeySchema in TablaBase.ForeignKeys) {
				if(!ExisteTablaEnListaC(tableKeySchema.PrimaryKeyTable,arrayListForeignKeys)) {
					arrayListForeignKeys.Add(tableKeySchema.PrimaryKeyTable);
					//strParametersSetActualComboForeignKeys=GetSetParametersSetActualComboForeignKeys(tableKeySchema.ForeignKeyTable,tableKeySchema.ForeignKeyMemberColumns);
					
					sVariablesArray+="\r\n\t\t\tthis.setActual"+GetNombreClaseC(tableKeySchema.PrimaryKeyTable.ToString())+strForeignKey+"("+strParametersSetActualComboForeignKeys+");";
				}
			}
	}
	
	return sVariablesArray;
}

public string GetQueryTablaValorCatalogoGeneral(TableSchema table) {
	ColumnSchema columnSchemaValorEncontrado=null;
	TableSchema tableSchemaFkLista=null;
	String strQuery="";
	bool blnTieneNombreColumnaLista=false;
	
	foreach (ColumnSchema columnSchemaValor in table.Columns){	
		if(columnSchemaValor.IsForeignKeyMember && columnSchemaValor.Name.Contains(strCatalogoGeneralLista)) {
			blnTieneNombreColumnaLista=true;					
			columnSchemaValorEncontrado=columnSchemaValor;
			break;
		}
	}
	
	if(blnTieneNombreColumnaLista) {
		strQuery="\r\n\t\tsQueryStringValoresLista=\" INNER JOIN ";	
		tableSchemaFkLista=GetTableSchemaFromColumnForeignKey(columnSchemaValorEncontrado);
		
		strQuery+=GetNombreClaseObjetoC(table.ToString())+".relationship_"+GetNombreClaseC(tableSchemaFkLista.ToString())+" "+GetNombreClaseObjetoC(tableSchemaFkLista.ToString())+" WHERE "+GetNombreClaseObjetoC(tableSchemaFkLista.ToString())+".field_sCodigo='\"+sCodigoLista"+GetNombreClaseC(TablaBase.ToString())+"+\"'\";";
	}				
	
	return strQuery;
}

public String GetIndicesTablasClasesReportes() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			String strFunctions=String.Empty;
			String strFunctionsWithConnection=String.Empty;
			String strFunctionsNoConnection=String.Empty;
			String strFunctionsBodyWithConnection=String.Empty;
			String strFunctionsBodyNoConnection=String.Empty;
			
			String strWithConnectionGetNew="\r\n\t\t\tthis.connexion=this.connexion.getNewConnexion();this.connexion.begin();";
			String strWithConnectionCommit="\r\n\r\n\t\t\tthis.connexion.commit();";
			String strWithConnectionClose="\r\n\t\t\tthis.connexion.close();";
			
			
			for(int i=0;i<TablasBaseForReporte.Count;i++)
			{
				foreach(IndexSchema indexSchema in TablasBaseForReporte[i].Indexes)
				{
					if(!indexSchema.IsPrimaryKey)
					{
						strParametersFuncion="";
						strParametersNameFuncion="";
					
						if(indexSchema.IsUnique)
						{
							//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+indexSchema.Name+"Internal(";
								strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+indexSchema.Name+"WithConnection(";
								//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+indexSchema.Name+"Internal(true,";
								strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+indexSchema.Name+"(";
								//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+indexSchema.Name+"Internal(isConConnexion,";							
							strBodyFuncion="\r\n\t\ttry {"+strWithConnectionGetNew+"\r\n";
							strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
							strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablasBaseForReporte[i].ToString())+"="+GetNombreClaseObjetoC(TablasBaseForReporte[i].ToString())+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
							strEndBodyFuncion+=strWithConnectionCommit;
							strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
						}
						else
						{
							
							if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
							{
								//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"Internal(String sFinalQuery,";
									strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"WithConnection(String sFinalQuery,Pagination pagination,";
									//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"Internal(true,sFinalQuery,";
									strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"(String sFinalQuery,Pagination pagination,";
									//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,sFinalQuery,";
								
							}
							else
							{
								//strInitFuncion+="\r\n\tprivate void "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"Internal(";
									strFunctionsWithConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"WithConnection(";
									//strFunctionsBodyWithConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"Internal(true,";
									strFunctionsNoConnection="\r\n\tpublic void "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"(";
									//strFunctionsBodyNoConnection="\r\n\t\tthis."+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"Internal(isConConnexion,";
								
							}
							//ANTERIOR NEW
							//strBodyFuncion="\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion=connexion.getNewConnexion();connexion.begin();\r\n\t\t\t}\r\n";
							strBodyFuncion="\r\n\t\ttry\r\n\t\t{"+strWithConnectionGetNew+"\r\n";
							
							if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
							{
								strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
								strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setPagination(pagination);";	
								strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
							}
							else
							{
								strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							}
							
							strEndBodyFuncion="\r\n\r\n\t\t\t//"+GetNombreClase(TablaBase.ToString())+"Logic.registrarAuditoria(datosCliente.getIdUsuario(),\""+indexSchema.Name+"\",\"\",queryWhereSelectParameters,datosCliente.getsUsuarioPC(),datosCliente.getsNamePC(),datosCliente.getsIPPC());";
				
							strEndBodyFuncion+="\r\n\r\n\t\t\t//"+GetNombreClaseObjetoC(TablaBase.ToString())+"s="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
							//ANTERIOR COMMIT
							//strEndBodyFuncion+="\r\n\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.commit();\r\n\t\t\t}";
							strEndBodyFuncion+=strWithConnectionCommit;
							
							//ANTERIOR CLOSE
							//strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tif(isConConnexion) {\r\n\t\t\tconnexion.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n";
							strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tFunciones.manageException(logger,e);\r\n\t\t\tthrow e;\r\n\t\t} finally {"+strWithConnectionClose+"\r\n\t\t}\r\n\t}\r\n";
							
						}	
						int count=1;	
						strParametersFuncion="";
						strParametersNameFuncion="";	
						strParameterSelection="";
						
						bool esUnico=false;
						bool esRanges=false;
						
						foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
						{
							
								if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
									esRanges=true;
								} else {
									esRanges=false;
								}
							
								if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
							
									if(indexSchema.IsUnique)
									{
										esUnico=true;
									} else {
										//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
										if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
											strParametersFuncion+=","+GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
											strParametersNameFuncion+=","+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
										}	
									}
								
									if(!count.Equals(indexSchema.MemberColumns.Count))
									{
										strParameterSelection+=GetParameterSelectionC(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
										
										if(esRanges) {
											strParameterSelection+=GetParameterSelectionC(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
										}
									}
									else
									{
										strParameterSelection+=GetParameterSelectionC(memberColumnSchema.Column,true,esUnico,false,false,esRanges,false);
										
										//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
										if(esRanges) {
											strParameterSelection+=GetParameterSelectionC(memberColumnSchema.Column,false,esUnico,false,false,esRanges,true);
										}
									}
								
									if(!indexSchema.MemberColumns.Count.Equals(count))
									{					
										strParametersFuncion+=",";
										strParametersNameFuncion+=",";	
									}
								}
								else
								{
									if(!indexSchema.Name.Contains("BusquedaRango"))
									{
										strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
										strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									}
									else
									{
										strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
										strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
										
										strParametersFuncion+=",";
										strParametersNameFuncion+=",";	
										
										strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
										strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
								
									}
									strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
									break;
								}
								
							count++;
						}
						
						//COMENTAR PERO MANTENER LOS PARAMETER SELECT
						strFunctionsWithConnection=strFunctionsWithConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+"/*"+strParameterSelection+"*/"+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyWithConnection+strParametersNameFuncion+");\r\n\t}\r\n";
						strFunctionsNoConnection=strFunctionsNoConnection+strParametersFuncion+")throws Exception {"+strBodyFuncion+"/*"+strParameterSelection+"*/"+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";//strFunctionsBodyNoConnection+strParametersNameFuncion+");\r\n\t}\r\n";
						strFunctions=strFunctionsWithConnection+strFunctionsNoConnection.Replace(strWithConnectionGetNew,"").Replace(strWithConnectionCommit,"").Replace(strWithConnectionClose,"");
						
						
						//strInitFuncion+=strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"";																																			
						
						//strInitFuncion=strFunctions+strInitFuncion;
						
						strInitFuncion+=strFunctions;
					}
				}
			}
								
			return strInitFuncion; 
		}
		
public String GetSufijoJSPFinalTable()
	{
		String strSufijoJSPFinalTable="";
			
		if(GetFinalJspVersionFromPropertiesC(TablaBase)) {
			strSufijoJSPFinalTable=strSufijoJSPJSFFinal;
		}
			
	return strSufijoJSPFinalTable;
	}
	
public String GetConAuditoriaValue()
	{
		bool blnConAuditoria=false;
		String strAuditoriaValue="";
		
		blnConAuditoria=GetConAuditoriaTableFromProperties(TablaBase);
		
		if(blnConAuditoria) {
			strAuditoriaValue="true";
		} else {
			strAuditoriaValue="false";
		}
		
		return strAuditoriaValue;
	}

public String GetConAuditoriaDetalleValue()
	{
		bool blnSinAuditoriaDetalle=false;
		String strAuditoriaDetalleValue="";
		
		blnSinAuditoriaDetalle=GetSinAuditoriaDetalleTableFromProperties(TablaBase);//GetConAuditoriaTableFromProperties(TablaBase);
		
		if(blnSinAuditoriaDetalle) {
			strAuditoriaDetalleValue="false";
		} else {
			strAuditoriaDetalleValue="true";
		}
		
		return strAuditoriaDetalleValue;
	}

public String GetEsGuardarRelaciones(){
		bool blnConAuditoria=false;
		String strAuditoriaValue="";
		
		blnConAuditoria=GetEsGuardarRelacionesFromPropertiesC(TablaBase);
		
		if(blnConAuditoria) {
			strAuditoriaValue="true";
		} else {
			strAuditoriaValue="false";
		}
		
		return strAuditoriaValue;
	}
	
public  string GetDescripcionComboColumn()
{	//GetDescripcionComboColumnFromProperties
	string strFinal="";
	bool blnTieneWebCombo=false;
	
	for (int i = 0; i < TablaBase.Columns.Count; i++){ 	
		if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow) {
			continue; 
		} 
		
	}
		
	return strFinal;
}

public  string GetSchemaTableFromPropertiesLocal()
{	
	string strFinalQuery="";
	
	if(TieneSchemaTableFromPropertiesC(TablaBase,Schema)) {
		//Trace.WriteLine(Schema+"111111111122222222233333333");
		strFinalQuery="Constantes.SCHEMA_"+GetSchemaTableFromProperties(TablaBase,Schema).ToUpper()+"";
		//Trace.WriteLine(strFinalQuery);
	} else {
		if(TablaBase.Owner.Equals("dbo")) {
			strFinalQuery="Constantes.SCHEMA";
		} else {
			strFinalQuery="Constantes.SCHEMA_"+TablaBase.Owner.ToUpper()+"";
		}
	}
	
	return strFinalQuery;
}



public  string GetColumnaBooleanFuncionDescripcion(ColumnSchema column)
{	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow) {
		return"";
	}
	
	string strNombre="";
	
	if(EsTipoColumnaParaRegularExpresionClaseC(column)) {
		strNombre="public static final String SREGEX"+GetNombreColumnaClaseC(column).ToUpper()+"=ConstantesValidacion."+GetTipoColumnaRegularExpresionClaseC(column)+";";
		strNombre+="\r\n\tpublic static final String SMENSAJEREGEX"+GetNombreColumnaClaseC(column).ToUpper()+"=ConstantesValidacion."+GetTipoColumnaMensajeRegularExpresionClaseC(column)+";";
	}
	
	return strNombre;
}
	
public string GetPackageFromEsConstantesFunciones()
{
	String strPackageFromEsConstantesFunciones="";
	
	if(!EsConstantesFunciones) {
		strPackageFromEsConstantesFunciones=Empresa+"."+Package+"."+Module+strPackageBusiness+"."+strPackageLogic+GetEsPaqueteReporteC(TablaBase);	
		
	}else {
		strPackageFromEsConstantesFunciones=Empresa+"."+Package+"."+Module+strPackageUtils+GetEsPaqueteReporteC(TablaBase);	
	}
	
	return strPackageFromEsConstantesFunciones;
}

public string GetClaseFromEsConstantesFunciones()
{
	String strClaseFromEsConstantesFunciones="";
	
	if(!EsConstantesFunciones) {
		strClaseFromEsConstantesFunciones=GetNombreClase(TablaBase.ToString())+"LogicAdditional ";
		strClaseFromEsConstantesFunciones+="extends "+GetNombreClase(TablaBase.ToString())+"Logic ";//GeneralEntityLogic
		
		if(!blnEsReporte){
			if(ConCapaInterfaceLogic) { 
				strClaseFromEsConstantesFunciones+=" implements "+GetNombreClase(TablaBase.ToString())+"Additionable ";	
			}
		}
		
	}else {
		strClaseFromEsConstantesFunciones=GetNombreClase(TablaBase.ToString())+strClaseConstantesFunciones;
		
		if(blnConAdditional && !blnEsReporte) {
			strClaseFromEsConstantesFunciones+=" extends "+GetNombreClase(TablaBase.ToString())+strClaseConstantesFunciones+"Additional ";	
		}
		
		//strClaseFromEsConstantesFunciones+=" implements Serializable ";
	}
	
	return strClaseFromEsConstantesFunciones;
}

public string GetPostActionFromActionsTableMaintenance(String strCodePostAccion)
{
	String strFuncionPostAccion="RegistrarEventoSinRespuesta";
	
	if(strCodePostAccion=="1")
	{
		strFuncionPostAccion="RegistrarEventoSinRespuesta";
	}
	else if(strCodePostAccion=="2")
	{
		strFuncionPostAccion="RegistrarEventoIrAPagina";
	}
	else if(strCodePostAccion=="3")
	{
		strFuncionPostAccion="RegistrarEventoIrAPaginaNueva";
	}
	else if(strCodePostAccion=="4")
	{
		strFuncionPostAccion="RegistrarEventoConRetorno";
	}
	
	return strFuncionPostAccion;
}

public string GetActionsFunctionsTableMaintenance(TableSchema table)
{
	ArrayList arrAccionExtendsProperty=new ArrayList();
	
	arrAccionExtendsProperty=GetAccionExtendsPropertyC(table);
	
	String strColumn="";
	String strColumns="";
			
	String strNombreCodigo="";
	String strNombreWebTitulo="";
	String strNombreFuncionJavaScript="";
	String strPostAccion="";
	String strTipoPostAccion="";
	
	foreach(Me.MeExtendProperty meExtendProperty in arrAccionExtendsProperty)
	{
		strNombreCodigo=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableNombreProperty);
		strNombreWebTitulo=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableWebNombreProperty);
		strTipoPostAccion=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTablePostAccionProperty);		
		strNombreFuncionJavaScript=strNombreCodigo.Substring(0,1).ToLower()+strNombreCodigo.Substring(1,strNombreCodigo.Length-1).Replace("_","").ToLower();
		strPostAccion=GetPostActionFromActionsTableMaintenance(strTipoPostAccion);
		
		strColumn="\r\n\tpublic String "+strNombreFuncionJavaScript+"(Long lngId)";
		strColumn+=" {\r\n";
		strColumn+="\t\tString sReturnResult=\"default.jsp\";\r\n\r\n";
		strColumn+="\t\t//Implementar "+strNombreWebTitulo+"\r\n\r\n";
		strColumn+="\t\treturn sReturnResult;\r\n";
		strColumn+="\t}\r\n";

		strColumns+=strColumn;
		
		
	}
	
	return strColumns;
}

public String GetDetalleIndicesTablasClases() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strUsoVariables="";
			
			String strIfFuncion=string.Empty;
			//strIfFuncion="\r\n\r\n\tpublic static String "+"getDetalleIndiceTodos(";
						
			strIfFuncion+="\r\n\r\n\tpublic static String "+"getDetalleIndicePor"+strIdGetSet+"(Long "+strId+") {";
			strIfFuncion+="\r\n\t\treturn \""+strParametrosBusqueda+strPor+strId+"=\"+"+strId+".toString();\r\n\t}";
			
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					
					
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							strInitFuncion+="\r\n\r\n\tpublic static String "+"getDetalleIndice"+indexSchema.Name+"(";
						}
						else
						{
							strInitFuncion+="\r\n\r\n\tpublic static String "+"getDetalleIndice"+indexSchema.Name+"(";
						}
						
					int count=1;	
					
					strUsoVariables="";
					//strInitFuncion="";
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
						
						if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
						{
							strInitFuncion+=/*","+*/GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column);
							 
							//Trace.WriteLine(GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column));
							//PARA RANNGO FINAL
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								strInitFuncion+=","+GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal; 
							}
			
							//SI NO ES NULO
							strUsoVariables+="\r\n\t\tif("+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+/*GetTipoColumnaToString(memberColumnSchema.Column)+*/"!=null) {";							
							strUsoVariables+="sDetalleIndice+=\" ";//\r\n\t\t
							
							if(memberColumnSchema.IsForeignKeyMember)
							{
								strUsoVariables+=strCodigoDe;
							}
							
							strUsoVariables+=GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"=\"+";
							strUsoVariables+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+GetTipoColumnaToString(memberColumnSchema.Column)+";}";
							
							
							//PARA RANGO FINAL
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
								strUsoVariables+="\r\n\t\tif("+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal+/*GetTipoColumnaToString(memberColumnSchema.Column)+*/"!=null) {";																						
								strUsoVariables+="sDetalleIndice+=\" ";
							
								if(memberColumnSchema.IsForeignKeyMember)
								{
									strUsoVariables+=strCodigoDe;
								}
								
								strUsoVariables+=GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" "+strSufijoRangoFinal.ToUpper()+"=\"+";
								strUsoVariables+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal+GetTipoColumnaToString(memberColumnSchema.Column)+";}";
								
							}
							
							
							if(!indexSchema.MemberColumns.Count.Equals(count))
							{
								strInitFuncion+=",";	
							}
						}
						else
						{
							if(!indexSchema.Name.Contains("BusquedaRango"))
							{
								strInitFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								
								strUsoVariables+="\r\n\t\tsDetalleIndice+=\" ";
								
								if(memberColumnSchema.IsForeignKeyMember)
								{
									strUsoVariables+=strCodigoDe;
								}
							
								strUsoVariables+=GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"=\"+";
								strUsoVariables+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+GetTipoColumnaToString(memberColumnSchema.Column)+";";
							
							}
							else
							{
								strInitFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
								strInitFuncion+=",";
								strInitFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
								
								strUsoVariables+="\r\n\t\tsDetalleIndice+=\" ";
								
								if(memberColumnSchema.IsForeignKeyMember)
								{
									strUsoVariables+=strCodigoDe;
								}
							
								strUsoVariables+=GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"Inicial=\"+";
								strUsoVariables+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"+GetTipoColumnaToString(memberColumnSchema.Column)+";";
								strUsoVariables+="\r\n\t\tsDetalleIndice+=\" ";
								
								if(memberColumnSchema.IsForeignKeyMember)
								{
									strUsoVariables+=strCodigoDe;
								}
							
								strUsoVariables+=GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"Final=\"+";
								strUsoVariables+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"+GetTipoColumnaToString(memberColumnSchema.Column)+";";
								
								break;
							}
						}
						count++;
					}
					strInitFuncion+=") {\r\n\t\tString sDetalleIndice=\" "+strParametrosBusqueda+"\";"+strUsoVariables+" \r\n\r\n\t\treturn sDetalleIndice;\r\n\t}";																																			
				}
			}
			
								
			return strIfFuncion+strInitFuncion; 
		}
		
public String GetNombresBusquedasIndicesTablas() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n\tpublic static String getNombreIndice(String sNombreIndice) {";
			
			
			String strIfFuncion=string.Empty;
			strIfFuncion="\r\n\t\tif(sNombreIndice.equals(\"Todos\")) {\r\n\t\t\tsNombreIndice=\""+strTipoBusqueda+"Todos"+"\";\r\n\t\t}";
			strIfFuncion+=" else if(sNombreIndice.equals(\"Por"+strIdGetSet+"\")) {\r\n\t\t\tsNombreIndice=\""+strTipoBusqueda+strPor+" "+strIdGetSet+"\";\r\n\t\t}";
			
			String strFuncionBusqueda="";
				strFuncionBusqueda+="";
			String strDefinicionVariables="";
			String strUsoVariables="";
				strUsoVariables+="";
			String strXmlFuncion=string.Empty;
			
			
			
						
			strFuncion="";
						
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					strFuncion+=" else if(sNombreIndice.equals(\""+indexSchema.Name+"\")) {\r\n\t\t\tsNombreIndice=\""+strTipoBusqueda+" ";
					
				}
				else
				{
					continue;
				}
				
							int count=1;
							strDefinicionVariables="";
							strUsoVariables="";							
							//strFuncionBusqueda="";
									foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
									{
																						
										if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
										{								
											strDefinicionVariables+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column);
											
											
										}
										else
										{
											if(!indexSchema.Name.Contains("BusquedaRango"))
											{
												strDefinicionVariables+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"Inicial "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Final";
											}
											else
											{
												strDefinicionVariables+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"Inicial ";
												
												
												strDefinicionVariables+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"Final";
											}								
										}
										count++;
									}
									
				strFuncion+=strDefinicionVariables+"\";\r\n\t\t}";
			}								
			return  strInitFuncion+strIfFuncion+strFuncion+"\r\n\r\n\t\treturn sNombreIndice;\r\n\t}";
		}
		
public  string GetColumnaBooleanFuncionDescripcionC(ColumnSchema column)
	{
	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	
	string strInitFuncion="\r\n\tpublic static String get";
	string strNombre="";
	
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=GetPrefijoTipoC(column);	
	String strColumna=GetNombreColumnaClaseC(column);	
	String strIfElse="\r\nif(request.getParameter(\""+GetNameControlHtml(column) +"\"+i.tToString())== null||request.getParameter(\""+GetNameControlHtml(column) + "\"+i.toString())==\"\") {\r\n";
	strIfElse+=strPrefijo+strColumna+"=null;\r\n} else {\r\n";	

		
	if(column.DataType==DbType.Boolean)
	{
		
	strNombre+=strInitFuncion+ strColumna+"Descripcion("+GetNombreClaseC(TablaBase.ToString())+" "+GetNombreClaseObjetoC(TablaBase.ToString()) +") throws Exception {\r\n";
	strNombre+="\t\tString sDescripcion=Constantes.SCAMPOVERDADERO;\r\n";
	strNombre+="\r\n\t\tif(!"+GetNombreClaseObjetoC(TablaBase.ToString()) +".get"+strField_+strPrefijo+ strColumna +"()) {\r\n";
	strNombre+="\t\t\tsDescripcion=Constantes.SCAMPOFALSO;";
	strNombre+="\r\n\t\t}\r\n";
	strNombre+="\r\n\t\treturn sDescripcion;\r\n\t}\r\n";	
	
	strNombre+=strInitFuncion+ strColumna+"HtmlDescripcion("+GetNombreClaseC(TablaBase.ToString())+" "+GetNombreClaseObjetoC(TablaBase.ToString()) +") throws Exception {\r\n";
	strNombre+="\t\tString sDescripcion=FuncionesJsp.getStringHtmlCheckBox("+GetNombreClaseObjetoC(TablaBase.ToString()) +".get"+strIdGetSet+"(),"+GetNombreClaseObjetoC(TablaBase.ToString()) +".get"+strField_+strPrefijo+ strColumna +"());\r\n";
	/*strNombre+="\r\n\t\tif(!"+GetNombreClaseObjetoC(TablaBase.ToString()) +".getField_"+strPrefijo+ strColumna +"()) {\r\n";
	strNombre+="\t\t\tsDescripcion=\"Falso\";";
	strNombre+="\r\n\t\t}\r\n";*/
	strNombre+="\r\n\t\treturn sDescripcion;\r\n\t}";
	}
		
	return strNombre;
	}
	
public String SetClasesRelacionadasForeigKeysDeepSaveBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="getTR_";
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionada+="\r\n\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysDeepSaveBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaSave=string.Empty;							
			String strInitFuncion="getTR_";
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionadaSave+="\r\n\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					strTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class))\r\n\t\t\t\t{\r\n"+ strTablaClaseRelacionadaSave+"\t\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysDeepSaveBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaSave=string.Empty;						
			String strInitFuncion="getTR_";
			String strInitFor="\r\n\t\tfor(Class clas:clases)\r\n\t\t{";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionadaSave+="\r\n\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					strTablaClaseRelacionada+="\r\n\r\nexiste=false;\r\n\r\n"+strInitFor;
					strTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class))\r\n\t\t\t\t{\r\n\t\t\t\texiste=true;\r\nbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\nif(!existe)\r\n\t\t\t\t{\r\n"+ strTablaClaseRelacionadaSave+"\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoDeepSaveBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="getTR_";
			String strInitFuncionGet="getTR_";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionada+="\r\n\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					strTablaClaseRelacionada+="\t\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionada+="\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.DeepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",deep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoDeepSaveBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaSave=string.Empty;							
			String strTablaClaseRelacionadaLogicDeepSave=string.Empty;
			
			String strInitFuncion="getTR_";
			String strInitFuncionGet="getTR_";					
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionadaSave+="\r\n\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					
					strTablaClaseRelacionadaLogicDeepSave="\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicDeepSave+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.DeepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",deep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
				
					strTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class))\r\n\t\t\t\t{\r\n"+ strTablaClaseRelacionadaSave+strTablaClaseRelacionadaLogicDeepSave+"\t\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysNoDeepSaveBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaSave=string.Empty;				
			String strTablaClaseRelacionadaLogicDeepSave=string.Empty;
			String strInitFuncion="getTR_";
			String strInitFuncionGet="getTR_";	
			String strInitFor="\r\n\t\tfor(Class clas:clases)\r\n\t\t{";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionadaSave+="\r\n\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",connexion);\r\n";
					
					strTablaClaseRelacionadaLogicDeepSave="\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicDeepSave+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.DeepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",deep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
				
					strTablaClaseRelacionada+="\r\n\r\nexiste=false;\r\n\r\n"+strInitFor+"\r\n\t\t\t\tif(clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class))\r\n\t\t\t\t{\r\n\t\t\t\texiste=true;\r\nbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\nif(!existe)\r\n\t\t\t\t{\r\n"+ strTablaClaseRelacionadaSave+strTablaClaseRelacionadaLogicDeepSave+"\t\t\t\t}";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}	
		
public String SetClasesRelacionadasForeigKeysDeepLoadBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="setTR_";
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionada+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysDeepLoadBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;							
			String strInitFuncion="setTR_";
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionadaReturn="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class))\r\n\t\t\t\t{\r\n"+ strTablaClaseRelacionadaReturn+"\t\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysDeepLoadBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;							
			String strInitFuncion="setTR_";
			String strInitFor="\r\n\t\tfor(Class clas:clases)\r\n\t\t{";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionadaReturn="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\r\n\r\nexiste=false;\r\n\r\n"+strInitFor;
					strTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class))\r\n\t\t\t\t{\r\n\t\t\t\texiste=true;\r\nbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\nif(!existe)\r\n\t\t\t\t{\r\n"+ strTablaClaseRelacionadaReturn+"\t\t\t\t}";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoDeepLoadBeep() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			String strInitFuncion="setTR_";
			String strInitFuncionGet="getTR_";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionada+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada+="\t\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionada+="\t\t\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.DeepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",deep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String SetClasesRelacionadasForeigKeysNoDeepLoadBeepInclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;	
			String strTablaClaseRelacionadaLogicDeepSave=string.Empty;
			
			String strInitFuncion="setTR_";
			String strInitFuncionGet="getTR_";					
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionadaReturn="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					
					strTablaClaseRelacionadaLogicDeepSave="\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicDeepSave+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.DeepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",deep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
				
					strTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class))\r\n\t\t\t\t{\r\n"+ strTablaClaseRelacionadaReturn+strTablaClaseRelacionadaLogicDeepSave+"\t\t\t\t}\r\n";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}
		
public String SetClasesRelacionadasForeigKeysNoDeepLoadBeepExclude() 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaReturn=string.Empty;		
			String strTablaClaseRelacionadaLogicDeepSave=string.Empty;
			String strInitFuncion="setTR_";
			String strInitFuncionGet="getTR_";
			String strInitFor="\r\n\t\tfor(Class clas:clases)\r\n\t\t{";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionadaReturn="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion;						
					strTablaClaseRelacionadaReturn+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionadaLogicDeepSave="\t\t\t\t"+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic "+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic= new "+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic(connexion);\r\n";
					strTablaClaseRelacionadaLogicDeepSave+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Logic.DeepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncionGet+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "()"+",deep,deepLoadType,clases);"+"\r\n\t\t\t\t\r\n";
				
					strTablaClaseRelacionada+="\r\n\r\nexiste=false;\r\n\r\n"+strInitFor+"\r\n\t\t\t\tif(clas.equals("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+".class))\r\n\t\t\t\t{\r\n\t\t\t\texiste=true;\r\nbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\nif(!existe)\r\n\t\t\t\t{\r\n"+ strTablaClaseRelacionadaReturn+strTablaClaseRelacionadaLogicDeepSave+"\t\t\t\t}";
		
				}
			}
			
			
			return strTablaClaseRelacionada; 
		}	

public bool ExisteClasesRelacionadasForeigKeys() 
		{
			bool existe= false;
										
								
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					 existe= true;
				}
			}
								
			return existe; 
		}

public String GetClassClasesRelacionadasForeigKeys() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
										
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					strTablaClaseRelacionada+="classes.add("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ ".class);\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}

public String GetIndicesTablasClasesDeepSave() 
		{
			bool existeClaseForeign=false;
			bool existeClaseRelacionada=false;
			
			
			String strInit="\r\n this.Save("+GetNombreClaseObjeto(TablaBase.ToString())+");\r\n";
						
			String strTablaClaseRelacionada2=string.Empty;
			System.Collections.Hashtable tablasRelacionadas2=GetTablasRelacionadas(TablaBase);
			String strInitNone="\r\n\tif(deepLoadType.equals(DeepLoadType.NONE))\r\n\t{\r\n";
			String strInitInclude="\telse if(deepLoadType.equals(DeepLoadType.INCLUDE))\r\n\t{\r\n";
			String strInitExclude="\telse if(deepLoadType.equals(DeepLoadType.EXCLUDE))\r\n\t{\r\n";
			String strInitFor="\r\n\t\tfor(Class clas:clases)\r\n\t\t{";
			String strInitIfClass="\r\n\t\t\tif(clas.equals(";
			
			String strFuncionInclude=string.Empty;
			String strFuncionExclude=string.Empty;
			
            strTablaClaseRelacionada2="\r\nelse\r\n{"+strInitNone +SetClasesRelacionadasForeigKeysNoDeepSaveBeep();
			
			strFuncionInclude="";
			strFuncionExclude="";
			
			existeClaseForeign=ExisteClasesRelacionadasForeigKeys(); 
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				strFuncionInclude+=strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))\r\n\t\t\t{\r\n";
				strFuncionExclude+="\r\n\r\nexiste=false;\r\n\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))\r\n\t\t\t{\r\n";
				strFuncionExclude+="\t\t\texiste=true;\r\nbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}if(!existe)\r\n\t\t\t{\r\n";

				existeClaseRelacionada=true;
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada2+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),connexion);";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepSave("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),deep,deepLoadType,clases);\r\n";
					
					strFuncionInclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionInclude+="\r\n\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),connexion);";					
					strFuncionInclude+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepSave("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),deep,deepLoadType,clases);\r\n";
		
					strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),connexion);";										
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepSave("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),deep,deepLoadType,clases);\r\n";
		
				}
				else
				{
					//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
					strTablaClaseRelacionada2+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s())\r\n\t\t{\r\n";
					strTablaClaseRelacionada2+="\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";					
					strTablaClaseRelacionada2+="\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",connexion);"+"\r\n";				
					strTablaClaseRelacionada2+="\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",deep,deepLoadType,clases);"+"\r\n\t\t}\r\n";
					
					strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s())\r\n\t\t\t\t{\r\n";
					strFuncionInclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionInclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",connexion);"+"\r\n";								
					strFuncionInclude+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",deep,deepLoadType,clases);"+"\r\n\t\t\t\t}\r\n";
				
					strFuncionExclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s())\r\n\t\t\t\t{\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",connexion);"+"\r\n";												
					strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepSave("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",deep,deepLoadType,clases);"+"\r\n\t\t\t\t}\r\n";
				
				
				}
			
				strFuncionInclude+="\t\t\t}";
				strFuncionExclude+="\t\t\t}";
			
			
			}
			
				strFuncionInclude=strInitInclude+strInitFor+SetClasesRelacionadasForeigKeysNoDeepSaveBeepInclude()+ strFuncionInclude+ "\r\n\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude+SetClasesRelacionadasForeigKeysNoDeepSaveBeepExclude()+ strFuncionExclude+ "\r\n\t}\r\n}";
			
			strTablaClaseRelacionada2=strTablaClaseRelacionada2+"\t}\r\n"+strFuncionInclude+strFuncionExclude;
			
			// parte del no if deep
			
			
			String strInitIfFuncion=string.Empty;
			String strIfFuncion=string.Empty;
			String strInitElseFuncion=string.Empty;
			String strElseFuncion=string.Empty;
			
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion=" TraerTR_";
			
			strInitIfFuncion="\r\nif(!deep)\r\n{\r\n";
			strInitElseFuncion="\r\n}\r\nelse{\r\n";
			
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strInitFuncion="TraerTR_";
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					//strInitFuncion=strInitFuncion;
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "();";
				}
				else
				{
					//strInitFuncion=strInitFuncion;
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"();";
			
				}
				
			strFuncion+=GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
			}
			
			
			
			String strTablaClaseRelacionada0=string.Empty;
			System.Collections.Hashtable tablasRelacionadas0=GetTablasRelacionadas(TablaBase);
			
            strTablaClaseRelacionada0=strInitNone+ SetClasesRelacionadasForeigKeysDeepSaveBeep();
			strFuncionInclude="";
			strFuncionExclude="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				strFuncionInclude+=strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))\r\n\t\t\t{\r\n";
				strFuncionExclude+="\r\n\r\nexiste=false;\r\n\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))\r\n\t\t\t{\r\n";
				strFuncionExclude+="\t\t\texiste=true;\r\nbreak;\r\n\t\t\t}\r\n\t\t\t\t\t\t}if(!existe)\r\n\t\t\t{\r\n";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada0+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),connexion);\r\n";
					
					strFuncionInclude+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),connexion);\r\n";
					
					strFuncionExclude+="\r\n\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),connexion);\r\n";
				}
				else
				{
					//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
					strTablaClaseRelacionada0+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s())\r\n\t\t{\r\n";
					strTablaClaseRelacionada0+="\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",connexion);"+"\r\n\t\t}\r\n";
				
					strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s())\r\n\t\t\t\t{\r\n";
					strFuncionInclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",connexion);"+"\r\n\t\t\t\t}\r\n";
				
					strFuncionExclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s())\r\n\t\t\t\t{\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"DataAccess.Save("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",connexion);"+"\r\n\t\t\t\t}\r\n";
				
				}
				strFuncionInclude+="\t\t\t}";
				strFuncionExclude+="\r\n\t\t}";
				
			}
			
			strFuncionInclude=strInitInclude+strInitFor+ SetClasesRelacionadasForeigKeysDeepSaveBeepInclude()+strFuncionInclude +"\r\n\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude+ SetClasesRelacionadasForeigKeysDeepSaveBeepExclude()+strFuncionExclude+"\r\n\t}\r\n}";
	
			
			strIfFuncion=strInitIfFuncion+strTablaClaseRelacionada0+"\t}\r\n"+strFuncionInclude+strFuncionExclude;//+"\r\n}\r\n"+strInitElseFuncion+strTablaClaseRelacionada0+strTablaClaseRelacionada2+"\r\n}\r\nelse{\r\n"+strTablaClaseRelacionada3+"\r\n}\r\n}\r\n}\r\n";					
		
			
			if(!existeClaseForeign&&!existeClaseRelacionada)
			{
				return "";
			}
			
			return strIfFuncion+strTablaClaseRelacionada2; 
		}
		
public String GetIndicesTablasClasesDeepLoad() 
		{
			bool existeClaseForeign=false;
			bool existeClaseRelacionada=false;
			
			String strTablaClaseRelacionada2=string.Empty;
			System.Collections.Hashtable tablasRelacionadas2=GetTablasRelacionadas(TablaBase);
			String strInitNone="\r\n\tif(deepLoadType.equals(DeepLoadType.NONE))\r\n\t{\r\n";
			String strInitInclude="\telse if(deepLoadType.equals(DeepLoadType.INCLUDE))\r\n\t{\r\n";
			String strInitExclude="\telse if(deepLoadType.equals(DeepLoadType.EXCLUDE))\r\n\t{\r\n";
			String strInitFor="\r\n\t\tfor(Class clas:clases)\r\n\t\t{";
			String strInitIfClass="\r\n\t\t\tif(clas.equals(";
			String strFuncionInclude=string.Empty;
			String strFuncionExclude=string.Empty;
			
			strFuncionInclude="";
			strFuncionExclude="";
			
            strTablaClaseRelacionada2="\r\nelse\r\n{\r\n"+strInitNone+ SetClasesRelacionadasForeigKeysNoDeepLoadBeep();
			
			String strInitFuncion=" TraerTR_";
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strTablaClaseRelacionadaAux=string.Empty;
			
			existeClaseForeign=ExisteClasesRelacionadasForeigKeys(); 
			foreach(CollectionInfo collectionInfo in tablasRelacionadas2.Values)
			{
				existeClaseRelacionada=true;
				strFuncionInclude+=strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))\r\n\t\t\t{\r\n";
				strFuncionExclude+="\r\n\r\nexiste=false;\r\n\r\n"+strInitFor+strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))\r\n\t\t\t{\r\n";
				strFuncionExclude+="\t\t\texiste=true;\r\nbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}if(!existe)\r\n\t\t\t{\r\n";
				
				strInitFuncion="setTR_";
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada2+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";						
					strTablaClaseRelacionada2+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+ "(),deep,deepLoadType,clases);\r\n";
				
					strFuncionInclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";
					strFuncionInclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionInclude+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),deep,deepLoadType,clases);\r\n";
					
					strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionExclude+="\r\n\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepLoad("+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+collectionInfo.SecondaryTable+"(),deep,deepLoadType,clases);\r\n";
					
				}
				else
				{
					//strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";
					strTablaClaseRelacionada2+="\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux+"\r\n";		
					strTablaClaseRelacionada2+="\r\n\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s())\r\n\t\t{\r\n";
					strTablaClaseRelacionada2+="\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strTablaClaseRelacionada2+="\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepLoad("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",deep,deepLoadType,clases);"+"\r\n\t\t}\r\n";
				
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";		
					strFuncionInclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux;	
					strFuncionInclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s())\r\n\t\t\t\t{\r\n";
					strFuncionInclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionInclude+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepLoad("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",deep,deepLoadType,clases);"+"\r\n\t\t\t\t}\r\n";
				
					strTablaClaseRelacionadaAux=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));\r\n";					
					strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionadaAux;	
					strFuncionExclude+="\r\n\t\t\t\tfor("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+":"+GetNombreClaseObjetoC(TablaBase.ToString())+".getTR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s())\r\n\t\t\t\t{\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic "+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic= new "+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+"Logic(connexion);\r\n";
					strFuncionExclude+="\t\t\t\t"+GetNombreClaseObjeto("dbo."+collectionInfo.SecondaryTable)+"Logic.DeepLoad("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+",deep,deepLoadType,clases);"+"\r\n\t\t\t\t}\r\n";
				
				}
				
				//strFuncion+="\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
				strFuncionInclude+="\t\t\t}";
				strFuncionExclude+="\t\t\t}";
				
			}
			
				strFuncionInclude=strInitInclude+strInitFor+ SetClasesRelacionadasForeigKeysNoDeepLoadBeepInclude()+ strFuncionInclude +"\r\n\t\t}\r\n\t}\r\n";
				strFuncionExclude=strInitExclude+ SetClasesRelacionadasForeigKeysNoDeepLoadBeepExclude()+ strFuncionExclude+ "\r\n\t}\r\n}";
				
			
			strTablaClaseRelacionada2=strTablaClaseRelacionada2+"\t}\r\n"+strFuncionInclude+strFuncionExclude;
			
			
			//Parte del no if del deep
			
			String strInitIfFuncion=string.Empty;
			String strIfFuncion=string.Empty;
			String strInitElseFuncion=string.Empty;
			String strElseFuncion=string.Empty;
			
			strFuncion=string.Empty;
			
			strTablaClaseRelacionada=string.Empty;
			strInitFuncion=" TraerTR_";
			
			strInitIfFuncion="\r\nif(!deep)\r\n{\r\n";
			strInitElseFuncion="\r\nelse{\r\n";
			
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			strFuncion=strInitNone+ SetClasesRelacionadasForeigKeysDeepLoadBeep();
			strFuncionInclude="";
			strFuncionExclude="";
		
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				strFuncionInclude+=strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))\r\n\t\t\t{\r\n";
				strFuncionExclude+="\r\n\r\nexiste=false;\r\n\r\n"+strInitFor +strInitIfClass+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))\r\n\t\t\t{\r\n";
				strFuncionExclude+="\t\t\texiste=true;\r\nbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}if(!existe)\r\n\t\t\t{\r\n";
				
				strInitFuncion="setTR_";
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));";
				}
				else
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.TraerTR_"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"));";
			
				}
				
			strFuncion+="\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n";
			strFuncionInclude+="\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n\t\t\t}\r\n";
			strFuncionExclude+= "\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strInitFuncion+	strTablaClaseRelacionada+"\r\n\t\t\t}";
			
			}
			
			strFuncionInclude=strInitInclude+strInitFor+SetClasesRelacionadasForeigKeysDeepLoadBeepInclude() +strFuncionInclude+ "\t\t}\r\n\t}\r\n";
			strFuncionExclude=strInitExclude +SetClasesRelacionadasForeigKeysDeepLoadBeepExclude()+strFuncionExclude+ "\r\n\t}\r\n}";
			
			strIfFuncion=strInitIfFuncion+strFuncion+"\t}\r\n"+strFuncionInclude+strFuncionExclude; //+strInitElseFuncion+strFuncion+strTablaClaseRelacionada2+"\r\n}\r\nelse{\r\n"+strTablaClaseRelacionada3+"\r\n}\r\n}\r\n";					
			
			if(!existeClaseForeign&&!existeClaseRelacionada)
			{
				return "";
			}
			
			return strIfFuncion+strTablaClaseRelacionada2; 
		}
		
public String GetParameterSelection(ColumnSchema column,bool esUltimo,bool blnNoConDefinicion) 
		{
			String strParameterSelection=String.Empty;
			
			if(!blnNoConDefinicion)
			{
				strParameterSelection="\r\n\r\nParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
			}
			else
			{
				strParameterSelection="\r\n\r\nparameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
			}
			
			strParameterSelection+="\r\nparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralEqual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+"+\"%\","+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";
			
			if(esUltimo)
			{
			strParameterSelection+="ParameterTypeOperator.NONE);";		
			}
			else
			{
			strParameterSelection+=	"ParameterTypeOperator.AND);";	
			}
			
			strParameterSelection+="\r\nqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+");";
		
			return strParameterSelection;
		}
	
		
public String GetFuncionesTablasClasesRelacionadas() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public  void  TraerTR_";
			
			String strEndFuncion="\r\n}\r\ncatch(Exception ex)\r\n{\r\n;\r\n}\r\n}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "()\r\n{\r\ntry\r\n{\r\n TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"= new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"();\r\n";
					strTablaClaseRelacionada+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"="+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.Traer"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+");";
				}
				else
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()\r\n{\r\ntry\r\n{\r\n TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s= new "+ "ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+">();\r\n";
					strTablaClaseRelacionada+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s="+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+"DataAccess.Traer"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(connexion,"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+");";
			
				}
				
			strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n\r\n";
			}
								
			return strFuncion; 
		}

public String GetInitVariablesRelacionesReporteTablasClasesRelacionadas(TableSchema tableSchema) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(tableSchema);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany&&GetEsReporteFromPropertiesC(collectionInfo.SecondaryTableSchema))
				{	
					strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".QuerySelect=\"\";\r\n";
					strTablaClaseRelacionada+="\t\t\t"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccess "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"DataAccess=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccess();\r\n";
					
					strTablaClaseRelacionada+=GetInitVariablesRelacionesReporteTablasClasesRelacionadas(collectionInfo.SecondaryTableSchema);
				}
			}
								
			return strTablaClaseRelacionada; 
		}

		public String GetRelacionesReporteTablasClasesRelacionadas(TableSchema tableSchema,TableSchema tableSchemaPadre,TableSchema tableSchemaSuperPadre,int intNivel,String strTabs) 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(tableSchema);
			String strTabAnterior=string.Empty;
			
			
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany&&GetEsReporteFromPropertiesC(collectionInfo.SecondaryTableSchema))
				{	
					
					if(intNivel!=1)
					{	
						strTabs+="\t";
						strTabAnterior=strTabs;
					}
					
					if(intNivel==1)
					{
						strTablaClaseRelacionada+="\r\n\t\t\t\tqueryWhereSelectParameters.setFinalQuery(\"\");"	;			
						strTablaClaseRelacionada+="\r\n\t\t\t\tBYDANCODE1";
						
						strTablaClaseRelacionada+="\r\n\r\n\r\n\t\t\t\t"+GetNombreClaseObjetoC(tableSchemaPadre.ToString())+".setRelationship_"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"DataAccess.GetEntities(connexion, queryWhereSelectParameters));\r\n\r\n";		
						
						intNivel+=intNivel;
						
						strTablaClaseRelacionada+=GetRelacionesReporteTablasClasesRelacionadas(collectionInfo.SecondaryTableSchema,tableSchema,tableSchemaSuperPadre,intNivel,strTabs);
					}
					else
					{
						//System.Windows.Forms.MessageBox.Show(GetNombreClaseC(tableSchema.ToString())+" "+intNivel.ToString()+":"+strTabs.Replace("\t","A"));
						
						strTablaClaseRelacionada+="\r\n\r\n\t\t\t"+strTabs+"for("+GetNombreClaseC(tableSchema.ToString())+" "+GetNombreClaseObjetoC(tableSchema.ToString())+":"+GetNombreClaseObjetoC(tableSchemaPadre.ToString())+".getRelationship_"+GetNombreClaseObjetoC(tableSchema.ToString())+"s())";
						strTablaClaseRelacionada+="\r\n\t\t\t"+strTabs+"{";
						strTablaClaseRelacionada+="\r\n\t\t\t\t"+strTabs+"queryWhereSelectParameters.setFinalQuery(\"\");";
							
						strTablaClaseRelacionada+="\r\n\t\t\t\t"+strTabs+"BYDANCODE1";
							
						strTablaClaseRelacionada+="\r\n\r\n\r\n\t\t\t\t"+strTabs+GetNombreClaseObjetoC(tableSchema.ToString())+".setRelationship_"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"DataAccess.GetEntities(connexion, queryWhereSelectParameters));\r\n\r\n";
						
						intNivel+=intNivel;
						
						strTablaClaseRelacionada+=GetRelacionesReporteTablasClasesRelacionadas(collectionInfo.SecondaryTableSchema,tableSchema,tableSchemaSuperPadre,intNivel,strTabs);
						
						strTablaClaseRelacionada+="\r\n\t\t\t"+strTabAnterior+"}";
					}
					
					
				}
			}
								
			return strTablaClaseRelacionada; 
		}
	
public String GetTablasClasesRelacionadas() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";\r\n";
				}
				else
				{
					strTablaClaseRelacionada+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> TR_"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;\r\n";
				}
			}
								
			return strTablaClaseRelacionada; 
		}
		
public string GetNombreClase(string strTablaBase)
{
		return GetNombreClaseC(strTablaBase);
}

public string GetNombreClaseObjeto(string strTablaBase)
{
		return GetNombreClaseObjetoC(strTablaBase);
}

public String GetParameterSelectionRango(ColumnSchema column,String strIndexName) 
		{
			String strParaBusquedaString=""; 
			
			if(column.DataType==DbType.DateTime ||column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				strParaBusquedaString="+\"%\"";
			}
			
			String strParameterSelection=String.Empty;
			
			if(!strIndexName.Contains("BusquedaRango"))
			{
				strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
				
				if(strIndexName.Contains("BusquedaMayorIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMayorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				else if(strIndexName.Contains("BusquedaMayor"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMayor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				else if(strIndexName.Contains("BusquedaMenorIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMenorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				else if(strIndexName.Contains("BusquedaMenor"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralMenor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";
				}
				
				strParameterSelection+="ParameterTypeOperator.NONE);";	
				
				strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+");";
			}
			else
			{
				strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"Inicial= new ParameterSelectionGeneral();";				
				if(strIndexName.Contains("BusquedaRangoIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Inicial.setParameterSelectionGeneralMayorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Inicial"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";		
				}
				else
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Inicial.setParameterSelectionGeneralMayor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Inicial"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";		
				}				
				strParameterSelection+=	"ParameterTypeOperator.AND);";	
				
				strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+"Inicial);";
				
				strParameterSelection+="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"Final= new ParameterSelectionGeneral();";
				if(strIndexName.Contains("BusquedaRangoIgual"))
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Final.setParameterSelectionGeneralMenorIgual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Final"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";				
				}
				else
				{
					strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+"Final.setParameterSelectionGeneralMenor(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"Final"+ GetTipoColumnaToString(column)+strParaBusquedaString +","+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";				
				}				
				strParameterSelection+="ParameterTypeOperator.NONE);";	
				
				strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+"Final);";
			}
			
						
			
		
			return strParameterSelection;
		}
		
public String GetParameterSelection(ColumnSchema column,bool esUltimo,bool esUnico,bool esCompuesto,bool blnNoConDefinicion) 
		{
			String strParaBusquedaString=""; 
			String strParaBusquedaCompuesto=""; 
			
			if(esCompuesto)
			{
				strParaBusquedaCompuesto="Constantes.getStrSchema()+\".\"+"+GetNombreClase(column.Table.ToString())+".getStrTableName()+\".\"+";
										  
			}
			
			if(column.DataType==DbType.DateTime ||column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				if(!esUnico)	
				{
				strParaBusquedaString="+\"%\"";
				}
			}
			
			String strParameterSelection=String.Empty;
			
			if(!blnNoConDefinicion)
			{
				strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
			}
			else
			{
				strParameterSelection="\r\n\r\n\t\t\t parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
			}
			
			
			
			strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralEqual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +","+strParaBusquedaCompuesto+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";
			
			if(esUltimo)
			{
			strParameterSelection+="ParameterTypeOperator.NONE);";		
			}
			else
			{
			strParameterSelection+=	"ParameterTypeOperator.AND);";	
			}
			
			strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+");";
		
			return strParameterSelection;
		}
		
public String GetQueryWhereSelectParametersIndicesTablasClases() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						strInitFuncion+="\r\n\tpublic static void "+"getQuery"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(QueryWhereSelectParameters queryWhereSelectParameters,";
						//connexion=Connexion.getNewConnexion();
						strBodyFuncion="\r\n\t\ttry {\r\n\t\t\t\r\n";
						strBodyFuncion+="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+".QuerySelect=\"\";\r\n";
						//strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");";		
						//strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.GetEntity(connexion,queryWhereSelectParameters);";
						//strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.getConnection().commit();";
						//finally\r\n\t\t{\r\n\t\t\tconnexion.getConnection().close();\r\n\t\t}\r\n\t
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\t\t}\r\n";
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							strInitFuncion+="\r\n\tpublic static void "+"getQuery"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(QueryWhereSelectParameters queryWhereSelectParameters,String sFinalQuery,";
						}
						else
						{
							strInitFuncion+="\r\n\tpublic static void "+"getQuery"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(QueryWhereSelectParameters queryWhereSelectParameters,";
						}
						
						//connexion=Connexion.getNewConnexion();
						strBodyFuncion="\r\n\t\ttry {\r\n\t\t\t\r\n";
						strBodyFuncion+="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+".QuerySelect=\"\";\r\n";
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							//strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
							strBodyFuncion+="\r\n\r\n\t\t\tsFinalQuery=\"\";\r\n";
							strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(sFinalQuery);";			
						}
						else
						{
							//strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.MYSQL,\"\");\r\n";		
						}
						
						//strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"s="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.GetEntities(connexion,queryWhereSelectParameters);";
						//strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.getConnection().commit();";
						//finally\r\n\t\t{\r\n\t\t\tconnexion.getConnection().close();\r\n\t\t}\r\n\t
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n";
					
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					
					bool esUnico=false;
					
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
						
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								}						
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false);
								}
								else
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false);
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								break;
							}
							
						count++;
					}
					
					strInitFuncion+=strParametersFuncion+")throws Exception {"+strBodyFuncion+strParameterSelection+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"\r\n\r\n";																																			
				}
			}
			
								
			return strInitFuncion; 
		}

public String GetRelationsWithParametersIndicesTablasClases() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strBodyFuncion="";
			String strEndBodyFuncion="";
			String strEndFuncion="";
			String strParametersFuncion="";
			String strParametersNameFuncion="";
			String strParameterSelection=String.Empty;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					strParametersFuncion="";
					strParametersNameFuncion="";
				
					if(indexSchema.IsUnique)
					{
						strInitFuncion+="\r\n\tpublic static void "+"cargarTablasRelaciones"+indexSchema.Name+"("+GetNombreClaseC(TablaBase.ToString())+" "+GetNombreClaseObjetoC(TablaBase.ToString())+",";
						//connexion=Connexion.getNewConnexion();
						strBodyFuncion="\r\n\t\ttry {\r\n\t\t\t\r\n";
						//strBodyFuncion+="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+".QuerySelect=\"\";\r\n";		
						strBodyFuncion+="\r\n\t\t\tConnexion connexion=Connexion.getNewConnexion();\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";
						strBodyFuncion+="\r\n\r\n\t\t\tBYDANCODE2";
						strBodyFuncion+="\r\n\t\t\t"+GetInitVariablesRelacionesReporteTablasClasesRelacionadas(TablaBase);
						
						//strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");";		
						//strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.GetEntity(connexion,queryWhereSelectParameters);";
						//strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.getConnection().commit();";
						//finally\r\n\t\t{\r\n\t\t\tconnexion.getConnection().close();\r\n\t\t}\r\n\t
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t\t}\r\n";
					}
					else
					{
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK"))
						{
							strInitFuncion+="\r\n\tpublic static void "+"cargarTablasRelaciones"+indexSchema.Name+"(ArrayList<"+GetNombreClaseC(TablaBase.ToString())+"> "+GetNombreClaseObjetoC(TablaBase.ToString())+"s,";
						}
						else
						{
							strInitFuncion+="\r\n\tpublic static void "+"cargarTablasRelaciones"+indexSchema.Name+"(ArrayList<"+GetNombreClaseC(TablaBase.ToString())+"> "+GetNombreClaseObjetoC(TablaBase.ToString())+"s,";
						}
						
						//connexion=Connexion.getNewConnexion();
						strBodyFuncion="\r\n\t\ttry {\r\n\t\t\t\r\n";
						
						strBodyFuncion+="\r\n\t\t\tConnexion connexion=Connexion.getNewConnexion();\r\n";
						strBodyFuncion+="\r\n\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";
						strBodyFuncion+="\r\n\r\n\t\t\tBYDANCODE2";
						strBodyFuncion+="\r\n\t\t\t"+GetInitVariablesRelacionesReporteTablasClasesRelacionadas(TablaBase);
						//strBodyFuncion+="\r\n\t\t\t"+GetNombreClaseC(TablaBase.ToString())+".QuerySelect=\"\";\r\n";
						
						strBodyFuncion+="\r\n\t\t\tfor("+GetNombreClaseC(TablaBase.ToString())+" "+GetNombreClaseObjetoC(TablaBase.ToString())+":"+GetNombreClaseObjetoC(TablaBase.ToString())+"s)";
						strBodyFuncion+=" {";
						
						strBodyFuncion+=GetRelacionesReporteTablasClasesRelacionadas(TablaBase,TablaBase,TablaBase,1,"");
						
						strBodyFuncion+="\r\n\t\t\t}";
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains(strFK))
						{
							//strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
							//strBodyFuncion+="\r\n\r\n\t\t\tstrFinalQuery=\"\";\r\n";			
							//strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(strFinalQuery);";			
						}
						else
						{
							//strBodyFuncion+="\r\n\t\t\tqueryWhereSelectParameters=new QueryWhereSelectParameters(ParameterDbType.DB2,\"\");\r\n";		
						}
						
						//strEndBodyFuncion="\r\n\r\n\t\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"s="+GetNombreClaseObjetoC(TablaBase.ToString())+"DataAccess.GetEntities(connexion,queryWhereSelectParameters);";
						//strEndBodyFuncion+="\r\n\r\n\t\t\tconnexion.getConnection().commit();";
						//finally\r\n\t\t{\r\n\t\t\tconnexion.getConnection().close();\r\n\t\t}\r\n\t
						strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n";
					
					}	
					int count=1;	
					strParametersFuncion="";
					strParametersNameFuncion="";	
					strParameterSelection="";
					String strParameterSelectionDefinicion="";					
					bool esUnico=false;
					
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
					{
						
						
						
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual")))
							{
								strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
						
								if(indexSchema.IsUnique)
								{
									esUnico=true;
								}						
							
								if(!count.Equals(indexSchema.MemberColumns.Count))
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,true);
									strParameterSelectionDefinicion+=GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false);
								}
								else
								{
									strParameterSelection+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,true);
									strParameterSelectionDefinicion+=GetParameterSelection(memberColumnSchema.Column,true,esUnico,false,false);
								}
							
								if(!indexSchema.MemberColumns.Count.Equals(count))
								{					
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
								}
							}
							else
							{
								if(!indexSchema.Name.Contains("BusquedaRango"))
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column); 
								}
								else
								{
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"; 
									
									strParametersFuncion+=",";
									strParametersNameFuncion+=",";	
									
									strParametersFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" "+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
									strParametersNameFuncion+=GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"; 
							
								}
								strParameterSelection+=GetParameterSelectionRango(memberColumnSchema.Column,indexSchema.Name);
								
								break;
							}
							
						count++;
					}
					
					strInitFuncion+=strParametersFuncion+")throws Exception {"+strBodyFuncion.Replace("BYDANCODE2",strParameterSelectionDefinicion).Replace("BYDANCODE1",strParameterSelection)+strEndBodyFuncion/*+strParametersNameFuncion+");"*/+strEndFuncion+"\r\n\r\n";																																			
				}
			}
			
								
			return strInitFuncion; 
		}

public string GetTotalizarFormula(ColumnSchema column) {
	String sTotalizar="";
	
	String strInitAux="";
	String strFinAux="";
	
	if(EsSmallIntColumn(column)) {
		strInitAux="(short)(";
		strFinAux=")";
	}
	//<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.set<%=GetNombreCompletoColumnaClaseC(TablaBase.Columns[i])%>(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.get<%=GetNombreCompletoColumnaClaseC(TablaBase.Columns[i])%>()+<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%=GetNombreCompletoColumnaClaseC(TablaBase.Columns[i])%>());
	
	sTotalizar=GetNombreClaseObjetoC(TablaBase.ToString())+"Aux.set"+GetNombreCompletoColumnaClaseC(column)+"("+strInitAux+GetNombreClaseObjetoC(TablaBase.ToString())+"Aux.get"+GetNombreCompletoColumnaClaseC(column)+"()+"+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreCompletoColumnaClaseC(column)+"()"+strFinAux+");";
	
	return sTotalizar;
}

</script>
<%//InicializarVariablesPorTabla(TablaBase);%>
<%//InicializarVariablesEmpresa();%>
<%=GetByDanLicence()%>
package <%=GetPackageFromEsConstantesFunciones()%>;

<%if(!EsConstantesFunciones) { %>
import org.json.JSONArray;
import org.json.JSONObject;
<% } %>
import org.apache.log4j.Logger;
<%//if(blnTieneTimestamp){%>
import java.sql.Time;
import java.sql.Timestamp;
<%//}%>

<%if(EsConstantesFunciones) { %>
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.swing.border.Border;
<% } %>
import java.io.InputStream;
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.Date;
//import java.util.ArrayList;

import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.GeneralEntity;
<%if(!EsConstantesFunciones) { %>
//LOGIC NO DEBE APARECER EN DESKTOP ONLY
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.GeneralEntityLogic;
<% }%>
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.GeneralEntityReturnGeneral;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.GeneralEntityParameterGeneral;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.DatoGeneral;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.OrderBy;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.Classe;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.Reporte;
import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%= strPackageUtils%>.ConstantesJsp;
import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%= strPackageBusiness%>.<%=strPackageDataAccess%>.ConstantesSql;

<%if(blnEsReporte && blnEsReporteAdditional){%>
import <%=Empresa%>.<%= Package%>.<%= Module%>resources.general.AuxiliarGeneral;
<%}%>

import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones;
import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClase(TablaBase.ToString())%><%=strParameter%><%=strReturnGeneral%>;
//import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClase(TablaBase.ToString())%><%=strParameterGeneral%>;

<%if(!EsConstantesFunciones) { %>
import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageLogic%>.*;
import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%= strPackageUtils%>.FuncionesJsp;
<%} %>
import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageLogic%>.DatosCliente;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageUtils%>.*;

import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageEntities%>.*;<%=GetEsImportPaqueteReporteParaEsReporteC(TablaBase,"import "+Empresa+"."+ Package+"."+Module+strPackageBusiness+"."+strPackageEntities)%>
<%if(!EsConstantesFunciones) { %>
<%if(ConCapaInterfaceLogic) {%>
<%=strCommentReporte%>import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageInterface%>.<%=GetNombreClase(TablaBase.ToString())%>Additionable;
<%}%>
<% } else { %>

<%if(/*!blnEsReporte &&*/ ConSessionBeans || ConRMI){%>

<%if(GenerarMe) { %>
<%if(!(ConSessionBeans && ConRMI && blnEstablaModulo)) {%>
import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackageService%>.<%=strEjb%>.<%=strEjbInterface%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClaseParametroC(TablaBase)%>Implementable;
<%} else {%>
//import java.rmi.server.UnicastRemoteObject;

import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackageService%>.<%=strEjb%>.<%=strEjbInterface%><%=GetEsPaqueteReporteC(TablaBase)%>.*;
<%if(!EsConstantesFunciones) { %>
import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackageService%>.<%=strEjb%>.<%=strEjbSession%><%=GetEsPaqueteReporteC(TablaBase)%>.*;
<%} %>
<%} %>

	<%if(ConSessionBeansHome) { %>
import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackageService%>.<%=strEjb%>.<%=strEjbInterface%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClaseParametroC(TablaBase)%>ImplementableHome;
	<%} %>
<%} %>

<%if(!blnEsReporte){%>
<%=strCommentAdditional%>import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackageService%>.<%=strEjb%>.<%=strEjbInterface%>.<%=GetNombreClaseParametroC(TablaBase)%>Additionable;

	<%if(ConSessionBeansHome) { %>	
<%=strCommentAdditional%>import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackageService%>.<%=strEjb%>.<%=strEjbInterface%>.<%=GetNombreClaseParametroC(TablaBase)%>AdditionableHome;
	<%} %>
<%} %>
<%} %>

<%=GetEsquemasImportClasesRelacionadas("import "+Empresa+"."+Package,strPackageBusiness+"."+strPackageEntities+/*GetEsPaqueteReporteC(TablaBase)+*/".*;")%>

<%=GetEsquemasImportClasesRelacionadas("import "+Empresa+"."+Package,strPackageUtils+/*GetEsPaqueteReporteC(TablaBase)+*/".*;")%>

<%=strPackageEntitiesExtra%>
<% } %>

//import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%= strPackageUtils%>.*;
//import <%=Empresa%>.<%= strPackageFramework%>.<%= Package%>.<%= strPackageBusiness%>.<%= strPackageLogic%>.*;
//import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageDataAccess%>.*;
//import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageLogic%>.*;
//import java.sql.SQLException;

//CONTROL_INCLUDE
<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>
import <%=strEmpresaSeguridad%>.<%=PackageSeguridad%>.<%=strPackageBusinessSeguridad%>.<%=strPackageEntitiesSeguridad%>.*;
<%}else{%>
import <%=strEmpresaSeguridad%>.<%=PackageSeguridad%>.<%=strPackageBusinessSeguridad%>.<%=strPackageEntitiesSeguridad%>.*;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.*;
<%}%>

<%if(blnEstablaModulo) {%>
import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackageUtils%>.report.*;
import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackageBusiness%>.<%=strPackageEntities%>.report.*;
<%if(!EsConstantesFunciones) { %>
import <%=Empresa%>.<%=Package%>.<%=Module%><%=strPackageBusiness%>.<%=strPackageLogic%>.report.*;
<%}%>
import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%>.<%=TablaBase.Owner%>Sql;
import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%>.<%=TablaBase.Owner%>SqlReporte;
<%}%>

<%if(!EsConstantesFunciones) { %>
<%if(blnEsReporte){%>
//LOGIC NO DEBE APARECER EN DESKTOP ONLY
import <%=Empresa%>.<%=Package%>.<%=Module%><%=strPackageBusiness%>.<%=strPackageLogic%>.<%=TablaBase.Owner%>LogicAdditional;
<%}%>
<%}%>

@SuppressWarnings("unused")
final public class <%=GetClaseFromEsConstantesFunciones()%>{		
	<%if(!EsConstantesFunciones) { %>
	<%=GetFuncionesModuloTablaReportes()%>
	//CONTROL_INICIO
	public  <%=GetNombreClase(TablaBase.ToString())%>LogicAdditional()throws Exception {
		super();
    }
	
	public static void check<%=GetNombreClaseC(TablaBase.ToString())%>ToSave(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,DatosCliente datosCliente,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_1
	}
	
	public static void check<%=GetNombreClaseC(TablaBase.ToString())%>ToSave(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,DatosCliente datosCliente,Connexion connexion,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_2
	}
	
	public static void check<%=GetNombreClaseC(TablaBase.ToString())%>ToSaveAfter(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,DatosCliente datosCliente,Connexion connexion,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_3
	}
	
	public static void check<%=GetNombreClaseC(TablaBase.ToString())%>ToSaves(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,DatosCliente datosCliente,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_4
	}
	
	public static void check<%=GetNombreClaseC(TablaBase.ToString())%>ToSaves(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,DatosCliente datosCliente,Connexion connexion,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_5
	}
	
	public static void check<%=GetNombreClaseC(TablaBase.ToString())%>ToSavesAfter(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,DatosCliente datosCliente,Connexion connexion,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_6
	}
	
	public static void check<%=GetNombreClaseC(TablaBase.ToString())%>ToGet(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,DatosCliente datosCliente,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_7
	}
	
	public static void check<%=GetNombreClaseC(TablaBase.ToString())%>ToGets(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,DatosCliente datosCliente,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_8
	}
	
	public static void update<%=GetNombreClaseC(TablaBase.ToString())%>ToSave(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_9
	}		
						
	public static void update<%=GetNombreClaseC(TablaBase.ToString())%>ToGet(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_10
	}	
	
	public static void updateJSONObject<%=GetNombreClaseC(TablaBase.ToString())%>Actions(String sTipoJsonResponse,JSONObject jsonObject<%=GetNombreClaseC(TablaBase.ToString())%>,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_11
	}
	
	public static String getJson<%=GetNombreClase(TablaBase.ToString())%>DataTable(String sTipoJsonResponse,<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>,ArrayList<DatoGeneral> arrDatoGeneral) {
		String sJsonDataTable="";
		
		//CONTROL_12
		
		return sJsonDataTable;
	}
	
	public static String getJson<%=GetNombreClase(TablaBase.ToString())%>sDataTable(String sTipoJsonResponse,<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,ArrayList<DatoGeneral> arrDatoGeneral) {
		String sJsonDataTable="";
		
		//CONTROL_13
		
		return sJsonDataTable;
	}
	
	public static JSONArray getJsonArray<%=GetNombreClase(TablaBase.ToString())%>ColumnsDefaultTable(String sTipoJsonResponse,ArrayList<DatoGeneral> arrDatoGeneral)throws Exception {	
		JSONArray jsonArray<%=GetNombreClase(TablaBase.ToString())%>sColumns = new JSONArray();
		
		//CONTROL_14
		
		return jsonArray<%=GetNombreClase(TablaBase.ToString())%>sColumns;
	}
	
	public static void updateJSONArray<%=GetNombreClaseC(TablaBase.ToString())%>ActionsColumns(String sTipoJsonResponse,JSONArray jsonObject<%=GetNombreClaseC(TablaBase.ToString())%>,ArrayList<DatoGeneral> arrDatoGeneral) {	
		//CONTROL_15
	}
	
	<%//if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>
	//PARA ACCIONES ADDITIONAL
	public Boolean ProcesarAccion(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,<%}%>Opcion opcionActual,Usuario usuarioActual,String sProceso,List<<%=GetNombreClaseC(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) throws Exception  {
		//CONTROL_16
		Boolean esProcesado=true;
		
		try {	
			this.connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();			
		
			this.connexion.commit();
			
		} catch(Exception e) {
			this.connexion.rollback();			
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
      		this.connexion.close();			
		}
		
		return esProcesado;
	}		
	
	//PARA ACCIONES NORMALES		
	public static GeneralEntityReturnGeneral procesarAccions(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>ParametroGeneralUsuario parametroGeneralUsuario,Modulo modulo,<%}%>Opcion opcion,Usuario usuario,GeneralEntityLogic generalEntityLogic,String sProceso,Object objects,GeneralEntityParameterGeneral generalEntityParameterGeneral,GeneralEntityReturnGeneral generalEntityReturnGeneral)throws Exception {				
		//CONTROL_17
		
		 try {	
			
			
			//GeneralEntityReturnGeneral generalEntityReturnGeneral=new GeneralEntityReturnGeneral();
				
			
			return generalEntityReturnGeneral;
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			;
		}
	}
	
	//ACCION TABLA PROCESO DESDE BUSQUEDA
	public static GeneralEntityReturnGeneral ProcesarAccion(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>ParametroGeneralUsuario parametroGeneralUsuario,Modulo moduloActual,<%}%>Opcion opcion,Usuario usuario,GeneralEntityLogic generalEntityLogic,String sProceso,Object objects,GeneralEntityParameterGeneral generalEntityParameterGeneral,GeneralEntityReturnGeneral generalEntityReturnGeneral) throws Exception  {
		//CONTROL_18
		//GeneralEntityReturnGeneral generalEntityReturnGeneral=new GeneralEntityReturnGeneral();
			
		try {	
			//this.connexion=connexion.getNewConnexion(this.connexionType,this.parameterDbType,this.entityManagerFactory);connexion.begin();			
		
			//this.connexion.commit();
			
		} catch(Exception e) {
			//this.connexion.rollback();			
			
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
      		//this.connexion.close();			
		}
		
		return generalEntityReturnGeneral;
	}
	
	//PARA EVENTOS GENERALES
	public static GeneralEntityReturnGeneral procesarEventos(<%if(GetConMaximoCodigoDatabaseFromPropertiesC(TablaBase.Database)){%>ParametroGeneralUsuario parametroGeneralUsuario,Modulo modulo,<%}%>Opcion opcion,Usuario usuario,GeneralEntityLogic generalEntityLogic,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipo,Object objects,Object object,GeneralEntityParameterGeneral generalEntityParameterGeneral,GeneralEntityReturnGeneral generalEntityReturnGeneral,Boolean isEsNuevoUpdate,ArrayList<Classe> clases)throws Exception {				
		//CONTROL_19		
		 try {	
				
			
			return generalEntityReturnGeneral;
			
		} catch(Exception e) {
			Funciones.manageException(logger,e);
			throw e;
			
      	} finally {
			;
		}
	}
	
	public static Boolean validarSaveRelaciones(GeneralEntity generalEntity,GeneralEntityLogic generalEntityLogic) {
		//CONTROL_20
		Boolean validado=true;

		return validado;	
	}
	
	public static void updateRelacionesToSave(GeneralEntity generalEntity,GeneralEntityLogic generalEntityLogic) {	
		//CONTROL_21
	}
	
	public static void updateRelacionesToSaveAfter(GeneralEntity generalEntity,GeneralEntityLogic generalEntityLogic) {	
		//CONTROL_22
	}
	
	<%if(TablasBaseForReporte!=null && TablasBaseForReporte.Count>0){%>
	<%= GetIndicesTablasClasesReportes() %>	
	<%}%>
	
	<%if(blnEsReporte && blnEsReporteAdditional){%>
	<%=GetIndicesLogicAdditionalReportesTablasClases(TablaBase)%>
	<%}%>
	
	<%if(blnEsReporte && blnEsProceso/*&& blnEsReporteAdditional*/){%>
	<%=GetProcesarInformacionTablasClases(TablaBase,true,false)%>
	<%=GetProcesarInformacionTablasClases(TablaBase,true,true)%>
	<%}%>	
	//CONTROL_FUNCION1
	
	
	<% } %>	
	
	
	<%if(EsConstantesFunciones) { %>		
	
	public static String S_TIPOREPORTE_EXTRA="";
	
	//USADO MAS EN RELACIONADO PARA MANTENIMIENTO MAESTRO-DETALLE
	public static Integer TAMANIO_ALTO_MAXIMO_TABLADATOS=<%= GetWidthAltoMaximoTablaFromPropertiesC(TablaBase,EsSwing,false) %>;
	public static Integer TAMANIO_ALTO_MINIMO_TABLADATOS=<%= GetWidthAltoMinimoTablaFromPropertiesC(TablaBase,EsSwing,false) %>;
	
	//PARA TABLA RELACIONES(DESCRIPCION HEIGHTPE_REL_TAB)
	public static Integer ALTO_TABPANE_RELACIONES=<%= GetWidthAltoTabPanelRelacionesTableFromPropertiesC(TablaBase,EsSwing) %> + Funciones2.getValorProporcion(Constantes.ISWING_ALTO_TABPANE,<%=GetAltoRelacionesTabPorcentajeExtraFromPropertiesC(TablaBase)%>);
	
	//PARA TABLA RELACIONADO(DESCRIPTION HEIGHTPE_REL)
	public static Integer TAMANIO_ALTO_MAXIMO_TABLADATOSREL=<%= GetWidthAltoMaximoTablaFromPropertiesC(TablaBase,EsSwing,true) %> + Funciones2.getValorProporcion(Constantes.ISWING_TAMANIOMAXIMO_TABLADATOSREL,<%=GetAltoRelacionesPorcentajeExtraFromPropertiesC(TablaBase)%>);		
	public static Integer TAMANIO_ALTO_MINIMO_TABLADATOSREL=<%= GetWidthAltoMinimoTablaFromPropertiesC(TablaBase,EsSwing,true) %> + Funciones2.getValorProporcion(Constantes.ISWING_TAMANIOMINIMO_TABLADATOSREL,<%=GetAltoRelacionesPorcentajeExtraFromPropertiesC(TablaBase)%>);	
	
	//PARA CAMBIAR TODO--> SE CAMBIA EN TABLA RELACIONES Y TABLAS RELACIONADOS
	/*
	PARA MANEJAR EL TAB RELACIONES CON TABLA DE DATOS SE DEBE MODIFICAR Y VERIFICAR LOS VALORES CONTANTES:	
		final public static Integer ISWING_TAMANIOMAXIMO_TABLADATOSREL=240;//230;350;		
		final public static Integer ISWING_TAMANIOMINIMO_TABLADATOSREL=240;//230;260
		
		final public static Integer ISWING_ALTO_TABPANE=375;//375;400;260;
	CASO CONTRARIO, ESTOS VALORES SERIAN PARA CADA CASO (NO CONSTANTES)
	
	NOTA:
	* LA ALINEACION HORIZONTAL,FALTA
	*/
	
	
	public static final String SFINALQUERY=<%=GetFinalQueryTableC(TablaBase)%>;	
	public static final String SNOMBREOPCION="<%=GetNombreClaseC(TablaBase.ToString())%><%=GetSufijoJSPFinalTable()%><%=strGlobalSeguridadExtensionOpcion%>";
	public static final String SPATHOPCION="<%=GetRelativePathNavegacionFromTableFromPropertiesC(TablaBase)%>";	
	public static final String SPATHMODULO="<%=Module.Replace(".","/")%>";		
	public static final String SPERSISTENCECONTEXTNAME="";
	public static final String SPERSISTENCENAME="<%=GetNombreClase(TablaBase.ToString())%>"+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.SPERSISTENCECONTEXTNAME+Constantes.SPERSISTENCECONTEXTNAME;
	public static final String SEJBNAME="<%=GetNombreClaseC(TablaBase.ToString())%>HomeRemote";
	public static final String SEJBNAME_ADDITIONAL="<%=GetNombreClaseC(TablaBase.ToString())%>HomeRemoteAdditional";
	
	<%if(ConSessionBeansHome) { %>	
	<%if(!blnEsReporte){%>
	<%if(GenerarMe) { %>
	public static final String SEJBNAME_INTERFACE_PATH=<%=GetNombreClaseParametroC(TablaBase)%>Implementable.class.getName();	
	<%if(blnConAdditional) { //blnConMaxCodigo%>	
	public static final String SEJBNAME_INTERFACE_ADDITIONAL_PATH=<%=GetNombreClaseParametroC(TablaBase)%>Additionable.class.getName();
	<%}%>
	<%}%>	
	<%} else {%>
	<%if(GenerarMe) { %>
	public static final String SEJBNAME_INTERFACE_PATH="NONE";	
	<%if(blnConMaxCodigo || blnConAdditional) { %>	
	public static final String SEJBNAME_INTERFACE_ADDITIONAL_PATH="NONE";
	<%}%>
	<%}%>
	<%}%>
	<%}%>
	
	//RMI
	public static final String SLOCALEJBNAME_RMI=<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.SCHEMA+"_"+<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.SEJBNAME+"_"+Constantes.SEJBLOCAL;//"<%= Package%>/<%=GetNombreClase(TablaBase.ToString())%>HomeRemote/local"
	public static final String SREMOTEEJBNAME_RMI=<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.SCHEMA+"_"+<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.SEJBNAME+"_"+Constantes.SEJBREMOTE;//remote	
	
	public static final String SLOCALEJBNAMEADDITIONAL_RMI=<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.SCHEMA+"_"+<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones.SEJBNAME+Constantes.SEJBADDITIONAL+"_"+Constantes.SEJBLOCAL;//"<%= Package%>/<%=GetNombreClase(TablaBase.ToString())%>HomeRemote/local"
	public static final String SREMOTEEJBNAMEADDITIONAL_RMI=<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.SCHEMA+"_"+<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones.SEJBNAME+Constantes.SEJBADDITIONAL+"_"+Constantes.SEJBREMOTE;//remote		
	//RMI
	
	//JBOSS5.1
	public static final String SLOCALEJBNAME=Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL;//"<%= Package%>/<%=GetNombreClase(TablaBase.ToString())%>HomeRemote/local"
	public static final String SREMOTEEJBNAME=Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE;//remote	
	
	public static final String SLOCALEJBNAMEADDITIONAL=Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones.SEJBNAME+Constantes.SEJBADDITIONAL+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL;//"<%= Package%>/<%=GetNombreClase(TablaBase.ToString())%>HomeRemote/local"
	public static final String SREMOTEEJBNAMEADDITIONAL=Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones.SEJBNAME+Constantes.SEJBADDITIONAL+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE;//remote		
	//JBOSS5.1
	
	<%if(ConSessionBeansHome) { %>
	//JBOSS8.1
	<%//if(!blnEsReporte){%>
	<%if(GenerarMe) { %>
	public static final String SLOCALEJBNAME_JBOSS81="ejb:"+Constantes.SNANME_FILE_EAR_EJB+"/"+Constantes.SNANME_FILE_EJB+"/"+SEJBNAME+"!" + SEJBNAME_INTERFACE_PATH;
	public static final String SREMOTEEJBNAME_JBOSS81="ejb:"+Constantes.SNANME_FILE_EAR_EJB+"/"+Constantes.SNANME_FILE_EJB+"/"+SEJBNAME+"!" + SEJBNAME_INTERFACE_PATH;	
		
	<%if(blnConAdditional) { //blnConMaxCodigo%>	
	public static final String SLOCALEJBNAMEADDITIONAL_JBOSS81="ejb:"+Constantes.SNANME_FILE_EAR_EJB+"/"+Constantes.SNANME_FILE_EJB+"/"+SEJBNAME_ADDITIONAL+"!" + SEJBNAME_INTERFACE_ADDITIONAL_PATH;
	public static final String SREMOTEEJBNAMEADDITIONAL_JBOSS81="ejb:"+Constantes.SNANME_FILE_EAR_EJB+"/"+Constantes.SNANME_FILE_EJB+"/"+SEJBNAME_ADDITIONAL+"!" + SEJBNAME_INTERFACE_ADDITIONAL_PATH;
	<%}%>
	<%}%>
	<%//}%>
	//JBOSS8.1
	<%}%>
	
	public static final String SSESSIONNAME=<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.OBJECTNAME + Constantes.SSESSIONBEAN;	
	public static final String SSESSIONNAME_FACE=Constantes.SFACE_INI+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.SSESSIONNAME + Constantes.SFACE_FIN;	
	public static final String SREQUESTNAME=<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.OBJECTNAME + Constantes.SREQUESTBEAN;			
	public static final String SREQUESTNAME_FACE=Constantes.SFACE_INI+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.SREQUESTNAME + Constantes.SFACE_FIN;	
	public static final String SCLASSNAMETITULOREPORTES="<%=GetTituloNombreTableFromPropertiesC(TablaBase)%><%=GetPluralTituloNombreTableFromPropertiesC(TablaBase)%>";
	public static final String SRELATIVEPATH="<%=GetRelativePathC(TablaBase)%>";
	public static final String SCLASSPLURAL="<%=GetPluralTituloNombreTableFromPropertiesC(TablaBase)%>";
	public static final String SCLASSWEBTITULO="<%=GetTituloNombreTableFromPropertiesC(TablaBase)%>";
	public static final String SCLASSWEBTITULO_LOWER="<%=GetTituloNombreTableLowerFromPropertiesC(TablaBase)%>";
	public static Integer INUMEROPAGINACION=10;
	public static Integer ITAMANIOFILATABLA=<%=SWING_HEIGHT_TAMFILATABLA%>;
	public static Boolean ES_DEBUG=false;
	public static Boolean CON_DESCRIPCION_DETALLADO=false;
	
	public static final String CLASSNAME="<%=GetNombreClase(TablaBase.ToString())%>";
	public static final String OBJECTNAME="<%=GetNombreClaseObjetoC(TablaBase.ToString())%>";
	
	//PARA FORMAR QUERYS
	public static final String SCHEMA=<%=GetSchemaTableFromPropertiesLocal()%>;	
	public static final String TABLENAME="<%=GetNombreTablaC(TablaBase)%>";
	public static final String SQL_SECUENCIAL=SCHEMA+"."+TABLENAME+"_id_seq";
	
	public static String QUERYSELECT="select <%=GetNombreClaseObjetoC(TablaBase.ToString())%> from "+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.SPERSISTENCENAME+" <%=GetNombreClaseObjetoC(TablaBase.ToString())%>";
	public static String QUERYSELECTNATIVE="select <% for (int i = 0; i < TablaBase.Columns.Count; i++){ %><%= GetSqlParameterSelectC(TablaBase.Columns[i],TablaBase,Schema) %><% if (i < TablaBase.Columns.Count - 1) { %>,<% } %><% } %> from "+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.SCHEMA+"."+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.TABLENAME;//+" as "+<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.TABLENAME;
	
	//AUDITORIA
	public static Boolean ISCONAUDITORIA=<%=GetConAuditoriaValue()%>;	
	public static Boolean ISCONAUDITORIADETALLE=<%=GetConAuditoriaDetalleValue()%>;	
	
	//GUARDAR SOLO MAESTRO DETALLE FUNCIONALIDAD
	public static Boolean ISGUARDARREL=<%=GetEsGuardarRelaciones()%>;
	
	<%if(!blnEsReporte){%>
	<%if(blnConAdditional) {%>
	
	protected <%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional <%=GetNombreClaseObjetoC(TablaBase.ToString())%>ConstantesFuncionesAdditional=null;
	
	public <%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional get<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional() {
		return this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ConstantesFuncionesAdditional;
	}
	
	public void set<%=GetNombreClase(TablaBase.ToString())%>ConstantesFuncionesAdditional(<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFuncionesAdditional <%=GetNombreClaseObjetoC(TablaBase.ToString())%>ConstantesFuncionesAdditional) {
		try {
			this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ConstantesFuncionesAdditional=<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ConstantesFuncionesAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	<%}%>
	<%}%>
	
	<%if(blnConFuncionalidadLogicVersion1) {%>
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
    <%= GetNombreCampoTablaC(TablaBase.Columns[i]) %>
	<% } %>	
	
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
    <%= GetNombreCampoTablaNativeC(TablaBase.Columns[i]) %>
	<% } %>	
	<% } %>	
	
	public static final String <%=strIdGetSet.ToUpper()%>=<%=GetIdNameC(TablaBase)%>;
	public static final String <%=strVersionRowGetSet.ToUpper()%>=ConstantesSql.VERSIONROW;
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
    <%= GetNombreCampoTablaNativeUpperConstantC(TablaBase.Columns[i]) %>
	<% } %>	
	//TITULO CAMPO
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired/*||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow*/){continue; } %>
    <%= GetTituloCampoTablaUpperConstantC(TablaBase.Columns[i]) %>
	<% } %>	
	
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
	<%=GetColumnaBooleanFuncionDescripcion(TablaBase.Columns[i]) %>	
 	<% } %>
	
	public static String get<%=GetNombreClaseC(TablaBase.ToString())%>LabelDesdeNombre(String sNombreColumna) {
		String sLabelColumna="";
		
		<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
		<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
		<%= GetTituloDesdeNombreCampoTablaUpperConstantC(TablaBase.Columns[i],false) %>
		<% } %>
		
		if(sLabelColumna.equals("")) {
			sLabelColumna=sNombreColumna;	
		}
		return sLabelColumna;
	}
	
	
	<%if(ConSessionBeans || ConRMI ){%>
	<%if(GenerarMe){%>
	public static <%=GetNombreClaseParametroC(TablaBase)%>Implementable get<%=GetNombreClaseC(TablaBase.ToString())%>ImplementableEjbReference(String s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference) {
		<%=GetNombreClaseParametroC(TablaBase)%>Implementable <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Implementable=null;
		
		try {
			if(Constantes.ISUSAEJBREMOTE) {
				if(Constantes.ISUSAEJBRMI) {
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Implementable=(<%=GetNombreClaseParametroC(TablaBase)%>Implementable)FuncionesServicio.GetServicioRmi(s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference);//s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference	
				} else {
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Implementable=(<%=GetNombreClaseParametroC(TablaBase)%>Implementable)Funciones.getInitialContextEjb().lookup(s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference);	
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Implementable;
	}
	
	<%if(ConSessionBeansHome) { %>	
	public static <%=GetNombreClaseParametroC(TablaBase)%>ImplementableHome get<%=GetNombreClaseC(TablaBase.ToString())%>ImplementableHomeEjbReference(String s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference) {
		<%=GetNombreClaseParametroC(TablaBase)%>ImplementableHome <%=GetNombreClaseObjetoC(TablaBase.ToString())%>ImplementableHome=null;
		
		try {
			if(Constantes.ISUSAEJBHOME) {
				if(Constantes.ISUSAEJBRMI) {
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ImplementableHome=(<%=GetNombreClaseParametroC(TablaBase)%>ImplementableHome)FuncionesServicio.GetServicioRmi(s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference);//s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference	
				} else {
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ImplementableHome=(<%=GetNombreClaseParametroC(TablaBase)%>ImplementableHome)Funciones.getInitialContextEjb().lookup(s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference);	
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return <%=GetNombreClaseObjetoC(TablaBase.ToString())%>ImplementableHome;
	}	
	<%}%>
	<%}%>
	
	<%if(!blnEsReporte){%>
	<%=strCommentAdditional%>public static <%=GetNombreClaseParametroC(TablaBase)%>Additionable get<%=GetNombreClaseC(TablaBase.ToString())%>AdditionableEjbReference(String s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference) {
	<%=strCommentAdditional%>	<%=GetNombreClaseParametroC(TablaBase)%>Additionable <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Additionable=null;
		
	<%=strCommentAdditional%>	try {
	<%=strCommentAdditional%>		if(Constantes.ISUSAEJBREMOTE && Constantes.ISUSAEJBREMOTEADDITIONAL) {
	<%=strCommentAdditional%>			if(Constantes.ISUSAEJBRMI) {
	<%=strCommentAdditional%>				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Additionable=(<%=GetNombreClaseParametroC(TablaBase)%>Additionable)FuncionesServicio.GetServicioRmi(s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference);//s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference	
	<%=strCommentAdditional%>			} else {
	<%=strCommentAdditional%>				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Additionable=(<%=GetNombreClaseParametroC(TablaBase)%>Additionable)Funciones.getInitialContextEjb().lookup(s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference);										
	<%=strCommentAdditional%>			}
	<%=strCommentAdditional%>		}
	<%=strCommentAdditional%>	} catch (Exception e) {
			
	<%=strCommentAdditional%>	}
	<%=strCommentAdditional%>	return <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Additionable;
	<%=strCommentAdditional%>}
			
	<%if(ConSessionBeansHome) { %>
	<%=strCommentAdditional%>public static <%=GetNombreClaseParametroC(TablaBase)%>AdditionableHome get<%=GetNombreClaseC(TablaBase.ToString())%>AdditionableHomeEjbReference(String s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference) {
	<%=strCommentAdditional%>	<%=GetNombreClaseParametroC(TablaBase)%>AdditionableHome <%=GetNombreClaseObjetoC(TablaBase.ToString())%>AdditionableHome=null;
		
	<%=strCommentAdditional%>	try {
	<%=strCommentAdditional%>		if(Constantes.ISUSAEJBHOME && Constantes.ISUSAEJBREMOTEADDITIONAL) {
	<%=strCommentAdditional%>			if(Constantes.ISUSAEJBRMI) {	
	<%=strCommentAdditional%>				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>AdditionableHome=(<%=GetNombreClaseParametroC(TablaBase)%>AdditionableHome)FuncionesServicio.GetServicioRmi(s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference);//s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference
	<%=strCommentAdditional%>			} else {
	<%=strCommentAdditional%>				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>AdditionableHome=(<%=GetNombreClaseParametroC(TablaBase)%>AdditionableHome)Funciones.getInitialContextEjb().lookup(s<%=GetNombreClaseC(TablaBase.ToString())%>EjbReference);											
	<%=strCommentAdditional%>			}
	<%=strCommentAdditional%>		}
	<%=strCommentAdditional%>	} catch (Exception e) {
			
	<%=strCommentAdditional%>	}
	<%=strCommentAdditional%>	return <%=GetNombreClaseObjetoC(TablaBase.ToString())%>AdditionableHome;
	<%=strCommentAdditional%>}		
	<%} %>
	<%} %>
	<%}%>
	
	public static String getNombreEjb_JBoss81(String sAplicacion,String sModule,String sClaseEjb,String sInterfaceEjb) throws Exception {
		String sDescripcion="";

		sDescripcion="ejb:"+sAplicacion+"/"+sModule+"/"+sClaseEjb+"!" + sInterfaceEjb;
		
		return sDescripcion;
	}
	
	<%=GetActionsFunctionsTableMaintenance(TablaBase)%>
	
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
		<%=GetColumnaBooleanFuncionDescripcionC(TablaBase.Columns[i]) %>	
 		<% } %>		
	
	public static String get<%=GetNombreClaseC(TablaBase.ToString())%>Descripcion(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>) {
		String sDescripcion=Constantes.SCAMPONONE;
			
		if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%> !=null/* && <%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%=strIdGetSet%>()!=0*/) {
			<%=GetDescripcionComboColumnFromPropertiesFinalVersionC(TablaBase,true)%>//<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=GetDescripcionComboColumnFromProperties(TablaBase)%>;
		}
			
		return sDescripcion;
	}
	
	public static String get<%=GetNombreClaseC(TablaBase.ToString())%>DescripcionDetallado(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>) {
		String sDescripcion="";
			
		<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
		<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired/*||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow*/){continue; } %>
		<%= GetTituloDesdeNombreCampoTablaUpperConstantC(TablaBase.Columns[i],true) %>
		<% } %>
			
		return sDescripcion;
	}
	
	public static void set<%=GetNombreClaseC(TablaBase.ToString())%>Descripcion(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,String sValor) throws Exception {			
		if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%> !=null) {
			<%=GetSetDescripcionComboColumnFromPropertiesFinalVersion(TablaBase)%>//<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=GetDescripcionComboColumnFromProperties(TablaBase)%>;
		}		
	}
	
	<%//if(blnConFuncionalidadLogicVersion1) {%>
			<%// for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
		<%=GetForeignKeysMemberColumnaFuncionDescripcionC(TablaBase,TablaBase.ToString()) %>
 		<%// } %>	 
	<%//}%>
	
	<%=GetForeignKeysColumnListaValorCodigoC(TablaBase)%>
	
	<%=GetNombresBusquedasIndicesTablas()%>	 
	
	<%=GetDetalleIndicesTablasClases()%>
	
	
	<%if(false/*GetEsReporteFromPropertiesC(TablaBase)*/){%>
		<%=GetQueryWhereSelectParametersIndicesTablasClases()%>
	<%}%>	
	
	<%if(false/*GetEsReporteFromPropertiesC(TablaBase)*/){%>
		<%=GetRelationsWithParametersIndicesTablasClases()%>
	<%}%>
	
	<%if(blnConFuncionalidadLogicVersion1) {%>
	public static String getColumnLabel<%=strIdGetSet%>() {
		return ConstantesJsp.SIDLABEL;
	}
	
	public static String getColumnLabel<%=strVersionRowGetSet%>() {
		return ConstantesJsp.SVERSIONROWLABEL;
	}
	
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
    <%= GetLabelCampoTablaC(TablaBase.Columns[i]) %>
	<% } %>	
	
	<%}%>
	
	<%if(VerificarTablaValorCatalogoGeneralC(TablaBase)){%>
	public static String getQueryStringValoresLista<%=GetNombreClaseC(TablaBase.ToString())%>(String sCodigoLista<%=GetNombreClaseC(TablaBase.ToString())%>) throws Exception  {
		String sQueryStringValoresLista="";
		<%= GetQueryTablaValorCatalogoGeneral(TablaBase) %>
		
		return sQueryStringValoresLista;
	}
	<%}%>	
	
	public static void quitarEspacios<%=GetNombreClaseC(TablaBase.ToString())%>(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,ArrayList<DatoGeneral> arrDatoGeneral) throws Exception  {
		<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
		<%if(!EsTipoColumnaStringParaTrimClaseC(TablaBase.Columns[i])|| GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i]) || TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
		<%= GetSetParameterClaseMethodC(TablaBase.Columns[i],GetNombreClaseObjetoC(TablaBase.ToString()),true) %>
		<% } %>
	}
	
	public static void quitarEspacios<%=GetNombreClaseC(TablaBase.ToString())%>s(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,ArrayList<DatoGeneral> arrDatoGeneral) throws Exception  {
		
		for(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
		<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
		<%if(!EsTipoColumnaStringParaTrimClaseC(TablaBase.Columns[i]) || GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i]) || TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
			<%= GetSetParameterClaseMethodC(TablaBase.Columns[i],GetNombreClaseObjetoC(TablaBase.ToString()),true) %>
		<% } %>
		
		}
	}
	
	public static void InicializarGeneralEntityAuxiliares<%=GetNombreClaseC(TablaBase.ToString())%>(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,Boolean conAsignarBase,Boolean conInicializarAuxiliar) throws Exception  {
		
		if(conAsignarBase && <%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getConCambioAuxiliar()) {
			<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsDeleted(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsDeletedAuxiliar());	
			<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsNew(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsNewAuxiliar());	
			<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsChanged(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsChangedAuxiliar());
			
			//YA RESTAURO, NO DEBERIA HACERLO NUEVAMENTE AL MENOS NO HASTA GUARDAR OTRA VEZ
			<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setConCambioAuxiliar(false);
		}
		
		if(conInicializarAuxiliar) {
			<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsDeletedAuxiliar(false);	
			<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsNewAuxiliar(false);	
			<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsChangedAuxiliar(false);
			
			<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setConCambioAuxiliar(false);
		}
	}
	
	public static void InicializarGeneralEntityAuxiliares<%=GetNombreClaseC(TablaBase.ToString())%>s(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,Boolean conAsignarBase,Boolean conInicializarAuxiliar) throws Exception  {
		
		for(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%> : <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
			if(conAsignarBase && <%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getConCambioAuxiliar()) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsDeleted(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsDeletedAuxiliar());	
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsNew(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsNewAuxiliar());	
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsChanged(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsChangedAuxiliar());
				
				//YA RESTAURO, NO DEBERIA HACERLO NUEVAMENTE AL MENOS NO HASTA GUARDAR OTRA VEZ
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setConCambioAuxiliar(false);
			}
			
			if(conInicializarAuxiliar) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsDeletedAuxiliar(false);	
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsNewAuxiliar(false);	
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setIsChangedAuxiliar(false);
				
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.setConCambioAuxiliar(false);
			}
		}
	}	
	
	public static void InicializarValores<%=GetNombreClaseC(TablaBase.ToString())%>(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,Boolean conEnteros) throws Exception  {
		<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
		<%if(!EsTipoColumnaValorParaClaseC(TablaBase.Columns[i]) || GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i]) || TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
		<%= GetSetParameterClaseMethodC(TablaBase.Columns[i],GetNombreClaseObjetoC(TablaBase.ToString()),true) %>
		<% } %>
		
		if(conEnteros) {
			Short ish_value=0;
			
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
			<%if(!EsTipoColumnaValorEnteroParaClaseC(TablaBase.Columns[i]) || GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i]) || TablaBase.Columns[i].IsForeignKeyMember || TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
			<%= GetSetParameterClaseMethodC(TablaBase.Columns[i],GetNombreClaseObjetoC(TablaBase.ToString()),true) %>
			<% } %>
		}
	}		
	
	public static void InicializarValores<%=GetNombreClaseC(TablaBase.ToString())%>s(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,Boolean conEnteros) throws Exception  {
		
		for(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
		<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
		<%if(!EsTipoColumnaValorParaClaseC(TablaBase.Columns[i]) || GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i]) || TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
			<%= GetSetParameterClaseMethodC(TablaBase.Columns[i],GetNombreClaseObjetoC(TablaBase.ToString()),true) %>
		<% } %>		
		
			if(conEnteros) {
				Short ish_value=0;
				
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
			<%if(!EsTipoColumnaValorEnteroParaClaseC(TablaBase.Columns[i]) || GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i]) || TablaBase.Columns[i].IsForeignKeyMember || TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
				<%= GetSetParameterClaseMethodC(TablaBase.Columns[i],GetNombreClaseObjetoC(TablaBase.ToString()),true) %>
			<% } %>		
			}
		}				
	}
	
	public static void TotalizarValoresFila<%=GetNombreClaseC(TablaBase.ToString())%>(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux) throws Exception  {
		<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.InicializarValores<%=GetNombreClaseC(TablaBase.ToString())%>(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux,true);
		
		for(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getsType().equals(Constantes2.S_TOTALES)) {
				continue;
			}
			
		<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
		<%if(!EsTipoColumnaValorGeneralParaClaseC(TablaBase.Columns[i]) || GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i]) || TablaBase.Columns[i].IsForeignKeyMember|| TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
			<%=GetTotalizarFormula(TablaBase.Columns[i])%>			
		<%//= GetSetParameterClaseMethodC(TablaBase.Columns[i],GetNombreClaseObjetoC(TablaBase.ToString())+"Aux",true) %>
		<% } %>
		}
	}
	
	public static ArrayList<String> getArrayColumnasGlobales<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<DatoGeneral> arrDatoGeneral) throws Exception  {
		ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
		
		arrColumnasGlobales=<%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.getArrayColumnasGlobales<%=GetNombreClaseC(TablaBase.ToString())%>(arrDatoGeneral,new ArrayList<String>());
		
		return arrColumnasGlobales;
	}		
	
	public static ArrayList<String> getArrayColumnasGlobales<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<DatoGeneral> arrDatoGeneral,ArrayList<String> arrColumnasGlobalesNo) throws Exception  {
		ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
		Boolean noExiste=false;
		
		<%=GetSetFinalQueryVariablesGlobales()%>
		
		return arrColumnasGlobales;
	}
	
	public static ArrayList<String> getArrayColumnasGlobalesNo<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<DatoGeneral> arrDatoGeneral) throws Exception  {
		ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
		
		<%=GetSetFinalQueryVariablesGlobalesNo()%>
		
		return arrColumnasGlobales;
	}
	
	public static Boolean ExisteEnLista(List<<%=GetNombreClaseC(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,Boolean conIdNulo) throws Exception  {
		Boolean existe=false;
		
		for(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux!=null && <%=GetNombreClaseObjetoC(TablaBase.ToString())%>!=null) {
				if((<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getId()==null && <%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getId()==null) && conIdNulo) {
					existe=true;
					break;
					
				} else if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getId()!=null && <%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getId()!=null){
					if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getId().equals(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getId())) {
						existe=true;
						break;
					}
				}
			}
		}
		
		return existe;
	}
		
	public static ArrayList<DatoGeneral> getTotalesLista<%=GetNombreClaseC(TablaBase.ToString())%>(List<<%=GetNombreClaseC(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) throws Exception  {
		ArrayList<DatoGeneral> arrTotalesDatoGeneral=new ArrayList<DatoGeneral>();
		DatoGeneral datoGeneral=new DatoGeneral();
		
		<%for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
		<%if(!ValidacionCampoTotalizar(TablaBase.Columns[i])||TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||(TablaBase.Columns[i].Name==strId )||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
		<%= GetVariableTotalClase(TablaBase.Columns[i]) %>
		<% } %>
	
		for(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>: <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {			
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getsType().equals(Constantes2.S_TOTALES)) {
				continue;
			}
			
			<%for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(!ValidacionCampoTotalizar(TablaBase.Columns[i])||TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||(TablaBase.Columns[i].Name==strId )||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
			<%= GetTotalVariableTotalClase(TablaBase.Columns[i]) %>
			<% } %>
		}
		
		<%for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
		<%if(!ValidacionCampoTotalizar(TablaBase.Columns[i])||TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||(TablaBase.Columns[i].Name==strId )||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
		<%= GetSetVariableTotalClase(TablaBase.Columns[i]) %>
		<% } %>
		
		return arrTotalesDatoGeneral;
	}
	
	public static ArrayList<OrderBy> getOrderByLista<%=GetNombreClaseC(TablaBase.ToString())%>() throws Exception  {
		ArrayList<OrderBy> arrOrderBy=new ArrayList<OrderBy>();
		OrderBy orderBy=new OrderBy();
		
		<%=GetTodosTiposColumnas(true)%>
		
		return arrOrderBy;
	}
	
	public static List<String> getTodosTiposColumnas<%=GetNombreClaseC(TablaBase.ToString())%>() throws Exception  {
		List<String> arrTiposColumnas=new ArrayList<String>();
		String sTipoColumna=new String();
		
		<%=GetTodosTiposColumnas(false)%>
		
		return arrTiposColumnas;
	}
	
	public static ArrayList<Reporte> getTiposSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>() throws Exception  {
		return <%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.getTiposSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>(false,true,true,true,true);
	}
	
	public static ArrayList<Reporte> getTiposSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>(Boolean conFk) throws Exception  {
		return <%=GetNombreClase(TablaBase.ToString())%><%=strClaseConstantesFunciones%>.getTiposSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>(conFk,true,true,true,true);
	}
	
	public static ArrayList<Reporte> getTiposSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>(Boolean conFk,Boolean conStringColumn,Boolean conValorColumn,Boolean conFechaColumn,Boolean conBitColumn) throws Exception  {
		ArrayList<Reporte> arrTiposSeleccionarTodos=new ArrayList<Reporte>();
		Reporte reporte=new Reporte();
		
		<%=GetTiposColumnsSeleccionarTodos()%>
		
		return arrTiposSeleccionarTodos;
	}
	
	public static ArrayList<Reporte> getTiposRelaciones<%=GetNombreClaseC(TablaBase.ToString())%>(Boolean conEspecial) throws Exception  {
		ArrayList<Reporte> arrTiposRelacionesTodos=new ArrayList<Reporte>();
		Reporte reporte=new Reporte();
		
		//ESTO ESTA EN CONTROLLER
		<%//=GetAddTiposClassesRelacionadasC(TablaBase,"",true,false)%>
		
		<%//=GetTiposColumnsSeleccionarTodos()%>
		
		return arrTiposRelacionesTodos;
	}
	
	public static void refrescarForeignKeysDescripciones<%=GetNombreClaseC(TablaBase.ToString())%>(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux) throws Exception {
		<%=GetFuncionesGetTablasClasesRelacionadasForeigKeysDescriptionC(TablaBase)%>		
	}
	
	public static void refrescarForeignKeysDescripciones<%=GetNombreClaseC(TablaBase.ToString())%>(<%=strTypeCollection%><<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>sTemp) throws Exception {
		for(<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sTemp) {
			<%=GetFuncionesGetTablasClasesRelacionadasForeigKeysDescriptionC(TablaBase)%>
		}
	}
	
	public static ArrayList<Classe> getClassesForeignKeysOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {
		try {
			ArrayList<Classe> classes=new ArrayList<Classe>();	
			
			if(deepLoadType.equals(DeepLoadType.NONE)) {
				<%=GetAddClassesForeignKeyC(TablaBase,false)%>
				
			} else if(deepLoadType.equals(DeepLoadType.INCLUDE)) {
				<%=GetAddClassesForeignKeyIncludeC(TablaBase,false)%>
				
			} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {					
				<%if(blnConFuncionalidadDeepLoadTypeVersion1) {%>
				<%=GetAddClassesForeignKeyExcludeC(TablaBase,false)%>
				<%}%>
			}
			
			return classes;
			
		} catch(Exception e) {
			//Funciones.manageException(logger,e);
			throw e;
		}
	}
	
	public static ArrayList<Classe> getClassesForeignKeysFromStringsOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<String> arrClasses,DeepLoadType deepLoadType)throws Exception {
		try {
			ArrayList<Classe> classes=new ArrayList<Classe>();	
			
			if(deepLoadType.equals(DeepLoadType.NONE)) {
				<%=GetAddClassesForeignKeyC(TablaBase,true)%>
				
			} else if(deepLoadType.equals(DeepLoadType.INCLUDE)) {
				<%=GetAddClassesForeignKeyIncludeC(TablaBase,true)%>
				
			} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {					
				<%if(blnConFuncionalidadDeepLoadTypeVersion1) {%>
				<%=GetAddClassesForeignKeyExcludeC(TablaBase,true)%>
				<%}%>
			}
			
			return classes;
			
		} catch(Exception e) {
			//Funciones.manageException(logger,e);
			throw e;
		}
	}
	
	public static ArrayList<Classe> getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType)throws Exception {
		try {
			return <%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(classesP,deepLoadType,true);
			
		} catch(Exception e) {
			//Funciones.manageException(logger,e);
			throw e;
		}
	}
	
	public static ArrayList<Classe> getClassesRelationshipsOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<Classe> classesP,DeepLoadType deepLoadType,Boolean conMuchosAMuchos)throws Exception {
		try {
			ArrayList<Classe> classes=new ArrayList<Classe>();			
			
			if(deepLoadType.equals(DeepLoadType.NONE)) {
				<%=GetAddClassesRelacionadasC(TablaBase,false)%>
				
			} else if(deepLoadType.equals(DeepLoadType.INCLUDE)) {
				<%=GetAddClassesRelacionadasIncludeC(TablaBase,false)%>
				
			} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {		
				<%if(blnConFuncionalidadDeepLoadTypeVersion1) {%>
				<%=GetAddClassesRelacionadasExcludeC(TablaBase,false)%>
				<%}%>
			}
			
			return classes;
			
		} catch(Exception e) {
			//Funciones.manageException(logger,e);
			throw e;
		}
	}
	
	public static ArrayList<Classe> getClassesRelationshipsFromStringsOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<String> arrClasses,DeepLoadType deepLoadType)throws Exception {
		try {
			return <%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.getClassesRelationshipsFromStringsOf<%=GetNombreClaseC(TablaBase.ToString())%>(arrClasses,deepLoadType,true);
		} catch(Exception e) {
			//Funciones.manageException(logger,e);
			throw e;
		}
	}	
	
	public static ArrayList<Classe> getClassesRelationshipsFromStringsOf<%=GetNombreClaseC(TablaBase.ToString())%>(ArrayList<String> arrClasses,DeepLoadType deepLoadType,Boolean conMuchosAMuchos)throws Exception {
		try {
			ArrayList<Classe> classes=new ArrayList<Classe>();			
			
			if(deepLoadType.equals(DeepLoadType.NONE)) {
				<%=GetAddClassesRelacionadasC(TablaBase,true)%>
				
			} else if(deepLoadType.equals(DeepLoadType.INCLUDE)) {
				<%=GetAddClassesRelacionadasIncludeC(TablaBase,true)%>
				
			} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {		
				<%if(blnConFuncionalidadDeepLoadTypeVersion1) {%>
				<%=GetAddClassesRelacionadasExcludeC(TablaBase,true)%>
				<%}%>
			}
			
			return classes;
			
		} catch(Exception e) {
			//Funciones.manageException(logger,e);
			throw e;
		}
	}		
	
	//FUNCIONES CONTROLLER
	public static void actualizarLista(<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,<%=strTypeCollection%><<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,Boolean permiteQuitar) throws Exception {
		<%if(!GetEsReporteFromPropertiesC(TablaBase)) { //SI ES REPORTE DESHABILITO%>
		try	{
			Boolean existe=false;
			<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Encontrado=null;
			
			for(<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Local:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
				if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Local.getId().equals(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getId())) {
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Encontrado=<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Local;
					
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Local.setIsChanged(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsChanged());
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Local.setIsNew(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsNew());
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Local.setIsDeleted(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsDeleted());
					
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Local.setGeneralEntityOriginal(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getGeneralEntityOriginal());
					
					<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
					<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired){continue; } %>
					<%= GetSetVariableToVariableLocal(TablaBase.Columns[i]) %>	
					<% } %>	
					
					<%=GetListasParametroTablesRelacionadasC(TablaBase,true,false,false,false,true,false,false,false)%>
					
					existe=true;
					break;
				}
			}
			
			if(!<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsDeleted()) {
				if(!existe) {
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s.add(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>);
				}
			} else {
				if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Encontrado!=null && permiteQuitar)  {
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s.remove(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Encontrado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
		<%}%>
	}
	
	public static void actualizarSelectedLista(<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>,<%=strTypeCollection%><<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) throws Exception {
		try	{			
			for(<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Local:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
				if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Local.getId().equals(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getId())) {
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Local.setIsSelected(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getIsSelected());					
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public static void setEstadosIniciales<%=GetNombreClaseC(TablaBase.ToString())%>(<%=strTypeCollection%><<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux) throws Exception {
		//this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux=<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux;
		
		for(<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>sAux) {
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getIsChanged()) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.setIsChanged(false);
			}		
			
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getIsNew()) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.setIsNew(false);
			}	
			
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getIsDeleted()) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.setIsDeleted(false);
			}
		}
	}
	
	public static void setEstadosIniciales<%=GetNombreClaseC(TablaBase.ToString())%>(<%=strPackageJava%><%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux) throws Exception {
		//this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux=<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux;
		
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getIsChanged()) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.setIsChanged(false);
			}		
			
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getIsNew()) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.setIsNew(false);
			}	
			
			if(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.getIsDeleted()) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%>Aux.setIsDeleted(false);
			}		
	}
	
	public static void seleccionarAsignar(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>Asignar,<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>) throws Exception {
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired|| GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])){continue; } %>
		<%= GetSetVariablesTablaToBean(TablaBase.Columns[i]) %>	
	<% } %>
	}
	
	public static void inicializar<%=GetNombreClaseC(TablaBase.ToString())%>(<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>) throws Exception {
		try {
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired|| GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])){continue; } %>
				<%= SetVariablesTablaToCancelar(TablaBase.Columns[i]) %>	
			<% } %>
			} catch(Exception e) {
			throw e;
		}
	}
	
	public static void generarExcelReporteHeader<%=GetNombreClase(TablaBase.ToString())%>(String sTipo,Row row,Workbook workbook) {
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		
		if(sTipo.equals("RELACIONADO")) {
			iCell++;
		}
		
		<%=GetSwitchExcelTiposColumnsReporteCabeceraC(TablaBase)%>
	}
	
	public static void generarExcelReporteData<%=GetNombreClase(TablaBase.ToString())%>(String sTipo,Row row,Workbook workbook,<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjeto(TablaBase.ToString())%>,CellStyle cellStyle) throws Exception {
		Cell cell=null;
		int iCell=0;
					
		if(sTipo.equals("RELACIONADO")) {
			iCell++;
		}
		
		<%=GetSwitchExcelTiposColumnsReporteC(TablaBase)%>
	}
	//FUNCIONES CONTROLLER
	
	<%//=GetFuncionesModuloTablaServiciosConReportes()%>					
	
	public String sFinalQuery<%=GetNombreClaseC(TablaBase.ToString())%>=<%=GetFinalQueryTableC(TablaBase)%>;
	
	public String getsFinalQuery<%=GetNombreClaseC(TablaBase.ToString())%>() {
		return this.sFinalQuery<%=GetNombreClaseC(TablaBase.ToString())%>;
	}
	
	public void setsFinalQuery<%=GetNombreClaseC(TablaBase.ToString())%>(String sFinalQuery<%=GetNombreClaseC(TablaBase.ToString())%>) {
		this.sFinalQuery<%=GetNombreClaseC(TablaBase.ToString())%>= sFinalQuery<%=GetNombreClaseC(TablaBase.ToString())%>;
	}
	
	public Border<%=strSwtMe%> resaltarSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>=null;
	
	public Border setResaltarSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>(ParametroGeneralUsuario parametroGeneralUsuario/*<%=GetNombreClaseC(TablaBase.ToString())%><%=strPrefijoJSFFacesOBeanJInternalFrame%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strPrefijoBeanSwing%>JInternalFrame*/) {
		Border<%=strSwtMe%> borderResaltar=Funciones2.getBorderResaltar(parametroGeneralUsuario,"COLUMNA");
		
		<%=strCommentMinCodigoWebIni%><%=sCoWebExpIni%>
		<%if(EsSwing){%>
		//<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strPrefijoBeanSwing%>JInternalFrame.jTtoolBar<%=GetNombreClaseC(TablaBase.ToString())%>.setBorder(borderResaltar);
		<%}%>
		<%=strCommentMinCodigoWebFin%><%=sCoWebExpFin%>
		this.resaltarSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>= borderResaltar;
		
		return borderResaltar;
	}

	public Border<%=strSwtMe%> getResaltarSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>() {
		return this.resaltarSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>;
	}
	
	public void setResaltarSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>(Border<%=strSwtMe%> borderResaltarSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>) {
		this.resaltarSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>= borderResaltarSeleccionar<%=GetNombreClaseC(TablaBase.ToString())%>;
	}
	
	//RESALTAR,VISIBILIDAD,HABILITAR COLUMNA
	
	<%=GetDefinirBorderVisibilidadElementosSwingTablaClase(TablaBase,EsSwing)%>
	
	<%=GetSetBorderVisibilidadElementosSwingTablaClase(TablaBase)%>
	
	public void setMostrarCampos(DeepLoadType deepLoadType,ArrayList<Classe> campos)throws Exception {	
		Boolean esInicial=false;
		Boolean esAsigna=false;
		
		if(deepLoadType.equals(DeepLoadType.INCLUDE) || deepLoadType.equals(DeepLoadType.NONE)) {
			esInicial=false;
			esAsigna=true;
		} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {
			esInicial=true;
			esAsigna=false;
		}
		
		<%=GetSetLoteVisibilidadElementosSwingTablaClase(TablaBase,true,false,false)%>
	}
	
	public void setActivarCampos(DeepLoadType deepLoadType,ArrayList<Classe> campos)throws Exception {	
		Boolean esInicial=false;
		Boolean esAsigna=false;
		
		if(deepLoadType.equals(DeepLoadType.INCLUDE) || deepLoadType.equals(DeepLoadType.NONE)) {
			esInicial=false;
			esAsigna=true;
		} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {
			esInicial=true;
			esAsigna=false;
		}
		
		<%=GetSetLoteVisibilidadElementosSwingTablaClase(TablaBase,false,true,false)%>
	}
	
	public void setResaltarCampos(DeepLoadType deepLoadType,ArrayList<Classe> campos,ParametroGeneralUsuario parametroGeneralUsuario/*,<%=GetNombreClaseC(TablaBase.ToString())%><%=strPrefijoJSFFacesOBeanJInternalFrame%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strPrefijoBeanSwing%>JInternalFrame*/)throws Exception {	
		Border<%=strSwtMe%> esInicial=null;
		Border<%=strSwtMe%> esAsigna=null;
			
		if(deepLoadType.equals(DeepLoadType.INCLUDE) || deepLoadType.equals(DeepLoadType.NONE)) {
			esInicial=null;
			esAsigna=Funciones2.getBorderResaltar(parametroGeneralUsuario,"COLUMNA");
		} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {
			esInicial=Funciones2.getBorderResaltar(parametroGeneralUsuario,"COLUMNA");
			esAsigna=null;
		}
		
		<%=GetSetLoteVisibilidadElementosSwingTablaClase(TablaBase,false,false,true)%>
	}
	
	<%=GetDefinitionVariablesResaltarNavegacionColumnsTablaTablasClasesRelacionadas(TablaBase,false,false,false,false)%>		
		
	public void setMostrarRelaciones(DeepLoadType deepLoadType,ArrayList<Classe> clases)throws Exception {	
		Boolean esInicial=false;
		Boolean esAsigna=false;
		
		<%=GetDefinitionVariablesResaltarNavegacionColumnsTablaTablasClasesRelacionadas(TablaBase,true,false,true,false)%>		
	}
	
	public void setActivarRelaciones(DeepLoadType deepLoadType,ArrayList<Classe> clases)throws Exception {	
		Boolean esInicial=false;
		Boolean esAsigna=false;
		
		<%=GetDefinitionVariablesResaltarNavegacionColumnsTablaTablasClasesRelacionadas(TablaBase,true,false,false,true)%>		
	}
	
	<%if(EsSwing){%>
	public void setResaltarRelaciones(DeepLoadType deepLoadType,ArrayList<Classe> clases,ParametroGeneralUsuario parametroGeneralUsuario/*,<%=GetNombreClaseC(TablaBase.ToString())%><%=strPrefijoJSFFacesOBeanJInternalFrame%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strPrefijoBeanSwing%>JInternalFrame*/)throws Exception {	
		Border<%=strSwtMe%> esInicial=null;
		Border<%=strSwtMe%> esAsigna=null;
		
		<%=GetDefinitionVariablesResaltarNavegacionColumnsTablaTablasClasesRelacionadas(TablaBase,true,true,false,false)%>		
	}
	<%}%>
	
	<%if(GetExisteBusquedasTablaC(TablaBase)){%>	
	<%=GetVariablesVisibilidadHabilitarResaltarIndicesVariablesTablasClases(TablaBase,true,false,false)%>	
	<%=GetVariablesVisibilidadHabilitarResaltarIndicesVariablesTablasClases(TablaBase,false,true,false)%>	
	<%=GetVariablesVisibilidadHabilitarResaltarIndicesVariablesTablasClases(TablaBase,false,false,true)%>		
	<%}%>		
	
	<%}//ES CONSTANTES FUNCIONES%>
	//CONTROL_FUNCION2
}