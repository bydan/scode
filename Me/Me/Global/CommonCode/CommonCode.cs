/*
DESCRIPCION DE BASE
TIPOS:
|CONMAXCODE=(Utiliza todo generado o no)
|CLASESAUTOREF=(Indica las clases autoreferenciadas en FKs columnas, para generacion no lenta)

DESCRIPCION DE TABLA:
TIPOS:
|NOMBRE=(Nombre de la tabla de la bd).
|PREFIJOTABLA=(Prefijo de la tabla que representa el modulo) 
|ESROMPIMIENTO=(Indica si la tabla es de rompimiento, solo funciona en relaciones simples true,false).
|ESGUARDARREL=(Indica si la tabla es de padre de mantenimiento con relaciones).
|ESGUARDARRELHIJO=(Indica si la tabla es hijo de mantenimiento con relaciones).
|NOGUARDAR=(Deshabilita botones guardar pero mantiene visualizacion, web principalmente con guardar relaciones)
|WEBTITULO=(Titulo de los combos y columnas q hafblnEsReportcen referencia a esta tabla).
|WEBPLURAL=(La finalizacion del nombre en plural)s
|WEBRELACIONESNO=(El nombre de la tabla o tablas no tomadas en cuenta para proceso de mantenimiento relacionado ).
|DELCASCADE=(Determina si puede borrar o no en cascada)	|								true,false 	  (por defecto sera false)
|CLASESPARAM=(Clases de parametros a utilizarse)
|CLASESNO=(Las Clases donde no se pueda navegar para mantenimiento, separados por , si hay mas de 1) si tiene la palabra clave NINGUNO no genera nada (para catalogos generales)	
|CLASESSI=(Las Clases donde SI se pueda navegar para mantenimiento, separados por , si hay mas de 1) si tiene la palabra clave NINGUNO no genera nada (para catalogos generales)	
|CLASESNOMOSTRAR=(Las Clases donde no se pueda mostrar aunque si existe para mantenimiento, separados por , si hay mas de 1) si tiene la palabra clave NINGUNO no genera nada (para catalogos generales)	
|CLASESSIMOSTRAR=(Las Clases donde SI se pueda mostrar aunque si existe para mantenimiento, separados por , si hay mas de 1) si tiene la palabra clave NINGUNO no genera nada (para catalogos generales)	
|USECLASESSINODEEP=(Usa obligatoriamente para deepload y deepsave las clases de CLASESNO y CLASESSI)
|CLASESORDENR=(Orden relacion)NOTA:"FALTA COMPLETAR,COMPROBAR"
|CLASESPERSISTENCENO=(Las Clases donde se deshabilita persistencia @Transient)	
|WEBCONATRAS=(Indica si en la pagina actual debe funcionar el boton atras)	true,false
|ESINTERNO=(Indica si la tabla es interna es decir hija de alguna principal y no muestra recargar informacion)	true,false
|INDICESNO=(Los Indices donde no se pueda buscar mantenimiento) se separan con una ,
|INDICESSI=()
|CLASESFKDISABLE=(Las Clases FK donde no se pueda buscar PERO SI LA PAGINA ES PRINCIPAL O NO INTERNO PARA NO LLENAR TODO FK, ESTO PARA UTILIZAR LA MISMA PAG DE DIFERENTE MANERA(NORMAL INTERNO Y BUSQUEDAS)) se separan con una ,
|KEYINDICESNO=(Palabra clave donde si coincide no se pueda buscar mantenimiento)
|INSERTNO=(Indica si la tabla no permite insertar elementos)	true,false
|EDITNO=(Indica si la tabla no permite editar elementos)	true,false
|DELETENO=(Indica si la tabla no permite eliminar elementos)	true,false
|CONAUD=(Indica si se utiliza auditoria)true,false o no poner
|CONAUDAUTO=(Indica si se utiliza AUTO auditoria, es decir se guarda en la misma tabla los campos correspondientes)true,false o no poner
|SINAUDET=(Indica que no se utiliza el detalle de la auditoria)true,false o no poner
|CONADDIT=(Indica que no se utilizan files additional)true,false o no poner
|CONADDIT_PARAMRET=
|CONSTORE=(Indica si se utiliza Store Procedure)
|CONORIG=(Indica si se utiliza el objeto original)true,false o no poner
|CONMAXCODE=(Indica si se utiliza todo el codigo funcional o el minimo)
|CONMINCODE_WEB=(Codigo minimo en la parte web, para tablas relacionados)
|CONMAXCODE_WEB=(GENERA VERSION0 Sufijo TodoWeb, OBLIGA a generar todo codigo en la parte web, para tablas relacionados)
|FINALQUERY=(Indica si el query que complementa siempre en cada busqueda)-----> Reemplaza () por = cuando sea el caso
|SESSIONKEYQUERY=(Indica si el query de SESSION que complementa siempre en cada busqueda,cuya clave es el nombre que se adiciona en constantes)
|NEWCODE(Para utilizar otro generalentity)
|ESREPORTEAUX=(Indica si la tabla es de reporte auxiliar o principal padre true,false).
|ESREPORTE=(Indica si la tabla es de reporte true,false).
|ESPROCESO=(Indica si la tabla es de reporte true,false).
|ESREPORTEVISTA=(Indica si la tabla es de reporte true,false).
|ESREPORTEGUARDAR=(Indica si la tabla resultado se podria guardar save funciones en logic true,false).
|ESREPORTEADDITIONAL=(Utiliza clase LogicAdditional para procesar la informacion)
|ESREPORTEBASECOL=(indica si el reporte utiliza columnas id,versionRow,etc)
|ESREPORTEGROUP=(Indica el nombre del grupo si lo tiene).
|ESREPORTEPARAM=(Indica el campo representa un parametro, el cual serviran para definir la presentacion).
|PREFIJOID=(Prefijo sql del id para la paginacion) 
|PREFIJOSQL=(from cliente c)
|PARAMSQLREEM=true
|EXISTEWHERE=(si es true reporte parametros empiezan con and)
|NUMWHERES=(reemplazo varias veces where)
|ESMENU=(Define si la tabla especificada va ser usada para el menu principal)true, false
|CONJAVASCRIPTIE=(Indica si la tabla usa include/exclude javascript true,false).
|PAQUETE=(Indica el path el cual se encuentra guardado la pagina y reporte y usado para generar arbol)Catalogos/DatosPersonales/
|PAQUETEJAVA=(Indica el nombre del paquete (carpeta y namespace), que regularmente representa al MOUDULO al cual pertenece la tabla). Ejem: cliente.
|PAQUETEJAVATOTAL=(Indica el nombre completo del paquete java).Ejm: com.bydan.erp.sri.business.logic
|ALIGN=Alinea la paginacion,control nuevo, campos de datos y acciones deacuerdo a los valores:(left,center,rigth)
|TAMBUSQUEDA=indica el tamanio horizontal del bloque de busquedas de la pagina
|ALTOMINTABLA=indica el tamanio vertical minimo de la tabla de datos (usado especialmente cuando es relacionado en mantenimiento maestro-detalle en detalle)
|ALTOMAXTABLA=indica el tamanio vertical maximo de la tabla de datos (usado especialmente cuando es relacionado en mantenimiento maestro-detalle en detalle)
|ALTOTABPANELREL=indica el tamanio vertical del tab relaciones(usado especialmente cuando es relacionado en mantenimiento maestro-detalle en maestro)
|IGNORAR=Indica si la tabla se lo ignora en el proceso o no (true,false)
|SCHEMA=Indica el nombre del esquema de la tabla.
|ESQUEMAS=Indica los nombres de esquemas EXTRAS separados por comas(,) que no son ni por fk ni relaciones directas(es para relaciones indirectas)Ejm:Tesoreria,Sris,PuntoVenta, etc. Solo en caso se necesite
|PCKG=Indica el nombre del paquete del codigo java.
|PCKGENTCLASES=Indica el/los nombres de las clases cuyo nombre completo de la capa entity se necesita ser explicito. Ejm: import com.bydan.aulavirtual.business.entity.Menu;
|CONPERSISTENCIA=(Indica si se utiliza para persistencia)true,false o no poner
|NOEJB=(Indica si se deshabilita el servicio ejb comentando la palabra Stateless)
|WHAUX="width y height de pantalla auxiliar",separados por , indican el ancho y alto (ENTEROS) de la pantalla modal para actualizar datos Ejm: |WHAUX=600,600
|FINALJSPVERSION=(Indica si la tabla tiene jsp final version true,false).en faces-config se actualiza el nombre de la pagina con Final.jsp
|FINALJSFVERSION=(Indica si la tabla tiene jsp final version true,false).en faces-config se actualiza el nombre del bean con Final
|ESPOPUP=(Permite abrir una tabla relacionada en otra pagina web como popup ocultando el arbol de opciones)
|NUMCOLUMNAS=(numero columnas para formulario)
|NUMCOLUMNASEXTRA=(numero columnas para tabla que representa procesos,etc..)
|NUMPAG=(Numero de Paginacion)
|CONPAQUETEJAVAGLOBAL=true,false
|ESMANTVARGLOBAL=true(indica que la tabla actual usa las variables globales del sistema)
|TABLA=(Tabla donde reporte o proceso toma como referencia)
|CONSELEC=(Funcionalidad seleccionar fila tabla con checkbox)
|SINRECARGARI=(No muestra boton recargar informacion y para reportes no muestra funcion respectiva)
|SINUSODATOS=(No muestra controles manejo datos)
|MODULODOMI=(El nombre de la Constante que tiene el id del MODULO DOMINIO de la tabla actual)
|CONTOTALES=(Trabaja con tabla que totaliza resultados)
|CONBUSQUEDAPROCESO=(Genera una funcion en Additional para realizar o no un proceso antes de realizar la busqueda)
|ACCIONES=
|CONSELTODOS=true
|VARGLOBALNO=(Deshabilita variable global porr db)
|VARGLOBALNOFK=(Deshabilita filtro global por db en columnas que hagan referencia FK a esta tabla)
|WIDTHPE=(Ancho porcentaje Extra para boton de tabla cuando es relacionado)
|WIDTHPEFK=(Ancho porcentaje Extra para combo de tabla donde se hace referencia FK)
|WIDTHPE_CHECKBOX=Ancho todos checkbox de tabla
|HEIGHTPE_REL_TAB=(ParaRelaciones Padre)
|HEIGHTPE_REL=(ParaRelacionados)
|CONBUSQUEDAFK=(Indica si la columna FOREIGN KEY que se hace referencia de la Tabla ACTUAL debe utilizar busquedas para seleccionar valores combo actual true,false).
|CONSWINGAUX=(Obliga la generacion de clases auxiliares swing)true,false o no poner
|CONLISTENER=(Obliga la generacion de clase property listener para swing)true,false o no poner
|CONCOLOR=(Indica que es una tabla de tipos o estados, en donde se haga referencia va utilizar colores usando su campo idColorGeneral)
|CONVALIDARFK=(Indica que antes de guardar un dato verifica este FK que no este inactivo id=0 --> id_estado_nombretabla)
|FKNOLOAD=(Indica si la columna FOREIGN KEY del cual la tabla hace referencia no carga todo el combo de forma inicial(es decir o hay una busqueda o no se necesita) true,false).
|TABSBUSQ_ALIGN=LEFT(Si el panel tabs de busqueda necesita tabs a la izquierda (cuando son muchos))
|PANELFIN=Nombre del panel final (Para muchas relaciones,permite agruparlas)
|PANELINI=Nombre del panel grupo que se ubica normalmente (Para muchos datos,permite agruparlas)
|PANELNUMCOLUMNAS=(Si no existe, el subpanel tiene las mismas columnas del formulario principal=NUMCOLUMNAS)-->NOMBRE,4
|PANELSINTITULOS=(No genera titulo en panel grupo)
|PANELSINBASICO=true(No utiliza en panel basico original, solo usarian paneles grupo)
|PANELSINTOOLB=true(No muestra los botones toolbar para ganar espacio)
|PANELSINMENU=true(No muestra el menu superior para ganar espacio)
|PANELSINACCIONF=true(No muestra panel acciones formularios para ganar espacio)
|PANELCONTAB=true(En el formulario de datos divididos por paneles, y cada uno en una pestaña de tab)
|PANELCONTAB_TABALIGN=LEFT(Si el panel anterior necesita tabs a la izquierda (cuando son muchos))
|PANELTAM=(MINIMO,NORMAL,MEDIO,GRANDE). Modifica automaticamente tamanios de controles para mejor visualizacion
|PANELTAM_TABLA=PARA TABLA DATOS (MINIMO,NORMAL,MEDIO,GRANDE). Modifica automaticamente tamanios de controles para mejor visualizacion
|PANELCOLSPAN=(Usado para hacer colspan para paneles inferiores si es necesario, acciones y parametros acciones)
|PANELNUMRELACIONES=(Si no existe, el subpanel tab principal es general)-->NOMBRE,
|PANELCONUBICACION=true(Ubica manualmente segun coordenada y,x,colspan,rowspan)
|ONCHANGEPARENT=true---->ANTES(NO-VALEnumero_autorizacionPedido)
|CELLSPACING=0 (Tamanio entre celdas, en swing =Insets(0, 0, 0, 0))
|CELLSPACING_LEFT=0 (Tamanio entre celdas, izquierda, para dar margen entre columnas)
|CONCARGAR_PARTE=true (Permite recargar al seleccionar tab en un mantenimiento maestro-detalle, el detalle se carga bajo peticion)

FOREIGNKEY LOTE
|CONBUSQUEDA=(Indica si la tabla es referencia de alguna columna FOREIGN KEY debe utilizar busquedas para seleccionar valores combo actual true,false).
|SINFK_ACTUALIZAR=(No muestra icono para actualizar datos fk)
|DEFAULT=(Pone el mismo default a todos los combos referenciados)


TIPOS PARA ACCION:
|NOMBRE=(Nombre Codigo de la accion de la tabla de la bd).
|WEBTITULO=(Nombre para la pagina web de la accion de la tabla de la bd).
|POSTACCION=(Indica que debe realizarse luego de ejecutarse la accion (Mensaje,Arir otra pagina,Abrir nueva pagina,etc ).
			(1=Sin respuesta,2=IrAPagina,3=IrANuevaPagina,4=ConRetorno)
			
DINAMICOS;
|DIN_UNOAUNO=(Indica que la tabla presente es relacionado uno a uno)
|DIN_NOMBRE_ADDICIONAL=(Indica nombre adicional de tabla relacionado)

//AMBIENTE DE REPORTES
//1.- Definir las tablas (BD) que seran auxiliares principales (para agrupar reportes hasta capa service) ESREPORTEAUX=true ---> OJO ESTA TABLA NO TIENE |ESREPORTE
//2.- En las tablas auxiliares principales definir su nombre de grupo si lo tiene (por defecto DEFAULT) ESREPORTEGROUP=GRUPO1
//3.- Definir las tablas (BD) de reportes propiamente dichas ESREPORTE=true, los cuales pueden ser agrupadas (definiendo su tabla reporte auxiliar) con ESREPORTEGROUP=X, Ejemplo: ESREPORTEGROUP=GRUPO1
//NOTAS: Siempre existe 1 tabla auxiliar por cada n reportes, agrupados por ESREPORTEGROUP=X

DESCRIPCION DE LOS CAMPOS:
TIPOS:
|NOMBRE=(Nombre del campo de la tabla de la bd)|
|TABLA= (El nombre de la tabla donde el campo id lo hace referencia en relacion uno a uno)|
|TIPO=Time (El tipo de campo en detalle Ejm: Date,Time,Timestamp)|
|WEBTITULO=(es el titulo de cada campo que sera utiilizado como labbel)|
|SINTITULO=(No muestra titulo en campo, display:none)
|WEBTITULOLOWER=(es el titulo de cada campo que sera utiilizado como labbel pero de tipo Nombre,Apellido,etc)|
|TOOLTIP=ToolTip para columna, por defectu usa WEBTITULO
|WEBFILAS=(es el numero de filas que este campo muestra en la pagina web)|
|WEBCOLUMNS=(es el numero de columnas que este campo muestra en la pagina web)|
|WEBCOMBO=true(Columna detalle para el combo y o tabla)	|								true,false 	  (por defecto se aplicara la columna id)
|WEBORDEN=(Columna detalla el orden inicial de la columna)|							asc,desc  (por defecto no se aplicara ningun orden)
|DEFAULT=(Valor por Defecto)
|ESPARAROMPIMIENTO=(Indica si la columna es para rompimiento, solo funciona en relaciones simples true,false).
|CONBUSQUEDA=(Indica si la columna FOREIGN KEY debe utilizar busquedas para seleccionar valores combo actual true,false).
|CONTAB_BUSQUEDA=(Indica si se permite buscar por otros criterios, con esto se supone que se utiliza busqueda por "Query")
|CONEVENTCHANGE(permite recargar formulario luego de cambiar, este es padre FK)
|CONEVENTDEPEND(permite cargarse luego de un evento de algun control anterior)
|CONEVENTDEPENDSETPARENT(permite cargarse luego de un evento de algun control anterior, actualizando alguna columna padre en hijo actual)
|CONEVENTDEPENDQUERY(permite cargarse luego de un evento de algun control anterior, actualizando con un query y columna padre del hijo actual)
|FKNOLOAD=(Indica si la columna FOREIGN KEY no carga todo el combo de forma inicial(es decir o hay una busqueda o no se necesita) true,false).
|FKNOSAVE=(Indica si la columna FOREIGN KEY no guarda desde el combo de forma inicial(es decir lo guarda automaticamente como proceso) true,false).
|CONRANGOINDICES=(Indica si esta columna es rango de valores para todos los indices)true,false
|JSVALIDACION(La funcion especial para la validacion de cliente o javascript)	
|EDITNO=(Indica si la tabla no permite editar elementos READONLY)	true,false
|READONLY=true(Indica si la tabla no permite editar elementos READONLY)	true,false
|INSERTEDITNO=true(Indica si la tabla no permite editar elementos)	true,false
|INSERTEDITSI=true(Obliga y permite editar elementos)	true,false
|SHOWTABLE=true(Indica si en la tabla SE FORZA mostrar columna aunque no |INSERTEDITNO=true)	true,false
|IDHIDDEN=(Indica si el campo id CODIGO UNICO no permite visualizar)	true,false
|ESREPORTE=(Indica si el campo es de reporte true,false).--> OJO EN XML REPORTE SI EXISTE ESTE ATRIBUTO NO LO TOMA EN CUENTA, NO SE UTILIZA EN NORMAL Y NI EN REPORTES, POR LO QUE SIEMPRE SE MUESTRA LOS CAMPOS
|CONAUD=(Indica si se utiliza auditoria)true,false o no poner
|VALIDACIONTODO=(permite ingresar todos los campos string cualquier string)true,false
|VALIDACION=(Contiene el string de validacion)Ejm:		VALIDACION=NOEMPTY,NONULL,EMAIL,RANGE>0-25,LENGTH>3-15
			EJEMPLO: |VALIDACION=NOEMPTY,NONULL,EMAIL,RANGE>0-25,LENGTH>3-15,MIN>10,PAST,FUTURE,SIZE>3-15,DIGITS>15-3,MAX>100,VALID,TRUE,FALSE
|LISTAVALOR=(Indica si los valores de la columna pertenecen a una lista sin ser de una tabla)
|KEYLISTA=(Indica el codigo el cual sera utilizado para traer los valores de un catalogo general)
|CONSEG=(Indica si la columna usa el modelo de seguridad (PerfilCampo) true,false).
|NUMTABUL=(numero de tabulador para cabecera tabla)
|VALORPARAM=(Valor por Defecto)
|FINALQUERY(final query para cuando campo sea combo)
|ESREPORTEPARAM=(Indica el campo representa un parametro, el cual serviran para definir la presentacion).
|MODULODOMI=(El nombre de la Constante que tiene el id del MODULO DOMINIO de la tabla actual)
|PREFIJOSQL=(from cliente c)
|SUFIJOREGEX=(_TELEFONO,_MAIL,ETC)
|SQLWHERE=(Sql especial para validar=)
|ESNULL=true
|WIDTH=(Ancho)
|WIDTHPE=(Ancho porcentaje Extra)
|WIDTHPELABEL=(Ancho porcentaje Extra solo para label)
|HEIGHT=(Alto)
|HEIGHTPE=(Alto porcentaje Extra)
|NUMXEXTRA=(numero columnas a saltarse)
|NUMYEXTRA=(numero filas a saltarse)
|ESNUEVAFILA=true(Forza a que un formulario empieza otra fila desde esta columna)
|TITULOFILA=(El titulo que se asigna antes de la nueva fila generada, depende de anterior descripcion)
|WIDTHPEFILA=(Porcentaje extra)
|COLSPAN=(Crea colspan para columna actual)
|ANCHOR=(Ancla)
|ESREPORTEGROUP=(Indica el nombre del grupo si lo tiene).
|PANELFIN=Nombre del panel final (Para totales en un formulario maestro detalle)
|PANELINI=Nombre del panel inicial (Para formulario de muchos datos y permite agruparlas)
|CONCARGARTODOFK=true(Significa que al cargar combo fk, carga todo el objeto no solo id y descripcion)
|ONCHANGE=true(Genera evento change de campo)
|CLASESSIONCHANGE=Clase1,Clase2-->(Nombre clases hijos que se actualiza con onchange de columna)
|CLASESSIONCHANGE_PARENT=Clase1,Clase2-->(Para evento del Parent,Nombre clases hijos que se actualiza con onchange de columna)
|ONCHANGEPARENT
|ONEVENT_DB=true(En un evento va hacia el servidor de aplicaciones y db)
|ONEVENT_DB_PARENT=true(Ejecuta evento del padre y evento va hacia el servidor de aplicaciones y db)
|CLASESSI=(Para columna FK,Las Clases cargadas	con DeepLoad)
|ESPASSWORD=(Campo no muestra en tabla y field tipo pass)

READ ONLY TABLES

DESCRIPCION DE TABLA:
|TIPOS:
|NOMBRE=(Nombre de la tabla de la bd).
|STARTQUERY=(Query de la parte inicial de la consulta)
|ENDQUERY=(Query de la parte inicial de la consulta)

DESCRIPCION DE LOS CAMPOS:
TIPOS:
|NOMBRE=(Nombre del campo de la tabla de la bd)|
|TIPO= (El tipo de campo en detalle Ejm: Date,Time,Timespam)|
|ALIAS=(Alias de la tabla de referencia de la bd)|
|OPERATOR=(Operador del campo)
|STARTOPERATOR=(Operador inicial)
|ENDOPERATOR=(Operador final)
|STARTOTHER=(Query de la parte inicial de la consulta)
|ENDOTHER=(Query de la parte inicial de la consulta)



NO REALIZAR VALIDACION(TAME)
|NOID=true
|NOIDENTITY=true
|NOVERSIONROW=true
|NOSTANDARD=true


DESCRIPCION DE BASE DE DATOS:
TIPOS:
COLUMNSVARGLOBAL(Columnas que son usadas globalmente para indicar un contexto, separadas por , .Ejemplo: id_empresa,id_sucursal)
COLUMNSVARGLOBALSHOW(Columnas que son usadas globalmente de anterior, pero si se muestran y se puede cambiar)
*/


/*
DESCRIPTION ADDITIONAL

************************MUY-USADOS*********************
---EJB---
D01 --> (DATA-ACCESS)
E01 --> (ENTITY)
I01 --> (INTERFACES)
L01 --> (LOGIC)
U01 --> (UTIL)
---WEB---
J01 --> (JINTERNALFRAME)
SW01 --> (SESSION-WEB)
JA01 --> (JINTERNALFRAME-AUXILIAR)

S01 --> (SOURCE-REPORTE)
RR01 --> (RESOURCES-REPORTE)

************************TALVEZ*********************
---EJB---
R01 --> (RESOURCES)
IE01 --> (INTERFACES-EJB)
SE01 --> (SESSION-EJB)
*/


//GetNombreTablaRelacionadaFromColumn

using CodeSmith.Engine;
using SchemaExplorer;
using System;
using System.Windows.Forms.Design;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using System.Diagnostics;

namespace Me
{
		
	#region Tipo de generacion
	public enum TipoCodigoGenerar
	{
		MantenimientosSimples,
		DeletesCascade,
		MantenimientoClasesRelacionadas,
		GetXmls,
		DeepForeignKey,
		DeepRelationship,
		DeepForeignKeyAndRelatioship
	}
	#endregion

	#region Layers And Auxs
	public enum Layers
	{
		DataAccess,
		Entities,
		Interface,
		Logic,
		Servlet,
		Reporte,
		JavaScript,
		JspMaintenance
	}
	
	public enum PaquetesGenerar {
		TODOS,
		DATA_ACCESS,
		ENTITIES,
		INTERFACE,
		LOGIC,
		CONSTANTES_FUNCIONES,
		EJB,
		EJB_INTERFACE,
		EJB_SESSION,
		CONTROLLER,
		CONTROLLER_AUXILIAR,
		WEB,
		WEB_SESSION,
		REPORTE,
		REPORTE_BEAN,
		REPORTE_BASE_DINAMICO,
		JAVASCRIP,
		FILES,
		XML_AUXILIAR,
		AUXILIAR,
		AUXILIAR_MINIMAL,
		SERVIDOR_APLICACION,
		SERVIDOR_WEB,
		VERSION_WEB_EXPRESS
	}		
		
	public enum TiposGeneracionGrupo {
		TODOS,
		GUARDAR_RELACIONES,
		GUARDAR_RELACIONES_RELACIONADOS,
		CATALOGOS_SIMPLES,
		RELACIONES_SIMPLES,
		TABLAS_MODULO,
		TABLAS_AUTOREFERENCIADAS,
		TABLAS_SIN_IDENTITY,
		TABLAS_UNO_A_UNO,
		VERSION0_TODO_WEB
	}		
	
	public enum TiposGeneracionRelaciones {
		NINGUNO,
		NORMAL,
		TODOS		
	}	
	
	public enum TiposGeneracionReporte {
		TODOS,
		NORMAL,
		VERTICAL_FORM,
		DINAMICO_NORMAL,
		GROUP_GENERICO,
		GROUP_TOTALES_GENERICO,
		GROUP_REPORTE,
		RELACIONES_MASTER,
		RELACIONES_DETALLE,
		NINGUNO
	}
	
	public class MeExtendProperty {
		private String strName;
		private String strValue;
		
		public  MeExtendProperty() {
			strName="";
			strValue="";
		}
		
		public  MeExtendProperty(String strNameParam,String strValueParam) {
			strName=strNameParam;
			strValue=strValueParam;
		}
		
		public String Name {
			get {
				return strName;
			} set {
				strName = value;
			}
		}
		
		public String Value {
			get {
				return strValue;
			} set {
				strValue= value;
			}
		}
	}
	
	public class ColumnaForeignKey{
		private String strNombre;
		private TableSchema tableForeignKey;
		private ColumnSchema columnForeignKey;
		private bool esAutoReferenciada;
		
		public  ColumnaForeignKey() {
			this.strNombre="";
			this.tableForeignKey=null;
			this.columnForeignKey=null;
			this.esAutoReferenciada=false;
		}
		
		public String Nombre {
			get {
				return strNombre;
			} set {
				strNombre= value;
			}
		}
		
		public TableSchema TableForeignKey {
			get {
				return tableForeignKey;
			} set {
				tableForeignKey= value;
			}
		}
		
		public ColumnSchema ColumnForeignKey {
			get {
				return columnForeignKey;
			} set {
				columnForeignKey= value;
			}
		}
		
		public bool EsAutoReferenciada {
			get {
				return esAutoReferenciada;
			} set {
				esAutoReferenciada= value;
			}
		}
		
		/*
		public static void CargarColumnasForeignKey(Dictionary<String,ColumnaForeignKey> dictionaryColumnasForeignKey,TableSchema tableSchema){
			ColumnaForeignKey columnaForeignKey=new ColumnaForeignKey();
			TableSchema tableSchemaFk=null;
			bool esAutoReferenciadaFk=false;
			bool existe=false;
			
			foreach(ColumnSchema columnSchema in tableSchema.Columns) {
				if(columnSchema.IsForeignKeyMember) {
					existe=true;
					
					columnaForeignKey=new ColumnaForeignKey();
					
					tableSchemaFk=CommonCode.GetTableSchemaFromColumnForeignKeyBase(columnSchema);				
					
					if(tableSchemaFk==null) {
						Trace.WriteLine("ES NULL "+columnSchema.Name+" "+columnSchema.Table.Name);	
					}
					
					esAutoReferenciadaFk=CommonCode.GetEsAutoReferenciadaTablaC(tableSchemaFk);
				
					columnaForeignKey.Nombre=columnSchema.Name;
					columnaForeignKey.TableForeignKey=tableSchemaFk;
					columnaForeignKey.ColumnForeignKey=columnSchema;
					columnaForeignKey.EsAutoReferenciada=esAutoReferenciadaFk;
					
					dictionaryColumnasForeignKey.Add(columnSchema.Name, columnaForeignKey);
				}
			}
			
			if(existe) {
				CommonCode.blnTieneForeignKey=true;
			}
		}
		
		
		public static ColumnaForeignKey GetColumnaForeignKey(Dictionary<String,ColumnaForeignKey> dictionaryColumnasForeignKey,String strNombre){
			ColumnaForeignKey columnaForeignKey=new ColumnaForeignKey();
			
			if(dictionaryColumnasForeignKey.ContainsKey(strNombre)) {
				columnaForeignKey = dictionaryColumnasForeignKey[strNombre];
			}
			
			return columnaForeignKey;
		}
		*/
	}
	#endregion
	
	#region Codesmith Clases
	public class TableSchemaMe {
		private String name;
		private TableKeySchemaCollectionMe foreignKeys;
		private TableKeySchemaCollectionMe primaryKeys;
		private ColumnSchemaCollection foreignKeyColumns;
		
		public  TableSchemaMe() {
			name="";
			foreignKeys=new TableKeySchemaCollectionMe();
			primaryKeys=new TableKeySchemaCollectionMe();
			foreignKeyColumns=new ColumnSchemaCollection();
		}
		
		public String Name {
			get {
				return name;
			} set {
				name = value;
			}
		}
		
		public ColumnSchemaCollection ForeignKeyColumns {
			get {
				return foreignKeyColumns;
			} set {
				foreignKeyColumns = value;
			}
		}
		
		public TableKeySchemaCollectionMe ForeignKeys {
			get {
				return foreignKeys;
			} set {
				foreignKeys = value;
			}
		}
		
		public TableKeySchemaCollectionMe PrimaryKeys {
			get {
				return primaryKeys;
			} set {
				primaryKeys = value;
			}
		}
	}
	
	public class TableSchemaCollectionMe : List<TableSchemaMe>{
		
	}
	
	public class ExtendedPropertyMe {
		private String name;
		private String value;
		private DbType dbType;
		
		public  ExtendedPropertyMe() {
			name="";
			value="";
			dbType=DbType.String;
		}
		
		public  ExtendedPropertyMe(String name,String value,DbType dbType) {
			name="";
			value="";
			this.dbType=dbType;
		}
		
		public  ExtendedPropertyMe(String strNameParam,String strValueParam) {
			name=strNameParam;
			value=strValueParam;
		}
		
		public String Name {
			get {
				return name;
			} set {
				name = value;
			}
		}
		
		public String Value {
			get {
				return this.value;
			} set {
				this.value= value;
			}
		}
		
		public DbType DbType {
			get {
				return this.dbType;
			} set {
				this.dbType= value;
			}
		}
	}
	
	public class ExtendedPropertyCollectionMe : List<ExtendedPropertyMe>{
		
	}
	
	public class PrimaryKeySchemaMe {
		private DatabaseSchema database;
		private bool deepLoad;
		private String description;
		private String name;
		private TableSchema table;
		
		private ExtendedPropertyCollectionMe extendedProperties;
		private MemberColumnSchemaCollectionMe memberColumns;

		public  PrimaryKeySchemaMe() {
			database=null;
			deepLoad=false;
			description="";
			name="";
			table=null;
			extendedProperties=new ExtendedPropertyCollectionMe();
			memberColumns=new MemberColumnSchemaCollectionMe();
		}
		
		public MemberColumnSchemaCollectionMe MemberColumns {
			get {
				return this.memberColumns;
			} set {
				this.memberColumns= value;
			}
		}
		
		public ExtendedPropertyCollectionMe ExtendedProperties {
			get {
				return this.extendedProperties;
			} set {
				this.extendedProperties= value;
			}
		}
		
		public DatabaseSchema Database {
			get {
				return this.database;
			} set {
				this.database= value;
			}
		}
		
		public bool DeepLoad {
			get {
				return this.deepLoad;
			} set {
				this.deepLoad= value;
			}
		}
		
		public String Description {
			get {
				return this.description;
			} set {
				this.description= value;
			}
		}
		
		public String Name {
			get {
				return this.name;
			} set {
				this.name= value;
			}
		}
		
		public TableSchema Table {
			get {
				return this.table;
			} set {
				this.table= value;
			}
		}
	}
	
	public class TableKeySchemaMe {
		private DatabaseSchema database;
		private bool deepLoad;
		private String description;
		private String name;
		private TableSchema primaryKeyTable;
		private TableSchema foreignKeyTable;
		private PrimaryKeySchemaMe primaryKey;
		
		private TableSchema tableSchemaActual;
		
		ExtendedPropertyCollectionMe extendedProperties;
		MemberColumnSchemaCollectionMe foreignKeyMemberColumns;
		MemberColumnSchemaCollectionMe primaryKeyMemberColumns;

		public  TableKeySchemaMe() {
			database=null;
			deepLoad=false;
			description="";
			name="";
			primaryKeyTable=null;
			foreignKeyTable=null;
			primaryKey=null;
			
			tableSchemaActual=null;
			
			extendedProperties=new ExtendedPropertyCollectionMe();
			foreignKeyMemberColumns=new MemberColumnSchemaCollectionMe();
			primaryKeyMemberColumns=new MemberColumnSchemaCollectionMe();
		}
		
		public  TableKeySchemaMe(DatabaseSchema database,String strNameTableKeySchema,
								 MemberColumnSchemaCollectionMe foreignKeyMemberColumns,TableSchema foreignKeyTable,
								 MemberColumnSchemaCollectionMe primaryKeyMemberColumns,TableSchema primaryKeyTable,
								ExtendedPropertyCollectionMe extendedProperties) {
			this.database=database;
			deepLoad=false;
			description="";
			name=strNameTableKeySchema;
			this.primaryKeyTable=primaryKeyTable;
			this.foreignKeyTable=foreignKeyTable;
			primaryKey=null;
			
			tableSchemaActual=primaryKeyTable;
			
			this.extendedProperties=extendedProperties;
			this.foreignKeyMemberColumns=foreignKeyMemberColumns;
			this.primaryKeyMemberColumns=primaryKeyMemberColumns;
		}					
		
        public  TableKeySchemaMe(DatabaseSchema database,String strNameTableKeySchema,
								 MemberColumnSchemaCollectionMe foreignKeyMemberColumns,TableSchema foreignKeyTable,
								 MemberColumnSchemaCollectionMe primaryKeyMemberColumns,TableSchema primaryKeyTable) {
			this.database=database;
			deepLoad=false;
			description="";
			name=strNameTableKeySchema;
			this.primaryKeyTable=primaryKeyTable;
			this.foreignKeyTable=foreignKeyTable;
			primaryKey=null;
			
			tableSchemaActual=primaryKeyTable;
			
			this.extendedProperties=new ExtendedPropertyCollectionMe();
			this.foreignKeyMemberColumns=foreignKeyMemberColumns;
			this.primaryKeyMemberColumns=primaryKeyMemberColumns;
		}
		
		public TableKeySchema ConvertTableKeySchemaFromConvertTableKeySchemaMe() {
			TableKeySchema tableKeySchema=null;
			
			
			tableKeySchema=new TableKeySchema(this.database,this.name,
								this.getMemberColumns(this.foreignKeyMemberColumns),this.foreignKeyTable.Owner,this.foreignKeyTable.Name,
								this.getMemberColumns(this.primaryKeyMemberColumns),this.primaryKeyTable.Owner,this.primaryKeyTable.Name,
								this.getExtendedProperties(this.extendedProperties));
			
			
			return tableKeySchema;
		}
		
		public String[] getMemberColumns(MemberColumnSchemaCollectionMe memberColumns) {
			//ArrayList arrListMemberColumn=new ArrayList();
			List<String> arrListMemberColumn = new List<String>();
			
			foreach(MemberColumnSchemaMe memberColumnSchemaMe in memberColumns) {
				arrListMemberColumn.Add(memberColumnSchemaMe.Column.Name);
			}
			
			return arrListMemberColumn.ToArray();
		}
		
		public ExtendedProperty[] getExtendedProperties(ExtendedPropertyCollectionMe extendedPropertyCollectionMe) {
			//ArrayList arrListMemberColumn=new ArrayList();
			List<ExtendedProperty> arrListExtendedProperty = new List<ExtendedProperty>();
			ExtendedProperty extendedProperty;
			
			foreach(ExtendedPropertyMe extendedPropertyMe in extendedPropertyCollectionMe) {
				extendedProperty=new ExtendedProperty(extendedPropertyMe.Name,extendedPropertyMe.Value,
									 extendedPropertyMe.DbType);
				
				arrListExtendedProperty.Add(extendedProperty);
			}
			
			return arrListExtendedProperty.ToArray();
		}
		
		public MemberColumnSchemaCollectionMe PrimaryKeyMemberColumns {
			get {
				return this.primaryKeyMemberColumns;
			} set {
				this.primaryKeyMemberColumns= value;
			}
		}
		
		public MemberColumnSchemaCollectionMe ForeignKeyMemberColumns {
			get {
				return this.foreignKeyMemberColumns;
			} set {
				this.foreignKeyMemberColumns= value;
			}
		}
		
		public ExtendedPropertyCollectionMe ExtendedProperties {
			get {
				return this.extendedProperties;
			} set {
				this.extendedProperties= value;
			}
		}
		
		public DatabaseSchema Database {
			get {
				return this.database;
			} set {
				this.database= value;
			}
		}
		
		public bool DeepLoad {
			get {
				return this.deepLoad;
			} set {
				this.deepLoad= value;
			}
		}
		
		public String Description {
			get {
				return this.description;
			} set {
				this.description= value;
			}
		}
		
		public String Name {
			get {
				return this.name;
			} set {
				this.name= value;
			}
		}
		
		public TableSchema PrimaryKeyTable {
			get {
				return this.primaryKeyTable;
			} set {
				this.primaryKeyTable= value;
			}
		}
		
		public TableSchema ForeignKeyTable {
			get {
				return this.foreignKeyTable;
			} set {
				this.foreignKeyTable= value;
			}
		}
		
		public PrimaryKeySchemaMe PrimaryKey {
			get {
				return this.primaryKey;
			} set {
				this.primaryKey= value;
			}
		}
		
		public TableSchema TableSchemaActual {
			get {
				return this.tableSchemaActual;
			} set {
				this.tableSchemaActual= value;
			}
		}
	}
	
	public class TableKeySchemaCollectionMe : List<TableKeySchemaMe>{
		
	}
	
	public class MemberColumnSchemaMe {
		private DatabaseSchema database;
		private bool deepLoad;
		private String description;
		private String name;
		private bool allowDBNull;
		private ColumnSchema column;
		private DbType dataType;
		private bool isForeignKeyMember;
		private bool isPrimaryKeyMember;
		private bool isUnique;
		private String nativeType;
		private Byte precision;
		private Int32 scale;
		private Int32 size;
		private Type systemType;
		private TableSchema table;
		private ExtendedPropertyCollectionMe extendedProperties;
		private ExtendedPropertyCollectionMe columnExtendedProperties;
		
		public  MemberColumnSchemaMe() {
			database=null;
			deepLoad=false;
			description="";
			name="";
			allowDBNull=false;
			column=null;
			dataType=DbType.Int64;
			isForeignKeyMember=false;
			isPrimaryKeyMember=false;
			isUnique=false;
			nativeType="bigint";
			precision=0;
			scale=0;
			size=0;
			systemType=Type.GetType("System.Int64");
			table=null;
			extendedProperties=new ExtendedPropertyCollectionMe();
			columnExtendedProperties=new ExtendedPropertyCollectionMe();
		}
		
		public ExtendedPropertyCollectionMe ColumnExtendedProperties {
			get {
				return this.columnExtendedProperties;
			} set {
				this.columnExtendedProperties= value;
			}
		}
		
		public ExtendedPropertyCollectionMe ExtendedProperties {
			get {
				return this.extendedProperties;
			} set {
				this.extendedProperties= value;
			}
		}
		
		public TableSchema Table {
			get {
				return this.table;
			} set {
				this.table= value;
			}
		}
		
		public Type SystemType {
			get {
				return this.systemType;
			} set {
				this.systemType= value;
			}
		}
		
		public Int32 Size {
			get {
				return this.size;
			} set {
				this.size= value;
			}
		}
		
		public Int32 Scale {
			get {
				return this.scale;
			} set {
				this.scale= value;
			}
		}
		
		public Byte Precision {
			get {
				return this.precision;
			} set {
				this.precision= value;
			}
		}
		
		public String NativeType {
			get {
				return this.nativeType;
			} set {
				this.nativeType= value;
			}
		}
		
		public bool IsUnique {
			get {
				return this.isUnique;
			} set {
				this.isUnique= value;
			}
		}
		
		public bool IsPrimaryKeyMember {
			get {
				return this.isPrimaryKeyMember;
			} set {
				this.isPrimaryKeyMember= value;
			}
		}
		
		public bool IsForeignKeyMember {
			get {
				return this.isForeignKeyMember;
			} set {
				this.isForeignKeyMember= value;
			}
		}
		
		public DbType DataType {
			get {
				return this.dataType;
			} set {
				this.dataType= value;
			}
		}
		
		public ColumnSchema Column {
			get {
				return this.column;
			} set {
				this.column= value;
			}
		}
		
		public bool AllowDBNull {
			get {
				return this.allowDBNull;
			} set {
				this.allowDBNull= value;
			}
		}
		
		public DatabaseSchema Database {
			get {
				return this.database;
			} set {
				this.database= value;
			}
		}
		
		public bool DeepLoad {
			get {
				return this.deepLoad;
			} set {
				this.deepLoad= value;
			}
		}
		
		public String Description {
			get {
				return this.description;
			} set {
				this.description= value;
			}
		}
		
		public String Name {
			get {
				return this.name;
			} set {
				this.name= value;
			}
		}
	}
	
	public class MemberColumnSchemaCollectionMe : List<MemberColumnSchemaMe>{
		
	}
	
	#endregion
	
	public   class CommonCode : CodeTemplate
	{
		
		
		//PARA PRODUCCION Y PROTEGER CODIGO
		public static bool CON_RENDER_PRODUCCION=false;
		public static bool CON_RENDER_MINIMO_PRODUCCION=false;
		public static bool CON_RENDER_MINIMO_PRODUCCION_TAB=false;
		//PARA PRODUCCION Y PROTEGER CODIGO_FIN
		public static bool CON_RENDER_SIN_BOM=true;
		
		/*
		NOTA:
			* Sin tomar en cuenta Additional (debe modificarse siempre)
			* Sin tomar en cuenta JavaScript (muy conflictivo y no es importante)
			
		PARA PRODUCCION Y PROTEGER CODIGO
		CON_RENDER_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION_TAB=true;
			
		PARA PRODUCCION Y PROTEGER CODIGO MODO DEPURAR
		CON_RENDER_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION_TAB=false;
			
		PARA CODIGO NORMAL O DESARROLLO SIN PROTEGER CODICO
		CON_RENDER_PRODUCCION=false;CON_RENDER_MINIMO_PRODUCCION=false;CON_RENDER_MINIMO_PRODUCCION_TAB=false;
		
		1) Se puede utilizar //, siempre y cuando sea una linea aparte
		2) En la funcion GetByDanLicence(), existe un espacion inicial extra para que no afecte <?php
		*/
		
		public static String DB="2015_CodeSmith";
		public static String HOST_DB="localhost";
		public static String USER_DB="sa";
		public static String PASSWORD_DB="sasasa";
	
		#region Const Acciones Labels
		
		public const String strPrefijoAccionTableExtendProperty="Accion_";
		public const String strPrefijoAccionTableNombreProperty="NOMBRE";
		public const String strPrefijoAccionTableWebNombreProperty="WEBTITULO";
		public const String strPrefijoAccionTablePostAccionProperty="POSTACCION";
		
		#endregion		
		
		#region Tags Descripcions
	
		// TABLE
		
		public static String strNOMBRE="NOMBRE";
		public static String strPREFIJOTABLA="PREFIJOTABLA";
		public static String strESROMPIMIENTO="ESROMPIMIENTO";
		public static String strESGUARDARREL="ESGUARDARREL";
		public static String strESGUARDARRELHIJO="ESGUARDARRELHIJO";		
		public static String strWEBTITULO="WEBTITULO";
		public static String strWEBPLURAL="WEBPLURAL";
		public static String strWEBRELACIONESNO="WEBRELACIONESNO";
		public static String strDELCASCADE="DELCASCADE";
		public static String strCLASESNO="CLASESNO";
		public static String strCLASESPERSISTENCENO="CLASESPERSISTENCENO";
		public static String strWEBCONATRAS="WEBCONATRAS";
		public static String strESINTERNO="ESINTERNO";
		public static String strINDICESNO="INDICESNO";
		public static String strKEYINDICESNO="KEYINDICESNO";
		public static String strINSERTNO="INSERTNO";
		public static String strDELETENO="DELETENO";
		public static String strCONAUDAUTO="CONAUDAUTO";
		public static String strSINAUDET="SINAUDET";
		public static String strCONADDIT="CONADDIT";
		public static String strCONMAXCODE="CONMAXCODE";		
		public static String strCONAUD="CONAUD";
		public static String strCONSTORE="CONSTORE";
		public static String strCONORIG="CONORIG";
		public static String strFINALQUERY="FINALQUERY";
		public static String strSESSIONKEYQUERY="SESSIONKEYQUERY";
		public static String strNEWCODE="NEWCODE";
		public static String strESREPORTE="ESREPORTE";
		public static String strESREPORTEAUX="ESREPORTEAUX";
		public static String strESREPORTEPARAM="ESREPORTEPARAM";
		public static String strESREPORTEINGRESO="ESREPORTEINGRESO";
		public static String strESREPORTEGROUP="ESREPORTEGROUP";
		public static String strCONNATIVE="CONNATIVE";
		public static String strPREFIJOID="PREFIJOID";
		public static String strESMENU="ESMENU";
		public static String strCONJAVASCRIPTIE="CONJAVASCRIPTIE";			
		public static String strPAQUETE="PAQUETE";
		public static String strPAQUETEJAVA="PAQUETEJAVA";
		public static String strALIGN="ALIGN";
		public static String strTAMBUSQUEDA="TAMBUSQUEDA";
		public static String strIGNORAR="IGNORAR";
		public static String strSCHEMA="SCHEMA";
		public static String strPCKG="PCKG";
		public static String strPCKGENTCLASES="PCKGENTCLASES";
		public static String strCONPERSISTENCIA="CONPERSISTENCIA";
		public static String strNOEJB="NOEJB";
		public static String strWHAUX="WHAUX";
		public static String strFINALJSPVERSION="FINALJSPVERSION";
		public static String strFINALJSFVERSION="FINALJSFVERSION";
		public static String strESPOPUP="ESPOPUP";
		public static String strNUMCOLUMNAS="NUMCOLUMNAS";
		public static String strNUMCOLUMNASEXTRA="NUMCOLUMNASEXTRA";
		public static String strNUMPAG="NUMPAG";
		public static String strCONPAQUETEJAVAGLOBAL="CONPAQUETEJAVAGLOBAL";		
		public static String strNINGUNO="NINGUNO";
		
		// COLUMNAS
		
		//public static String strNOMBRE="NOMBRE";
		public static String strTABLA="TABLA";
		public static String strTIPO="TIPO";
		//public static String strWEBTITULO="WEBTITULO";
		public static String strWEBFILAS="WEBFILAS";
		public static String strWEBCOLUMNS="WEBCOLUMNS";
		public static String strWEBCOMBO="WEBCOMBO";
		public static String strWEBORDEN="WEBORDEN";
		public static String strESPARAROMPIMIENTO="ESPARAROMPIMIENTO";
		public static String strCONBUSQUEDA="CONBUSQUEDA";
		public static String strJSVALIDACION="JSVALIDACION";
		public static String strVALIDACION="VALIDACION";
		public static String strEDITNO="EDITNO";
		public static String strINSERTEDITNO="INSERTEDITNO";
		public static String strSHOWTABLE="SHOWTABLE";
		public static String strLISTAVALOR="LISTAVALOR";
		public static String strIDHIDDEN="IDHIDDEN";		
		public static String strDEFAULT="DEFAULT";
		public static String strCONEVENTCHANGE="CONEVENTCHANGE";
		public static String strCONEVENTDEPEND="CONEVENTDEPEND";
		public static String strFKNOLOAD="FKNOLOAD";
		public static String strFKNOSAVE="FKNOSAVE";
		public static String strCONRANGOINDICES="CONRANGOINDICES";
		public static String strVALIDACIONTODO="VALIDACIONTODO";
		public static String strKEYLISTA="KEYLISTA";
		public static String strCONSEG="CONSEG";
		public static String strNUMTABUL="NUMTABUL";
		public static String strESNULL="ESNULL";
		
		//public static String strESREPORTE="ESREPORTE";
		//public static String strCONAUD="CONAUD";

		#endregion	
	
		#region Global Variables
		//GLOBAL VARIABLES TEMPLATE GENERACION
		
		//GlobalConPaqueteJavaGlobal
		public static bool IS_DEBUG=false;
		public static bool IS_DEBUG2=false;
		public static bool IS_DEBUG3=false;
		
		//AUXILIARES
		public static bool CON_OPTIMIZE_V0=true;//(Quitar Binding)
		
		//AUXILIAR USADO DONDE QUIERA
		public static bool HERE=false;
		
		//CARGA VARIABLES TABLAS(RELACIONES) UNA VEZ POR CADA TABLA
		
		public static bool GlobalConPaqueteJavaGlobal=false;
		public static string GlobalConPaqueteJavaGlobalImports="";
		public static string GlobalEmpresa="";
		public static string GlobalPackage="";
		
		//ESTA VARIABLE NO CAMBIA
		public static string GlobalModulePackage="global";
		//GLOBAL VARIABLES TEMPLATE GENERACION
		
		public static String Module="";
		
		
		public static Boolean blnEsLowerCaseDBNames=false;	
		public static Boolean blnEsMixedCaseDBNames=true;
		public static Boolean blnEsMaximoTamanioPopup=false;//TODAS LAS VENTANAS POPUP SON GRANDES
		
		public static Boolean blnEsMixedCaseLabelNames=true;
		
		public static String strGlobalSeguridadComment="";
		public static String strGlobalAuditoriaComment="";
		
		public static String strGlobalSeguridadCommentNo="";
		public static String strGlobalAuditoriaCommentNo="";
		
		public static Boolean blnConSeguridad=false;
		//public static Boolean blnConSeguridadFuncionalidad=false;	
		
		public static String strGlobalSeguridadExtensionOpcion="";//".jsf";
		public static String strGlobalPrefijoDBNombreTablas="";
		public static String strGlobalConexionSchema="";
		
		public static String strTipoLicencia="ME";//"APACHE";
		
		public static String strExtensionWeb="jsp";
		public static String strExtensionJavaScript="jsp";

		//SI EXISTE PROBLEMAS Y MEJOR COMENTAR HASTA RESOLVER CUANDO TABLAS SON NO STANDARD
		public static String strGlobalTablaNoStandardComment="";		
		public static Boolean blnConFuncionesSqlNativas=false;
		
		public static String strSimboloCampoRequeridoGlobal=" *";
		public static String strSimboloDosPuntos=" :";//Global
		public static String strSimboloBloqueQueryGlobal="\r\n\r\n/*BLOQUE*/";
		
		//AUXILIAR
		public static Boolean blnConSwingCombosDinamicosTabla=false;
		public static Boolean blnConReportesPorModulo=false;
		public static String strReportesPorModuloComment="";
		
		public static Boolean blnConSwt=false;
		public static String strSwtMe="";
		public static String sFkTableCell="";
		
		//VARIABLES GLOBALES POR TABLA
		public static Boolean blnTieneIdentityColumn=true;
		public static Boolean blnCumpleMaximoRelacionesMantenimiento=true;
		public static Boolean blnTieneBusquedas=false;
		public static int intNumeroMaximoColumnasBusquedas=1;
		public static int intNumeroIndicesBusquedas=0;
		public static Boolean blnTieneImagen=false;
		public static Boolean blnTieneDocumento=false;
		public static Boolean blnTieneSeguridadCampo=false;	
		public static Boolean blnTieneAuditoriaAuto=false;	
		public static Boolean blnTieneTextArea=false;
		public static Boolean blnTieneStringColumn=false;
		public static Boolean blnTieneTimestamp=false;
		public static Boolean blnTieneValidacionTodo=false;
		public static Boolean blnEsReporte=false;
		public static Boolean blnEsReporteGuardar=false;
		public static Boolean blnEsReporteAdditional=false;
		public static Boolean blnEsReporteParaGrupoReporte=false;
		public static Boolean blnTieneRelacionesReporte=false;
		public static Boolean blnTieneRelacionesFinal=false;
		public static Boolean blnTieneRelaciones=false;
		
		public static Boolean blnOptimizarNumeroRelaciones=false;
		public static int intNumeroMaximoRelacionesOptimizar=15;
		public static int intNumeroRelaciones=0;
		
		public static Boolean blnEstablaModulo=false;
		public static Boolean blnEsReporteVista=false;
		public static Boolean blnEsProceso=false;
		public static Boolean blnEsProcesoParametro=false;
		public static Boolean blnTieneProcesoParametro=false;
		public static Boolean blnSinUsoDatos=false;
		public static Boolean blnEsLabelProcesar=false;
		public static Boolean blnConSeleccionar=false;
		public static Boolean blnConAdditional=false;
		public static Boolean blnConAdditionalExtraCode=false;
		public static Boolean blnEsGuardarRelaciones=false;
		public static Boolean blnTieneForeignKey=false;
		public static Boolean blnTieneRelacionesGlobal=false;
		public static Boolean blnTieneWebCombo=false;
		public static Boolean blnTieneColumnaNombre=false;
		public static Boolean blnTieneColumnaCodigo=false;
			public static String strCommentEsGuardarRelaciones="";
		public static Boolean blnTieneColumnasReporte=false;
		public static Boolean blnTieneColumnasDatos=false;
		public static String strSufijoVersion="";
		public static Boolean blnConMaxCodigo=true;
		public static Boolean blnConMinCodigoWeb=false;
		public static Boolean blnConMaxCodigoWeb=false;
			public static String strCommentMinCodigoWebIni="";
			public static String strCommentMinCodigoWebFin="";
			public static String strCommentMinCodigoWebLinea="";
			
			public static String sCoWebExpIni="";
			public static String sCoWebExpFin="";
			public static String sCoWebExpLinea="";
		public static Boolean blnEsAutoReferenciada=false;
		public static Boolean blnTieneCampoTotalizar=false;		
			public static String strParametroSizeTablaTieneTotalizar="";
		public static Boolean blnTieneListener=false;
			public static String strCommentListener="";
			
			public static String strCommentReporte="";
			public static String strCommentAdditional="";
			public static String strCommentProceso="";
			
			//FORM_DETALLE
			//public static String strCommentForm="//";
			//public static String strCommentFormIni="/*";
			//public static String strCommentFormFin="*/";
			
			public static bool conFormDetalle=true;
			public static String strFormDetalle="";//"Detalle";
			public static String strObjetoFormDetalle="";
			//FORM_DETALLE
			
		public static Boolean blnNoStandardTableFromProperties=false;
		public static Boolean blnEsTablaUnoAUnoFk=false;
		public static ArrayList arrayListEsquemasRel=null;
			public static String strNombreTablaUnoAUnoPk="";
		public static String strPackageJava="";
		public static bool blnNormalOrientation=true;
		public static Boolean blnPermiteImportar=false;
		public static Boolean blnTieneColumnaConRangoIndices=false;
		public static int intNumeroColumnasParaForm=0;		
		
		//PARA DESARROLLO Y VER EN WINDOW BUILDER ELEMENTOS DISENO
			//NORMAL=DEFECTO=false (Produccion)
			public static Boolean blnConForzarUbicarPanelesManualmente=false;
			public static String sCommentUbicarMan="";
			public static int iGridyRelaciones=0;
			public static int iGridyPrincipal=0;
			public static int iYPanelCampos=0;			
			public static int iXPanelCampos=0;	
			
		//PARA DESARROLLO Y VER EN WINDOW BUILDER ELEMENTOS DISENO
		
		public static bool blnUsaLabelFormLower=false;
		
		public static int intNumeroMaximoNivelesGlobal=5;
		public static int intNumeroMaximoRelacionesHijoGlobal=5;
		public static String strCellSpacing="";
		public static String strCellSpacingLeft="";
		public static String strAnchoColumnPorcentajeDefectoTabla="";
		public static String strAltoColumnPorcentajeDefectoTabla="";
		
		//public static int totalWidthInicial=0;

			//VARIABLES POR TABLA CCFA
			public static Boolean blnEsTablaLatitudLongitud=false;
			public static String strPorTablaPrefijoNombre="";
		public static int intNumeroColumnasPrincipalOcultas=0;
		public static int intNumeroClasesRelacionadasFinal=0;
		public static Boolean blnConTotales=false;
		public static Boolean blnTieneProcesoBusqueda=false;
		public static int intNumeroPaginacion=0;
		public static String strDirectorioBaseXmlCodesmith="";
				
		public static ArrayList arrayTablasRelacionadasParametros=new ArrayList();
		public static ArrayList arrayTablasRelacionadasMe=new ArrayList();
		
		public static ArrayList arrayPanelesFin=new ArrayList();
		public static ArrayList arrayPanelesInicio=new ArrayList();
		
		public static ArrayList arrayPanelesRelacionesFin=new ArrayList();
		
		//FUNCIONALIDAD_PROYECTO
		public static String strTipoTablaFuncionalidad="";
		public static String strTipoBaseDatosFuncionalidad="";
		//FUNCIONALIDAD_PROYECTO_FIN
		
		//PROYECTOS
		public static String strProyectoErp="2014_Erp";
		//PROYECTOS_FIN
		
		//PAQUETE JAVA COMPLETO
		
		public static String strPaqueteJavaCompleto="";
		public static String strPaqueteJavaCompletoLogic="";
		public static String strPaqueteJavaCompletoEntities="";
		
		//TEMPORAL
		public static Boolean blnTemporalWebNoActualizarDatos=false;
		public static String strTemporalWebNoActualizarDatos="";
		
		//PARA NO ESTANDARD
		public static bool blnTieneTipoPKStandard=false;
		public static String strPorTablaColumnsPKParametros="";
		public static String strPorTablaColumnsPKParametrosSinComaPrimero="";
		public static String strPorTablaColumnsPKParametrosUso="";
		public static String strPorTablaColumnsPKParametrosUsoSinComaPrimero="";
		public static int intPorTablaCountColumnsPKC=0;
		public static ColumnSchemaCollection columnSchemaCollectionPK=null;
		
		#region Configuracion Global
		public void RenderToFileMe(CodeTemplate codeTemplate,PaquetesGenerar paquetesGenerar,String PathFile, PreserveRegionsMergeStrategy  preserveStrategy,bool conForzarNormal) {
			/*
			NOTA:
				* Sin tomar en cuenta Additional (debe modificarse siempre)
				* Sin tomar en cuenta JavaScript (muy conflictivo y no es importante)
			
			PARA PRODUCCION Y PROTEGER CODIGO
			CON_RENDER_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION_TAB=true;CON_RENDER_SIN_BOM=true;
			
			PARA PRODUCCION Y PROTEGER CODIGO MODO DEPURAR
			CON_RENDER_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION=true;CON_RENDER_MINIMO_PRODUCCION_TAB=false;CON_RENDER_SIN_BOM=true;
			
			PARA CODIGO NORMAL O DESARROLLO SIN PROTEGER CODICO
			CON_RENDER_PRODUCCION=false;CON_RENDER_MINIMO_PRODUCCION=false;CON_RENDER_MINIMO_PRODUCCION_TAB=false;CON_RENDER_SIN_BOM=true;
			*/
		
			if(!CON_RENDER_PRODUCCION || conForzarNormal) {
				if(!CON_RENDER_SIN_BOM) {									
					codeTemplate.RenderToFile(PathFile, preserveStrategy);
				
				} else {
					//VERIFICAR BOM
					//codeTemplate.RenderToFile(PathFile, preserveStrategy);
										
					String strEntities=codeTemplate.RenderToString();
					StringBuilder stringBuilder=new StringBuilder();
					
					TextWriter textWriter = new StreamWriter(PathFile);
                
					//Trace.WriteLine(PathFile);
					
					textWriter.Write(strEntities);
                
					textWriter.Flush();
                	textWriter.Close();
                
					textWriter = null;
					
				}
			} else {
				String strEntities=codeTemplate.RenderToString();
				StringBuilder stringBuilder=new StringBuilder();
				
				if(CON_RENDER_MINIMO_PRODUCCION) {
					//strEntities=strEntities.Replace("\t","").Replace("\r\n","");
					
					if(CON_RENDER_MINIMO_PRODUCCION_TAB) {
						strEntities=strEntities.Replace("\t","");
					}
					
					string[] arrLines = Regex.Split(strEntities, "\r\n");//strEntities.Split("\r\n");
					
					String sLineFinal="";
					String sReemplazar="";
					Int32 intSizeReemplazo=0;
					bool permiteReemplazo=true;
					
					foreach(String sLine in arrLines) {
						sLineFinal=sLine;
						
						if(sLineFinal.Contains("//")) {
							permiteReemplazo=true;
							//sLineFinal=sLineFinal.Trim();
							
							if(paquetesGenerar.Equals(PaquetesGenerar.JAVASCRIP)) {
								if(sLineFinal.Contains("http://")) {
									permiteReemplazo=false;
								}
							}
							
							if(permiteReemplazo) {
								if(sLineFinal.IndexOf("//")>-1) {
									
									intSizeReemplazo=sLineFinal.Length - sLineFinal.IndexOf("//");
									
									//Trace.WriteLine("LINEA->"+sLineFinal);
									//Trace.WriteLine("TOTAL="+sLineFinal.Length+",INICIO="+sLineFinal.IndexOf("//")+",SIZE="+intSizeReemplazo);								
									
									
									sReemplazar=sLineFinal.Substring(sLineFinal.IndexOf("//"),intSizeReemplazo);
									
									//Trace.WriteLine("REEMPLAZO->"+sReemplazar);
									
									sLineFinal=sLineFinal.Replace(sReemplazar,"");
								}
							}
							
							//continue;
						}												
						
						//DESCOMENTAR_NORMAL
						if(CON_RENDER_MINIMO_PRODUCCION_TAB) {
							stringBuilder.Append(sLineFinal);
						}
						
						//COMENTAR_PARA COMPROBAR
						if(!CON_RENDER_MINIMO_PRODUCCION_TAB) {
							stringBuilder.Append(sLineFinal + "\r\n");
						}
					}
					
					strEntities=stringBuilder.ToString();
					
				} else if(CON_RENDER_SIN_BOM) {
					
				}
				
				TextWriter textWriter = new StreamWriter(PathFile);
                
				textWriter.Write(strEntities);
                
				textWriter.Flush();
                textWriter.Close();
                
				textWriter = null;
								
			}
		}
		#endregion
		
		//VARIABLES CONSTANTES GLOBALES POR TABLA
		
		public static Boolean blnConListenerBindingComplejo=false;
		public static Boolean blnConBindingComplejo=false;
		public static Boolean blnConFuncionalidadVersion1=false;
		public static Boolean blnConFuncionalidadLogicVersion1=false;
		
		//PERMITE ACTUALIZAR,BUSCAR FK Y ARBOL (true)		 
		public static Boolean blnConFuncionalidadAccionesCampoVersion1=true;
		
		public static Boolean blnConFuncionalidadDeepLoadTypeVersion1=false;
		public static Boolean blnConVariableClaseControllerActualizarFk=false;
				
		public static Boolean blnConFuncionalidadWebExpressVersion2=false;
		#endregion
		
		#region Packages Names
		
		
		public static String strPackageFramework="framework";
		public static String strPackageUtils="util";
		public static String strPackageResources="resources";
		public static String strPackageImagenes="imagenes";
		public static String strPackageReportes="reportes";
		
		public static String strPackageDataAccess="dataaccess";
		public static String strPackageBusiness="business";
		public static String strPackageEntities="entity";
		public static String strPackageRequestBean="requestbean";
		public static String strPackageSessionBean="sessionbean";
		public static String strPackageBeans="bean";
		public static String strPackageFaces="face";
		public static String strPackageJSF="jsf";
		public static String strPackageLogic="logic";
		public static String strPackageInterface="interfaces";
		public static String strPackagePresentation="presentation";
		public static String strPackageWeb="web";
		public static String strPackageServlet="servlet";		
		public static String strPackageReporte="report";
		public static String strPackageSource="source";
		public static String strPackageSwing="swing";
		public static String strPackageDesktop="desktop";
		public static String strPackageJInternalFrames="jinternalframes";
		public static String strPackageService="service";
		public static String strEjb="ejb";
		public static String strEjbInterface="interfaces";
		public static String strEjbSession="session";
		
		//WEB SERVICES
		public static String strPackageWebServicePrefix="jws";		
		public static String strPackageWebServiceInterface="interfaces";		
		public static String strPackageWebService="webservice";
		
		//IMPORT SEGURIDAD AUDITORIA
		public static String strEmpresaAuditoria="com.bydan";
		public static String strPackageEntitiesAuditoria="entity";		
		public static String strPackageAuditoria="auditoria";
		public static String strPackageUtilsAuditoria="util";
		public static String strPackageDataAccessAuditoria="dataaccess";
		
		public static String strEmpresaSeguridad="com.bydan";
		public static String strPackageEntitiesSeguridad="entity";
		public static String strPackageUtilsSeguridad="util";
		public static String strPackageDataAccessSeguridad="dataaccess";
		public static String strPackageBusinessSeguridad="business";
		public static String strPackageLogicSeguridad="logic";
		public static String strPackageServiceSeguridad="service";
		public static String strEjbSeguridad="ejb";
		public static String strEjbInterfaceSeguridad="interfaces";
		public static String strIdGetSetSeguridad="Oid";
		public static String strIdSeguridad="oid";
		
		//IMPORT EXTRA
		
		public static String strEmpresaExtra="";
		public static String strPackageEntitiesExtra="";
		public static String strPackageUtilsExtra="";
		public static String strPackageDataAccessExtra="";
		public static String strPackageLogicExtra="";
		public static String strPackageEjbInterfaceExtra="";
		public static String strPackageEjbServiceExtra="";
		public static String strPackageReporteSourceExtra="";
		public static String strPackageWebSessionExtra="";
		#endregion
				
		#region Global Variables Correccion Codigo
		public static String strCorreccionGetUserName="getuser_name";
		#endregion
			
		#region Global Variables Correccion Codigo
		public const String strStringTipo="String";
		#endregion
		
		public static String  strFrameworkDomain="Faces";
		
		/* Me Extend Properties */
		public const String strPrefijoMeTableExtendProperty="Me_";		
		public const String strPrefijoRelativePath="../";
		public const String strPrefijoAdditional="Additional";
		public const String strPrefijoDataAccess="DataAccess";
		public const String strPrefijoBeanSwing="BeanSwing";
		public const String strPrefijoSwingInternalFrame="JInternalFrame";
		public const String strForeignKey="ForeignKey";
		public const String strReturnGeneral="ReturnGeneral";
		public const String strReturn="Return";
		public const String strParameterGeneral="ParameterGeneral";
		public const String strParameter="Parameter";
		public const String strParametro="Parametro";
		public String strPrefijoFace="Face";
		public const String strPrefijoJSFFaces="RequestBean";
		public const String strPrefijoJSFSessionFaces="SessionBean";
		public const String strSufijoJSPJSFFinal="Final";
		public static String strPrefijoJSFFacesOBeanJInternalFrame=strSufijoVersion+strPrefijoBeanSwing+"JInternalFrame";
		public const String strSufijoRangoFinal="Final";
		public const String strPrefijoWebService="WebService";
		public const String strPrefijoParametroStoreProcedure="inputParam";
		public const String strClaseDetalleBean="DescripcionReporte";
		public const String strClaseDetalleBeanReporte="_descripcion";
		public const String strClaseBean="Bean";
		public const String strConstantesFunciones="ConstantesFunciones";
		public const String strClaseConstantesFunciones="ConstantesFunciones";
		public const String strClaseAuxiliar="Compuesto";
		public const String strNative="NativeHibernate";//SOLO PUEDE SER NATIVE CON HIBERNATE,JDBC ES YA NATIVE
		public const String strNativeSolo="Native";
		public const String strEndScript="</script>";
		public const String strStartPageInclude="<%@";
		public const String strStartPageIncludeOnly="<%";
		public const String strFinishPageInclude="%>";
		public const String strAjaxWebPart="AjaxWebPart";
		public const String strAutoRef="AutoRef";
		
		public const String strId="id";
		public const String strIsActive="isActive";
		public const String strIsExpired="isExpired";
		public const String strVersionRow="versionRow";
		public const String strIdUsuario="idUsuario";
		public const String strIdEmpresa="idEmpresa";
		public const String strIdSucursal="idSucursal";				
		public const String strIdEjercicio="idEjercicio";
		public const String strIdPeriodo="idPeriodo";
		public const String strIdModulo="idModulo";
		public const String strIdAnio="idAnio";
		public const String strIdMes="idMes";
		
		public const String strDescripcion="_descripcion";
		public const String strDescripcionLabel=" DESCRIPCION";
		public const String strfield="";//"field";
		public const String strField="";//"Field";
		public const String strfield_=strfield;//+"_";//"field";
		public const String strField_=strField;//+"_";//"Field";
		
		public const String strFK="FK";
		public const String strPK="PK";
		public const String strIdGetSet="Id";
		public const String strIsActiveGetSet="IsActive";
		public const String strIsExpiredGetSet="IsExpired";
		public const String strVersionRowGetSet="VersionRow";
		public const String strINDICE="INDICE";
		
		public static String strIdDB="id";
		public static String strVersionRowDB="version_row";
		public static String strIdEmpresaDB="id_empresa";
		public static String strIdSucursalDB="id_sucursal";
		
		public const String strIdRelationshipGetSet="lId";
		public const String strCatalogoGeneralLista="Lista";
		public const String strCatalogoGeneralValor="Valor";
		
		public const int intNumeroMinimoColumnasTablaRompimiento=6;
		
		public const int intDesplazamientoReporteMaestro=15;		
		
		//MAX_RELACIONES
		//USADO PARA REPORTES DESIGN MAETRO DETALLE
		public const int intMax_Relaciones=6;
		
		public const String strValidacion="validacion.";
		
		public const String strSeparadorXml="-";
		
		public const int intTamDetalleRelacionReporte=110;//110;
		
		public const String strServletResponse="Json";
		public const String strServletResponseParameter="sTipoJsonResponse";
		
		//SWING
		//OJO: DEBE COINCIDIR ENTERO CON CONSTANTES STRING
		public const int INTSWING_WIDTH_CONTROL=150;
		public const String SWING_WIDTH_CONTROL="Constantes.ISWING_ANCHO_CONTROL";//"150";
		public const String SWING_WIDTH_CONTROL_VALOR="Constantes.ISWING_ANCHO_CONTROL_VALOR";//"150";
		public const String SWING_WIDTH_CONTROL_FECHA="Constantes.ISWING_ANCHO_CONTROL_FECHA";//"150";
		public const String SWING_WIDTH_CONTROL_LABEL="Constantes.ISWING_ANCHO_CONTROL_LABEL";//"150";
		
		//AL FINAL SE DESALINEA, NO SE USA
		public const String SWING_WIDTH_CONTROL_LABEL2="Constantes.ISWING_ANCHO_CONTROL_LABEL2";//"Constantes.ISWING_ANCHO_CONTROL";//"Constantes2.ISWING_ANCHO_CONTROL_LABEL2";//"150";
		public const String SWING_WIDTH_CONTROL_BOTONICONO="Constantes2.ISWING_ANCHO_CONTROL_BOTONICONO";//"150";
		//OJO:
		
		//OJO: DEBE COINCIDIR ENTERO CON CONSTANTES STRING
		public const int INTSWING_HEIGHT_CONTROL=22;
		public const String SWING_HEIGHT_CONTROL="Constantes.ISWING_ALTO_CONTROL";//22
		public const String SWING_HEIGHT_CONTROL_FECHA="Constantes.ISWING_ALTO_CONTROL_FECHA";//22
		public const String SWING_HEIGHT_CONTROL_LABEL="Constantes2.ISWING_ALTO_CONTROL_LABEL";//22
		public const String SWING_HEIGHT_CONTROL_LABEL2="Constantes2.ISWING_ALTO_CONTROL_LABEL2";//22
		public const String SWING_HEIGHT_CONTROL_BOTONICONO="Constantes2.ISWING_ALTO_CONTROL_BOTONICONO";//22
		//OJO:
		
		//OJO: DEBE COINCIDIR ENTERO CON CONSTANTES STRING
		public const int INTintTamColumnaTablaSwing=100;//100		
		public const int INTintTamColumnaSeleccionarTablaSwing=30;//100	
		public const String intTamColumnaTablaSwing="Constantes.ISWING_ANCHO_COLUMNA";//100
		//OJO:
		
		//OJO:(PERO NO TIENE) DEBE COINCIDIR ENTERO CON CONSTANTES STRING
		public const String SWING_HEIGHT_TAMFILATABLA="Constantes.ISWING_ALTO_FILA";//25,35;
		//OJO:
		
		//OJO:(PERO NO TIENE) DEBE COINCIDIR ENTERO CON CONSTANTES STRING		
		public const int INTSWING_HEIGHT_TABPANE_RELACIONES=450;		
		public const String SWING_HEIGHT_TABPANE_RELACIONES="Constantes.ISWING_ALTO_TABPANE";//450
		//OJO:
		
		public const int SWING_WIDTH_MIN_VENTANA=650;
		public const int SWING_HEIGHT_MIN_VENTANA=650;
		
		
		/*REPORTES*/
		//REPORTES VERTICAL
		
		public const int totalHeightInicial=15;
		public const int intReportWidthLabel=100;
		public const int intReportHeightLabel=15;
		public const int intReportXVerticalColumnaDatos=133;
		
		/*REPORTE*/
		
		#region Packages Names
		public const String sString="String";
		#endregion
	
		#region WebLabels
		
		public static String strColorBusquedaAnidada="#CCCCCC";
		public static String strGeneral="GENERAL";
		public static String strPrincipal="PRINCIPAL";
		public static String strArchivo="ARCHIVO";
		public static String strDatos="DATOS";
		public static String strAcceso="ACCESO";
		public static String strConfiguracion="CONFIGURACION";
		public static String strTipos="TIPOS";
		public static String strInterno="INTERNO";		
		public static String strDefiniciones="DEFINICIONES";
		public static String strProcesos="PROCESOS";
		public static String strUtilitarios="UTILITARIOS";
		public static String strReportes="REPORTES";					
		public static String strTotales="TOTALES";
		public static String strExtraPost="EXTRA/POST";
		public static String strOrden="ORDEN";
		public static String strEdicionDatos="EDICIO DATOS";
		public static String strCampos="CAMPOS";
		public static String strParametrosReportes="Parametros Reportes-Acciones";//"PARAMETROS REPORTES";
		public static String strParametrosReportesAcciones="Parametros Acciones";//"PARAMETROS ACCIONES";
		public static String strParametrosAcciones="PARAMETROS ACCIONES";
		public static String strCamposOcultos="CAMPOS OCULTOS";
		public static String strAcciones="ACCIONES";
		public static String strRelaciones="DATOS RELACIONADOS";
		public static String strGenerarReporte="GENERAR";//"GENERAR REPORTE";
		public static String strImportar="IMPORTAR";
		public static String strExportar_Label="EXPORTAR";
		public static String strExportar="EXPORTAR";
		public static String strGenerarReporteRelaciones="RELACIONES";//"REPORTE RELACION";
		public static String strGenerarReporteTodos="TODOS";//"TODOS";
		public static String strSeleccionarTodos="SEL. TODOS";
		public static String strSeleccionados="SELECCIONADOS";
		public static String strSeleccionarSeleccionados="SELECCIONAR SELECCIONADOS";
		public static String strConMaximoAltoTabla="CON MAXIMO ALTO TABLA";
		public static String strGrafico="GRAF.";
		public static String strGraficoToolTip="CON GRAFICO";
		public static String strRecargarInformacion="RECARGAR";// DATOS
		public static String strArbol="ARBOL";
		public static String strEditar="EDITAR";
		public static String strEditarRelaciones="EDITAR REL";
		public static String strEdicion="EDICION";
		public static String strSeleccion="SELECCIONAR";
		public static String strSel="SEL";
		public static String strCodigoUnico="CODIGO UNICO";
		public static String strNuevo="NUEVO";
		public static String strControlMas=" Crtl +";
		public static String strAltMas=" Alt +";
		public static String strNuevoTabla="NUEVO TABLA";
		public static String strMensaje="MENSAJE";
		public static String strDuplicar="DUPLICAR";
		public static String strNue="NUE";
		public static String strNuevoRelaciones="NUEVO REL";
		public static String strActualizar="ACTUALIZAR";
		public static String strEliminar="ELIMINAR";
		public static String strEli="ELI";
		public static String strEl="EL";
		public static String strCancelar="CANCELAR";
		public static String strCerrar="CERRAR";
		public static String strSalir="SALIR";
		public static String strMostrarOcultar="MOSTRAR OCULTAR";
		public static String strGuardarCambios="GUARDAR";
		public static String strGuardarCambiosTabla="GUARDAR TABLA";
		public static String strSincronizar="SINCRONIZAR";
		public static String strCopiar="COPIAR";
		public static String strVerForm="VER";
		public static String strFormulario="FORMULARIO";
		public static String strMantenimiento="MANTENIMIENTO ";
		public static String strMantenimientoDe="MANTENIMIENTO DE ";
		public static String strReporteDe="REPORTE DE ";
		public static String strNumeroDe="NUMERO DE ";
		public static String strAProcesar=" A PROCESAR:";
		public static String strProcesar="PROCESAR";
		public static String strProcesarInformacion="PROCESAR INFORMACION";
		public static String strBusquedas="BUSQUEDAS";
		public static String strBusqueda="BUSQUEDA";
		public static String strBuscar="BUSCAR";
		public static String strPor="POR";
		public static String strDe=" DE ";
		public static String strSin="SIN";
		public static String strCatalogosSimples="CATALOGOS SIMPLES";
		public static String strCatalogosCompuestos="CATALOGOS COMPUESTOS";
		public static String strSiguientes="SIGUIENTES";
		public static String strAnteriores="ANTERIORES";
		public static String strMostrarTodosResultados="MOSTRAR TODOS LOS RESULTADOS";
		public static String strTipo="TIPO";
		public static String strFinal="FINAL";
		public static String strTiposReportes="TIPOS DE REPORTE";
		public static String strTiposArchivosReportes="TIPOS DE ARCHIVO";//"TIPOS DE ARCHIVO O REPORTE";
		public static String strPaginacion="PAGINACION";
		public static String strTiposPaginacion="TIPOS DE PAGINACION";
		public static String strAccion="ACCION";
		public static String strTiposAcciones="TIPOS DE ACCIONES";
		public static String strTiposRelaciones="TIPOS DE RELACIONES";
		public static String strTiposSeleccionar="TIPOS DE SELECCION";
		public static String strArchivo_Lower="Archivo";
		
		public static String strTipoBusqueda="Tipo=";
		public static String strCodigoDe="CODIGO UNICO DE ";
		public static String strParametrosBusqueda="PARAMETROS->";
		public static String strVentana="VENTANA";
		public static String strConfirmacion="CONFIRMACION";
		
		#endregion
		
		#region ReadOnly
		
		public const String strPrefijoParametro="PRM_";
		
		public int GetNumeroDeColumnasWebComboC(TableSchema tableSchema) {
			int count=0;					
					
			foreach(ColumnSchema columnSchema in tableSchema.Columns) {
				if(GetTieneComboColumnFromPropertiesC(columnSchema)) {
					count++;
				}
			}
			
			return count;
		}
		
		public int GetNumeroDeColumnasWebComboNormalC(TableSchema tableSchema) {
			int count=0;					
					
			foreach(ColumnSchema columnSchema in tableSchema.Columns) {
				if(GetTieneComboColumnFromPropertiesC(columnSchema) && !(columnSchema.Name.Equals(strId) || columnSchema.Name.Equals(strVersionRow))) {
					count++;
				}
			}
			
			return count;
		}
		
		public int GetNumeroDeParametrosC(TableSchema tableSchema) 
		{
			int count=0;	
					
					
					foreach(ColumnSchema columnSchema in tableSchema.Columns)
					{
						if(columnSchema.Name.Contains(strPrefijoParametro))
						{
							count++;
						}
					}
			return count;
		}
		
		public int GetNumeroSinParametrosC(TableSchema tableSchema) 
		{
			int count=0;	
					
					
					foreach(ColumnSchema columnSchema in tableSchema.Columns)
					{
						if(!columnSchema.Name.Contains(strPrefijoParametro))
						{
							count++;
						}
					}
			return count;
		}
		
		#endregion
		
		#region Tipos de Generaciones
		
		//TODOS
		public const String strTipoGeneracionTodos="TODOS";
		//NINGUNO
		public const String strTipoGeneracionNinguno="NINGUNO";
		//Compuesto
		public const String strTipoGeneracionCompuestos="CS";
		//DeletesCascade
		public const String strTipoGeneracionDeletesCascade="DC";
		//MantenimientoClasesRelacionadas
		public const String strTipoGeneracionMantenimientoClasesRelacionadas="MCR";
		//GetXmls
		public const String strTipoGeneracionGetXmls="GX";
		//DeepForeignKey
		public const String strTipoGeneracionDeepForeignKey="DF";
		//DeepRelationship
		public const String strTipoGeneracionDeepRelationship="DR";
		//DeepForeignKeyAndRelatioship
		public const String strTipoGeneracionDeepForeignKeyAndRelatioship="DFR";
		
	
		public static bool GenerarTipoGeneracionC(String strTipoGeneracion,String strTiposGeneraciones) {
			bool blnGenerar=false;
			
			
			foreach(String strTipoGeneracionLocal in strTiposGeneraciones.Split(',')) {
				
				if(strTipoGeneracionLocal.Contains(strTipoGeneracionTodos)) {
						return true;
				}
				
				if(strTipoGeneracionLocal.Contains(strTipoGeneracionNinguno)) {
						return false;
				}
				
				
				
				if(strTipoGeneracion==strTipoGeneracionDeletesCascade) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionDeletesCascade)) {
						blnGenerar=true;
						break;
					}
				} else if(strTipoGeneracion==strTipoGeneracionMantenimientoClasesRelacionadas) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionMantenimientoClasesRelacionadas)) {
						blnGenerar=true;
						break;
					}
				} else if(strTipoGeneracion==strTipoGeneracionGetXmls) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionGetXmls)) {
						blnGenerar=true;
						break;
					}
				} else if(strTipoGeneracion==strTipoGeneracionDeepForeignKey) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionDeepForeignKey)) {
						blnGenerar=true;
						break;
					}
				} else if(strTipoGeneracion==strTipoGeneracionDeepRelationship) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionDeepRelationship)) {
						blnGenerar=true;
						break;
					}
				} else if(strTipoGeneracion==strTipoGeneracionDeletesCascade) {
					if(strTipoGeneracionLocal.Contains(strTipoGeneracionDeepForeignKeyAndRelatioship)) {
						blnGenerar=true;
						break;
					}
				}
			}
			
			return blnGenerar;
		
		}
		#endregion
			
		#region No StandardTables
		
		//ORIGINAL
		/*
		public static TableSchema GetTableSchemaFromColumnForeignKey(ColumnSchema columnSchema) {		
			TableSchema tableSchema=null;
			bool existe=false;
			//NO CAMBIAR POR DEFECTO DEBE SER NULO
			//tableSchema=columnSchema.Table;
			ArrayList arrayListForeignKeys =new ArrayList();
				
			foreach(TableKeySchema tableKeySchema in columnSchema.Table.ForeignKeys) {
				 existe=false;
				
				//if(!ExisteTablaEnListaC(tableKeySchema.PrimaryKeyTable,arrayListForeignKeys)) {
				//arrayListForeignKeys.Add(tableKeySchema.PrimaryKeyTable);
				//}
								
				//if(columnSchema.Name.Equals("idUnidad")) {
				//Trace.WriteLine(tableKeySchema.Name);
				//}
								
				//SOLO FUNCIONA CON FK SIMPLE CON 1 COLUMNA FK 
				if(tableKeySchema.ForeignKeyMemberColumns.Count==1) {
					foreach(MemberColumnSchema memberColumnSchema in tableKeySchema.ForeignKeyMemberColumns) {
						if(memberColumnSchema.Column.Equals(columnSchema)){
							existe=true;
							
							tableSchema=tableKeySchema.PrimaryKeyTable;
							break;
						}
					}
					
					if(existe) {
						break;
					}
				}
			}
			
			return tableSchema;
		}
		*/
		
		public static TableSchema GetTableSchemaFromColumnForeignKey(ColumnSchema columnSchema) {		
			TableSchema tableSchema=null;
			
			tableSchema=GetTableSchemaFromColumnForeignKeyBase(columnSchema);
			
			return tableSchema;
		}
		
		public static TableSchema GetTableSchemaFromColumnForeignKeyBase(ColumnSchema columnSchema) {		
			TableSchema tableSchema=null;
			bool existe=false;
			//NO CAMBIAR POR DEFECTO DEBE SER NULO
			//tableSchema=columnSchema.Table;
			ArrayList arrayListForeignKeys =new ArrayList();
				
			TableKeySchemaCollection tableForeignKeySchemaCollection=new TableKeySchemaCollection();
			TableKeySchemaCollectionMe tableForeignKeySchemaCollectionMe=new TableKeySchemaCollectionMe();
			TableSchemaMe tableSchemaMe=new TableSchemaMe();
			
			tableForeignKeySchemaCollection=columnSchema.Table.ForeignKeys;
										
				foreach(TableKeySchema tableKeySchema in tableForeignKeySchemaCollection) {				
					
					existe=false;
					
					//if(!ExisteTablaEnListaC(tableKeySchema.PrimaryKeyTable,arrayListForeignKeys)) {
					//arrayListForeignKeys.Add(tableKeySchema.PrimaryKeyTable);
					//}
									
					//if(columnSchema.Name.Equals("idUnidad")) {
					//Trace.WriteLine(tableKeySchema.Name);
					//}
									
					//SOLO FUNCIONA CON FK SIMPLE CON 1 COLUMNA FK 
					if(tableKeySchema.ForeignKeyMemberColumns.Count==1) {
						/*
						if(columnSchema.Table.Name.Equals("Ciudad")) {
							Trace.WriteLine(tableKeySchema.Name+"oooooooooooooookkkkkkkkkkkk "+tableKeySchema.PrimaryKeyTable.Name);
						}
						*/
						
						foreach(MemberColumnSchema memberColumnSchema in tableKeySchema.ForeignKeyMemberColumns) {
							if(memberColumnSchema.Column.Equals(columnSchema)){
								existe=true;
								
								tableSchema=tableKeySchema.PrimaryKeyTable;
								break;
							}
						}
						
						if(existe) {
							break;
						}
					} else {
						/*
						if(columnSchema.Table.Name.Equals("Ciudad")) {
							Trace.WriteLine(tableKeySchema.Name+"oooooooooooooookkkkkkkkkkkk 2222 "+tableKeySchema.PrimaryKeyTable.Name);
							
							foreach(MemberColumnSchema memberColumnSchema in tableKeySchema.ForeignKeyMemberColumns) {
								Trace.WriteLine(memberColumnSchema.Column.Name);
							}
						}
						*/
					}
				}
			
			
			return tableSchema;
		}
		
	public ColumnSchema GetColumnaHijoRelacionadaPadreC(TableSchema tableSchemaPadre,TableSchema tableSchemaHijo,ref bool existe) {
		String sSql="";
		
		TableSchema tableSchemaPK=null;
		ColumnSchema columnSchemaEncontrada=null;
		
		foreach(ColumnSchema columnSchema in tableSchemaHijo.Columns) {
			columnSchemaEncontrada=columnSchema;
			
			if(columnSchema.IsForeignKeyMember) {
				tableSchemaPK=GetTableSchemaFromColumnForeignKey(columnSchema);
				
				if(tableSchemaPK.Name.Equals(tableSchemaPadre.Name)) {
					existe=true;
					break;
				}
			} 
		}
		
		return columnSchemaEncontrada;
	}

	public ColumnSchema GetColumnSchemaFromColumnForeignKey(TableSchema tableSchemaPK,TableSchema tableSchemaFK,ColumnSchema columnSchemaFK) {		
			MemberColumnSchema memberColumnSchema=null;
			ColumnSchema columnSchema=null;
			TableSchema tableSchema=null;
			//NO CAMBIAR POR DEFECTO DEBE SER NULO
			//tableSchema=columnSchema.Table;
			ArrayList arrayListForeignKeys =new ArrayList();
				
			TableKeySchemaCollection tableForeignKeySchemaCollection=new TableKeySchemaCollection();
			TableKeySchemaCollectionMe tableForeignKeySchemaCollectionMe=new TableKeySchemaCollectionMe();
			TableSchemaMe tableSchemaMe=new TableSchemaMe();
			
			tableForeignKeySchemaCollection=columnSchemaFK.Table.ForeignKeys;
				
		
				foreach(TableKeySchema tableKeySchema in tableForeignKeySchemaCollection) {
					
					if(!tableKeySchema.PrimaryKeyMemberColumns.Count.Equals(tableKeySchema.ForeignKeyMemberColumns.Count)) {
						System.Windows.Forms.MessageBox.Show("NO COINCIDE EL NUMERO DE COLUMNAS PK  Y FK");
						
					}
					
					if(tableKeySchema.PrimaryKeyTable.Name.Equals(tableSchemaPK.Name) && tableKeySchema.ForeignKeyTable.Name.Equals(tableSchemaFK.Name)) {
						
						//for(PrimaryKeyMemberColumns) {
						for(int i=0;i<tableKeySchema.PrimaryKeyMemberColumns.Count;i++) {
							if(tableKeySchema.ForeignKeyMemberColumns[i].Column.Name.Equals(columnSchemaFK.Name)) {
								memberColumnSchema=tableKeySchema.PrimaryKeyMemberColumns[i];
								columnSchema=memberColumnSchema.Column;
								
								return columnSchema;
							}
						}	
					}
					/*
					foreach(MemberColumnSchema memberColumnSchema in tableKeySchema.ForeignKeyMemberColumns) {
						if(memberColumnSchema.Column.Equals(columnSchemaFK)){
							tableSchema=tableKeySchema.PrimaryKeyTable;
							break;
						}
					}
					*/
					
				}
			
			
			
			return columnSchema;
		}
		
		public String GetPersistenceTableManyToManyColumnsC(TableSchema TablaBase,CollectionInfo collectionInfo,String strCommentRelacionesPersistencia) {		
			String strJoinColumns="\r\n\t\t"+strCommentRelacionesPersistencia+"joinColumns=";
			String strInverseColumns="\r\n\t\t"+strCommentRelacionesPersistencia+"inverseJoinColumns=";
			String strJoinColumn="";
			String strInverseColumn="";
			ArrayList arrJoinColumns=new ArrayList();
			ArrayList arrInverseColumns=new ArrayList();
			//ArrayList arrJoinColumns1=new ArrayList();
			//ArrayList arrJoinColumns2=new ArrayList();
			bool blnEsPrimero=true;
			
			String strPersistenceTableManyToManyColumns="";
			TableKeySchema tableKeySchema=collectionInfo.TableKey;
			
			//Trace.WriteLine("FKT:"+tableKeySchema.ForeignKeyTable.Name);
			
			
			//for(MemberColumnSchema memberColumn in tableKeySchema.ForeignKeyMemberColumns) {
			MemberColumnSchema memberColumnSchemaFK=null;
			MemberColumnSchema memberColumnSchemaPK=null;
			
			if(!tableKeySchema.ForeignKeyMemberColumns.Count.Equals(tableKeySchema.PrimaryKeyMemberColumns.Count)) {
				System.Windows.Forms.MessageBox.Show("RELACION MUCHOS A MUCHOS NO COINCIDE PK Y FK EN CANTIDAD "+TablaBase.Name);
				return "";
			}
			
			for(int i=0;i< tableKeySchema.ForeignKeyMemberColumns.Count;i++) {	
				if(!blnEsPrimero) {
					strJoinColumn=",";
				}
				 memberColumnSchemaFK=tableKeySchema.ForeignKeyMemberColumns[i];
				 memberColumnSchemaPK=tableKeySchema.PrimaryKeyMemberColumns[i];
				
				strJoinColumn+="@JoinColumn(name="+GetNombreClaseC(memberColumnSchemaFK.Table.ToString())+"ConstantesFunciones."+memberColumnSchemaFK.Column.Name.ToUpper()+"";
				strJoinColumn+=",referencedColumnName="+GetNombreClaseC(memberColumnSchemaPK.Table.ToString())+"ConstantesFunciones."+memberColumnSchemaPK.Column.Name.ToUpper()+"";
				strJoinColumn+=")";
				
				//Trace.WriteLine("FCLM:"+memberColumnSchemaFK.Column.Name);
				//Trace.WriteLine("PCLM:"+memberColumnSchemaPK.Column.Name);
				
				arrJoinColumns.Add(strJoinColumn);
				strJoinColumns+=strJoinColumn;
				
				strJoinColumn="";
				blnEsPrimero=false;
			}
			
			//Trace.WriteLine("PKT:"+tableKeySchema.PrimaryKeyTable.Name);
			
			//SE UNEN LOS DOS ARRIBA
			/*
			foreach(MemberColumnSchema memberColumn in tableKeySchema.PrimaryKeyMemberColumns) {								
				strJoinColumn=",referencedColumnName="+GetNombreClaseC(memberColumn.Table.ToString())+"DataAccess.getColumnNameNative"+strIdGetSet+"()";
				arrJoinColumns2.Add(strJoinColumn);
				
				Trace.WriteLine("PCLM:"+memberColumn.Column.Name);
			}
			*/
			
			
			strJoinColumns+=",";
			
			TableKeySchema tableKeySchemaReverse=GetManyToManyTableKeySchemaInverseFromTable(collectionInfo.SecondaryTableSchema,TablaBase);
			//TableKeySchema tableKeySchemaReverse=GetManyToManyTableKeySchemaInverseFromTable(collectionInfo.JunctionTableSchema,TablaBase);
			
			//Trace.WriteLine(collectionInfo.SecondaryTableSchema.Name+"-"+TablaBase.Name);
			
			//SE PONE LA OTRA TABLA POR DEFECTO
			/*
			if(tableKeySchemaReverse==null) {
				tableKeySchemaReverse=collectionInfo.SecondaryTableSchema;
			}
			*/
			
			if(tableKeySchemaReverse!=null) {
				
				
				//Trace.WriteLine("FKT:"+tableKeySchemaReverse.ForeignKeyTable.Name);
				
				if(!tableKeySchemaReverse.ForeignKeyMemberColumns.Count.Equals(tableKeySchemaReverse.PrimaryKeyMemberColumns.Count)) {
					System.Windows.Forms.MessageBox.Show("RELACION MUCHOS A MUCHOS NO COINCIDE PK Y FK EN CANTIDAD "+TablaBase.Name);
					return "";
				}
			
				blnEsPrimero=true;
				
				for(int i=0;i< tableKeySchemaReverse.ForeignKeyMemberColumns.Count;i++) {	
				//foreach(MemberColumnSchema memberColumn in tableKeySchemaReverse.ForeignKeyMemberColumns) {
					
					if(!blnEsPrimero) {
						strInverseColumn=",";
					}
					memberColumnSchemaFK=tableKeySchemaReverse.ForeignKeyMemberColumns[i];
					memberColumnSchemaPK=tableKeySchemaReverse.PrimaryKeyMemberColumns[i];
					
					strInverseColumn+="@JoinColumn(name="+GetNombreClaseC(memberColumnSchemaFK.Table.ToString())+"ConstantesFunciones."+memberColumnSchemaFK.Column.Name.ToUpper()+"";
					strInverseColumn+=",referencedColumnName="+GetNombreClaseC(memberColumnSchemaPK.Table.ToString())+"ConstantesFunciones."+memberColumnSchemaPK.Column.Name.ToUpper()+"";
					strInverseColumn+=")";
					
					//Trace.WriteLine("FCLM:"+memberColumnSchemaFK.Column.Name);
					//Trace.WriteLine("PCLM:"+memberColumnSchemaPK.Column.Name);
					
					arrInverseColumns.Add(strInverseColumn);
					strInverseColumns+=strInverseColumn;
					
					strInverseColumn="";
					blnEsPrimero=false;
				}
				
				
				//Trace.WriteLine("PKT:"+tableKeySchemaReverse.PrimaryKeyTable.Name);
				//ANTES SE UNEN
				/*
				foreach(MemberColumnSchema memberColumn in tableKeySchemaReverse.PrimaryKeyMemberColumns) {
					Trace.WriteLine("PCLM:"+memberColumn.Column.Name);
				}
				*/
			} else {
				//System.Windows.Forms.MessageBox.Show("RELACION MUCHOS A MUCHOS SIN INVERSE RELACION "+TablaBase.Name);
				Trace.WriteLine("RELACION MUCHOS A MUCHOS SIN INVERSE RELACION "+TablaBase.Name);
			}
			
			//strInitFuncion+="\r\n\t\tjoinColumns=@JoinColumn(name=ConstantesSql.ID+"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.TABLENAME, referencedColumnName="+GetIdNameC(TablaBase)+"),";
			//strInitFuncion+="\r\n\t\tinverseJoinColumns=@JoinColumn(name=ConstantesSql.ID+"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones.TABLENAME, referencedColumnName="+GetIdNameC(collectionInfo.SecondaryTableSchema)+")";
							
			/*
			Trace.WriteLine("PKT:"+collectionInfo.PrimaryTable);
			foreach(String sColumn in collectionInfo.PkColNames) {
				Trace.WriteLine("PCLM:"+sColumn);
			}
			
			Trace.WriteLine("SKT:"+collectionInfo.SecondaryTable);
			foreach(String sColumn in collectionInfo.FkColNames) {
				Trace.WriteLine("SCLM:"+sColumn);
			}
			
			Trace.WriteLine("JKT:"+collectionInfo.JunctionTable);
			foreach(String sColumn in collectionInfo.JunctionTablePkColNames) {
				Trace.WriteLine("JCLM:"+sColumn);
			}			
			*/
			
			
			
			//strPersistenceTableManyToManyColumns+="\r\n\t\tjoinColumns=@JoinColumn(name=ConstantesSql.ID+"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.TABLENAME, referencedColumnName="+GetIdNameC(TablaBase)+"),";
			//strPersistenceTableManyToManyColumns+="\r\n\t\tinverseJoinColumns=@JoinColumn(name=ConstantesSql.ID+"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones.TABLENAME, referencedColumnName="+GetIdNameC(collectionInfo.SecondaryTableSchema)+")";
			
			strPersistenceTableManyToManyColumns=strJoinColumns+strInverseColumns;
			
			return strPersistenceTableManyToManyColumns;
		}
		
		public TableKeySchema GetManyToManyTableKeySchemaInverseFromTable(TableSchema tableSchemaOrigen,TableSchema tableSchemaObjetivo) 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";//"public ";// void  getTR_";
			
			String strEndFuncion="\t}";
			
			Hashtable tablasRelacionadas=GetTablasRelacionadas(tableSchemaOrigen,true);
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			TableKeySchema tableKeySchema=null;
			
			//Trace.WriteLine("ORIGEN:"+tableSchemaOrigen.Name+strSimboloDosPuntos+tablasRelacionadas.Count);	
			//Trace.WriteLine("OBJETIVO:"+tableSchemaObjetivo.Name);	
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{	
				//Trace.WriteLine("here:"+collectionInfo.SecondaryTableSchema);
						
				/*
				if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					//continue;
				} else {
					strNombreAdicional="";
					arrayListRelaciones.Add(collectionInfo.SecondaryTable);
				}
				*/
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					//Trace.WriteLine("ACTUAL"+tableSchemaObjetivo.Name);
					
					if(collectionInfo.SecondaryTableSchema.Name.Equals(tableSchemaObjetivo.Name)){
						tableKeySchema=collectionInfo.TableKey;
					}
					
					/*
					strInitFuncion+="\r\n\tpublic ";	
					strInitFuncion+=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+" get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"() {";
					strTablaClaseRelacionada="\r\n\t\treturn this."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+";\r\n";
					*/
				} else {
					//Trace.WriteLine("NO MANY");	
				}
			}
								
			return tableKeySchema; 
		}
		
		/*
		ArrayList arrayListForeignKeys =new ArrayList();
				
				foreach(TableKeySchema tableKeySchema in TablaBase.ForeignKeys) {
					if(!ExisteTablaEnListaC(tableKeySchema.PrimaryKeyTable,arrayListForeignKeys)) {
						arrayListForeignKeys.Add(tableKeySchema.PrimaryKeyTable);
					}
				}
				
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					strTablaClaseRelacionada+="\r\n\tpublic "+GetNombreClaseC(tableSchemaForeignKey.ToString())+" "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(tableSchemaForeignKey.ToString())+";";					
				}
		*/
		
		public String GetColumnsPKParametrosC(TableSchema tablaBase) {		
			String strColumnsPKParametros="";
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					strColumnsPKParametros+=GetParameterFunctionColumnC(tablaBase.Columns[i],true) ;
				} 
			} 
			
			return strColumnsPKParametros;
		}
		
		public bool GetTieneTipoPKStandardC(TableSchema tablaBase) {
			bool blnTieneTipoPKStandard=false;
			String strColumnsPKParametros="";
			int intCountPK=0;
			bool blnEsBigIntColumn=false;
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					intCountPK++;
					
					blnEsBigIntColumn=EsBigIntColumn(tablaBase.Columns[i]);					
					
				} 
			} 
			
			if(intCountPK.Equals(1)&&blnEsBigIntColumn) {
				blnTieneTipoPKStandard=true;
			}
			
			return blnTieneTipoPKStandard;
		}		
		
		public String GetColumnsPKParametrosSinComaPrimeroC(TableSchema tablaBase) {		
			String strColumnsPKParametros="";
			bool blnEsPrimero=true;
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 			
					strColumnsPKParametros+=GetParameterFunctionColumnC(tablaBase.Columns[i],!blnEsPrimero) ;
					
					if(blnEsPrimero) {
						blnEsPrimero=false;
					}
				} 
			} 
			
			return strColumnsPKParametros;
		}
		
		
		public String GetColumnsPKParametrosUsoC(TableSchema tablaBase) {		
			String strColumnsPKParametros="";
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					strColumnsPKParametros+=GetParameterFunctionUsoColumnC(tablaBase.Columns[i],true) ;
				} 
			} 
			
			return strColumnsPKParametros;
		}
		
		public String GetColumnsPKParametrosUsoSinComaPrimeroC(TableSchema tablaBase) {		
			String strColumnsPKParametros="";
			bool blnEsPrimero=true;
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					strColumnsPKParametros+=GetParameterFunctionUsoColumnC(tablaBase.Columns[i],!blnEsPrimero) ;
					
					if(blnEsPrimero) {
						blnEsPrimero=false;
					}
				} 
			} 
			
			return strColumnsPKParametros;
		}
		//GetParameterSelection(memberColumnSchema.Column,false,esUnico,false,false,esRanges,false);
		
		public String GetColumnsPKParameterSelectionC(TableSchema tablaBase,bool esNative) {		
			String strColumnsPKParametros="";
			bool esUnico=true;
			bool esUltimo=false;
			bool esRanges=false;
			int countNumeroPK=1;
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					if(countNumeroPK>=intPorTablaCountColumnsPKC) {
						esUltimo=true;
					}
					
					strColumnsPKParametros+=GetParameterSelectionC(tablaBase.Columns[i],esUltimo,esUnico,false,esNative,esRanges,false) ;
					countNumeroPK++;
				} 
			} 
			
			return strColumnsPKParametros;
		}
		
		public int GetCountColumnsPKC(TableSchema tablaBase) {		
			int intColumnsPKParametros=0;
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					intColumnsPKParametros++;
				} 
			} 
			
			return intColumnsPKParametros;
		}
		
		public ColumnSchemaCollection GetColumnsPKC(TableSchema tablaBase) {		
			ColumnSchemaCollection columnSchemaCollection=new ColumnSchemaCollection();
			
			for (int i = 0; i < tablaBase.Columns.Count; i++){ 
				if(tablaBase.Columns[i].IsPrimaryKeyMember){ 
					columnSchemaCollection.Add(tablaBase.Columns[i]);
				} 
			} 
			
			return columnSchemaCollection;
		}
		
		public bool ExisteTablaEnListaC(TableSchema tableExiste,ArrayList arrayList) {
			bool blnExiste=false;
				
			foreach(TableSchema tableSchema in arrayList) {
				if(tableSchema.Name.Equals(tableExiste.Name)) {
					blnExiste=true;
					break;	
				}
			}
			
			return blnExiste;
		}
		
		public ArrayList GetArrayListForeignKeys(TableSchema TablaBase) {		
			ArrayList arrayListForeignKeys =new ArrayList();
				
			TableKeySchemaCollection tableForeignKeySchemaCollection=new TableKeySchemaCollection();
			TableKeySchemaCollectionMe tableForeignKeySchemaCollectionMe=new TableKeySchemaCollectionMe();
			TableSchemaMe tableSchemaMe=new TableSchemaMe();
			
			tableForeignKeySchemaCollection=TablaBase.ForeignKeys;
								
			foreach(TableKeySchema tableKeySchema in tableForeignKeySchemaCollection) {
				if(!ExisteTablaEnListaC(tableKeySchema.PrimaryKeyTable,arrayListForeignKeys)) {
					arrayListForeignKeys.Add(tableKeySchema.PrimaryKeyTable);
				}
			}
										
			return arrayListForeignKeys;
		}
		
		public MemberColumnSchemaCollection GetMemberColumnSchemaForeignKeysC(TableSchema tableSchema,TableSchema tableSchemaForeignKey) {		
			MemberColumnSchemaCollection memberColumnSchemaCollectionForeignKeys =new MemberColumnSchemaCollection();
				
			TableKeySchemaCollection tableForeignKeySchemaCollection=new TableKeySchemaCollection();
			
			tableForeignKeySchemaCollection=tableSchema.ForeignKeys;
			
			foreach(TableKeySchema tableKeySchema in tableForeignKeySchemaCollection) {
				if(tableKeySchema.PrimaryKeyTable.Name.Equals(tableSchemaForeignKey.Name)) {
					memberColumnSchemaCollectionForeignKeys=tableKeySchema.ForeignKeyMemberColumns;
					break;
				}
			}
			
			return memberColumnSchemaCollectionForeignKeys;
		}
		
		public MemberColumnSchemaCollectionMe GetMemberColumnSchemaForeignKeysMeC(TableSchema tableSchema,TableSchema tableSchemaForeignKey) {		
			MemberColumnSchemaCollectionMe memberColumnSchemaCollectionForeignKeysMe =new MemberColumnSchemaCollectionMe();
				
			TableKeySchemaCollectionMe tableForeignKeySchemaCollectionMe=new TableKeySchemaCollectionMe();
			TableSchemaMe tableSchemaMe=new TableSchemaMe();
			
			//XML CODESMITH
			tableSchemaMe=ReadXmlTableSchemaMeC(strDirectorioBaseXmlCodesmith,tableSchema);						
			tableForeignKeySchemaCollectionMe=tableSchemaMe.ForeignKeys;
			

			foreach(TableKeySchemaMe tableKeySchema in tableForeignKeySchemaCollectionMe) {
				if(tableKeySchema.PrimaryKeyTable.Name.Equals(tableSchemaForeignKey.Name)) {
					memberColumnSchemaCollectionForeignKeysMe=tableKeySchema.ForeignKeyMemberColumns;
					break;
				}
			}
			
			return memberColumnSchemaCollectionForeignKeysMe;
		}
		
		public String GetColumnsForeignKeysPersistenciaC(MemberColumnSchemaCollection memberColumnSchemaCollectionFK) {		
			String strColumnsForeignKeysPersistencia="";
				
			foreach(MemberColumnSchema memberColumnSchema in memberColumnSchemaCollectionFK) {
				//System.Windows.Forms.MessageBox.Show(memberColumnSchema.Name);
				strColumnsForeignKeysPersistencia+="\r\n\t@JoinColumn(name = \""+GetNombreColumnFromProperties(memberColumnSchema.Column)+"\", nullable = true,insertable=false, updatable=false)";
			}
			strColumnsForeignKeysPersistencia="\r\n\t@JoinColumns({"+strColumnsForeignKeysPersistencia+"\r\n\t})";
			
			return strColumnsForeignKeysPersistencia;
		}
		
		public String GetColumnsForeignKeysCallDataAccessC(TableSchema TablaBase,MemberColumnSchemaCollection memberColumnSchemaCollectionFK) {		
			String strColumnsForeignKeysPersistencia="";
				
			foreach(MemberColumnSchema memberColumnSchema in memberColumnSchemaCollectionFK) {
				//System.Windows.Forms.MessageBox.Show(memberColumnSchema.Name);
				strColumnsForeignKeysPersistencia+=",rel"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+GetNombreCompletoColumnaClaseC(memberColumnSchema.Column)+ "()";
			}
			
			return strColumnsForeignKeysPersistencia;
		}
		
		public String GetColumnsForeignKeysAdditionalDescripcionC(TableSchema tableSchemaForeignKey,MemberColumnSchemaCollection memberColumnSchemaCollectionFK) {		
			String strColumnsForeignKeysPersistencia="";
				
			foreach(MemberColumnSchema memberColumnSchema in memberColumnSchemaCollectionFK) {
				//System.Windows.Forms.MessageBox.Show(memberColumnSchema.Column.Table.Name);
				//strColumnsForeignKeysPersistencia+="\r\n\t@JoinColumn(name = \""+GetNombreColumnFromProperties(memberColumnSchema.Column)+"\", nullable = true,insertable=false, updatable=false)";
				strColumnsForeignKeysPersistencia+="\t\t\tsDescripcion+="+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString()) +"."+GetXmlColumnaFuncionDescripcionFromPropertiesC(memberColumnSchema.Column)+";";
				//System.Windows.Forms.MessageBox.Show(strColumnsForeignKeysPersistencia);
			}
			
			return strColumnsForeignKeysPersistencia;
		}
		
		public String GetColumnsForeignKeysAdditionalDescripcionC(TableSchema tableSchemaForeignKey,ColumnSchemaCollection columnSchemaCollectionFK) {		
			String strColumnsForeignKeysPersistencia="";
				
			foreach(ColumnSchema columnSchema in columnSchemaCollectionFK) {
				//System.Windows.Forms.MessageBox.Show(columnSchema.Table.Name);
				//strColumnsForeignKeysPersistencia+="\r\n\t@JoinColumn(name = \""+GetNombreColumnFromProperties(memberColumnSchema.Column)+"\", nullable = true,insertable=false, updatable=false)";
				strColumnsForeignKeysPersistencia+="\t\t\tsDescripcion+="+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString()) +"."+GetXmlColumnaFuncionDescripcionFromPropertiesC(columnSchema)+";";
				//System.Windows.Forms.MessageBox.Show(strColumnsForeignKeysPersistencia);
			}
			
			return strColumnsForeignKeysPersistencia;
		}
		
		public String GetColumnsForeignKeysReporteDescripcionC(TableSchema TablaBase,TableSchema tableSchemaForeignKey,MemberColumnSchemaCollection memberColumnSchemaCollectionFK) {		
			String strColumnsForeignKeysPersistencia="";
			String strTipo="";
			String strPrefijo="";
			String strColumna="";	
			String strIfElse="";
			ColumnSchema column=null;
			
			foreach(MemberColumnSchema memberColumnSchema in memberColumnSchemaCollectionFK) {
				column=memberColumnSchema.Column;
				
				strTipo=GetTipoColumnaClaseC(column);	
				strPrefijo=GetPrefijoTipoC(column);	
				strColumna=GetNombreColumnaClaseC(column);	
				strIfElse="\r\nif(request.getParameter(\""+GetNameControlHtml(column) +"\"+i.tToString())== null||request.getParameter(\""+GetNameControlHtml(column) + "\"+i.toString())==\"\")\r\n{\r\n";
				   strIfElse+=strPrefijo+strColumna+"=null;\r\n}\r\nelse\r\n{\r\n";	
				//System.Windows.Forms.MessageBox.Show(memberColumnSchema.Name);
				//strColumnsForeignKeysPersistencia+="\t\t\tsDescripcion+="+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString()) +"."+GetXmlColumnaFuncionDescripcionFromPropertiesC(memberColumnSchema.Column)+";";
				strColumnsForeignKeysPersistencia+=GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".setField_"+strPrefijo+ strColumna +strClaseDetalleBean+"("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Descripcion("+GetNombreClaseObjetoC(TablaBase.ToString()) +".get"+GetPrefijoRelacionC() +GetNombreClaseC(tableSchemaForeignKey.ToString())+"())"+");";
			}
			
			return strColumnsForeignKeysPersistencia;
		}
		
			
		/*	CollectionInfo collectionInfo=...........
		
		TableKeySchema TableKey = null;
		TableSchema PrimaryTableSchema;		string PrimaryTable;
		TableSchema SecondaryTableSchema;	string SecondaryTable;	string[] SecondaryTablePkColNames;
		TableSchema JunctionTableSchema;	string JunctionTable;	string[] JunctionTablePkColNames;
		string[] PkColNames;	string[] FkColNames;	
				
		RelationshipType CollectionRelationshipType;	string CollectionTypeName = string.Empty;
		string TypeName = string.Empty;		string CallParams = string.Empty;	string PropertyName = string.Empty;
		*/
		
		public String GetFinalQueryRelacionesC(TableSchema TablaBase,CollectionInfo collectionInfo,String strNombreAdicional) {		
			String stFinalQueryRelaciones="";
			
			/*
			//PRIMARY KEY -- TIPO VUELO
			
			System.Windows.Forms.MessageBox.Show(collectionInfo.TableKey.PrimaryKeyTable.Name);
			
			foreach(MemberColumnSchema MemberColumnSchema in collectionInfo.TableKey.PrimaryKeyMemberColumns) {
				System.Windows.Forms.MessageBox.Show(MemberColumnSchema.Column.Name);
			}
			
			//FOREIGN KEY  -- VUELO
			System.Windows.Forms.MessageBox.Show(collectionInfo.TableKey.ForeignKeyTable.Name);
			
			foreach(MemberColumnSchema MemberColumnSchema in collectionInfo.TableKey.ForeignKeyMemberColumns) {
				System.Windows.Forms.MessageBox.Show(MemberColumnSchema.Column.Name);
			}
			*/
			
			if(!blnNoStandardTableFromProperties) {	
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					stFinalQueryRelaciones+="\""+strHqlJoinRelacionnes+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+ " WHERE "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+"."+strId+"=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"());\r\n";
				
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {	
					stFinalQueryRelaciones+="\""+strHqlJoinRelacionnes+""+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+strNombreAdicional+ " WHERE "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+strNombreAdicional+"."+strId+"=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"());\r\n";
						
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany) {					
					stFinalQueryRelaciones+="\""+strHqlJoinRelacionnes+""+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo"+collectionInfo.JunctionTableSchema)+ "s table2 "+strHqlJoinRelacionnes+" table2."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+ " table3 WHERE table3.id=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"());\r\n";					
						
				}
			} else {
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					stFinalQueryRelaciones+="\""+strHqlJoinRelacionnes+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+ GetWhereFinalQueryRelacionesNoStandardC(TablaBase,collectionInfo,strNombreAdicional);//" WHERE "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+"."+strId+"=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()) );\r\n";
				
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {	
					stFinalQueryRelaciones+="\""+strHqlJoinRelacionnes+""+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+strNombreAdicional+ GetWhereFinalQueryRelacionesNoStandardC(TablaBase,collectionInfo,strNombreAdicional);//" WHERE "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+strNombreAdicional+"."+strId+"=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()));\r\n";
						
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany) {					
					stFinalQueryRelaciones+="\""+strHqlJoinRelacionnes+""+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo"+collectionInfo.JunctionTableSchema)+ "s table2 "+strHqlJoinRelacionnes+" table2."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+ " table3 "+ GetWhereFinalQueryRelacionesNoStandardC(TablaBase,collectionInfo,strNombreAdicional);//WHERE table3.id=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()));\r\n";					
						
				}
			}
			
			return stFinalQueryRelaciones;
		}
		
		public String GetWhereFinalQueryRelacionesNoStandardC(TableSchema TablaBase,CollectionInfo collectionInfo,String strNombreAdicional) {		
			String stFinalWhereQueryRelaciones="";
			String strWhere=" WHERE ";
			
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					stFinalWhereQueryRelaciones+=strWhere+GetWhereParametersFinalQueryRelacionesNoStandardC(TablaBase,collectionInfo,strNombreAdicional)+";\r\n";
				
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {	
					stFinalWhereQueryRelaciones+=strWhere+GetWhereParametersFinalQueryRelacionesNoStandardC(TablaBase,collectionInfo,strNombreAdicional)+";\r\n";
						
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany) {					
					stFinalWhereQueryRelaciones+=strWhere+GetWhereParametersFinalQueryRelacionesNoStandardC(TablaBase,collectionInfo,strNombreAdicional)+";\r\n";					
						
				}
				
			return stFinalWhereQueryRelaciones;
		}
		
		public String GetWhereParametersFinalQueryRelacionesNoStandardC(TableSchema TablaBase,CollectionInfo collectionInfo,String strNombreAdicional) {		
			String stFinalWhereParametersQueryRelaciones="";
			String stFinalWhereParameterInitialQueryRelaciones="";
			String stFinalWhereParameterFinishQueryRelaciones="";
			ArrayList arrayListParametersInitials=new ArrayList();
			ArrayList arrayListParametersFinishs=new ArrayList();
			
			String strPrePostFijo="";
			
			
			
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					//stFinalWhereParametersQueryRelaciones+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+"."+strId+"=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()) )";
					foreach(MemberColumnSchema memberColumnSchema in collectionInfo.TableKey.PrimaryKeyMemberColumns) {
						strPrePostFijo="";
						
						if(EsConPrePostFijoQueryC(memberColumnSchema.Column) ) {
							strPrePostFijo="'";	
						}
						
						stFinalWhereParametersQueryRelaciones+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+"."+GetNombreCompletoLowerColumnaClaseC(memberColumnSchema.Column)+"="+strPrePostFijo+"\"+"+GetTipoColumnaParse(memberColumnSchema.Column,GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+GetNombreCompletoColumnaClaseC(memberColumnSchema.Column)+"()")+"+\""+strPrePostFijo+"\")";
					}
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {	
					//stFinalWhereParametersQueryRelaciones+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+strNombreAdicional+"."+strId+"=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()));\r\n";
					strPrePostFijo="";											
						
					foreach(MemberColumnSchema memberColumnSchema in collectionInfo.TableKey.PrimaryKeyMemberColumns) {
						strPrePostFijo="";
						
						if(EsConPrePostFijoQueryC(memberColumnSchema.Column) ) {
							strPrePostFijo="'";	
						}
						
						//stFinalWhereParametersQueryRelaciones+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+strNombreAdicional+"."+GetNombreCompletoLowerColumnaClaseC(memberColumnSchema.Column)+"=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()))";
						//stFinalWhereParameterInitialQueryRelaciones=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+strNombreAdicional+"."+GetNombreCompletoLowerColumnaClaseC(memberColumnSchema.Column);//+"=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()))";
						//arrayListParametersInitials.Add(stFinalWhereParameterInitialQueryRelaciones);
						stFinalWhereParametersQueryRelaciones+=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+strNombreAdicional+"."+GetNombreCompletoLowerColumnaClaseC(memberColumnSchema.Column)+"="+strPrePostFijo+"\"+"+GetTipoColumnaParse(memberColumnSchema.Column,GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+GetNombreCompletoColumnaClaseC(memberColumnSchema.Column)+"()")+"+\""+strPrePostFijo+"\")";
																																																							
					}
					
					/*
					foreach(MemberColumnSchema memberColumnSchema in collectionInfo.TableKey.ForeignKeyMemberColumns) {
						stFinalWhereParameterFinishQueryRelaciones="=\"+"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+GetNombreCompletoLowerColumnaClaseC(memberColumnSchema.Column)+"()))";
						arrayListParametersFinishs.Add(stFinalWhereParameterFinishQueryRelaciones);
					}
					
					for (int i = 0; i < arrayListParametersInitials.Count; i++) {
						stFinalWhereParametersQueryRelaciones+=(String)arrayListParametersInitials[i]+(String)arrayListParametersFinishs[i];
					}
					*/
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany) {					
					//stFinalWhereParametersQueryRelaciones+=" table3.id=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()))";					
					foreach(MemberColumnSchema memberColumnSchema in collectionInfo.TableKey.PrimaryKeyMemberColumns) {
						strPrePostFijo="";
						
						if(EsConPrePostFijoQueryC(memberColumnSchema.Column) ) {
							strPrePostFijo="'";	
						}
						
						stFinalWhereParametersQueryRelaciones+=" table3."+GetNombreCompletoLowerColumnaClaseC(memberColumnSchema.Column)+"="+strPrePostFijo+"\"+"+GetTipoColumnaParse(memberColumnSchema.Column,GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+GetNombreCompletoColumnaClaseC(memberColumnSchema.Column)+"()")+"+\""+strPrePostFijo+"\")";
					}						
				}
				
			return stFinalWhereParametersQueryRelaciones;
		}
		
		public bool EsConPrePostFijoQueryC(ColumnSchema column) {
			bool blnPrePostFijo=false;
			
			if(EsVarCharColumn(column) ||EsCharColumn(column) ||EsDateTimeColumn(column)|| EsDateColumn(column)|| EsTimeColumn(column) ) {
				blnPrePostFijo=true;
			}
			
			return blnPrePostFijo;
		}
		
		public bool EsStringColumnC(ColumnSchema column) {
			bool blnPrePostFijo=false;
			
			if(EsVarCharColumn(column) ||EsCharColumn(column)) {
				blnPrePostFijo=true;
			}
			
			return blnPrePostFijo;
		}
		#endregion
		
		#region Persistence
		public const String strHqlJoinRelacionnes=" INNER JOIN ";//" JOIN FETCH ";
		public const String strJpaCascadeTypeDefault="";//CascadeType.ALL
		public const String strTipoParaFecha="Date";
		//SET NO ORDENA CON ORDER BY, UN CONTROL EXECIVO CON PRIMARY (LO HACE LA BD Y ES AUTO)
		public const String strTypeCollection="List";//"Set";
		public const String strTypeNewCollection="ArrayList";//"HashSet";
		public const String strTypeNewCollectionEnd="()";//"(0)";
		
		public  string GetPersistenciaColumnaClaseC(ColumnSchema column,bool esPKClase,bool ConPersistenciaAnotaciones) {
			
			if(!(GetConPersistenciaTableFromProperties(column.Table) && ConPersistenciaAnotaciones)){
				return "";
			}
			
			string tipoColumna ="";//  GetTipoColumnaFromColumn(column);
			string strPKNoStandard =  string.Empty;
			bool blnEsPKCompuesto=EsPKCompuestoTabla(column.Table);
			
			if(tipoColumna!="") {
				return tipoColumna;
			}
			
			//SI ES LA CLASE DE PK, DEBE GENERAR PERSISTENCIA
			if(!esPKClase) {
				if(GetNoStandardTableFromPropertiesC(column.Table)) {
					if(column.IsPrimaryKeyMember) {
						if(!blnEsPKCompuesto) {
							strPKNoStandard="@Id\r\n\t";
						} else {
							strPKNoStandard="@Transient";
							return strPKNoStandard;
						}
					}
				}
			}
			
			string param =  column.NativeType;
			string paramType =  column.DataType.ToString();
			
			String strInit="@Column( name =";
			String strEnd=" )";
			String strColumnPersistence=strPKNoStandard+strInit+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper();/*GetNombreColumnFromProperties(column)+*/
			
			if(GetEsNullColumnFromPropertiesC(column)/*.AllowDBNull*/) {
				strColumnPersistence+=", nullable=true";
			} else {
				strColumnPersistence+=", nullable=false";
			}
			
			
			switch (column.DataType) {
				case DbType.Boolean: {
					param =  "Boolean";
					break;					
				} case DbType.Binary: {
					if(column.Name==strVersionRow) {
						param =  "Timestamp";
					} else {
						param =  "byte []";
					}					
					break;				
				} case DbType.DateTime: {
					param =  "String";
					break;					
				}case DbType.Int32:case DbType.UInt32: {
					param =  "Integer";
					break;					
				} case DbType.Int64:case DbType.UInt64: {
					param =  "Long";
					break;				
				} case DbType.Int16:case DbType.UInt16: {
					param =  "Short";
					break;				
				}  case DbType.AnsiString:case DbType.AnsiStringFixedLength:case DbType.StringFixedLength:case DbType.String: {
					strColumnPersistence+=", length = "+column.Size.ToString();
					break;					
				}  case DbType.Decimal:case DbType.Double: {
					param =  "Double";
					break;
				}				
				default: {
					param =  "None:"+paramType ;
					break;
				}		
			}
			
			strColumnPersistence+=strEnd;
			return strColumnPersistence;
		}
		
		public bool EsPKCompuestoTabla(TableSchema table) {
			bool blnEsPKCompuesto=false;
			
			int intNumero=0;
			
			for (int i = 0; i < table.Columns.Count; i++){	
				if(table.Columns[i].IsPrimaryKeyMember){
					intNumero++; 
				}		
			}
			
			if(intNumero>1) {
				blnEsPKCompuesto=true;
			}
	
			return blnEsPKCompuesto;
		}
		
		#endregion
		
		#region Web
		public ArrayList arrBusquedaPorTablaFK=new ArrayList();
		public const String strJSInitialJavaScript="<script type=\"text/javascript\" language=\"javascript\">";	
		public const String strJSEndJavaScript="</script>";
		public static String strIncludeInit="<jsp:include page=";
		public static String strIncludeEnd="/>";
		public static String strIncludeInitFile="<jsp:include page=";		
		public static String strIncludeEndFile="/>";
		public const String strHtmlTypeElementoInicial="span class=\"elementotitulocampo\"";
		public const String strHtmlTypeElementoFinal="span";
		public const String strHtmlTypeBusquedaInicial="span  class=\"busquedatitulocampo\"";
		public const String strHtmlTypeBusquedaFinal="span";
		
		public static String strJavaScriptCDataInit="";
		public static String strJavaScriptCDataEnd="";
		
		//RICHFACES
		public static String strModalPanel="modalPanel";
		public static String strModalPanelParameters="";
		
		public static String strAjaxValidator="ajaxValidator";
		public static String strAjaxEventOnBlur=" event=\"onblur\"";
		public static String strWebFormInit="<a4j:form ";
		public static String strWebFormEnd="</a4j:form>";
		
		public static String strReRender="reRender";
		public static String strViewMantenimiento="View";
		public static String strActionParam="a4j:actionparam";
		public static String strSimpleTogglePanel="simpleTogglePanel";
		
		/*
		TODOS,
		DATA_ACCESS,
		ENTITIES,
		INTERFACE,
		LOGIC,
		CONSTANTES_FUNCIONES,
		EJB,
		CONTROLLER,
		WEB,
		REPORTE,
		JAVASCRIP
		*/
		
		public string GetPaqueteGenerarString(PaquetesGenerar paqueteGenerar)	{
			string sPaquete = GetPaqueteGenerarString(paqueteGenerar,"");
			
			return sPaquete;
			
		}
		
		public string GetPaqueteGenerarString(PaquetesGenerar paqueteGenerar,String strSubPaquete)	{
			string sPaquete = "TODOS";
			
			if(!strSubPaquete.Equals(String.Empty)) {
				strSubPaquete="-"+strSubPaquete;
			}
			
			switch(paqueteGenerar) {
				case(PaquetesGenerar.TODOS) :
					sPaquete = "TODOS"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.DATA_ACCESS) :
					sPaquete = "DATA_ACCESS"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.ENTITIES) :
					sPaquete = "ENTITIES"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.INTERFACE) :
					sPaquete = "INTERFACE"+strSubPaquete;
					break;
				
				case(PaquetesGenerar.LOGIC) :
					sPaquete = "LOGIC"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.CONSTANTES_FUNCIONES) :
					sPaquete = "CONSTANTES_FUNCIONES"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.EJB) :
					sPaquete = "EJB"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.CONTROLLER) :
					sPaquete = "CONTROLLER"+strSubPaquete;
					break;
				
				case(PaquetesGenerar.WEB) :
					sPaquete = "WEB"+strSubPaquete;
					break;
				
				case(PaquetesGenerar.REPORTE) :
					sPaquete = "REPORTE"+strSubPaquete;
					break;
				
				case(PaquetesGenerar.JAVASCRIP) :
					sPaquete = "JAVASCRIP"+strSubPaquete;
					break;
				
				case(PaquetesGenerar.FILES) :
					sPaquete = "ARCHIVOS"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.AUXILIAR) :
					sPaquete = "AUXILIAR"+strSubPaquete;
					break;
				
				case(PaquetesGenerar.AUXILIAR_MINIMAL) :
					sPaquete = "AUXILIAR MINIMAL"+strSubPaquete;
					break;
					
				case(PaquetesGenerar.XML_AUXILIAR) :
					sPaquete = "XML MINIMAL"+strSubPaquete;
					break;
					
				default:
					sPaquete = "TODOS"+strSubPaquete;
					break;
			}
			
			return sPaquete;
		}
		
		public String GetWebRowAccionesTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool ConFaces,bool ConRichFaces) 
		{
			String strHtml="";			
			String strRelaciones="";
			
			if(!esMantenimientoSimple)
			{
				strRelaciones="Relaciones";
			}						
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t<form name=\"frmAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";								
			}
			else
			{				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t<h:form id=\"frmAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";			
				} else {
					//strHtml+="\r\n\t\t\t\t<a4j:form id=\"frmAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";			
				}	
			}
			
			
			String strObjectFace="";
			
			if(ConFaces||ConRichFaces)
			{
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Acciones\" class=\"acciones\" style=\"display:none\">";							
			}
			else
			{	if(ConFaces||ConRichFaces)
				{
					//TABLA AUXILIAR PARA QUE EL PANEL ESTE BIEN UBICADO
					if(ConRichFaces){
						//COMENTADO PARA EMBEBER
						//strHtml+="\r\n\t\t\t<tr><td>";
						
						
						//strHtml+="\r\n\t\t\t<rich:panel id=\"richPanelAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\">";//header=\"ACCIONES\"
						strHtml+="\r\n\t\t\t<table>";
					}
					
					strHtml+="\r\n\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Acciones\" class=\"acciones\" style=\"display:${"+strObjectFace+".sVisibilidadTablaAcciones}\">";							
				}
			}
			
			
			strHtml+="\r\n\t\t\t\t\t<td align=\"center\">";
			strHtml+="\r\n\r\n\t\t\t\t\t<a name=\"Acciones\"></a>";
			
			strHtml+="\r\n\t\t\t\t\t<div align=\"right\">";
			strHtml+="\r\n\t\t\t\t\t\t<img style=\"visibility:visible\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/flechaarriba.gif\" width=\"15\" height=\"15\" onclick=\"funcionGeneral.irAreaDePagina('ControlesSecciones')\"/>";
			strHtml+="\r\n\t\t\t\t\t</div>";
			
			
			
			
			
			strHtml+="\r\n\r\n\t\t\t\t\t<table id=\"tblAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\" width=\"50%\" align=\""+GetAlignTableFromPropertiesC(TablaBase)+"\" >";
			strHtml+="\r\n\t\t\t\t\t\t<tr id=\"trAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"Basicos\">";
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			}
			else
			{
				if(ConFaces||ConRichFaces)
				{
					strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:${"+strObjectFace+".sVisibilidadCeldaNuevo"+GetNombreClaseC(TablaBase.ToString())+"}\">";
				}
			}
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<a:widget id=\"btndjdjtNuevo"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strNuevo+"'}\" />";
			}
			else
			{
				//strHtml+="<a:widget id=\"btndjdjtNuevo"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strNuevo+"'}\" />";
				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtNuevo"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\""+  /*" action=\"#{sumarBean.Sumar}\""+*/" value=\""+strNuevo+"\"/>";
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtNuevo"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" action=\"#{"+strObjectFace+".nuevo}\"  value=\""+strNuevo+"\" rendered=\"#{"+strObjectFace+".isPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+"}\" "+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+","+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.nuevo"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.nuevo"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
				}	
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			}
			else
			{
				if(ConFaces||ConRichFaces)
				{
					strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnActualizar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:${"+strObjectFace+".sVisibilidadCeldaActualizar"+GetNombreClaseC(TablaBase.ToString())+"}\">";
				}
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<a:widget id=\"btndjdjtActualizar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strActualizar+"'}\" />";
			}
			else
			{
				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtActualizar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+".actualizar"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\" value=\""+strActualizar+"\"/>";
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtActualizar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+".actualizar"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\" value=\""+strActualizar+"\" rendered=\"#{"+strTemporalWebNoActualizarDatos+strObjectFace+".isPermisoActualizar"+GetNombreClaseC(TablaBase.ToString())+"}\" "+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+","+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\"if (#{"+GetNombreClaseObjetoC(TablaBase.ToString())+"RequestBean.maximumSeverity==-1}){"+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()}\" oncomplete=\"if (#{"+GetNombreClaseObjetoC(TablaBase.ToString())+"RequestBean.maximumSeverity!=-1 and "+GetNombreClaseObjetoC(TablaBase.ToString())+"RequestBean.maximumSeverity!=2}){"+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()}\"/>";
				}	
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			
			String strEliminarPermiteFaces="";
			
			strEliminarPermiteFaces="${"+strObjectFace+".sVisibilidadCeldaEliminar"+GetNombreClaseC(TablaBase.ToString())+"}";
			
			if(!GetPermiteEliminarFromPropertiesC(TablaBase)) {
				 strEliminarPermiteFaces="hidden";
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			}
			else
			{
				if(ConFaces||ConRichFaces)
				{
					strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:"+strEliminarPermiteFaces+"\">";
				}
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<a:widget id=\"btndjdjtEliminar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strEliminar+"'}\" />";
			}
			else
			{				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtEliminar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+".eliminar}\" value=\""+strEliminar+"\"/>";
				} else {
					//ANTES LOS DATOS ESTABAN AQUI, AHORA SE LOS TIENE EN EL MODAL PANEL
					//action=\"#{"+strObjectFace+".eliminar}\"  "+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+","+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"
					
					strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtEliminar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  value=\""+strEliminar+"\" rendered=\"#{"+strTemporalWebNoActualizarDatos+strObjectFace+".isPermisoEliminar"+GetNombreClaseC(TablaBase.ToString())+"}\" oncomplete=\"#{rich:component('mondalPanelEliminarConfirmacion"+GetNombreClaseC(TablaBase.ToString())+"')}.show()\" />";
					
				}	
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCancelar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			}
			else
			{
				if(ConFaces||ConRichFaces)
				{
					strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCancelar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:${"+strObjectFace+".sVisibilidadCeldaCancelar"+GetNombreClaseC(TablaBase.ToString())+"}\">";
				}
			}
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="<a:widget id=\"btndjdjtCancelar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strCancelar+"'}\" />";
			}
			else
			{
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtCancelar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+".cancelar"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\" value=\""+strCancelar+"\"/>";
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtCancelar"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+".cancelar"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\" value=\""+strCancelar+"\" "+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
				}					
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t</tr>";
			strHtml+="\r\n\t\t\t\t\t\t<tr id=\"trAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"Guardar\">";
			
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" colspan=\"4\" align=\"center\" style=\"visibility:visible\">";
			} else {
				if(ConFaces||ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" colspan=\"4\" align=\"center\" style=\"visibility:${"+strObjectFace+".sVisibilidadCeldaGuardar"+GetNombreClaseC(TablaBase.ToString())+"}\">";
				}
			}
						
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="<br><a:widget id=\"btndjdjtGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strGuardarCambios+"'}\" />";
			} else {
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+".guardarCambios}\" value=\""+strGuardarCambios+"\"/>";
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\"  action=\"#{"+strObjectFace+".guardarCambios}\" value=\""+strGuardarCambios+"\" rendered=\"#{"+strObjectFace+".isPermisoActualizar"+GetNombreClaseC(TablaBase.ToString())+/*" && !"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda"*/"}\" "+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+","+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
				}				
			}
					
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";		
			
			
			//CERRAR
			/*
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+"\" colspan=\"4\" align=\"center\" style=\"visibility:visible\">";
			} else {
				if(ConFaces||ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+"\" colspan=\"4\" align=\"center\" style=\"visibility:${"+strObjectFace+".sVisibilidadCeldaGuardar"+GetNombreClaseC(TablaBase.ToString())+"}\">";
				}
			}
						
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="<br><a:widget id=\"btndjdjtCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strGuardarCambios+"'}\" />";
			} else {
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" value=\""+strGuardarCambios+"\"/>";//action=\"#{"+strObjectFace+".guardarCambios}\" 
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" value=\""+strCerrar+"\" rendered=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".esGuardarRelacionado}\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(TablaBase.ToString())+"()\" oncomplete=\"funcionGeneral.cerrarPagina()\"/>";// action=\"#{"+strObjectFace+".guardarCambios}\" 
				}				
			}
						
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";	
			*/
			
			
			
			strHtml+="\r\n\t\t\t\t\t\t</tr>";
			strHtml+="\r\n\t\t\t\t\t</table>";
			
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="\r\n\t\t\t\t</form>";				
			}
												
			strHtml+="\r\n\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t</tr>";
			
			if(ConFaces||ConRichFaces) {
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t</h:form>";		
				} else {
					//TABLA AUXILIAR PARA QUE EL PANEL ESTE BIEN UBICADO
			
					if(ConRichFaces){
						strHtml+="\r\n\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Mensajes\" class=\"mensajes\">";	
						strHtml+="\r\n\t\t\t\t\t<td align=\"center\">";
						strHtml+="<a name=\"mensajeslink\"></a>";
						strHtml+="\r\n\t\t\t\t\t\t<rich:messages id=\"messages"+GetNombreClaseC(TablaBase.ToString())+"\">";
						strHtml+="\r\n\t\t\t\t\t\t</rich:messages>";
						strHtml+="\r\n\t\t\t\t\t</td>";
						strHtml+="\r\n\t\t\t\t</tr>";
						strHtml+="\r\n\t\t\t</table>";
						//strHtml+="\r\n\t\t\t</rich:panel>";				
						
						//COMENTADO PARA EMBEBER
						//strHtml+="\r\n\t\t\t</td></tr>";	
						//strHtml+="</a4j:form>";
					}
					//strHtml+="\r\n\t\t\t\t</a4j:form>";		
				}
			}
			
			if(ConFaces||ConRichFaces) {
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Mensajes\" class=\"mensajes\">";	
					strHtml+="\r\n\t\t\t<td align=\"center\">";
					strHtml+="<a name=\"mensajeslink\" ></a>";
					strHtml+="\r\n\t\t\t<h:messages/>";
					strHtml+="\r\n\t\t\t</td>";
					strHtml+="\r\n\t\t</tr>";		
				} else {
					/*
					strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Mensajes\" class=\"mensajes\">";	
					strHtml+="\r\n\t\t\t<td align=\"center\">";
					strHtml+="<a name=\"Mensajes\" ></a>";
					strHtml+="\r\n\t\t\t<rich:messages/>";
					strHtml+="\r\n\t\t\t</td>";
					strHtml+="\r\n\t\t</tr>";		
					*/
				}							
			}
			
			return strHtml;
	}
		
		public String GetWebRowImagenAccionesTablaClaseC(TableSchema TablaBase,ColumnSchema column,bool ConFaces,bool ConRichFaces) 
		{
			String strHtml="";
			
			String strRelaciones="";
			
			//GetNombreColumnaClaseC(column)			
			strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Acciones\" class=\"acciones\" style=\"display:none\">";
			strHtml+="\r\n\t\t\t<td align=\"center\">";
			strHtml+="<a name=\"Acciones\" ></a>";
			strHtml+="\r\n\t\t\t\t<form name=\"frmAccionesMantenimiento"+GetNombreColumnaClaseC(column)+"\" method=\"post\" action=\""+GetRelativePathC(TablaBase)+GetNombreClaseC(TablaBase.ToString())+"Servlet\" enctype=\"multipart/form-data\">";
			strHtml+="\r\n\t\t\t\t\t<table id=\"tblAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\" width=\"50%\" align=\""+GetAlignTableFromPropertiesC(TablaBase)+"\" >";
			strHtml+="\r\n\t\t\t\t\t\t<tr id=\"trAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"Basicos\">";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnArchivo"+GetNombreColumnaClaseC(column)+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t\t<input type=\"file\" name=\"fl"+GetNombreColumnaClaseC(column)+"\" id=\"fl"+GetNombreColumnaClaseC(column)+"\" onkeydown='this.blur()'>";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnAccionMantenimiento"+GetNombreColumnaClaseC(column)+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t\t<input name=\"accionMantenimiento\" type=\"hidden\" value=\"cargarImagen"+GetNombreClaseC(TablaBase.ToString())+GetNombreColumnaClaseC(column)+"Imagen\">";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCargar"+GetNombreColumnaClaseC(column)+"\"style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"btnCargar"+GetNombreColumnaClaseC(column)+"\" value=\"Cargar "+GetWebNombreTituloColumnFromPropertiesC(column)+"\" />";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnCancelar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t\t<a:widget id=\"btndjdjtCancelar"+GetNombreColumnaClaseC(column)+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strCancelar+"'}\" />";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnActualizar"+GetNombreClaseC(TablaBase.ToString())+"\"style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnEliminar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";
			
			strHtml+="\r\n\t\t\t\t\t\t</tr>";
			
			strHtml+="\r\n\t\t\t\t\t\t<tr id=\"trAccionesMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"Guardar\">";
			strHtml+="\r\n\t\t\t\t\t\t\t<td id=\"tdbtnGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" colspan=\"4\" align=\"center\"style=\"visibility:visible\">";
			strHtml+="\r\n\t\t\t\t\t\t\t</td>";					
			strHtml+="\r\n\t\t\t\t\t\t</tr>";
			
			strHtml+="\r\n\t\t\t\t\t</table>";
			strHtml+="\r\n\t\t\t\t</form>";
			strHtml+="\r\n\t\t\t</td>";
			strHtml+="\r\n\t\t</tr>";
		
		return strHtml;
		}
		
	public String GetWebRowElementosTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool ConFaces,bool ConRichFaces,String RichFaces_Version,bool esTablaOcultos,bool ConCamposGlobalesOcultos) {
		String strHtml="";						
		String strObjectFace="";
		String strSufijoOculto="";
		String strHtmlOcultos="";
		
		bool conFuncionalidadCamposOcultos=ConCamposGlobalesOcultos;
		
		if(!conFuncionalidadCamposOcultos) {
			esTablaOcultos=false;
		}
		
		if(esTablaOcultos) {
			strSufijoOculto="Ocultos";
		}
		
		if(ConFaces||ConRichFaces) {				
			if(!ConRichFaces) {
				strHtml+="<h:form id=\"frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strSufijoOculto+"\">";	
			} else {
				//strHtml+="<a4j:form id=\"frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\">";
			}
		}
			
		if(!ConFaces&&!ConRichFaces) {
			strHtml+="<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Elementos"+strSufijoOculto+"\" class=\"elementos\" style=\"display:none\">";
			
		} else {				
			if(ConFaces||ConRichFaces) {
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
			
			//TABLA AUXILIAR PARA QUE EL PANEL ESTE BIEN UBICADO
				
			if(ConRichFaces){
				if(!esTablaOcultos) {					
					strHtml+="\r\n\t<tr>";
					strHtml+="\r\n\t\t<td>";
								
					strHtml+="\r\n\r\n\t\t<rich:"+strModalPanel+" id=\"modalPanel"+GetNombreClaseC(TablaBase.ToString())+"\" "+strModalPanelParameters+" autosized=\"true\" width=\""+GetAnchoAuxiliarTableFromPropertiesC(TablaBase)+"\" height=\""+GetAltoAuxiliarTableFromPropertiesC(TablaBase)+"\">";
					strHtml+="\r\n\t\t\t<f:facet name=\"header\">";
					strHtml+="\r\n\t\t\t\t<h:outputText value=\""+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" />";
					strHtml+="\r\n\t\t\t</f:facet>";
					strHtml+="\r\n\r\n\t\t\t<f:facet name=\"controls\">";
					strHtml+="\r\n\t\t\t\t<h:panelGroup>";
					strHtml+="\r\n\t\t\t\t\t<h:graphicImage id=\"graphicImageCerrar"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"/Imagenes/cerrarmodal.gif\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.cancelar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();\">";
					strHtml+="\r\n\t\t\t\t\t\t<rich:componentControl for=\"modalPanel"+GetNombreClaseC(TablaBase.ToString())+"\" attachTo=\"graphicImageCerrar"+GetNombreClaseC(TablaBase.ToString())+"\" operation=\"hide\" event=\"onclick\" />";
					strHtml+="\r\n\t\t\t\t\t</h:graphicImage>";
					strHtml+="\r\n\t\t\t\t</h:panelGroup>";
					strHtml+="\r\n\t\t\t</f:facet>";
					
					
					strHtml+="\r\n\r\n\t\t\t<div id=\"divModalPanelScroll"+GetNombreClaseC(TablaBase.ToString())+strSufijoOculto+"\" style=\"width:"+GetAnchoAuxiliarTableFromPropertiesC(TablaBase)+"px; height:"+GetAltoAuxiliarTableFromPropertiesC(TablaBase)+"px; overflow: auto;\">";
					strHtml+="\r\n\t\t\t<rich:panel id=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+strSufijoOculto+"\" styleClass=\"superrichpanelmantenimientoajaxwebpart\">";//header=\""+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" rendered=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strId+">0}\"
						
					//if(EsVersionRichFaces3C(RichFaces_Version)){
						strHtml+="\r\n\t\t\t"+strWebFormInit+" id=\"frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strSufijoOculto+"\">";
					//}
				}
					
				//PANEL DE CAMPOS OCULTOS PARA QUE SE MUESTRE U OCULTE
				if(esTablaOcultos) {
					strHtml+="\r\n\t\t\t<rich:panel id=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+strSufijoOculto+"\" styleClass=\"superrichpanelmantenimientoajaxwebpart\" rendered=\"#{"+strObjectFace+".isDeveloping}\">";//header=\""+GetTituloNombreTableFromPropertiesC(TablaBase)+"\" rendered=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strId+">0}\"					
				}
				
				strHtml+="\r\n\r\n\t\t\t<table>";
			}
				
			strHtml+="\r\n\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Elementos"+strSufijoOculto+"\" class=\"elementos\" style=\"display:${"+strObjectFace+".sVisibilidadTablaElementos}\">";
		}
			
		strHtml+="\r\n\t\t\t<td align=\"center\">";
		strHtml+="\r\n\r\n\t\t\t\t<a name=\"Campos\"></a>";
			
		if(!esTablaOcultos) {
			strHtml+="\r\n\r\n\t\t\t\t<div align=\"right\">";
			strHtml+="\r\n\t\t\t\t\t<img style=\"visibility:visible\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/flechaarriba.gif\" width=\"15\" height=\"15\" onclick=\"funcionGeneral.irAreaDePagina('ControlesSecciones')\"/>";
			strHtml+="\r\n\t\t\t\t</div>";
		}
			
		if(!ConFaces&&!ConRichFaces) {
			strHtml+="<form name=\"frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strSufijoOculto+"\">";
		}
									
		strHtml+="\r\n\r\n\t\t\t\t<table width=\"200px\"  align=\""+GetAlignTableFromPropertiesC(TablaBase)+"\">";
			
		String strControl="";
		String strName="";
		String strTituloControl="";
			
			
			//SOLO SI ES NO STANDARD GENERA PRIMERO LOS ROWS Y CONTROLES FK PRIMERO
			if(blnNoStandardTableFromProperties) {	
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					
					String strNameOnly=GetNameControlHtmlFkC(TablaBase,tableSchemaForeignKey);
					strTituloControl=GetTituloControlVariablesFkC(tableSchemaForeignKey);
						
					strName=" id=\""+strNameOnly+"\"";		
						
					String strOcultarColumna="visibility:visible";
					String strRowInit="\r\n\t\t\t\t\t<tr style=\""+strOcultarColumna+"\">"+strTituloControl+"\r\n\t\t\t\t\t\t<td>";
					String strRowEnd="\r\n\t\t\t\t\t\t</td>"+"\r\n\t\t\t\t\t</tr>";
						
					//<td class=\"titulocampo\"><span class=\"elementotitulocampo\">SISTEMA</span></td>
					if(!ConFaces&&!ConRichFaces) {
						strControl="<a:widget"+strName+"name=\"dojo.dijit.combobox\" value=\"[{label : 'Alabama', value : 'AL'}]\""+"/>";
					} else {
						if(ConFaces) {
							//YA NO IRIA ESTO
							//value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreClaseC(tableSchemaForeignKey.ToString())+"}\" 
							strControl="\r\n\t\t\t\t\t\t<h:selectOneMenu "+strName.Replace("name=","id=")+">\r\n";
							strControl+="\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+"."+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"s"+strForeignKey+"ListSelectItem}\"/>\r\n";		
							strControl+="\t\t\t\t\t\t\t</h:selectOneMenu>";
						} else {
							//rich:comboBox
							//YA NO IRIA ESTO
							//value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreClaseC(tableSchemaForeignKey.ToString())+"}\" 
							//strControl="\r\n\t\t\t\t\t\t<rich:panel id=\"richPanel"+   strNameOnly+"\">\r\n";
							strControl+="\t\t\t\t\t\t\t<h:selectOneMenu "+strName.Replace("name=","id=")+">\r\n";
							strControl+="\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+"."+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"s"+strForeignKey+"ListSelectItem}\"/>\r\n";		
							strControl+="\t\t\t\t\t\t\t</h:selectOneMenu>\r\n";
							//strControl+="\t\t\t\t\t\t</rich:panel>";
							//rich:comboBox
						}		
							
						strControl=strRowInit+strControl+strRowEnd;
					}	
						
					strHtml+=strControl;
				}						
			}
			//SOLO SI ES NO STANDARD GENERA PRIMERO LOS ROWS Y CONTROLES FK PRIMERO FIN
			
			
			
		int intNumeroColumnasForm=0;
		int intContadorFilaColumna=1;
		bool blnIniciaFila=false;
		bool blnTerminaFila=false;
		int intColumnasRellenar=0;
			
		if(!esTablaOcultos) {
			intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(TablaBase);
		} else {
			intNumeroColumnasForm=1;
		}
		
		//Trace.WriteLine(intNumeroColumnasForm);
		//Trace.WriteLine(TablaBase.Name+"-No Columnas:"+intNumeroColumnasForm);
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])) { continue;}		
			
			if(conFuncionalidadCamposOcultos) {
				if(!esTablaOcultos) {
					if((EsColumnaVariableGlobalDataBaseFromPropertiesC(TablaBase.Columns[i]) 
						|| EsColumnaVariableModuloGlobalC(TablaBase.Columns[i])
						)
						
						&& !EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(TablaBase.Columns[i])
					) {
						continue;
					}
				} else {
					if(!(EsColumnaVariableGlobalDataBaseFromPropertiesC(TablaBase.Columns[i]) 
						 || EsColumnaVariableModuloGlobalC(TablaBase.Columns[i]))
						
						|| EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(TablaBase.Columns[i])
					) {
						continue;
					}
				}
			}
			
			if(intContadorFilaColumna==1) {
				blnIniciaFila=true;
				//blnTerminaFila=false;
			} 
				
			if(intContadorFilaColumna.Equals(intNumeroColumnasForm)) {
				//blnIniciaFila=false;
				blnTerminaFila=true;
				intContadorFilaColumna=1;
			} else {
				intContadorFilaColumna++;
			}				
				
			//AL LLEGAR A LA ULTIMA COLUMNA FORZA TERMINAR FILA, SINO QUEDARIA ABIERTO
			if(i.Equals(TablaBase.Columns.Count-1)) {					
				if(!blnTerminaFila) {
					blnTerminaFila=true;
					intColumnasRellenar=intNumeroColumnasForm - (intContadorFilaColumna - 1);
					//Trace.WriteLine("No Columnas:"+intColumnasRellenar);
				}															
			}
				
			//Trace.WriteLine(TablaBase.Name+"-term:"+blnTerminaFila);
				
			strHtml+=GetControlVariablesC(TablaBase.Columns[i],ConFaces,ConRichFaces,blnIniciaFila,blnTerminaFila,intNumeroColumnasForm,intColumnasRellenar,RichFaces_Version);
				
			//PUEDE INICIAR FILE Y TERMINAR FILA = true AL MISMO TIEMPO,NO SON EXCLUYENTES
			blnIniciaFila=false;
			blnTerminaFila=false;				
		}
			
		strHtml+="\r\n\t\t\t\t</table>";
			
		if(!ConFaces&&!ConRichFaces) {
			strHtml+="</form>";
			
		} else {
			//strHtml+="</h:form>";
			if(!ConRichFaces) {
				strHtml+="</h:form>";	
			} else {
				//strHtml+="</a4j:form>";
			}
		}
			
		strHtml+="\r\n\t\t\t</td>";
		strHtml+="\r\n\t\t\t</tr>";	
			
		//TABLA AUXILIAR PARA QUE EL PANEL ESTE BIEN UBICADO
			
		if(ConRichFaces){
			strHtml+="\r\n\t\t\t</table>";
			
			//PANEL DE CAMPOS OCULTOS PARA QUE SE MUESTRE U OCULTE
			if(esTablaOcultos) {
				strHtml+="\r\n\t\t\t</rich:panel>";
			}
					
			if(!esTablaOcultos) {
				strHtml+="\r\n\r\n\t\t\t"+GetWebRowAccionesTablaClaseC(TablaBase,esMantenimientoSimple,esParaForeignKey,ConFaces,ConRichFaces);
			}	
					
			if(!esTablaOcultos) {
				//TABLA CAMPOS OCULTOS EN FORMULARIO GENERAL
				if(conFuncionalidadCamposOcultos && TieneGlobalVariableColumnC(TablaBase)) {
					strHtmlOcultos=GetWebRowElementosTablaClaseC(TablaBase,esMantenimientoSimple,esParaForeignKey,ConFaces,ConRichFaces,RichFaces_Version,true,conFuncionalidadCamposOcultos);
					strHtml+=strHtmlOcultos;
				}
				
				
				//if(EsVersionRichFaces3C(RichFaces_Version)){
					strHtml+="\r\n\t\t\t"+strWebFormEnd+"";
				//}
					
				strHtml+="\r\n\t\t\t</rich:panel>";
				strHtml+="\r\n\t\t\t</div>";
			
			
				
				
				strHtml+="\r\n\t\t</rich:"+strModalPanel+">";	
				
				//SE CREA EL MODAL PANEL DE CONFIMACION DE ELIMINACION
				strHtml+="\r\n\r\n\t\t\t<rich:"+strModalPanel+" id=\"mondalPanelEliminarConfirmacion"+GetNombreClaseC(TablaBase.ToString())+"\" "+strModalPanelParameters+" autosized=\"true\" width=\"200\">";
				strHtml+="\r\n\t\t\t\t<f:facet name=\"header\">";
				strHtml+="\r\n\t\t\t\t\t<h:outputText value=\"ESTA SEGURO DE ELIMINAR EL/LA "+GetTituloNombreTableFromPropertiesC(TablaBase)+" SELECCIONADO ?\" style=\"padding-right:15px;\" />";
				strHtml+="\r\n\t\t\t\t</f:facet>";
				strHtml+="\r\n\r\n\t\t\t\t<f:facet name=\"controls\">";
				strHtml+="\r\n\t\t\t\t\t<h:panelGroup>";
				strHtml+="\r\n\t\t\t\t\t\t<h:graphicImage value=\"/Imagenes/eliminar.gif\" id=\"graphicImageEliminacion"+GetNombreClaseC(TablaBase.ToString())+"\" >";
				strHtml+="\r\n\t\t\t\t\t\t\t<rich:componentControl for=\"mondalPanelEliminarConfirmacion"+GetNombreClaseC(TablaBase.ToString())+"\" attachTo=\"graphicImageEliminacion"+GetNombreClaseC(TablaBase.ToString())+"\" operation=\"hide\" event=\"onclick\" />";
				strHtml+="\r\n\t\t\t\t\t\t</h:graphicImage>";
				strHtml+="\r\n\t\t\t\t\t</h:panelGroup>";
				strHtml+="\r\n\t\t\t\t</f:facet>";
				strHtml+="\r\n\r\n\t\t\t\t<h:form id=\"frmEliminar"+GetNombreClaseC(TablaBase.ToString())+"\">";
				strHtml+="\r\n\t\t\t\t\t<table width=\"100%\">";
				strHtml+="\r\n\t\t\t\t\t<tbody>";
				strHtml+="\r\n\t\t\t\t\t\t<tr>";
				strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\" width=\"50%\">";
				strHtml+="\r\n\t\t\t\t\t\t\t<a4j:commandButton value=\"SI\"";
				strHtml+=" ajaxSingle=\"true\" action=\"#{"+strObjectFace+".eliminar"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\"";
				strHtml+=" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.eliminar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"";
				strHtml+=" "+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+","+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" />";
				strHtml+="\r\n\t\t\t\t\t\t</td>";
				strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\" width=\"50%\">";
				strHtml+="\r\n\t\t\t\t\t\t\t<a4j:commandButton";
				strHtml+=" value=\"CANCELAR\"";
				strHtml+=" onclick=\"#{rich:component('mondalPanelEliminarConfirmacion"+GetNombreClaseC(TablaBase.ToString())+"')}.hide();return false;\" />";
				strHtml+="\r\n\t\t\t\t\t\t</td>";
				strHtml+="\r\n\t\t\t\t\t\t</tr>";
				strHtml+="\r\n\t\t\t\t\t</tbody>";
				strHtml+="\r\n\t\t\t\t\t</table>";
				strHtml+="\r\n\t\t\t\t</h:form>";
				strHtml+="\r\n\t\t\t</rich:"+strModalPanel+">";
			}
			//SE CREA EL MODAL PANEL DE CONFIMACION DE ELIMINACION FIN
			
			if(!esTablaOcultos) {						
				strHtml+="\r\n\t\t</td>";
				strHtml+="\r\n\t</tr>";
			}
		}
				
		return strHtml;
	}
	
	public ArrayList CargarTablasParametrosDesdeProcesosC(TableSchema TablaBase) {
		ArrayList arrayTablasRelacionadasParametrosAux=new ArrayList();
		
		arrayTablasRelacionadasParametrosAux=CargarTablasParametrosDesdeProcesosC(TablaBase,false);
		
		return arrayTablasRelacionadasParametrosAux;
	}
	
	public ArrayList CargarTablasParametrosDesdeProcesosC(TableSchema TablaBase,bool conForzarReporte) {
		ArrayList arrayTablasRelacionadasParametrosAux=new ArrayList();
		
		arrayTablasRelacionadasParametrosAux=GetArrayTablasRelacionadasParametrosC(TablaBase,conForzarReporte);								
		
		//Trace.WriteLine(arrayTablasRelacionadasParametrosAux.Count);
		
		return arrayTablasRelacionadasParametrosAux;
	}
	
	public String GetDefinicionVariablesParametrosTablasParametrosC(TableSchema TablaBase,bool conComaInicial,bool conTipoVariable) {
		String strSwing="";
		
		strSwing=GetDefinicionVariablesParametrosTablasParametrosC(TablaBase,conComaInicial,conTipoVariable,false,false);
		
		return strSwing;
	}
	
	public String GetDefinicionVariablesParametrosTablasParametrosC(TableSchema TablaBase,bool conComaInicial,bool conTipoVariable,bool conForzarReporte) {
		String strSwing="";
		
		strSwing=GetDefinicionVariablesParametrosTablasParametrosC(TablaBase,conComaInicial,conTipoVariable,false,conForzarReporte);
		
		return strSwing;
	}
	
	public String GetDefinicionVariablesParametrosTablasParametrosC(TableSchema TablaBase,bool conComaInicial,bool conTipoVariable,bool conThisPrefijo,bool conForzarReporte) {
		String strSwing="";
		bool esPrimero=true;
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte || conForzarReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);			
			
			//Trace.WriteLine(arrayTablasRelacionadasParametros.Count);
			
			if(arrayTablasRelacionadasParametros.Count>0) {
				if(conComaInicial) {
					strSwing+=",";
				}
			}
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				foreach(ColumnSchema columnSchema in tableSchema.Columns) {
					if(columnSchema.Name.Equals(strId) || columnSchema.Name.Equals(strVersionRow)) {
						continue;
					}
					
					if(!esPrimero) {
						strSwing+=",";
					}
					
					if(conTipoVariable) {
						strSwing+=""+GetTipoColumnaClaseC(columnSchema)+" ";
					}
					
					if(conThisPrefijo) {
						strSwing+="this.";
					}
					
					strSwing+=GetPrefijoTipoC(columnSchema) + GetNombreColumnaClaseC(columnSchema) + GetNombreClaseC(columnSchema.Table.ToString());
					
					if(esPrimero) {
						esPrimero=false;
					}
				}
				
				//Trace.WriteLine(strSwing);
			}
			
			/*
			if(arrayTablasRelacionadasParametros.Count>0) {
				//strSwing="\r\n\t\t\tthis.inicializarActualizarBindingTablasParametrosManual"+GetNombreClaseC(TablaBase.ToString())+"();";//  throws Exception {"+strSwing;
				//strSwing+="\r\n\t}";
			}
			*/
		}								
		
		return strSwing;
	}
	
	public String GetBindingsVariablesManualTablasClasesParametrosC(TableSchema TablaBase) {
		String strSwing="";
		
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			/*
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				//strSwing+=GetTablasParametrosInicializacionBindingsVariablesManualTablasClasesC(tableSchema);
				//strSwing+="\r\n\tpublic void inicializarActualizarBindingBusquedasManual"+GetNombreClaseC(TablaBase.ToString())+"Parametros()  throws Exception {";
				//strSwing+="\r\n\t\t"+GetIndicesInicializacionBindingsVariablesManualTablasClasesC(tableSchema);
				//strSwing+="\r\n\t}";
			}	
			*/
			
			if(arrayTablasRelacionadasParametros.Count>0) {
				strSwing="\r\n\t\t\tthis.inicializarActualizarBindingTablasParametrosManual"+GetNombreClaseC(TablaBase.ToString())+"();";//  throws Exception {"+strSwing;
				//strSwing+="\r\n\t}";
			}
		}								
		
		return strSwing;
	}
	
	public String GetInicializacionBindingsVariablesManualTablasClasesParametrosC(TableSchema TablaBase) {
		String strSwing="";
		
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				strSwing+=GetTablasParametrosInicializacionBindingsVariablesManualTablasClasesC(tableSchema);
				//strSwing+="\r\n\tpublic void inicializarActualizarBindingBusquedasManual"+GetNombreClaseC(TablaBase.ToString())+"Parametros()  throws Exception {";
				//strSwing+="\r\n\t\t"+GetIndicesInicializacionBindingsVariablesManualTablasClasesC(tableSchema);
				//strSwing+="\r\n\t}";
			}	
			
			if(arrayTablasRelacionadasParametros.Count>0) {
				//Trace.WriteLine(arrayTablasRelacionadasParametros.Count);
				strSwing="\r\n\tpublic void inicializarActualizarBindingTablasParametrosManual"+GetNombreClaseC(TablaBase.ToString())+"()  throws Exception {"+strSwing;
				strSwing+="\r\n\t}";
			} else {
				//Trace.WriteLine("here");	
			}
		}								
		
		return strSwing;
	}
	
	public String GetSetTablasParametrosVariablesControllerTablasClasesC(TableSchema TablaBase) {
		String strSwing="";
		
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				strSwing+=GetSetTablaParametrosVariablesControllerTablasClasesC(tableSchema,TablaBase);
				//strSwing+="\r\n\tpublic void inicializarActualizarBindingBusquedasManual"+GetNombreClaseC(TablaBase.ToString())+"Parametros()  throws Exception {";
				//strSwing+="\r\n\t\t"+GetIndicesInicializacionBindingsVariablesManualTablasClasesC(tableSchema);
				//strSwing+="\r\n\t}";
			}	
			
			if(arrayTablasRelacionadasParametros.Count>0) {
				//Trace.WriteLine(arrayTablasRelacionadasParametros.Count);
				//strSwing="\r\n\tpublic void inicializarActualizarBindingTablasParametrosManual"+GetNombreClaseC(TablaBase.ToString())+"()  throws Exception {"+strSwing;
				//strSwing+="\r\n\t}";
			} else {
				//Trace.WriteLine("here");	
			}
		}								
		
		return strSwing;
	}
	
	public String GetSetTablaParametrosVariablesControllerTablasClasesC(TableSchema TablaBase,TableSchema TablaBasePadre) {
		String sFuncion=String.Empty;
		String sNombreSufijoGeneralVariable="";
		bool blnEsProcesoParametroAux=GetEsProcesoParamFromPropertiesC(TablaBase);
		
		foreach(ColumnSchema columnSchema in TablaBase.Columns) {
			sNombreSufijoGeneralVariable=GetNombreClaseC(columnSchema.Table.ToString());
					
			if(blnEsProcesoParametroAux && columnSchema.Name.Equals(strId) || columnSchema.Name.Equals(strVersionRow) ) {
				continue;
			}
			
			sFuncion+="\r\n\t\tthis."+GetNombreClaseObjetoC(TablaBasePadre.ToString())+strParameterGeneral+".set"+GetNombreCompletoColumnaClaseC(columnSchema,sNombreSufijoGeneralVariable)+"(";
			sFuncion+="this.get"+GetNombreCompletoColumnaClaseC(columnSchema,sNombreSufijoGeneralVariable)+"());";
		}
		
		return sFuncion;
	}
	
	public String GetTablasParametrosInicializacionBindingsVariablesManualTablasClasesC(TableSchema TablaBase) {
		String sFuncion=String.Empty;
		String sTablaClaseRelacionada=String.Empty;
		String sInitFuncion="\r\n";
			
		String sPanelesBusquedas=String.Empty;
		String sControlesPanelesBusquedas=String.Empty;
				
		String sFinalFuncion="";
		String sNombreSufijoGeneralVariable="";
		String sNombreSufijoGeneralControl="";
		
		sFinalFuncion="";//"\r\n\t\tthis.bindingGroup"+GetNombreClaseC(TablaBase.ToString())+"Busquedas.addBinding(this.binding"+GetNombreClaseC(TablaBase.ToString())+");\r\n";																				 
		//sFinalFuncion+="\r\n\t\tthis.binding"+GetNombreClaseC(TablaBase.ToString())+".refresh();\r\n";
				
		String sControlBinding=String.Empty;
		String sPropertyControlBinding=String.Empty;
		String sPropertyControlBindingInit=String.Empty;
		TableSchema tableRelacionada=null;
		//ColumnSchema columnSchema=null;
		string strPrefijoTabla="";
		string strPrefijoTipo ="";
		string strNombre = "";
		bool blnExisteBusquedaFkVariableGlobal=false;
		String strCommentParse="";
								
				int count=1;	
				sControlesPanelesBusquedas="";
				
				//Trace.WriteLine(indexSchema.Name);
		
				bool blnEsProcesoParametroAux=GetEsProcesoParamFromPropertiesC(TablaBase);
		
				foreach(ColumnSchema columnSchema in TablaBase.Columns) {
					strCommentParse="";
					sNombreSufijoGeneralVariable=GetNombreClaseC(columnSchema.Table.ToString());
					sNombreSufijoGeneralControl="";
					
					if(blnEsProcesoParametroAux && columnSchema.Name.Equals(strId) || columnSchema.Name.Equals(strVersionRow) ) {
						continue;
					}
					
					if(columnSchema.Name.Equals(strId) || columnSchema.Name.Equals(strVersionRow)) {
						strCommentParse="//";
					}										
								
						if(columnSchema.IsForeignKeyMember) {
							if(!blnNoStandardTableFromProperties) {	
								tableRelacionada=GetNombreTablaRelacionadaFromColumn(columnSchema);
								sPropertyControlBinding=").getId";
							} else {
								tableRelacionada=GetTableSchemaFromColumnForeignKey(columnSchema);
								//columnSchema=GetColumnSchemaFromColumnForeignKey(tableRelacionada,TablaBase,columnSchema);
										
								strPrefijoTabla=GetPrefijoTablaC();
								strPrefijoTipo = GetPrefijoTipoC(columnSchema);
								strNombre = GetNombreColumnaClaseC(columnSchema);
	
								sPropertyControlBinding=").get"+strPrefijoTabla+strPrefijoTipo+strNombre;
							}
									
							sPropertyControlBindingInit="(("+GetNombreClaseC(tableRelacionada.ToString())+")";
									
						} else {
							sPropertyControlBindingInit="";
															
							if(!EsDateTimeColumn(columnSchema) && !EsDateColumn(columnSchema) && !EsTimeColumn(columnSchema)) {
								if(!EsBitColumn(columnSchema)) {
									sPropertyControlBinding=".getText";
								} else {
									sPropertyControlBinding=".isSelected";
								}
							} else {
								sPropertyControlBinding=".getDate().getTime";
							}
						}
						
						//SOLO CAMBIA O SE QUITA sPropertyControlBindingInit
								
						if(!columnSchema.IsForeignKeyMember) {
							if(!EsDateTimeColumn(columnSchema) && !EsDateColumn(columnSchema) && !EsTimeColumn(columnSchema)) {
								if(!EsBitColumn(columnSchema)) {
									sControlesPanelesBusquedas+="\t\t"+strCommentParse+"this."+GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema)+sNombreSufijoGeneralVariable+"="+GetTipoColumnaParse(columnSchema,"this."+GetNombreControlVariablesSwingInternoC(columnSchema,sNombreSufijoGeneralControl,"",columnSchema.IsForeignKeyMember)+sPropertyControlBinding+"()")+";\r\n";								
								} else {
									sControlesPanelesBusquedas+="\t\tthis."+GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema)+sNombreSufijoGeneralVariable+"="+"this."+GetNombreControlVariablesSwingInternoC(columnSchema,sNombreSufijoGeneralControl,"",columnSchema.IsForeignKeyMember)+sPropertyControlBinding+"()"+";\r\n";
								}
							} else {
								String sNewType="";
										
								if(EsDateColumn(columnSchema)) {
									sNewType="new Date(";
								} else if(EsDateTimeColumn(columnSchema)) {
									sNewType="new Timestamp(";
								} else if(EsTimeColumn(columnSchema)) {
									sNewType="new Time(";
								}
										
								sControlesPanelesBusquedas+="\t\tthis."+GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema)+sNombreSufijoGeneralVariable+"="+sNewType+"this."+GetNombreControlVariablesSwingInternoC(columnSchema,sNombreSufijoGeneralControl,"",columnSchema.IsForeignKeyMember)+sPropertyControlBinding+"())"+";\r\n";
							}
						} else {
							sControlesPanelesBusquedas+="\t\tif(this."+GetNombreControlVariablesSwingInternoC(columnSchema,sNombreSufijoGeneralControl,"",columnSchema.IsForeignKeyMember)+".getSelectedItem()!=null){this."+GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema)+sNombreSufijoGeneralVariable+"="+sPropertyControlBindingInit+"this."+GetNombreControlVariablesSwingInternoC(columnSchema,sNombreSufijoGeneralControl,"",columnSchema.IsForeignKeyMember)+".getSelectedItem()"+sPropertyControlBinding+"();}\r\n";							
						}																		
					
					
					count++;
				}	
				
				sControlBinding=sControlesPanelesBusquedas+sFinalFuncion;
				sInitFuncion+=sControlBinding;
																
		return sInitFuncion; 
	}
	
	public String GetParameterClaseTablasParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {			
				for (int i = 0; i < tableSchema.Columns.Count; i++){ 					
					if(tableSchema.Columns[i].Name==strIsActive||tableSchema.Columns[i].Name==strIsExpired||(tableSchema.Columns[i].Name==strId && !tableSchema.Columns[i].IsForeignKeyMember)||tableSchema.Columns[i].Name==strVersionRow/* || GetEsReporteParametroFromPropertiesC(tableSchema.Columns[i])*/){continue; } 
						strSwing+=GetParameterClaseC(tableSchema.Columns[i],false,false,GetNombreClaseC(tableSchema.ToString())); 
				}				
			}						
		}
		
		return strSwing;
	}
	
	public String GetValueDefaultParameterClaseParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {			
				for (int i = 0; i < tableSchema.Columns.Count; i++){ 					
					if(tableSchema.Columns[i].Name==strIsActive||tableSchema.Columns[i].Name==strIsExpired||tableSchema.Columns[i].Name==strId||tableSchema.Columns[i].Name==strVersionRow/*|| GetEsReporteParametroFromPropertiesC(tableSchema.Columns[i])*/){continue; }
					
					strSwing+="\r\n\t\t\t"+GetValueDefaultParameterClaseC(tableSchema.Columns[i],GetNombreClaseC(tableSchema.ToString())); 
				}				
			}						
		}
		
		return strSwing;
	}
	
	public String GetParameterClaseMethodTablasParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {			
				for (int i = 0; i < tableSchema.Columns.Count; i++){ 					
					if(tableSchema.Columns[i].Name==strIsActive||tableSchema.Columns[i].Name==strIsExpired||(tableSchema.Columns[i].Name==strId /*&& !tableSchema.Columns[i].IsForeignKeyMember*/)||tableSchema.Columns[i].Name==strVersionRow/*|| GetEsReporteParametroFromPropertiesC(tableSchema.Columns[i])*/){continue; }
					
					strSwing+="\r\n\t\t\t"+GetParameterClaseMethodC(tableSchema.Columns[i],false,false,false,GetNombreClaseC(tableSchema.ToString())); 
				}				
			}						
		}
		
		return strSwing;
	}
	
	public String GetParameterClaseSetMethodTablasParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {			
				for (int i = 0; i < tableSchema.Columns.Count; i++){ 					
					if(tableSchema.Columns[i].Name==strIsActive||tableSchema.Columns[i].Name==strIsExpired||(tableSchema.Columns[i].Name==strId /*&& !tableSchema.Columns[i].IsForeignKeyMember*/)||tableSchema.Columns[i].Name==strVersionRow/*|| GetEsReporteParametroFromPropertiesC(tableSchema.Columns[i])*/){continue; }
					
					strSwing+="\r\n\t\t\t"+GetParameterClaseSetMethodC(tableSchema.Columns[i],true,GetNombreClaseC(tableSchema.ToString())); 
				}				
			}						
		}
		
		return strSwing;
	}
	
	public String GetDefinicionGeneralSwingTablaClaseParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {			
				strSwing+="\r\n\tprotected GridBagLayout gridaBagLayout"+GetNombreClaseC(tableSchema.ToString())+";";	
				strSwing+="\r\n\tprotected GridBagConstraints gridBagConstraints"+GetNombreClaseC(tableSchema.ToString())+";";
				strSwing+="\r\n\tprotected JPanel"+strSwtMe+" jPanelCampos"+GetNombreClaseC(tableSchema.ToString())+";";
				strSwing+="\r\n\t//protected BindingGroup bindingGroup"+GetNombreClaseC(tableSchema.ToString())+";";
				strSwing+="\r\n\t//@SuppressWarnings(\"rawtypes\")";
				strSwing+="\r\n\t//protected Binding binding"+GetNombreClaseC(tableSchema.ToString())+";";
				//strSwing+=GetDefinicionElementosSwingTablaClaseC(tableSchema);
			}
			
			if(arrayTablasRelacionadasParametros.Count>0) {
				strSwing+="\r\n\tpublic JTabbedPane"+strSwtMe+" jTabbedPaneCampos"+GetNombreClaseC(TablaBase.ToString())+"Parametros;";				
			}
		}
		
		return strSwing;
	}
	
	public String GetInicializarGeneralSwingTablaClaseParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			if(arrayTablasRelacionadasParametros.Count>0) {
				strSwing+="\r\n\tthis.jTabbedPaneCampos"+GetNombreClaseC(TablaBase.ToString())+"Parametros = new JTabbedPane"+strSwtMe+"();";
				strSwing+="\r\n\tthis.jTabbedPaneCampos"+GetNombreClaseC(TablaBase.ToString())+"Parametros.setBorder(javax.swing.BorderFactory.createTitledBorder(\"PARAMETROS\"));";
			}
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				
				strSwing+="\r\n\tthis.gridaBagLayout"+GetNombreClaseC(tableSchema.ToString())+"= new GridBagLayout();";
				strSwing+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(tableSchema.ToString())+" = new GridBagConstraints();";
				strSwing+="\r\n\tthis.jPanelCampos"+GetNombreClaseC(tableSchema.ToString())+" = new JPanelMe(FuncionesSwing.getFondoImagen(parametroGeneralUsuario.getid_tipo_fondo()),true);";				
				
				strSwing+="\r\n\r\n\tthis.jPanelCampos"+GetNombreClaseC(tableSchema.ToString())+".setLayout(this.gridaBagLayout"+GetNombreClaseC(tableSchema.ToString())+");";
				strSwing+="\r\n\tthis.jPanelCampos"+GetNombreClaseC(tableSchema.ToString())+".setBorder(javax.swing.BorderFactory.createTitledBorder(\"PARAMETROS\"));";
				strSwing+="\r\n\tthis.jPanelCampos"+GetNombreClaseC(tableSchema.ToString())+".setName(\"jPanelCampos"+GetNombreClaseC(tableSchema.ToString())+"\");";
				
				strSwing+="\r\n\r\n\tthis.jTabbedPaneCampos"+GetNombreClaseC(TablaBase.ToString())+"Parametros.addTab(\""+GetTituloNombreTableFromPropertiesC(tableSchema)+"\", this.jPanelCampos"+GetNombreClaseC(tableSchema.ToString())+");";
			}
			
			
		}
		
		return strSwing;
	}
	
	public String GetSetPanelesGeneralSwingTablaClaseParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			//foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				/*
				strSwing+="\r\n\r\n\t\tthis.gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
				strSwing+="\r\n\t\tthis.gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = iGridyPrincipal++;";	
				strSwing+="\r\n\t\tthis.gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = 0;";
				strSwing+="\r\n\r\n\t\tthis.jContentPane.add(this.jScrollPanelCampos"+GetNombreClaseC(tableSchema.ToString())+", this.gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");";//jPanelCampos
				*/
			//}
			
			if(arrayTablasRelacionadasParametros.Count>0) {
				//SE AGREGA A SUPER PANEL BUSQUEDAS PARAMETROS
				strSwing+="\r\n\r\n\t\tthis.gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
				strSwing+="\r\n\t\tthis.gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = 0;";	
				strSwing+="\r\n\t\tthis.gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = iGridxBusquedasParametros++;";
				strSwing+="\r\n\r\n\t\tthis.jPanelBusquedasParametros"+GetNombreClaseC(TablaBase.ToString())+".add(this.jTabbedPaneCampos"+GetNombreClaseC(TablaBase.ToString())+"Parametros, this.gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");";//jPanelCampos
			}
		}
		
		return strSwing;
	}
	
	public String GetDefinicionElementosSwingTablaClaseC(TableSchema TablaBase) {
		String strSwing="";
			
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing+=GetDefinicionControlVariablesSwingC(TablaBase.Columns[i],"","",false,false);
			}
		}			
		
		return strSwing;
	}		
	
	public String GetDefinicionElementosSwingTablaClaseParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				strSwing+=GetDefinicionElementosSwingTablaClaseC(tableSchema);
			}
		}
		
		return strSwing;
	}
	
	public String GetDefinicionElementosSwingForeignKeysTablaClaseC(TableSchema TablaBase) {
		String strSwing="";
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema column in TablaBase.Columns) {
					if(column.IsForeignKeyMember) {
						strSwing+=GetDefinicionControlVariablesSwingC(column,"","",true,false);
						//strSwing+="\tprotected JComboBox "+GetNombreControlVariablesSwingC(column,"","")+";\r\n";	
						//strSwing+=GetDefinicionControlVariablesSwingC(TablaBase.Columns[i],"","");
					}
				}			
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					//tableSchema=GetNombreTablaRelacionadaFromColumn(column);
					strSwing+="\r\n\tprotected JLabel"+strSwtMe+" jLabel"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n";
					strSwing+="\t@SuppressWarnings(\"rawtypes\")\r\n";	
					strSwing+="\tprotected JComboBox"+strSwtMe+" jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n\r\n";
					
				}
			}
			
			return strSwing;
		}
	
	public String GetDefinicionElementosSwingForeignKeysTablaClaseParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				strSwing+=GetDefinicionElementosSwingForeignKeysTablaClaseC(tableSchema);
			}
		}
		
		return strSwing;
	}
	
	public String GetActionsElementosSwingForeignKeysTablaClaseC(TableSchema TablaBase) 
		{
			String strSwing="";
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema column in TablaBase.Columns) {
					if(column.Name.Equals(strVersionRow)) {
						continue;	
					}
					
					if(column.IsForeignKeyMember) {
						if(GetBusquedaForeignKeyColumnFromPropertiesC(column)) {
							strSwing+=GetActionControlVariableForeignKeysSwingC(column,"","",true);						
						}
						
						strSwing+=GetActionActualizarControlVariableForeignKeysSwingC(column,"","",true);	
						
					} else if(EsBinaryColumn(column)) {
						strSwing+=GetActionControlVariableBinarySwingC(column,"","",false);
					}
					
					strSwing+=GetActionActualizarControlVariableBusquedaSwingC(column,"","",true);
				}			
			} else {
				/*
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					//tableSchema=GetNombreTablaRelacionadaFromColumn(column);
					strSwing+="\r\n\tprotected JLabel"+strSwtMe+" jLabel"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n";
					strSwing+="\tprotected JComboBox jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n\r\n";
					
				}
				*/
			}
			
			return strSwing;
		}	
		
		public String GetActionsElementosSwingTablaClaseC(TableSchema TablaBase) 
		{
			String strSwing="";
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema column in TablaBase.Columns) {
					if(column.Name.Equals(strVersionRow)) {
						continue;	
					}
					
					if(!column.IsForeignKeyMember) {
						if(GetOnChangeColumnFromPropertiesC(column) || GetConEventChangeColumnFromPropertiesC(column)) {
							strSwing+=GetActionControlVariableSwingC(column,"","",true,"ONCHANGE");						
						
						} else if(GetOnClicColumnFromPropertiesC(column)) {
							strSwing+=GetActionControlVariableSwingC(column,"","",true,"ONCLIC");						
						}
					}
				}			
			} else {
				/*
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					//tableSchema=GetNombreTablaRelacionadaFromColumn(column);
					strSwing+="\r\n\tprotected JLabel"+strSwtMe+" jLabel"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n";
					strSwing+="\tprotected JComboBox jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n\r\n";
					
				}
				*/
			}
			
			return strSwing;
		}	
				
		public String GetSeleccionarActionsElementosSwingForeignKeysTablaClaseC(TableSchema TablaBase) 
		{
			String strSwing="";
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema column in TablaBase.Columns) {
					if(column.Name.Equals(strVersionRow)) {
						continue;	
					}
					
					if(column.IsForeignKeyMember) {
						if(GetBusquedaForeignKeyColumnFromPropertiesC(column)) {
							strSwing+=GetSeleccionarActionControlVariableForeignKeysSwingC(column,"","",true);	
							//Trace.WriteLine("Here Busqueda"+strSwing);
							//Trace.WriteLine(GetSeleccionarActionControlVariableForeignKeysSwingC(column,"","",true));
						}
						
						strSwing+=GetSeleccionarActionActualizarControlVariableForeignKeysSwingC(column,"","",true);
						
						//Trace.WriteLine(GetSeleccionarActionActualizarControlVariableForeignKeysSwingC(column,"","",true));
						
					} else if(EsBinaryColumn(column)) {
						strSwing+=GetSeleccionarActionControlVariableBinarySwingC(column,"","",true);						
					}
					
					strSwing+=GetSeleccionarActionActualizarControlVariableBusquedaSwingC(column,"","",true);
				}			
			} else {
				/*
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					//tableSchema=GetNombreTablaRelacionadaFromColumn(column);
					strSwing+="\r\n\tprotected JLabel"+strSwtMe+" jLabel"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n";
					strSwing+="\tprotected JComboBox jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n\r\n";
					
				}
				*/
			}
			
			return strSwing;
		}	
		
	public String GetFunctionsInicializacionButtonsForeignKeysTablaClaseC(TableSchema TablaBase,bool ConEjb) 
		{
			String strSwing="";
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema column in TablaBase.Columns) {			
					if(column.Name.Equals(strVersionRow)) {
						continue;	
					}
					
					if(column.IsForeignKeyMember) {
						if(GetBusquedaForeignKeyColumnFromPropertiesC(column)) {
							strSwing+=GetFunctionInicializacionButtonForeignKeyC(column,"","",true,false);						
						}
						
						//if(!blnConMinCodigoWeb){
						strSwing+=GetFunctionInicializacionButtonUpdateForeignKeyC(column,"","",true,ConEjb);						
						//}
						
					} else if(EsBinaryColumn(column)) {
						strSwing+=GetFunctionInicializacionButtonBinaryC(column,"","",true);	
					}
					
					strSwing+=GetFunctionInicializacionButtonBusquedaC(column,"","",true,ConEjb);
				}			
			} else {
				/*
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					//tableSchema=GetNombreTablaRelacionadaFromColumn(column);
					strSwing+="\r\n\tprotected JLabel"+strSwtMe+" jLabel"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n";
					strSwing+="\tprotected JComboBox jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n\r\n";
					
				}
				*/
			}
			
			return strSwing;
	}	
	
	public String GetActualizarRelacionesFkPadreActualTablaClaseC(TableSchema TablaBase,bool ConEjb) 
		{
			String strSwing="";			
			bool esPrimero=true;
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema column in TablaBase.Columns) {			
					if(column.Name.Equals(strVersionRow)) {
						continue;	
					}
					
					if(column.IsForeignKeyMember) {
						strSwing+=GetRelacionesFkPadreActualC(column,"","",true,ConEjb,esPrimero);
						
						if(esPrimero) {
							esPrimero=false;
						}
					}						
				}			
			} else {

			}
			
		return strSwing;
	}	
		
	public String GetDeclararVentanasForeignKeysTablaClaseC(TableSchema TablaBase,bool ConEjb) 
		{
			String strSwing="";
			
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema column in TablaBase.Columns) {			
					if(column.Name.Equals(strVersionRow)) {
						continue;	
					}
					
					if(column.IsForeignKeyMember) {
						//SE CREA PARA TODOS, SINO ES BUSQUEDA, SE USA PARA ACTUALIZAR RELACIONEADOS(UPDATE)
						
						//if(GetBusquedaForeignKeyColumnFromPropertiesC(column)) {
						strSwing+=GetFunctionInicializacionButtonForeignKeyC(column,"","",true,true);						
						//}
						
						//strSwing+=GetFunctionInicializacionButtonUpdateForeignKeyC(column,"","",true,ConEjb);
						
					} else if(EsBinaryColumn(column)) {
						//strSwing+=GetFunctionInicializacionButtonBinaryC(column,"","",true);	
					}
					
					//strSwing+=GetFunctionInicializacionButtonBusquedaC(column,"","",true,ConEjb);
				}			
			} else {
				/*
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					//tableSchema=GetNombreTablaRelacionadaFromColumn(column);
					strSwing+="\r\n\tprotected JLabel"+strSwtMe+" jLabel"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n";
					strSwing+="\tprotected JComboBox jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+";\r\n\r\n";
					
				}
				*/
			}
			
		return strSwing;
	}	
			
	public string GetRelacionesFkPadreActualC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool ConEjb,bool esPrimero)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		String sElse="";
		
		if(!esPrimero) {
			sElse=" else ";
		}
		
		TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);							
		
		strControl+="\r\n\t\t\t"+sElse+"if(this.jInternalFrameParent.getClass().equals("+GetNombreClaseC(tableSchemaFk.ToString())+"DetalleFormJInternalFrame.class)) {";
			
		//strControl+="\r\n\t\t\t\t"+GetNombreClaseC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrameLocal=(("+GetNombreClaseC(tableSchemaFk.ToString())+"DetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;";//"+GetNombreClaseObjetoC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame;";
		
		strControl+="\r\n\t\t\t\t"+GetNombreClaseC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrameLocal=("+GetNombreClaseC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame) (("+GetNombreClaseC(tableSchemaFk.ToString())+"DetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;";//"+GetNombreClaseObjetoC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame;";
		
		strControl+="\r\n\r\n\t\t\t\t"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodo"+GetNombreClaseC(tableSchemaFk.ToString())+"("+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrameLocal.get"+GetNombreClaseObjetoC(tableSchemaFk.ToString())+"(),true);";//this.empresasForeignKey
		strControl+="\r\n\t\t\t\t"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrameLocal.actualizarLista("+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrameLocal."+GetNombreClaseObjetoC(tableSchemaFk.ToString())+",this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"sForeignKey);";
		
		strControl+="\r\n\r\n\t\t\t\t"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrameLocal.actualizarRelaciones("+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrameLocal."+GetNombreClaseObjetoC(tableSchemaFk.ToString())+");";
		
		strControl+="\r\n\r\n\t\t\t\t"+GetNombreClaseObjetoC(column.Table.ToString())+"Local.set"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"("+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrameLocal."+GetNombreClaseObjetoC(tableSchemaFk.ToString())+");";
		
		strControl+="\r\n\r\n\t\t\t\tthis.addItemDefectoCombosForeignKey"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"();";
		strControl+="\r\n\t\t\t\tthis.cargarCombosFrame"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"sForeignKey(\"Formulario\");";
		strControl+="\r\n\t\t\t\tthis.setActual"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"ForeignKey("+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrameLocal."+GetNombreClaseObjetoC(tableSchemaFk.ToString())+".getId(),false,\"Formulario\");";

		strControl+="\r\n\t\t\t}";
		
		/*		
		
		strControl="\r\n\tpublic void jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"UpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {\r\n";
		strControl+="\t	try {\r\n\r\n";
		
		strControl+="\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.getNewConnexionToDeep(\"\");\r\n";
		strControl+="\t\t\t}\r\n\r\n";
			
		strControl+="\t\t\tBoolean idTienePermiso"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"=true;\r\n\r\n";
		strControl+="\t\t\tidTienePermiso"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"=this.tienePermisosUsuarioEnPaginaWeb"+GetNombreClaseC(column.Table.ToString())+"("+GetNombreClaseC(tableSchemaFk.ToString())+"ConstantesFunciones.CLASSNAME);\r\n\r\n";
		strControl+="\t\t\tif(idTienePermiso"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+") {\r\n";
		
		strControl+="\t\t\t\t//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL\r\n";		
		strControl+="\t\t\t\tint intSelectedRow = this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".getSelectedRow();\r\n\r\n";	
		
		strControl+="\t\t\t\tif(intSelectedRow<0 && this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".getRowCount()>0) {\r\n";
		strControl+="\t\t\t\t\tintSelectedRow =0;\r\n";
		strControl+="\t\t\t\t\tthis.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".setRowSelectionInterval(intSelectedRow,intSelectedRow);\r\n";
		strControl+="\t\t\t\t}\r\n";
		
		strControl+="\t\t\t\t//ARCHITECTURE\r\n";
		strControl+="\t\t\t\t/*\r\n";
		strControl+="\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\t\t";
		
		if(ConEjb){
			strControl+="//";
		}
		
		strControl+="this."+GetNombreClaseObjetoC(column.Table.ToString())+" =("+strPackageJava+GetNombreClaseC(column.Table.ToString())+") this."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.get"+GetNombreClaseC(column.Table.ToString())+"s().toArray()[this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".convertRowIndexToModel(intSelectedRow)];\r\n";
		strControl+="\t\t\t\t} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+" =("+strPackageJava+GetNombreClaseC(column.Table.ToString())+") this."+GetNombreClaseObjetoC(column.Table.ToString())+"s.toArray()[this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".convertRowIndexToModel(intSelectedRow)];\r\n";
		strControl+="\t\t\t\t}\r\n";
		strControl+="\t\t\t\t\r\n";
		strControl+="\t\t\t\t//ARCHITECTURE\r\n\r\n";
		
		strControl+="\t\t\t\tthis.setVariablesFormularioToObjetoActual"+GetNombreClaseC(column.Table.ToString())+"(this.get"+GetNombreClaseObjetoC(column.Table.ToString())+"(),true);\r\n";
		strControl+="\t\t\t\tthis.setVariablesFormularioToObjetoActualForeignKeys"+GetNombreClaseC(column.Table.ToString())+"(this."+GetNombreClaseObjetoC(column.Table.ToString())+");\r\n\r\n";
		
		strControl+="\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame=new "+GetNombreClaseC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);\r\n";//GetNombreClaseC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame "
		strControl+="\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.setJInternalFrameParent(this);\r\n\r\n";
		
		strControl+="\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.get"+GetNombreClaseC(tableSchemaFk.ToString())+"Logic().setConnexion(this."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.getConnexion());\r\n\r\n";
				
		strControl+="\t\t\t\tif(this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+GetNombreCompletoColumnaClaseC(column)+"()!=null) {\r\n";		
		strControl+="\t\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.sTipoBusqueda=\"PorId\";\r\n";//"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"
		strControl+="\t\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.setIdActual(this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+GetNombreCompletoColumnaClaseC(column)+"());\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.procesarBusqueda(\"PorId\");\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.setsAccionBusqueda(\"PorId\");\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.inicializarActualizarBindingTabla"+GetNombreClaseC(tableSchemaFk.ToString())+"();\r\n";
		strControl+="\t\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\t\tJInternalFrameBase jinternalFrame =this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame;\r\n";    		

		strControl+="\t\t\t\tjinternalFrame.setAutoscrolls(true);\r\n";
			
		strControl+="\t\t\t\t//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);\r\n";
		strControl+="\t\t\t\tjinternalFrame.setVisible(true); \r\n\r\n\r\n";
	    	
		strControl+="\t\t\t\tTitledBorder titledBorder"+GetNombreClaseC(column.Table.ToString())+"=(TitledBorder)this.jScrollPanelDatos"+GetNombreClaseC(column.Table.ToString())+".getBorder();\r\n";
		strControl+="\t\t\t\tTitledBorder titledBorder"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"=(TitledBorder)this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.jScrollPanelDatos"+GetNombreClaseRelacionadaFromColumn(column)+".getBorder();\r\n\r\n";							
		strControl+="\t\t\t\ttitledBorder"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+".setTitle(titledBorder"+GetNombreClaseC(column.Table.ToString())+".getTitle() + \" -> "+GetTituloNombreTableFromPropertiesC(tableSchemaFk)+"\");\r\n\r\n\r\n";
					
		strControl+="\t\t\t\tif(!Constantes.CON_VARIAS_VENTANAS) {\r\n";
		strControl+="\t\t\t\t\tMainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);\r\n";
		strControl+="\t\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\t\tthis.jDesktopPane.add(jinternalFrame);\r\n\r\n";
	        
	    strControl+="\t\t\t\tjinternalFrame.setSelected(true);\r\n";
		strControl+="\t\t\t} else {\r\n";
		strControl+="\t\t\t\tthrow new Exception(\"NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION\");\r\n";
		strControl+="\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.commitNewConnexionToDeep();\r\n";
		strControl+="\t\t\t}\r\n\r\n";
		
		strControl+="\r\n\t	} catch(Exception e) {\r\n\r\n";
		
		strControl+="\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.rollbackNewConnexionToDeep();\r\n";
		strControl+="\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\tFuncionesSwing.manageException(this, e,logger,"+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.CLASSNAME);\r\n\r\n";
		strControl+="\t	} finally {\r\n";
		
		strControl+="\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.closeNewConnexionToDeep();\r\n";
		strControl+="\t\t\t}\r\n\r\n";
		
		strControl+="\t\t}\r\n";
		strControl+="\t}\r\n";					
		*/
		
		return strTituloControl+strControl;
	}
		
	public string GetFunctionInicializacionButtonUpdateForeignKeyC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool ConEjb)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		//strControl="\tprotected JComboBox "+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,true)+";\r\n";						
		//strControl+="\tprotected JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
		//strControl+="\tprotected JPanel"+strSwtMe+" jPanel"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
				
		TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);	
		
		strControl="\r\n\tpublic void jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"UpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {\r\n";
		strControl+="\t	try {\r\n\r\n";
		//strControl+="\t		\r\n";
		//strControl+="\t		\r\n";
		
		strControl+="\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.getNewConnexionToDeep(\"\");\r\n";
		strControl+="\t\t\t}\r\n\r\n";
			
		strControl+="\t\t\tBoolean idTienePermiso"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"=true;\r\n\r\n";
		strControl+="\t\t\tidTienePermiso"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"=this.tienePermisosUsuarioEnPaginaWeb"+GetNombreClaseC(column.Table.ToString())+"("+GetNombreClaseC(tableSchemaFk.ToString())+"ConstantesFunciones.CLASSNAME);\r\n\r\n";
		strControl+="\t\t\tif(idTienePermiso"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+") {\r\n";
		
		strControl+="\t\t\t\t//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL\r\n";		
		strControl+="\t\t\t\tint intSelectedRow = this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".getSelectedRow();\r\n\r\n";	
		
		strControl+="\t\t\t\tif(intSelectedRow<0 && this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".getRowCount()>0) {\r\n";
		strControl+="\t\t\t\t\tintSelectedRow =0;\r\n";
		strControl+="\t\t\t\t\tthis.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".setRowSelectionInterval(intSelectedRow,intSelectedRow);\r\n";
		strControl+="\t\t\t\t}\r\n";
		
		strControl+="\t\t\t\t//ARCHITECTURE\r\n";
		strControl+="\t\t\t\t/*\r\n";
		strControl+="\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\t\t";
		
		if(ConEjb){
			strControl+="//";
		}
		
		strControl+="this."+GetNombreClaseObjetoC(column.Table.ToString())+" =("+strPackageJava+GetNombreClaseC(column.Table.ToString())+") this."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.get"+GetNombreClaseC(column.Table.ToString())+"s().toArray()[this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".convertRowIndexToModel(intSelectedRow)];\r\n";
		strControl+="\t\t\t\t} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+" =("+strPackageJava+GetNombreClaseC(column.Table.ToString())+") this."+GetNombreClaseObjetoC(column.Table.ToString())+"s.toArray()[this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".convertRowIndexToModel(intSelectedRow)];\r\n";
		strControl+="\t\t\t\t}\r\n";
		strControl+="\t\t\t\t*/\r\n";
		strControl+="\t\t\t\t//ARCHITECTURE\r\n\r\n";
		
		strControl+="\t\t\t\tthis.setVariablesFormularioToObjetoActual"+GetNombreClaseC(column.Table.ToString())+"(this.get"+GetNombreClaseObjetoC(column.Table.ToString())+"(),true);\r\n";
		strControl+="\t\t\t\tthis.setVariablesFormularioToObjetoActualForeignKeys"+GetNombreClaseC(column.Table.ToString())+"(this."+GetNombreClaseObjetoC(column.Table.ToString())+");\r\n\r\n";
		
		strControl+="\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame=new "+GetNombreClaseC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);\r\n";//GetNombreClaseC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame "
		strControl+="\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.setJInternalFrameParent(this);\r\n\r\n";
		
		strControl+="\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.get"+GetNombreClaseC(tableSchemaFk.ToString())+"Logic().setConnexion(this."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.getConnexion());\r\n\r\n";
				
		strControl+="\t\t\t\tif(this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+GetNombreCompletoColumnaClaseC(column)+"()!=null) {\r\n";		
		strControl+="\t\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.sTipoBusqueda=\"PorId\";\r\n";//"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"
		strControl+="\t\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.setIdActual(this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+GetNombreCompletoColumnaClaseC(column)+"());\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.procesarBusqueda(\"PorId\");\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.setsAccionBusqueda(\"PorId\");\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.inicializarActualizarBindingTabla"+GetNombreClaseC(tableSchemaFk.ToString())+"();\r\n";
		strControl+="\t\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\t\tJInternalFrameBase jinternalFrame =this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame;\r\n";    		

		strControl+="\t\t\t\tjinternalFrame.setAutoscrolls(true);\r\n";
			
		strControl+="\t\t\t\t//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);\r\n";
		strControl+="\t\t\t\tjinternalFrame.setVisible(true); \r\n\r\n\r\n";
	    	
		strControl+="\t\t\t\tTitledBorder titledBorder"+GetNombreClaseC(column.Table.ToString())+"=(TitledBorder)this.jScrollPanelDatos"+GetNombreClaseC(column.Table.ToString())+".getBorder();\r\n";
		strControl+="\t\t\t\tTitledBorder titledBorder"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"=(TitledBorder)this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.jScrollPanelDatos"+GetNombreClaseRelacionadaFromColumn(column)+".getBorder();\r\n\r\n";							
		strControl+="\t\t\t\ttitledBorder"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+".setTitle(titledBorder"+GetNombreClaseC(column.Table.ToString())+".getTitle() + \" -> "+GetTituloNombreTableFromPropertiesC(tableSchemaFk)+"\");\r\n\r\n\r\n";
					
		strControl+="\t\t\t\tif(!Constantes.CON_VARIAS_VENTANAS) {\r\n";
		strControl+="\t\t\t\t\tMainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);\r\n";
		strControl+="\t\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\t\tthis.jDesktopPane.add(jinternalFrame);\r\n\r\n";
	        
	    strControl+="\t\t\t\tjinternalFrame.setSelected(true);\r\n";
		strControl+="\t\t\t} else {\r\n";
		strControl+="\t\t\t\tthrow new Exception(\"NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION\");\r\n";
		strControl+="\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.commitNewConnexionToDeep();\r\n";
		strControl+="\t\t\t}\r\n\r\n";
		
		strControl+="\r\n\t	} catch(Exception e) {\r\n\r\n";
		
		strControl+="\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.rollbackNewConnexionToDeep();\r\n";
		strControl+="\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\tFuncionesSwing.manageException(this, e,logger,"+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.CLASSNAME);\r\n\r\n";
		strControl+="\t	} finally {\r\n";
		
		strControl+="\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.closeNewConnexionToDeep();\r\n";
		strControl+="\t\t\t}\r\n\r\n";
		
		strControl+="\t\t}\r\n";
		strControl+="\t}\r\n";					
		
		return strTituloControl+strControl;
	}
	
	public string GetFunctionInicializacionButtonBusquedaC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool ConEjb)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		//strControl="\tprotected JComboBox "+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,true)+";\r\n";						
		//strControl+="\tprotected JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
		//strControl+="\tprotected JPanel"+strSwtMe+" jPanel"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
				
		TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);	
		
		strControl="\r\n\tpublic void jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"BusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {\r\n";
		strControl+="\t	try {\r\n\r\n";
		//strControl+="\t		\r\n";
		//strControl+="\t		\r\n";
		strControl+="\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.getNewConnexionToDeep(\"\");\r\n";
		strControl+="\t\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\t\t//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL\r\n";		
		strControl+="\t\t\t\tint intSelectedRow = this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".getSelectedRow();\r\n\r\n";	
		
		strControl+="\t\t\t\tif(intSelectedRow>-1) {\r\n";
		strControl+="\t\t\t\t\tthis.setVariablesFormularioToObjetoActual"+GetNombreClaseC(column.Table.ToString())+"(this.get"+GetNombreClaseObjetoC(column.Table.ToString())+"(),true);\r\n";
		strControl+="\t\t\t\t\tthis.setVariablesFormularioToObjetoActualForeignKeys"+GetNombreClaseC(column.Table.ToString())+"(this."+GetNombreClaseObjetoC(column.Table.ToString())+");\r\n";
		
		strControl+="\t\t\t\t\t//ARCHITECTURE\r\n";
		strControl+="\t\t\t\t\t/*\r\n";
		strControl+="\t\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\t\t\t";
		
		if(ConEjb){
			strControl+="//";
		}
		
		strControl+="this."+GetNombreClaseObjetoC(column.Table.ToString())+" =("+strPackageJava+GetNombreClaseC(column.Table.ToString())+") this."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.get"+GetNombreClaseC(column.Table.ToString())+"s().toArray()[this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".convertRowIndexToModel(intSelectedRow)];\r\n";
		strControl+="\t\t\t\t\t} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {\r\n";
		strControl+="\t\t\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+" =("+strPackageJava+GetNombreClaseC(column.Table.ToString())+") this."+GetNombreClaseObjetoC(column.Table.ToString())+"s.toArray()[this.jTableDatos"+GetNombreClaseC(column.Table.ToString())+".convertRowIndexToModel(intSelectedRow)];\r\n";
		strControl+="\t\t\t\t\t}\r\n";
		strControl+="\t\t\t\t\t*/\r\n";
		strControl+="\t\t\t\t\t//ARCHITECTURE\r\n\r\n";
		strControl+="\t\t\t\t} else {\r\n";
		
		strControl+="\t\t\t\t\tif(this."+GetNombreClaseObjetoC(column.Table.ToString())+"==null) {\r\n";
		strControl+="\t\t\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+" = new "+GetNombreClaseC(column.Table.ToString())+"();\r\n";		
		strControl+="\t\t\t\t\t}\r\n\r\n";
		strControl+="\t\t\t\t\tthis.setVariablesFormularioToObjetoActual"+GetNombreClaseC(column.Table.ToString())+"(this."+GetNombreClaseObjetoC(column.Table.ToString())+",true);\r\n";
		strControl+="\t\t\t\t\tthis.setVariablesFormularioToObjetoActualForeignKeys"+GetNombreClaseC(column.Table.ToString())+"(this."+GetNombreClaseObjetoC(column.Table.ToString())+");\r\n";
		strControl+="\t\t\t\t}\r\n\r\n";
		
		
		
		String strToString="";
		String strComillasColumnaIni="";
		String strComillasColumnaFin="";
		String strNombreColumna="";
		String strSimboloColumna=" = ";
		String strCastIni="";
		String strCastFin="";
		
		//Funciones2.getStringPostgresDate(
		
		if(!EsVarCharColumn(column) && !EsCharColumn(column)) {
			if(!EsDateColumn(column)){
				strToString=".toString()";
			} else {
				strCastIni="Funciones2.getStringPostgresDate(";
				strCastFin=")";
				
				strComillasColumnaIni="'";	
				strComillasColumnaFin="'";
			}
		} else {
			strComillasColumnaIni="'%";	
			strComillasColumnaFin="%'";	
			strSimboloColumna=" like ";
		}
		
		strNombreColumna=GetNombreColumnaClaseC(column);		
		
		if(column.Name.Equals(strId)) {
			strNombreColumna=strIdGetSet;
		}
		
		strControl+="\t\t\t\tif(this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+strNombreColumna+"()!=null) {\r\n\r\n";
		strControl+="\t\t\t\t\tthis.sAccionBusqueda=\"Query\";\r\n\r\n";
		strControl+="\t\t\t\t\tthis.sFinalQueryGeneral=\" where "+GetNombreColumnFromPropertiesC(column,true)+strSimboloColumna+strComillasColumnaIni+"\"+"+strCastIni+"this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+strNombreColumna+"()"+strToString+strCastFin+"+\""+strComillasColumnaFin+" \";\r\n\r\n";
		
		strControl+="\t\t\t\t\tif(Constantes.ISDEVELOPING) {\r\n";
		strControl+="\t\t\t\t\t\tSystem.out.println(this.sFinalQueryGeneral);\r\n";
		strControl+="\t\t\t\t\t}\r\n\r\n";
				
		strControl+="\t\t\t\t\tthis.procesarBusqueda(this.sAccionBusqueda);\r\n\r\n";
		strControl+="\t\t\t\t\tthis.inicializarActualizarBinding"+GetNombreClaseC(column.Table.ToString())+"(false);\r\n";
		strControl+="\t\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.commitNewConnexionToDeep();\r\n";
		strControl+="\t\t\t\t}\r\n";
		
			
		strControl+="\r\n\t\t	} catch(Exception e) {\r\n\r\n";
		
		strControl+="\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.rollbackNewConnexionToDeep();\r\n";
		strControl+="\t\t\t\t}\r\n\r\n";
		
		strControl+="\t\t\t\tFuncionesSwing.manageException(this, e,logger,"+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.CLASSNAME);\r\n\r\n";		
		
		strControl+="\t\t	} finally {\r\n";							
		strControl+="\t\t\t\tif(Constantes.ISUSAEJBLOGICLAYER) {\r\n";
		strControl+="\t\t\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+"Logic.closeNewConnexionToDeep();\r\n";
		strControl+="\t\t\t\t}\r\n\r\n";
		strControl+="\t\t	}\r\n";
		strControl+="\t\t}\r\n";
		
		return strTituloControl+strControl;
	}	
	
	public string GetFunctionInicializacionButtonForeignKeyC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool esParaDeclararVariables)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		//strControl="\tprotected JComboBox "+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,true)+";\r\n";						
		//strControl+="\tprotected JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
		//strControl+="\tprotected JPanel"+strSwtMe+" jPanel"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
				
		TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);	
		String sNombreColumna="";
		
		if(!esParaDeclararVariables) {
			/*
			if(!column.Name.Equals(strId)) {
				sNombreColumna=GetNombreCompletoColumnaClaseC(column);
			} else {
				sNombreColumna=GetNombreColumnaClaseC(column);//strId +"_" + GetNombreClaseObjetoC(tableSchemaFk.ToString());
			}
			*/
			
			sNombreColumna=GetNombreColumnaClaseC(column);
			
			strControl="\r\n\tpublic void jButton"+sNombreColumna+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"ActionPerformed(java.awt.event.ActionEvent evt) throws Exception {\r\n";
			strControl+="\t	try {\r\n";
			//strControl+="\t		\r\n";
			//strControl+="\t		\r\n";
			//GetNombreClaseC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame "
			strControl+="\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame=new "+GetNombreClaseC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);\r\n";//GetNombreClaseObjetoC(tableSchemaFk.ToString())
			strControl+="\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.setJInternalFrameParent(this);\r\n";
			strControl+="\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.sTipoBusqueda=\""+GetNombreCompletoClaseRelacionadaFromColumn(column)+"\";\r\n\r\n";
			
			strControl+="\t\t\tif(!this.sFinalQueryGeneral_"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+".equals(\"\")) {\r\n";
			strControl+="\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+");\r\n";
			strControl+="\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.sAccionBusqueda=\"Query\";\r\n\r\n";
						
			

			strControl+="\r\n\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.procesarBusqueda(this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.sAccionBusqueda);\r\n";
			strControl+="\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.inicializarActualizarBinding"+GetNombreClaseC(tableSchemaFk.ToString())+"(false);\r\n";
			strControl+="\t\t\t}\r\n\r\n";
			
			
			//MANEJAR EVENTO COMBO EVENT
			
			
			strControl+="\t\t\tif(!this.sFinalQueryCombo"+GetNombreCompletoClaseRelacionadaFromColumn(column)+".equals(\"\") && false) {\r\n";
			
			if(!GetConEventQueryDependColumnFromPropertiesC(column).Equals("")) {
				strControl+="\r\n\t\t\t\t//BUSQUEDA FILTRADA DESDE COMBO EVENT Y EVENTDEPEND";
				strControl+="\r\n\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.sFinalQueryGeneral=this.sFinalQueryCombo"+GetNombreCompletoClaseRelacionadaFromColumn(column)+";";//.Replace("Local","")
				
				strControl+="\r\n\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.procesarBusqueda(this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.sAccionBusqueda);\r\n";
				strControl+="\t\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.inicializarActualizarBinding"+GetNombreClaseC(tableSchemaFk.ToString())+"(false);\r\n";
			
			}
			
			strControl+="\t\t\t}\r\n\r\n";
			
			
			if(!GetConTabBusquedaColumnFromPropertiesC(column)) {
				
				strControl+="\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.jTabbedPaneBusquedas"+GetNombreClaseC(tableSchemaFk.ToString())+".setVisible(false);\r\n";
				strControl+="\t\t\t"+strCommentMinCodigoWebIni+sCoWebExpIni;
				strControl+="\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.jTtoolBar"+GetNombreClaseC(tableSchemaFk.ToString())+".setVisible(false);\r\n";
				strControl+="\t\t\t"+strCommentMinCodigoWebFin+sCoWebExpFin;
				strControl+="\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.getjButtonRecargarInformacion"+GetNombreClaseC(tableSchemaFk.ToString())+"().setVisible(false);\r\n\r\n";
			}
			
			strControl+="\r\n\t\t\tJInternalFrameBase jinternalFrame =this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame;\r\n";    		
	
			strControl+="\t\t\tjinternalFrame.setAutoscrolls(true);\r\n";
				
			strControl+="\t\t\t//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);\r\n";
			strControl+="\t\t\tjinternalFrame.setVisible(true); \r\n\r\n\r\n";
				
			strControl+="\t\t\tTitledBorder titledBorder"+GetNombreClaseC(column.Table.ToString())+"=null;\r\n";
			strControl+="\t\t\tTitledBorder titledBorder"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"=null;\r\n\r\n";							
			
			strControl+="\t\t\tif(!this.jScrollPanelDatos"+GetNombreClaseC(column.Table.ToString())+".getBorder().getClass().equals(EmptyBorder.class)) {\r\n";
			strControl+="\t\t\t\ttitledBorder"+GetNombreClaseC(column.Table.ToString())+"=(TitledBorder)this.jScrollPanelDatos"+GetNombreClaseC(column.Table.ToString())+".getBorder();\r\n";
			strControl+="\t\t\t\ttitledBorder"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"=(TitledBorder)this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame.jScrollPanelDatos"+GetNombreClaseRelacionadaFromColumn(column)+".getBorder();\r\n\r\n";										
			strControl+="\t\t\t\ttitledBorder"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+".setTitle(titledBorder"+GetNombreClaseC(column.Table.ToString())+".getTitle() + \" -> "+GetTituloNombreTableFromPropertiesC(tableSchemaFk)+"\");\r\n";			
			strControl+="\t\t\t}\r\n\r\n";
			
			
			strControl+="\t\t\tif(!Constantes.CON_VARIAS_VENTANAS) {\r\n";
			strControl+="\t\t\t\tMainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);\r\n";
			strControl+="\t\t\t}\r\n\r\n";
			
			strControl+="\t\t\tthis.jDesktopPane.add(jinternalFrame);\r\n\r\n";
				
			strControl+="\t\t\tjinternalFrame.setSelected(true);\r\n";
				
			strControl+="\r\n\t	} catch(Exception e) {\r\n";
			strControl+="\t\t\tFuncionesSwing.manageException(this, e,logger,"+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.CLASSNAME);\r\n";
			strControl+="\t	}\r\n";
			strControl+="\t}\r\n";					
			
		} else {
			//NO DEBE AFECTAR ESTO A FKs
			/*
			String strClasesNo=GetNombresClasesNoNavegacionFromTableFromPropertiesC(column.Table);
			String strClasesSi=GetNombresClasesSiNavegacionFromTableFromPropertiesC(column.Table);
			bool tieneNinguno=false;
			bool permite=false;
			
			if(strClasesNo.Equals("NINGUNO") || strClasesSi.Equals("NINGUNO")) {
				tieneNinguno=true;
			}
			
			if(!tableSchemaFk.Name.Equals(column.Table.Name)) {				
				permite=true;
			
			} else {
				if(tieneNinguno) {
					permite=true;
				}
			}
			*/
			
			//if(permite) {				
			if(true) {
				strControl+="\r\n\r\n\tprotected "+GetNombreClaseC(tableSchemaFk.ToString())+"BeanSwingJInternalFrame "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame;";			
			}
			
			strControl+="\r\n\tpublic String sFinalQueryGeneral_"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"=\"\";";
		}
		
		return strTituloControl+strControl;
	}
	
		//SI SE BUSCA EN TODO SE HACE MUY LENTO
		public static bool GetEsAutoReferenciadaTablaC(TableSchema tableSchema) {
			bool blnExiste=false;
			TableSchema tableSchemaFk;
			String strClasesAutoReferenciadasFromProperties=GetClasesAutoReferenciadasGlobalesDatabaseFromPropertiesC(tableSchema.Database);
			
			/*
			if(!strClasesAutoReferenciadasFromProperties.Equals("")) {
				if(ExisteEnListaComasC(strClasesAutoReferenciadasFromProperties,tableSchema.Name)) {
					blnExiste=true;					
				}
			} else {
			*/
				foreach(ColumnSchema columnSchema in tableSchema.Columns) {		
					if(columnSchema.IsForeignKeyMember){
						tableSchemaFk=GetTableSchemaFromColumnForeignKey(columnSchema);	
									
						if(tableSchemaFk.Name.Equals(tableSchema.Name)) {
							blnExiste=true;
							break;
						}
					}
				}	
			//}
			
			return blnExiste;
		}				
		
		public bool GetExisteBusquedasTablaC(TableSchema TablaBase) {
			return GetExisteBusquedasTablaC(TablaBase,true,true,false) ;
		}
		
		public bool GetExisteBusquedasTablaC(TableSchema TablaBase,bool conVarGlobal) {
			return GetExisteBusquedasTablaC(TablaBase,true,conVarGlobal,false) ;
		}
		
		public bool GetExisteBusquedasTablaC(TableSchema TablaBase,bool conVarGlobal,bool conIndicesOcultos,bool conSoloFuncionBusqueda) {
			bool blnExisteBusqueda=false;
			bool blnEsBusquedaVariableGlobal=false;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
				if(!indexSchema.IsPrimaryKey)
				{
					
					if(indexSchema.IsUnique)
					{
					}
					else
					{
						blnEsBusquedaVariableGlobal=false;
						
						if(!conVarGlobal) {
							if(indexSchema.MemberColumns.Count.Equals(1)) {
								foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
									if(EsColumnaVariableGlobalDataBaseFromPropertiesC(memberColumnSchema.Column) 
										|| EsColumnaVariableModuloGlobalC(memberColumnSchema.Column)
									) {
										blnEsBusquedaVariableGlobal=true;
									}
								}
							}
						}
						
						if(blnEsBusquedaVariableGlobal) {
							continue;	
						}
						
						if(!conIndicesOcultos) {
							
							if(GetExisteIndiceOcultoC(TablaBase,indexSchema.Name)) {
								//Trace.WriteLine(indexSchema.Name);
								continue;
							}
						}
						
						//SI SE DETERMINA SOLO FUNCIONES BUSQUEDA
						if(conSoloFuncionBusqueda) {
							if(!indexSchema.Name.Contains("Busqueda")){
								continue;
							}
						}
						
						if(!blnExisteBusqueda) {
							blnExisteBusqueda=true;
							
							break;
						}													
					}																																			
				}
			}			
			
			return blnExisteBusqueda; 
		}
		
		public int GetNumeroMaximoColumnasBusquedasTablaC(TableSchema TablaBase) {						
			int intNumeroMaximo=1;		
			int intNumeroIndicesBusquedas=0;
			
			intNumeroMaximo=GetNumeroMaximoColumnasBusquedasTablaC(TablaBase,false,false,false,ref intNumeroIndicesBusquedas);
			
			return intNumeroMaximo;
		}
		
		public int GetNumeroIndicesBusquedasTablaC(TableSchema TablaBase) {						
			int intNumeroMaximo=1;		
			int intNumeroIndicesBusquedas=0;
			
			intNumeroMaximo=GetNumeroMaximoColumnasBusquedasTablaC(TablaBase,false,false,false,ref intNumeroIndicesBusquedas);
			
			return intNumeroIndicesBusquedas;
		}
		
		public int GetNumeroMaximoColumnasBusquedasTablaC(TableSchema TablaBase,bool conVarGlobal,bool conIndicesOcultos,bool conSoloFuncionBusqueda,ref int intNumeroIndicesBusquedas) {
			bool blnExisteBusqueda=false;
			bool blnEsBusquedaVariableGlobal=false;
			int intNumeroMaximo=1;
			intNumeroIndicesBusquedas=0;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
				if(!indexSchema.IsPrimaryKey) {					
					if(indexSchema.IsUnique) {
						
					} else {
						blnEsBusquedaVariableGlobal=false;
						
						if(!conVarGlobal) {
							if(indexSchema.MemberColumns.Count.Equals(1)) {
								foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
									if( EsColumnaVariableGlobalDataBaseFromPropertiesC(memberColumnSchema.Column) 
										|| EsColumnaVariableModuloGlobalC(memberColumnSchema.Column)
									) {
										blnEsBusquedaVariableGlobal=true;
									}
								}
							}
						}
						
						if(blnEsBusquedaVariableGlobal) {
							continue;	
						}
						
						if(!conIndicesOcultos) {							
							if(GetExisteIndiceOcultoC(TablaBase,indexSchema.Name)) {
								//Trace.WriteLine(indexSchema.Name);
								continue;
							}
						}
						
						//SI SE DETERMINA SOLO FUNCIONES BUSQUEDA
						if(conSoloFuncionBusqueda) {
							if(!indexSchema.Name.Contains("Busqueda")){
								continue;
							}
						}
						
						if(!blnExisteBusqueda) {
							blnExisteBusqueda=true;							
							
							if(indexSchema.MemberColumns.Count > intNumeroMaximo) {
								intNumeroMaximo=indexSchema.MemberColumns.Count;
							}
						}
						
						intNumeroIndicesBusquedas++;
					}																																			
				}
			}			
			
			return intNumeroMaximo;//blnExisteBusqueda; 
		}		
		
		public String GetVariablesTodosIndicesTablasC(TableSchema TablaBase,bool esParaUso,bool conComaInicial) {
			return GetVariablesTodosIndicesTablasC(TablaBase,esParaUso,conComaInicial,"");	
		}
		
		public String GetVariablesTodosIndicesTablasC(TableSchema TablaBase,bool esParaUso,bool conComaInicial,String strNombreObjeto) {
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			bool existeBusqueda=false;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
					if(!indexSchema.IsPrimaryKey) {		
						if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
							continue;
						}
						
						if(indexSchema.IsUnique) {
							continue;
							//strInitFuncion+="\r\n"+GetWebMethodAnnotationFromConWebServicesC(ConWebServices)+" "+GetNombreClaseC(TablasBaseForReporte[i].ToString())+" "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+indexSchema.Name+"WithConnection(DatosCliente datosCliente,";
						} else {
							if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK")) {
							//strInitFuncion+="\r\n"+GetWebMethodAnnotationFromConWebServicesC(ConWebServices)+" "+strTypeCollection+"<"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"> "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"WithConnection(String sFinalQuery,Pagination pagination,DatosCliente datosCliente,";
							} else {
							//strInitFuncion+="\r\n"+GetWebMethodAnnotationFromConWebServicesC(ConWebServices)+" "+strTypeCollection+"<"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"> "+"get"+GetNombreClaseC(TablasBaseForReporte[i].ToString())+"s"+indexSchema.Name+"WithConnection(DatosCliente datosCliente,";
							}
						}	
						
						if(!existeBusqueda) {
							existeBusqueda=true;
						}
						
						int count=1;	
						foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {														
							if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual"))) {
								if(!esParaUso) {
									strInitFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" ";
								}
								
								strInitFuncion+=strNombreObjeto+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+indexSchema.Name; 
							
								//BUSQUEDA NORMAL PERO CON COLUMNA EN RANGO
								if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
									strInitFuncion+=",";
									
									if(!esParaUso) {
										strInitFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" ";
									}
									
									strInitFuncion+=strNombreObjeto+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+strSufijoRangoFinal+indexSchema.Name; 
								}
								
								if(!indexSchema.MemberColumns.Count.Equals(count)) {
									strInitFuncion+=",";	
								}
							} else {
								if(!indexSchema.Name.Contains("BusquedaRango")) {
									if(!esParaUso) {
										strInitFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" ";
									}
									
									strInitFuncion+=strNombreObjeto+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+indexSchema.Name; 
								} else {
									if(!esParaUso) {
										strInitFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" ";
									}
									
									strInitFuncion+=strNombreObjeto+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Inicial"+indexSchema.Name; 
									strInitFuncion+=",";
									
									if(!esParaUso) {
										strInitFuncion+=GetTipoColumnaClaseC(memberColumnSchema.Column)+" ";
									}
									
									strInitFuncion+=strNombreObjeto+GetPrefijoTipoC(memberColumnSchema.Column)+GetNombreColumnaClaseC(memberColumnSchema.Column)+"Final"+indexSchema.Name; 
									break;
								}
							}
							count++;
						}
						//strInitFuncion+=")throws Exception;";																																			
					}
				}
				
				if(existeBusqueda && conComaInicial) {
					strInitFuncion=","+strInitFuncion;	
				}
			
			//Trace.WriteLine(strInitFuncion);
			
			return strInitFuncion; 
		}
		
		public bool GetExisteIndiceOcultoC(TableSchema table,String strNombreIndice) {
			bool existe=false;
			
			String strClasesNoRelacionadas=GetNombresIndicesNoBusquedanFromTableFromPropertiesC(table);
				
			String[] strClases=strClasesNoRelacionadas.Split(',');
						
			//Trace.WriteLine(strNombreIndice+"-"+strClasesNoRelacionadas);
			
			foreach(String strClase in strClases) {						
				if(strClase.Equals(strNombreIndice)) {
					existe=true;
					break;
				}
			}
			
			return existe;
		}
		
		public string GetIndicesBusquedasTablaC(TableSchema TablaBase,bool conVarGlobal,bool conIndicesOcultos,bool sinBusquedaParaReporte) 
		{
			string strIndices="";
			bool blnExisteBusqueda=false;
			bool blnEsBusquedaVariableGlobal=false;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
				if(!indexSchema.IsPrimaryKey) {					
					if(indexSchema.IsUnique) {
						
					} else {
						blnEsBusquedaVariableGlobal=false;
						
						if(!conVarGlobal) {
							if(indexSchema.MemberColumns.Count.Equals(1)) {
								foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
									if( EsColumnaVariableGlobalDataBaseFromPropertiesC(memberColumnSchema.Column) 
										|| EsColumnaVariableModuloGlobalC(memberColumnSchema.Column)
									) {
										blnEsBusquedaVariableGlobal=true;
									}
								}
							}
						}
						
						if(blnEsBusquedaVariableGlobal) {
							continue;	
						}
						
						if(sinBusquedaParaReporte) {
							if(indexSchema.Name.Contains("Busqueda")) {
								continue;
							}							
						}
						if(!conIndicesOcultos) {
							
							if(GetExisteIndiceOcultoC(TablaBase,indexSchema.Name)) {
								//Trace.WriteLine(indexSchema.Name);
								continue;
							}
						}
						
						if(!blnExisteBusqueda) {
							blnExisteBusqueda=true;
						} else {
							strIndices+=",";
						}
						
						strIndices+=indexSchema.Name;
					}																																			
				}
			}			
			
			return strIndices; 
		}
		
		public String GetIndicesInicializacionVariablesTablasClasesC(TableSchema TablaBase) {
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n";
			bool blnExisteBusqueda=false;
			bool blnExisteBusquedaFkVariableGlobal=false;
			
			String strTabPanel=string.Empty;
			String strPanelesBusquedas=string.Empty;
			String strControlesPanelesBusquedas=string.Empty;
			
			String strTituloBusqueda="";
			String strTituloBusquedaPanel="";
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
				blnExisteBusquedaFkVariableGlobal=false;
				
				if(!indexSchema.IsPrimaryKey) {
					strTituloBusqueda="";
					
					if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
						continue;
					}
										
					if(indexSchema.IsUnique) {	
						continue;
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
					} else {						
						if(!blnExisteBusqueda) {
							blnExisteBusqueda=true;
							strTabPanel="\r\n\t\tthis.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+"=new JTabbedPane"+strSwtMe+"();\r\n";
							
							if(!GetPanelTabBusqueda_AlignTableFromPropertiesC(TablaBase).Equals("")) {
								strTabPanel+="\r\n\t\tthis.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setTabPlacement(JTabbedPane."+GetPanelTabBusqueda_AlignTableFromPropertiesC(TablaBase)+");";
							}
							
							String sPorcentajeTamanioExtra="0";							
							
							int iTamanioExtraNumeroIndices=0;
							int iTamanioExtraNumeroMaximoColumnasBusquedas=0;
							int iTamanioExtraTotal=0;
							
							
							//Trace.WriteLine("NUMERO INDICES="+ intNumeroIndicesBusquedas);
							//Trace.WriteLine("NUMERO MAXICO COLUMNAS INDICES="+ intNumeroMaximoColumnasBusquedas);
							
							//NUMERO MAXIMO COLUMNAS
							if(intNumeroMaximoColumnasBusquedas>1 || blnTieneColumnaConRangoIndices) {
								//25%
								
								if(blnTieneColumnaConRangoIndices) {
									if(intNumeroMaximoColumnasBusquedas<=1) {
										intNumeroMaximoColumnasBusquedas=2;
									}
								}
								
								iTamanioExtraNumeroMaximoColumnasBusquedas=(intNumeroMaximoColumnasBusquedas-1) * 25;																
							}
							
							
							//NUMERO INDICES
							if(intNumeroIndicesBusquedas>5) {
								//Trace.WriteLine("NUMERO INDICES="+ intNumeroIndicesBusquedas);
								iTamanioExtraNumeroIndices=(intNumeroIndicesBusquedas/10) * 20;
								//Trace.WriteLine("PORCENTAJE INDICES="+ iTamanioExtraNumeroIndices);
							}
							
							if(iTamanioExtraNumeroIndices>0 || iTamanioExtraNumeroMaximoColumnasBusquedas>0) {
								iTamanioExtraTotal= iTamanioExtraNumeroIndices + iTamanioExtraNumeroMaximoColumnasBusquedas;
								
								sPorcentajeTamanioExtra=iTamanioExtraTotal.ToString();
							}
							
							
							strTabPanel+="\r\n\r\n\t\tthis.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setMinimumSize(new Dimension(this.getWidth(),Constantes.ISWING_ALTO_TABPANE_BUSQUEDA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ALTO_TABPANE_BUSQUEDA,"+sPorcentajeTamanioExtra+")));";
							strTabPanel+="\r\n\t\tthis.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setMaximumSize(new Dimension(this.getWidth(),Constantes.ISWING_ALTO_TABPANE_BUSQUEDA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ALTO_TABPANE_BUSQUEDA,"+sPorcentajeTamanioExtra+")));";
							strTabPanel+="\r\n\t\tthis.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setPreferredSize(new Dimension(this.getWidth(),Constantes.ISWING_ALTO_TABPANE_BUSQUEDA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ALTO_TABPANE_BUSQUEDA,"+sPorcentajeTamanioExtra+")));";
							
							strTituloBusquedaPanel=strBusqueda;
							
							if(blnEsLabelProcesar) {
								strTituloBusquedaPanel=GetTituloNombreTableFromPropertiesC(TablaBase);	
							}
							
							
							strTabPanel+="\r\n\r\n\t\t//this.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setBorder(javax.swing.BorderFactory.createTitledBorder(\""+strTituloBusquedaPanel+"\"));\r\n";
							strTabPanel+="\t\tthis.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\r\n";
							
							strTabPanel+="\r\n\t\tFuncionesSwing.setBoldTabbedPane(this.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+",STIPO_TAMANIO_GENERAL,false,true,this);\r\n";
						}
						
						//Trace.WriteLine("idx:"+indexSchema.Name);
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK")) {														
							strPanelesBusquedas="\t\tthis.jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=new JPanelMe(\"fondo_formulario\",true);//new JPanel();\r\n";
							strPanelesBusquedas+="\t\tthis.jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".setToolTipText(\""+GetRecargarInformacionBuscarC(true,TablaBase)/*strBuscar*/+" "+"TO_REPLACE\");\r\n";						
							strPanelesBusquedas+="\t\tthis.jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= new JButtonMe();\r\n";
 							strPanelesBusquedas+="\t\tthis.jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".setText(\""+GetRecargarInformacionBuscarC(true,TablaBase)/*strBuscar*/+"\");\r\n";
							strPanelesBusquedas+="\t\tthis.jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".setToolTipText(\""+GetRecargarInformacionBuscarC(true,TablaBase)/*strBuscar*/+" "+"TO_REPLACE\");\r\n";							
							strPanelesBusquedas+="\t\tFuncionesSwing.addImagenButtonGeneral(this.jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+",\"buscar_button\",\""+GetRecargarInformacionBuscarC(true,TablaBase)/*strBuscar*/+" "+"TO_REPLACE\");\r\n";
							
							strPanelesBusquedas+="\r\n\t\tFuncionesSwing.setBoldButton(this.jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+", STIPO_TAMANIO_GENERAL,false,true,this);;\r\n";
							
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String strFinalQuery,";													
						} else {
							continue;
							//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
						}
					}
					
					int count=1;	
					strControlesPanelesBusquedas="";
					
					//Trace.WriteLine(indexSchema.Name);
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
						strTituloBusqueda+=strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" ";
													
						if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual"))) {							
							if(EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)
								|| EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)) {
								blnExisteBusquedaFkVariableGlobal=true;
								break;
							}
							
							strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember,true)+"\r\n"; 
								
							if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,"TODOS")) {
								strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,strSufijoRangoFinal,memberColumnSchema.IsForeignKeyMember,true)+"\r\n"; 
							}
							
							if(GetBusquedaForeignKeyColumnFromPropertiesC(memberColumnSchema.Column)) {
								strControlesPanelesBusquedas+="\t\tthis.jButtonBuscar"+indexSchema.Name+GetNombreColumnaClaseC(memberColumnSchema.Column)+GetNombreClaseC(TablaBase.ToString())+"= new JButtonMe();\r\n";
								strControlesPanelesBusquedas+="\t\tthis.jButtonBuscar"+indexSchema.Name+GetNombreColumnaClaseC(memberColumnSchema.Column)+GetNombreClaseC(TablaBase.ToString())+".setMinimumSize(new Dimension(50,Constantes.ISWING_ALTO_CONTROL));\r\n";
								strControlesPanelesBusquedas+="\t\tthis.jButtonBuscar"+indexSchema.Name+GetNombreColumnaClaseC(memberColumnSchema.Column)+GetNombreClaseC(TablaBase.ToString())+".setMaximumSize(new Dimension(50,Constantes.ISWING_ALTO_CONTROL));\r\n";
								strControlesPanelesBusquedas+="\t\tthis.jButtonBuscar"+indexSchema.Name+GetNombreColumnaClaseC(memberColumnSchema.Column)+GetNombreClaseC(TablaBase.ToString())+".setPreferredSize(new Dimension(50,Constantes.ISWING_ALTO_CONTROL));\r\n\r\n";
								
								strControlesPanelesBusquedas+="\t\tthis.jButtonBuscar"+indexSchema.Name+GetNombreColumnaClaseC(memberColumnSchema.Column)+GetNombreClaseC(TablaBase.ToString())+".setText(\""+strBuscar+"\");\r\n";
								strControlesPanelesBusquedas+="\t\tthis.jButtonBuscar"+indexSchema.Name+GetNombreColumnaClaseC(memberColumnSchema.Column)+GetNombreClaseC(TablaBase.ToString())+".setToolTipText(\""+strBuscar+"\");\r\n";
								strControlesPanelesBusquedas+="\t\tthis.jButtonBuscar"+indexSchema.Name+GetNombreColumnaClaseC(memberColumnSchema.Column)+GetNombreClaseC(TablaBase.ToString())+".setFocusable(false);\r\n\r\n";
																
							}
							
							if(!indexSchema.MemberColumns.Count.Equals(count)) {
								//strInitFuncion+=";\r\n";	
							}
						} else {
							if(!indexSchema.Name.Contains("BusquedaRango")) {
								strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember,true)+"\r\n"; 
																
							} else {
								strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Inicial",memberColumnSchema.IsForeignKeyMember,true)+"\r\n";
																
								//strInitFuncion+=",";
								strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Final",memberColumnSchema.IsForeignKeyMember,true)+"\r\n"; 
																
								break;
							}
						}
						count++;
					}//foreach(MemberColumnSchema
					
										
					if(blnExisteBusquedaFkVariableGlobal) {
						continue;	
					}
					
					//Trace.WriteLine(indexSchema.Name);
					if(blnEsLabelProcesar) {
						strTituloBusqueda=GetTituloNombreTableFromPropertiesC(TablaBase);
					}					
										
					strInitFuncion+=strPanelesBusquedas.Replace("TO_REPLACE",strTituloBusqueda);//+strControlesPanelesBusquedas;						
					
					strInitFuncion+=strControlesPanelesBusquedas;
					
					//strInitFuncion+=")throws Exception;";																																			
				}//if-IsPrimaryKey
				
			}//INDEXSCHEMA
			
			strInitFuncion+=strTabPanel;								
			
			return strInitFuncion; 
	}
		
	public String GetCabeceraFuncionSessionBeanC(String JBoss_Version) 
	{
		String strFuncion=string.Empty;	
		
		if(JBoss_Version.Equals("5.1")) {
			strFuncion+="@PermitAll";
		} else if(JBoss_Version.Equals("8.1")) {
			strFuncion+="@Override";
		}
		
		return strFuncion;
	}
		
	public bool EsVersionRichFaces4C(String RichFaces_Version) {
		bool esVersionRF4=false;
			
		if(RichFaces_Version.Equals("4.3")) {
			esVersionRF4=true;
		}
		
		return esVersionRF4;
	}
	
	public bool EsVersionRichFaces3C(String RichFaces_Version) {
		bool esVersionRF4=false;
			
		if(RichFaces_Version.Equals("3.0")) {
			esVersionRF4=true;
		}
		
		return esVersionRF4;
	}
	
	public String GetNavegacionTablasClasesFkControllerC(TableSchema table,bool inicializarSession,bool soloSession,bool esFuncionesGetSet,bool ConEjb,bool EsSwing,bool GeneracionPorModuloUnico) {
		String sTablaClaseRelacionada=String.Empty;
		TableSchema tablaRelacionadaObjetivo;
		
		String sSchemaPadre=GetSchemaTableFromDBC(table,"");
		String sSchemaRelacionada="";
		
		foreach(ColumnSchema column in table.Columns) {
			if(column.IsForeignKeyMember && GetBusquedaForeignKeyColumnFromPropertiesC(column)) {
				tablaRelacionadaObjetivo=GetNombreTablaRelacionadaFromColumn(column);
				
				if(GetNombreCompletoClaseRelacionadaFromColumn(column).Equals(GetNombreClaseC(table.ToString()))) {
					continue;	
				}
				
				if(GeneracionPorModuloUnico){
					sSchemaRelacionada=GetSchemaTableFromDBC(tablaRelacionadaObjetivo,"");
						
					if(!sSchemaPadre.Equals(sSchemaRelacionada)) {
						continue;
					}
				}
					
				sTablaClaseRelacionada+=GetNavegacionColumnTableCellTablasClasesFkControllerC(tablaRelacionadaObjetivo,column,inicializarSession,soloSession,esFuncionesGetSet,ConEjb,EsSwing);
			}
		}
		
		return sTablaClaseRelacionada;
	}
	
	public String GetNavegacionColumnTableCellTablasClasesFkControllerC(TableSchema tablaRelacionada,ColumnSchema column,bool inicializarSession,bool soloSession,bool esFuncionesGetSet,bool ConEjb,bool EsSwing) {
		String sNombrePakage=GetPackageTableFromProperties(tablaRelacionada);
		
		String sColumna="";
		
		String strNombreAdicional="";
		
		/*
		if(collectionInfo!=null) {
			GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
		}
		*/
		
		String strComentarioParaEjb="";
		
		if(ConEjb){
			strComentarioParaEjb="//";
		}		
		
		if(!inicializarSession) {
			if(!esFuncionesGetSet) {
				if(!soloSession) {		
					//ES SWING POR DEFECTO
					sColumna+="\r\n\tpublic "+GetNombreClaseC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFrame;";
					sColumna+="\r\n\tpublic "+GetNombreClaseC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"BeanSwingJInternalFramePopup;";
					sColumna+="\r\n\tpublic "+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+" "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+";";
				} else {	
					if(!EsSwing) {
						sColumna+="\r\n\r\n\t@ManagedProperty(value=\"#{"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+"}\")";
					}
					sColumna+="\r\n\tpublic "+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+" "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+";";
				}
			} else {
				sColumna+="\r\n\r\n\tpublic "+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+" get"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+"() {";
				sColumna+="\r\n\t\treturn this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+";";
				sColumna+="\r\n\t}";
				
				sColumna+="\r\n\r\n\tpublic void set"+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+"("+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+" "+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+") {";
				sColumna+="\r\n\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+"="+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+";";
				sColumna+="\r\n\t}";
			}
		} else {
			//sColumna+="\r\n\t\tthis."+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame=new "+GetNombreClaseC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame();";
			
			if(EsSwing) {
				sColumna+="\r\n\t\t//this."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+"=new "+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+"();";
			} else {
				sColumna+="\r\n\t\t\tthis."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+strPrefijoJSFSessionFaces+".inicializar"+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+"();";
			}
		}
		
		return sColumna;
	}
	
	public String GetNavegacionTablasRelacionadasClasesRelacionadasControllerC(TableSchema table,bool inicializarSession,bool ConEjb,bool GeneracionPorModuloUnico) {
		return GetNavegacionTablasRelacionadasClasesRelacionadasControllerC(table,inicializarSession,false,false,ConEjb,true,GeneracionPorModuloUnico);
	}

	public String GetNavegacionTablasRelacionadasClasesRelacionadasControllerC(TableSchema table,bool inicializarSession,bool soloSession,bool esFuncionesGetSet,bool ConEjb,bool EsSwing,bool GeneracionPorModuloUnico) {
			String sTablaClaseRelacionada=String.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String sClasesNoRelacionadas=String.Empty;
			String[] sClases;
			bool blClaseNo=false;
			
			String sSchemaPadre=GetSchemaTableFromDBC(table,"");
			String sSchemaRelacionada="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo)) {
					continue;
				}								
				
				if(GeneracionPorModuloUnico){
					sSchemaRelacionada=GetSchemaTableFromDBC(tablaRelacionadaObjetivo,"");
					
					if(!sSchemaPadre.Equals(sSchemaRelacionada)) {
						continue;
					}
				}
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas) {										
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)) {
						encontrado=true;
					}
				}				
				
				if(!encontrado) {
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					sTablaClaseRelacionada+=GetNavegacionColumnTableCellTablasClasesRelacionadasControllerC(table,tablaRelacionadaObjetivo,collectionInfo,inicializarSession,soloSession,esFuncionesGetSet,ConEjb,EsSwing);
				}													
			}
			//System.Windows.Forms.MessageBox.Show(sTablaClaseRelacionada);
									
		return sTablaClaseRelacionada; 
	}

	public String GetNavegacionColumnsTablaTablasClasesRelacionadasC(TableSchema table,bool esConMenu,bool esConManejarMenu,bool esConSwitchManejarMenu) {
		String sTablaClaseRelacionada=String.Empty;
			
		sTablaClaseRelacionada=GetNavegacionColumnsTablaTablasClasesRelacionadasC(table,esConMenu,esConManejarMenu,esConSwitchManejarMenu,false,false,false,false,false);
		
		return sTablaClaseRelacionada;		
	}
	
	public String GetNavegacionColumnsTablaTablasClasesRelacionadasC(TableSchema table,bool esConMenu,bool esConManejarMenu,bool esConSwitchManejarMenu,bool esConActualizarPadreFk,bool conCargarPanelesRelacionesFin,bool conCargarTiposRelaciones,bool conManejarTiposRelaciones,bool EsSwing) {
			String sTablaClaseRelacionada=String.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(table,false);
			
			String strObjetoBean="this."+GetNombreClaseObjetoC(table.ToString())+strClaseBean;

			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			TableSchema tablaRelacionadaObjetivo;
			bool encontrado=false;
			bool esPrimero=true;
			String sClasesNoRelacionadas=String.Empty;
			String[] sClases;
			bool blClaseNo=false;
			
			if(conCargarPanelesRelacionesFin) {
				arrayPanelesRelacionesFin=new ArrayList();
			}
			
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
				if(TieneFkMultiple(collectionInfo)) {
					continue;	
				}
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
								
				if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo)
					|| !GetPermitePorOcultoClaseRelacionadaC(table,tablaRelacionadaObjetivo)) {
					continue;
				}
				
								
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas) {
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)) {
						encontrado=true;
					}
				}				
				
				if(!encontrado) {
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					
					if(!esConMenu && !esConManejarMenu && !esConSwitchManejarMenu && !esConActualizarPadreFk && !conCargarPanelesRelacionesFin
						&& !conCargarTiposRelaciones && !conManejarTiposRelaciones) {
							
						sTablaClaseRelacionada+=GetNavegacionColumnTablaTablasClasesRelacionadasC(tablaRelacionadaObjetivo,table);
					
					} else if(esConMenu){
						sTablaClaseRelacionada+=GetNavegacionColumnTablaTablasClasesRelacionadasMenuItemC(tablaRelacionadaObjetivo,table);						
					
					} else if(esConManejarMenu){
						sTablaClaseRelacionada+=GetNavegacionColumnTablaTablasClasesRelacionadasMenuItemActionPerformedC(tablaRelacionadaObjetivo,table);						
					
					} else if(esConSwitchManejarMenu){
						sTablaClaseRelacionada+=GetSwitchNavegacionColumnTablaTablasClasesRelacionadasMenuItemActionPerformedC(tablaRelacionadaObjetivo,table,esPrimero);						
						
						if(esPrimero) {
							esPrimero=false;	
						}
					} else if(esConActualizarPadreFk) {
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
						
						sTablaClaseRelacionada+=GetActualizarPadreFkTablasClasesRelacionadasMenuItemActionPerformedC(tablaRelacionadaObjetivo,table,esPrimero,strNombreAdicional);
					
					} else if(conCargarPanelesRelacionesFin) {
						CargarPanelRelacionesFinC(tablaRelacionadaObjetivo,table,esPrimero);
						
					} else if(conCargarTiposRelaciones) {
						sTablaClaseRelacionada+=GetCargarTipoRelacionTablaClaseRelacionadaC(tablaRelacionadaObjetivo,table,EsSwing);											
						
					} else if(conManejarTiposRelaciones) {
						sTablaClaseRelacionada+=GetCargarManejarTipoRelacionTablaClaseRelacionadaC(tablaRelacionadaObjetivo,table,EsSwing);											
					}
				}													
			}
			//System.Windows.Forms.MessageBox.Show(sTablaClaseRelacionada);
									
			return sTablaClaseRelacionada; 
}

public String GetCargarManejarTipoRelacionTablaClaseRelacionadaC(TableSchema tablaRelacionada,TableSchema TablaBase,bool EsSwing) {
	String strTipoRelacionTablaClaseRelacionada="";
	
	//ES DEPENDIENTE DEL LABEL DE ABAJO
	strTipoRelacionTablaClaseRelacionada+="\r\n\t\t\t\telse if(this.sTipoRelacion.equals(\""+GetTituloNombreTableFromPropertiesC(tablaRelacionada)+"\")) {";
	if(EsSwing) {
		strTipoRelacionTablaClaseRelacionada+="\r\n\t\t\t\t\tjButton"+GetNombreClaseC(tablaRelacionada.ToString())+"ActionPerformed(null,rowIndex,true,false,"+GetNombreClaseObjetoC(TablaBase.ToString())+");";
	}
	strTipoRelacionTablaClaseRelacionada+="\r\n\t\t\t\t}";	
		
	return strTipoRelacionTablaClaseRelacionada;
}

public String GetCargarTipoRelacionTablaClaseRelacionadaC(TableSchema tablaRelacionada,TableSchema TablaBase,bool EsSwing) {
	String strTipoRelacionTablaClaseRelacionada="";
	
	//SI SE CAMBIA LABEL, CAMBIAR MANEJADOR QUE ESTA ARRIBA
	strTipoRelacionTablaClaseRelacionada+="\r\n\r\n\t\tif(this.isTienePermisos"+GetNombreClaseC(tablaRelacionada.ToString())+" && this."+GetNombreClaseObjetoC(TablaBase.ToString())+"ConstantesFunciones.mostrar"+GetNombreClaseC(tablaRelacionada.ToString())+""+GetNombreClaseC(TablaBase.ToString())+" && !"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.ISGUARDARREL) {";
		
	strTipoRelacionTablaClaseRelacionada+="\r\n\r\n\t\t\treporte=new Reporte();";
	strTipoRelacionTablaClaseRelacionada+="\r\n\t\t\treporte.setsCodigo(\""+GetTituloNombreTableFromPropertiesC(tablaRelacionada)+"\");";
	strTipoRelacionTablaClaseRelacionada+="\r\n\t\t\treporte.setsDescripcion(\""+GetTituloNombreTableFromPropertiesC(tablaRelacionada)+"\");";
			
	if(EsSwing){
		strTipoRelacionTablaClaseRelacionada+="\r\n\t\t\tthis.tiposRelaciones.add(reporte);";
	
	} else {
		strTipoRelacionTablaClaseRelacionada+="\r\n\t\t\tthis.tiposRelaciones.add(FuncionesJsp.traerSelectItemJspFromReporte(reporte));";
	}	
	
	strTipoRelacionTablaClaseRelacionada+="\r\n\t\t}";
	
	return strTipoRelacionTablaClaseRelacionada;
}

public string GetSwitchExcelTiposColumnsReporteCabeceraC(TableSchema TablaBase)
	{		
		string strVariables="";
		string strElse=" else ";strElse+="";
		string strTabsBase="\t\t\t\t\t";strTabsBase+="";
		string strSufijoVariables="";strSufijoVariables+="";
		bool esPrimero=true;
		string strCommentEjb="";strCommentEjb+="";
		
		
		string strToString="";strToString+="";
		string strGetColumn="";
		
		
		//System.Windows.Forms.MessageBox.Show("here");
		foreach(ColumnSchema column in TablaBase.Columns) {
			
		
			if(/*column.IsForeignKeyMember || */column.Name==strId ||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow
				|| EsBinaryColumn(column)) {
				continue;	
			}
			
			
			
			strToString="";
			strGetColumn="";
	
			
			strElse="";
			
			
			
			strVariables+="\r\n\r\n\t\tcell = row.createCell(iCell++);";
			strVariables+="\r\n\t\tcell.setCellValue("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+");";
			strVariables+="\r\n\t\tcell.setCellStyle(cellStyle);";
			//strVariables+="\r\n\t\t\t\t\tiCell++;";
			
			
						
			
			if(esPrimero) {
				esPrimero=false;
			}
		}
		
		return strVariables;
	}
	
	public string GetSwitchExcelTiposColumnsReporteC(TableSchema TablaBase)
	{		
		string strVariables="";
		string strElse=" else ";strElse+="";
		string strTabsBase="\t\t\t\t\t";strTabsBase+="";
		string strSufijoVariables="";strSufijoVariables+="";
		bool esPrimero=true;
		string strCommentEjb="";strCommentEjb+="";
		
		
		string strToString="";strToString+="";
		string strGetColumn="";
		
		string strGetDescripcionIni="";
		string strGetDescripcionFin="";
		
		//System.Windows.Forms.MessageBox.Show("here");
		foreach(ColumnSchema column in TablaBase.Columns) {
			strGetDescripcionIni="";
			strGetDescripcionFin="";
			
			if(/*column.IsForeignKeyMember || */column.Name==strId ||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow
				|| EsBinaryColumn(column)) {
				continue;	
			}
			
			if(EsBitColumn(column)) {
				strGetDescripcionIni="Funciones2.getDescripcionBoolean(";
				strGetDescripcionFin=")";
			}
			
			strToString="";
			strGetColumn="";
	
			
			strElse="";
			
			/*
			strVariables+="\r\n\t\t\t\tcase "+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+":";//LABEL_
			strVariables+="\r\n\t\t\t\t\tiRow=0;";
			
			strVariables+="\r\n\r\n\t\t\t\t\tif(!existeFilas) {";
			strVariables+="row = sheet.createRow(iRow);";
			strVariables+="} else {";
			strVariables+="row=sheet.getRow(iRow);";
			strVariables+="}";
			
			
			strVariables+="\r\n\r\n\t\t\t\t\tcell = row.createCell(iCell);";
			
			strVariables+="\r\n\t\t\t\t\tcell.setCellValue("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+");";
			
			strVariables+="\r\n\t\t\t\t\tiRow++;";
			*/
			
			/*
			strVariables+="\r\n\r\n\t\t\t\t\tfor("+GetNombreClaseC(TablaBase.ToString())+" "+GetNombreClaseObjetoC(TablaBase.ToString())+":"+GetNombreClaseObjetoC(TablaBase.ToString())+"sSeleccionados) {";
			strVariables+="\r\n\t\t\t\t\t\tif(!existeFilas) {";
			strVariables+="row = sheet.createRow(iRow);";
			strVariables+="} else {";
			strVariables+="row=sheet.getRow(iRow);";
			strVariables+="}";
			*/
			
			strVariables+="\r\n\r\n\t\t\tcell = row.createCell(iCell++);";
			
			
			if(!column.IsForeignKeyMember) {
				if(!EsStringColumnC(column)) {
					strToString=".toString()";
				}
				
				if(!column.Name.Equals(strId) && !column.Name.Equals(strVersionRow)) {
					strGetColumn="get"+GetNombreColumnaClaseC(column)+"()";
				} else {
					if(column.Name.Equals(strId)) {
						strGetColumn="getId()";
						
					} else if(column.Name.Equals(strVersionRow)) {
						strGetColumn="getVersionRow()";
					}
				}
				
				//strFilaCabecera+="\r\n\t\tcell = row.createCell("+iColumna+");cell.setCellValue("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strGetColumn+");";
				
				strVariables+="\r\n\t\t\tcell.setCellValue("+strGetDescripcionIni+GetNombreClaseObjetoC(TablaBase.ToString())+"."+strGetColumn+strGetDescripcionFin+");";
				
			} else {			
				//strFilaCabecera+="\r\n\t\tcell = row.createCell("+iColumna+");cell.setCellValue("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreColumnaClaseFkDescripcionC(column)+"());";
				strVariables+="\r\n\t\t\tcell.setCellValue("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreColumnaClaseFkDescripcionC(column)+"());";
			}
			
			strVariables+="\r\n\t\t\tif(cellStyle!=null) {";
			strVariables+="\r\n\t\t\t\tcell.setCellStyle(cellStyle);";
			strVariables+="\r\n\t\t\t}";
			
			/*
			strVariables+="\r\n\t\t\t\t\t\tiRow++;";
			strVariables+="\r\n\t\t\t\t\t}\r\n";
			
			strVariables+="\r\n\t\t\t\t\texisteFilas=true;";
			
			strVariables+="\r\n\t\t\t\t\tiCell++;";
			
			strVariables+="\r\n\t\t\t\t\tbreak;\r\n";
			*/			
			
			if(esPrimero) {
				esPrimero=false;
			}
		}
		
		return strVariables;
	}
	
public void CargarPanelRelacionesFinC(TableSchema tablaRelacionada,TableSchema TablaBase,bool esPrimero) {
	String strNombrePanelFin=GetPanelFinNombreTableFromPropertiesC(tablaRelacionada,true);
	
	if(!strNombrePanelFin.Equals("")) {
		if(!ExisteListaTextoC(arrayPanelesRelacionesFin,strNombrePanelFin)) {
			//strNombrePanelFin=strNombrePanelFin.Replace(" ","_").ToLower();
			arrayPanelesRelacionesFin.Add(strNombrePanelFin);
		}
	}
}

public String GetActualizarPadreFkTablasClasesRelacionadasMenuItemActionPerformedC(TableSchema tablaRelacionada,TableSchema TablaBase,bool esPrimero,String strNombreAdicional) 
{
	String sColumna="";
	String sElse=" else ";
	
	if(!esPrimero) {
		sElse=" else ";
	}
	
	//sColumna+="\r\n\t\t\t\tint row=this.jTableDatos"+GetNombreClaseC(TablaBase.ToString())+".getSelectedRow();";
	//sColumna+="\r\n\t\t\t\tjButton"+GetNombreClaseC(tablaRelacionada.ToString())+"ActionPerformed(evt,row,true,false);";
	
	sColumna+="\r\n\t\t"+sElse+" if(sTipo.equals(\""+GetNombreClaseC(tablaRelacionada.ToString())+"\")) {";
	sColumna+="\r\n\t\t\tif(this."+GetNombreClaseObjetoC(TablaBase.ToString())+"==null) {";
	sColumna+="\r\n\t\t\t\tthis."+GetNombreClaseObjetoC(TablaBase.ToString())+"= new "+GetNombreClaseC(TablaBase.ToString())+"();";
	sColumna+="\r\n\t\t\t}";
	
	sColumna+="\r\n\r\n\t\t\tif(this."+GetNombreClaseObjetoC(TablaBase.ToString())+"SessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevo"+GetNombreClaseC(TablaBase.ToString())+"";;
	sColumna+="\r\n\t\t\t\tthis.setVariablesFormularioToObjetoActual"+GetNombreClaseC(TablaBase.ToString())+"(this."+GetNombreClaseObjetoC(TablaBase.ToString())+",true);//false";
	sColumna+="\r\n\t\t\t\tthis.setVariablesFormularioToObjetoActualForeignKeys"+GetNombreClaseC(TablaBase.ToString())+"(this."+GetNombreClaseObjetoC(TablaBase.ToString())+");";
	
	sColumna+="\r\n\r\n\t\t\t\tthis."+strObjetoFormDetalle+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame.get"+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"().set"+GetNombreClaseC(TablaBase.ToString())+strNombreAdicional+"(this."+GetNombreClaseObjetoC(TablaBase.ToString())+");";
	
	sColumna+="\r\n\t\t\t}";
	sColumna+="\r\n\r\n\t\t\treturn;";
	sColumna+="\r\n\t\t}";
	
	return sColumna;
}

public String GetSwitchNavegacionColumnTablaTablasClasesRelacionadasMenuItemActionPerformedC(TableSchema tablaRelacionada,TableSchema TablaBase,bool esPrimero) 
{
	String sColumna="";
	String sElse=" else ";
	
	if(esPrimero) {
		sElse="";
	}
	
	sColumna+="\r\n\t\t\t\t"+sElse+" if(sTipo.equals(\""+GetNombreClaseC(tablaRelacionada.ToString())+"\")) {";
	sColumna+="\r\n\t\t\t\tint row=this.jTableDatos"+GetNombreClaseC(TablaBase.ToString())+".getSelectedRow();";
	sColumna+="\r\n\t\t\t\tjButton"+GetNombreClaseC(tablaRelacionada.ToString())+"ActionPerformed(evt,row,true,false,null);";
	sColumna+="\r\n\t\t\t\t}";
	
	return sColumna;
}

public String GetNavegacionColumnTablaTablasClasesRelacionadasMenuItemActionPerformedC(TableSchema tablaRelacionada,TableSchema TablaBase) 
{
	String sColumna="";
	
	sColumna+="\r\n\t\t\t\telse if(sActionCommand.equals(\""+GetTituloNombreTableFromPropertiesC(tablaRelacionada)+GetPluralTituloNombreTableFromPropertiesC(tablaRelacionada)+"\")) {";
	sColumna+="\r\n\t\t\t\tint row=this.jTableDatos"+GetNombreClaseC(TablaBase.ToString())+".getSelectedRow();";
	sColumna+="\r\n\t\t\t\tjButton"+GetNombreClaseC(tablaRelacionada.ToString())+"ActionPerformed(actionEvent,row,true,false);";
	sColumna+="\r\n\t\t\t\t}";
	
	return sColumna;
}
public String GetNavegacionColumnTablaTablasClasesRelacionadasMenuItemC(TableSchema tablaRelacionada,TableSchema TablaBase) 
{
	String sColumna="";
	String strObjetoBean=GetObjetoBeanC(TablaBase);
	String sTabExtra="\t";

	sColumna+="\r\n\r\n\t\t\t"+sTabExtra+"if(reporte.getsCodigo().equals(\""+GetTituloNombreTableFromPropertiesC(tablaRelacionada)+"\")) {";
	
	sColumna+="\r\n\r\n\t\t\t\t"+sTabExtra+"if(this.isTienePermisos"+GetNombreClaseC(tablaRelacionada.ToString())+" && "+strObjetoBean+".mostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+" && !"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.ISGUARDARREL) {";

	sColumna+="\r\n\t\t\t\t\t"+sTabExtra+"if(Constantes.ISDEVELOPING) {";
    sColumna+="\r\n\t\t\t\t\t\t"+sTabExtra+"sLabelMenu=\""+GetTituloNombreTableFromPropertiesC(tablaRelacionada)+GetPluralTituloNombreTableFromPropertiesC(tablaRelacionada)+"\"+\"(\"+"+GetNombreClaseC(tablaRelacionada.ToString())+"ConstantesFunciones.CLASSNAME+\")\";";
    sColumna+="\r\n\t\t\t\t\t"+sTabExtra+"}";
		
	sColumna+="\r\n\r\n\t\t\t\t\t"+sTabExtra+"jmenuItem = new JMenuItem"+strSwtMe+"(sLabelMenu);";
    sColumna+="\r\n\t\t\t\t\t"+sTabExtra+"//jmenuItem.setMnemonic(KeyEvent.VK_S);";
    sColumna+="\r\n\t\t\t\t\t"+sTabExtra+"//jmenuItem.setAccelerator(KeyStroke"+strSwtMe+".getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));";
    sColumna+="\r\n\t\t\t\t\t"+sTabExtra+"jmenuItem.setActionCommand(\""+GetTituloNombreTableFromPropertiesC(tablaRelacionada)+GetPluralTituloNombreTableFromPropertiesC(tablaRelacionada)+"\");";
		
	sColumna+="\r\n\r\n\t\t\t\t\t"+sTabExtra+"if("+GetNombreClaseObjetoC(TablaBase.ToString())+"ConstantesFunciones.resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"!=null) {";
	sColumna+="\r\n\t\t\t\t\t\t"+sTabExtra+"jmenuItem.setBorderPainted(true);";
	sColumna+="\r\n\t\t\t\t\t\t"+sTabExtra+"jmenuItem.setBorder("+GetNombreClaseObjetoC(TablaBase.ToString())+"ConstantesFunciones.resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+");";
	sColumna+="\r\n\t\t\t\t\t"+sTabExtra+"}";
				
	/*
	sColumna+="\r\n\r\n\t\t\t\tjmenuItem.addActionListener (";
	sColumna+="\r\n\t\t\t\t\tnew java.awt.event.ActionListener() {";
	sColumna+="\r\n\t\t\t\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {";
	sColumna+="\r\n\t\t\t\t\t\t\t//jmenuItemActionPerformed(evt);";
	sColumna+="\r\n\t\t\t\t\t\t\tint row=jTableDatos"+GetNombreClaseC(TablaBase.ToString())+".getSelectedRow();";
	sColumna+="\r\n\t\t\t\t\t\t\tjButton"+GetNombreClaseC(tablaRelacionada.ToString())+"ActionPerformed(evt,row,true,false);";
	sColumna+="\r\n\t\t\t\t\t\t}";
	sColumna+="\r\n\t\t\t\t\t}";
	sColumna+="\r\n\t\t\t\t);";
	*/
	
	sColumna+="\r\n\r\n\t\t\t\t\t"+sTabExtra+"jmenuItem.setEnabled("+strObjetoBean+".activar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+");";
	
	sColumna+="\r\n\r\n\t\t\t\t\t"+sTabExtra+"jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,\""+GetNombreClaseC(tablaRelacionada.ToString())+"\"));";
	
	sColumna+="\r\n\r\n\t\t\t\t\t"+sTabExtra+strCommentMinCodigoWebIni+sCoWebExpIni;
	sColumna+="\r\n\r\n\t\t\t\t\t"+sTabExtra+"this."+strObjetoFormDetalle+"jmenuDetalle"+GetNombreClaseC(TablaBase.ToString())+".add(jmenuItem);";
	sColumna+="\r\n\r\n\t\t\t\t\t"+sTabExtra+strCommentMinCodigoWebFin+sCoWebExpFin;
	
	sColumna+="\r\n\t\t\t\t"+sTabExtra+"}";//IF
	
	sColumna+="\r\n\r\n\t\t\t\t"+sTabExtra+"continue;";
	
	sColumna+="\r\n\t\t\t"+sTabExtra+"}";
	
	return sColumna;
}

public String GetObjetoBeanC(TableSchema TablaBase) {
	String strObjetoBean="this."+GetNombreClaseObjetoC(TablaBase.ToString())+strConstantesFunciones;//+strClaseBean;
	
	return strObjetoBean;
}

public String GetNavegacionColumnTablaTablasClasesRelacionadasC(TableSchema tablaRelacionada,TableSchema TablaBase) 
{
	String sColumna="";
	String strSufijoAutoReferenciada="";
	String strObjetoBean=GetObjetoBeanC(TablaBase);

	if(TablaBase.Name.Equals(tablaRelacionada.Name)) {
		//strSufijoAutoReferenciada=strAutoRef;
	}
				
	sColumna+="\r\n\r\n\t\t\tif(this.isTienePermisos"+GetNombreClaseC(tablaRelacionada.ToString())+" && "+strObjetoBean+".mostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+" && !"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.ISGUARDARREL) {";

	sColumna+="\r\n\t\t\t\ttableColumn= new TableColumn();\r\n";
	sColumna+="\t\t\t\ttableColumn.setIdentifier(\""+GetTituloNombreTableFromPropertiesC(tablaRelacionada)+GetPluralTituloNombreTableFromPropertiesC(tablaRelacionada)+"\");\r\n";
	sColumna+="\t\t\t\ttableColumn.setHeaderValue(\""+GetTituloNombreTableFromPropertiesC(tablaRelacionada)+GetPluralTituloNombreTableFromPropertiesC(tablaRelacionada)+"\");\r\n";
	sColumna+="\t\t\t\ttableColumn.setCellRenderer(new "+GetNombreClaseC(tablaRelacionada.ToString())+strSufijoAutoReferenciada+"TableCell("+GetNombreClaseObjetoC(TablaBase.ToString())+strConstantesFunciones+".resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+",this,"+strObjetoBean+".activar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"));\r\n";
	sColumna+="\t\t\t\ttableColumn.setCellEditor(new "+GetNombreClaseC(tablaRelacionada.ToString())+strSufijoAutoReferenciada+"TableCell("+GetNombreClaseObjetoC(TablaBase.ToString())+strConstantesFunciones+".resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+",this,"+strObjetoBean+".activar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"));\r\n\r\n";

	String strSwingWidthControlExtra =GetAnchoColumnTablaSwingExtraC(SWING_WIDTH_CONTROL,tablaRelacionada);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

	sColumna+="\t\t\t\ttableColumn.setPreferredWidth("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+");\r\n";//Constantes.ISWING_ANCHO_COLUMNA
	sColumna+="\t\t\t\ttableColumn.setWidth("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+");\r\n"; 	 
	sColumna+="\t\t\t\ttableColumn.setMinWidth("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+");\r\n\r\n"; 
					
	sColumna+="\t\t\t\tthis.iWidthTableDefinicion+="+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+";\r\n\r\n";
				
	sColumna+="\t\t\t\tthis.jTableDatos"+GetNombreClaseC(TablaBase.ToString())+".addColumn(tableColumn);";
	
	sColumna+="\r\n\t\t\t}";//IF
	
	return sColumna;
}

	public String GetNavegacionColumnTableCellTablasClasesRelacionadasControllerC(TableSchema table,TableSchema tablaRelacionada,CollectionInfo collectionInfo,bool inicializarSession,bool soloSession,bool esFuncionesGetSet,bool ConEjb,bool EsSwing) {
		String sNombrePakage=GetPackageTableFromProperties(tablaRelacionada);
		
		String sColumna="";
		
		String strNombreAdicional="";
		
		if(collectionInfo!=null) {
			GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
		}
		
		String strComentarioParaEjb="";
		String strComentarioAutoReferencia="";
		
		if(ConEjb){
			strComentarioParaEjb="//";
		}		
		
		if(!inicializarSession) {
			if(!esFuncionesGetSet) {
				if(!soloSession) {		
					//ES SWING POR DEFECTO
					if(tablaRelacionada.Name.Equals(table.Name)) {
						strComentarioAutoReferencia="//";						
					}
					
					sColumna+="\r\n\r\n\t"+strComentarioAutoReferencia+"public "+GetNombreClaseC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame "+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame=null;";
					sColumna+="\r\n\tpublic "+GetNombreClaseC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame "+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFramePopup=null;";
					sColumna+="\r\n\tpublic Boolean puedeCargarPorParte"+GetNombreClaseC(tablaRelacionada.ToString())+"=false;";
					
					if(!table.Name.Equals(tablaRelacionada.Name)) {
						sColumna+="\r\n\tpublic "+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+" "+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+";";
					}
				} else {	
					if(!table.Name.Equals(tablaRelacionada.Name)) {
						if(!EsSwing) {
							//sColumna+="\r\n\r\n\t@ManagedProperty(value=\"#{"+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+"}\")";
							sColumna+="\r\n\r\n\t@ManagedProperty(value="+GetNombreClaseC(tablaRelacionada.ToString())+"ConstantesFunciones.SSESSIONNAME_FACE)";
						}
										
						sColumna+="\r\n\tpublic "+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+" "+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+";";
					}
				}
			} else {
				if(!table.Name.Equals(tablaRelacionada.Name)) {
					sColumna+="\r\n\r\n\tpublic "+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+" get"+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+"() {";
					sColumna+="\r\n\t\treturn this."+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+";";
					sColumna+="\r\n\t}";
					
					sColumna+="\r\n\r\n\tpublic void set"+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+"("+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+" "+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+") {";
					sColumna+="\r\n\t\tthis."+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+"="+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+";";
					sColumna+="\r\n\t}";
				}
			}
		} else {
			//sColumna+="\r\n\t\tthis."+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame=new "+GetNombreClaseC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame();";
			
			if(EsSwing) {
				sColumna+="\r\n\t\t//this."+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+"=new "+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+"();";
			} else {
				sColumna+="\r\n\t\t\tthis."+GetNombreClaseObjetoC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+".inicializar"+GetNombreClaseC(tablaRelacionada.ToString())+strPrefijoJSFSessionFaces+"();";
			}
		}
		
		/*
		String strFuncionBusquedaEjbInit="\r\n\t\t\t\t//ARCHITECTURE";
	
		String strFuncionBusquedaEjbMiddle="\r\n\t\t\t\t} else if(Constantes.ISUSAEJBREMOTE) {";
		
		String strFuncionBusquedaEjbEnd="\r\n\t\t\t\t}";
	
		
	
		sColumna+="\t\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame.cargarCombos"+strForeignKey+GetNombreClaseC(tablaRelacionada.ToString())+"();\r\n";
		sColumna+="\t\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame.setVisibilidadBusquedasPara"+GetNombreClaseC(TablaBase.ToString())+"(true);\r\n";
		sColumna+="\t\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame.cargarCombosFrame"+strForeignKey+GetNombreClaseC(tablaRelacionada.ToString())+"();\r\n";
		
		sColumna+="\t\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame.procesarBusqueda(\""+strFK+"_"+strIdGetSet+GetNombreClaseC(TablaBase.ToString())+"\");\r\n";
		sColumna+="\t\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame.setsAccionBusqueda(\""+strFK+"_"+strIdGetSet+GetNombreClaseC(TablaBase.ToString())+"\");\r\n";	
		sColumna+="\t\t\t\t\t"+GetNombreClaseObjetoC(tablaRelacionada.ToString())+"BeanSwingJInternalFrame.inicializarActualizarBindingTabla"+GetNombreClaseC(tablaRelacionada.ToString())+"();\r\n";
		*/
		
		return sColumna;
	}

	public String GetIndicesSetVariablesToPanelsTablasClasesC(TableSchema TablaBase,bool ConGroupLayout) {					
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n";strInitFuncion+="";
			bool blnExisteBusqueda=false;
			bool blnTieneIdColumnBusqueda=false;
			bool blnExisteBusquedaFkVariableGlobal=false;
			
			String strAddTabPanel=string.Empty;
			String strTabPanel=string.Empty;
			String strNombreTab=string.Empty;
			String strPanelesBusquedas=string.Empty;
			String strControlesPanelesBusquedas=string.Empty;
			
			String strinitialHorizontalGroup=string.Empty;
			String strinitialVerticalGroup=string.Empty;
			String strFinallHorizontalGroup=string.Empty;
			String strFinalVerticalGroup=string.Empty;
			String strComponentsHorizontalGroup=string.Empty;
			String strComponentsVerticalGroup=string.Empty;
			String strGroup=string.Empty;
			String strTituloBusqueda="";
						
			String strControlGridBagConstraints11="";strControlGridBagConstraints11+="";
			String strControlGridBagConstraints12="";strControlGridBagConstraints12+="";
			String strControlGridBagConstraints21="";strControlGridBagConstraints21+="";
			String strControlGridBagConstraints22="";strControlGridBagConstraints22+="";
			//String strControlGridBagConstraints31="";
			String strControlGridBagConstraints3="";strControlGridBagConstraints3+="";
			//String strControlGridBagConstraints41="";
			String strControlGridBagConstraints4="";strControlGridBagConstraints4+="";
			
			String strControlesGridBagConstraints="";
			String strControlesAcumGridBagConstraints="";
			String strGridBagConstraints="";
			
			strControlGridBagConstraints11="\r\n\t";//gridBagConstraints
			strControlGridBagConstraints12=" = new GridBagConstraints();";
			
			strControlGridBagConstraints21="gridBagConstraints";//\r\n\t
			strControlGridBagConstraints22=".fill = GridBagConstraints.VERTICAL;";
						
			//strControlGridBagConstraints31="\r\n\tgridBagConstraints";
			strControlGridBagConstraints3=".gridy = ";
			
			//strControlGridBagConstraints41="\r\n\tgridBagConstraints";
			strControlGridBagConstraints4=".gridx = ";
			
			//strControlGridBagConstraints="\r\n\r\n\tjPanelCampos"+GetNombreClaseC(table.ToString())+".add(BYDANCONTROLLABEL, gridBagConstraintsBYDANNOMBRELABEL);";
						
			String strInitialGridBag="";
			String strButtonControl="";
			String strButtonGridBag="";
			int intNumeroParametroBusqueda=0;intNumeroParametroBusqueda+=0;
			int intCountIndices=1;
			
			if(!GetNombresIndicesNoBusquedanFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)){	
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
				blnExisteBusquedaFkVariableGlobal=false;
				blnTieneIdColumnBusqueda=false;
				
				strInitialGridBag="";
				
				if(!indexSchema.IsPrimaryKey) {
					if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
						continue;
					}
					
					if(ConGroupLayout) {
						strinitialHorizontalGroup="\r\n\t\tGroupLayout jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout = new GroupLayout(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+");\r\n";
						strinitialHorizontalGroup+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.setAutoCreateContainerGaps(true);\r\n";
						strinitialHorizontalGroup+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.setAutoCreateGaps(true);\r\n";
						strinitialHorizontalGroup+="\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".setLayout(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout);\r\n";
						strinitialHorizontalGroup+="\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.setHorizontalGroup(\r\n";
						strinitialHorizontalGroup+="\t\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createParallelGroup(Alignment.LEADING)\r\n";
						strinitialHorizontalGroup+="\t\t\t.addGroup(Alignment.TRAILING, jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createSequentialGroup()\r\n";
						strinitialHorizontalGroup+="\t\t\t\t.addGroup(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createParallelGroup(Alignment.TRAILING)\r\n";
						strinitialHorizontalGroup+="\t\t\t\t\t.addComponent(jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+")\r\n";
						strinitialHorizontalGroup+="\t\t\t\t\t.addGroup(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createSequentialGroup()\r\n";
						
					
						strFinallHorizontalGroup="\t\t\t\t))\r\n";
						strFinallHorizontalGroup+="\t\t\t)\r\n";
						strFinallHorizontalGroup+="\t\t);\r\n";
						
						strinitialVerticalGroup="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.setVerticalGroup(\r\n";
						strinitialVerticalGroup+="\r\n\t\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createParallelGroup(Alignment.LEADING)\r\n";
						strinitialVerticalGroup+="\r\n\t\t\t.addGroup(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createSequentialGroup()\r\n";
						strinitialVerticalGroup+="\r\n\t\t\t.addGroup(jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"Layout.createParallelGroup(Alignment.BASELINE)\r\n";
				
						strFinalVerticalGroup="\r\n\t\t\t\t\t)\r\n";								
						strFinalVerticalGroup+="\r\n\t\t\t\t\t\t\t.addComponent(jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+")\r\n";
						strFinalVerticalGroup+="\r\n\t\t\t\t\t\t\t)\r\n";
						strFinalVerticalGroup+="\r\n\t\t\t\t\t);\r\n";
					} else {
						strInitialGridBag="\r\n\t\tGridBagLayout gridaBagLayout"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= new GridBagLayout();";	
						strInitialGridBag+="\r\n\t\tgridaBagLayout"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".rowHeights = new int[] {1};";
						strInitialGridBag+="\r\n\t\tgridaBagLayout"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".columnWidths = new int[] {1};";
						strInitialGridBag+="\r\n\t\tgridaBagLayout"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".rowWeights = new double[]{0.0, 0.0, 0.0};";
						strInitialGridBag+="\r\n\t\tgridaBagLayout"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".columnWeights = new double[]{0.0, 1.0};";

						strInitialGridBag+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".setLayout(gridaBagLayout"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+");";
						
						strButtonControl="jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString());
					}
					
					if(indexSchema.IsUnique) {
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
						continue;
					} else {						
						if(!blnExisteBusqueda) {
							blnExisteBusqueda=true;
							//strTabPanel="\r\n\t\tjTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+"=new JTabbedPane();\r\n";
						}
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK")) {
							//strPanelesBusquedas+="\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=new JPanel();\r\n";
							//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String strFinalQuery,";
						} else{
							//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
						}												
					}	
					
					strComponentsHorizontalGroup="";
					strComponentsVerticalGroup="";
					int count=1;	
					int intParametrosIndice=0;
					strControlesGridBagConstraints="";
					strControlesAcumGridBagConstraints="";
					strTituloBusqueda=intCountIndices+".-";
				
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {					
						if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual"))) {
							if(memberColumnSchema.Column.Name.Equals(strId)) {
								blnTieneIdColumnBusqueda=true;	
							}
							
							if(EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)
								|| EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)) {
								blnExisteBusquedaFkVariableGlobal=true;
								break;
							}
							
							//LABEL
							if(!ConGroupLayout) {
								strControlesGridBagConstraints="\r\n\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".anchor = GridBagConstraints.WEST;";
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".fill = GridBagConstraints.VERTICAL;";
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = "+intParametrosIndice.ToString()+";";
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = 0;";
								
								strControlesGridBagConstraints+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".add("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+", gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");";						
							}
										
							//strControlesPanelesBusquedas+="\t"+GetInicializacionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+"\r\n"; 
							
							strTituloBusqueda+=strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" ";
							
							if(ConGroupLayout) {
								strComponentsHorizontalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
								strComponentsHorizontalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE,  GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
								
								strComponentsVerticalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
								strComponentsVerticalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
															
							} else {
								//CONTROL
								strControlesGridBagConstraints+="\r\n\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".anchor = GridBagConstraints.WEST;";
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".fill = GridBagConstraints.VERTICAL;";
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = "+intParametrosIndice.ToString()+";";
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = 1;";
								
								strControlesGridBagConstraints+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".add("+GetNombreControlVariablesSwingInternoC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+", gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");\r\n";
							
							}
							
							
							//CUANDO ES RANGO
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,"TODOS")) {
										//AQUI AUMENTAR PARA INDICAR QUE ES LA FILA POSTERIOR DEL FINAL
										intParametrosIndice++;
										//LABEL RANGO FINAL
										if(!ConGroupLayout) {
											strControlesGridBagConstraints+="\r\n\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
											strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".anchor = GridBagConstraints.WEST;";
											strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".fill = GridBagConstraints.VERTICAL;";
											strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = "+intParametrosIndice.ToString()+";";
											strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = 0;";
											
											strControlesGridBagConstraints+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".add("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,strSufijoRangoFinal,memberColumnSchema.IsForeignKeyMember)+", gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");";						
										}
										
										strTituloBusqueda+=strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" "+strFinal;
							
										if(ConGroupLayout) {
											strComponentsHorizontalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
											strComponentsHorizontalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE,  GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
											
											strComponentsVerticalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
											strComponentsVerticalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
																		
										} else {
											//CONTROL
											strControlesGridBagConstraints+="\r\n\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
											strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".anchor = GridBagConstraints.WEST;";
											strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".fill = GridBagConstraints.VERTICAL;";
											strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = "+intParametrosIndice.ToString()+";";
											strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = 1;";
											
											strControlesGridBagConstraints+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".add("+GetNombreControlVariablesSwingInternoC(memberColumnSchema.Column,indexSchema.Name,strSufijoRangoFinal,memberColumnSchema.IsForeignKeyMember)+", gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");\r\n";
										
										}
										
										//Trace.WriteLine(strControlesGridBagConstraints);
									}
							//CUANDO ES RANGO
							
							if(GetBusquedaForeignKeyColumnFromPropertiesC(memberColumnSchema.Column)) {
								//CONTROL BOTON BUSQUEDA
								strControlesGridBagConstraints+="\r\n\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".anchor = GridBagConstraints.EAST;";//WEST
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".fill = GridBagConstraints.NONE;";//HORIZONTAL,VERTICAL
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = "+intParametrosIndice.ToString()+";";
								strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = 0;";
											
								strControlesGridBagConstraints+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".add(this.jButtonBuscar"+indexSchema.Name+GetNombreColumnaClaseC(memberColumnSchema.Column)+GetNombreClaseC(TablaBase.ToString())+", gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");\r\n";										
							}
							
							strControlesAcumGridBagConstraints+=strControlesGridBagConstraints;
							
							if(!indexSchema.MemberColumns.Count.Equals(count)) {
								//strInitFuncion+=";\r\n";	
							}
							
							//AQUI AUMENTAR PARA INDICAR QUE ES LA FILA POSTERIOR
							intParametrosIndice++;
							
						} else {
							if(!indexSchema.Name.Contains("BusquedaRango")) {
								//LABEL
								if(!ConGroupLayout) {
									strControlesGridBagConstraints="\r\n\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".anchor = GridBagConstraints.WEST;";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".fill = GridBagConstraints.VERTICAL;";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = "+intParametrosIndice.ToString()+";";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = 0;";
									
									strControlesGridBagConstraints+="\r\n\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".add("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+", gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");";						
								}
								
								strTituloBusqueda+=strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" ";
							
								if(ConGroupLayout) {
									strComponentsHorizontalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
									strComponentsHorizontalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
									
									strComponentsVerticalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
									strComponentsVerticalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
															
								}  else {
									//CONTROL
									strControlesGridBagConstraints+="\r\n\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".anchor = GridBagConstraints.WEST;";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".fill = GridBagConstraints.VERTICAL;";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = "+intParametrosIndice.ToString()+";";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = 1;";
									
									strControlesGridBagConstraints+="\r\n\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".add("+GetNombreControlVariablesSwingInternoC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+", gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");";								
								}
								
								strControlesAcumGridBagConstraints+=strControlesGridBagConstraints;
								
								//AQUI AUMENTAR PARA INDICAR QUE ES LA FILA POSTERIOR
								intParametrosIndice++;
								
							} else {
								strTituloBusqueda+=strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" "+strFinal;
								
								if(ConGroupLayout) {
									strComponentsHorizontalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Inicial",false)+", GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
									strComponentsHorizontalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Inicial")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
									
									strTituloBusqueda+=strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" INICIAL ";
									
									strComponentsVerticalGroup+=".addComponent("+GetNombreTituloControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Final",false)+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
									strComponentsVerticalGroup+=".addComponent("+GetNombreControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Final")+",GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\r\n";
																
								}   else {									
									//CONTROLES
									strControlesGridBagConstraints="\r\n\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".anchor = GridBagConstraints.WEST;";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".fill = GridBagConstraints.VERTICAL;";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = "+intParametrosIndice.ToString()+";";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = 1;";
									
									strControlesGridBagConstraints+="\r\n\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".add("+GetNombreControlVariablesSwingInternoC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+", gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");";
									
									//AQUI AUMENTAR PARA INDICAR QUE ES LA FILA POSTERIOR
									intParametrosIndice++;
							
									strControlesGridBagConstraints="\r\n\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".anchor= GridBagConstraints.WEST;";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".fill = GridBagConstraints.VERTICAL;";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = "+intParametrosIndice.ToString()+";";
									strControlesGridBagConstraints+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx = 1;";
									
									strControlesGridBagConstraints+="\r\n\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".add("+GetNombreControlVariablesSwingInternoC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+", gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");";
									
									//AQUI AUMENTAR PARA INDICAR QUE ES LA FILA POSTERIOR
									intParametrosIndice++;
								}
								
								strControlesAcumGridBagConstraints+=strControlesGridBagConstraints;
								 
								break;
							}												
						}
						
						count++;
					}
					
					if(blnExisteBusquedaFkVariableGlobal) {
						continue;	
					}
					//strInitFuncion+=")throws Exception;";	
																
					if(!ConGroupLayout) {
						strButtonGridBag="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+" = new GridBagConstraints();";
						strButtonGridBag+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".anchor = GridBagConstraints.WEST;";
						strButtonGridBag+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".fill = GridBagConstraints.VERTICAL;";
						strButtonGridBag+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridy = "+intParametrosIndice.ToString()+";";
						strButtonGridBag+="\r\n\t\tgridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+".gridx =1;";
						
						strButtonGridBag+="\r\n\t\tjPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+".add("+strButtonControl+", gridBagConstraints"+GetNombreClaseC(TablaBase.ToString())+");";
					}
					
					if(blnTieneIdColumnBusqueda && blnEsProceso) {
						strTituloBusqueda=strProcesar;
					}
					
					int intCountIndicesAnterior=intCountIndices-1;
					
					strAddTabPanel="\r\n\r\n\t\tjTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".addTab(\""+strTituloBusqueda+"\", jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+");\r\n";
					
					//SOLO HAY HASTA 9, Y NO VALE IGUAL
					if(intCountIndices<=9) {
						strAddTabPanel+="\t\tjTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setMnemonicAt("+intCountIndicesAnterior+", KeyEvent.VK_"+intCountIndices+");\r\n";
					}
					
					if(ConGroupLayout) {						
						strGroup+=strinitialHorizontalGroup+strComponentsHorizontalGroup+strFinallHorizontalGroup+strinitialVerticalGroup+strComponentsVerticalGroup+strFinalVerticalGroup+strAddTabPanel;
					} else {
						strGridBagConstraints+=strInitialGridBag+strControlesAcumGridBagConstraints+strButtonGridBag+strAddTabPanel;	
					}
				}
				
				intCountIndices++;
			}//INDESX SCHEMA
			}
						
			//strInitFuncion=strTabPanel+strPanelesBusquedas+strControlesPanelesBusquedas;	
			String strReturn="";
			
			if(ConGroupLayout) {
				strReturn=strGroup;
			} else {
				strReturn=strGridBagConstraints;
			}
			
			return strReturn; 
	}
	
	public String GetElementosSwingTablaClaseC(TableSchema TablaBase) {
		String strSwing="";
		
		strSwing=GetElementosSwingTablaClaseC(TablaBase,false);
		
		return strSwing;
	}
	
	public String GetElementosSwingTablaClaseC(TableSchema TablaBase,bool esTablaParametros) {
		String strSwing="";
			
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing+=GetControlVariablesSwingC(TablaBase.Columns[i],false,esTablaParametros);
			}
		}			
		
		return strSwing;
	}

	public String GetElementosSwingTablaClaseParametrosC(TableSchema TablaBase) {
		String strSwing="";
			
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				strSwing+=GetElementosSwingTablaClaseC(tableSchema,true);
			}
		}		
		
		return strSwing;
	}


	public String GetElementosSwingTablaClaseForeigKeysC(TableSchema TablaBase,bool esTablaParametros) {
			String strSwing="";
			
			if(!blnNoStandardTableFromProperties) {		
				foreach(ColumnSchema column in TablaBase.Columns) {
					if(column.IsForeignKeyMember) {
						strSwing+=GetControlVariablesSwingC(column,true,esTablaParametros);						
					}
				}			
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
				String strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,null);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";				
				String strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,null);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {					
					strSwing+="jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+"= new JComboBoxMe();\r\n";
					strSwing+="jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
					strSwing+="jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
					strSwing+="jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));";
					strSwing+="jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+".setEnabled(false);\r\n";							
					
					strSwing+="\r\nFuncionesSwing.setBoldComboBox(jComboBox"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(TablaBase.ToString())+",STIPO_TAMANIO_GENERAL,false,false,this);\r\n";
					
				}
			}
			
			return strSwing;
	}
	
	public String GetElementosSwingTablaClaseForeigKeysParametrosC(TableSchema TablaBase) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				strSwing+=GetElementosSwingTablaClaseForeigKeysC(tableSchema,true);
			}
		}
		
		return strSwing;
	}
	
	public String GetWebRowPaginacionYNuevoTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool esParaReportes,bool ConFaces,bool ConRichFaces,String RichFaces_Version) {
			String strHtml="";
			String strPaginacionUnoAUno="";
			
			if(blnEsTablaUnoAUnoFk) {
				strPaginacionUnoAUno=" style=\"display:none\"";
			}
			
			String strCssStyleBusquedaFK="";
			
			if(esParaForeignKey) {
				strCssStyleBusquedaFK=" style=\"display:none\" ";
			}
			
			strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Paginacion\""+strCssStyleBusquedaFK+">";
			strHtml+="\r\n\t\t\t<td align=\"center\">";
			
			if(ConFaces||ConRichFaces) {				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t<h:form>";
				} else {
					//if(EsVersionRichFaces3C(RichFaces_Version)){
						strHtml+="\r\n\t\t\t\t"+strWebFormInit+"  id=\"frmPaginacion"+GetNombreClaseC(TablaBase.ToString())+"\">";
					//}
					
					strHtml+="\r\n\t\t\t\t<rich:panel id=\"richPanel"+GetNombreClaseC(TablaBase.ToString())+"Paginacion"+strAjaxWebPart+"\">";
				}
			}
			
			strHtml+="\r\n\r\n\t\t\t\t<table width=\"100\"  align=\""+GetAlignTableFromPropertiesC(TablaBase)+"\">";
			strHtml+="\r\n\t\t\t\t\t<tr"+strPaginacionUnoAUno +">";
			strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
			
			String strObjectFace="";
			String strValueFace="";strValueFace+="";
				
			if(ConFaces||ConRichFaces) {
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
				
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="<br><a:widget id=\"btndjdjtAnteriores"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: '<<'}\" />";
			} else {
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
					strHtml+="\r\n\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtAnteriores"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".anteriores}\"  value=\"<<\" />";
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
					strHtml+="\r\n\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtAnteriores"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".anteriores"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\"  value=\"ANT\"  "+strReRender+"=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.anteriores"+GetNombreClaseC(TablaBase.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.anteriores"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete()\"/>";
				}								
			}
			
			strHtml+="\r\n\t\t\t\t\t\t</td>";
			
			
			//NUEVO GUARDAR
			strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
			
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="<br><a:widget id=\"btndjdjtNuevoGuardar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: '<<'}\" />";
			} else {
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
					strHtml+="\r\n\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtNuevoGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".anteriores}\"  value=\"<<\" />";
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
					strHtml+="\r\n\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtNuevoGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".nuevoGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\"  value=\"NUE\" rendered=\"#{!"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\"  "+strReRender+"=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";
				}								
			}
			strHtml+="\r\n\t\t\t\t\t\t</td>";
			//NUEVO GUARDAR FIN
			
			
			//SIGUIENTES
			strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
						
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="<br><a:widget id=\"btndjdjtSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: '>>'}\" />";
			} else {				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
					strHtml+="\r\n\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".siguientes}\"  value=\">>\" />";
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
					strHtml+="\r\n\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtSiguientes"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".siguientes"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\"  value=\"SIG\" "+strReRender+"=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.siguientes"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete()\"/>";
				}	
			}
						
			strHtml+="\r\n\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t</tr>";
					
								
			if(!esParaForeignKey&&!esParaReportes&&GetPermiteInsertarFromPropertiesC(TablaBase)) {
				strHtml+="\r\n\t\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Nuevo\" height=\"10\">";
			} else {
				strHtml+="\r\n\t\t\t\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Nuevo\" height=\"10\" style=\"display:none\">";
			} 
			
			//strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
			
			if(!ConFaces&&!ConRichFaces) {
				if(esMantenimientoSimple) {
					//strHtml+="<img id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:hidden\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/insertar.gif\" width=\"20\" height=\"20\"  onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.nuevo"+GetNombreClaseC(TablaBase.ToString())+"Mostrar()\"/>";
					strHtml+="\r\n\t\t\t\t\t\t<td id=\"tdbtnModificarDatos"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"center\">";
					strHtml+="<a:widget id=\"btndjdjtModificarDatos"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: 'MODIFICAR'}\"/>";
					strHtml+="\r\n\t\t\t\t\t\t</td>";	
					strHtml+="\r\n\t\t\t\t\t\t<td id=\"tdbtnNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"center\" style=\"visibility:hidden\">";
					strHtml+="<a:widget id=\"btndjdjtNuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: 'NUEVO'}\"/>";	
					strHtml+="\r\n\t\t\t\t\t\t</td>";	
					
				} else if(!esParaReportes) {
					strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
					strHtml+="<img id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"center\" style=\"visibility:visible\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/insertar.gif\" width=\"20\" height=\"20\"  onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccionRelacion.nuevo"+GetNombreClaseC(TablaBase.ToString())+"MostrarRelaciones()\"/>";
					strHtml+="<a:widget id=\"btndjdjtNuevoPrepararRelaciones"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: 'ACTUALIZAR'}\"";
					strHtml+="\r\n\t\t\t\t\t\t</td>";
				}
			} else {
				if(!ConRichFaces) {
					if(esMantenimientoSimple) {
						strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
						strHtml+="\r\n\t\t\t\t\t\t\t<h:commandButton id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".nuevo"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\" image=\""+GetRelativePathC(TablaBase)+"Imagenes/insertar.gif\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.nuevo"+GetNombreClaseC(TablaBase.ToString())+"Mostrar()\"/>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
					} else if(!esParaReportes) {
							
						strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
						strHtml+="\r\n\t\t\t\t\t\t\t<h:commandButton id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".nuevoPrepararRelaciones}\" image=\""+GetRelativePathC(TablaBase)+"Imagenes/insertar.gif\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccionRelacion.nuevo"+GetNombreClaseC(TablaBase.ToString())+"MostrarRelaciones()\"/>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
					}
				} else {
					if(esMantenimientoSimple) {
						strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
						strHtml+="\r\n\t\t\t\t\t\t\t<a4j:commandButton id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".nuevo"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\" rendered=\"#{"+strObjectFace+".isPermisoNuevo"+GetNombreClaseC(TablaBase.ToString())+" and !"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\" image=\""+GetRelativePathC(TablaBase)+"Imagenes/insertar.gif\" value=\"NUEVO\" "+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+",frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.nuevoPreparar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\"/>";//,frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						
					} else if(!esParaReportes) {							
						strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
						strHtml+="\r\n\t\t\t\t\t\t\t<a4j:commandButton id=\"imgNuevo"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".nuevoPrepararRelaciones}\" image=\""+GetRelativePathC(TablaBase)+"Imagenes/insertar.gif\" value=\"NUEVO\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccionRelacion.nuevo"+GetNombreClaseC(TablaBase.ToString())+"MostrarRelaciones()\"/>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
					}
				}									
			}
				
			
			//GUARDAR CAMBIOS
			strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
			
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="<br><a:widget id=\"btndjdjtGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: '<<'}\" />";
			} else {
				if(!ConRichFaces) {
					//strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
					strHtml+="\r\n\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".anteriores}\"  value=\"<<\" />";
				} else {
					//strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
					strHtml+="\r\n\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".guardarCambios"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\"  value=\"GUARDAR\" rendered=\"#{"+strTemporalWebNoActualizarDatos+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+".isPermisoGuardarCambios"+GetNombreClaseC(TablaBase.ToString())+" and !"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\" "+strReRender+"=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\"if (#{"+GetNombreClaseObjetoC(TablaBase.ToString())+"RequestBean.maximumSeverity==-1}){"+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnClick();}\" oncomplete=\"if (#{"+GetNombreClaseObjetoC(TablaBase.ToString())+"RequestBean.maximumSeverity!=-1 and "+GetNombreClaseObjetoC(TablaBase.ToString())+"RequestBean.maximumSeverity!=2}){"+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete();}\"/>";
				}								
			}
			strHtml+="\r\n\t\t\t\t\t\t</td>";
			//GUARDAR CAMBIOS
			
			//CERRAR
			strHtml+="\r\n\t\t\t\t\t\t<td align=\"center\">";
			
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="<br><a:widget id=\"btndjdjtCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+strRelaciones+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strGuardarCambios+"'}\" />";
			} else {
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+"\" value=\""+strGuardarCambios+"\"/>";//action=\"#{"+strObjectFace+".guardarCambios}\" 
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtCerrarPagina"+GetNombreClaseC(TablaBase.ToString())+"\" value=\""+strCerrar+"\" rendered=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".esGuardarRelacionado}\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(TablaBase.ToString())+"()\" oncomplete=\"funcionGeneral.cerrarPagina()\"/>";// action=\"#{"+strObjectFace+".guardarCambios}\" 
				}				
			}
			strHtml+="\r\n\t\t\t\t\t\t</td>";
			//CERRAR			
			
			
			
			//strHtml+="\r\n\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t</tr>";
			strHtml+="\r\n\t\t\t\t</table>";
			
			if(ConFaces||ConRichFaces) {				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t</h:form>";
				} else {
					strHtml+="\r\n\r\n\t\t\t\t</rich:panel>";
					
					//if(EsVersionRichFaces3C(RichFaces_Version)){
						strHtml+="\r\n\t\t\t\t"+strWebFormEnd+">";
					//}
				}	
			}
			
			strHtml+="\r\n\t\t\t</td>";
			strHtml+="\r\n\t\t</tr>";
									
			if(!esMantenimientoSimple&&!esParaReportes) {
				strHtml+="\r\n\t\t<tr class=\"busquedacabecera\">";
				strHtml+="\r\n\t\t\t<td>";
				strHtml+="\r\n\t\t\t\t<img id=\"imgExpandirContraerRowElementos"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"left\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/xcollapse.png\" width=\"20\" height=\"20\"  onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccionRelacion.mostrarOcultarFilas"+GetNombreClaseC(TablaBase.ToString())+"()\"><h1>"+GetTituloNombreTableFromPropertiesC(TablaBase)+"</h1>";
				strHtml+="\r\n\t\t\t</td>";
				strHtml+="\r\n\t\t</tr>";
			}
		
		return strHtml;
	}
		
		//CUANDO ES BUSQUEDAINTERNA
		//,TableSchema TablaBasePadre,ColumnSchema columnSchemaPadre
		public String GetWebRowTablaDatosTablaClaseC(TableSchema TablaBase,TableSchema TablaBasePadre,ColumnSchema columnSchemaPadre,bool esMantenimientoSimple,bool esParaForeignKey,TableSchema TablaBasePadreFK,bool esParaReportes,bool esMantenimientoDeImagen,bool ConFaces,bool ConRichFaces,String RichFaces_Version) 
		{
			String strHtml="";
			
			String strPrefijo="";
			//System.Windows.Forms.MessageBox.Show(ConFaces.ToString());
			//System.Windows.Forms.MessageBox.Show(ConRichFaces.ToString());
			
			String strExtensionPagina="jsp";
			
			if(ConFaces||ConRichFaces)
			{
				strPrefijo=strPrefijoFace;
				strExtensionPagina="jsf";
			}
			
			if(ConRichFaces) {
				strHtml+="\r\n\t\t<tr>";
				strHtml+="\r\n\t\t\t<td colspan=\"3\">";
				
				if(!esParaForeignKey) {
					strHtml+="\r\n\t\t\t\t<rich:panel id=\"mensajes"+GetNombreClaseC(TablaBase.ToString())+"\">";					
					strHtml+="\r\n\t\t\t\t\t<rich:message id=\"message"+GetNombreClaseC(TablaBase.ToString())+"\" for=\"mensajes"+GetNombreClaseC(TablaBase.ToString())+"\" showDetail=\"true\" showSummary=\"true\" styleClass=\"#{"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+".sCssClassMensaje}\"/>";
					strHtml+="\r\n\t\t\t\t</rich:panel>";
					
					//if(EsVersionRichFaces3C(RichFaces_Version)){
						strHtml+="\r\n\r\n\t\t\t\t"+strWebFormInit+" id=\"frmMensajes"+GetNombreClaseC(TablaBase.ToString())+"\">";
					//}
					
					strHtml+="\r\n\t\t\t\t\t<rich:panel id=\"auxiliar"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"display:none\">";					
					strHtml+="\r\n\t\t\t\t\t\t<h:inputHidden id=\"hdnAuxiliarUrlPagina"+GetNombreClaseC(TablaBase.ToString())+"\"  value=\"#{"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+".sAuxiliarUrlPagina}\"/>";
					strHtml+="\r\n\t\t\t\t\t</rich:panel>";
					
					//if(EsVersionRichFaces3C(RichFaces_Version)){
						strHtml+="\r\n\t\t\t\t"+strWebFormEnd+"";
					//}
				}
				
				strHtml+="\r\n\t\t\t</td>";
				strHtml+="\r\n\t\t</tr>";
			} else {
				strHtml+="\r\n\t\t\t<tr><td colspan=\"3\">";
				strHtml+="\r\n\t\t\t<h:panel id=\"mensajes\">";
				strHtml+="\r\n\t\t\t\t<h:message id=\"mensaje\" for=\"mensajes\" showDetail=\"true\" showSummary=\"true\"/>";
				strHtml+="\r\n\t\t\t</h:panel>";
				strHtml+="\r\n\t\t\t</td>";
				strHtml+="\r\n\t\t</tr>";
			}
			
			String strCssStyleBusquedaFK="";
			String strTablaNavegacion="";
			
			if(esParaForeignKey) {
				strCssStyleBusquedaFK=" style=\"display:none\" ";
				strTablaNavegacion=GetNombreClaseC(TablaBasePadre.ToString());
			} else {
				strTablaNavegacion=GetNombreClaseC(TablaBase.ToString());
			}
			
			strHtml+="\r\n\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"TablaNavegacion\""+strCssStyleBusquedaFK+">";
			strHtml+="\r\n\t\t\t<td align=\"left\">";			
			strHtml+="\r\n\t\t\t\t<img id=\"imgTablaParaDerecha"+GetNombreClaseC(TablaBase.ToString())+"\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/expand.gif\" width=\"15\" height=\"15\"  onclick=\"document.location.href='Mantenimiento"+strTablaNavegacion+"."+strExtensionPagina+"#TablaDerecha"+GetNombreClaseC(TablaBase.ToString())+"'\"/>";
			strHtml+="\r\n\t\t\t\t<a name=\"TablaIzquierda"+GetNombreClaseC(TablaBase.ToString())+"\"></a>";
			strHtml+="\r\n\t\t\t</td>";
			strHtml+="\r\n\t\t\t<td colspan=\"2\" align=\"right\">";
			strHtml+="\r\n\t\t\t\t<img id=\"imgTablaParaIzquierda"+GetNombreClaseC(TablaBase.ToString())+"\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/collapse.gif\" width=\"15\" height=\"15\"  onclick=\"document.location.href='Mantenimiento"+strTablaNavegacion+"."+strExtensionPagina+"#TablaIzquierda"+GetNombreClaseC(TablaBase.ToString())+"'\"/>";
			strHtml+="\r\n\t\t\t\t<a name=\"TablaDerecha"+GetNombreClaseC(TablaBase.ToString())+"\"></a>";
			strHtml+="\r\n\t\t\t</td>";
			strHtml+="\r\n\t\t</tr>\r\n";
			
			strHtml+="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"TablaDatos\""+strCssStyleBusquedaFK+">";
			
			
			if(!esParaForeignKey)
			{
				strHtml+="\r\n\t\t\t<td colspan=\"3\" id=\"htmlTableCell"+GetNombreClaseC(TablaBase.ToString())+"\">";
			} 
			else
			{
				strHtml+="\r\n\t\t\t<td colspan=\"3\" id=\"htmlTableCell"+GetNombreClaseC(TablaBase.ToString())+"\">";
			} 
			
				
			if(!ConFaces&&!ConRichFaces)
			{
				//strHtml+="<a:widget id=\"djtbl"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"yahoo.dataTable\" value=\"{columns:[";   
				
				if(!esParaReportes)
				{
					if(!esParaForeignKey)
					{
						//strHtml+="{ label :'', id :'"+strEdicion+"'},";
					}
					else
					{
						//strHtml+="{ label :'', id :'"+strSeleccion+"'},";
					}
				}
				else
				{
					//strHtml+="{ label :'', id :'id'},";
				}
				
				/*
				for (int i = 0; i < TablaBase.Columns.Count; i++)
				{
				
					strHtml+=GetColumnsTableMaintenanceC(TablaBase.Columns[i],esMantenimientoDeImagen);
				
					if((i!=TablaBase.Columns.Count-1)&&TablaBase.Columns[i].Name!=strId&&TablaBase.Columns[i].Name!=strIsActive&&TablaBase.Columns[i].Name!=strIsExpired&&TablaBase.Columns[i].Name!=strVersionRow)
					{
						strHtml+=",";
					} 
				}
				*/
				if(esMantenimientoSimple)
				{
					//strHtml+=GetNavegacionTituloTablaTablasClasesRelacionadasC(TablaBase);
					//strHtml+=GetActionsTableMaintenanceC(TablaBase);
				}
				
				//strHtml+="],rows : [";			
				//strHtml+="]}\"/>";
			}
			else
			{
				String strObjectFace="";
			
				//System.Windows.Forms.MessageBox.Show(ConFaces.ToString());
				//System.Windows.Forms.MessageBox.Show(ConRichFaces.ToString());
			
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
						
				if(ConFaces) {
					//rendered=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel.rowCount > 0}\" 
					strHtml+="\r\n\r\n\t\t\t\t<h:form>\r\n\t\t\t\t<h:dataTable id=\"jsfTable"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel}\" var=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"\">";
				} else {
					//rendered=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel.rowCount > 0}\" 
					//if(EsVersionRichFaces3C(RichFaces_Version)){
						strHtml+="\r\n\r\n\t\t\t\t"+strWebFormInit+" id=\"frmTablaDatos"+GetNombreClaseC(TablaBase.ToString())+"\">";
					//}
					
					strHtml+="\r\n\t\t\t\t<rich:panel id=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\">";//rendered=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel.rowCount>0}\"
					strHtml+="\r\n\r\n\t\t\t\t<f:facet name=\"header\">";
					strHtml+="\r\n\t\t\t\t\t<h:outputText value=\""+GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+"\"/>";
					strHtml+="\r\n\t\t\t\t\t<br></br>";
					strHtml+="\r\n\t\t\t\t\t<span class=\"elementotitulocampo\">Editar Tabla</span>";
					strHtml+="\r\n\t\t\t\t\t<h:selectBooleanCheckbox id=\"chbEditarEnTabla"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+strObjectFace+".isEditarEnTabla}\" disabled=\"false\">";
					strHtml+="\r\n\t\t\t\t\t\t<a4j:ajax event=\"change\" execute=\"@form\" listener=\"#{"+strObjectFace+".ejecutarAuxiliar"+GetNombreClaseC(TablaBase.ToString())+"ParaAjaxPostBack}\" render=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"sAjaxWebPart\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(TablaBase.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(TablaBase.ToString())+"();\"/>";
					strHtml+="\r\n\t\t\t\t\t</h:selectBooleanCheckbox>\r\n";
					strHtml+="\r\n\t\t\t\t</f:facet>";
					strHtml+="\r\n\r\n\t\t\t\t<rich:dataTable id=\"richDataTable"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel}\" var=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"\"  rendered=\"#{"+strObjectFace+".isPermisoConsulta"+GetNombreClaseC(TablaBase.ToString())+"}\" rowKeyVar=\"rowkey\">";
				}
				
				//System.Windows.Forms.MessageBox.Show(strHtml);
				//blnNoStandardTableFromProperties=true;
				if(blnNoStandardTableFromProperties) {
					strHtml+="\r\n\t\t\t\t\t<rich:column>\r\n\t\t\t\t\t\t<f:facet name=\"header\"><h:outputText value=\" \"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
					strHtml+="\r\n\t\t\t\t\t\t<a4j:region>\r\n";
					strHtml+="\t\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+".seleccionar}\" image=\"/Imagenes/seleccionar.gif\" value=\"SELECCIONAR\" "+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+",frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.seleccionar"+GetNombreClaseC(TablaBase.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.seleccionar"+GetNombreClaseC(TablaBase.ToString())+"OnComplete()\">\r\n";//,frmMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"
					//strHtml+="\t\t\t\t\t\t\t\t<rich:componentControl target=\"modalPanel"+GetNombreClaseC(TablaBase.ToString())+"\" operation=\"show\" />\r\n";
					strHtml+="\t\t\t\t\t\t\t</a4j:commandButton>\r\n";
					strHtml+="\t\t\t\t\t\t</a4j:region>\r\n";
					strHtml+="\t\t\t\t\t</rich:column>\r\n";
				}
				
				for (int i = 0; i < TablaBase.Columns.Count; i++)
				{
					if(GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])) { continue; }
					
					
					//PARA TRAER FK COLUMNA DESCRIPCION EN TABLA NOSTANDARD SI FUERA EL CASO
					//if(blnNoStandardTableFromProperties) {	
					//	strHtml+=GetColumnsFacesClasesRelacionadasForeigKeysC(TablaBase,ConRichFaces);
					//}
					
					strHtml+=GetColumnsFacesTableMaintenanceC(TablaBase.Columns[i],TablaBasePadre,columnSchemaPadre,esParaForeignKey,TablaBasePadreFK,esMantenimientoDeImagen,ConFaces,ConRichFaces,RichFaces_Version);
				
				
					/*
					if((i!=TablaBase.Columns.Count-1)&&TablaBase.Columns[i].Name!=strId&&TablaBase.Columns[i].Name!=strIsActive&&TablaBase.Columns[i].Name!=strIsExpired&&TablaBase.Columns[i].Name!=strVersionRow)
					{
						strHtml+=",";
					} 
					*/
				}
				
				if(esMantenimientoSimple)
				{
					strHtml+=GetNavegacionTituloTablaFacesTablasClasesRelacionadasC(TablaBase,esParaForeignKey,ConFaces,ConRichFaces);
				}
				
				if(ConFaces) {
					strHtml+="\r\n\t\t\t\t</h:dataTable>\r\n\t\t\t\t</h:form>";
				} else {
					strHtml+="\r\n\r\n\t\t\t\t</rich:dataTable>";
					strHtml+="\r\n\t\t\t\t</rich:panel>";
					
					//if(EsVersionRichFaces3C(RichFaces_Version)){
						strHtml+="\r\n\t\t\t\t"+strWebFormEnd+"";
					//}
				}
			}
			
			strHtml+="\r\n\t\t\t</td>";   
			strHtml+="\r\n\t\t</tr>";
			
			return strHtml;
		}
		
		//PARA TRAER FK COLUMNA DESCRIPCION EN TABLA NOSTANDARD SI FUERA EL CASO
		/*
		public String GetColumnsFacesClasesRelacionadasForeigKeysC(TableSchema tableSchema,bool ConRichFaces) 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strTipo=GetTipoColumnaClaseC(column);	
			String strPrefijo=GetPrefijoTipoC(column);	
			String strColumna=GetNombreColumnaClaseC(column);
				
			String strPrefijoCampo="";
			
			strPrefijoCampo=GetPrefijoTablaC().ToLower();
			
			String strColumnName=GetNombreClaseObjetoC(column.Table.ToString())+"."+strPrefijoCampo+strPrefijo+strColumna;
			String strColumnLabel=""+GetWebNombreTituloColumnFromPropertiesC(column)+"";
			String strColumn="";
			
			String strPrefijoColumna="h";
			String strOcultarColumna="";
	
			//blnNoStandardTableFromProperties=true;
			if(blnNoStandardTableFromProperties) {										
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(tableSchema);
								
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					strColumna="";
					strColumn="";
					strColumnName="";
					
					strColumna= GetNombreClaseC(tableSchemaForeignKey.ToString());
					strColumna=strColumna.Replace(strId,"");
					strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
						
					
					
					//PARA FOREIGN KEY USAR DESCRIPCION
					//SI SE QUIERE USAR LO ANTERIOR SIMPLEMENTE COMENTAR LA LINEA
					strColumnName=GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(tableSchemaForeignKey.ToString())+strDescripcion;
					
					
					if(!ConRichFaces) {	
						strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
					} else {
						strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column sortBy=\"#{"+strColumnName+"}\""+strOcultarColumna+">\r\n";//strId
					}
					
					
					
					strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\""+strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
					strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"#{"+strColumnName+"}\"/>\r\n";
					strColumn+="\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}
		*/
		
public String GetWebRowParametrosBusquedaTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool esParaReportes,bool esBusquedaDesdeForeignKey,bool ConFaces,bool ConRichFaces,String RichFaces_Version) {
			String strHtml="";
			strHtml+="<tr class=\"busqueda\">";
			strHtml+="\r\n\t\t\t<td>";
			
			String strObjectFace="";
			
			if(ConFaces||ConRichFaces) {
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
			
			strHtml+="\r\n\t\t\t\t<div align=\"left\">";
			strHtml+="\r\n\t\t\t\t\t<img id=\"imgIrControlesSecciones"+GetNombreClaseC(TablaBase.ToString())+"\" style=\"visibility:visible\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/flechaarriba.gif\" width=\"15\" height=\"15\" onclick=\"funcionGeneral.irAreaDePagina('ControlesSecciones')\"/>";
			strHtml+="\r\n\t\t\t\t\t<a4j:commandButton id=\"imgIrAtras"+GetNombreClaseC(TablaBase.ToString())+"\" action=\"#{"+strObjectFace+".irA"+GetNombreClaseC(TablaBase.ToString())+"FkActual}\" image=\""+GetRelativePathC(TablaBase)+"Imagenes/atras.gif\" rendered=\"#{"+GetNombreClaseObjetoC(TablaBase.ToString())+"SessionBean.isPermiteNavegacionHaciaForeignKeyDesde"+GetNombreClaseC(TablaBase.ToString())+"}\"/>";
			strHtml+="\r\n\t\t\t\t</div>";
			
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="\r\n\r\n\t\t\t\t<form name=\"frmParametrosBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
			} else {		
				//SE ENVIA LOS PARAMETROS DE BUSQUEDA Y AUXILIARES EN UN SOLO FORMULARIO
				if(!ConRichFaces) {
					//strHtml+="\r\n\t\t\t\t<h:form id=\"frmParametrosBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";						
				} else {
					//strHtml+="\r\n\t\t\t\t<a4j:form id=\"frmParametrosBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";						
				}
			}
						
			//PAGINACION
			
			strHtml+="\r\n\r\n\t\t\t\t<table id=\"tblParametrosBusquedaNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"left\" cellpadding=\"0\" cellspacing=\"0\">";
			/*
			strHtml+="\r\n\t\t\t\t\t<tr id=\"trParametrosBusquedaNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\"  style=\"visibility:hidden;display:none\">";
			strHtml+="\r\n\t\t\t\t\t\t<td>";
			
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="\r\n\t\t\t\t\t\t\t<h1>"+strNumeroDe +GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+strAProcesar+":</h1>";
			} else {
				strHtml+="\r\n\t\t\t\t\t\t\t<h1><h:outputText value=\""+strNumeroDe +GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+strAProcesar+"\" rendered=\"#{"+strObjectFace+".isMostrarNumeroPaginacion}\"/></h1>";
			}
			
			strHtml+="\r\n\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t\t<td colspan=\"2\">";
			
			
			
			if(!ConFaces&&!ConRichFaces)
			{
				strHtml+="\r\n\t\t\t\t\t\t\t<input name=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" type=\"text\" size=\"5\" value=\"10\" onBlur=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.validarFormularioParametrosNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"()\">";
			}
			else
			{				
				if(!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t\t<h:inputText id=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" size=\"5\" value=\"#{"+strObjectFace+".iNumeroPaginacion}\" rendered=\"#{"+strObjectFace+".isMostrarNumeroPaginacion}\" />";
				} else {
					strHtml+="\r\n\t\t\t\t\t\t\t<h:inputText id=\"txtNumeroRegistros"+GetNombreClaseC(TablaBase.ToString())+"\" size=\"5\" value=\"#{"+strObjectFace+".iNumeroPaginacion}\" rendered=\"#{"+strObjectFace+".isMostrarNumeroPaginacion}\" />";
				}
			}
			
			
			strHtml+="\r\n\t\t\t\t\t\t</td>";
			strHtml+="\r\n\t\t\t\t\t</tr>";
			*/
			
			strHtml+="\r\n\r\n\t\t\t\t\t<tr id=\"trRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\">";
					
			String strRecargarInformacionVisibility="";
			
			if(GetEsReporteFromPropertiesC(TablaBase)) {
				strRecargarInformacionVisibility="style=\"display:none\"";
			}
			
			//CON O SIN INTERNO IGUAL EL CONTROL VIENE DE LA SESSION
			//if(!GetEsInternoFromPropertiesC(TablaBase)||esBusquedaDesdeForeignKey)
			//{
				if(!ConFaces&&!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t<td "+strRecargarInformacionVisibility+">";
					//strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
					strHtml+="\r\n\t\t\t\t\t\t\t<a:widget id=\"btndjdjtRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strRecargarInformacion+"'}\" />";
					strHtml+="\r\n\t\t\t\t\t\t</td>";
				} else {
					if(!ConRichFaces) {
						strHtml+="\r\n\t\t\t\t\t\t<td "+strRecargarInformacionVisibility+">";
						//strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
						strHtml+="\r\n\t\t\t\t\t\t\t<h:commandButton id=\"btndjdjtRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\"  action=\"#{"+strObjectFace+".recargarInformacion}\" value=\""+strRecargarInformacion+"\" />";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
					} else {
						strHtml+="\r\n\t\t\t\t\t\t<td "+strRecargarInformacionVisibility+">";
						//strHtml+="\r\n\t\t\t\t\t\t\t<br></br>";
						strHtml+="\r\n\t\t\t\t\t\t\t<a4j:commandButton id=\"btndjdjtRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"\"  action=\"#{"+strObjectFace+".recargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"ActionPerformed}\" value=\""+strRecargarInformacion+"\" rendered=\"#{"+GetNombreClaseObjetoC(TablaBase.ToString())+"SessionBean.isPermiteRecargarInformacion}\" "+strReRender+"=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete()\"/>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						
						//PAGINACION
						strHtml+="\r\n\t\t\t\t\t\t<td>";
						strHtml+="\r\n\t\t\t\t\t\t\t<h:selectOneMenu id=\"djcmbTiposPaginacion"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+GetNombreClaseObjetoC(TablaBase.ToString())+"RequestBean.sTipoPaginacion}\"  rendered=\"#{"+GetNombreClaseObjetoC(TablaBase.ToString())+"RequestBean.isPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+"}\">";
						strHtml+="\r\n\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+GetNombreClaseObjetoC(TablaBase.ToString())+"RequestBean.tiposPaginacion}\"/>";
						strHtml+="\r\n\t\t\t\t\t\t\t</h:selectOneMenu>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
					}					
				}								
			//}
			
			if((esMantenimientoSimple&&!esParaForeignKey)||esParaReportes) {			
				if(!ConFaces&&!ConRichFaces) {	
					strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
					strHtml+="\r\n\t\t\t\t\t\t<span class=\"elementotitulocampo\">"+strGenerarReporte+"</span><input type=\"checkbox\" id=\"chbGenerarReporte\" name=\"chbGenerarReporte\"><a:widget id=\"djcmbGenerarReporte\" name=\"dojo.dijit.combobox\" service=\"/FuncionesServlet?accion=traerJSonTiposReportes\"/>";
					strHtml+="\r\n\t\t\t\t\t\t</td>";
					
				} else {					
					if(!ConRichFaces) {
						strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"						
						strHtml+="\r\n\t\t\t\t\t\t\t<h:selectOneMenu id=\"djcmbGenerarReporte\" value=\"#{"+strObjectFace+".sGenerarReporte}\"  rendered=\"#{"+strObjectFace+".isPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+"}\">\r\n";			
						strHtml+="\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+".tiposReportes}\"/>\r\n";
						strHtml+="\t\t\t\t\t\t\t</h:selectOneMenu>\r\n";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						
						strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
						strHtml+="\r\n\t\t\t\t\t\t<span class=\"elementotitulocampo\">"+strGenerarReporte+"</hspan2>";
						strHtml+="\r\n\t\t\t\t\t\t<h:selectBooleanCheckbox id=\"chbGenerarReporte\" value=\"#{"+strObjectFace+".isGenerarReporte}\" rendered=\"#{"+strObjectFace+".isPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+"}\"/>\r\n";																	
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						
					} else {
						strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
						strHtml+="\r\n\t\t\t\t\t\t\t<h:selectOneMenu id=\"djcmbGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+strObjectFace+".sGenerarReporte}\"  rendered=\"#{"+strObjectFace+".isPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+"}\">\r\n";			
						strHtml+="\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+".tiposReportes}\"/>\r\n";
						//strHtml+="\t\t\t\t\t\t\t\t<a4j:ajax event=\"change\" render=\"richPanelMantenimiento"+GetNombreClaseC(TablaBase.ToString())+"AjaxWebPart\" listener=\"#{"+GetNombreClaseObjetoC(TablaBase.ToString())+"RequestBean.recargarForm"+GetNombreClaseC(TablaBase.ToString())+GetNombreCompletoClaseRelacionadaFromColumn(column)+"('Formulario')}\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(TablaBase.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(TablaBase.ToString())+"();\"/>\r\n";
						strHtml+="\t\t\t\t\t\t\t</h:selectOneMenu>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";	
						
						strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
						strHtml+="\r\n\t\t\t\t\t\t\t<span class=\"elementotitulocampo\">"+strGenerarReporte+"</span>";
						strHtml+="\r\n\r\n\t\t\t\t\t\t\t<h:selectBooleanCheckbox id=\"chbGenerarReporte"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+strObjectFace+".isGenerarReporte}\" rendered=\"#{"+strObjectFace+".isPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+"}\"/>\r\n";
						//RICH COMBO BOX NO ES UN CONTROL SELECT
						//rich:comboBox 					
						strHtml+="\r\n\t\t\t\t\t\t</td>";						
					}
				}
																			
				if(!ConFaces&&!ConRichFaces) {
					strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
					strHtml+="\r\n\t\t\t\t\t\t\t<span class=\"elementotitulocampo\">"+strGenerarReporteTodos+"</span>";
					strHtml+="\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"chbGenerarTodos\" name=\"chbGenerarTodos\">";
					strHtml+="\r\n\t\t\t\t\t\t</td>";
					
				} else {					
					if(!ConRichFaces) {
						strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
						strHtml+="\r\n\t\t\t\t\t\t\t<span class=\"elementotitulocampo\">"+strGenerarReporteTodos+"</span>";
						strHtml+="\r\n\t\t\t\t\t\t\t<h:selectBooleanCheckbox id=\"chbGenerarTodos\" value=\"#{"+strObjectFace+".isMostrarTodosResultadosReporte}\" rendered=\"#{"+strObjectFace+".isPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+"}\"/>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						
					} else {
						strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
						strHtml+="\r\n\t\t\t\t\t\t\t<span class=\"elementotitulocampo\">"+strGenerarReporteTodos+"</span>";
						strHtml+="\r\n\t\t\t\t\t\t\t<h:selectBooleanCheckbox id=\"chbGenerarTodos"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+strObjectFace+".isMostrarTodosResultadosReporte}\" rendered=\"#{"+strObjectFace+".isPermisoReporte"+GetNombreClaseC(TablaBase.ToString())+"}\"/>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
					}
				}										
			}
			
			strHtml+="\r\n\t\t\t\t\t</tr>";
			
					
			//SEGUNDA LINEA DE PARAMETROS
			strHtml+="\r\n\t\t\t\t\t<tr id=\"trRecargarInformacion"+GetNombreClaseC(TablaBase.ToString())+"2\">";						
			if((esMantenimientoSimple&&!esParaForeignKey)||esParaReportes) {
				if(!ConFaces&&!ConRichFaces) {
				
				} else {					
					if(!ConRichFaces) {
						
					} else {
						strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
						strHtml+="\r\n\t\t\t\t\t\t\t<h:selectOneMenu id=\"djcmbTiposSeleccionar"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+strObjectFace+".sTipoSeleccionar}\" rendered=\"#{!"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\">";
						strHtml+="\r\n\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+".tiposSeleccionar}\"/>";
						strHtml+="\r\n\t\t\t\t\t\t\t</h:selectOneMenu>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
						strHtml+="\r\n\t\t\t\t\t\t\t<span class=\"elementotitulocampo\">SEL TODOS</span>";
						strHtml+="\r\n\t\t\t\t\t\t\t<h:selectBooleanCheckbox id=\"chbSeleccionarTodos"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+strObjectFace+".isSeleccionarTodos}\" rendered=\"#{!"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\">";
						strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:ajax event=\"change\" execute=\"@form\" listener=\"#{"+strObjectFace+".jCheckBoxSeleccionarTodos"+GetNombreClaseC(TablaBase.ToString())+"ItemListener}\" render=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"sAjaxWebPart\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(TablaBase.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(TablaBase.ToString())+"();\"/>";
						strHtml+="\r\n\t\t\t\t\t\t\t</h:selectBooleanCheckbox>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						strHtml+="\r\n\t\t\t\t\t\t<td>";//class=\"elementos\"
						strHtml+="\r\n\t\t\t\t\t\t\t<h:selectOneMenu id=\"djcmbTiposAcciones"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+strObjectFace+".sTipoAccion}\" rendered=\"#{!"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\">";
						strHtml+="\r\n\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+".tiposAcciones}\"/>";
						strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:ajax event=\"change\" execute=\"@form\" listener=\"#{"+strObjectFace+".jComboBoxTiposAcciones"+GetNombreClaseC(TablaBase.ToString())+"ActionListener}\" render=\"auxiliar"+GetNombreClaseC(TablaBase.ToString())+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarInicioProcesoAcciones"+GetNombreClaseC(TablaBase.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAcciones"+GetNombreClaseC(TablaBase.ToString())+"();\"/>";
						strHtml+="\r\n\t\t\t\t\t\t\t</h:selectOneMenu>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
						strHtml+="\r\n\t\t\t\t\t\t<td>";// class=\"elementos\"
						strHtml+="\r\n\t\t\t\t\t\t\t<h:inputText id=\"txtValorCampoGeneral"+GetNombreClaseC(TablaBase.ToString())+"\" value=\"#{"+strObjectFace+".sValorCampoGeneral}\" rendered=\"#{!"+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\">";//funcionGeneral.validacionEnter();
						strHtml+="\r\n\t\t\t\t\t\t\t\t<a4j:ajax event=\"keyup\" onbeforesubmit=\"if (window.event.keyCode == 9 || window.event.keyCode == 13) { return true;}return false;\" execute=\"@form\" listener=\"#{"+strObjectFace+".jTextFieldValorCampoGeneral"+GetNombreClaseC(TablaBase.ToString())+"ActionListener}\" render=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"sAjaxWebPart\" />";//onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(TablaBase.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(TablaBase.ToString())+"();\"/>";
						strHtml+="\r\n\t\t\t\t\t\t\t</h:inputText>";
						strHtml+="\r\n\t\t\t\t\t\t</td>";
					}
				}
			}
			strHtml+="\r\n\t\t\t\t\t</tr>";
			
			
			
			strHtml+="\r\n\t\t\t\t</table>";
									
			if(!ConFaces&&!ConRichFaces) {
				strHtml+="\r\n\t\t\t\t\t\t\t</form>";
				
			} else {
				//SE ENVIA EL FORMULARIO CON TODAS LAS BUSQUEDAS Y AUXILIARES
				if(!ConRichFaces) {
						//strHtml+="\r\n\t\t\t\t</h:form>";
				} else {
					//strHtml+="\r\n\t\t\t\t</a4j:form>";
				}
			}
			
			//POSIBLE CAMBIO
			if(ConFaces||ConRichFaces) {
				//strHtml+="\r\n\t"+strWebFormEnd+"";
				//strHtml+="\r\n\t</rich:panel>";
			}
			
			strHtml+="\r\n\t\t\t</td>";
			strHtml+="\r\n\t\t</tr>";
			
			//FORMULARIO GENERAL PARA ENVIAR LOS PARAMETROS DE TODAS LAS BUSQUEDAS Y AUXILIARES
			if(ConFaces||ConRichFaces) {
				//ANTES ESTA
				//if(EsVersionRichFaces3C(RichFaces_Version)){
					strHtml+="\r\n\t"+strWebFormEnd+"";
				//}
				
				strHtml+="\r\n\t</rich:panel>";
				
				if(esBusquedaDesdeForeignKey) {
					strHtml+="\r\n\t</table>";
					strHtml+="\r\n\t</td>";
					strHtml+="\r\n\t</tr>";
				}
			}
			
			//SE UBICA LAS BUSQUEDAS DE FK PARA CUANDO CONBUSQUEDA=TRUE, ESTOS DEBEN ESTAR EN UN FORMULARIO APARTE DEL PRINCIPAL
			foreach(String strBusquedaPorTablaFK in arrBusquedaPorTablaFK) {
				strHtml+=strBusquedaPorTablaFK;
			}
			
			//BORRO O INICIALIZO
			arrBusquedaPorTablaFK=new ArrayList();
			
			return strHtml;
		}
		
		public String GetWebRowTituloTablaClaseC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaReportes) 
		{
			String strHtml="";
			
			/*
			strHtml+="<tr class=\"cabecera\">";
			strHtml+="\r\n\t\t\t<td>";
			*/
			if(!esParaReportes)
			{
				/*
				strHtml+="<h1>"+strMantenimientoDe+GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase)+"</h1>";
				strHtml+="\r\n\t\t\t</td>	";	
				strHtml+="\r\n\t\t</tr>";
				*/
						//YA NO MOSTRAR RELOJ NI CONTROLES NAVEGACION AREAS DE PAGINA
						/*
						strHtml+="\r\n\t<tr class=\"navegacion\">";
						strHtml+="\r\n\t\t<td>";
						strHtml+="\r\n\t\t\t<form name=\"frmExpandirColapsar\">";
						
						strHtml+="\r\n\r\n\t\t\t\t<table width=\"100%\"  border=\"0\">";
						strHtml+="\r\n\t\t\t\t<tr align=\"left\" style=\"width: 505px\">";
						strHtml+="\r\n\t\t\t\t<td align=\"left\">";
						//strHtml+="\r\n\t\t\t\t<img id=\"imgExpandirColapsar\" align=\"left\" style=\"visibility:visible\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/collapse.gif\" width=\"20\" height=\"20\"  onclick=\"funcionGeneral.colapsar('"+GetRelativePathC(TablaBase)+"')\"/>";
										
						strHtml+="\r\n\r\n\t\t\t\t</td>";
										
						strHtml+="\r\n\r\n\t\t\t\t<td align=\"left\" style=\"width: 258px\">";
						strHtml+="\r\n\t\t\t\t<img align=\"left\" id=\"imgEstadoProceso\" style=\"visibility:hidden; width: 16px; height: 16px\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/wait2.gif\" width=\"32\" height=\"32\" />";
						strHtml+="\r\n\t\t\t\t</td>";
										
						strHtml+="\r\n\r\n\t\t\t\t\t<td align=\"center\" style=\"width: 98px\">";
						
						//strHtml+="\r\n\t\t\t\t\t<a name=\"ControlesSecciones\" ></a>";
						//strHtml+="\r\n\t\t\t\t\t<img id=\"imgAreaBusquedas\" align=\"right\" style=\"visibility:visible\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/busqueda.gif\" width=\"20\" height=\"20\"  onclick=\"funcionGeneral.irAreaDePagina('Busquedas')\"/>";
						//strHtml+="\r\n\t\t\t\t\t<img id=\"imgAreaControles\" align=\"right\" style=\"visibility:visible\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/controles.gif\" width=\"20\" height=\"20\"  onclick=\"funcionGeneral.irAreaDePagina('Campos')\"/>";
						//strHtml+="\r\n\t\t\t\t\t<img id=\"imgAreaAcciones\" align=\"right\" style=\"visibility:visible\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/acciones.gif\" width=\"20\" height=\"20\"  onclick=\"funcionGeneral.irAreaDePagina('Acciones')\"/>";
						//strHtml+="\r\n\t\t\t\t\t<img id=\"imgAtras\" align=\"right\" style=\"visibility:visible\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/atras.gif\" width=\"20\" height=\"20\"  onclick=\"history.back()\"/>";
						
						strHtml+="\r\n\t\t\t\t</td>";
										
						strHtml+="\r\n\r\n\t\t\t\t</tr>";
										
						strHtml+="\r\n\r\n\t\t\t\t</table>";
						strHtml+="\r\n\t\t\t</form>";
						strHtml+="\r\n\t\t\t</td>";
						strHtml+="\r\n\t\t</tr>";
						*/
			}
			else
			{
				;//strHtml+="<h1>"+strReporteDe+GetTituloNombreTableFromPropertiesC(TablaBase)+"</h1>";
			}
			
			
			return strHtml;
		}
		
	public String GetWebRowControlesBusquedasIndicesTablasClasesC(TableSchema TablaBase,bool esMantenimientoSimple,bool esParaForeignKey,bool esParaReportes,bool ConFaces,bool ConRichFaces,String RichFaces_Version) {
			String strBusquedasDe="";
			String strBusquedaFK="";
			String strBusquedaFKVisibleCabbecera="";
								
			String strObjectFace="";
			
			if(ConFaces||ConRichFaces) {
				strObjectFace=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoJSFFaces;
			}
			
			if(esParaForeignKey) {
				strBusquedasDe=" "+strDe+" ";
				strBusquedasDe+=GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase);
				 strBusquedaFKVisibleCabbecera="";
				
			} else {
				if(!(ConFaces||ConRichFaces)) {
				 	strBusquedaFKVisibleCabbecera=" style=\"display:none\" ";
				} else {
					strBusquedaFKVisibleCabbecera=" style=\"display:${"+strObjectFace+".sVisibilidadTablaBusquedas}\" ";
				}
			}
			
			if(!esMantenimientoSimple) {
				strBusquedasDe=strDe+GetTituloNombreTableFromPropertiesC(TablaBase)+GetPluralTituloNombreTableFromPropertiesC(TablaBase);
			}
			
			String strHtml=">";
			String strRowFormularioSearch="";
			String strRowSearch="";
			
			//FORMULARIO GENERAL PARA ENVIAR LOS PARAMETROS DE TODAS LAS BUSQUEDAS Y AUXILIARES
			if(ConFaces||ConRichFaces) {
				//ESTO IBA AL FINAL PERO LLAMABA VARIAS VECES Y CUANDO NO TRAIA DATOS EN BUSQUEDA NUNCA MAS LO HACIA, POR LO QUE MEJOR QUITE
				//rendered=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(TablaBase.ToString())+"sListDataModel.rowCount>0}\"
				
				strRowFormularioSearch+="\r\n\t<rich:panel id=\"richPanelBusqueda"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\" rendered=\"#{"+strObjectFace+".isPermisoBusqueda"+GetNombreClaseC(TablaBase.ToString())+"}\">";
				
				//if(EsVersionRichFaces3C(RichFaces_Version)){
					strRowFormularioSearch+="\r\n\t"+strWebFormInit+" id=\"frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
				//}
			}
			
			strRowSearch+=strRowFormularioSearch+"\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"CabeceraBusquedas\" class=\"busquedacabecera\""+strBusquedaFKVisibleCabbecera+">\r\n\t\t\t<td>\r\n\t\t\t\t<img id=\"imgExpandirContraerRowBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\" align=\"left\" src=\""+GetRelativePathC(TablaBase)+"Imagenes/xcollapse.png\" width=\"20\" height=\"20\"  onclick=\"funcionGeneral.mostrarOcultarFilaCambiarImagenRelative('tr"+GetNombreClaseC(TablaBase.ToString())+"Busquedas',this,'"+GetRelativePathC(TablaBase)+"')\"/><font>"+strBusquedas+strBusquedasDe+"</font>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n";
						
			String strhtmlformularioinicial="";
			String strFormFinal="";
			
			String strFormInicial="";
			
			if(!ConFaces&&!ConRichFaces) {
				strFormInicial="<form name=\"frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
				strFormFinal="</form>";
				
			} else {
				//SE ENVIA UN SOLO FORMULARIO PARA TODAS LAS BUSQUEDAS Y AUXILIARES
				if(!ConRichFaces) {
					//strFormInicial="<h:form id=\"frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
					//strFormFinal="</h:form>";
				} else {
					//strFormInicial="<a4j:form id=\"frmBusqueda"+GetNombreClaseC(TablaBase.ToString())+"\">";
					//strFormFinal="</a4j:form>";
				}
			}
						
			String strHtmlInicial0="\r\n\t\t<tr id=\"tr"+GetNombreClaseC(TablaBase.ToString())+"Busquedas\" class=\"busqueda\" style=\"display:none\">\r\n\t\t\t<td align=\"center\">\r\n\t\t\t\t<a name=\"Busquedas\"></a>\r\n\t\t\t\t<div id=\"divBusquedas"+GetNombreClaseC(TablaBase.ToString())+strAjaxWebPart+"\">\r\n\t\t\t\t"+strFormInicial+"\r\n\t\t\t\t";
			
			strHtmlInicial0+="<table width=\""+GetWidthBusquedaTableFromPropertiesC(TablaBase)+"\" align=\"left\" style=\"visibility:visible\">";
			
			//Adiciono para que la tabla grande sea independiente con una celda
			if(ConRichFaces) {
				strHtmlInicial0+="\r\n\t\t\t\t<tr><td>";
			}
			
			String strHtmlFinal0ConRichFaces="";
			//Adiciono para que la tabla grande sea independiente con una celda
			if(ConRichFaces) {
				strHtmlFinal0ConRichFaces="\r\n\t\t\t\t</td></tr>";
			}
			
			String strHtmlFinal0="\r\n\t\t\t\t"+strHtmlFinal0ConRichFaces+"</table>\r\n\t\t\t\t</div>";
			strHtmlFinal0+="\r\n\t\t\t\t"+strFormFinal+"\r\n\r\n\t\t\t</td>\r\n\t\t</tr>";
			
			String strHtmlInicial="\r\n<tr class=\"busqueda\">\r\n<td align=\"center\">\r\n<a name=\"Busquedas\"></a>\r\n<table width=\"100%\" align=\"center\" style=\"visibility:visible\">";
			String strHtmlFinal="\r\n\t</tr>\r\n</table>\r\n</td>\r\n</tr>";
			strHtmlInicial+="";
			strHtmlFinal+="";
			
			String strTituloBusquedaInicialConRichFaces="";
			
			//Adiciono por cada tipo de busqueda sera una tabla y en ella un control simpletogglepanel
			if(ConRichFaces) {//labelbydanreplace para luego ser reemplazado por en nombre de la busqueda
				strTituloBusquedaInicialConRichFaces="\r\n\t\t\t\t\t<rich:"+strSimpleTogglePanel+" switchType=\"client\" label=\"labelbydanreplace\" rendered=\"#{"+strObjectFace+".visibilidadvariablebydanreplace}\"> \r\n\t\t\t\t\t<table>";
			}
			
			String strTituloBusquedaFinalConRichFaces="";
			//Adiciono por cada tipo de busqueda sera una tabla y en ella un control simpletogglepanel
			if(ConRichFaces) {
				strTituloBusquedaFinalConRichFaces="\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t</rich:"+strSimpleTogglePanel+">";
			}
			
			String strBusquedaConRichFaces=strBusqueda;
			
			//quito la palabra "BUSQUEDAS", es decir para que quede vacio,el titulo ira en el simpletoggle
			if(ConRichFaces) {
				strBusquedaConRichFaces="";
			}
			
			String strHtmlFormularioFinal="";
			String strTituloBusqueda="";
			String strTituloBusquedaInicial="";//strTituloBusquedaInicialConRichFaces+"\r\n\t\t\t\t\t<tr class=\"busquedatitulo\">\r\n\t\t\t\t\t\t<td colspan=\"3\" align=\"left\" class=\"busquedatitulo\">\r\n\t\t\t\t\t\t\t<font>"+strBusquedaConRichFaces;
			
			if(!ConRichFaces) {
				strTituloBusquedaInicial=strTituloBusquedaInicialConRichFaces+"\r\n\t\t\t\t\t<tr class=\"busquedatitulo\">\r\n\t\t\t\t\t\t<td colspan=\"3\" align=\"left\" class=\"busquedatitulo\">\r\n\t\t\t\t\t\t\t<font>"+strBusquedaConRichFaces;
			} else {
				strTituloBusquedaInicial=strTituloBusquedaInicialConRichFaces;
			}
			
			
			String strTituloBusquedaMiddle="";
			String strTituloBusquedaFinal="";//"</font>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>";
			
			if(!ConRichFaces) {
				strTituloBusquedaFinal="</font>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>";
			} else {
				strTituloBusquedaFinal="";
			}
			
			String strTitulo=string.Empty;
			String strComboText=string.Empty;
			String strBoton=string.Empty;
			String strBotonBusqueda=string.Empty;
			String strCombo=string.Empty;
			
			String strFuncion=string.Empty;
			bool existe=false;
			bool blnExisteBusquedaFkVariableGlobal=false;
			
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			
			String sVisibiliadIndice=String.Empty;
							
			if(!esParaReportes) {
				foreach(IndexSchema indexSchema in TablaBase.Indexes) {
					blnExisteBusquedaFkVariableGlobal=false;
					
					if(!indexSchema.IsPrimaryKey) {
						if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
							continue;
						}
					
						sVisibiliadIndice="sVisibilidad"+indexSchema.Name;
						
						if(indexSchema.IsUnique) {
							continue;
																						//strTitulo=GetNombreClaseC(TablaBase.ToString())+"</td>";
							//strBoton="\r\n\t\t<td width=\"11%\"><input type=\"button\" value=\"Buscar\" onclick=\"PaginaWebInteraccion"+  GetNombreClaseC(TablaBase.ToString())+"Buscar"+GetNombreClaseC(TablaBase.ToString())+"s('"+indexSchema.Name+ "')\">\r\n\t\t</td>";
																						//strCombo="<td width=\"79%\"><a:widget id=\"djcmb"+  GetNombreClaseC(TablaBase.ToString())+"\" name=\"dojo.combobox\"/></td>";					
					
																						//strInitFuncion+=GetNombreClaseC(TablaBase.ToString())+" "+"Traer"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
						} else {
							existe=true;
							//strTitulo=GetNombreClaseC(TablaBase.ToString())+"s</td>";
							//strBoton="\r\n\t\t\t\t\t\t<td width=\"11%\">\r\n\t\t\t\t\t\t\t<input type=\"button\" value=\"Buscar\" onclick=\"PaginaWebInteraccion"+  GetNombreClaseC(TablaBase.ToString())+"Buscar"+GetNombreClaseC(TablaBase.ToString())+"s('"+indexSchema.Name+ "')\">\r\n\t\t\t\t\t\t</td>";
							
							if(!ConFaces&&!ConRichFaces) {
								strBotonBusqueda="<a:widget id=\"btndjdjtBuscar"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"\" name=\"dojo.dijit.button\" value=\"{label: '"+strBuscar+"'}\" />";								
							} else {
								if(!ConRichFaces) {
									strBotonBusqueda="<h:commandButton id=\"btndjdjtBuscar"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"\"  action=\"#{"+strObjectFace+"."+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+""+"}\" value=\""+strBuscar+"\"/>";
								} else {
									strBotonBusqueda="<a4j:commandButton id=\"btndjdjtBuscar"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"\"  action=\"#{"+strObjectFace+"."+"get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+""+"}\" value=\""+strBuscar+"\" "+strReRender+"=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.buscar"+GetNombreClaseC(TablaBase.ToString())+"sOnComplete()\"/>";
								}
							}
			
							strBoton="\r\n\t\t\t\t\t\t<td width=\"11%\">\r\n\t\t\t\t\t\t\t"+strBotonBusqueda+"\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>";
																					
							strComboText="";
							strTitulo="";
							strTituloBusquedaMiddle="";
							
							if(indexSchema.Name.Contains(strFK)) {																								
								TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);
																
								if(EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(indexSchema)
								|| EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(indexSchema)) {
									blnExisteBusquedaFkVariableGlobal=true;									
								}		
								
								if(blnExisteBusquedaFkVariableGlobal) {
									continue;	
								}
					
								if(tableRelacionada.Name!=TablaBase.Name) {
									/*
									if(GetBusquedaForeignKeyColumnFromPropertiesC(indexSchema.MemberColumns[0]))
									{
										ArrayList arrTemp=new ArrayList();
										
										strBusquedaFK="\r\n\t\t<tr id=\"trFk"+GetNombreClaseC(tableRelacionada.ToString())+"Busqueda\" style=\"display:none\">\r\n\t<td>\r\n\t<table width=\"100%\"  align=\"center\"  bgcolor=\""+strColorBusquedaAnidada+"\">";
										strBusquedaFK+=GetWebRowControlesBusquedasIndicesTablasClasesC(tableRelacionada,true,true,false,ConFaces,ConRichFaces,RichFaces_Version);
										strBusquedaFK+=GetWebRowParametrosBusquedaTablaClaseC(tableRelacionada,true,true,false,true,ConFaces,ConRichFaces,RichFaces_Version);
										strBusquedaFK+=GetWebRowTablaDatosTablaClaseC(tableRelacionada,TablaBase,indexSchema.MemberColumns[0],true,true,TablaBase,false,false,ConFaces,ConRichFaces,RichFaces_Version);
										strBusquedaFK+=GetWebRowPaginacionYNuevoTablaClaseC(tableRelacionada,true,true,false,ConFaces,ConRichFaces,RichFaces_Version);								
										//strBusquedaFK+="\r\n\t\t</table>\r\n\t</td>\r\n\t</tr>";
										
										arrBusquedaPorTablaFK.Add(strBusquedaFK);
									}
									*/
								}
								
								//strTitulo+=strBusquedaFK;
								strTitulo+="\r\n\t\t\t\t\t\t<td width=\"10%\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(indexSchema.MemberColumns[0])+"</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";							
								
								if(!ConFaces&&!ConRichFaces) {
									strCombo="<a:widget id=\""+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\" name=\"dojo.dijit.combobox\" value=\"[{label : 'Alabama', value : 'AL'}]\"/>";									
								
								} else {
									if(!ConRichFaces) {
										strCombo="<h:selectOneMenu id=\""+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\" value=\"#{"+strObjectFace+"."+GetPrefijoTipoC(indexSchema.MemberColumns[0])+GetNombreColumnaClaseC(indexSchema.MemberColumns[0])+indexSchema.Name+"}\"> \r\n";					
										strCombo+="<f:selectItems value=\"#{"+strObjectFace+"."+GetNombreCompletoClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]).ToLower() +"s"+strForeignKey+"ListSelectItem}\"/>\r\n";
										strCombo+="</h:selectOneMenu>";
									
									} else {
										//rich:comboBox	richPanel
										//strCombo="\t\t\t\t\t\t<rich:panel id=\"richPanel"+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\">\r\n";
										strCombo="\r\n\t\t\t\t\t\t\t<h:selectOneMenu id=\""+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\" value=\"#{"+strObjectFace+"."+GetPrefijoTipoC(indexSchema.MemberColumns[0])+GetNombreColumnaClaseC(indexSchema.MemberColumns[0])+indexSchema.Name+"}\"> \r\n";					
										strCombo+="\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+"."+GetNombreCompletoClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]).ToLower() +"s"+strForeignKey+"ListSelectItem}\"/>\r\n";
										strCombo+="\t\t\t\t\t\t\t</h:selectOneMenu>\r\n";
										//strCombo+="\t\t\t\t\t\t</rich:panel>";
										//rich:comboBox
									}
								}
								
								strComboText="\r\n\t\t\t\t\t\t<td width=\"79%\" align=\"center\">\r\n\t\t\t\t\t\t\t"+strCombo+"\r\n\t\t\t\t\t\t</td>";								
								strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(indexSchema.MemberColumns[0]);
								
								//solo cambia el comentario
								if(ConRichFaces) {
									strTituloBusqueda=strTituloBusquedaInicial+/*strTituloBusquedaMiddle+ */strTituloBusquedaFinal;
								} else {
									strTituloBusqueda=strTituloBusquedaInicial+strTituloBusquedaMiddle+ strTituloBusquedaFinal;
								}								
							}
						}	
						
						if(!indexSchema.Name.Contains(strFK)) {
							strComboText="";
							strTitulo="";
							strTituloBusquedaMiddle="";
							int count=1;	count+=0;
							
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
								if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual"))) {																									
									
									//strTitulo
									strComboText+="\r\n\t\t\t\t\t\t<td width=\"10%\" class=\"busquedatitulocampo\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
									strComboText+="\r\n\t\t\t\t\t\t<td width=\"79%\" align=\"center\">\r\n\t\t\t\t\t\t\t"+ GetControlHtmlBusqueda( memberColumnSchema.Column,indexSchema.Name,ConFaces,ConRichFaces,false)+"\r\n\t\t\t\t\t\t</td>";
									strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column);
									
									if(GetConRangoBusquedasColumnFromPropertiesC(memberColumnSchema.Column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(memberColumnSchema.Column,indexSchema)) {
										strComboText+="\r\n\t\t\t\t\t\t<td width=\"10%\" class=\"busquedatitulocampo\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" "+strSufijoRangoFinal.ToUpper()+"</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
										strComboText+="\r\n\t\t\t\t\t\t<td width=\"79%\" align=\"center\">\r\n\t\t\t\t\t\t\t"+ GetControlHtmlBusqueda( memberColumnSchema.Column,indexSchema.Name,ConFaces,ConRichFaces,true)+"\r\n\t\t\t\t\t\t</td>";
										strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" "+strSufijoRangoFinal.ToUpper();
									}
									
								} else {
									if(!indexSchema.Name.Contains("BusquedaRango")) {
										//strTitulo
										strComboText+="\r\n\t\t\t\t\t\t<td width=\"10%\" class=\"busquedatitulocampo\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+"</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
										strComboText+="\r\n\t\t\t\t\t\t<td width=\"79%\" align=\"center\">\r\n\t\t\t\t\t\t"+ GetControlHtmlBusqueda( memberColumnSchema.Column,indexSchema.Name,ConFaces,ConRichFaces,false)+"\r\n\t\t\t\t\t\t</td>";
										
										if(indexSchema.Name.Contains("BusquedaMayor")) {
											strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Inicial";
										
										} else if(indexSchema.Name.Contains("BusquedaMenor")) {
											strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Final";
										}
									} else {
										//strTitulo
										strComboText+="\r\n\t\t\t\t\t\t<td width=\"10%\" class=\"busquedatitulocampo\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Inicial</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
										strComboText+="\r\n\t\t\t\t\t\t<td width=\"79%\" align=\"center\">\r\n\t\t\t\t\t\t"+ GetControlHtmlBusqueda( memberColumnSchema.Column,indexSchema.Name,ConFaces,ConRichFaces,false).Replace(memberColumnSchema.Column.Name+indexSchema.Name+"\"",memberColumnSchema.Column.Name+indexSchema.Name+"Inicial\"")+"\r\n\t\t\t\t\t\t</td>";
										
										//strTitulo
										strComboText+="\r\n\t\t\t\t\t\t<td width=\"10%\" class=\"busquedatitulocampo\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Final</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
										strComboText+="\r\n\t\t\t\t\t\t<td width=\"79%\" align=\"center\">\r\n\t\t\t\t\t\t\t"+ GetControlHtmlBusqueda( memberColumnSchema.Column,indexSchema.Name,ConFaces,ConRichFaces,false).Replace(memberColumnSchema.Column.Name+indexSchema.Name+"\"",memberColumnSchema.Column.Name+indexSchema.Name+"Final\"")+"\r\n\t\t\t\t\t\t</td>";
										
										strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Inicial";
										strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(memberColumnSchema.Column)+" Final";
										break;
									}
								}
							}
							
							//solo cambia el comentario
							if(ConRichFaces) {
								strTituloBusqueda=strTituloBusquedaInicial+/*strTituloBusquedaMiddle+*/ strTituloBusquedaFinal;
							} else {
								strTituloBusqueda=strTituloBusquedaInicial+strTituloBusquedaMiddle+ strTituloBusquedaFinal;
							}														
						}
						
						//solo cambia el replace
						if(ConRichFaces) {
							strInitFuncion+=strTituloBusqueda.Replace("labelbydanreplace",strTituloBusquedaMiddle).Replace("visibilidadvariablebydanreplace",sVisibiliadIndice)+"\r\n\t\t\t\t\t<tr>"+strTitulo+strComboText+strBoton+"\r\n\r"+strTituloBusquedaFinalConRichFaces;
						} else {
							strInitFuncion+=strTituloBusqueda+"\r\n\t\t\t\t\t<tr>"+strTitulo+strComboText+strBoton+"\r\n\r"+strTituloBusquedaFinalConRichFaces;
						}												
					}					
				}
				
			} else {												
							strComboText="";
							strTitulo="";
							strTituloBusquedaMiddle="";
							int count=1;	count+=0;
							bool blExisteParametro=false;
							
							foreach(ColumnSchema columnSchema in TablaBase.Columns) {
								
								if(!columnSchema.Name.Contains(strPrefijoParametro)) {
									continue;
								} else {
									blExisteParametro=true;
								}
								strComboText+="\r\n\t\t\t\t\t\t<td width=\"10%\"><"+strHtmlTypeBusquedaInicial+">"+ GetWebNombreTituloColumnFromPropertiesC(columnSchema)+"</"+strHtmlTypeBusquedaFinal+">\r\n\t\t\t\t\t\t</td>";
								strComboText+="\r\n\t\t\t\t\t\t<td width=\"79%\" align=\"center\">\r\n\t\t\t\t\t\t\t"+ GetControlHtmlBusqueda( columnSchema,TablaBase.Name,ConFaces,ConRichFaces,false)+"\r\n\t\t\t\t\t\t</td>";
								strTituloBusquedaMiddle+=" "+strPor+" "+GetWebNombreTituloColumnFromPropertiesC(columnSchema);
							}
							
							if(!blExisteParametro) {
								return "";
							}
							
							//solo cambia el comentario
							if(ConRichFaces) {
								strTituloBusqueda=strTituloBusquedaInicial+/*strTituloBusquedaMiddle+*/ strTituloBusquedaFinal;
							} else {
								strTituloBusqueda=strTituloBusquedaInicial+strTituloBusquedaMiddle+ strTituloBusquedaFinal;
							}
							
						//solo cambia el replace	
						if(ConRichFaces) {
							strInitFuncion+=strTituloBusqueda.Replace("labelbydanreplace",strTituloBusquedaMiddle).Replace("visibilidadvariablebydanreplace",sVisibiliadIndice)+"\r\n\t\t\t\t\t<tr>"+strTitulo+strComboText+strBoton+"\r\n\r\n"+strTituloBusquedaFinalConRichFaces;
						} else {
							strInitFuncion+=strTituloBusqueda+"\r\n\t\t\t\t\t<tr>"+strTitulo+strComboText+strBoton+"\r\n\r\n"+strTituloBusquedaFinalConRichFaces;
						}																
			}
			
			strHtml=strRowSearch+strHtmlInicial0+strhtmlformularioinicial+strInitFuncion +strHtmlFormularioFinal+strHtmlFinal0+"\r\n\r\n";
			
			if(!existe) {
				//ANTES VACIO PERO AHORA SI NO TIENE BUSQUEDAS AL MENOS EL FORMULARIO DE RICHFACES (SI ES) <a4j-form> PARA QUE TENGA FORMULARIO ABIERTO-CERRADO
				//strHtml="";
				strHtml=strRowFormularioSearch;	
			}
								
			return strHtml;//+strBusquedaFK; 
	}
		
		public String GetWebRowControlesBusquedasIndicesTablasClasesC(TableSchema TablaBase,String strIncludeInit,String strIncludeEnd) 
		{
			String strBusquedaFK="";
			
				foreach(IndexSchema indexSchema in TablaBase.Indexes)
				{
				
					
					if(!indexSchema.IsPrimaryKey)
					{			
						if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name))
						{
							continue;
						}
					
						if(indexSchema.IsUnique)
						{
							continue;
						}
						else
						{
							
							if(indexSchema.Name.Contains(strFK))
							{
							
								TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);						
								
								if(GetBusquedaForeignKeyColumnFromPropertiesC(indexSchema.MemberColumns[0]))
								{									
									//strBusquedaFK+="\r\n\t\tfuncionGeneral.Import('JavaScript/PaginaWebInteraccion/"+GetNombreClaseC(tableRelacionada.ToString())+"PaginaWebInteraccionEvents.jsp');";									
									strBusquedaFK+=strIncludeInit+"\""+GetRelativePathC(TablaBase)+"JavaScript/PaginaWebInteraccion/"+GetNombreClaseC(tableRelacionada.ToString())+"PaginaWebInteraccionEvents.jsp\""+strIncludeEnd;
								}								
							}
						}	
					}
					
				}
			
					
			return strBusquedaFK; 
		}
		
		public String GetSetUnicoComboFromForeignKeysC(TableSchema TablaBase) 
		{
			String strBusquedaFK="";
			
				foreach(IndexSchema indexSchema in TablaBase.Indexes)
				{
						
					if(!indexSchema.IsPrimaryKey)
					{		
						if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name))
						{
							continue;
						}
					
						if(indexSchema.IsUnique)
						{
							continue;
						}
						else
						{
							
							if(indexSchema.Name.Contains(strFK))
							{
							
								TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);						
								
								if(GetBusquedaForeignKeyColumnFromPropertiesC(indexSchema.MemberColumns[0]))
								{									
									//strBusquedaFK+="\r\n\t\tfuncionGeneral.Import('JavaScript/PaginaWebInteraccion/"+GetNombreClaseC(tableRelacionada.ToString())+"PaginaWebInteraccionEvents.jsp');";									
									strBusquedaFK+="\r\n\t\tthis.Bit"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(indexSchema.MemberColumns[0]))+"UtilizaBusqueda=true;";
									strBusquedaFK+="\r\n\t\t"+GetNombreClaseObjetoC(tableRelacionada.ToString())+"PaginaWebInteraccion.ObjetoServicio="+GetNombreClaseObjetoC(TablaBase.ToString())+"Servicio;";	
									strBusquedaFK+="\r\n\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"Servicio.Set"+GetNombreClaseC(tableRelacionada.ToString())+"Unico(-1,\"ninguno\");";									
									
								}								
							}
						}	
					}
					
				}
			
					
			return strBusquedaFK; 
		}

	
public string GetColumnsTableMaintenanceC(ColumnSchema column,bool esMantenimientoDeImagen)
{
		
		String strTipo=GetTipoColumnaClaseC(column);	
		String strPrefijo=" "+GetPrefijoTipoC(column);	
		String strColumna=GetNombreColumnaClaseC(column);
		
		String strColumnName="";
		String strColumnLabel="'"+GetWebNombreTituloColumnFromPropertiesC(column)+"'";
		String strColumn="";
		
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strVersionRow))
		{
				return string.Empty;
		}
		else
		{
			if(!column.IsForeignKeyMember&&column.DataType!=DbType.Boolean&&column.NativeType!="image"&&column.DataType!=DbType.Binary)
			{
				strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"'";
				strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
			}
			else if(column.DataType==DbType.Boolean)
			{
				strColumna= GetNombreColumnaClaseC(column);
				strColumna=strColumna.Replace(strId,"");
				strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
				
				strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Control'";
				strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";	
			}
			else if(column.IsForeignKeyMember)
			{
				strColumna= GetNombreColumnaClaseC(column);
				strColumna=strColumna.Replace(strId,"");
				strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
				
				strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Descripcion'";
				strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
			}
			else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
			{
				if(esMantenimientoDeImagen)
				{
					strColumna= GetNombreColumnaClaseC(column);
					strColumna=strColumna.Replace(strId,"");
					strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
					
					strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Mostrar'";
					strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
				}
				else
				{
					strColumna= GetNombreColumnaClaseC(column);
					strColumna=strColumna.Replace(strId,"");
					strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
					
					strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Actualizar'";
					strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
				}
			}
		}	
			
	return strColumn;
}

public string GetRichPanelsFkBusquedasTableC(TableSchema TablaBase,ColumnSchema columnSchemaObjetivo) {
	String strPanelFkBusqueda="";
	//bool blnEsPrimero;
	
	foreach(IndexSchema indexSchema in TablaBase.Indexes) {

		
		if(!indexSchema.IsPrimaryKey) {
			if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
				continue;
			}

			if(indexSchema.IsUnique) {
				continue;
				
			} else {

				if(indexSchema.Name.Contains(strFK)) {
					//TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);											
					//strCombo="\t\t\t\t\t\t<rich:panel id=\"richPanel"+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\">\r\n";
					
					//,siempre existe combo para cargar elemento
					if(columnSchemaObjetivo.Name.Equals(indexSchema.MemberColumns[0].Name)) {
						strPanelFkBusqueda+=",richPanel"+GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name);
					}
				}
				
				if(!indexSchema.Name.Contains(strFK)) {
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
						if(memberColumnSchema.Column.IsForeignKeyMember) {
							strPanelFkBusqueda+=",richPanel"+GetNameControlHtmlBusqueda(memberColumnSchema.Column,indexSchema.Name);
						}
					}
				}
			}
		}
	}
	
	return strPanelFkBusqueda;
}
//CUANDO ES BUSQUEDA INTERNA
//,TableSchema TablaBasePadre,ColumnSchema columnSchemaPadre
public string GetColumnsFacesTableMaintenanceC(ColumnSchema column,TableSchema TablaBasePadre,ColumnSchema columnSchemaPadre,bool esParaForeignKey,TableSchema TablaBasePadreFK,bool esMantenimientoDeImagen,bool ConFaces,bool ConRichFaces,String RichFaces_Version) {		
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=GetPrefijoTipoC(column);	
	String strColumna=GetNombreColumnaClaseC(column);
		
	String strPrefijoCampo="";
	
	strPrefijoCampo=GetPrefijoTablaC().ToLower();
	
	String strColumnName=GetNombreClaseObjetoC(column.Table.ToString())+"."+strPrefijoCampo+strPrefijo+strColumna;
	String strColumnLabel=""+GetWebNombreTituloColumnFromPropertiesC(column)+"";
	String strColumn="";
	
	String strPrefijoColumna="h";
	String strOcultarColumna="";
	String strRenderedControl="";
	String strDisabledRenderedControl="";
			
	bool blnConSeguridadColumn=GetConSeguridadColumnFromPropertiesC(column);				
	String strObjectFaceOnly=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
	String strSufijoVariables=GetNombreClaseC(column.Table.ToString())+ GetNombreColumnaClaseC(column);		
	String strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
		
	strRenderedControl=" rendered=\"#{!"+strObjectFaceOnly+".isEditarEnTabla}\"";
	strDisabledRenderedControl=" disabled=\"#{!"+strObjectFaceOnly+".isEditarEnTabla}\"";
	
	String strControlHtml=GetControlHtml(column,ConFaces,ConRichFaces,RichFaces_Version,true);
	
	if(ConRichFaces) {	
		strPrefijoColumna="rich";
		
		if(!blnConSeguridadColumn) {
			if(GetNoInsertEditColumnFromPropertiesC(column)) {
				
				if(!GetShowTableColumnFromPropertiesC(column)) {
					strOcultarColumna=" rendered=\"false\"";
				}
			}
		} else {
			strOcultarColumna=" rendered=\"#{"+strObjectFaceOnly+".isPermisoConsulta"+strSufijoVariables+"}\"";
		}
	}
		
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strVersionRow)) {
		return string.Empty;
	} else if(column.Name.Equals(strId)) {
		/*
		if(!ConRichFaces) {	
			strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
		} else {
			strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column sortBy=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\">\r\n";
		}
		
		strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\""+strIdGetSet+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
		//strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\"/>\r\n";
		strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"\"/>\r\n";
		//onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.mostrarOcultarControlesMantenimiento(true)\"
		*/
		
		if(!ConRichFaces) {	
			strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\""+strIdGetSet+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"\"/>\r\n";
		
			strColumn+="\r\n\t\t\t\t\t\t<h:commandLink action=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".Seleccionar}\" value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\">\r\n";
			strColumn+="\t\t\t\t\t\t\t<f:setPropertyActionListener value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" target=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+strId+"}\" />\r\n";
			strColumn+="\t\t\t\t\t\t</h:commandLink>\r\n";
			strColumn+="\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
			
		} else {
			
			//SELECCIONAR
			strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column sortBy=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" rendered=\"#{!"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\">\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"EDITAR\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"\"/>\r\n";
		
			strColumn+="\r\n\t\t\t\t\t\t<a4j:region>\r\n";
			
			
			//value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\"
						
			
			if(!esParaForeignKey) {
				strColumn+="\r\n\t\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".seleccionar}\" image=\"/Imagenes/seleccionar.gif\" value=\"SELECCIONAR\" style=\" height : 18px;\" "+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(column.Table.ToString())+strAjaxWebPart+",frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+"\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete()\">\r\n";//,frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+"
				//strColumn+="\r\n\t\t\t\t\t\t\t<rich:componentControl target=\"modalPanel"+GetNombreClaseC(column.Table.ToString())+"\" operation=\"show\" />\r\n";
				strColumn+="\t\t\t\t\t\t\t</a4j:commandButton>\r\n";
				strColumn+="\t\t\t\t\t\t\t<h:outputText value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\"/>\r\n";
			
				//ELIMINAR GUARDAR CAMBIOS
				/*
				strColumn+="\r\n\t\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".eliminarGuardarCambios}\" image=\"/Imagenes/eliminar.gif\" value=\"ELIMINAR\" style=\" height : 18px;\" "+strReRender+"=\""+GetNombreClaseObjetoC(column.Table.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(column.Table.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(column.Table.ToString())+"OnComplete()\">\r\n";//,frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+"				
				strColumn+="\t\t\t\t\t\t\t</a4j:commandButton>\r\n";
				*/
			} else {
				
				//AQUI SE ASEGURA QUE NO SEA NULO
				String strNameOnly=GetNameControlHtml(columnSchemaPadre);
				String strPanelsBusquedasFk=GetRichPanelsFkBusquedasTableC(TablaBasePadre,columnSchemaPadre);
				//System.Windows.Forms.MessageBox.Show(TablaBasePadre.Name);//PERFILUSUARIO
				//System.Windows.Forms.MessageBox.Show(columnSchemaPadre.Name);//IDUSUARIO
				
				//ANTES
				//"+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(TablaBasePadreFK.ToString())+strAjaxWebPart+"
				//",richPanelBusqueda"+GetNombreClaseC(TablaBasePadreFK.ToString())+strAjaxWebPart+"
				
				strColumn+="\r\n\t\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+strPrefijoJSFFaces+".seleccionar"+GetNombreClaseC(column.Table.ToString())+"Actual}\" image=\"/Imagenes/seleccionar.gif\" value=\"SELECCIONAR\" style=\" height : 18px;\" "+strReRender+"=\"richPanel"+strNameOnly+strPanelsBusquedasFk+"\" onclick=\""+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"PaginaWebInteraccion.buscarFk"+GetNombreClaseC(TablaBasePadreFK.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"PaginaWebInteraccion.buscarFk"+GetNombreClaseC(column.Table.ToString())+GetNombreClaseC(TablaBasePadreFK.ToString())+"sOnComplete()\">\r\n";//
				strColumn+="\t\t\t\t\t\t\t<"+strActionParam+" name=\""+GetNombreClaseObjetoC(column.Table.ToString())+strId+"\" value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" assignTo=\"#{"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+strPrefijoJSFFaces+"."+strId+GetNombreClaseC(column.Table.ToString())+"Actual}\"/>\r\n";
				strColumn+="\t\t\t\t\t\t\t</a4j:commandButton>\r\n";
			}
			
			//strColumn+="\t\t\t\t\t\t\t<"+strActionParam+" name=\"idParametro\" value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" assignTo=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+strId+"}\" />\r\n";			
						
			strColumn+="\t\t\t\t\t\t</a4j:region>\r\n";
			strColumn+="\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
			//SELECCIONAR FIN			
						
			
			//SELECCIONAR BUSCAR
			strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column sortBy=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" rendered=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\">\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"SELECCIONAR\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"\"/>\r\n";
		
			strColumn+="\r\n\t\t\t\t\t\t<a4j:region>\r\n";
			
			
			//value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\"
						
			
			if(!esParaForeignKey) {
				strColumn+="\r\n\t\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".seleccionarBusqueda("+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+")}\" image=\"/Imagenes/seleccionar.gif\" value=\"SELECCIONAR\" style=\" height : 18px;\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnClick()\" oncomplete=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFSessionFaces+".sFuncionBusquedaRapida}"+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.seleccionar"+GetNombreClaseC(column.Table.ToString())+"OnComplete();window.close();\">\r\n";//,frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+"
				//strColumn+="\r\n\t\t\t\t\t\t\t<rich:componentControl target=\"modalPanel"+GetNombreClaseC(column.Table.ToString())+"\" operation=\"show\" />\r\n";
				strColumn+="\t\t\t\t\t\t\t</a4j:commandButton>\r\n";
				strColumn+="\t\t\t\t\t\t\t<h:outputText value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\"/>\r\n";
			
				//ELIMINAR GUARDAR CAMBIOS
				/*
				strColumn+="\r\n\t\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".eliminarGuardarCambios}\" image=\"/Imagenes/eliminar.gif\" value=\"ELIMINAR\" style=\" height : 18px;\" "+strReRender+"=\""+GetNombreClaseObjetoC(column.Table.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(column.Table.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(column.Table.ToString())+"OnComplete()\">\r\n";//,frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+"				
				strColumn+="\t\t\t\t\t\t\t</a4j:commandButton>\r\n";
				*/
			} else {
				//NO DEBERIA FUNCIONAR
				/*
				//AQUI SE ASEGURA QUE NO SEA NULO
				String strNameOnly=GetNameControlHtml(columnSchemaPadre);
				String strPanelsBusquedasFk=GetRichPanelsFkBusquedasTableC(TablaBasePadre,columnSchemaPadre);
				//System.Windows.Forms.MessageBox.Show(TablaBasePadre.Name);//PERFILUSUARIO
				//System.Windows.Forms.MessageBox.Show(columnSchemaPadre.Name);//IDUSUARIO
				
				//ANTES
				//"+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(TablaBasePadreFK.ToString())+strAjaxWebPart+"
				//",richPanelBusqueda"+GetNombreClaseC(TablaBasePadreFK.ToString())+strAjaxWebPart+"
				
				strColumn+="\r\n\t\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+strPrefijoJSFFaces+".seleccionar"+GetNombreClaseC(column.Table.ToString())+"Actual}\" image=\"/Imagenes/seleccionar.gif\" value=\"SELECCIONAR\" style=\" height : 18px;\" "+strReRender+"=\"richPanel"+strNameOnly+strPanelsBusquedasFk+"\" onclick=\""+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"PaginaWebInteraccion.buscarFk"+GetNombreClaseC(TablaBasePadreFK.ToString())+"sOnClick()\" oncomplete=\""+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+"PaginaWebInteraccion.buscarFk"+GetNombreClaseC(column.Table.ToString())+GetNombreClaseC(TablaBasePadreFK.ToString())+"sOnComplete()\">\r\n";//
				strColumn+="\t\t\t\t\t\t\t<"+strActionParam+" name=\""+GetNombreClaseObjetoC(column.Table.ToString())+strId+"\" value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" assignTo=\"#{"+GetNombreClaseObjetoC(TablaBasePadreFK.ToString())+strPrefijoJSFFaces+"."+strId+GetNombreClaseC(column.Table.ToString())+"Actual}\"/>\r\n";
				strColumn+="\t\t\t\t\t\t\t</a4j:commandButton>\r\n";
				*/
			}
			
			//strColumn+="\t\t\t\t\t\t\t<"+strActionParam+" name=\"idParametro\" value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" assignTo=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+strId+"}\" />\r\n";			
						
			strColumn+="\t\t\t\t\t\t</a4j:region>\r\n";
			strColumn+="\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
			//SELECCIONAR BUSCAR FIN	
						
						
						
			//ELIMINAR GUARDAR CAMBIOS
			strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column sortBy=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" rendered=\"#{!"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\">\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"ELI\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"\"/>\r\n";
		
			strColumn+="\r\n\t\t\t\t\t\t<a4j:region>\r\n";
			
			
			//value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\"
										
			//ELIMINAR GUARDAR CAMBIOS
			strColumn+="\r\n\t\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".eliminarGuardarCambios"+GetNombreClaseC(column.Table.ToString())+"ActionPerformed}\" image=\"/Imagenes/eliminar.gif\" value=\"ELIMINAR\" style=\" height : 18px;\" "+strReRender+"=\""+GetNombreClaseObjetoC(column.Table.ToString())+"s"+strAjaxWebPart+"\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(column.Table.ToString())+"OnClick()\" oncomplete=\""+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.actualizar"+GetNombreClaseC(column.Table.ToString())+"OnComplete()\">\r\n";//,frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+"				
			strColumn+="\t\t\t\t\t\t\t</a4j:commandButton>\r\n";
			strColumn+="\t\t\t\t\t\t\t<h:outputText value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\"/>\r\n";
			
			
			//strColumn+="\t\t\t\t\t\t\t<"+strActionParam+" name=\"idParametro\" value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" assignTo=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+strId+"}\" />\r\n";			
						
			strColumn+="\t\t\t\t\t\t</a4j:region>\r\n";
			strColumn+="\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
			//ELIMINAR GUARDAR CAMBIOS FIN		
			
						
			//SELECCIONAR TODOS			
			strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column rendered=\"#{!"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFSessionFaces+".estaModoBusqueda}\">\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">";
			strColumn+="\r\n\t\t\t\t\t\t\t<h:outputText value=\"SEL\"/>\r\n";
			strColumn+="\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t<h:selectBooleanCheckbox value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+".isSelected}\" disabled=\"false\">\r\n";
			strColumn+="\r\n\t\t\t\t\t\t\t<a4j:ajax event=\"change\" execute=\"@form\" listener=\"#{"+strObjectFace+".jCheckBoxSeleccionarActual"+GetNombreClaseC(column.Table.ToString())+"ItemListener("+GetNombreClaseObjetoC(column.Table.ToString())+".id)}\" render=\""+GetNombreClaseObjetoC(column.Table.ToString())+"sAjaxWebPart\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(column.Table.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(column.Table.ToString())+"();\"/>";
			strColumn+="\r\n\t\t\t\t\t\t</h:selectBooleanCheckbox>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\">\r\n";
			strColumn+="\r\n\t\t\t\t\t\t</h:outputText>";
			strColumn+="\r\n\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
			//SELECCIONAR TODOS FIN
			
			
			//ID
			strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">";
			strColumn+="\r\n\t\t\t\t\t\t\t<h:outputText value=\"ID\"/>\r\n";
			strColumn+="\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" rendered=\"#{!"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".isEditarEnTabla}\">";
			strColumn+="\r\n\t\t\t\t\t\t</h:outputText>";
			
			strColumn+="\r\n\r\n\t\t\t\t\t\t<h:inputText id=\"txtId\" value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\"  rendered=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".isEditarEnTabla}\">";
			strColumn+="\r\n\t\t\t\t\t\t\t<rich:validator/>";
			strColumn+="\r\n\t\t\t\t\t\t\t<a4j:ajax event=\"change\" execute=\"@form\" listener=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".ejecutarAuxiliar"+GetNombreClaseC(column.Table.ToString())+"ParaAjaxPostBack}\" render=\""+GetNombreClaseObjetoC(column.Table.ToString())+"sAjaxWebPart\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(column.Table.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(column.Table.ToString())+"();\"/>";
			strColumn+="\r\n\t\t\t\t\t\t</h:inputText>";
			strColumn+="\r\n\r\n\t\t\t\t\t\t<rich:message  for=\"txtId\"/>";
							
			strColumn+="\r\n\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
			//ID FIN
		}		
		//strColumn+="\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";				
	} else {						
		if(!column.IsForeignKeyMember && column.DataType!=DbType.Boolean&&column.NativeType!="image"&&column.DataType!=DbType.Binary ) {
			if(!EsPathImagenDocumentoColumn(column)) {
				//strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"'";
				//strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
				
				if(!ConRichFaces) {	
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
				} else {
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column sortBy=\"#{"+strColumnName+"}\""+strOcultarColumna+">\r\n";
				}
						
				strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\""+strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
				strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"#{"+strColumnName+"}\" "+strRenderedControl+"/>\r\n";
				strColumn+="\r\n\t\t\t\t\t\t"+strControlHtml;
				strColumn+="\r\n\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
																
				//SOLO-CCFA , UTIL SOLO PARA CCFA
				
				if(blnEsTablaLatitudLongitud&&column.Name.Equals("Longitud")) {
					//Trace.WriteLine("OK");
				
					/*String strTipo=GetTipoColumnaClaseC(column);	
					String strPrefijo=GetPrefijoTipoC(column);	
					String strColumna=GetNombreColumnaClaseC(column);						
					String strPrefijoCampo="";					
					strPrefijoCampo=GetPrefijoTablaC().ToLower();					
					String strColumnName=GetNombreClaseObjetoC(column.Table.ToString())+"."+strPrefijoCampo+strPrefijo+strColumna;
					*/
					
					String strColumnNameLatitud=GetNombreClaseObjetoC(column.Table.ToString())+".latitud";
										
					strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
					strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">";
					strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"MAPA\"/>\r\n";
					strColumn+="\t\t\t\t\t\t</f:facet>\r\n";				
					//<h:inputText value="#{funcionesBeanFace.intPuertoWeb}" size="4" ondblclick="funcionGeneral.ejecutarGrugeMapasConsola('#{unidad.latitud}','#{unidad.longitud}',this.value,'WIN32')"/>
					strColumn+="\r\n\t\t\t\t\t\t<h:inputText value=\"#{funcionesBeanFace.intZoom}\" "+strRenderedControl+" size=\"4\" ondblclick=\"funcionGeneral.ejecutarGrugeMapasConsola('#{"+strColumnNameLatitud+"}','#{"+strColumnName+"}',this.value,'WIN32')\"/>\r\n";
					strColumn+="\r\n\t\t\t\t\t\t"+strControlHtml;
					strColumn+="\r\n\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
					
					strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
					strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">";
					strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"MAPA 2\"/>\r\n";
					strColumn+="\t\t\t\t\t\t</f:facet>\r\n";			
					strColumn+="\t\t\t\t\t\t<h:selectBooleanCheckbox   id=\"cbTipo\" value=\"true\" />\r\n";	
					//<h:inputText value="#{funcionesBeanFace.intPuertoWeb}" size="4" ondblclick="funcionGeneral.ejecutarGrugeMapasConsola('#{unidad.latitud}','#{unidad.longitud}',this.value,'WIN32')"/>
					//strColumn+="\r\n\t\t\t\t\t\t<h:inputText value=\"#{funcionesBeanFace.intZoom}\" size=\"4\" ondblclick=\"funcionGeneral.ejecutarGrugeMapasConsola('#{"+strColumnNameLatitud+"}','#{"+strColumnName+"}',this.value,'WIN32')\"/>\r\n";
					strColumn+="\r\n\t\t\t\t\t\t<h:commandButton value=\"MAPA 2\" onclick=\"funcionGeneral.ejecutarGrugeMapas2Consola('LATLONG','#{"+strColumnNameLatitud+"}','#{"+strColumnName+"}','WW',document.getElementById('frmTablaDatos"+GetNombreClaseC(column.Table.ToString())+":richDataTable"+GetNombreClaseC(column.Table.ToString())+":#{rowkey}:cbTipo'))\"/>\r\n";
					strColumn+="\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
					
					strColumn+="\r\n\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
					strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">";
					strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"MAPA ARCHIVO\"/>\r\n";
					strColumn+="\t\t\t\t\t\t</f:facet>\r\n";	
						
					strColumn+="\r\n\t\t\t\t\t\t<a4j:commandButton value=\"MAPA ARCHIVO\" action=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".generarGpxFileId}\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(column.Table.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(column.Table.ToString())+"();\"/>\r\n";
					strColumn+="\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
					
					strColumn+="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
					strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">";
					strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"MAPA ARCHIVO\"/>\r\n";
					strColumn+="\t\t\t\t\t\t</f:facet>\r\n";	
					strColumn+="\r\n\t\t\t\t\t\t<h:commandLink value=\"Mapa Archivo\" onclick=\"funcionGeneral.abrirLinkMapaTipo('ID','#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}','"+GetNombreClaseC(column.Table.ToString())+"')\"/>\r\n";
					strColumn+="\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
				}
				//SOLO-CCFA , UTIL SOLO PARA CCFA		
			} else {
				String strLabelLink="Imagen";
						
				if(EsPathDocumentoColumn(column)) {
					strLabelLink="Documento";
				}
						
				if(!ConRichFaces) {	
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
				} else {
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column sortBy=\"#{"+strColumnName+"}\""+strOcultarColumna+">\r\n";
				}
							
				strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\""+strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
				//strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"#{"+strColumnName+"}\"/>\r\n";
				strColumn+="\r\n\t\t\t\t\t\t<h:commandLink value=\""+strLabelLink+"\" onclick=\"funcionGeneral.abrirLink('#{"+strColumnName+"}')\"/>\r\n";
				
				strColumn+="\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";								
			}			
		} else if(column.DataType==DbType.Boolean) {
			/*
			strColumna= GetNombreColumnaClaseC(column);
			strColumna=strColumna.Replace(strId,"");
			strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
				
			strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Control'";
			strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";	
			*/
			strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column"+strOcultarColumna+">\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\""+strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>";
			strColumn+="\r\n\t\t\t\t\t\t<h:selectBooleanCheckbox value=\"#{"+strColumnName+"}\" disabled=\"true\" "+strRenderedControl+">";//strDisabledRenderedControl
			strColumn+="\r\n\t\t\t\t\t\t</h:selectBooleanCheckbox>\r\n";
			
			strColumn+=strControlHtml;
			
			strColumn+="\r\n\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";			
			
		} else if(column.IsForeignKeyMember) {
			if(!blnNoStandardTableFromProperties) {
				strColumna= GetNombreColumnaClaseC(column);
				strColumna=strColumna.Replace(strId,"");
				strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
					
				//strColumnName=/*"'"+*/GetNombreColumnaClaseJavaScriptC(column)/*+"Descripcion'"*/;
				//strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
				
				//PARA FOREIGN KEY USAR DESCRIPCION
				//SI SE QUIERE USAR LO ANTERIOR SIMPLEMENTE COMENTAR LA LINEA
				strColumnName=GetNombreClaseObjetoC(column.Table.ToString())+"."+GetNombreColumnaClaseFkDescripcionC(column);
				
				String strDisabled="";
				
				if( (EsColumnaVariableGlobalDataBaseFromPropertiesC(column) 
					|| EsColumnaVariableModuloGlobalC(column)
					)
					&& !EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(column)
					
				) {						
					strOcultarColumna=" rendered=\"#{"+strObjectFaceOnly+".isDeveloping}\"";
				}
				
				if(!ConRichFaces) {	
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
				} else {
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column sortBy=\"#{"+strColumnName+"}\""+strOcultarColumna+">\r\n";//strId
				}
											
				strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\""+strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
				strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"#{"+strColumnName+"}\" "+strRenderedControl+"/>\r\n";
				strColumn+="\r\n\t\t\t\t\t\t"+strControlHtml;
				strColumn+="\r\n\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";
			
			} else {
				if(!ConRichFaces) {	
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column>\r\n";
				} else {
					strColumn="\r\n\t\t\t\t\t<"+strPrefijoColumna+":column sortBy=\"#{"+strColumnName+"}\""+strOcultarColumna+">\r\n";
				}			
				
				strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\""+strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
				strColumn+="\r\n\t\t\t\t\t\t<h:outputText value=\"#{"+strColumnName+"}\" "+strRenderedControl+"/>\r\n";
				strColumn+="\r\n\t\t\t\t\t\t"+strControlHtml;
				strColumn+="\r\n\t\t\t\t\t</"+strPrefijoColumna+":column>\r\n";	
			}
			
		} else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow)) {
			if(esMantenimientoDeImagen) {
				strColumna= GetNombreColumnaClaseC(column);
				strColumna=strColumna.Replace(strId,"");
				strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
					
				strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Mostrar'";
				strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
			} else {
				strColumna= GetNombreColumnaClaseC(column);
				strColumna=strColumna.Replace(strId,"");
				strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
					
				strColumnName="'"+GetNombreColumnaClaseJavaScriptC(column)+"Actualizar'";
				strColumn="{ label :" +strColumnLabel+", id :"+strColumnName +"}";
			}
		}
	}	
			
	return strColumn;
}

public string GetColumnsTableMaintenanceC(TableSchema table)
{
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(table);
	String strColumnName="";
	String strColumnLabel="'"+GetTituloNombreTableFromPropertiesC(table)+strPlural+"'";
	String strColumn="";
			
	strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	strColumn=",{ label :" +strColumnLabel+", id :"+strColumnName+"}";
			
	return strColumn;
}

public string GetColumnsFacesTableMaintenanceC(TableSchema table,TableSchema tablaRelacionadaObjetivo,String strNombreAdicional,bool esParaForeignKey,bool ConFaces,bool ConRichFaces)
{
	//CUANDO TIENE MAS DE UN FK DE UNA MISMA TABLA ESTE ES EL NOMBRE ADICIONAL QUE LO DIFERENCIA strNombreAdicional
	
	if(esParaForeignKey) {
		return "";
	}
	
	String strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
	String strColumnName="";strColumnName+="";
	String strColumnLabel=""+GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo)+""+strNombreAdicional.ToUpper()+strPlural+"";
	String strColumn="";
			
	//strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	//strColumn=",{ label :" +strColumnLabel+", id :"+strColumnName+"}";
	
	
	if(ConFaces|| ConRichFaces) {
		String strObjectFace=GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces;
		
		if(!ConRichFaces){
			strColumn="\r\n\t\t\t\t\t<h:column>\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"" +strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t\t<h:commandLink action=\"#{detalleLibroBean.detalleLibro}\" value=\"" +strColumnLabel+"\" styleClass=\"link1\">\r\n";
			strColumn+="\t\t\t\t\t\t\t\t<f:setPropertyActionListener value=\"#{libro.id}\" target=\"#{detalleLibroBean.id}\" />\r\n";
			strColumn+="\t\t\t\t\t\t\t</h:commandLink>\r\n";
			strColumn+="\t\t\t\t\t</h:column>\r\n";
		} else {
			/*
			strColumn+="\t\t\t\t\t\t<a4j:region>\r\n";
			strColumn+="\t\t\t\t\t\t<h:outputText value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\">\r\n";
			//value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\"
			strColumn+="\r\n\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".seleccionar}\" image=\"/Imagenes/seleccionar.gif\" style=\" height : 18px;\">\r\n";
			strColumn+="\t\t\t\t\t\t\t<"+strActionParam+" name=\"idParametro\" value=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\" assignTo=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+strId+"}\" />\r\n";
			strColumn+="\t\t\t\t\t\t</a4j:commandButton>\r\n";
			strColumn+="\t\t\t\t\t\t</a4j:region>\r\n";
			*/
			
			strColumn="\r\n\t\t\t\t\t<rich:column rendered=\"#{"+strObjectFace+".isTienePermisos"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"}\" >\r\n";
			strColumn+="\t\t\t\t\t\t<f:facet name=\"header\">\r\n\t\t\t\t\t\t\t<h:outputText value=\"" +strColumnLabel+"\"/>\r\n\t\t\t\t\t\t</f:facet>\r\n";
			strColumn+="\r\n\t\t\t\t\t\t<a4j:region>\r\n";		
			strColumn+="\t\t\t\t\t\t\t<h:outputText value=\"#{"+GetNombreClaseObjetoC(table.ToString())+"."+strId+"}\"/>\r\n";						
			strColumn+="\r\n\t\t\t\t\t\t\t<a4j:commandButton action=\"#{"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+".registrarSesion"+GetNombreClaseC(table.ToString())+strNombreAdicional+"Para"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"}\" "+strReRender+"=\"auxiliar"+GetNombreClaseC(table.ToString())+"\" image=\"/Imagenes/"+GetRelativePathNavegacionFromModuleActualC(tablaRelacionadaObjetivo)+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strNombreAdicional.ToLower()+"s.gif\" style=\" height : 18px;\" onclick=\""+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(table.ToString())+"()\" oncomplete=\""+GetNombreClaseObjetoC(table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(table.ToString())+"()\">\r\n";
			if(!blnNoStandardTableFromProperties) {	
				strColumn+="\t\t\t\t\t\t\t\t<"+strActionParam+" name=\""+strId+"Parametro"+GetNombreClaseC(table.ToString())+"\" value=\"#{"+GetNombreClaseObjetoC(table.ToString())+"."+strId+"}\" assignTo=\"#{"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"."+strId+GetNombreClaseC(table.ToString())+"Actual}\" />\r\n";
			} else {
				strColumn+=GetNoStandardColumnsActionParamPKActualC(table);
			}
			strColumn+="\t\t\t\t\t\t\t</a4j:commandButton>\r\n";		
			strColumn+="\t\t\t\t\t\t</a4j:region>\r\n";
			strColumn+="\t\t\t\t\t</rich:column>\r\n";
			
		}
	}
	
	return strColumn;
}

public string GetNoStandardColumnsActionParamPKActualC(TableSchema table) {	
	String strColumn="";
	
	foreach(ColumnSchema columnSchema in columnSchemaCollectionPK) {
		strColumn+="\r\n\t\t\t\t\t\t\t<"+strActionParam+" name=\""+"parametro"+GetNombreCompletoLowerColumnaClaseC(columnSchema)+"\" value=\"#{"+GetNombreClaseObjetoC(table.ToString())+"."+GetNombreCompletoLowerColumnaClaseC(columnSchema)+"}\" assignTo=\"#{"+GetNombreClaseObjetoC(table.ToString())+strPrefijoJSFFaces+"."+GetNombreCompletoLowerColumnaClaseC(columnSchema)+GetNombreClaseC(table.ToString())+"Actual}\" />\r\n";
	}
	
	return strColumn;
}

public string GetActionsTableMaintenanceC(TableSchema table)
{
	ArrayList arrAccionExtendsProperty=new ArrayList();
	
	arrAccionExtendsProperty=GetAccionExtendsPropertyC(table);
	
	//String strPlural=GetPluralTituloNombreTableFromPropertiesC(table);
	String strColumn="";
	//String strColumnLabel="'"+GetTituloNombreTableFromPropertiesC(table)+strPlural+"'";
	String strColumns="";
			
	//strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	
	String strNombreCodigo="";
	String strNombreWebTitulo="";
	
	
	foreach(MeExtendProperty meExtendProperty in arrAccionExtendsProperty)
	{
		strNombreCodigo=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableNombreProperty);
		strNombreWebTitulo=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableWebNombreProperty);
		
		strColumn="{ label :'"+strNombreWebTitulo+"', id :'"+strNombreCodigo+"'}";
		
		strColumns+=","+strColumn;
		
		
	}
	
	return strColumns;
}

public string GetActionsImagenTableTableMaintenanceC(TableSchema table)
{
	ArrayList arrAccionExtendsProperty=new ArrayList();
	
	arrAccionExtendsProperty=GetAccionExtendsPropertyC(table);
	
	//String strPlural=GetPluralTituloNombreTableFromPropertiesC(table);
	String strColumn="";
	//String strColumnLabel="'"+GetTituloNombreTableFromPropertiesC(table)+strPlural+"'";
	String strColumns="";
			
	//strColumnName="'"+GetNombreClaseObjetoC(table.ToString()) +strPlural+"'";
	
	String strNombreCodigo="";
	String strNombreWebTitulo="";
	String strNombreFuncionJavaScript="";
	
	foreach(MeExtendProperty meExtendProperty in arrAccionExtendsProperty)
	{
		strNombreCodigo=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableNombreProperty);
		strNombreWebTitulo=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableWebNombreProperty);
		strNombreFuncionJavaScript=strNombreCodigo.Substring(0,1).ToUpper()+strNombreCodigo.Substring(1,strNombreCodigo.Length-1).ToLower();
		
		strColumn=strNombreCodigo+":\"<img src=\\\""+GetRelativePathC(table)+"Imagenes/Accion/"+strNombreCodigo.ToLower()+".jpg\\\" onClick=\\\""+GetNombreClaseObjetoC(table.ToString())+"PaginaWebInteraccionEventsAdditional."+strNombreFuncionJavaScript+"(\"+arrData"+GetNombreClaseC(table.ToString())+"s[i].id+\")\\\" width=\\\"40\\\" height=\\\"40\\\">\"";
		
		strColumns+=","+strColumn;
		
		
	}
	
	return strColumns;
}


public String GetFuncionesImagenesC(TableSchema TablaBase) 
		{
			String strFuncionesImagenes="";
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{				
				if((columnSchema.NativeType=="image"&&columnSchema.DataType==DbType.Binary&&columnSchema.Name!=strVersionRow)||(columnSchema.DataType==DbType.Binary&&columnSchema.Name!=strVersionRow))
				{
					
					//strFuncionesImagenes+="\r\nimport java.io.File;";
					strFuncionesImagenes+="\r\nimport java.util.Iterator;";
					strFuncionesImagenes+="\r\nimport java.util.List;";
					//strFuncionesImagenes+="\r\nimport java.io.FileInputStream;";
					strFuncionesImagenes+="\r\nimport org.apache.commons.fileupload.FileItem;";
					strFuncionesImagenes+="\r\nimport org.apache.commons.fileupload.FileItemFactory;";
					strFuncionesImagenes+="\r\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;";
					strFuncionesImagenes+="\r\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;";
				}
			}
			return strFuncionesImagenes;
		
		}

public String GetClassClasesForeigKeysC(TableSchema TablaBase) {
	return GetClassClasesForeigKeysC(TablaBase,"");
}

public String GetClassClasesForeigKeysC(TableSchema TablaBase,String strTab) 
		{
			String strTablaClaseRelacionada=string.Empty;
										
			ArrayList arrayListRelaciones=new ArrayList();
					
			if(!blnNoStandardTableFromProperties) {	
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)))) {
							continue;
						} else {
							arrayListRelaciones.Add(GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema)));
						}
						
						strTablaClaseRelacionada+="\r\n\t\t"+strTab+"classes.add(new Classe("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ ".class));";
					
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,GetNombreClaseC(tableSchemaForeignKey.ToString()))) {
							continue;
						} else {
							arrayListRelaciones.Add(GetNombreClaseC(tableSchemaForeignKey.ToString()));
						}
						
						strTablaClaseRelacionada+="\r\n\t\t"+strTab+"classes.add(new Classe("+GetNombreClaseC(tableSchemaForeignKey.ToString())+ ".class));";
											
				}
			}
			
				
			return strTablaClaseRelacionada; 
		}

	public String GetClassClasesRelacionadasC(TableSchema TablaBase) {
		return GetClassClasesRelacionadasC(TablaBase,"",false,false,false);
	}

	public String GetClassClasesRelacionadasC(TableSchema TablaBase,String strTab,bool conDefinirLogic,bool conInicializarLogic,bool conUsarLogic) {
			String strTablaClaseRelacionada=string.Empty;																							
			String strPlural="";
			String strNombreAdicional="";
			
			//Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			//FINAL			
			//ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(TablaBase);
			
			ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(TablaBase,true,false,false,true);
			
			//TableSchema tablaRelacionadaObjetivo;
			
			
				//foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
				foreach(TableSchema tablaRelacionadaObjetivo in tablasRelacionadasEncontradas) 
				{
					strPlural="s";
					//strNombreAdicional=GetDinamicoNombreAdicionalTableFromPropertiesC(tablaRelacionadaObjetivo);
					strNombreAdicional=GetDinamicoNombreAdicionalTableMeFromPropertiesC(tablaRelacionadaObjetivo);
					
					/*			
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
					{
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					}	
					else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
					{
						
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
						if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
					}
					else
					{
						continue;
					}
					*/
					
					if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo)) {
						continue;
					}
					
					if(!conDefinirLogic && !conInicializarLogic && !conUsarLogic) {
						strTablaClaseRelacionada+="\r\n\t\t"+strTab+"classes.add(new Classe("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+ ".class));";
					} else {
						if(conDefinirLogic) {
							strTablaClaseRelacionada+="\r\n\t\t"+strTab+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+ "Logic "+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+ "Logic=new "+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"Logic();";
						
						} else if(conInicializarLogic) {
							strTablaClaseRelacionada+="\r\n\r\n\t\t"+strTab+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+ "Logic.setConnexion(this.getConnexion());";
							strTablaClaseRelacionada+="\r\n\t\t"+strTab+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+ "Logic.setDatosCliente(this.datosCliente);";
							strTablaClaseRelacionada+="\r\n\t\t"+strTab+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+ "Logic.setIsConRefrescarForeignKeys(true);";
						
						} else if(conUsarLogic) {
							//if(GetDinamicoUnoAUnoTableFromPropertiesC(tablaRelacionadaObjetivo)) {
							if(TieneDinamicoUnoAUnoTableFromPropertiesC(tablaRelacionadaObjetivo)) {
								//tablaRelacionadaObjetivo.Name+"-"+
								//Trace.WriteLine(TablaBase.Name+"-"+tablaRelacionadaObjetivo.Name);
								//Trace.WriteLine(tablaRelacionadaObjetivo.Description);								
								strPlural="";
							}
							
							strTablaClaseRelacionada+="\r\n\r\n\t\t"+strTab+"classes=new ArrayList<Classe>();";
							strTablaClaseRelacionada+="\r\n\t\t"+strTab+"classes="+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.getClassesForeignKeysOf"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"(new ArrayList<Classe>(),DeepLoadType.NONE);";														
							
							strTablaClaseRelacionada+="\r\n\r\n\t\t"+strTab+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+ "Logic.set"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural+"("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strNombreAdicional+strPlural+");";
							strTablaClaseRelacionada+="\r\n\t\t"+strTab+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+ "Logic.deepLoad"+strPlural+"(false, DeepLoadType.INCLUDE, classes, \"\");";
						}
					}					
				}
				
			return strTablaClaseRelacionada; 
		}
		
	public bool TieneClasesRelacionadasFinalC(TableSchema TablaBase) {
		String strTablaClaseRelacionada=string.Empty;																							
		bool tiene=false;
			
		//Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(TablaBase);
		//TableSchema tablaRelacionadaObjetivo;
							
		//foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
		foreach(TableSchema tablaRelacionadaObjetivo in tablasRelacionadasEncontradas) {										
			if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo)) {
				continue;
			}
					
			tiene=true;				
			break;
		}
				
		return tiene; 
	}
		
public String GetNavegacionTituloTablaTablasClasesRelacionadasC(TableSchema table) 
		{
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}
				else
				{
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				
									
				if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo))
				{
					continue;
				}
				
				
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{
					
					
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name))
					{
						encontrado=true;
					}
				}
				
				
				if(!encontrado)
				{
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetColumnsTableMaintenanceC(tablaRelacionadaObjetivo);
				}
				
					
				
			}
								
			return strTablaClaseRelacionada; 
		}

public /*Hashtable*/ArrayList GetOrdenTablasRelacionadasC(TableSchema table,Hashtable tablasRelacionadas) 
		{
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadasOrden = new Hashtable();
			ArrayList arrLisTtablasRelacionadasOrden=new ArrayList();
			
			TableSchema tablaRelacionadaObjetivo;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String[] strClases;
			String strNombreAdicional="";
			String strClasesNoRelacionadas="";
			bool blClaseNo=false;
			//CollectionInfo collectionInfo=null;
			
			strClasesNoRelacionadas=GetNombresClasesOrdenNavegacionFromTableFromPropertiesC(table);
			String strKey="";
			String strKeyOrden="";
			Object value=null;
			int count=0;
			
			Hashtable hashtableRelacionadasFinal=new Hashtable();
			
			List<string> listRelacionadas = new List<string>();
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
				listRelacionadas.Add(collectionInfo.PkIdxName);
			}
			
			listRelacionadas.Sort();//(StringComparer.CurrentCulture);
			//listRelacionadas.Reverse();
			
			
			foreach(String strRelacionada in listRelacionadas) {
				//Trace.WriteLine(strRelacionada);
				
				foreach(DictionaryEntry dictionaryEntryRelacionada in tablasRelacionadas) {
					CollectionInfo collectionInfo=(CollectionInfo)dictionaryEntryRelacionada.Value;
					
					if(strRelacionada.Equals(collectionInfo.PkIdxName)) {
						//dictionaryEntryRelacionada.Key
						//CAMBIO DE KEY
						//Trace.WriteLine(collectionInfo.PkIdxName);
						//hashtableRelacionadasFinal.Add(collectionInfo.PkIdxName,dictionaryEntryRelacionada.Value);
						arrLisTtablasRelacionadasOrden.Add(collectionInfo);
						break;
					}
				}
				
				count++;
			}
			
			/*
			if(!strClasesNoRelacionadas.Equals("")) {
				strClases=strClasesNoRelacionadas.Split(',');
					
				blClaseNo=false;
					
				foreach(String strClase in strClases) {
					//foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)	{
					foreach (DictionaryEntry dictionaryEntry in tablasRelacionadas) {
						strKey=dictionaryEntry.Key.ToString();
						value=tablasRelacionadas[strKey];
						collectionInfo=(CollectionInfo)value;
						
						if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
							tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
							tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
						} else {	
							tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
						}
						
						if(strClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))) {
							tablasRelacionadasOrden.Add(strKey,collectionInfo);//count.ToString()+"_"+
							arrLisTtablasRelacionadasOrden.Add(collectionInfo);
							count++;
							//Trace.WriteLine(strClase);
							//blClaseNo=true;
							//break;
						}
					}
				}
				
				bool blnExiste=false;
				
				foreach (DictionaryEntry dictionaryEntry in tablasRelacionadas) {
					blnExiste=false;
					
					strKey=dictionaryEntry.Key.ToString();
					value=tablasRelacionadas[strKey];
					collectionInfo=(CollectionInfo)value;
						
					foreach (DictionaryEntry dictionaryEntryOrden in tablasRelacionadasOrden) {
						strKeyOrden=dictionaryEntryOrden.Key.ToString();
						
						if(strKey.Equals(strKeyOrden)) {
						//if(strKeyOrden.Contains(strKey)) {
							//Trace.WriteLine(strKey);
							blnExiste=true;
						}
					}
										
					if(!blnExiste) {
						//Trace.WriteLine(strKey);
						tablasRelacionadasOrden.Add(strKey,collectionInfo);//count.ToString()+"_"+
						arrLisTtablasRelacionadasOrden.Add(collectionInfo);
						count++;
					}
				}
							
				//if(blClaseNo) {
					//continue;
				//}
			} else {
				//Trace.WriteLine("asdf");
				//return tablasRelacionadas;
				foreach (DictionaryEntry dictionaryEntry in tablasRelacionadas) {	
					strKey=dictionaryEntry.Key.ToString();
					value=tablasRelacionadas[strKey];
					collectionInfo=(CollectionInfo)value;
					
					tablasRelacionadasOrden.Add(strKey,collectionInfo);//count.ToString()+"_"+
					arrLisTtablasRelacionadasOrden.Add(collectionInfo);					
				}
				
				return arrLisTtablasRelacionadasOrden;
			}
			*/
			
			//Trace.WriteLine("------------------");
			
			foreach (DictionaryEntry dictionaryEntry in tablasRelacionadas) { //tablasRelacionadasOrden
				strKey=dictionaryEntry.Key.ToString();
				//Trace.WriteLine(strKey);
			}
			
			//return tablasRelacionadasOrden;			
			
			return arrLisTtablasRelacionadasOrden;
		}
		
public String GetNavegacionTituloTablaFacesTablasClasesRelacionadasC(TableSchema table,bool esParaForeignKey,bool ConFaces,bool ConRichFaces) 
		{
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
			ArrayList arrayListTablasRelacionadas=GetOrdenTablasRelacionadasC(table,tablasRelacionadas);
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blClaseNo=false;
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			//foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			foreach(CollectionInfo collectionInfo in arrayListTablasRelacionadas)
			{
				strNombreAdicional="";

				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;				
				}
				else
				{	
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				
				
				if(collectionInfo.CollectionRelationshipType!=RelationshipType.OneToOne) {
					//CON DESORDEN NO FUNCIONA
						
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					
					/*
					if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.SecondaryTable)) {
						//continue;
						//TOMA EL NOMBRE RESTANTE DE LA COLUMNA MAS DE 1 FOREIGN KEY DE UNA TABLA
						strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					} else {
						strNombreAdicional="";
						arrayListRelaciones.Add(collectionInfo.SecondaryTable);
					}	
					*/
				} else {
					strNombreAdicional="";
				}
						
					
				if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo))
				{
					continue;
				}
				
				
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{	//&&strNombreAdicional.Equals("") SI NO ES VACIO SE PUEDE TRATAR DE MAS DE UNA RELACION FOREIGN KEY HACIA UNA TABLA
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)&&strNombreAdicional.Equals(""))
					{
						encontrado=true;
					}
				}
				
				//Trace.WriteLine(encontrado.ToString());
				//Trace.WriteLine("Tabla: " + tablaRelacionadaObjetivo.Name);
				
				
				if(!encontrado)
				{				
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=GetColumnsFacesTableMaintenanceC(table,tablaRelacionadaObjetivo,strNombreAdicional,esParaForeignKey,ConFaces,ConRichFaces);
				}
			}
								
			return strTablaClaseRelacionada; 
		}


	public string GetControlVariablesC(ColumnSchema column,bool ConFaces,bool ConRichFaces,bool blnIniciaFila,bool blnTerminaFila,int intColumnasFormulario,int intColumnasRellenar,String RichFaces_Version) {			
		String strControl="";
		String strTituloControl="";
		String strOcultarColumna="";//"visibility:visible";
		bool blnConOcultarColumna=false;
		String strTabOculto="";
		
		//VISIBILIDAD COLUMNA
		if(!GetConSeguridadColumnFromPropertiesC(column)) {			
			if(GetNoInsertEditColumnFromPropertiesC(column)) {
				strOcultarColumna="visibility:hidden;display:none";
				blnConOcultarColumna=true;
			}
			
			if(column.Name.Equals(strId) && GetIdNoVisibleColumnFromPropertiesC(column) && TieneIdentityColumnC(column)) {
				strOcultarColumna="visibility:hidden;display:none";
				blnConOcultarColumna=true;
			}
		} else {
			blnConOcultarColumna=true;			 
			
			String strSufijoVariables=GetNombreClaseC(column.Table.ToString())+ GetNombreColumnaClaseC(column);		
			String strObjectFace="";
			
			if(ConFaces||ConRichFaces) {
				strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
			}
			
			strOcultarColumna="${"+strObjectFace+".sPermisoCssAuxiliar"+strSufijoVariables+"}";
		}
		
		if(blnConOcultarColumna) {
			//strTabOculto="\t\t";
		}
		
		//VISIBILIDAD COLUMNA
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
				
		} else if(column.Name.Equals(strId)) {			
			//Trace.WriteLine(strTabOculto+"---");
			
			if(!ConFaces&&!ConRichFaces) {
				strControl="\r\n\t\t\t\t\t\t<td>"+"<input name=\"hdnIdActual\" type=\"text\" readonly=\"readonly\">"+"\r\n\t\t\t\t\t\t</td>";
			} else {
				String strObjectFace="";
				
				if(ConFaces||ConRichFaces) {
					strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
				}
				
				strControl="\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t";
				strControl+="\r\n\t\t\t\t\t\t\t<h:inputHidden id=\"maximumSeverity"+GetNombreClaseC(column.Table.ToString())+"\" value=\"#{"+strObjectFace+".maximumSeverity}\"/>";
				
				if(TieneIdentityColumnC(column)) {
					strControl+="\r\n\r\n\t\t\t\t\t\t\t<h:inputHidden id=\"hdnIdActual\"  value=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\"/>";
					//strControl+="\r\n\t\t\t\t\t\t\t<h:inputHidden id=\"maximumSeverity\" value=\"#{"+strObjectFace+".maximumSeverity}\"/>";
				
				} else {
					strControl+="\r\n\r\n\t\t\t\t\t\t\t<h:inputText id=\"hdnIdActual\"  value=\"#{"+strObjectFace+"."+GetNombreClaseObjetoC(column.Table.ToString())+"."+strId+"}\">";
					strControl+="\r\n\t\t\t\t\t\t\t\t<f:convertNumber integerOnly=\"true\" type=\"number\" />";
					strControl+="\r\n\t\t\t\t\t\t\t\t<f:validateRequired/>";
					strControl+="\r\n\t\t\t\t\t\t\t\t<f:ajax event=\"blur\" render=\"msgHdnIdActual\"/>";//	frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+"		execute=\"@form\" 
					strControl+="\r\n\t\t\t\t\t\t\t</h:inputText>";
					strControl+="\r\n\t\t\t\t\t\t\t<rich:message id=\"msgHdnIdActual\" for=\"hdnIdActual\" ajaxRendered=\"true\"/>";
				}
				
				strControl+="\r\n\t\t\t\t\t\t</td>";
				
				//Trace.WriteLine(intColumnasFormulario);
				//Trace.WriteLine(intColumnasRellenar);
			}								
		} else {
			//VERSION 1
			/*
			if(ConFaces||ConRichFaces) {
				if(column.Name.Equals(strVersionRow)) {
					strControl="<td></td>";//return string.Empty;
				}
			}
			*/
			
			//SINO SE PONE ESTO NO SE CIERRA <tr>
			if(column.Name.Equals(strVersionRow)) {
				strControl="\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t</td>";//return string.Empty;
			} else {
				strControl="\r\n\t\t\t\t\t\t<td>"+GetControlHtml(column,ConFaces,ConRichFaces,RichFaces_Version)+"\r\n\t\t\t\t\t\t</td>";			
			}
		}
				
		strTituloControl=GetTituloControlVariablesC(column,strTabOculto);
		
		
		String strReturn="";
		String strIniciaFila="";
		String strTerminaFila="";
		String strColumnasRellenar="";
		
		if(blnIniciaFila) {
			strIniciaFila="<tr>";
		}
		
		if(blnTerminaFila) {
			strTerminaFila="\r\n\t\t\t\t\t</tr>";
		}
		
		if(intColumnasRellenar>0) {
			for(int i=0;i<intColumnasRellenar;i++) {
				strColumnasRellenar+="\r\n\t\t\t\t\t\t<td>";
				strColumnasRellenar+="\r\n\t\t\t\t\t\t</td>";
				strColumnasRellenar+="\r\n\r\n\t\t\t\t\t\t<td>";
				strColumnasRellenar+="\r\n\t\t\t\t\t\t</td>";
			}
		}
		
		
		
		String strExtraAdicional=GetExtraAdicionalCampoFormularioC(column);
		
		if(!blnConOcultarColumna) {
			strReturn="\r\n\t\t\t\t\t"+strIniciaFila+strTituloControl+strControl+"\r\n\t\t\t\t\t"+strColumnasRellenar+strTerminaFila+strExtraAdicional;
			
		} else {
			//colspan=\""+intColumnasFormulario+"\"
			strReturn="\r\n\t\t\t\t\t"+strIniciaFila;
			strReturn+="\r\n\t\t\t\t\t<td>";
			strReturn+="\r\n\t\t\t\t\t\t<table>";
			strReturn+="\r\n\r\n\t\t\t\t\t\t<tr style=\""+strOcultarColumna+"\">"+strTituloControl+""+strControl+"\r\n\t\t\t\t\t";
			strReturn+="\r\n\t\t\t\t\t\t</tr>";
			strReturn+="\r\n\r\n\t\t\t\t\t\t</table>";
			strReturn+="\r\n\t\t\t\t\t</td>"+strColumnasRellenar+strTerminaFila+strExtraAdicional;
			
			//TALVEZ (No necesariamente deberia cerrarse con !blnTerminaFila)
			/*
			if(!blnTerminaFila){
				strReturn+="\r\n\t\t\t\t\t</tr>\r\n";
			}
			*/
		}
		
		return strReturn;
	}
	
	public string GetExtraAdicionalCampoFormularioC(ColumnSchema column)
	{
		String strExtraAdicional="";
		
		if(column.Name.Equals("Longitud")) {
			strExtraAdicional="<tr><td>";
			strExtraAdicional+="<span class=\"elementotitulocampo\">AMPLITUD:</span><h:inputText  id=\"txtAmpliacion\" maxlength=\"15\" ></h:inputText></td>";
			strExtraAdicional+="<td><input name=\"btnVerMapa\" type=\"button\" value=\"MAPA\" onclick=\"funcionGeneral.ejecutarGrugeMapasConsola(document.getElementById('frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+":txtLatitud').value,document.getElementById('frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+":txtLongitud').value,document.getElementById('frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+":txtAmpliacion').value,'WIN32')\"/>";
			strExtraAdicional+="</td></tr>";
		}
		
		return strExtraAdicional;
		
	}
	
	public string GetNombreTituloControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk) {	
		String strTituloControl="";
		String strPreColumn="";
		String strNombreLabelId="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
		} else if(column.Name.Equals(strId) && !esParaFk) {
			if(strIndexName=="") {
				//strTituloControl=1jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+strIndexName+strFinalName+"";
				
				//DESCOMENTAR PARA ANTERIOR
				//strNombreLabelId=GetNombreColumnaClaseC(column);
				
				/*
				if(TieneIdentityColumnC(column)) {
					strNombreLabelId=strIdGetSet;
				}
				*/
				
				strNombreLabelId=strIdGetSet;
				
				strTituloControl="jLabel"+strNombreLabelId+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
			} else {
				//strTituloControl="jLabel"+strIdGetSet+strIdGetSet+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
				strTituloControl="jLabel"+GetNombreColumnaClaseC(column)+strIndexName+GetNombreClaseC(column.Table.ToString())+strFinalName+"";
			}
		} else {			
			if(column.Name.Equals(strVersionRow)) {
				return string.Empty;
			}
			/*
			TableSchema tableSchemaFk=null;
			
			if(!column.IsForeignKeyMember) {
				strPreColumn=GetNombreColumnaClaseC(column);
			} else {
				tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
				strPreColumn=strIdGetSet+GetNombreClaseC(tableSchemaFk.ToString());
			}	
			*/
			
			if(strIndexName=="") {
				strTituloControl="jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
			} else {
				strTituloControl="jLabel"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		}
		
		return strTituloControl;
	}
	
	public string GetNombrePanelControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk) {	
		String strTituloControl="";
		String strPreColumn="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
		} else if(column.Name.Equals(strId) && !esParaFk) {
			if(strIndexName=="") {
				strTituloControl="jPanel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
				//strTituloControl="jPanel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+strIndexName+strFinalName+"";
			} else {
				strTituloControl="jPanel"+strIdGetSet+strIdGetSet+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		} else {			
			if(column.Name.Equals(strVersionRow)) {
				return string.Empty;
			}
			/*
			TableSchema tableSchemaFk=null;
			
			if(!column.IsForeignKeyMember) {
				strPreColumn=GetNombreColumnaClaseC(column);
			} else {
				tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
				strPreColumn=strIdGetSet+GetNombreClaseC(tableSchemaFk.ToString());
			}	
			*/
			
			if(strIndexName=="") {
				strTituloControl="jPanel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
			} else {
				strTituloControl="jPanel"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		}
		
		return strTituloControl;
	}
	
	public string GetNombreBorderControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk) {	
		String strTituloControl="";
		
		strTituloControl=GetNombreBorderControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk,false);
		
		return strTituloControl;
	}
	
	public string GetNombreBorderControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool paraGetSet) {	
		String strTituloControl="";
		String strPreColumn="";
		String sLetraInicial="r";
		
		if(paraGetSet) {
			sLetraInicial="R";
		}
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
				
		} else if(column.Name.Equals(strId) && !esParaFk) {
			if(strIndexName=="") {
				strTituloControl=sLetraInicial+"esaltar"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
				//strTituloControl="jPanel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+strIndexName+strFinalName+"";
			} else {
				strTituloControl=sLetraInicial+"esaltar"+strIdGetSet+strIdGetSet+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		} else {			
			if(column.Name.Equals(strVersionRow)) {
				return string.Empty;
			}
			/*
			TableSchema tableSchemaFk=null;
			
			if(!column.IsForeignKeyMember) {
				strPreColumn=GetNombreColumnaClaseC(column);
			} else {
				tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
				strPreColumn=strIdGetSet+GetNombreClaseC(tableSchemaFk.ToString());
			}	
			*/
			
			if(strIndexName=="") {
				strTituloControl=sLetraInicial+"esaltar"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
			} else {
				strTituloControl=sLetraInicial+"esaltar"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		}
		
		return strTituloControl;
	}
	
	public string GetNombreVisibilidadControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk) {	
		String strTituloControl="";
		
		strTituloControl=GetNombreVisibilidadControlVariablesSwingC( column, strIndexName, strFinalName, esParaFk,false);
		
		return strTituloControl;
	}
	
	public string GetNombreVisibilidadControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool paraGetSet) {	
		String strTituloControl="";
		String strPreColumn="";
		
		String sLetraInicial="m";
		
		if(paraGetSet) {
			sLetraInicial="M";
		}
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
				
		} else if(column.Name.Equals(strId) && !esParaFk) {
			if(strIndexName=="") {
				strTituloControl=sLetraInicial+"ostrar"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
				//strTituloControl="jPanel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+strIndexName+strFinalName+"";
			} else {
				strTituloControl=sLetraInicial+"ostrar"+strIdGetSet+strIdGetSet+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		} else {			
			if(column.Name.Equals(strVersionRow)) {
				return string.Empty;
			}
			/*
			TableSchema tableSchemaFk=null;
			
			if(!column.IsForeignKeyMember) {
				strPreColumn=GetNombreColumnaClaseC(column);
			} else {
				tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
				strPreColumn=strIdGetSet+GetNombreClaseC(tableSchemaFk.ToString());
			}	
			*/
			
			if(strIndexName=="") {
				strTituloControl=sLetraInicial+"ostrar"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
			} else {
				strTituloControl=sLetraInicial+"ostrar"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		}
		
		return strTituloControl;
	}
	
	public string GetNombreHabilitarControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk) {	
		String strTituloControl="";
	
		strTituloControl=GetNombreHabilitarControlVariablesSwingC(column, strIndexName, strFinalName, esParaFk,false);
		
		return strTituloControl;
	}
	
	public string GetNombreHabilitarControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool paraGetSet) {	
		String strTituloControl="";
		String strPreColumn="";
		
		String sLetraInicial="a";
		
		if(paraGetSet) {
			sLetraInicial="A";
		}
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
		} else if(column.Name.Equals(strId) && !esParaFk) {
			if(strIndexName=="") {
				strTituloControl=sLetraInicial+"ctivar"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
				//strTituloControl="jPanel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+strIndexName+strFinalName+"";
			} else {
				strTituloControl=sLetraInicial+"ctivar"+strIdGetSet+strIdGetSet+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		} else {			
			if(column.Name.Equals(strVersionRow)) {
				return string.Empty;
			}
			/*
			TableSchema tableSchemaFk=null;
			
			if(!column.IsForeignKeyMember) {
				strPreColumn=GetNombreColumnaClaseC(column);
			} else {
				tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
				strPreColumn=strIdGetSet+GetNombreClaseC(tableSchemaFk.ToString());
			}	
			*/
			
			if(strIndexName=="") {
				strTituloControl=sLetraInicial+"ctivar"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
			} else {
				strTituloControl=sLetraInicial+"ctivar"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		}
		
		return strTituloControl;
	}
	
	public string GetNombreConCargarControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk) {	
		String strTituloControl="";
		
		strTituloControl=GetNombreConCargarControlVariablesSwingC( column, strIndexName, strFinalName, esParaFk,false);
		
		return strTituloControl;
	}
	
	public string GetNombreConCargarControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool paraGetSet) {	
		String strTituloControl="";
		String strPreColumn="";
		
		String sLetraInicial="c";
		
		if(paraGetSet) {
			sLetraInicial="C";
		}
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
				
		} else if(column.Name.Equals(strId) && !esParaFk) {
			if(strIndexName=="") {
				strTituloControl=sLetraInicial+"argar"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
				//strTituloControl="jPanel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+strIndexName+strFinalName+"";
			} else {
				strTituloControl=sLetraInicial+"argar"+strIdGetSet+strIdGetSet+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		} else {			
			if(column.Name.Equals(strVersionRow)) {
				return string.Empty;
			}
			/*
			TableSchema tableSchemaFk=null;
			
			if(!column.IsForeignKeyMember) {
				strPreColumn=GetNombreColumnaClaseC(column);
			} else {
				tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
				strPreColumn=strIdGetSet+GetNombreClaseC(tableSchemaFk.ToString());
			}	
			*/
			
			if(strIndexName=="") {
				strTituloControl=sLetraInicial+"argar"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
			} else {
				strTituloControl=sLetraInicial+"argar"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		}
		
		return strTituloControl;
	}
	
	public string GetNombreConEventDependControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk) {	
		String strTituloControl="";
		String strPreColumn="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
		} else if(column.Name.Equals(strId) && !esParaFk) {
			if(strIndexName=="") {
				strTituloControl="event_depend"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
				//strTituloControl="jPanel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+strIdGetSet+strIndexName+strFinalName+"";
			} else {
				strTituloControl="event_depend"+strIdGetSet+strIdGetSet+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		} else {			
			if(column.Name.Equals(strVersionRow)) {
				return string.Empty;
			}
			/*
			TableSchema tableSchemaFk=null;
			
			if(!column.IsForeignKeyMember) {
				strPreColumn=GetNombreColumnaClaseC(column);
			} else {
				tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
				strPreColumn=strIdGetSet+GetNombreClaseC(tableSchemaFk.ToString());
			}	
			*/
			
			if(strIndexName=="") {
				strTituloControl="event_depend"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName+"";
			} else {
				strTituloControl="event_depend"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"";
			}
		}
		
		return strTituloControl;
	}
	
	public string GetNombreControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName){			
		String strControl=GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,false);		
			
		return strControl;
	}
	
	public String GetDefinirBorderVisibilidadElementosSwingTablaClaseC(TableSchema TablaBase,bool esParaSwing) {
		String strSwing="";
			
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(TablaBase.Columns[i].Name.Equals(strVersionRow)) {
				continue;
			}
			
			//if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing+=GetDefinirBorderVisibilidadControlVariablesSwingC(TablaBase.Columns[i],"","",false,esParaSwing);
			//}
		}			
		
		return strSwing;
}

public string GetDefinirBorderVisibilidadControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool esParaSwing) {			
	String strControl="";
	String strTrueFalse="true";
	String sColumnName=GetNombreCompletoColumnaClaseC(column);//column.Name;
	String strBorderBoolean="Border"+strSwtMe;
	
	if(!esParaSwing) {
		//strBorderBoolean="Boolean";
	}
	
	TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
	
	String strTrueFalseActivar="true";
	String strTrueFalseEventDepend="false";
	
	if(GetNoInsertEditColumnFromPropertiesC(column) || GetReadOnlyColumnFromPropertiesC(column)) {
		 strTrueFalseActivar="false";
	}
	
	if(EsDateColumn(column)) {
		if(ConFechaSistemaDatabaseFromPropertiesC(column.Table.Database)) {
			if(!GetEsReporteParametroFromPropertiesC(column) 
				&& !column.Name.Contains("Servidor")
				&& !GetSiInsertEditColumnFromPropertiesC(column)) {
					
				strTrueFalseActivar="false";
			}
		}
	}						
			
	//if(esParaSwing) {
	strControl+="\r\n\tpublic "+strBorderBoolean+" "+GetNombreBorderControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"=null;";			
	//}
	
	strControl+="\r\n\tpublic Boolean "+GetNombreVisibilidadControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"=true;";			
	strControl+="\r\n\tpublic Boolean "+GetNombreHabilitarControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"="+strTrueFalseActivar+";";
		
	if(column.IsForeignKeyMember) {
		if(GetConNoLoadForeignKeyColumnFromPropertiesC(column) || GetConNoLoadForeignKeyTableFromPropertiesC(tableSchemaFk)) {
			strTrueFalse="false";
		}
		
		if(GetConEventDependColumnFromPropertiesC(column)!="") {
			strTrueFalseEventDepend="true";
		}
				
		strControl+="\r\n\tpublic Boolean "+GetNombreConCargarControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"="+strTrueFalse+";//ConNoLoadForeignKeyColumnOTable=false";	
		strControl+="\r\n\tpublic Boolean "+GetNombreConEventDependControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"="+strTrueFalseEventDepend+";//ConEventDepend=true\r\n";	
		
	} else {
		strControl+="\r\n";
	}
	
	return strControl;	
}

public String GetSetBorderVisibilidadElementosSwingTablaClaseC(TableSchema TablaBase,bool esParaSwing) {
		String strSwing="";
			
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(TablaBase.Columns[i].Name.Equals(strVersionRow)) {
				continue;
			}
			
			//if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing+=GetDefinicionBorderVisibilidadControlVariablesSwingC(TablaBase.Columns[i],"","",false,TablaBase,esParaSwing);
			//}
		}			
		
		return strSwing;
}

public string GetDefinicionBorderVisibilidadControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,TableSchema TablaBase,bool esParaSwing) {			
	String strControl="";
	String sColumnName=GetNombreCompletoColumnaClaseC(column);//column.Name;
	
	String strBorderBoolean="Border"+strSwtMe;
	
	if(!esParaSwing) {
		//strBorderBoolean="Boolean";
	}
	
	//if(esParaSwing) {
		//strSufijoVersion+"BeanSwingJInternalFrame
		strControl="\r\n\r\n\tpublic Border set"+GetNombreBorderControlVariablesSwingC(column,"","",false,true)+"(ParametroGeneralUsuario parametroGeneralUsuario/*"+GetNombreClaseC(TablaBase.ToString())+strPrefijoJSFFacesOBeanJInternalFrame+" "+GetNombreClaseObjetoC(TablaBase.ToString())+"BeanSwingJInternalFrame*/) {";	
		strControl+="\r\n\t\tBorder"+strSwtMe+" borderResaltar=Funciones2.getBorderResaltar(parametroGeneralUsuario,\"COLUMNA\");";
		strControl+="\r\n\t\t"+strCommentMinCodigoWebIni+sCoWebExpIni;
		
		if(esParaSwing) {
			strControl+="\r\n\t\t//"+GetNombreClaseObjetoC(TablaBase.ToString())+"BeanSwingJInternalFrame.jTtoolBar"+GetNombreClaseC(TablaBase.ToString())+".setBorder(borderResaltar);";
		}
		
		strControl+="\r\n\t\t"+strCommentMinCodigoWebFin+sCoWebExpFin;
		strControl+="\r\n\t\tthis."+GetNombreBorderControlVariablesSwingC(column,"","",false)+"= borderResaltar;";		
		strControl+="\r\n\r\n\t\treturn borderResaltar;";
		strControl+="\r\n\t}";
	//}
	
	strControl+="\r\n\r\n\tpublic "+strBorderBoolean+" get"+GetNombreBorderControlVariablesSwingC(column,"","",false)+"() {";	
	strControl+="\r\n\t\treturn this."+GetNombreBorderControlVariablesSwingC(column,"","",false)+";";		
	strControl+="\r\n\t}";
	
	strControl+="\r\n\r\n\tpublic void set"+GetNombreBorderControlVariablesSwingC(column,"","",false,true)+"("+strBorderBoolean+" borderResaltar) {";	
	strControl+="\r\n\t\tthis."+GetNombreBorderControlVariablesSwingC(column,"","",false)+"= borderResaltar;";		
	strControl+="\r\n\t}";	
	
	strControl+="\r\n\r\n\tpublic Boolean get"+GetNombreVisibilidadControlVariablesSwingC(column,"","",false,true)+"() {";	
	strControl+="\r\n\t\treturn this."+GetNombreVisibilidadControlVariablesSwingC(column,"","",false)+";";		
	strControl+="\r\n\t}";
	
	strControl+="\r\n\r\n\tpublic void set"+GetNombreVisibilidadControlVariablesSwingC(column,"","",false,true)+"(Boolean "+GetNombreVisibilidadControlVariablesSwingC(column,"","",false)+") {";	
	strControl+="\r\n\t\tthis."+GetNombreVisibilidadControlVariablesSwingC(column,"","",false)+"= "+GetNombreVisibilidadControlVariablesSwingC(column,"","",false)+";";		
	strControl+="\r\n\t}";
	
	strControl+="\r\n\r\n\tpublic Boolean get"+GetNombreHabilitarControlVariablesSwingC(column,"","",false,true)+"() {";	
	strControl+="\r\n\t\treturn this."+GetNombreHabilitarControlVariablesSwingC(column,"","",false)+";";		
	strControl+="\r\n\t}";
	
	strControl+="\r\n\r\n\tpublic void set"+GetNombreHabilitarControlVariablesSwingC(column,"","",false,true)+"(Boolean "+GetNombreHabilitarControlVariablesSwingC(column,"","",false)+") {";	
	strControl+="\r\n\t\tthis."+GetNombreHabilitarControlVariablesSwingC(column,"","",false)+"= "+GetNombreHabilitarControlVariablesSwingC(column,"","",false)+";";		
	strControl+="\r\n\t}";
	
	if(column.IsForeignKeyMember) {
		strControl+="\r\n\r\n\tpublic Boolean get"+GetNombreConCargarControlVariablesSwingC(column,"","",false,true)+"() {";	
		strControl+="\r\n\t\treturn this."+GetNombreConCargarControlVariablesSwingC(column,"","",false)+";";		
		strControl+="\r\n\t}";
		
		strControl+="\r\n\r\n\tpublic void set"+GetNombreConCargarControlVariablesSwingC(column,"","",false,true)+"(Boolean "+GetNombreConCargarControlVariablesSwingC(column,"","",false)+") {";	
		strControl+="\r\n\t\tthis."+GetNombreConCargarControlVariablesSwingC(column,"","",false)+"= "+GetNombreConCargarControlVariablesSwingC(column,"","",false)+";";		
		strControl+="\r\n\t}";
	}
	
	return strControl;	
}

public String GetSetLoteVisibilidadElementosSwingTablaClaseC(TableSchema TablaBase,bool esParaVisibilidad,bool esParaHabilitar,bool esParaBorder) {
		String strSwing="";
		String strSwing1="";
		String strSwing2="";
		
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(TablaBase.Columns[i].Name.Equals(strVersionRow)) {
				continue;
			}
			
			//if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing1+=GetDefinicionLoteVisibilidadControlVariablesSwingC(TablaBase.Columns[i],"","",false,false,esParaVisibilidad,esParaHabilitar,esParaBorder,TablaBase);
				strSwing2+=GetDefinicionLoteVisibilidadControlVariablesSwingC(TablaBase.Columns[i],"","",false,true,esParaVisibilidad,esParaHabilitar,esParaBorder,TablaBase);
			//}
		}			
		
		strSwing=strSwing1;
		
		strSwing+="\r\n\r\n\t\tfor(Classe campo:campos) {";
		strSwing+=strSwing2;		
		strSwing+="\r\n\t\t}";
		
		return strSwing;
}

public string GetDefinicionLoteVisibilidadControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool conForIf,bool esParaVisibilidad,bool esParaHabilitar,bool esParaBorder,TableSchema TablaBase) {			
	String strControl="";
	String strTabs="";
	String strTipo="";
	String strTrueFalse="";
	String sColumnName=GetNombreCompletoColumnaClaseC(column)+GetNombreClaseC(TablaBase.ToString());//column.Name;
	
	if(esParaVisibilidad) {
		strTipo="mostrar";
		sColumnName=GetNombreVisibilidadControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk,true);
		
	} else if(esParaHabilitar) {
		strTipo="activar";
		sColumnName=GetNombreHabilitarControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk,true);
		
	} else if(esParaBorder){
		strTipo="resaltar";
		sColumnName=GetNombreBorderControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk,true);
	}
	
	if(!conForIf) {
		strTrueFalse="esInicial";
		strTabs="";
	} else {
		strTrueFalse="esAsigna";
		strTabs="\t\t";
	}
	
	if(conForIf) {
		strControl+="\r\n\r\n\t\t\tif(campo.clase.equals("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+")) {";
	}
	
	//strControl+="\r\n\t\t"+strTabs+"this.set"+strTipo+"Resaltar"+sColumnName+"("+strTrueFalse+");";
	strControl+="\r\n\t\t"+strTabs+"this.set"+sColumnName+"("+strTrueFalse+");";
	
	if(conForIf) {
		strControl+="\r\n\t\t\t\tcontinue;";
		strControl+="\r\n\t\t\t}";
	}
	
	
	return strControl;	
}

public String GetDefinitionVariablesResaltarNavegacionColumnsTablaTablasClasesRelacionadasC(TableSchema table,bool esFuncionResaltarLote,bool esConBorder,bool esConVisibilidad,bool esConHabilitar,TableSchema TablaBase,bool EsSwing,bool esParaSwing) {
	String sTablaClaseRelacionada=String.Empty;
	String sTablaClaseRelacionada2=String.Empty;
	String sTablaClaseRelacionada3=String.Empty;
	System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
	TableSchema tablaRelacionadaObjetivo;
	ArrayList tablasRelacionadasEncontradas=new ArrayList();
	bool encontrado=false;
	String sClasesNoRelacionadas=String.Empty;
	String[] sClases;sClases= new String[1];
	//bool blClaseNo=false;
			
	String strObjetoController=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoBeanSwing+"JInternalFrame";
	
	if(esFuncionResaltarLote){	
		sTablaClaseRelacionada+="\r\n\t\tif(deepLoadType.equals(DeepLoadType.INCLUDE) || deepLoadType.equals(DeepLoadType.NONE)) {";
		if(esConVisibilidad || esConHabilitar){
			sTablaClaseRelacionada+="\r\n\t\t\tesInicial=false;";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=true;";
			
		} else if(esConBorder){
			if(esParaSwing) {
				sTablaClaseRelacionada+="\r\n\t\t\tesInicial=null;";
				sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=Funciones2.getBorderResaltar(parametroGeneralUsuario,\"COLUMNA\");";
			} else {
				sTablaClaseRelacionada+="\r\n\t\t\tesInicial=false;";
				sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=true;";
			}
		}
		
		sTablaClaseRelacionada+="\r\n\t\t} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {";
		
		if(esConVisibilidad || esConHabilitar){
			sTablaClaseRelacionada+="\r\n\t\t\tesInicial=true;";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=false;";
		} else if(esConBorder){
			if(esParaSwing) {
				sTablaClaseRelacionada+="\r\n\t\t\tesInicial=Funciones2.getBorderResaltar(parametroGeneralUsuario,\"COLUMNA\");";
				sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=null;";
			} else {
				sTablaClaseRelacionada+="\r\n\t\t\tesInicial=true;";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=false;";
			}
		}
		sTablaClaseRelacionada+="\r\n\t\t}\r\n";
		
		//sTablaClaseRelacionada+="\r\n\r\n\t\tfor(Classe clase:clases) {";
	}
	
	foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {				
		if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
			tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
		} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {			
			tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
		} else {
			tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
		}
								
		if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo)) {
			continue;
		}								
				
		encontrado=false;
				
		foreach(TableSchema tableSchema in tablasRelacionadasEncontradas) {										
			if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)) {
				encontrado=true;
			}
		}								
		
		if(!encontrado) {
			tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
			
			if(!esFuncionResaltarLote) {
				sTablaClaseRelacionada+=GetDefinitionVariablesResaltarNavegacionColumnTablaTablasClasesRelacionadasC(tablaRelacionadaObjetivo,TablaBase,EsSwing,esParaSwing);
			
			} else if(esFuncionResaltarLote){
				sTablaClaseRelacionada2+=GetSetVariablesResaltarLoteNavegacionColumnTablaTablasClasesRelacionadasC(tablaRelacionadaObjetivo,false,false,esConBorder,esConVisibilidad,esConHabilitar,TablaBase);				
				sTablaClaseRelacionada3+=GetSetVariablesResaltarLoteNavegacionColumnTablaTablasClasesRelacionadasC(tablaRelacionadaObjetivo,true,true,esConBorder,esConVisibilidad,esConHabilitar,TablaBase);				
			}
		}											
	}
	//System.Windows.Forms.MessageBox.Show(sTablaClaseRelacionada);
			
	if(esFuncionResaltarLote){
		sTablaClaseRelacionada=sTablaClaseRelacionada +sTablaClaseRelacionada2;
		
		sTablaClaseRelacionada+="\r\n\r\n\t\tfor(Classe clase:clases) {";
		sTablaClaseRelacionada+=sTablaClaseRelacionada3	;	
		sTablaClaseRelacionada+="\r\n\t\t}";
		
		
		
		//AGREGAR INCLUDE
		//sTablaClaseRelacionada="\r\n\t\tif(deepLoadType.equals(DeepLoadType.INCLUDE) || deepLoadType.equals(DeepLoadType.NONE)) {";					
		//sTablaClaseRelacionada=sTablaClaseRelacionada+"\r\n\t\t}";
	}
	
	return sTablaClaseRelacionada; 
}

public String GetSetVariablesResaltarLoteNavegacionColumnTablaTablasClasesRelacionadasC(TableSchema tablaRelacionada,bool esParaForIf,bool esTrue,bool esConBorder,bool esConVisibilidad,bool esConHabilitar,TableSchema TablaBase) {
	String sColumna="";
	String sTrueFalse="true";
	String sTabs="\t\t";
	String sTipo="mostrar";
	
	if(!esTrue) {
		sTrueFalse="esInicial";
	} else {
		sTrueFalse="esAsigna";
	}
	
	if(esConVisibilidad) {
		sTipo="Mostrar";
		
	} else if(esConHabilitar){
		sTipo="Activar";
		
	} else if(esConBorder){
		sTipo="Resaltar";
	}
	
		if(esParaForIf) {
			sColumna+="\r\n\r\n\t\t\tif(clase.clas.equals("+GetNombreClaseC(tablaRelacionada.ToString())+".class)) {";
		
		} else {
			sTabs="";
		}
		//EL BORDE RESALTADO NO DEPENDE DE LA VISIBILIDAD
		
		//if(EsSwing) {
		//	sColumna+="\r\n\t\t\t\tthis.setBorderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"();";
		//}
		
		
		//sColumna+="\r\n\t\t"+sTabs+"this.set"+sTipo+"Resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"("+sTrueFalse+");";
		sColumna+="\r\n\t\t"+sTabs+"this.set"+sTipo+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"("+sTrueFalse+");";
		
		if(esParaForIf) {
			sColumna+="\r\n\t\t\t\tcontinue;";		
			sColumna+="\r\n\t\t\t}";
		}
	
			
	return sColumna;
}

public String GetDefinitionVariablesResaltarNavegacionColumnTablaTablasClasesRelacionadasC(TableSchema tablaRelacionada,TableSchema TablaBase,bool EsSwing,bool esParaSwing) {
	String sColumna="";
	
	String strClaseController="";//GetNombreClaseC(TablaBase.ToString())+strSufijoVersion+strPrefijoBeanSwing+"JInternalFrame";
	String strObjetoController="";//GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoBeanSwing+"JInternalFrame";
	
	strClaseController=GetNombreClaseC(TablaBase.ToString())+strPrefijoJSFFacesOBeanJInternalFrame;
	
	strObjetoController=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoBeanSwing+"JInternalFrame";
	
	String strBorderBoolean="Border"+strSwtMe;
	
	if(!esParaSwing) {
		strBorderBoolean="Boolean";
	}
	
	if(EsSwing) {
		sColumna+="\r\n\r\n\tpublic "+strBorderBoolean+" resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"=null;\r\n";
		sColumna+="\r\n\tpublic "+strBorderBoolean+strSwtMe+" getResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"() {";
		sColumna+="\r\n\t\treturn this.resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+";";
		sColumna+="\r\n\t}\r\n";
	
		sColumna+="\r\n\tpublic void setResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"("+strBorderBoolean+strSwtMe+" borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+") {";
		sColumna+="\r\n\t\tif(borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"!=null) {";
		sColumna+="\r\n\t\t\tthis.resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"= borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+";";
		sColumna+="\r\n\t\t}";
		sColumna+="\r\n\t}\r\n";
		
		if(esParaSwing) {
			sColumna+="\r\n\tpublic Border setResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"(ParametroGeneralUsuario parametroGeneralUsuario/*"+strClaseController+" "+strObjetoController+"*/) {";
			sColumna+="\r\n\t\tBorder"+strSwtMe+" borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"=Funciones2.getBorderResaltar(parametroGeneralUsuario,\"COLUMNA\");";
			sColumna+="\r\n\t\t\t"+strCommentMinCodigoWebIni+sCoWebExpIni;
			sColumna+="\r\n\r\n\t\t//"+strObjetoController+".jTtoolBar"+GetNombreClaseC(TablaBase.ToString())+".setBorder(borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+");";
			sColumna+="\r\n\t\t\t"+strCommentMinCodigoWebFin+sCoWebExpFin;
			sColumna+="\r\n\t\tthis.resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"= borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+";";
			sColumna+="\r\n\r\n\t\t return borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+";";
			sColumna+="\r\n\t}\r\n";
		}
	}
	
	sColumna+="\r\n\r\n\r\n\tpublic Boolean mostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"=true;\r\n";
	sColumna+="\r\n\tpublic Boolean getMostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"() {";
	sColumna+="\r\n\t\treturn this.mostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+";";
	sColumna+="\r\n\t}\r\n";

	sColumna+="\r\n\tpublic void setMostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"(Boolean visibilidadResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+") {";
	sColumna+="\r\n\t\tthis.mostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"= visibilidadResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+";";
	sColumna+="\r\n\t}\r\n";
	
	sColumna+="\r\n\r\n\r\n\tpublic Boolean activar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"=true;\r\n";
	sColumna+="\r\n\tpublic Boolean gethabilitarResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"() {";
	sColumna+="\r\n\t\treturn this.activar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+";";
	sColumna+="\r\n\t}\r\n";

	sColumna+="\r\n\tpublic void setActivar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"(Boolean habilitarResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+") {";
	sColumna+="\r\n\t\tthis.activar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"= habilitarResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+";";
	sColumna+="\r\n\t}\r\n";
	
	//ESTA VISIBLE POR DEFECTO
	/*
	sColumna+="\r\n\tpublic void setVisibilidadResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"() {";
	sColumna+="\r\n\t\tBorder borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"=Funciones2.getBorderResaltar(this.getParametroGeneralUsuario(),\"COLUMNA\");";
	//sColumna+="\r\n\r\n\t\tthis.jTtoolBar"+GetNombreClaseC(TablaBase.ToString())+".setBorder(borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+");";
	sColumna+="\r\n\t\tthis.visibilidadResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"= false;";
	sColumna+="\r\n\t}\r\n";
	*/
	
	return sColumna;
}

public String GetVariablesVisibilidadHabilitarResaltarIndicesVariablesTablasClasesC(TableSchema TablaBase,bool esVisibilidad,bool esHabilitar, bool esResaltar,bool esParaSwing) {
			String strFuncion=string.Empty;
			String strElse=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n";
			bool blnExisteBusqueda=false;
			bool blnExisteBusquedaFkVariableGlobal=false;
			bool esPrimero=true;
			
			String strTabPanel=string.Empty;
			String strPanelesBusquedas=string.Empty;
			String strPanelBusqueda=string.Empty;
			String strControlesPanelesBusquedas=string.Empty;
			
			//SIEMPRE DECLARAR PANE BUSQUEDA
			//strTabPanel="\r\n\tpublic JTabbedPane jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+";\r\n";
			
			/*
			strPanelesBusquedas="\r\n\tpublic void resaltarPanelBusqueda"+GetNombreClaseC(TablaBase.ToString())+"(String sTipoBusqueda) {";
			strPanelesBusquedas+="\r\n\t\tint index=0;";
			strPanelesBusquedas+="\r\n\t\tBoolean existe=false;";
			strPanelesBusquedas+="\r\n\t\tBorder borderResaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,\"TAB\");\r\n";
			*/
			
			String strBorderBoolean="Border";
	
			if(!esParaSwing) {
				//strBorderBoolean="Boolean";
			}
	
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
				blnExisteBusquedaFkVariableGlobal=false;
				strPanelBusqueda="";
				
				if(!indexSchema.IsPrimaryKey) {
					strElse=string.Empty;
					
					if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
						continue;
					}
					
					if(indexSchema.IsUnique) {
						continue;
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
					} else {						
						if(!blnExisteBusqueda) {
							blnExisteBusqueda=true;
							//strTabPanel="\r\n\tprotected JTabbedPane jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+";\r\n";
						}
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK")) {
							if(esVisibilidad) {
								strInitFuncion+="\r\n\r\n\tpublic Boolean mostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=true;";
	
								strInitFuncion+="\r\n\r\n\tpublic Boolean getMostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"() {";
								strInitFuncion+="\r\n\t\treturn this.mostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setMostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"(Boolean visibilidadResaltar) {";
								strInitFuncion+="\r\n\t\tthis.mostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= visibilidadResaltar;";
								strInitFuncion+="\r\n\t}";																
							
							} else if(esHabilitar) {
								strInitFuncion+="\r\n\r\n\tpublic Boolean activar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=true;";
	
								strInitFuncion+="\r\n\r\n\tpublic Boolean getActivar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"() {";
								strInitFuncion+="\r\n\t\treturn this.activar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setActivar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"(Boolean habilitarResaltar) {";
								strInitFuncion+="\r\n\t\tthis.activar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= habilitarResaltar;";
								strInitFuncion+="\r\n\t}";
								
							} else if(esResaltar) {
								strInitFuncion+="\r\n\r\n\tpublic "+strBorderBoolean+strSwtMe+" resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=null;";
	
								strInitFuncion+="\r\n\r\n\tpublic "+strBorderBoolean+strSwtMe+" getResaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"() {";
								strInitFuncion+="\r\n\t\treturn this.resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setResaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"("+strBorderBoolean+strSwtMe+" borderResaltar) {";
								strInitFuncion+="\r\n\t\tthis.resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= borderResaltar;";
								strInitFuncion+="\r\n\t}";
								
								//if(esParaSwing) {
									//strSufijoVersion + "BeanSwingJInternalFrame
									strInitFuncion+="\r\n\r\n\tpublic void setResaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"(ParametroGeneralUsuario parametroGeneralUsuario/*"+GetNombreClaseC(TablaBase.ToString()) + strPrefijoJSFFacesOBeanJInternalFrame+" "+GetNombreClaseObjetoC(TablaBase.ToString())+"BeanSwingJInternalFrame*/) {";
									strInitFuncion+="\r\n\t\tBorder"+strSwtMe+" borderResaltar=Funciones2.getBorderResaltar(parametroGeneralUsuario,\"TAB\");";
									//strInitFuncion+="\r\n\t\tthis.jTtoolBarTipoVisual.setBorder(borderResaltar);";
									strInitFuncion+="\r\n\t\tthis.resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= borderResaltar;";
									strInitFuncion+="\r\n\t}";
								//}
							}
							
							/*
							strPanelBusqueda="\tpublic JPanel"+strSwtMe+" jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							strPanelBusqueda+="\tpublic JButton jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							*/
							
							if(!esPrimero) {
								strElse="else ";
							}
							
							/*
							strPanelBusqueda="\r\n\t\t"+strElse+"if(sTipoBusqueda.equals(\""+indexSchema.Name+"\")) {";							
							strPanelBusqueda+="\r\n\t\t\tindex= this.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".indexOfComponent(this.jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+");";
							strPanelBusqueda+="\r\n\r\n\t\t\tthis.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setSelectedIndex(index);";
							strPanelBusqueda+="\r\n\r\n\t\t\tJPanel"+strSwtMe+" jPanel=(JPanel)this.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".getComponent(index);";
							strPanelBusqueda+="\r\n\r\n\t\t\tjPanel.setBorder(borderResaltar);";
							strPanelBusqueda+="\r\n\t\t\texiste=true;";
							strPanelBusqueda+="\r\n\t\t}";
							*/
							
							//strPanelesBusquedas+="\tprotected JPanel"+strSwtMe+" jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							//strPanelesBusquedas+="\tprotected JButton jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String strFinalQuery,";
						} else {
							//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
						}
					}	
					int count=1;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {												
						
						if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual"))) {
							if(EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)
								|| EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)) {
								blnExisteBusquedaFkVariableGlobal=true;
								break;
							}
							
							//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+"\r\n"; 
															
							if(!indexSchema.MemberColumns.Count.Equals(count)) {
								//strInitFuncion+=";\r\n";	
							}
						} else {
							if(!indexSchema.Name.Contains("BusquedaRango")) {
								//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+"\r\n"; 																
							} else {
								//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Inicial",memberColumnSchema.IsForeignKeyMember)+"\r\n";								
								
								//strInitFuncion+=",";
								//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Final",memberColumnSchema.IsForeignKeyMember)+"\r\n"; 																
								break;
							}
						}
						count++;
					}
					
					
					if(blnExisteBusquedaFkVariableGlobal) {
						continue;	
					}
					
					if(esPrimero) {
						esPrimero=false;	
					}
							
					//strInitFuncion+=")throws Exception;";																																			
					
					//strPanelesBusquedas+=strPanelBusqueda;
				}
			}
			
			/*
			strInitFuncion=strTabPanel+strPanelesBusquedas+strControlesPanelesBusquedas;
			
			strInitFuncion+="\r\n\r\n\t\tif(existe) {";
			strInitFuncion+="\r\n\t\t\tthis.jTtoolBar"+GetNombreClaseC(TablaBase.ToString())+".setBorder(borderResaltar);";
			strInitFuncion+="\r\n\t\t}";			
			strInitFuncion+="\r\n\t}";
			*/
				
			
			return strInitFuncion; 
	}
	
	public string GetConverterBindingVariablesSwingInternoC(ColumnSchema column/*,String strIndexName,String strFinalName,bool esParaFk*/)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
			strTituloControl+="";
		String strPrefijo="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
			return string.Empty;
		} else if(column.Name.Equals(strId)) {
			return string.Empty;
		} else {			
			if(column.Name.Equals(strVersionRow)){
				return string.Empty;
			}						
					
			if(!column.IsForeignKeyMember) {
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {
					/*
					if(column.Size<51) {
						strPrefijo="jTextField";
					} else if(column.Size<200) {
						strPrefijo="jTextArea";
					} else {
						strPrefijo="jTextArea";
					}
					*/
				} else if(column.DataType==DbType.Boolean) {
					//strPrefijo="jCheckBox";
				} else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
					//strPrefijo="jTextField";
				} else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime) {
					//strPrefijo="jFormattedTextField";
					strControl+="\t\t//this.binding"+GetNombreClaseC(column.Table.ToString())+".setConverter(new DateConverter<String,Date>());\r\n";
					strControl+="\t\tthis.binding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";
		
				} else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow)) {
					//strPrefijo="jButton";
				}
			} else {
				return string.Empty;	
			}					
		}
		
			
		return strControl;
	}
	
	public string GetNombreControlVariablesSwingInternoC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
			strTituloControl+="";
		String strPrefijo="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
			return string.Empty;
		} else if(column.Name.Equals(strId) && !esParaFk) {
			strTipoControlId="jLabel";
			
			if(!TieneIdentityColumnC(column)) {
				strTipoControlId="jTextField";
			}
			
			strControl=strTipoControlId+GetNombreColumnaClaseC(column)/*strIdGetSet*/+GetNombreClaseC(column.Table.ToString())+strIndexName+strFinalName;	
			return strControl;
		} else {			
			if(column.Name.Equals(strVersionRow)){
				return string.Empty;
			}						
					
			if(!column.IsForeignKeyMember) {
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {
					if(column.Size<51) {
						strPrefijo="jTextField";
					} else if(column.Size<200) {
						strPrefijo="jTextArea";
					} else {
						strPrefijo="jTextArea";
					}
				} else if(column.DataType==DbType.Boolean) {
					strPrefijo="jCheckBox";
				} else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
					strPrefijo="jTextField";
				} else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime) {
					//strPrefijo="jFormattedTextField";
					
					if(!EsTimeColumn(column)) {
						strPrefijo="jDateChooser";
					} else {
						strPrefijo="jSpinner";
					}					
				} else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow)) {
					//CAMPO ARCHIVO
					//strPrefijo="jButton";
					strPrefijo="jFileChooser";
				}
			} else {
				strPrefijo="jComboBox";		
			}					
		}
		
		if(strIndexName=="") {
			strControl=strPrefijo+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString());
		} else {
			strControl=strPrefijo+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString());
		}
			
		return strControl;
	}
	
	public string GetInicializacionControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool blnConFk,bool esParaBusqueda)
	{			
		String strControl="";
		String strTituloControl="";
		String strLabelControl="";
		String strNombreControlId="";
		String strLabelFinal="";
		String strSwingWidthControlLabelExtra="";
		String strSimboloCampoRequerido="";
		
		//Trace.WriteLine(column.Name);
		
		String strSwingWidthControlExtra ="";//GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
		String strSwingHeighControlExtra ="";//GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
		
		String strParaBusqueda="false";
		
		if(esParaBusqueda) {
			strParaBusqueda="true";
		}
		
		if(!column.AllowDBNull) {
			//Trace.WriteLine(column.Name+"->NULL");			
			if(!esParaBusqueda) { 
				strSimboloCampoRequerido=strSimboloCampoRequeridoGlobal;
			}			
		}
		
		if(strFinalName.Equals("Final")) {
			strLabelFinal=" "+strFinal;
		}
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
		{
				return string.Empty;
		}
		else if(column.Name.Equals(strId) && !blnConFk)
		{
			strLabelControl=strIdGetSet;
			
			if(blnEsProceso && !strIndexName.Equals("")) {
				strLabelControl="";
			}
						
			strSwingWidthControlLabelExtra =GetAnchoLabelColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

			strTituloControl="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,false)+" = new JLabelMe();\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,false)+".setText(\""+strLabelControl+strSimboloDosPuntos+strSimboloCampoRequerido+"\");\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,false)+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlLabelExtra+","+SWING_HEIGHT_CONTROL+"));\r\n";//SWING_WIDTH_CONTROL
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,false)+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlLabelExtra+","+SWING_HEIGHT_CONTROL+"));\r\n";//SWING_WIDTH_CONTROL
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,false)+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlLabelExtra+","+SWING_HEIGHT_CONTROL+"));\r\n";//SWING_WIDTH_CONTROL
			strTituloControl+="\r\n\t\tFuncionesSwing.setBoldLabel("+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,false)+",STIPO_TAMANIO_GENERAL,false,"+strParaBusqueda+",this);\r\n\r\n";
			
			strNombreControlId="JLabelMe";
			if(esParaBusqueda) {
				strNombreControlId="JTextFieldMe";
			}
						
			strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new "+strNombreControlId+"();\r\n";
			strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n";
			strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n";
			strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n\r\n\r\n";
			
			if(esParaBusqueda && blnEsReporte) {
				strControl+="\t\t//SE OCULTA CAMPO ID AUXILIAR PARA REPORTE\r\n";
				strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setVisible(false);\r\n\r\n\r\n";
			}
		}
		else
		{
			String strColumna="";
			
			if(!GetEsProcesoParamFromPropertiesC(column.Table)) {
				strColumna=GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper();//GetWebNombreTituloColumnFromPropertiesC(column);
			} else {
				strColumna="\""+GetWebNombreTituloColumnFromPropertiesC(column)+"\"";
			}
		
			if(column.Name.Equals(strVersionRow))
			{
				return string.Empty;
			}			
			
			
			int iHeigh=INTSWING_HEIGHT_CONTROL;
			String sHeigh=SWING_HEIGHT_CONTROL_LABEL;
			String sWidth=SWING_WIDTH_CONTROL_LABEL;//SWING_WIDTH_CONTROL_LABEL;
			
			if(GetWebNombreTituloColumnFromPropertiesC(column).Length>=15 && GetWebNombreTituloColumnFromPropertiesC(column).Length<20) {
				iHeigh=INTSWING_HEIGHT_CONTROL + 5;
				sHeigh=SWING_HEIGHT_CONTROL_LABEL2;
			
			} else if(GetWebNombreTituloColumnFromPropertiesC(column).Length>=20) {
				iHeigh=(INTSWING_HEIGHT_CONTROL + 5)*2;
				sHeigh=SWING_HEIGHT_CONTROL_LABEL2+"*2";
				//sWidth=SWING_WIDTH_CONTROL_LABEL2;
			}
						
			if(blnEsGuardarRelaciones) {
				sWidth=SWING_WIDTH_CONTROL_LABEL2;
			}
			
			String strTituloColumn=GetWebNombreTituloColumnFromPropertiesC(column)+strLabelFinal;
			
			if(blnUsaLabelFormLower) {
				//strTituloColumn+="_LOWER";
			}
			
			strSwingWidthControlLabelExtra =GetAnchoLabelColumnSwingExtraC(sWidth,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
			//Trace.WriteLine(strSwingWidthControlLabelExtra);
			
			strTituloControl+="\r\n\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,blnConFk)+" = new JLabelMe();\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,blnConFk)+".setText(\""+strTituloColumn+strSimboloDosPuntos+strSimboloCampoRequerido+"\");\r\n";//</html>
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,blnConFk)+".setToolTipText(\""+GetToolTipColumnFromPropertiesC(column)+"\");\r\n";
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,blnConFk)+".setMinimumSize(new Dimension("+sWidth+strSwingWidthControlLabelExtra+","+sHeigh+"));\r\n";//sWidth,SWING_WIDTH_CONTROL	iHeigh
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,blnConFk)+".setMaximumSize(new Dimension("+sWidth+strSwingWidthControlLabelExtra+","+sHeigh+"));\r\n";//sWidth,SWING_WIDTH_CONTROL	iHeigh
			strTituloControl+="\t\t"+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,blnConFk)+".setPreferredSize(new Dimension("+sWidth+strSwingWidthControlLabelExtra+","+sHeigh+"));\r\n";//sWidth,SWING_WIDTH_CONTROL	iHeigh
			strTituloControl+="\r\n\t\tFuncionesSwing.setBoldLabel("+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,blnConFk)+",STIPO_TAMANIO_GENERAL,false,"+strParaBusqueda+",this);\r\n\r\n";
		
			if(!column.IsForeignKeyMember)
			{
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
				{
					//SE AGRANDA CON SCROLL
					//String strSwingWidthControlExtra ="";//GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);

					if(column.Size<51)
					{
						strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
						strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

						strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JTextFieldMe();\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
						
						strControl+="\r\n\t\tFuncionesSwing.setBoldTextField("+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+",STIPO_TAMANIO_GENERAL,false,"+strParaBusqueda+",this);\r\n\r\n\r\n";
					}
					else if(column.Size<200)
					{
						strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
						strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

						strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JTextAreaMe();\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
						
						strControl+="\r\n\t\tFuncionesSwing.setBoldTextArea("+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+",STIPO_TAMANIO_GENERAL,false,"+strParaBusqueda+",this);\r\n\r\n\r\n";
						
					}
					else
					{
						//strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
						//strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
						
						strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
						strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

						strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JTextAreaMe();\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
						
						strControl+="\r\n\t\tFuncionesSwing.setBoldTextArea("+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+",STIPO_TAMANIO_GENERAL,false,"+strParaBusqueda+",this);\r\n\r\n\r\n";

					}
				}
				else if(column.DataType==DbType.Boolean)
				{
					strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
					strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

					strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JCheckBoxMe();\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
					
					strControl+="\r\n\t\tFuncionesSwing.setBoldCheckBox("+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+",STIPO_TAMANIO_GENERAL,false,"+strParaBusqueda+",this);\r\n\r\n\r\n";
					
				}
				else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
				{
					strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL_VALOR,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
					strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

					strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JTextFieldMe();\r\n";
					
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL_VALOR+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL_VALOR+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL_VALOR+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
					
					strControl+="\r\n\tFuncionesSwing.setBoldTextField("+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+",STIPO_TAMANIO_GENERAL,false,"+strParaBusqueda+",this);\r\n";
					
					/*
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",65),"+SWING_HEIGHT_CONTROL+"));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",65),"+SWING_HEIGHT_CONTROL+"));\r\n";
					strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",65),"+SWING_HEIGHT_CONTROL+"));\r\n";
					*/
					
					if(column.DataType==DbType.Decimal||column.DataType==DbType.Double) {
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setText(\"0.0\");\r\n\r\n\r\n";
					} else {
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setText(\"0\");\r\n\r\n\r\n";	
					}
				
				}
				else if(EsDateColumn(column) || EsDateTimeColumn(column) || EsTimeColumn(column))
				{
					strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL_FECHA,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
					strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL_FECHA,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
	
					if(!EsTimeColumn(column)) {
						if(!EsDateTimeColumn(column)) {
							strControl="\t\t//"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JFormattedTextFieldMe();\r\n";
							strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JDateChooser();\r\n";
							strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
							strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
							strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
							strControl+="\r\n\t\tFuncionesSwing.setBoldDate("+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+",STIPO_TAMANIO_GENERAL,false,"+strParaBusqueda+",this);\r\n";
							
							strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setDate(new Date());\r\n";
							strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setDateFormatString(\"yyyy-MM-dd\");;\r\n";
							strControl+="\t\t//"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setText(Funciones.getStringMySqlCurrentDate());\r\n\r\n\r\n";
						} else {
							strControl="\t\t//"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JFormattedTextFieldMe();\r\n";
							strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JPanelDateTimeMe(FuncionesSwing.getFondoImagen(parametroGeneralUsuario.getid_tipo_fondo()),true);\r\n";
							strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+"*2,85),"+SWING_HEIGHT_CONTROL+" + Constantes.ISWING_ALTO_FILA_TABLA_EXTRA_FECHA));\r\n";
							strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+"*2,85),"+SWING_HEIGHT_CONTROL+" + Constantes.ISWING_ALTO_FILA_TABLA_EXTRA_FECHA));\r\n";
							strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+"*2,85),"+SWING_HEIGHT_CONTROL+" + Constantes.ISWING_ALTO_FILA_TABLA_EXTRA_FECHA));\r\n";
							strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setDate(new Timestamp((new Date()).getTime()));\r\n";//new Date()
							strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setDateFormatString(\"yyyy-MM-dd\");;\r\n";
							strControl+="\t\t//"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setText(Funciones.getStringMySqlCurrentDate());\r\n\r\n\r\n";
						}
					} else {
						strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL_FECHA,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
						strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL_FECHA,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
	
	
						strControl="\t\t//"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JFormattedTextFieldMe();\r\n";
						strControl="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JSpinner(new SpinnerDateModel());\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
						strControl+="\r\n\t\tFuncionesSwing.setBoldHora("+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+",STIPO_TAMANIO_GENERAL,false,"+strParaBusqueda+",this);\r\n";
						
						strControl+="\t\tJSpinner.DateEditor timeEditor"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+" = new JSpinner.DateEditor("+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+", \"HH:mm:ss\");\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setEditor(timeEditor"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+");\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setValue(new Date());\r\n";
						
						/*
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setDate(new Date());\r\n";
						strControl+="\t\t"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setDateFormatString(\"yyyy-MM-dd\");;\r\n";
						strControl+="\t\t//"+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".setText(Funciones.getStringMySqlCurrentDate());\r\n\r\n\r\n";
						*/
					}
				}
			}
			else
			{
				strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
				strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

				//String strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
				//String strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

				strControl="\t\t"+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,blnConFk)+"= new JComboBoxMe();\r\n";
				strControl+="\t\t"+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,blnConFk)+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
				strControl+="\t\t"+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,blnConFk)+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
				strControl+="\t\t"+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,blnConFk)+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
				
				strControl+="\r\n\t\tFuncionesSwing.setBoldComboBox("+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,blnConFk)+",STIPO_TAMANIO_GENERAL,false,"+strParaBusqueda+",this);\r\n\r\n\r\n";
	
			}
			
		
		}
		
		
		
		return strTituloControl+strControl;
	}
	
	public string GetDefinicionControlVariablesSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool esParaBusqueda)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
				
		} else if(column.Name.Equals(strId) && !esParaFk) {	//Trace.WriteLine("asda");
			strTipoControlId="JLabel";
			
			if(!TieneIdentityColumnC(column) || esParaBusqueda) {
				strTipoControlId="JTextFieldMe";
			}
			
			strTituloControl="\r\n\tpublic JPanel"+strSwtMe+" "+GetNombrePanelControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+";";			
			strTituloControl+="\r\n\tpublic JLabel"+strSwtMe+" "+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+";";
			
			/*
			strTituloControl+="\r\n\tpublic Border "+GetNombreBorderControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"=null;";			
			strTituloControl+="\r\n\tpublic Boolean "+GetNombreVisibilidadControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"=true;\r\n";			
			strTituloControl+="\r\n\tpublic Boolean "+GetNombreHabilitarControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"=true;\r\n";
			*/
			
			strControl="\r\n\tpublic "+strTipoControlId+" "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";																				
			
			if(blnConFuncionalidadAccionesCampoVersion1) {
				strControl+="\tpublic JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Busqueda= new JButtonMe();\r\n";
			}
			
		} else {			
			if(column.Name.Equals(strVersionRow)) {
				return string.Empty;
			}						
			
			strTituloControl="\r\n\tpublic JPanel"+strSwtMe+" "+GetNombrePanelControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+";";			
			strTituloControl+="\r\n\tpublic JLabel"+strSwtMe+" "+GetNombreTituloControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+";";
			
			/*
			strTituloControl+="\r\n\tpublic Border "+GetNombreBorderControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"=null;";			
			strTituloControl+="\r\n\tpublic Boolean "+GetNombreVisibilidadControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"=true;\r\n";			
			strTituloControl+="\r\n\tpublic Boolean "+GetNombreHabilitarControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"=true;\r\n";			
			*/
			
			if(!column.IsForeignKeyMember) {
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {
					if(column.Size<51) {
						strControl="\r\n\tpublic JTextField"+strSwtMe+" "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
					} else if(column.Size<200) {
						strControl="\r\n\tpublic JTextArea"+strSwtMe+" "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";						
						
						if(strIndexName=="") {
							strControl+="\tpublic JScrollPane"+strSwtMe+" jscrollPane"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+";\r\n";
						} else {
							//strControl+="\tpublic JScrollPane jscrollPane"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";							
						}																		
					} else {
						strControl="\r\n\tpublic JTextArea"+strSwtMe+" "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
						
						if(strIndexName=="") {
							strControl+="\tpublic JScrollPane"+strSwtMe+" jscrollPane"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+";\r\n";
						} else {
							//strControl+="\tpublic JScrollPane jscrollPane"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";							
						}
					}
				} else if(column.DataType==DbType.Boolean) {
					strControl="\r\n\tpublic JCheckBox"+strSwtMe+" "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
				} else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
					strControl="\r\n\tpublic JTextField"+strSwtMe+" "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
				} else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime) {
					if(!EsTimeColumn(column)) {
						strControl="\r\n\t//public JFormattedTextField "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
						
						if(!EsDateTimeColumn(column)) {
							strControl+="\r\n\tpublic JDateChooser "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
						} else {
							strControl+="\r\n\tpublic JPanelDateTimeMe "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+";\r\n";
						}
					} else {
						strControl="\r\n\tpublic JSpinner "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JSpinner(new SpinnerDateModel());;\r\n";
					}
				} else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow)) {
					//CAMPO ARCHIVO
					
					//strControl="\r\n\tpublic JButton "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+"= new JButtonMe();\r\n";
					strControl="\r\n\tpublic JFileChooser "+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+" = new JFileChooser();";
					strControl+="\r\n\tpublic JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"= new JButtonMe(\"...\");";
					
					if(!column.Name.Equals(strArchivo_Lower)) {
						strControl+="\r\n\tpublic JLabel"+strSwtMe+" jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"= new JLabelMe(\"Imagen\");\r\n";
					} else {
						strControl+="\r\n\tpublic JLabel"+strSwtMe+" jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"= new JLabelMe(\""+strArchivo_Lower+"\");";						
					}
					
					strControl+="\r\n\tpublic JButton jButtonDescargar"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"= new JButtonMe(\"Descargar\");\r\n";					
				}
				
				if(blnConFuncionalidadAccionesCampoVersion1) {
					strControl+="\tpublic JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Busqueda= new JButtonMe();\r\n";
				}
				
			} else {
				//EJECUTA AQUI SOLAMENTE CUANDO ES ESTANDARD
				strControl="\r\n\t@SuppressWarnings(\"rawtypes\")\r\n";	
				strControl+="\tpublic JComboBox"+strSwtMe+" "+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,true)+";\r\n";		
								
				if(!TieneColumnaComboTablaNormalC(column) && blnConSwingCombosDinamicosTabla) {					
					strControl+="\t@SuppressWarnings(\"rawtypes\")\r\n";	
					strControl+="\tpublic JComboBox"+strSwtMe+" "+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,true)+"ParaTabla;\r\n";		
				}
				
				if(blnConFuncionalidadAccionesCampoVersion1) {
					strControl+="\tpublic JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"= new JButtonMe();\r\n";
					strControl+="\tpublic JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Update= new JButtonMe();\r\n";
					strControl+="\tpublic JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Busqueda= new JButtonMe();\r\n";
				}
				//strControl+="\tpublic JPanel"+strSwtMe+" jPanel"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
				
				//Trace.WriteLine("INICIO");
				
				
				TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);				
				bool esAutoReferenciadaFk=GetEsAutoReferenciadaTablaC(tableSchemaFk);
									
				if(blnEsAutoReferenciada || esAutoReferenciadaFk) {					
					if(tableSchemaFk.Name.Equals(column.Table.Name) || esAutoReferenciadaFk) {
						if(blnConFuncionalidadAccionesCampoVersion1) {
							strControl+="\tpublic JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Arbol= new JButtonMe();\r\n";				
						}
					}
				}
			
				//strControl=strPrefijo+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString());
			}					
		}
		
		return strTituloControl+strControl;
	}
	
	
	public string GetActionControlVariableBinarySwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		
		strControl+="\r\n\t\t//ABRIR BUSQUEDA ARCHIVO CAMPO";
		//strControl+="\r\n\t\t"+strCommentMinCodigoWebIni+sCoWebExpIni;
		strControl+="\r\n\t\t"+strCommentMinCodigoWebLinea+sCoWebExpLinea+"this."+strObjetoFormDetalle+"jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".addActionListener(new ButtonActionListener(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));";
		
		//if(column.Name.Equals(strArchivo_Lower)) {
			strControl+="\r\n\t\t"+strCommentMinCodigoWebLinea+sCoWebExpLinea+"this."+strObjetoFormDetalle+"jButtonDescargar"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".addActionListener(new ButtonActionListener(this,\"Descargar"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));";
			//strControl+="\r\n\t\t"+strCommentMinCodigoWebFin+sCoWebExpFin;
		//}
						
		return strTituloControl+strControl;
	}
	
	public string GetActionControlVariableForeignKeysSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		//strControl="\tprotected JComboBox "+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,true)+";\r\n";						
		//strControl+="\tprotected JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
		//strControl+="\tprotected JPanel"+strSwtMe+" jPanel"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
				
		strControl="\r\n\t\t//jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".addActionListener (\r\n";
		strControl+="\t\t//	new java.awt.event.ActionListener() {\r\n";
		strControl+="\t\t//		public void actionPerformed(java.awt.event.ActionEvent evt) {\r\n";
		strControl+="\t\t//			jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"ActionPerformed(evt);\r\n";
		strControl+="\t\t//		}\r\n";
		strControl+="\t\t//	}\r\n";
		strControl+="\t\t//);\r\n";							
		
		if(blnConFuncionalidadAccionesCampoVersion1) {
			strControl+="\r\n\t\t//BUSQUEDA CAMPO";				
			strControl+="\r\n\t\tthis.jInternalFrameDetalleForm"+GetNombreClaseC(column.Table.ToString())+".jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".addActionListener(new ButtonActionListener(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));";
		}
		
		TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
		bool esAutoReferenciadaFk=GetEsAutoReferenciadaTablaC(tableSchemaFk);
		String sArbolComment="";
		
		if(blnEsAutoReferenciada || esAutoReferenciadaFk) {
			if(esAutoReferenciadaFk) {
				//sArbolComment="//";
			}
			
			if(tableSchemaFk.Name.Equals(column.Table.Name) || esAutoReferenciadaFk) {
				strControl+="\r\n\t\t//jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Arbol.addActionListener (\r\n";
				strControl+="\t\t//	new java.awt.event.ActionListener() {\r\n";
				strControl+="\t\t//		public void actionPerformed(java.awt.event.ActionEvent evt) {\r\n";
				strControl+="\t\t//"+sArbolComment+"			abrirFrameTree"+GetNombreCompletoClaseRelacionadaFromColumn(column)/*GetNombreClaseC(column.Table.ToString())*/+"(\"BUSQUEDA_FK\");\r\n";
				strControl+="\t\t//		}\r\n";
				strControl+="\t\t//	}\r\n";
				strControl+="\t\t//);\r\n";
				
				if(blnConFuncionalidadAccionesCampoVersion1) {
					strControl+="\r\n\t\t//BUSQUEDA ARBOL CAMPO";
					strControl+="\r\n\t\tthis.jInternalFrameDetalleForm"+GetNombreClaseC(column.Table.ToString())+".jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Arbol.addActionListener(new ButtonActionListener(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Arbol\"));";
				}
		
			}
		}
				
		return strTituloControl+strControl;
	}
	
	public string GetActionActualizarControlVariableForeignKeysSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		if(blnConFuncionalidadAccionesCampoVersion1) {	
			strControl+="\r\n\t\t//ACTUALIZAR FK";
			strControl+="\r\n\t\tthis.jInternalFrameDetalleForm"+GetNombreClaseC(column.Table.ToString())+".jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Update.addActionListener(new ButtonActionListener(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Update\"));";
		}
		
		return strTituloControl+strControl;
	}
	
	public string GetActionActualizarControlVariableBusquedaSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		if(blnConFuncionalidadAccionesCampoVersion1) {	
			strControl+="\r\n\t\t//BUSQUEDA GENERAL";
			strControl+="\r\n\t\tthis.jInternalFrameDetalleForm"+GetNombreClaseC(column.Table.ToString())+".jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Busqueda.addActionListener(new ButtonActionListener(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Busqueda\"));";
		}
		
		return strTituloControl+strControl;
	}
	
	public string GetActionControlVariableSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,String strTipo)
	{			
		String strControl="";
		String strListenerControl="TextFieldFocusListener";//TextFieldFocusListener,TextFieldActionListener,TextFieldDocumentListener
		String strAddListenerControl="addFocusListener";//addActionListener,getDocument().addDocumentListener,addFocusListener
		
		String strAddActionListenerControl="addActionListener";
		String strActionListenerControl="TextFieldActionListener";
		
		String strTipoControlId="";
		String strTituloControl="";
		
		//AUXILIAR
		String strListenerControlAux="TextFieldDocumentListener";//TextFieldActionListener,TextFieldFocusListener
		String strAddListenerControlAux="getDocument().addDocumentListener";//addActionListener,addFocusListener
		//AUXILIAR_FIN
		
		bool esTextBox=true;	
		bool esTextArea=false;				
		bool esCheckBox=false;
		bool esDate=false;
		
		esTextArea=EsTextAreaColumnC(column);		
		
		if(!esTextArea) {
			esCheckBox=EsBitColumn(column);
		}
		
		if(!esTextArea && !esCheckBox) {
			esDate=EsDateColumn(column);
		}
		
		if(strTipo.Equals("ONCLIC")) {
			strListenerControl="TextFieldActionListener";
			strAddListenerControl="addActionListener";			
		}
		
		if(esTextArea) {
			esTextBox=false;
			strListenerControl="TextAreaFocusListener";//"TextAreaDocumentListener";//"TextAreaFocusListener";
			strAddListenerControl="addFocusListener";//"getDocument().addDocumentListener";//"addFocusListener";
		
		} else if(esCheckBox) {
			esTextBox=false;
			strListenerControl="CheckBoxItemListener";
			strAddListenerControl="addItemListener";
			
		}  else if(esDate) {
			esTextBox=false;
			//|ONCHANGE=true|ONEVENT_DB=true
			
			strListenerControl="";//"DateChooserFocusListener";
			strAddListenerControl="";//"addFocusListener";
			
			
			//strAddActionListenerControl="addActionListener";
			//strActionListenerControl="DateChooserActionListener";
		}
		
		//Trace.WriteLine(column.Name+strSimboloDosPuntos);
		
		strControl+="\r\n\t\t//CAMPO EVENTO";
			
		if(!esDate) {
			strControl+="\r\n\t\tthis."+strObjetoFormDetalle+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,esParaFk)+strIndexName+strFinalName+"."+strAddListenerControl+"(new "+strListenerControl+"(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));";//"-"+//GetNombreClaseC(column.Table.ToString())				
			
			if(!esTextArea && !esCheckBox && !esDate) {			
				strControl+="\r\n\t\tthis."+strObjetoFormDetalle+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,esParaFk)+strIndexName+strFinalName+"."+strAddActionListenerControl+"(new "+strActionListenerControl+"(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));";//"-"+//GetNombreClaseC(column.Table.ToString())			
				//strControl+="\r\n\t\t//this."+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,esParaFk)+strIndexName+strFinalName+"."+strAddListenerControlAux+"(new "+strListenerControlAux+"(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));";
			}
			
			//HELP PARA DOCUMENT LISTENER
			if(esTextArea || esTextBox) {
				strControl+="\r\n\t\t//this."+strObjetoFormDetalle+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,esParaFk)+strIndexName+strFinalName+"."+strAddListenerControlAux+"(new "+strListenerControlAux+"(this,this."+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,esParaFk)+strIndexName+strFinalName+",\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));";//"-"+//GetNombreClaseC(column.Table.ToString())			
			}
		
		} else {
			strControl+="\r\n\t\tFuncionesSwing.addDateListener(this."+strObjetoFormDetalle+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,esParaFk)+strIndexName+strFinalName+", this, \""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\");";
		}
			
		strControl+="\r\n\r\n";
		
		return strTituloControl+strControl;
	}
	
	public bool EsTextAreaColumnC(ColumnSchema column) {
		bool esTextArea=false;
		
		if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {
			if(column.Size>50) {
				esTextArea=true;
			}
		}
		
		return esTextArea;
	}

	public string GetSeleccionarActionControlVariableBinarySwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		
		strControl+="\r\n\t\t\t//ABRIR BUSQUEDA ARCHIVO CAMPO";
		strControl+="\r\n\t\t\t"+strCommentMinCodigoWebIni+sCoWebExpIni;		
		//strControl+="\r\n\t\tthis.jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".addActionListener(new ButtonActionListener(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));";
		strControl+="\r\n\t\t\telse if(sTipo.equals(\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\")) {";
		strControl+="\r\n\t\t\t\t"+strCommentMinCodigoWebLinea+sCoWebExpLinea+"this.jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"ActionPerformed(evt);";
		strControl+="\r\n\t\t\t}";
		strControl+="\r\n\t\t\t"+strCommentMinCodigoWebFin+sCoWebExpFin;
		
		
		//if(column.Name.Equals(strArchivo_Lower)) {
			strControl+="\r\n\t\t\t//DESCARGAR ARCHIVO CAMPO";
			//strControl+="\r\n\t\tthis.jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".addActionListener(new ButtonActionListener(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));";
			strControl+="\r\n\t\t\telse if(sTipo.equals(\"Descargar"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\")) {";
			strControl+="\r\n\t\t\t\t"+strCommentMinCodigoWebLinea+sCoWebExpLinea+"this.jButtonDescargar"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"ActionPerformed(evt);";
			strControl+="\r\n\t\t\t}";
		//}
				
		return strTituloControl+strControl;
	}
	
	public string GetSeleccionarActionControlVariableForeignKeysSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		//strControl="\tprotected JComboBox "+GetNombreControlVariablesSwingInternoC(column,strIndexName,strFinalName,true)+";\r\n";						
		//strControl+="\tprotected JButton jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
		//strControl+="\tprotected JPanel"+strSwtMe+" jPanel"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+";\r\n";
		
		/*
		strControl="\r\n\t\t//jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".addActionListener (\r\n";
		strControl+="\t\t//	new java.awt.event.ActionListener() {\r\n";
		strControl+="\t\t//		public void actionPerformed(java.awt.event.ActionEvent evt) {\r\n";
		strControl+="\t\t//			jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"ActionPerformed(evt);\r\n";
		strControl+="\t\t//		}\r\n";
		strControl+="\t\t//	}\r\n";
		strControl+="\t\t//);\r\n";							
		*/
		
		//if(blnConFuncionalidadAccionesCampoVersion1){
			strControl+="\r\n\t\t\t//BUSQUEDA CAMPO";
			//strControl+="\r\n\t\tthis.jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".addActionListener(new ButtonActionListener(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));";
			strControl+="\r\n\t\t\telse if(sTipo.equals(\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\")) {";
			strControl+="\r\n\t\t\t\tthis.jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"ActionPerformed(evt);";
			strControl+="\r\n\t\t\t}";
		//}
		
		TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
		bool esAutoReferenciadaFk=GetEsAutoReferenciadaTablaC(tableSchemaFk);
		String sArbolComment="";
		
		if(blnEsAutoReferenciada || esAutoReferenciadaFk) {
			if(esAutoReferenciadaFk) {
				//sArbolComment="//";
			}
			
			if(tableSchemaFk.Name.Equals(column.Table.Name) || esAutoReferenciadaFk) {
				/*
				strControl+="\r\n\t\t//jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Arbol.addActionListener (\r\n";
				strControl+="\t\t//	new java.awt.event.ActionListener() {\r\n";
				strControl+="\t\t//		public void actionPerformed(java.awt.event.ActionEvent evt) {\r\n";
				strControl+="\t\t//"+sArbolComment+"			abrirFrameTree"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"(\"BUSQUEDA_FK\");\r\n"; //GetNombreClaseC(column.Table.ToString())
				strControl+="\t\t//		}\r\n";
				strControl+="\t\t//	}\r\n";
				strControl+="\t\t//);\r\n";
				*/
				
				if(blnConFuncionalidadAccionesCampoVersion1){
					strControl+="\r\n\t\t\t//BUSQUEDA ARBOL CAMPO";
					//strControl+="\r\n\t\tthis.jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Arbol.addActionListener(new ButtonActionListener(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Arbol\"));";
					
					strControl+="\r\n\t\t\telse if(sTipo.equals(\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Arbol\")) {";
					strControl+="\r\n\t\t\t\t"+sArbolComment+"this.abrirFrameTree"+GetNombreCompletoClaseRelacionadaFromColumn(column)+/*GetNombreClaseC(column.Table.ToString())*/"(\"BUSQUEDA_FK\");";
					strControl+="\r\n\t\t\t}";
				}
			}
		}
				
		return strTituloControl+strControl;
	}
	
	public string GetSeleccionarActionActualizarControlVariableForeignKeysSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		if(blnConFuncionalidadAccionesCampoVersion1){
			strControl+="\r\n\t\t\t//ACTUALIZAR CAMPO";
			strControl+="\r\n\t\t\telse if(sTipo.equals(\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Update\")) {";
			strControl+="\r\n\t\t\t\tthis.jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"UpdateActionPerformed(evt);";
			strControl+="\r\n\t\t\t}";
		}
		
		return strTituloControl+strControl;
	}
	
	public string GetSeleccionarActionActualizarControlVariableBusquedaSwingC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		
		if(blnConFuncionalidadAccionesCampoVersion1){
			strControl+="\r\n\t\t\t//BUSQUEDA GENERAL CAMPO";
			strControl+="\r\n\t\t\telse if(sTipo.equals(\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Busqueda\")) {";
			strControl+="\r\n\t\t\t\tthis.jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"BusquedaActionPerformed(evt);";
			strControl+="\r\n\t\t\t}";
		}
							
		return strTituloControl+strControl;
	}
	
	public string GetFunctionInicializacionButtonBinaryC(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk)
	{			
		String strControl="";
		String strTipoControlId="";
		String strTituloControl="";
		String strArchivoImagen="";
		String strArchivoImagen_Lower="";
		String strTipoArchivoImagen="";
		String strTipoArchivoImagen_Lower="";
		String strParteNombreArchivo="Id";
		String strParteNombreArchivoReplace="";
		
		//TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);	
		
		strControl="\r\n\tpublic void jButton"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"ActionPerformed(java.awt.event.ActionEvent evt) {\r\n";
		strControl+="\t	try {\r\n";				
		
		if(!column.Name.Equals(strArchivo_Lower)) {
			//strArchivoImagen="imagen";
			//strArchivoImagen_Lower="Imagen";
			strTipoArchivoImagen="imagen";
			strTipoArchivoImagen_Lower="Imagen";
			
			strArchivoImagen=GetNombreColumnFromProperties(column);
			strArchivoImagen_Lower=column.Name;
			
			strControl+="\r\n\r\n\t\t\tthis."+strObjetoFormDetalle+"jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(Constantes.ISWING_ANCHO_CONTROL_LABEL*2,Constantes2.ISWING_ALTO_CONTROL_LABEL*8));";
			strControl+="\r\n\t\t\tthis."+strObjetoFormDetalle+"jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(Constantes.ISWING_ANCHO_CONTROL_LABEL*2,Constantes2.ISWING_ALTO_CONTROL_LABEL*8));";
			strControl+="\r\n\t\t\tthis."+strObjetoFormDetalle+"jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(Constantes.ISWING_ANCHO_CONTROL_LABEL*2,Constantes2.ISWING_ALTO_CONTROL_LABEL*8));";
			
			strControl+="\r\n\r\n\t\t\tImage imageActual=null;";
		
		} else {
			//strArchivoImagen="archivo";
			//strArchivoImagen_Lower="Archivo";
			strTipoArchivoImagen="archivo";
			strTipoArchivoImagen_Lower="Archivo";
			
			strArchivoImagen=GetNombreColumnFromProperties(column);
			strArchivoImagen_Lower=column.Name;
		}
					
			strControl+="\r\n\t\t\tint iReturnArchivo = this."+strObjetoFormDetalle+""+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".showOpenDialog(this);";
	
			strControl+="\r\n\r\n\t\t\tif (iReturnArchivo == JFileChooser.APPROVE_OPTION) {";
			
			if(!column.Name.Equals(strArchivo_Lower)) { 
				//strControl+="\r\n\t\t\tthis.fileImportacionClienteImagen= this.jFileChooserImportacionClienteImagen.getSelectedFile();";            	
				//strControl+="\r\n\t\t\tthis.jTextFieldPathArchivoImportacionClienteImagen.setText(this.fileImportacionClienteImagen.getName());";
				
				//strControl+="\r\n\t\t\tfileInputStream=new FileInputStream(this."+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".getSelectedFile());";
				strControl+="\r\n\t\t\t\timageActual=ImageIO.read(this."+strObjetoFormDetalle+""+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".getSelectedFile()).getScaledInstance(this."+strObjetoFormDetalle+"jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".getWidth(), this."+strObjetoFormDetalle+"jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".getHeight(), Image.SCALE_DEFAULT);";
										
				strControl+="\r\n\r\n\t\t\t\tif (imageActual != null) {";			    	
				strControl+="\r\n\t\t\t\t\tthis."+strObjetoFormDetalle+"jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".setIcon(new ImageIcon(imageActual));";
				strControl+="\r\n\t\t\t\t\tthis."+strObjetoFormDetalle+"jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".setText(null);";		            
				strControl+="\r\n\t\t\t\t\tthis."+strObjetoFormDetalle+"jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".updateUI();";
				strControl+="\r\n\t\t\t\t}";
			} else {
				strControl+="\r\n\t\t\t\tthis."+strObjetoFormDetalle+"jLabelImagen"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+".setText(this."+strObjetoFormDetalle+""+GetNombreControlVariablesSwingC(column,strIndexName,strFinalName)+".getSelectedFile().getName());";
			}
			
		strControl+="\r\n\t\t\t}";		
		 
		
		strControl+="\r\n\t	} catch(Exception e) {\r\n";
		strControl+="\t		;\r\n";
		strControl+="\t	}\r\n";
		strControl+="\t}\r\n";					
		
		//if(column.Name.Equals(strArchivo_Lower)) {
			strControl+="\r\n\tpublic void jButtonDescargar"+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"ActionPerformed(java.awt.event.ActionEvent evt) throws Exception  {\r\n";
			strControl+="\t	try {\r\n";				
			
			//strControl+="\tSystem.out.println(\"Archivo descargandose\");\r\n";	
			
			if(blnTieneColumnaNombre) {
				strParteNombreArchivo="nombre";
				strParteNombreArchivoReplace=".replace(\" \", \"\").toLowerCase()";
			}
			
			strControl+="\r\n\r\n\t\t\tString sPathDir=this.parametroGeneralUsuario.getpath_exportar()+"+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.CLASSNAME;";
			strControl+="\r\n\t\t\tString sPathFile=sPathDir+\"/\"+this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+strParteNombreArchivo+"()"+strParteNombreArchivoReplace+"+\".\"+Funciones2.getExtensionTipo"+strTipoArchivoImagen_Lower+"(this."+GetNombreClaseObjetoC(column.Table.ToString())+".getid_tipo_"+strTipoArchivoImagen+"());";
					
			strControl+="\r\n\t\t\tFile dir = new File(sPathDir);";
			
			strControl+="\r\n\r\n\t\t\tif (!dir.exists()) {";
			strControl+="\r\n\t\t\t\tdir.mkdirs();";
			strControl+="\r\n\t\t\t}";
			
			strControl+="\r\n\r\n\t\t\tFileOutputStream fileOuputStream =  new FileOutputStream(sPathFile);";
		   	strControl+="\r\n\t\t\tfileOuputStream.write(this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+strArchivoImagen+"());";
		    strControl+="\r\n\t\t\tfileOuputStream.close();";
			
			strControl+="\r\n\r\n\t\t\tif(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this."+GetNombreClaseObjetoC(column.Table.ToString())+"SessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO &&";
			strControl+="\r\n\t\t\t\tJOptionPane"+strSwtMe+".showMessageDialog(this,\"DESCARGADO CORRECTAMENTE:\"+sPathFile,\"MANTENIMIENTO DE "+GetNombreClaseC(column.Table.ToString())+"\",JOptionPane"+strSwtMe+".INFORMATION_MESSAGE);";
			strControl+="\r\n\t\t\t}";
			
			strControl+="\r\n\r\n\t} catch(Exception e) {\r\n";
			strControl+="\t\t\tthrow e;\r\n";
			strControl+="\t	}\r\n";
			strControl+="\t}\r\n";	
		//}
		
		return strTituloControl+strControl;
	}
	
	public ArrayList GetCombosNamesFkBusquedasTableC(TableSchema TablaBase,ColumnSchema columnSchemaObjetivo) {
	String strPanelFkBusqueda="";
	ArrayList arrCombosNames=new ArrayList();
	String strComboName="";
	
	foreach(IndexSchema indexSchema in TablaBase.Indexes) {	
		if(!indexSchema.IsPrimaryKey) {
			if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
				continue;
			}			
			if(!indexSchema.IsUnique) {
				if(indexSchema.Name.Contains(strFK)) {
						//TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);											
						//strCombo="\t\t\t\t\t\t<div id=\"div"+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\">\r\n";
						
						//,siempre existe combo para cargar elemento
					if(columnSchemaObjetivo.Name.Equals(indexSchema.MemberColumns[0].Name)) {
						//strPanelFkBusqueda+=",div"+GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name);
						//strComboName=indexSchema.Name+".cmb"+GetNombreColumnaClaseC(indexSchema.MemberColumns[0]);
						//strComboName=GetDefinicionControlVariablesSwingC(indexSchema.MemberColumns[0].Column,indexSchema.Name,"",indexSchema.MemberColumns[0].IsForeignKeyMember)+""; 
						strComboName=GetNombreControlVariablesSwingInternoC(indexSchema.MemberColumns[0].Column,indexSchema.Name,"",true);
							
						
						arrCombosNames.Add(strComboName);
						
						continue;
					}
				}
								
				if(!indexSchema.Name.Contains(strFK)) {
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
						if(memberColumnSchema.Column.IsForeignKeyMember && columnSchemaObjetivo.Name.Equals(memberColumnSchema.Column.Name)) {
							//strPanelFkBusqueda+=",div"+GetNameControlHtmlBusqueda(memberColumnSchema.Column,indexSchema.Name);
							
							//strComboName=GetNameControlHtmlBusqueda(memberColumnSchema.Column,indexSchema.Name);
							//strComboName=indexSchema.Name+".cmb"+GetNombreColumnaClaseC(memberColumnSchema.Column);
							//strComboName=GetDefinicionControlVariablesSwingC(indexSchema.MemberColumns[0].Column,indexSchema.Name,"",indexSchema.MemberColumns[0].IsForeignKeyMember)+""; 
							strComboName=GetNombreControlVariablesSwingInternoC(indexSchema.MemberColumns[0].Column,indexSchema.Name,"",true);
						
						
							arrCombosNames.Add(strComboName);
							
							break;
						}
					}
				}
			}
		}
	}
	
	return arrCombosNames;
}

public ArrayList GetCombosIndicesNamesFkBusquedasTableC(TableSchema TablaBase,ColumnSchema columnSchemaObjetivo) {
	String strPanelFkBusqueda="";
	ArrayList arrCombosNames=new ArrayList();
	String strComboName="";
	bool blnExisteBusquedaFkVariableGlobal=false;
	
	foreach(IndexSchema indexSchema in TablaBase.Indexes) {	
		if(!indexSchema.IsPrimaryKey) {			
			blnExisteBusquedaFkVariableGlobal=false;

			if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
				continue;
			}			
			if(!indexSchema.IsUnique) {
				if(indexSchema.Name.Contains(strFK)) {
						//TableSchema tableRelacionada=GetNombreTablaRelacionadaFromColumn(indexSchema.MemberColumns[0]);											
						//strCombo="\t\t\t\t\t\t<div id=\"div"+   GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name)+"\">\r\n";						
						//,siempre existe combo para cargar elemento
					if(columnSchemaObjetivo.Name.Equals(indexSchema.MemberColumns[0].Name)) {
						
						if(EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(indexSchema,indexSchema.MemberColumns[0])
							|| EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(indexSchema,indexSchema.MemberColumns[0])) {
							
							blnExisteBusquedaFkVariableGlobal=true;
						}
						
						if(blnExisteBusquedaFkVariableGlobal) {
							continue;	
						}
						
						//strPanelFkBusqueda+=",div"+GetNameControlHtmlBusqueda(indexSchema.MemberColumns[0],indexSchema.Name);
						//strComboName=indexSchema.Name+".cmb"+GetNombreColumnaClaseC(indexSchema.MemberColumns[0]);
						//strComboName=GetDefinicionControlVariablesSwingC(indexSchema.MemberColumns[0].Column,indexSchema.Name,"",indexSchema.MemberColumns[0].IsForeignKeyMember)+""; 
						strComboName=GetNombreControlVariablesSwingInternoC(indexSchema.MemberColumns[0].Column,indexSchema.Name,"",true);
							
						
						arrCombosNames.Add(indexSchema.Name+","+strComboName);
						
						continue;
					}
					
					
					
				}
								
				if(!indexSchema.Name.Contains(strFK)) {
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
						if(memberColumnSchema.Column.IsForeignKeyMember && columnSchemaObjetivo.Name.Equals(memberColumnSchema.Column.Name)) {
							if(EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)
								|| EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)) {
								blnExisteBusquedaFkVariableGlobal=true;
								break;
							}
							
							//strPanelFkBusqueda+=",div"+GetNameControlHtmlBusqueda(memberColumnSchema.Column,indexSchema.Name);
							
							//strComboName=GetNameControlHtmlBusqueda(memberColumnSchema.Column,indexSchema.Name);
							//strComboName=indexSchema.Name+".cmb"+GetNombreColumnaClaseC(memberColumnSchema.Column);
							//strComboName=GetDefinicionControlVariablesSwingC(indexSchema.MemberColumns[0].Column,indexSchema.Name,"",indexSchema.MemberColumns[0].IsForeignKeyMember)+""; 
							
							if(columnSchemaObjetivo.Name.Equals(memberColumnSchema.Column.Name)) {
								strComboName=GetNombreControlVariablesSwingInternoC(memberColumnSchema.Column,indexSchema.Name,"",true);//indexSchema.MemberColumns[0].Column
						
								arrCombosNames.Add(indexSchema.Name+","+strComboName);
							}
							
							break;
						}
					}
					
					
				}
			}
		}
	}
	
	return arrCombosNames;
}

	public string GetSetControlesPanelVariablesSwingAnteriorC(TableSchema table,bool ConGroupLayout)
	{	
		String strControles="";
		String strControl="";
		String strTituloControl="";
			strTituloControl+="";
		String strHorizontalGroup="";
			strHorizontalGroup+="";
		String strVerticalGroup="";
			strVerticalGroup+="";
		String strEndVerticalGroup="\r\n)))\r\n";
          	   strEndVerticalGroup+=");";
		
		String strHorizontalLabel="";
		String strVerticalLabel="";
		
		String strHorizontalControl="";
		String strVerticalControl="";
		
		String strHorizontalGroupLabels="";
		String strHorizontalGroupControles="";
		String strVerticalGroupLabels="";
		String strVerticalGroupControles="";
		
		
		if(ConGroupLayout) {
			strHorizontalGroupLabels="\r\njPanelCamposLayout"+GetNombreClaseC(table.ToString())+".setHorizontalGroup(\r\n";
			strHorizontalGroupLabels+="\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n";
			strHorizontalGroupLabels+="\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
			strHorizontalGroupLabels+="\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING, false)\r\n";
									
			strHorizontalGroupControles=")\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING, false)";
			
			
			strVerticalGroupLabels=").addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()";
			
			strVerticalGroupControles="\r\n)\r\n";
			strVerticalGroupControles+="));\r\n";
			strVerticalGroupControles+="\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".setVerticalGroup(\r\n";
			strVerticalGroupControles+="\t\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING)\r\n";
			strVerticalGroupControles+="\t\t.addGroup(GroupLayout.Alignment.TRAILING, jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
			strVerticalGroupControles+="\t\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING)\r\n";
			strVerticalGroupControles+="\t\t\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
		}
		
		
		String strControlLabelGridBagConstraints="";
		String strControlesLabelGridBagConstraints="";
		String strControlControlGridBagConstraints="";
		String strControlesControlGridBagConstraints="";
		String strControlesControlGridBagConstraintsAux="";
		
		
		strControlLabelGridBagConstraints="\r\n\tGridBagConstraints gridBagConstraintsBYDANNOMBRELABEL = new GridBagConstraints();";
		strControlLabelGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRELABEL.fill = GridBagConstraints.HORIZONTAL;";
		strControlLabelGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRELABEL.gridy = BYDANCOLUMNA;";
		strControlLabelGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRELABEL.gridx = BYDANFILALABEL;";//0
		strControlLabelGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRELABEL.ipadx = 35;";
		strControlLabelGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRELABEL.insets = new Insets(5, 5, 5, 5);";
		
		strControlLabelGridBagConstraints+="\r\n\r\n\tjPanelCampos"+GetNombreClaseC(table.ToString())+".add(BYDANCONTROLLABEL, gridBagConstraintsBYDANNOMBRELABEL);\r\n\r\n";
		
		
		
		strControlControlGridBagConstraints="\r\n\r\n\tGridBagConstraints gridBagConstraintsBYDANNOMBRE = new GridBagConstraints();";
		strControlControlGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRE.fill = GridBagConstraints.HORIZONTAL;";
		strControlControlGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRE.gridy = BYDANCOLUMNA;";
		strControlControlGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRE.gridx = BYDANFILACONTROL;";//0
		strControlControlGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRE.ipadx = 100;";
		strControlControlGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRE.insets = new Insets(5, 5, 5, 5);";
		
		strControlControlGridBagConstraints+="\r\n\tjPanelCampos"+GetNombreClaseC(table.ToString())+".add(BYDANCONTROL, gridBagConstraintsBYDANNOMBRE);\r\n\r\n";
		
		int intNumColumna=1;
		String strControlAuxiliar="";
		String strReturn="";
		String strControlLabel="";
		String strTipoControlId="";
		
		int intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(table);
		int intContadorFilaColumna=1;
		bool blnIniciaFila=false;
		bool blnTerminaFila=false;
		int intColumnasRellenar=0;

		ColumnSchema column=null;
		
		int intColumnaXLabel=0;
		int intColumnaXControl=0;
		int intDiferencia=0;
		
		//Trace.WriteLine(intNumeroColumnasForm);
		
		//foreach(ColumnSchema column in table.Columns)
		for (int i = 0; i < table.Columns.Count; i++)
		{	
			strControlesControlGridBagConstraintsAux="";
			
			column=table.Columns[i];
			
			if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
			{
				continue;
			}							
			
			//Trace.WriteLine(i+"-"+intContadorFilaColumna);
			
			intColumnaXLabel=intContadorFilaColumna-1+intDiferencia;
			intColumnaXControl=intColumnaXLabel + 1;
			
			//Trace.WriteLine(intContadorFilaColumna);
			//Trace.WriteLine(intContadorFilaColumna+"-"+intDiferencia+"-"+intColumnaXLabel+"-"+intColumnaXControl);
			
			intDiferencia++;
			
			
			//Trace.WriteLine(intContadorFilaColumna);
			if(intContadorFilaColumna==1) {
				blnIniciaFila=true;
				blnTerminaFila=false;				
			} 

			if(intContadorFilaColumna.Equals(intNumeroColumnasForm)) {
				//blnIniciaFila=false;
				blnTerminaFila=true;
				intContadorFilaColumna=1;
				intDiferencia=0;
				intNumColumna++;
			} else {
				intContadorFilaColumna++;
			}
			
			//FORZA TERMINAR FILA, SINO QUEDARIA ABIERTO
			/*
			if(i.Equals(table.Columns.Count-1)) {					
				if(!blnTerminaFila) {
					blnTerminaFila=true;
					intColumnasRellenar=intNumeroColumnasForm-(intContadorFilaColumna-1);
					//Trace.WriteLine("No Columnas:"+intColumnasRellenar);
				}															
			}
			*/
			
			if(column.Name.Equals(strId) && !column.IsForeignKeyMember)
			{
				strTipoControlId="jLabel";
			
				if(!TieneIdentityColumnC(column)) {
					strTipoControlId="jTextField";
					
				}
			
				//intNumColumna++;
				strControlLabel="jLabel"+strIdGetSet+GetNombreClaseC(table.ToString())+strIdGetSet;
					
				if(ConGroupLayout) {
					strTituloControl="\r\n\t\t\t.addComponent("+strControlLabel+")\r\n";
					strHorizontalLabel+=strTituloControl;
					strVerticalLabel+=strTituloControl;
				}
				
				strControlAuxiliar=strIdGetSet+GetNombreClaseC(table.ToString())+"";
				strControl=strTipoControlId+strControlAuxiliar;
				
				if(ConGroupLayout) {
					strHorizontalControl+="\r\n\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
					strVerticalControl+="\r\n\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
				}
			}
			else
			{
				
				if(column.Name.Equals(strVersionRow))
				{
					continue;
				} else {
					//intNumColumna++;	
				}
				
				if(!column.IsForeignKeyMember) {
					strControlLabel="jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString());
				} else {
					if(!blnNoStandardTableFromProperties) {	
						strControlLabel="jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString());
					} else {
						TableSchema tableSchemaLabelFK=GetTableSchemaFromColumnForeignKey(column);	
						strControlLabel="jLabel"+GetNombreClaseC(tableSchemaLabelFK.ToString())+GetNombreClaseC(table.ToString());
					}
						
				}
				
				if(ConGroupLayout) {
					strTituloControl="\t\t\t.addComponent("+strControlLabel+")\r\n";
					strHorizontalLabel+=strTituloControl;
					strVerticalLabel+=strTituloControl;
				}
				
				if(!column.IsForeignKeyMember)
				{
					if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
					{
						if(column.Size<51)
						{
							strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
							strControl="jTextField"+strControlAuxiliar;
						}
						else if(column.Size<200)
						{
							strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
							strControl="jscrollPane"+strControlAuxiliar;
						}
						else
						{
							strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
							strControl="jscrollPane"+strControlAuxiliar;
						}
					}
					else if(column.DataType==DbType.Boolean)
					{
						strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						strControl="jCheckBox"+strControlAuxiliar;
					}
					else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
					{
						strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						strControl="jTextField"+strControlAuxiliar;
					}
					else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
					{
						strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						strControl="jFormattedTextField"+strControlAuxiliar;
					}
					else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
					{
						strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						strControl="jButton"+strControlAuxiliar;
					}
				}
				else
				{
					String strControlAuxiliarFK="";
					
					strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";	
					
					if(!blnNoStandardTableFromProperties) {	
						strControlAuxiliarFK=strControlAuxiliar;
					} else {
						//TRAE LA TABLA CORRESPONDIENTE
						TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);
						//System.Windows.Forms.MessageBox.Show(column.Name+"-"+tableSchemaFK.Name);
						strControlAuxiliarFK=GetNombreClaseC(tableSchemaFK.ToString())+GetNombreClaseC(table.ToString())+"";
					}
								
					//strControl="jComboBox"+strControlAuxiliarFK;		
					strControl="jPanel"+strControlAuxiliarFK;		
					
					String strCombo="jComboBox"+strControlAuxiliarFK;
					String strButton="jButton"+strControlAuxiliarFK;
					
					strControlesControlGridBagConstraintsAux= GetSetPanelControlGeneralVariableSwingC(column,strControlAuxiliarFK+"Aux",strCombo,strControl,0,0,0,0);
					
					if(GetBusquedaForeignKeyColumnFromPropertiesC(column)) {						
						strControlesControlGridBagConstraintsAux+= GetSetPanelControlGeneralVariableSwingC(column,strControlAuxiliarFK+"Aux2",strButton,strControl,0,1,0,0);
					}										
					
				}
				
				if(ConGroupLayout) {
					strHorizontalControl+="\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
					strVerticalControl+="\t\t\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
				}
			}
			/*	
			String strControlLabelGridBagConstraints="";
			String strControlesLabelGridBagConstraints="";
			String strControlControlGridBagConstraints="";
			String strControlesControlGridBagConstraints="";
			*/
			
			if(!ConGroupLayout) {
				/*
				if(column.Name=="Numapor"||column.Name=="FotoSOC") {
				System.Windows.Forms.MessageBox.Show(strControlLabelGridBagConstraints.Replace("BYDANCOLUMNA",intNumColumna.ToString()).Replace("BYDANCONTROLLABEL",strControlLabel).Replace("BYDANNOMBRELABEL",strControlAuxiliar+"Label"));	
				}
				*/
				strControlesLabelGridBagConstraints+=strControlLabelGridBagConstraints.Replace("BYDANCOLUMNA",intNumColumna.ToString()).Replace("BYDANCONTROLLABEL",strControlLabel).Replace("BYDANNOMBRELABEL",strControlAuxiliar+"Label").Replace("BYDANFILALABEL",intColumnaXLabel.ToString());
				
				strControlesControlGridBagConstraints+=strControlesControlGridBagConstraintsAux;
				
				strControlesControlGridBagConstraints+=strControlControlGridBagConstraints.Replace("BYDANCOLUMNA",intNumColumna.ToString()).Replace("BYDANCONTROL",strControl).Replace("BYDANNOMBRE",strControlAuxiliar).Replace("BYDANFILACONTROL",intColumnaXControl.ToString());
				
				
			}
		
		
			
			
			blnIniciaFila=false;
			blnTerminaFila=false;	
		}//foreach column
		
		if(ConGroupLayout) {
			strControles+=strHorizontalGroupLabels;
			strControles+=strHorizontalLabel;
			strControles+=strHorizontalGroupControles;
			strControles+=strHorizontalControl;
			
			
			
			strControles+=strVerticalGroupControles;
			strControles+=strVerticalControl;
			strControles+=strVerticalGroupLabels;
			strControles+=strVerticalLabel;
			
			strControles+=strEndVerticalGroup;
		}
		
		if(ConGroupLayout) {
			strReturn=strControles;
		} else {
			strReturn=strControlesLabelGridBagConstraints+strControlesControlGridBagConstraints;
		}
		
		return strReturn;
	}
	
	public void InicializarVariablesFinFila(ref bool blnTerminaFila,ref int intContadorFilaColumna
											,ref int intContadorColumna,ref int intContadorFila,bool esForzado) {
		//blnIniciaFila=false;
		blnTerminaFila=true;
		intContadorFilaColumna=1;
		intContadorColumna=0;
		intContadorFila++;
	}
	
	public string GetSetControlesPanelVariablesSwingC(TableSchema table,bool ConGroupLayout,bool EsNormal,bool EsParaCamposOcultos,bool EsParaCamposFin,bool EsParaCamposInicio) {	
		String strControles="";
		String strControl="";
		String strTituloControl="";
			strTituloControl+="";
		String strHorizontalGroup="";
			strHorizontalGroup+="";
		String strVerticalGroup="";
			strVerticalGroup+="";
		String strEndVerticalGroup="\r\n)))\r\n";
          	   strEndVerticalGroup+=");";
		
		String strHorizontalLabel="";
		String strVerticalLabel="";
		
		String strHorizontalControl="";
		String strVerticalControl="";
		
		String strHorizontalGroupLabels="";
		String strHorizontalGroupControles="";
		String strVerticalGroupLabels="";
		String strVerticalGroupControles="";
		
		
		if(ConGroupLayout) {
			strHorizontalGroupLabels="\r\njPanelCamposLayout"+GetNombreClaseC(table.ToString())+".setHorizontalGroup(\r\n";
			strHorizontalGroupLabels+="\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n";
			strHorizontalGroupLabels+="\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
			strHorizontalGroupLabels+="\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING, false)\r\n";
									
			strHorizontalGroupControles=")\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING, false)";
			
						
			strVerticalGroupLabels=").addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()";
			
			
			strVerticalGroupControles="\r\n)\r\n";
			strVerticalGroupControles+="));\r\n";
			strVerticalGroupControles+="\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".setVerticalGroup(\r\n";
			strVerticalGroupControles+="\t\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING)\r\n";
			strVerticalGroupControles+="\t\t.addGroup(GroupLayout.Alignment.TRAILING, jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
			strVerticalGroupControles+="\t\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING)\r\n";
			strVerticalGroupControles+="\t\t\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
		}
				
		String strControlLabelGridBagConstraints="";
		String strControlesLabelGridBagConstraints="";
		String strControlControlGridBagConstraints="";
		String strControlesControlGridBagConstraints="";
		String strControlesControlGridBagConstraintsAux="";
		
		//COPIADO POR CONTROL
		/*
		strControlLabelGridBagConstraints="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+" = new GridBagConstraints();";
		strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".fill = GridBagConstraints.HORIZONTAL;";
		strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridy = BYDANCOLUMNA;";
		strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridx = BYDANFILALABEL;";//0
		strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".ipadx = 35;";
		strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".insets = new Insets(5, 5, 5, 5);";
		
		strControlLabelGridBagConstraints+="\r\n\r\n\tthis.jPanelCampos"+GetNombreClaseC(table.ToString())+".add(BYDANCONTROLLABEL, this.gridBagConstraints"+GetNombreClaseC(table.ToString())+");\r\n\r\n";
		*/
		
		/*
		strControlControlGridBagConstraints="\r\n\r\n\tGridBagConstraints gridBagConstraintsBYDANNOMBRE = new GridBagConstraints();";
		strControlControlGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRE.fill = GridBagConstraints.HORIZONTAL;";
		strControlControlGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRE.gridy = BYDANCOLUMNA;";
		strControlControlGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRE.gridx = BYDANFILACONTROL;";//0
		strControlControlGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRE.ipadx = 100;";
		strControlControlGridBagConstraints+="\r\n\tgridBagConstraintsBYDANNOMBRE.insets = new Insets(5, 5, 5, 5);";
		
		strControlControlGridBagConstraints+="\r\n\tjPanelCampos"+GetNombreClaseC(table.ToString())+".add(BYDANCONTROL, gridBagConstraintsBYDANNOMBRE);\r\n\r\n";
		*/
		
		int intNumColumna=1;
		String strControlAuxiliar="";
		String strReturn="";
		String strControlLabel="";
		String strTipoControlId="";
		String strSufijoPanelControl="";		
		int intNumeroColumnasForm=0;//GetAlignVerticalFormNumeroColumnasTableC(table);
		int intNumeroColumnasSubPanelForm=0;
		
		//NUMERO COLUMNAS CAMPOS OCULTOS, 1 O 2, AHORA IGUAL QUE COLUMNAS NORMALES		
		//COMENTAR SI SE ACTIVA ABAJO
		//BYDAN_ERROR				
		intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(table);
		intNumeroColumnasSubPanelForm=intNumeroColumnasForm;
		
		if(EsParaCamposOcultos) {
			strSufijoPanelControl="Ocultos";
		}		
		
		//PARA ACTIVAR DESCOMENTAR
		/*
		if(!EsParaCamposOcultos) {
			intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(table);
		} else {
			strSufijoPanelControl="Ocultos";
			
			if(intNumeroColumnasPrincipalOcultas<=3) {
				intNumeroColumnasForm=1;
			} else {
				intNumeroColumnasForm=2;
			}
		}
		*/					
		
		ColumnSchema column=null;
		int intContadorFilaColumna=0;
		int intContadorFila=0;		
		int intContadorColumna=-1;	
		bool blnIniciaFila=false;
		bool blnTerminaFila=false;
		int intColumnasRellenar=0;				
		int intColumnaXLabel=0;
		int intColumnaXControl=0;
		int intDiferencia=0;
		
		//Trace.WriteLine(intNumeroColumnasForm);
		String strPanelFin="";
		String strPanelInicio="";
		String strPanelNumeroColumnas="";
		String[] arrPanelNumeroColumnas=null;
		String[] arrPanelNumeroColumna=null;
		bool esOcultarColumna=false;
		
		//foreach(ColumnSchema column in table.Columns)
		for (int i = 0; i < table.Columns.Count; i++) {	
			strControlesControlGridBagConstraintsAux="";
			
			column=table.Columns[i];
			
			
			if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired) || column.Name.Equals(strVersionRow))	{
				continue;
			}							
			
			if(GetEsProcesoParamFromPropertiesC(table) && column.Name.Equals(strId)) {
				continue;
			}
			
			esOcultarColumna=(EsColumnaVariableGlobalDataBaseFromPropertiesC(column) 
							 || EsColumnaVariableModuloGlobalC(column)
							 || GetNoInsertEditColumnFromPropertiesC(column)
							 )
							&& !EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(column)
							;
			
			strPanelFin=GetPanelFinNombreColumnFromPropertiesC(column);
			strPanelInicio=GetPanelInicioNombreColumnFromPropertiesC(column);									
			
			if(((EsNormal && esOcultarColumna) || (EsNormal && !strPanelFin.Equals("")) || (EsNormal && !strPanelInicio.Equals("")))
				|| (EsParaCamposOcultos && !esOcultarColumna) 
				|| ((EsParaCamposFin && esOcultarColumna) || (EsParaCamposFin && strPanelFin.Equals("")))
				|| ((EsParaCamposInicio && esOcultarColumna) || (EsParaCamposInicio && strPanelInicio.Equals("")))
				) {				
				//Trace.WriteLine(column.Name);
				continue;
			}						
			
			if(EsParaCamposFin) {
				strSufijoPanelControl="Fin"+strPanelFin;	
			
			} else if(EsParaCamposInicio) {
				strSufijoPanelControl="Inicio"+strPanelInicio;
			}
			
			//NUMERO COLUMNAS SUBPANELES
			intNumeroColumnasSubPanelForm=intNumeroColumnasForm;
			
			//Trace.WriteLine(strPanelInicio);
			strPanelNumeroColumnas=GetPanelNumeroColumnasTableFromPropertiesC(table);
			if(!strPanelNumeroColumnas.Equals("")) {
				//intNumeroColumnasSubPanelForm
				arrPanelNumeroColumnas=strPanelNumeroColumnas.Split(';');
				
				foreach(String strPanelNumeroColumnasAux in arrPanelNumeroColumnas) {
					if(strPanelNumeroColumnasAux.Trim().Equals("")) {
						continue;	
					}
					
					arrPanelNumeroColumnas=strPanelNumeroColumnasAux.Split(',');
					
					if((arrPanelNumeroColumnas[0]!=null && arrPanelNumeroColumnas[0].Equals(strPanelFin))
						|| (arrPanelNumeroColumnas[0]!=null && arrPanelNumeroColumnas[0].Equals(strPanelInicio))) 
					{
						
						if(arrPanelNumeroColumnas[1]!=null) {
							intNumeroColumnasSubPanelForm=int.Parse(arrPanelNumeroColumnas[1]);
						}
					}
				}
			}
			
			String strAnchor=GetAnchorColumnFromPropertiesC(column);
			
			if(strAnchor.Equals("")) {
				strAnchor="WEST";
			}
			
			strControlLabelGridBagConstraints="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+" = new GridBagConstraints();";
			
			if(GetNumeroXExtraTableFromPropertiesC(column)>0) {
				strControlLabelGridBagConstraints+="\r\n\t//NUM X EXTRA";
				strControlLabelGridBagConstraints+="\r\n\tiXPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"+="+GetNumeroXExtraTableFromPropertiesC(column)+";";
				
				if(blnConForzarUbicarPanelesManualmente) {
					iXPanelCampos+=GetNumeroXExtraTableFromPropertiesC(column);
				}
			}
			
			if(GetNumeroYExtraTableFromPropertiesC(column)>0) {
				strControlLabelGridBagConstraints+="\r\n\t//NUM Y EXTRA";
				strControlLabelGridBagConstraints+="\r\n\tiYPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"+="+GetNumeroYExtraTableFromPropertiesC(column)+";";
				
				if(blnConForzarUbicarPanelesManualmente) {
					iYPanelCampos+=GetNumeroYExtraTableFromPropertiesC(column);
				}
			}
			
			strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".fill = GridBagConstraints.NONE;";//.HORIZONTAL
			strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".anchor = GridBagConstraints."+strAnchor+";";
			
			if(!blnConForzarUbicarPanelesManualmente) {
				strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridy = iYPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+";";//BYDANFILALABEL->BYDAN_TEMP
				strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridx = iXPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"++;";//0,BYDANCOLUMNA->BYDAN_TEMP
			
			} else {
				strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridy ="+iYPanelCampos+";";
				strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridx ="+iXPanelCampos+";";
			}
			
			strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".ipadx = 0;";
			strControlLabelGridBagConstraints+="\r\n\t//COLSPAN_NUEVAFILA";
			
			if(strCellSpacing.Equals("")) {
				strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".insets = new Insets(2, 2, 2, 2);";
			} else {
				strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".insets = new Insets("+strCellSpacing+", "+strCellSpacingLeft+", "+strCellSpacing+", "+strCellSpacing+");";
			}
			
			strAnchoColumnPorcentajeDefectoTabla="0";
			strAltoColumnPorcentajeDefectoTabla="0";
			
			String strColspan=GetColSpanColumnFromPropertiesC(column);
			
			if(!strColspan.Equals("")) {
				strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridwidth = "+strColspan+";";
			}
			
			strControlLabelGridBagConstraints+="\r\n\r\n\tthis.jPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+".add(BYDANCONTROLLABEL, this.gridBagConstraints"+GetNombreClaseC(table.ToString())+");\r\n\r\n";
			
			strControlLabelGridBagConstraints+="\r\n\r\n\tif(iXPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+" % "+intNumeroColumnasSubPanelForm+"==0) {";//intNumeroColumnasForm
			strControlLabelGridBagConstraints+="\r\n\t\tiXPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"=0;";
			strControlLabelGridBagConstraints+="\r\n\t\tiYPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"++;";
			strControlLabelGridBagConstraints+="\r\n\t}";
			
			if(blnConForzarUbicarPanelesManualmente) {
				if((iXPanelCampos % intNumeroColumnasSubPanelForm) == 0) {
					iXPanelCampos=0;
					iYPanelCampos++;
					
				}
			}
			//Trace.WriteLine(i+"-"+intContadorFilaColumna);
			//"BYDANCOLUMNA",intColumnaXLabel
			//"BYDANFILALABEL",intContadorFila
			
			intColumnaXLabel=intContadorColumna;/*-1+intDiferencia*/;
			//intColumnaXControl=intContadorFilaColumna;//intColumnaXLabel + 1;
												
			if(intContadorFilaColumna==0) {
				blnIniciaFila=true;
				blnTerminaFila=false;				
			} 

			if(intContadorFilaColumna.Equals(intNumeroColumnasForm)) {
				//blnIniciaFila=false;
				/*
				blnTerminaFila=true;
				intContadorFilaColumna=1;
				intContadorColumna=0;
				intContadorFila++;
				*/
				InicializarVariablesFinFila(ref blnTerminaFila,ref intContadorFilaColumna
											,ref intContadorColumna,ref intContadorFila,false);
			} else {
				intContadorColumna++;
				intContadorFilaColumna++;
			}
			
			//PARA DEJAR SOLO EN LA FILA
			if(column.Name.Equals(strId)) {
				intContadorFilaColumna=intNumeroColumnasForm;
				//intContadorFila++;
			}
			
			//Trace.WriteLine(column.Name+"--->("+intNumeroColumnasForm+"-"+intContadorFilaColumna+")->"+intContadorColumna+"-"+intContadorFila);
			
			//FORZA TERMINAR FILA, SINO QUEDARIA ABIERTO
			/*
			if(i.Equals(table.Columns.Count-1)) {					
				if(!blnTerminaFila) {
					blnTerminaFila=true;
					intColumnasRellenar=intNumeroColumnasForm-(intContadorFilaColumna-1);
					//Trace.WriteLine("No Columnas:"+intColumnasRellenar);
				}															
			}
			*/
			
			strControlLabel="this."+GetNombrePanelControlVariablesSwingC(column,"","",false);
			
			if(column.Name.Equals(strId) && !column.IsForeignKeyMember) {
				/*
				strTipoControlId="jLabel";
			
				if(!TieneIdentityColumnC(column)) {
					strTipoControlId="jTextField";
					
				}
			
				//intNumColumna++;
				strControlLabel="jLabel"+strIdGetSet+GetNombreClaseC(table.ToString())+strIdGetSet;
					
				if(ConGroupLayout) {
					strTituloControl="\r\n\t\t\t.addComponent("+strControlLabel+")\r\n";
					strHorizontalLabel+=strTituloControl;
					strVerticalLabel+=strTituloControl;
				}
				
				strControlAuxiliar=strIdGetSet+GetNombreClaseC(table.ToString())+"";
				strControl=strTipoControlId+strControlAuxiliar;
				
				if(ConGroupLayout) {
					strHorizontalControl+="\r\n\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
					strVerticalControl+="\r\n\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
				}
				*/
			} else {				
				if(column.Name.Equals(strVersionRow)) {
					//continue;
				} else {
					//intNumColumna++;	
				}
				
				/*
				if(!column.IsForeignKeyMember) {
					strControlLabel="jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString());
				} else {
					if(!blnNoStandardTableFromProperties) {	
						strControlLabel="jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString());
					} else {
						TableSchema tableSchemaLabelFK=GetTableSchemaFromColumnForeignKey(column);	
						strControlLabel="jLabel"+GetNombreClaseC(tableSchemaLabelFK.ToString())+GetNombreClaseC(table.ToString());
					}
						
				}
				*/
				
				if(ConGroupLayout) {
					/*
					strTituloControl="\t\t\t.addComponent("+strControlLabel+")\r\n";
					strHorizontalLabel+=strTituloControl;
					strVerticalLabel+=strTituloControl;
					*/
				}
				
				if(!column.IsForeignKeyMember) {
					if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {
						/*
						if(column.Size<51)
						{
							strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
							strControl="jTextField"+strControlAuxiliar;
						}
						else if(column.Size<200)
						{
							strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
							strControl="jscrollPane"+strControlAuxiliar;
						}
						else
						{
							strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
							strControl="jscrollPane"+strControlAuxiliar;
						}
						*/
					} else if(column.DataType==DbType.Boolean) {
						//strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						//strControl="jCheckBox"+strControlAuxiliar;
					} else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
						//strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						//strControl="jTextField"+strControlAuxiliar;
					} else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime) {
						//strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						//strControl="jFormattedTextField"+strControlAuxiliar;
					} else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow)) {
						//strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						//strControl="jButton"+strControlAuxiliar;
					}
				} else {
					/*
					String strControlAuxiliarFK="";
					
					strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";	
					
					if(!blnNoStandardTableFromProperties) {	
						strControlAuxiliarFK=strControlAuxiliar;
					} else {
						//TRAE LA TABLA CORRESPONDIENTE
						TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);
						//System.Windows.Forms.MessageBox.Show(column.Name+"-"+tableSchemaFK.Name);
						strControlAuxiliarFK=GetNombreClaseC(tableSchemaFK.ToString())+GetNombreClaseC(table.ToString())+"";
					}
								
					//strControl="jComboBox"+strControlAuxiliarFK;		
					strControl="jPanel"+strControlAuxiliarFK;		
					
					String strCombo="jComboBox"+strControlAuxiliarFK;
					String strButton="jButton"+strControlAuxiliarFK;
					
					strControlesControlGridBagConstraintsAux= GetSetPanelControlGeneralVariableSwingC(column,strControlAuxiliarFK+"Aux",strCombo,strControl,0,0,0,0);
					
					if(GetBusquedaForeignKeyColumnFromPropertiesC(column)) {						
						strControlesControlGridBagConstraintsAux+= GetSetPanelControlGeneralVariableSwingC(column,strControlAuxiliarFK+"Aux2",strButton,strControl,0,1,0,0);
					}	
					*/
					
				}
				
				if(ConGroupLayout) {
					//strHorizontalControl+="\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
					//strVerticalControl+="\t\t\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
				}
			}
			/*	
			String strControlLabelGridBagConstraints="";
			String strControlesLabelGridBagConstraints="";
			String strControlControlGridBagConstraints="";
			String strControlesControlGridBagConstraints="";
			*/
			
			if(!ConGroupLayout) {
				/*
				if(column.Name=="Numapor"||column.Name=="FotoSOC") {
				System.Windows.Forms.MessageBox.Show(strControlLabelGridBagConstraints.Replace("BYDANCOLUMNA",intNumColumna.ToString()).Replace("BYDANCONTROLLABEL",strControlLabel).Replace("BYDANNOMBRELABEL",strControlAuxiliar+"Label"));	
				}
				*/
				
				int intNumeroColumnasFormExtraLabel=(intNumeroColumnasForm * 2) -1;
				string strTituloNuevaFila="";
				
				if(GetEsNuevaFilaColumnFromPropertiesC(column)) {
					
					strControlesLabelGridBagConstraints+="\r\n\r\n\tiXPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"=0;";
					
					//if(!blnTerminaFila) {
					strControlesLabelGridBagConstraints+="\r\n\tiYPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"++;\r\n";
					//}
					
					if(blnConForzarUbicarPanelesManualmente) {
						iXPanelCampos=0;
						iYPanelCampos++;
					}
					
					
					InicializarVariablesFinFila(ref blnTerminaFila,ref intContadorFilaColumna
											,ref intContadorColumna,ref intContadorFila,true);	
					
					//Trace.WriteLine(column.Name);					
					//Trace.WriteLine("Columna="+intContadorColumna);
					
					strTituloNuevaFila=GetTituloNuevaFilaColumnFromPropertiesC(column);
					strTituloNuevaFila=strTituloNuevaFila.Replace("\\t","    ");
					
					//Trace.WriteLine(strTituloNuevaFila);
					
					if(!strTituloNuevaFila.Equals("")) {
						strControlesLabelGridBagConstraints+="\r\n\r\n\tif(!iXPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+".equals(0)) {";
						strControlesLabelGridBagConstraints+="\r\n\t\tiXPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"=0;";
						strControlesLabelGridBagConstraints+="\r\n\t\tiYPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"++;";
						strControlesLabelGridBagConstraints+="\r\n\t}\r\n";
						
						
						if(blnConForzarUbicarPanelesManualmente) {
							if(iXPanelCampos!=0) {
								iXPanelCampos=0;
								iYPanelCampos++;
							}
						}
						
						
						strControlesLabelGridBagConstraints+=GetControlLabelTituloNuevaFilaColumnC(column,strTituloNuevaFila,intNumeroColumnasForm,intNumeroColumnasFormExtraLabel);
						
						String strControlLabelTitulo="jLabelTitulo"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString());
						
						strControlesLabelGridBagConstraints+=strControlLabelGridBagConstraints.Replace("BYDANFILALABEL",intContadorFila.ToString()).Replace("BYDANCONTROLLABEL",strControlLabelTitulo).Replace("BYDANNOMBRELABEL",strControlAuxiliar+"Label").Replace("BYDANCOLUMNA",intContadorColumna.ToString()).Replace("//COLSPAN_NUEVAFILA","this.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridwidth = "+intNumeroColumnasFormExtraLabel+";");
						intContadorFila++;												
						
						strControlesLabelGridBagConstraints+="\r\n\r\n\tif(!iXPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+".equals(0)) {";
						strControlesLabelGridBagConstraints+="\r\n\t\tiXPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"=0;";
						strControlesLabelGridBagConstraints+="\r\n\t\tiYPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"++;";						
						strControlesLabelGridBagConstraints+="\r\n\t}\r\n\r\n";
						
						
						if(blnConForzarUbicarPanelesManualmente) {
							if(iXPanelCampos!=0) {
								iXPanelCampos=0;
								iYPanelCampos++;
							}
						}
						
					}
				}
				
				strControlesLabelGridBagConstraints+=strControlLabelGridBagConstraints.Replace("BYDANFILALABEL",intContadorFila.ToString()).Replace("BYDANCONTROLLABEL",strControlLabel).Replace("BYDANNOMBRELABEL",strControlAuxiliar+"Label").Replace("BYDANCOLUMNA",intContadorColumna.ToString());
				
				
				
				
				//strControlesControlGridBagConstraints+=strControlesControlGridBagConstraintsAux;
				
				//strControlesControlGridBagConstraints+=strControlControlGridBagConstraints.Replace("BYDANCOLUMNA",intNumColumna.ToString()).Replace("BYDANCONTROL",strControl).Replace("BYDANNOMBRE",strControlAuxiliar).Replace("BYDANFILACONTROL",intColumnaXControl.ToString());								
			}
										
			blnIniciaFila=false;
			blnTerminaFila=false;	
		}//foreach column
		
		if(ConGroupLayout) {
			strControles+=strHorizontalGroupLabels;
			strControles+=strHorizontalLabel;
			strControles+=strHorizontalGroupControles;
			strControles+=strHorizontalControl;
									
			strControles+=strVerticalGroupControles;
			strControles+=strVerticalControl;
			strControles+=strVerticalGroupLabels;
			strControles+=strVerticalLabel;
			
			strControles+=strEndVerticalGroup;
		}
		
		if(ConGroupLayout) {
			strReturn=strControles;
		} else {
			strReturn=strControlesLabelGridBagConstraints+strControlesControlGridBagConstraints;
		}
		
		return strReturn;
	}
	
	public string GetControlLabelTituloNuevaFilaColumnC(ColumnSchema column,String strLabel,int intNumeroColumnasForm,int iTamanioExtraLabel) {
		String strSwing="";
		String strWidthFila="";
		
		strWidthFila=GetAnchoFilaTituloColumnPorcentajeExtraFromPropertiesC(column);
		
		//int iTamanioExtraLabel=(intNumeroColumnasForm * 2) -1;
		
		int intNumeroColumnasFormTotal=intNumeroColumnasForm * 2;//2;
		
		if(strLabel.Contains("_____")) {
			for(int i=1;i<=iTamanioExtraLabel;i++) {
				strLabel+=strLabel;
			}
		}
		
		strSwing+="\r\n\tJLabelMe jLabelTitulo"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+" = new JLabelMe();";
	
		strSwing+="\r\n\tjLabelTitulo"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setText(\""+strLabel+"\");";
		
		strSwing+="\r\n\tjLabelTitulo"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,"+strWidthFila+"),Constantes.ISWING_ALTO_CONTROL));";
		strSwing+="\r\n\tjLabelTitulo"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,"+strWidthFila+"),Constantes.ISWING_ALTO_CONTROL));";
		strSwing+="\r\n\tjLabelTitulo"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,"+strWidthFila+"),Constantes.ISWING_ALTO_CONTROL));\r\n";
		
		/*
		strSwing+="\r\n\tjLabelTitulo"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(Constantes.ISWING_ANCHO_CONTROL * "+intNumeroColumnasFormTotal+",Constantes.ISWING_ALTO_CONTROL));";
		strSwing+="\r\n\tjLabelTitulo"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(Constantes.ISWING_ANCHO_CONTROL * "+intNumeroColumnasFormTotal+",Constantes.ISWING_ALTO_CONTROL));";
		strSwing+="\r\n\tjLabelTitulo"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(Constantes.ISWING_ANCHO_CONTROL * "+intNumeroColumnasFormTotal+",Constantes.ISWING_ALTO_CONTROL));\r\n";
		*/
		
		strSwing+="\r\n\tFuncionesSwing.setFormatoLabelTituloGrupo(jLabelTitulo"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+");\r\n";
		
		return strSwing;
	}
	
	public string GetSetDefinicionControlesPanelVariablesSwingParametrosC(TableSchema TablaBase,bool ConGroupLayout,bool EsParaCamposOcultos) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				strSwing+=GetSetDefinicionControlesPanelVariablesPanelSwingC(tableSchema,false);
			}
		}
		
		return strSwing;
	}
	
	public string GetSetDefinicionControlesPanelVariablesPanelSwingC(TableSchema table,bool ConGroupLayout) {
		String strReturn="";
		String strSufijoPanelControl="";
		
		strReturn+="\r\n\tprotected Integer iXPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"=0;";
		strReturn+="\r\n\tprotected Integer iYPanelCampos"+strSufijoPanelControl+GetNombreClaseC(table.ToString())+"=0;";
		
		return strReturn;
	}
	
	public string GetSetControlesPanelVariablesSwingParametrosC(TableSchema TablaBase,bool ConGroupLayout,bool EsParaCamposOcultos) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				strSwing+=GetSetControlesPanelVariablesSwingC(tableSchema,ConGroupLayout,true,EsParaCamposOcultos,false,false);
			}
		}
		
		return strSwing;
	}
	
	public string GetSetControlesPanelVariablesPanelSwingC(TableSchema table,bool ConGroupLayout)
	{	
		String strControles="";
		String strControl="";
		String strTituloControl="";
			strTituloControl+="";
		String strHorizontalGroup="";
			strHorizontalGroup+="";
		String strVerticalGroup="";
			strVerticalGroup+="";
		String strEndVerticalGroup="\r\n)))\r\n";
          	   strEndVerticalGroup+=");";
		
		String strHorizontalLabel="";
		String strVerticalLabel="";
		
		String strHorizontalControl="";
		String strVerticalControl="";
		
		String strHorizontalGroupLabels="";
		String strHorizontalGroupControles="";
		String strVerticalGroupLabels="";
		String strVerticalGroupControles="";
		
		
		if(ConGroupLayout) {
			strHorizontalGroupLabels="\r\njPanelCamposLayout"+GetNombreClaseC(table.ToString())+".setHorizontalGroup(\r\n";
			strHorizontalGroupLabels+="\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n";
			strHorizontalGroupLabels+="\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
			strHorizontalGroupLabels+="\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING, false)\r\n";
									
			strHorizontalGroupControles=")\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING, false)";
			
			
			strVerticalGroupLabels=").addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()";
			
			strVerticalGroupControles="\r\n)\r\n";
			strVerticalGroupControles+="));\r\n";
			strVerticalGroupControles+="\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".setVerticalGroup(\r\n";
			strVerticalGroupControles+="\t\tjPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING)\r\n";
			strVerticalGroupControles+="\t\t.addGroup(GroupLayout.Alignment.TRAILING, jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
			strVerticalGroupControles+="\t\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createParallelGroup(GroupLayout.Alignment.LEADING)\r\n";
			strVerticalGroupControles+="\t\t\t\t.addGroup(jPanelCamposLayout"+GetNombreClaseC(table.ToString())+".createSequentialGroup()\r\n";
		}
		
		
		String strControlLabelGridBagConstraints="";
		String strControlesLabelGridBagConstraints="";
		String strControlControlGridBagConstraints="";
		String strControlesControlGridBagConstraints="";
		String strControlesControlGridBagConstraintsAux="";
		
		
		
		
		int intNumColumna=1;
		String strControlAuxiliar="";
		String strReturn="";
		String strControlLabel="";
		String strTipoControlId="";
		
		int intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(table);
		int intContadorFilaColumna=1;
		bool blnIniciaFila=false;
		bool blnTerminaFila=false;
		int intColumnasRellenar=0;

		ColumnSchema column=null;
		
		int intColumnaXLabel=0;
		int intColumnaXControl=0;
		int intDiferencia=0;
		
		//Trace.WriteLine(intNumeroColumnasForm);
		
		//foreach(ColumnSchema column in table.Columns)
		for (int i = 0; i < table.Columns.Count; i++)
		{	
			strControlesControlGridBagConstraintsAux="";
			
			column=table.Columns[i];
			
			if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
			{
				continue;
			}							
			
			strControlLabelGridBagConstraints="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+" = new GridBagConstraints();";
			strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".fill = GridBagConstraints.HORIZONTAL;";
			strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridy = 0;";
			strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridx = 0;";//0
			strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".ipadx = 0;";
			
			if(strCellSpacing.Equals("")) {
				strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".insets = new Insets(2, 2, 2, 2);";
			} else {
				strControlLabelGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".insets = new Insets("+strCellSpacing+", "+strCellSpacingLeft+", "+strCellSpacing+", "+strCellSpacing+");";
			}
			
			strControlLabelGridBagConstraints+="\r\n\r\n\tthis."+GetNombrePanelControlVariablesSwingC(column,"","",false)+".add(BYDANCONTROLLABEL, this.gridBagConstraints"+GetNombreClaseC(table.ToString())+");\r\n\r\n";
			
			
			
			strControlControlGridBagConstraints="\r\n\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+" = new GridBagConstraints();";
			strControlControlGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".fill = GridBagConstraints.HORIZONTAL;";
			strControlControlGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridy = 0;";
			strControlControlGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".gridx = 1;";//0
			strControlControlGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".ipadx = 0;";
			
			if(strCellSpacing.Equals("")) {
				strControlControlGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".insets = new Insets(2, 2, 2, 2);";
			} else {
				strControlControlGridBagConstraints+="\r\n\tthis.gridBagConstraints"+GetNombreClaseC(table.ToString())+".insets = new Insets("+strCellSpacing+", "+strCellSpacingLeft+", "+strCellSpacing+", "+strCellSpacing+");";
			}
			
			strControlControlGridBagConstraints+="\r\n\tthis."+GetNombrePanelControlVariablesSwingC(column,"","",false)+".add(BYDANCONTROL, this.gridBagConstraints"+GetNombreClaseC(table.ToString())+");\r\n\r\n";
		
		
			//Trace.WriteLine(i+"-"+intContadorFilaColumna);
			
			intColumnaXLabel=intContadorFilaColumna-1+intDiferencia;
			intColumnaXControl=intColumnaXLabel + 1;
			
			//Trace.WriteLine(intContadorFilaColumna);
			//Trace.WriteLine(intContadorFilaColumna+"-"+intDiferencia+"-"+intColumnaXLabel+"-"+intColumnaXControl);
			
			intDiferencia++;
			
			
			//Trace.WriteLine(intContadorFilaColumna);
			if(intContadorFilaColumna==1) {
				blnIniciaFila=true;
				blnTerminaFila=false;				
			} 

			if(intContadorFilaColumna.Equals(intNumeroColumnasForm)) {
				//blnIniciaFila=false;
				blnTerminaFila=true;
				intContadorFilaColumna=1;
				intDiferencia=0;
				intNumColumna++;
			} else {
				intContadorFilaColumna++;
			}
			
			//FORZA TERMINAR FILA, SINO QUEDARIA ABIERTO
			/*
			if(i.Equals(table.Columns.Count-1)) {					
				if(!blnTerminaFila) {
					blnTerminaFila=true;
					intColumnasRellenar=intNumeroColumnasForm-(intContadorFilaColumna-1);
					//Trace.WriteLine("No Columnas:"+intColumnasRellenar);
				}															
			}
			*/
			
			if(column.Name.Equals(strId) && !column.IsForeignKeyMember)
			{
				strTipoControlId="jLabel";
			
				if(!TieneIdentityColumnC(column)) {
					strTipoControlId="jTextField";
					
				}
			
				//intNumColumna++;
				//DESCOMENTAR
				//strControlLabel="jLabel"+GetNombreColumnaClaseC(column)/*strIdGetSet*/+GetNombreClaseC(table.ToString())/*+strIdGetSet*/;
					
				strControlLabel="jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString());
				
				if(ConGroupLayout) {
					strTituloControl="\r\n\t\t\t.addComponent("+strControlLabel+")\r\n";
					strHorizontalLabel+=strTituloControl;
					strVerticalLabel+=strTituloControl;
				}
				
				strControlAuxiliar=GetNombreColumnaClaseC(column)/*strIdGetSet*/+GetNombreClaseC(table.ToString())+"";
				strControl=strTipoControlId+strControlAuxiliar;
				
				if(ConGroupLayout) {
					strHorizontalControl+="\r\n\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
					strVerticalControl+="\r\n\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
				}
			}
			else
			{
				
				if(column.Name.Equals(strVersionRow))
				{
					continue;
				} else {
					//intNumColumna++;	
				}
				
				if(!column.IsForeignKeyMember) {
					strControlLabel="jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString());
				} else {
					if(!blnNoStandardTableFromProperties) {	
						strControlLabel="jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString());
					} else {
						TableSchema tableSchemaLabelFK=GetTableSchemaFromColumnForeignKey(column);	
						strControlLabel="jLabel"+GetNombreClaseC(tableSchemaLabelFK.ToString())+GetNombreClaseC(table.ToString());
					}
						
				}
				
				if(ConGroupLayout) {
					strTituloControl="\t\t\t.addComponent("+strControlLabel+")\r\n";
					strHorizontalLabel+=strTituloControl;
					strVerticalLabel+=strTituloControl;
				}
				
				String strControlAuxiliarFK="";					
				strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";	
				strControlAuxiliarFK=GetNombreClaseC(table.ToString())+"";
				
				String strButton="jButton"+GetNombreColumnaClaseC(column)+strControlAuxiliarFK;
				
				int iXAuxiliar=2;
				
				if(!column.IsForeignKeyMember)
				{
					if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
					{
						if(column.Size<51)
						{
							strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
							strControl="jTextField"+strControlAuxiliar;
						}
						else if(column.Size<200)
						{
							strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
							strControl="jscrollPane"+strControlAuxiliar;
						}
						else
						{
							strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
							strControl="jscrollPane"+strControlAuxiliar;
						}
					}
					else if(column.DataType==DbType.Boolean)
					{
						strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						strControl="jCheckBox"+strControlAuxiliar;
					}
					else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
					{
						strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						strControl="jTextField"+strControlAuxiliar;
					}
					else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
					{
						strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						
						if(!EsTimeColumn(column)) {
							strControl="jDateChooser"+strControlAuxiliar;//jFormattedTextField
						} else {
							strControl="jSpinner"+strControlAuxiliar;//jFormattedTextField
						}
					}
					else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
					{
						String strLabelImagen="";
						String strButtonDescargar="";
						//CAMPO ARCHIVO
						strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";
						strControl="jButton"+strControlAuxiliar;
						strLabelImagen="jLabelImagen"+strControlAuxiliar;
						//strControl="jFileChooser"+strControlAuxiliar;
						
						//if(column.Name.Equals(strArchivo_Lower)) {
							strButtonDescargar="jButtonDescargar"+strControlAuxiliar;
							strControlesControlGridBagConstraintsAux+= GetSetPanelControlGeneralVariableSwingC(column,strLabelImagen+"Aux2",strButtonDescargar,/*strControl*/"this."+GetNombrePanelControlVariablesSwingC(column,"","",false),0,2,0,0);
						//}
						
						strControlesControlGridBagConstraintsAux+= GetSetPanelControlGeneralVariableSwingC(column,strLabelImagen+"Aux2",strLabelImagen,/*strControl*/"this."+GetNombrePanelControlVariablesSwingC(column,"","",false),0,3,0,0);
						
						
					}
					
					//BOTON BUSQUEDA GENERAL
					strControlesControlGridBagConstraintsAux+="\r\n\r\n\tif(this.conMostrarAccionesCampo) {";
					
					if(blnConFuncionalidadAccionesCampoVersion1) {
						strControlesControlGridBagConstraintsAux+= GetSetPanelControlGeneralVariableSwingC(column,strControlAuxiliarFK+"Aux2",strButton+"Busqueda",/*strControl*/"this."+GetNombrePanelControlVariablesSwingC(column,"","",false),0,iXAuxiliar++,0,0);
					}
					
					strControlesControlGridBagConstraintsAux+="\r\n\t}";
					
				}
				else
				{
					
					
					if(!blnNoStandardTableFromProperties) {	
						strControlAuxiliarFK=strControlAuxiliar;
					} else {
						//TRAE LA TABLA CORRESPONDIENTE
						TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);
						//System.Windows.Forms.MessageBox.Show(column.Name+"-"+tableSchemaFK.Name);
						strControlAuxiliarFK=GetNombreClaseC(tableSchemaFK.ToString())+GetNombreClaseC(table.ToString())+"";
						
						strControlAuxiliar=GetNombreColumnaClaseC(column)+GetNombreClaseC(table.ToString())+"";	
						strControlAuxiliarFK=GetNombreClaseC(tableSchemaFK.ToString())+GetNombreClaseC(table.ToString())+"";
				
						strButton="jButton"+strControlAuxiliarFK;
				
					}
								
					strControl="jComboBox"+strControlAuxiliarFK;		
					//strControl="this."+GetNombrePanelControlVariablesSwingC(column,"","",false);//"jPanel"+strControlAuxiliarFK;		
					
					String strCombo="jComboBox"+strControlAuxiliarFK;
					
					//mostrar
					//strControlesControlGridBagConstraintsAux= GetSetPanelControlGeneralVariableSwingC(column,strControlAuxiliarFK+"Aux",strCombo,strControl,0,1,0,0);
					
					
					if(GetBusquedaForeignKeyColumnFromPropertiesC(column)) {	
						strControlesControlGridBagConstraintsAux+="\r\n\r\n\tif(this.conMostrarAccionesCampo) {";
						
						if(blnConFuncionalidadAccionesCampoVersion1) {
							strControlesControlGridBagConstraintsAux+= GetSetPanelControlGeneralVariableSwingC(column,strControlAuxiliarFK+"Aux2",strButton,/*strControl*/"this."+GetNombrePanelControlVariablesSwingC(column,"","",false),0,iXAuxiliar++,0,0);
						}
						
						strControlesControlGridBagConstraintsAux+="\r\n\t}";
						
						TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
						bool esAutoReferenciadaFk=GetEsAutoReferenciadaTablaC(tableSchemaFk);
						
						if(blnEsAutoReferenciada|| esAutoReferenciadaFk) {
							
							if(tableSchemaFk.Name.Equals(column.Table.Name) || esAutoReferenciadaFk) {
								strControlesControlGridBagConstraintsAux+="\r\n\r\n\tif(this.conMostrarAccionesCampo) {";
								
								if(blnConFuncionalidadAccionesCampoVersion1) {
									strControlesControlGridBagConstraintsAux+= GetSetPanelControlGeneralVariableSwingC(column,strControlAuxiliarFK+"Aux2",strButton+"Arbol",/*strControl*/"this."+GetNombrePanelControlVariablesSwingC(column,"","",false),0,iXAuxiliar++,0,0);
								}
								
								strControlesControlGridBagConstraintsAux+="\r\n\t}";
							}
						}
					}
					
					//BOTON BUSQUEDA GENERAL
					strControlesControlGridBagConstraintsAux+="\r\n\r\n\tif(this.conMostrarAccionesCampo) {";
					
					if(blnConFuncionalidadAccionesCampoVersion1) {
						strControlesControlGridBagConstraintsAux+= GetSetPanelControlGeneralVariableSwingC(column,strControlAuxiliarFK+"Aux2",strButton+"Busqueda",/*strControl*/"this."+GetNombrePanelControlVariablesSwingC(column,"","",false),0,iXAuxiliar++,0,0);
					}
					
					strControlesControlGridBagConstraintsAux+="\r\n\t}";
					
					//BOTON ACTUALIZAR FK
					strControlesControlGridBagConstraintsAux+="\r\n\r\n\tif(this.conMostrarAccionesCampo) {";
					
					if(blnConFuncionalidadAccionesCampoVersion1) {
						strControlesControlGridBagConstraintsAux+= GetSetPanelControlGeneralVariableSwingC(column,strControlAuxiliarFK+"Aux2",strButton+"Update",/*strControl*/"this."+GetNombrePanelControlVariablesSwingC(column,"","",false),0,iXAuxiliar++,0,0);
					}
					
					strControlesControlGridBagConstraintsAux+="\r\n\t}";
					//String strControlesControlGridBagConstraintsAux0=
					//Trace.WriteLine(strControlesControlGridBagConstraintsAux0);
				}
				
				if(ConGroupLayout) {
					strHorizontalControl+="\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
					strVerticalControl+="\t\t\t\t\t.addComponent("+strControl+", javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n";
				}
			}
			/*	
			String strControlLabelGridBagConstraints="";
			String strControlesLabelGridBagConstraints="";
			String strControlControlGridBagConstraints="";
			String strControlesControlGridBagConstraints="";
			*/
			
			if(!ConGroupLayout) {
				/*
				if(column.Name=="Numapor"||column.Name=="FotoSOC") {
				System.Windows.Forms.MessageBox.Show(strControlLabelGridBagConstraints.Replace("BYDANCOLUMNA",intNumColumna.ToString()).Replace("BYDANCONTROLLABEL",strControlLabel).Replace("BYDANNOMBRELABEL",strControlAuxiliar+"Label"));	
				}
				*/
				/*
				strControlesLabelGridBagConstraints+=strControlLabelGridBagConstraints.Replace("BYDANCOLUMNA",intNumColumna.ToString()).Replace("BYDANCONTROLLABEL",strControlLabel).Replace("BYDANNOMBRELABEL",strControlAuxiliar+"Label").Replace("BYDANFILALABEL",intColumnaXLabel.ToString());
				
				strControlesControlGridBagConstraints+=strControlesControlGridBagConstraintsAux;
				
				strControlesControlGridBagConstraints+=strControlControlGridBagConstraints.Replace("BYDANCOLUMNA",intNumColumna.ToString()).Replace("BYDANCONTROL",strControl).Replace("BYDANNOMBRE",strControlAuxiliar).Replace("BYDANFILACONTROL",intColumnaXControl.ToString());
				*/
				
				strControlesLabelGridBagConstraints+=strControlLabelGridBagConstraints.Replace("BYDANCOLUMNA",intNumColumna.ToString()).Replace("BYDANCONTROLLABEL",strControlLabel).Replace("BYDANNOMBRELABEL",strControlAuxiliar+"Label").Replace("BYDANFILALABEL",intColumnaXLabel.ToString());
				strControlesLabelGridBagConstraints+=strControlesControlGridBagConstraintsAux;
				strControlesLabelGridBagConstraints+=strControlControlGridBagConstraints.Replace("BYDANCOLUMNA",intNumColumna.ToString()).Replace("BYDANCONTROL",strControl).Replace("BYDANNOMBRE",strControlAuxiliar).Replace("BYDANFILACONTROL",intColumnaXControl.ToString());
			}
		
		
			
			
			blnIniciaFila=false;
			blnTerminaFila=false;	
		}//foreach column
		
		if(ConGroupLayout) {
			strControles+=strHorizontalGroupLabels;
			strControles+=strHorizontalLabel;
			strControles+=strHorizontalGroupControles;
			strControles+=strHorizontalControl;
			
			
			
			strControles+=strVerticalGroupControles;
			strControles+=strVerticalControl;
			strControles+=strVerticalGroupLabels;
			strControles+=strVerticalLabel;
			
			strControles+=strEndVerticalGroup;
		}
		
		if(ConGroupLayout) {
			strReturn=strControles;
		} else {
			strReturn=strControlesLabelGridBagConstraints+strControlesControlGridBagConstraints;
		}
		
		return strReturn;
	}
	
	public string GetSetControlesPanelVariablesPanelSwingParametrosC(TableSchema TablaBase,bool ConGroupLayout) {
		String strSwing="";
		//ArrayList arrayTablasRelacionadasParametros0=new ArrayList();
		
		if(blnEsReporte) {
			//arrayTablasRelacionadasParametros0=GetArrayTablasRelacionadasParametros0C(TablaBase);
			
			foreach(TableSchema tableSchema in arrayTablasRelacionadasParametros) {
				strSwing+=GetSetControlesPanelVariablesPanelSwingC(tableSchema,ConGroupLayout);
			}
		}
		
		return strSwing;
	}
	
	public string GetSetPanelControlGeneralVariableSwingC(ColumnSchema column,String strNombre,String strControl,String strPanel,int intY,int intX,int intInset,int intIPad) {
		String strPanelControl="";
		String strTabExtra="";
		
		if(strControl.EndsWith("Update") || strControl.EndsWith("Busqueda")) {
			strTabExtra="\t";
		}
		
		strPanelControl+="\r\n\r\n\t"+strTabExtra+"this.gridBagConstraints"+GetNombreClaseC(column.Table.ToString())+" = new GridBagConstraints();";
		strPanelControl+="\r\n\t"+strTabExtra+"//this.gridBagConstraints"+GetNombreClaseC(column.Table.ToString())+".fill = GridBagConstraints.HORIZONTAL;";
		strPanelControl+="\r\n\t"+strTabExtra+"this.gridBagConstraints"+GetNombreClaseC(column.Table.ToString())+".gridy = "+intY+";";
		strPanelControl+="\r\n\t"+strTabExtra+"this.gridBagConstraints"+GetNombreClaseC(column.Table.ToString())+".gridx = "+intX+";";
		strPanelControl+="\r\n\t"+strTabExtra+"this.gridBagConstraints"+GetNombreClaseC(column.Table.ToString())+".ipadx = "+intIPad+";";
		strPanelControl+="\r\n\t"+strTabExtra+"this.gridBagConstraints"+GetNombreClaseC(column.Table.ToString())+".insets = new Insets("+intInset+", "+intInset+", "+intInset+", "+intInset+");";
		strPanelControl+="\r\n\t"+strTabExtra+strPanel+".add("+strControl+", this.gridBagConstraints"+GetNombreClaseC(column.Table.ToString())+");";
		
		return strPanelControl;
	}
		
	public string GetControlVariablesSwingC(ColumnSchema column,bool blnConFk,bool esTablaParametros)
	{			
		String strControl="";
		String strTituloControl="";
		String strTipoControlId="";
		String strTipoControClaselId="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
				return string.Empty;
				
		} else if(column.Name.Equals(strId) && !blnConFk) {
			
			String strColumna=GetNombreColumnaClaseC(column);
			
			strTipoControlId="jLabel";
			strTipoControClaselId="JLabel";
			
			if(!TieneIdentityColumnC(column)) {
				strTipoControlId="jTextField";
				strTipoControClaselId="JTextFieldMe";
			}
			
			strControl="\r\n\t\tthis."+GetNombrePanelControlVariablesSwingC(column,"","",false)+" = new JPanelMe(\"fondo_formulario\",true);//new JPanel();\r\n";
			
			if(!esTablaParametros) {
				strControl+="\r\n\t\tthis."+GetNombrePanelControlVariablesSwingC(column,"","",false)+".setToolTipText("+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+");";
			}
			
			strControl+="\r\n\t\tthis.gridaBagLayout"+GetNombreClaseC(column.Table.ToString())+"= new GridBagLayout();\r\n";
			strControl+="\r\n\t\tthis."+GetNombrePanelControlVariablesSwingC(column,"","",false)+".setLayout(this.gridaBagLayout"+GetNombreClaseC(column.Table.ToString())+");\r\n";
			
			//strControl+="\t\t"+strTipoControlId+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setText(\""+strIdGetSet+"\");\r\n\r\n";
			
			strControl+="\r\n\t\t"+strTipoControlId+strColumna/*strIdGetSet*/+GetNombreClaseC(column.Table.ToString())+" = new "+strTipoControClaselId+"();\r\n";
			strControl+="\t\t"+strTipoControlId+strColumna/*strIdGetSet*/+GetNombreClaseC(column.Table.ToString())+".setText(\""+strIdGetSet+"\");\r\n\r\n";
			
			strControl+="\t\t"+strTipoControlId+strColumna/*strIdGetSet*/+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n";
          	strControl+="\t\t"+strTipoControlId+strColumna/*strIdGetSet*/+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n";
          	strControl+="\t\t"+strTipoControlId+strColumna/*strIdGetSet*/+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n\r\n";
         
			if(!GetEsProcesoParamFromPropertiesC(column.Table)) {
				if(!CON_OPTIMIZE_V0){
					strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";
					strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strId+"}\"), "+strTipoControlId+GetNombreColumnaClaseC(column)/*strIdGetSet*/+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
					strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
					strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
					strControl+="\t\t}\r\n";
				}
			}
			
			//CUANDO SE SELECCIONA AUTOMATICAMENTE SE HABILITA Y CUANDO NO SE SELECCIONA SE DESHABILITA
			//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
			//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
		} else if(column.Name.Equals(strVersionRow)) {
				return string.Empty;
		} else {
			strControl="\t\t"+GetControlSwingC(column,blnConFk,esTablaParametros);		
		}
		
		strTituloControl=GetTituloControlSwingVariablesC(column,blnConFk);
		
		return "\r\n\t\t\t\t\t"+strTituloControl+strControl+"\r\n";
	}
	
	public string GetTituloControlSwingVariablesC(ColumnSchema column,bool blnConFk)
	{
		
		String strTipo=GetTipoColumnaClaseC(column);	
		String strPrefijo=" "+GetPrefijoTipoC(column);	
		String strColumna="";
		String strColumnaNombre=GetNombreColumnaClaseC(column);
		String strTituloLabel=string.Empty;
		String strSwingWidthControlLabelExtra="";
		String strSwingHeighControlLabelExtra="";
		
		String strSimboloCampoRequerido="";
		
		//Trace.WriteLine(column.Name);
		
		if(!column.AllowDBNull) {
			//Trace.WriteLine(column.Name+"->NULL");
			if(!column.Name.Equals(strId)) {
				strSimboloCampoRequerido=strSimboloCampoRequeridoGlobal;						
			
			} else {
				if(!blnTieneIdentityColumn) {
					strSimboloCampoRequerido=strSimboloCampoRequeridoGlobal;
				}
			}
		}
		
		if(!GetEsProcesoParamFromPropertiesC(column.Table)) {
			strColumna=GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper();//GetWebNombreTituloColumnFromPropertiesC(column);
		} else {
			strColumna="\""+GetWebNombreTituloColumnFromPropertiesC(column)+"\"";
		}
		
		int iHeigh=INTSWING_HEIGHT_CONTROL;
		String sHeigh=SWING_HEIGHT_CONTROL_LABEL;		
		String sWidth=SWING_WIDTH_CONTROL_LABEL;//SWING_WIDTH_CONTROL;

		if(GetWebNombreTituloColumnFromPropertiesC(column).Length>=15 && GetWebNombreTituloColumnFromPropertiesC(column).Length<20) {
			iHeigh=INTSWING_HEIGHT_CONTROL + 5;
			sHeigh=SWING_HEIGHT_CONTROL_LABEL2;
		
		} else if(GetWebNombreTituloColumnFromPropertiesC(column).Length>=20) {
			bool tiene_lower_name=false;
			//GetWebNombreTituloLowerColumnFromPropertiesC(column,ref tiene_lower_name);
			
			//SI TIENE LOWER DEBE SER PEQUEÑO Y CONCISO
			if(!tiene_lower_name) { 
				iHeigh=(INTSWING_HEIGHT_CONTROL + 5)*2;
				sHeigh=SWING_HEIGHT_CONTROL_LABEL2+"*2";
			}
			//sWidth=SWING_WIDTH_CONTROL_LABEL2;
		}
		
		
		if(blnEsGuardarRelaciones) {
			sWidth=SWING_WIDTH_CONTROL_LABEL2;
		}
			
		String strTituloColumn=strColumna;
			
		if(blnUsaLabelFormLower) {
			//strTituloColumn+="_LOWER";
		}
		
		strSwingWidthControlLabelExtra =GetAnchoLabelColumnSwingExtraC(sWidth,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
		strSwingHeighControlLabelExtra=GetAltoLabelColumnSwingExtraC(sHeigh,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
		
		strTituloLabel="\r\n\t\tthis.jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+" = new JLabelMe();\r\n";
		strTituloLabel+="\t\tthis.jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setText(\"\"+"+strTituloColumn+"+\""+strSimboloDosPuntos+strSimboloCampoRequerido+"\");\r\n";//</html>
		strTituloLabel+="\t\tthis.jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setToolTipText(\""+GetToolTipColumnFromPropertiesC(column)+"\");\r\n";
		
		strTituloLabel+="\t\tthis.jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+sWidth+strSwingWidthControlLabelExtra+","+sHeigh+strSwingHeighControlLabelExtra+"));\r\n";//sWidth,iHeigh	SWING_WIDTH_CONTROL
        strTituloLabel+="\t\tthis.jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+sWidth+strSwingWidthControlLabelExtra+","+sHeigh+strSwingHeighControlLabelExtra+"));\r\n";//sWidth,iHeigh	SWING_WIDTH_CONTROL
        strTituloLabel+="\t\tthis.jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+sWidth+strSwingWidthControlLabelExtra+","+sHeigh+strSwingHeighControlLabelExtra+"));\r\n";//sWidth,iHeigh	SWING_WIDTH_CONTROL
      	strTituloLabel+="\r\n\t\tFuncionesSwing.setBoldLabel(jLabel"+GetNombreColumnaClaseC(column)+GetNombreClaseC(column.Table.ToString())+",STIPO_TAMANIO_GENERAL,false,false,this);\r\n";
		
		String strTitleControl="";
		
		if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired) )
		{
				return string.Empty;
		}
		else if(column.Name.Equals(strVersionRow))
		{
			return string.Empty;
		}
		else if(column.Name.Equals(strId) && !blnConFk)
		{
			strTituloLabel="\r\n\t\tjLabel"+strIdGetSet+/*GetNombreColumnaClaseC(column)*//*strIdGetSet*/GetNombreClaseC(column.Table.ToString())+/*strIdGetSet+*/" = new JLabelMe();\r\n";
			//strTituloLabel+="\t\tjLabel"+strIdGetSet+/*GetNombreColumnaClaseC(column)*//*strIdGetSet*/GetNombreClaseC(column.Table.ToString())+/*strIdGetSet+*/".setText(\"<html>\"+\""+strCodigoUnico+strSimboloCampoRequerido+"\"+\"</html>\");\r\n";
			strTituloLabel+="\t\tjLabel"+strIdGetSet+/*GetNombreColumnaClaseC(column)*//*strIdGetSet*/GetNombreClaseC(column.Table.ToString())+/*strIdGetSet+*/".setText(\"\"+Constantes2.S_CODIGO_UNICO"+"+\"\");\r\n";//<html>
			
			strTituloLabel+="\t\tjLabel"+strIdGetSet+/*GetNombreColumnaClaseC(column)*//*strIdGetSet*/GetNombreClaseC(column.Table.ToString())+/*strIdGetSet*/".setMinimumSize(new Dimension("+sWidth+strSwingWidthControlLabelExtra+","+sHeigh+strSwingHeighControlLabelExtra+"));\r\n";
        	strTituloLabel+="\t\tjLabel"+strIdGetSet+/*GetNombreColumnaClaseC(column)*//*strIdGetSet*/GetNombreClaseC(column.Table.ToString())+/*strIdGetSet*/".setMaximumSize(new Dimension("+sWidth+strSwingWidthControlLabelExtra+","+sHeigh+strSwingHeighControlLabelExtra+"));\r\n";
        	strTituloLabel+="\t\tjLabel"+strIdGetSet+/*GetNombreColumnaClaseC(column)*//*strIdGetSet*/GetNombreClaseC(column.Table.ToString())+/*strIdGetSet*/".setPreferredSize(new Dimension("+sWidth+strSwingWidthControlLabelExtra+","+sHeigh+strSwingHeighControlLabelExtra+"));\r\n";
      		strTituloLabel+="\r\n\t\tFuncionesSwing.setBoldLabel(jLabel"+strIdGetSet+/*GetNombreColumnaClaseC(column)*//*strIdGetSet*/GetNombreClaseC(column.Table.ToString())+/*strIdGetSet*/",STIPO_TAMANIO_GENERAL,false,false,this);\r\n";
			
			return strTituloLabel;
		}
		else
		{
			if(!column.IsForeignKeyMember)
			{
				strTitleControl= strTituloLabel +"\r\n";
			}
			else
			{
				
				strTitleControl= strTituloLabel +"\r\n";
			}
		}	
		return strTitleControl;
	}

public string GetTituloControlVariablesC(ColumnSchema column){
	return GetTituloControlVariablesC(column,"");
}

public string GetTituloControlVariablesC(ColumnSchema column,String strTabOculto){
	
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=" "+GetPrefijoTipoC(column);	
	String strColumna=GetWebNombreTituloColumnFromPropertiesC(column);
	
	String strTitleControl="";
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired) ) {
			strTitleControl=string.Empty;
			
	} else if(column.Name.Equals(strVersionRow)) {
		strTitleControl="\r\n\t\t\t\t\t\t"+strTabOculto+"<td class=\"titulocampo\">";
		strTitleControl+="\r\n\t\t\t\t\t\t"+strTabOculto+"</td>";
	
	} else if(column.Name.Equals(strId)) {
		strTitleControl="\r\n\t\t\t\t\t\t"+strTabOculto+"<td class=\"titulocampo\">";
		strTitleControl+="\r\n\t\t\t\t\t\t\t"+strTabOculto+"<"+strHtmlTypeElementoInicial+">"+strCodigoUnico+"</"+strHtmlTypeElementoFinal+">";
		strTitleControl+="\r\n\t\t\t\t\t\t"+strTabOculto+"</td>";
	
	} else {
		if(!column.IsForeignKeyMember) {
			strTitleControl="\r\n\t\t\t\t\t\t"+strTabOculto+"<td class=\"titulocampo\">";
			strTitleControl+="\r\n\t\t\t\t\t\t\t"+strTabOculto+"<"+strHtmlTypeElementoInicial+">"+ strColumna +"</"+strHtmlTypeElementoFinal+">";
			strTitleControl+="\r\n\t\t\t\t\t\t"+strTabOculto+"</td>";
		
		} else {
			/*
			strColumna= GetNombreColumnaClaseC(column);
			strColumna=strColumna.Replace(strId,"");
			strColumna=strColumna.Substring(0, 1).ToUpper() + strColumna.Substring(1, strColumna.Length-1).ToLower();
			*/
			strTitleControl="\r\n\t\t\t\t\t\t"+strTabOculto+"<td class=\"titulocampo\">";
			strTitleControl+="\r\n\t\t\t\t\t\t\t"+strTabOculto+"<"+strHtmlTypeElementoInicial+">"+ strColumna +"</"+strHtmlTypeElementoFinal+">";
			strTitleControl+="\r\n\t\t\t\t\t\t"+strTabOculto+"</td>";
		}
	}
	
	return strTitleControl;
}
		
public string GetTituloControlVariablesFkC(TableSchema tableSchemaFk)
{
	
	//String strTipo=GetTipoColumnaClaseC(column);	
	//String strPrefijo=" "+GetPrefijoTipoC(column);	
	String strColumna=GetTituloNombreTableFromPropertiesC(tableSchemaFk);
	
	String strTitleControl="";
		
	strTitleControl="\r\n\t\t\t\t\t\t<td class=\"titulocampo\"><"+strHtmlTypeElementoInicial+">"+ strColumna +"</"+strHtmlTypeElementoFinal+">\r\n\t\t\t\t\t\t</td>";
	
	return strTitleControl;
}	
	
	


		#endregion		
			
		#region QuerysComplejos
		
		public const String strPrefijoParametros="PRM_";
		
		public static string GetReadOnlyNombreCompletoColumnaClaseC(ColumnSchema column)
		{
			if(column.Name=="id")
			{
				return "Id";
			}
			else if(column.Name=="isActive")
			{
				return "IsActive";
			}
			else if(column.Name=="isExpired")
			{
				return "IsExpired";
			}
			else if(column.Name=="versionRow")
			{
				return "VersionRow";
			}
			
			string strPrefijoTabla="";
			
			if(!column.Name.Contains(strPrefijoParametros))
			{
				strPrefijoTabla=GetPrefijoTablaC();
			}
			else
			{
				strPrefijoTabla=GetPrefijoTablaParametroC();
			}
			
			string strPrefijo =strPrefijoTabla+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
			
			
			return strPrefijo;
		}

		public static string GetReadOnlyXmlColumnaC(ColumnSchema column,String tablaBase)
		{
		string strNombre="";
		string strGetColumn="";
		string strPrefijoTabla="";
		string strPrefijoTipo="";
		string strNombreColumna="";
		
			strPrefijoTabla=GetPrefijoTablaC();
			strPrefijoTipo=GetPrefijoTipoC(column);
			strNombreColumna=GetNombreColumnaClaseC(column);
			strGetColumn="get"+GetReadOnlyNombreCompletoColumnaClaseC(column)+"()"+GetTipoColumnaToString(column);
		
		
		if(column.Name=="id")
		{
		strNombre="xml.append(\"<item code=\\\"\"+"+"readOnly"+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+"+\"\\\">\\r\n\");\r\n";
		}
	
	
		strNombre+= "xml.append(\"<";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
		strNombre+=">\");\r\n";
		
		strNombre+="		xml.append("+"readOnly"+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+");\r\n";
		
		strNombre+="		xml.append(\"</";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
		strNombre+=">\\r\n\");\r\n";
		
				
		return strNombre;
		}
	
		public static string GetParametroNombreCompletoColumnaClaseC(ColumnSchema column)
		{
			if(column.Name=="id")
			{
				return "Id";
			}
			else if(column.Name=="isActive")
			{
				return "IsActive";
			}
			else if(column.Name=="isExpired")
			{
				return "IsExpired";
			}
			else if(column.Name=="versionRow")
			{
				return "VersionRow";
			}
			
			string strPrefijo =GetPrefijoTablaParametroC()+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
			
			
			return strPrefijo;
		}
		
		public static string GetPrefijoTablaParametroC()
		{
			string strPrefijoTabla=strPrefijoParametros;
			return strPrefijoTabla;
		}
	
		public String GetReadOnlyParameterSelection(ColumnSchema column,bool esUltimo) 
		{
			String strParaBusquedaString=""; 
			
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
			strParaBusquedaString="+\"%\"";
			}
			
			String strParameterSelection=String.Empty;
			strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+"= new ParameterSelectionGeneral();";
			strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+".setParameterSelectionGeneralEqual(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+ GetTipoColumnaToString(column)+strParaBusquedaString +",ReadOnly"+GetNombreClaseC(column.Table.ToString())+".getColumnName"+GetNombreCampoTablaC(column)+"(),";
			
			if(esUltimo)
			{
			strParameterSelection+="ParameterTypeOperator.NONE);";		
			}
			else
			{
			strParameterSelection+=	"ParameterTypeOperator.AND);";	
			}
			
			strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+");";
		
			return strParameterSelection;
		}
		
		public string GetParametroFuncionQueryClase(ColumnSchema column)
		{		
		String strParamtro=string.Empty;	
		
		strParamtro=GetTipoColumnaClaseC(column)+" "+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
		return strParamtro;
		}

		public int GetTotalParametrosFuncionQueryClase(TableSchema table)
		{		int intTotalParamtros=0;	
		
		foreach(ColumnSchema column in table.Columns)
		{
			if(column.Name.Contains(strPrefijoParametros))
			{
			intTotalParamtros++;
			}
		}
		return intTotalParamtros;
		}

		#endregion
		
		#region JavaScript
	
	public String GetJavaScriptArraysClasesRelacionadasC(TableSchema tableSchema) 
	{
				String strTablaClaseRelacionada="";	
				Hashtable tablasRelacionadas=GetTablasRelacionadas(tableSchema);
				
				
				TableSchema tablaRelacionadaObjetivo;
		
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
				{
					
					
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
					{
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					}	
					else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
					{
						
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
					}
					else
					{
						continue;
					}
					
					if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo))
					{
						continue;
					}
					
					strTablaClaseRelacionada+=",arrData"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s";
				}
				
				return strTablaClaseRelacionada; 
	}

	//DESCRIPTIONS
	public string GetCargarTablasC(String strPathBase,TableSchemaCollection SourceDatabaseTables/*DatabaseSchema databaseSchema*/) {
		Stopwatch stopWatchTotal = new Stopwatch();
		Stopwatch stopWatchPorTabla = new Stopwatch();
		
		String strImprimirTiempo="";
		
		IniciarTiempoC(ref stopWatchTotal,true);
		
		String strReturn="";		
		int count=0;
		
		int total=SourceDatabaseTables.Count; //databaseSchema.Tables.Count;
		TableKeySchemaCollection tableKeySchemaCollection=new TableKeySchemaCollection();
		TableKeySchemaCollectionMe tableKeySchemaCollectionMe=new TableKeySchemaCollectionMe();
		TableSchemaMe tableSchemaMe=new TableSchemaMe();
		
		foreach(TableSchema tableSchema in SourceDatabaseTables) {//databaseSchema.Tables) {	
			IniciarTiempoC(ref stopWatchPorTabla,true);	
		
			count++;
											
			tableKeySchemaCollection=tableSchema.ForeignKeys;
			
			InicializarVariablesPorTabla(tableSchema,TiposGeneracionGrupo.TODOS);						
			
			strImprimirTiempo=GetStringDetenerTiempoC(stopWatchPorTabla,PaquetesGenerar.AUXILIAR,"");
			
			Trace.WriteLine("TABLA "+count+" DE "+total+" --> "+tableSchema.Name+" CARGADA EN "+strImprimirTiempo);
		}
		
		String strImprimirTiempoTotal=GetStringDetenerTiempoC(stopWatchTotal,PaquetesGenerar.AUXILIAR,"");
		
		Trace.WriteLine("Tiempo de ejecusion: " + strImprimirTiempoTotal);
		
		return strReturn;
	}
	
	public string GetColumnsDescriptionsC(TableSchema TablaBase) {
		String strReturn="";
		
		foreach(TableSchema tableSchema in TablaBase.Database.Tables) {
			foreach(ColumnSchema column in tableSchema.Columns) {
				
				if(GetBusquedaForeignKeyColumnFromPropertiesC(column)) {
				//if(GetEsReporteVistaFromPropertiesC(column)) {
					strReturn+="\r\n"+tableSchema.Owner+"-"+column.Table+"-"+column.Name;
				}
				
			}
		}
		
		return strReturn;
	}
	
	public string GetTablaDescriptionsC(TableSchema TablaBase) {
		String strReturn="";
		
		foreach(TableSchema tableSchema in TablaBase.Database.Tables) {
			if(GetEsGuardarRelacionesFromPropertiesC(tableSchema)) {
				strReturn+="\r\n"+tableSchema.Owner+"-"+tableSchema.Name;
			}			
		}
		
		return strReturn;
	}
	
	public string GetTodasRelacionadasC(TableSchema TablaBase) {
		String strReturn="";
		Hashtable tablasRelacionadas=null;
		
		foreach(TableSchema tableSchema in TablaBase.Database.Tables) {
			//EN ESTA FUNCION YA SE FILTRAN LAS QUE GLOBALMENTE NO DEBEN TOMARSE EN CUENTA
			tablasRelacionadas=GetTablasRelacionadas(tableSchema);
			
			if(tablasRelacionadas.Count>7) {
				strReturn+="\r\n"+tableSchema.Owner+"-"+tableSchema.Name;			
			}			
		}
		
		return strReturn;
	}
	//DESCRIPTIONS FIN
	
	public  String GetJavascriptColumnaDescripcionComboFromTablaPropertiesC(TableSchema tablaRelacionada)
	{
	
		
	string strPrefijoTabla="";
		strPrefijoTabla+="";
	string strPrefijoTipo =""; 
		strPrefijoTipo +=""; 
	string strNombre = "";
		strNombre += "";
	
	String strColumnaDetalle="id";
	String[] descripciones;
	String[] tipo;
	
	foreach(ColumnSchema columnSchema in tablaRelacionada.Columns)
	{
		
		foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBCOMBO"))
						{
							//if(tipo[1]=="true")
							//{
																
								strColumnaDetalle=GetNombreColumnaClaseJavaScriptC(columnSchema);
							//}
							
							break;
						}
					}
			}
					
		}
	}
				
	return strColumnaDetalle;
	}
	
	public  String GetJavascriptColumnaDescripcionComboFromPropertiesC(ColumnSchema column)
	{
	
	TableSchema tablaRelacionada=column.Table;//GetNombreTablaRelacionadaFromColumn(column);
	
	String strNombreTabla=GetNombreClaseRelacionadaFromColumn(column);
	
	foreach(TableSchema tableForeignKey in column.Database.Tables)
	{
		if(tableForeignKey.Name.Equals(strNombreTabla))
		{
			tablaRelacionada=tableForeignKey;
		}
	}
	
	string strPrefijoTabla="";
		strPrefijoTabla+="";
	string strPrefijoTipo =""; 
		strPrefijoTipo +=""; 
	string strNombre = "";
		strNombre += "";
	
	String strColumnaDetalle="id";
	String[] descripciones;
	String[] tipo;
	
	foreach(ColumnSchema columnSchema in tablaRelacionada.Columns)
	{
		if(columnSchema.Name!=strId)
		{
			foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
			{
				if(extendedProperty.Name=="CS_Description")
				{
				descripciones=((String)extendedProperty.Value).Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBCOMBO"))
							{
								//if(tipo[1]=="true")
								//{
																	
									strColumnaDetalle=GetNombreColumnaClaseJavaScriptC(columnSchema);
								//}
								
								break;
							}
						}
				}
		}
					
		}
	}
				
	return strColumnaDetalle;
	}
	
		
	public  string GetNombreColumnaClaseJavaScriptFiltradosArrayToTablaC(String strPrefijo,ColumnSchema column,bool blnConPrefijoCompuesto,TableSchema tableNombreArray)
	{
		//CambiarBooleanValueToControl(
		
		String strValor="";
		String strPrefijoTabla="";
		
		if(strPrefijo!=""&&blnConPrefijoCompuesto)
		{
			strPrefijoTabla=GetNombreClaseC(column.Table.ToString());
		}
		
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strId)
		{
			return "";
		}
		
		if(column.DataType!=DbType.Boolean&&!column.IsForeignKeyMember&&!(column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)&&!(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
		{
			strValor=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+strSimboloDosPuntos+ "arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strPrefijo+GetNombreColumnaClaseJavaScriptC(column);
		}
		else if(column.DataType==DbType.Boolean)
		{
			strValor=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+strSimboloDosPuntos+ "arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strPrefijo+GetNombreColumnaClaseJavaScriptC(column);
			strValor+=",";
			strValor+=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+"Control:"+"funcionGeneral.CambiarBooleanValueToControl(arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strPrefijo+GetNombreColumnaClaseJavaScriptC(column)+",arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strId+")";
		}
		else if(column.IsForeignKeyMember)
		{
			strValor=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+"Descripcion:"+"arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strPrefijo+GetNombreColumnaClaseJavaScriptC(column)+"Descripcion";
			strValor+=",";
			strValor+=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+strSimboloDosPuntos+"arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i]."+strPrefijo+GetNombreColumnaClaseJavaScriptC(column);
		}		
		else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
		{
			strValor=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+"Mostrar"+":\"<img src=\\\"mostrarimagen.gif\\\" onClick=\\\""+GetNombreClaseObjetoC(tableNombreArray.ToString())+"PaginaWebInteraccion.Mostrar"+GetNombreClaseC(tableNombreArray.ToString())+GetNombreColumnaClaseC(column)+"(\"+arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i].id+\")\\\" width=\\\"35\\\" height=\\\"35\\\">\"";
			strValor+=",";
			strValor+=strPrefijoTabla+GetNombreColumnaClaseJavaScriptC(column)+"Actualizar"+":\"<img src=\\\"actualizarimagen.gif\\\" onClick=\\\""+GetNombreClaseObjetoC(tableNombreArray.ToString())+"PaginaWebInteraccion.Actualizar"+GetNombreClaseC(tableNombreArray.ToString())+GetNombreColumnaClaseC(column)+"(\"+arrData"+GetNombreClaseC(tableNombreArray.ToString())+"s[i].id+\")\\\" width=\\\"35\\\" height=\\\"35\\\">\"";
		}
		
		return strValor;
	}
	
	public String GetRelacionesTituloNavegacionTablasClasesRelacionadasC(TableSchema TablaBase) 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			TableSchema tablaRelacionadaObjetivo;
			String strPlural=string.Empty;
			String strTitulo=string.Empty;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			bool blClaseNo=false;
			bool blnEsUnoAUno=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)	{
				blnEsUnoAUno=false;
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					blnEsUnoAUno=true;
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
									
				if(!GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)) {
					continue;
				}
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas) {
					if(tableSchema.Equals(tablaRelacionadaObjetivo)) {
						encontrado=true;
					}
				}
				
				
				if(!encontrado)	{
					strPlural="";
					
					if(!blnEsUnoAUno) {
						strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
					}
					
					strTitulo=GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
					
					strTablaClaseRelacionada+="\r\n\t\t\t\t\tjsonObject"+GetNombreClaseC(TablaBase.ToString())+"Column=new JSONObject();\r\n";
					strTablaClaseRelacionada+="\t\t\t\t\tjsonObject"+GetNombreClaseC(TablaBase.ToString())+"Column.put(ConstantesJsp.SJMAKIID, "+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+".class.getSimpleName().toLowerCase()"+" + "+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.SCLASSPLURAL.toLowerCase());\r\n";
					strTablaClaseRelacionada+="\t\t\t\t\tjsonObject"+GetNombreClaseC(TablaBase.ToString())+"Column.put(ConstantesJsp.SJMAKILABEL,"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.SCLASSWEBTITULO + "+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.SCLASSPLURAL);\r\n";
					strTablaClaseRelacionada+="\t\t\t\t\tjsonArray"+GetNombreClaseC(TablaBase.ToString())+"Columns.put(jsonObject"+GetNombreClaseC(TablaBase.ToString())+"Column);\r\n";
					
					
					//strTablaClaseRelacionada+=","+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strPlural+":\"<img src=\\\""+GetRelativePathC(TablaBase)+"Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+".gif\\\" style=\" height : 18px;\" onClick=\\\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.Actualizar"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural+"Relacionadas"+"(\"+arrData"+GetNombreClaseC(TablaBase.ToString())+"s[i].id+\")\\\" width=\\\"40\\\" height=\\\"40\\\">\"";
				}	
			}
								
			return strTablaClaseRelacionada; 
		}
		
		public String GetRelacionesColumnasNavegacionTablasClasesRelacionadasC(TableSchema TablaBase) 
		{
			String strTablaClaseRelacionada=string.Empty;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			TableSchema tablaRelacionadaObjetivo;
			String strPlural=string.Empty;
			String strTitulo=string.Empty;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			bool blClaseNo=false;
			bool blnEsUnoAUno=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)	{
				blnEsUnoAUno=false;
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					blnEsUnoAUno=true;
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
													
				if(!GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)) {
					continue;
				}
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas) {
					if(tableSchema.Equals(tablaRelacionadaObjetivo)) {
						encontrado=true;
					}
				}
				
				
				if(!encontrado)	{
					strPlural="";
					
					if(!blnEsUnoAUno) {
						strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
					}
					
					strTitulo=GetTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
					/*
					strTablaClaseRelacionada+="\r\n\t\t\t\t\tjsonObjectTipoNoticiaColumn=new JSONObject();\r\n";
					strTablaClaseRelacionada+="\t\t\t\t\tjsonObjectTipoNoticiaColumn.put(ConstantesJsp.SJMAKIID, \""+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+"\");\r\n";
					strTablaClaseRelacionada+="\t\t\t\t\tjsonObjectTipoNoticiaColumn.put(ConstantesJsp.SJMAKILABEL, \""+strTitulo.ToUpper()+strPlural.ToUpper()+"\");\r\n";
					strTablaClaseRelacionada+="\t\t\t\t\tjsonArrayTipoNoticiaColumns.put(jsonObjectTipoNoticiaColumn);\r\n";
					*/
					
					//strTablaClaseRelacionada+=","+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strPlural+":\"<img src=\\\""+GetRelativePathC(TablaBase)+"Imagenes/"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+".gif\\\" style=\" height : 18px;\" onClick=\\\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.Actualizar"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural+"Relacionadas"+"(\"+arrData"+GetNombreClaseC(TablaBase.ToString())+"s[i].id+\")\\\" width=\\\"40\\\" height=\\\"40\\\">\"";
					
					strTablaClaseRelacionada+="\r\n\t\t\t\tjsonObject"+GetNombreClaseC(TablaBase.ToString())+".put("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+".class.getSimpleName().toLowerCase()"+" + "+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.SCLASSPLURAL.toLowerCase(),FuncionesJsp.getStringHtmlRelacionImagenButon("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"(),"+GetNombreClaseC(TablaBase.ToString())+".class.getSimpleName(),"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.SCLASSPLURAL,"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.SRELATIVEPATH,"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+".class.getSimpleName(),"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.SCLASSPLURAL));";	
				
				}	
			}
								
			return strTablaClaseRelacionada; 
		}
		
	public String GetImagenesNavegacionTablasClasesRelacionadasC(TableSchema TablaBase) 
		{
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			TableSchema tablaRelacionadaObjetivo;
			String strPlural=string.Empty;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}	
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
				}
				else
				{
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
				
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas)
				{
					if(tableSchema.Equals(tablaRelacionadaObjetivo))
					{
						encontrado=true;
					}
				}
				
				
				if(!encontrado)
				{
					strPlural=GetPluralTituloNombreTableFromPropertiesC(tablaRelacionadaObjetivo);
					strTablaClaseRelacionada+=","+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strPlural+":\"<img src=\\\""+GetRelativePathC(TablaBase)+"Imagenes/"+GetRelativePathNavegacionFromModuleActualC(tablaRelacionadaObjetivo)+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strPlural.ToLower()+".gif\\\" style=\" height : 18px;\" onClick=\\\""+GetNombreClaseObjetoC(TablaBase.ToString())+"PaginaWebInteraccion.Actualizar"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strPlural+"Relacionadas"+"(\"+arrData"+GetNombreClaseC(TablaBase.ToString())+"s[i].id+\")\\\" width=\\\"40\\\" height=\\\"40\\\">\"";
				}	
			}
								
			return strTablaClaseRelacionada; 
		}
		
	public string GetNombreColumnaClaseDefaultJavaScriptFiltradosC(ColumnSchema column)
	{
		String strColumna="";
		
	if(column.Name==strIsActive||column.Name==strIsExpired)
		{
		return "";
		}
		
		if(!column.IsForeignKeyMember)
		{
			if(column.Name==strId)
			{
				strColumna=/*GetNombreColumnaClaseJavaScriptC(column)+*/"id:int"+strIdGetSet+"Nuevo"+GetNombreClaseC(column.Table.ToString());
			}
			else if(column.Name==strVersionRow)
			{
				strColumna=GetNombreColumnaClaseJavaScriptC(column)+":\"1900-01-01 01:01:01.1\"";
			}
			else
			{
			strColumna=GetNombreColumnaClaseJavaScriptC(column)+":\"null\"";
			}
		}
		else
		{
			strColumna=GetNombreColumnaClaseJavaScriptC(column)+":\"null\",";
			strColumna+=GetNombreColumnaClaseJavaScriptC(column)+"Descripcion:\"null\"";
		}
		
		return strColumna;
	}

	public static string GetNombreColumnaClaseJavaScriptC(ColumnSchema column) {
		string strPrefijoTabla=String.Empty;
		string strPrefijo=String.Empty;
		string strPrefijoTipo=String.Empty;
		string strNombre= String.Empty;		
		
		if(column.Name!=strVersionRow) {
			strPrefijoTabla=GetPrefijoTablaC().ToLower();
			strPrefijo=String.Empty;
			strPrefijoTipo=GetPrefijoTipoC(column);
			strNombre= GetNombreCompletoColumnaClaseC(column);
		} else {
			strPrefijoTabla="";//GetPrefijoTablaC().ToLower();
			strPrefijo=String.Empty;
			strPrefijoTipo="";//GetPrefijoTipoC(column);
			strNombre= strVersionRow;//GetNombreColumnaClaseC(column);
		}
			
		strPrefijo=strPrefijoTabla+strPrefijoTipo+strNombre;
	
		return strPrefijo;
	}
	
	public static string GetJavaScritpVariablesFromXmlC(ColumnSchema column,bool reemplazarForeigKey,bool reemplazarBooleanValue)
	{
		string strInicio=GetNombreClaseObjetoC(column.Table.ToString())+".getElementsByTagName(strPrefijo+\"";
		string strFin="\")[0].firstChild.nodeValue;";
		string strFin2="\")[0].firstChild)";
	
		string strNombre="";
		string strGetColumn="";
		string strPrefijoTabla="";
		string strPrefijoTipo="";
		string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+strPrefijoTabla+strPrefijoTipo+strNombreColumna+"()"+GetTipoColumnaToString(column);
	
	
		if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
		{
		return "";
		}
		
		string strPrefijoCorreccion=String.Empty;
		string strPrefijoTipoCorreccion =String.Empty;
		string strNombreCorreccion = String.Empty;
			
		if(column.Name!=strId)
		{
			strPrefijoCorreccion=String.Empty;
			strPrefijoTipoCorreccion =GetPrefijoTipoC(column);
			strNombreCorreccion = GetNombreColumnaClaseC(column);
		}
		else
		{
			strNombreCorreccion = "id";
		}
		
	strPrefijoCorreccion=strPrefijoTipoCorreccion+strNombreCorreccion;
	
		if(column.IsForeignKeyMember)
		{
			strNombre="\r\n\r\n\t\t\t\t\tvar "+ strPrefijoCorreccion+ "='';";
			
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower()+strFin2+"{";
			strNombre+=strPrefijoCorreccion+"="+strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=strFin+"}";
			
			strNombre+="\r\n\r\n\t\t\t\t\tvar "+ strPrefijoCorreccion+"Descripcion"+ "='';";
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower()+strFin2+"{";
			strNombre+= strPrefijoCorreccion+"Descripcion"+"="+ strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();		
			strNombre+=strFin+"}";
		}
		else
		{
			strNombre="\r\n\r\n\t\t\t\t\tvar "+ strPrefijoCorreccion+ "='';";
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower()+strFin2+"{";
			
			strNombre+=strPrefijoCorreccion+"="+ strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=strFin+"}";
		}
	
	return strNombre;
	}
	
	public static string GetNombreColumnaClaseJavaScriptFiltradosC(ColumnSchema column,bool conVersionRow)
{
	String strNombreColumna="";
	
	if(column.DataType==DbType.Binary&&column.Name!=strVersionRow)
	{
		return "";		
	}
	
	if(!conVersionRow)
	{
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
		return "";
		}
	}
	else
	{
		if(column.Name==strIsActive||column.Name==strIsExpired)
		{
		return "";
		}
	}
	
	string strPrefijo=String.Empty;
	string strPrefijoTipo =String.Empty;
	string strNombre = String.Empty;
	string strPrefijoTabla=String.Empty;
		
	if(column.Name!=strId)
	{
		strPrefijoTabla=GetPrefijoTablaC().ToLower();
		strPrefijo=String.Empty;
		strPrefijoTipo =GetPrefijoTipoC(column);
		strNombre = GetNombreColumnaClaseC(column);
	}
	else
	{
		strNombre = strId;
	}
	
	if(column.Name!=strVersionRow) {
		strPrefijo=strPrefijoTabla+strPrefijoTipo+strNombre;
	} else {
		strPrefijo=strVersionRow;
	}
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna=strPrefijo;	
	}
	else
	{
	    strNombreColumna=strPrefijo;
		strNombreColumna+=",";
		strNombreColumna+=strPrefijo+"Descripcion";
	}
	
	return strNombreColumna;
}

public static string GetNombreColumnaClaseJavaScriptFiltradosC(ColumnSchema column)
{
	String strNombreColumna="";
	
	if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
	{
		return "";
	}
	
	string strPrefijo=String.Empty;
	string strPrefijoTipo =String.Empty;
	string strNombre = String.Empty;
	string strPrefijoTabla=String.Empty;
		
	if(column.Name!=strId)
	{
		strPrefijoTabla=GetPrefijoTablaC().ToLower();
		strPrefijo=String.Empty;
		strPrefijoTipo =GetPrefijoTipoC(column);
		strNombre = GetNombreColumnaClaseC(column);
	}
	else
	{
		strNombre = strId;
	}
	
	if(column.Name!=strVersionRow) {
		strPrefijo=strPrefijoTabla+strPrefijoTipo+strNombre;
	} else {
		strPrefijo=strVersionRow;
	}
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna="this." +strPrefijo+"="+strPrefijo;
	}
	else
	{
	    strNombreColumna="this." +strPrefijo+"="+strPrefijo;
		strNombreColumna+=";\r\n\t";
		strNombreColumna+="this." +strPrefijo+"Descripcion"+"="+strPrefijo+"Descripcion";
	}
	return strNombreColumna;
}

public static string GetNombreColumnaClaseJavaScriptFiltradosSoloForeigKeyColumnC(ColumnSchema column)
{
	String strNombreColumna="";
	
		
	string strPrefijo=String.Empty;
	string strPrefijoTipo =String.Empty;
	string strNombre = String.Empty;
	string strPrefijoTabla = String.Empty;	
	
		strPrefijo=String.Empty;
		strPrefijoTabla=GetPrefijoTablaC().ToLower();
		strPrefijoTipo =GetPrefijoTipoC(column);
		strNombre = GetNombreColumnaClaseC(column);
	
		
	strPrefijo=strPrefijoTabla+strPrefijoTipo+strNombre;

	
	
		strNombreColumna=strPrefijo;
	
	
	
	return strNombreColumna;
}

public static string GetNombreColumnaClaseMinusculasJavaScriptNullAVacioC(ColumnSchema column)
{
	String strNombreColumna="";
	
if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
	{
	return "";
	}
	
	string strPrefijo=String.Empty;
	string strPrefijoTipo =String.Empty;
	string strNombre = String.Empty;
		
	if(column.Name!=strId)
	{
		strPrefijo=String.Empty;
		strPrefijoTipo =GetPrefijoTipoC(column);
		strNombre = GetNombreColumnaClaseC(column);
	}
	else
	{
		strNombre = "id";
	}
	
	strPrefijo=strPrefijoTipo+strNombre;
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna="\r\n\t"+strPrefijo+"=funcionGeneral.CambiarNullAVacio(" +strPrefijo+");";
	}
	else
	{
	    strNombreColumna="\r\n\t"+strPrefijo+"=funcionGeneral.CambiarNullAVacio(" +strPrefijo+");";
		strNombreColumna+="\r\n\t"+strPrefijo+"Descripcion=funcionGeneral.CambiarNullAVacio(" +strPrefijo+"Descripcion"+");";
	}
	return strNombreColumna;
}

	public static string GetNombreColumnaClaseMinusculasFiltradosC(ColumnSchema column)
{
	String strNombreColumna="";
	
if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
	{
	return "";
	}
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna=GetNombreColumnaClaseMinusculaC(column)+strSimboloDosPuntos +GetNombreColumnaClaseMinusculaC(column);
	}
	else
	{
	    strNombreColumna=GetNombreColumnaClaseMinusculaC(column)+strSimboloDosPuntos +GetNombreColumnaClaseMinusculaC(column);
		strNombreColumna+=",";
		strNombreColumna+=GetNombreColumnaClaseMinusculaC(column)+"Descripcion:" +GetNombreColumnaClaseMinusculaC(column)+"Descripcion";
	}
	return strNombreColumna;
}

public static string GetNombreColumnaClaseMinusculasFiltradosNullAVacioC(ColumnSchema column)
{
	String strNombreColumna="";
	
if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
	{
	return "";
	}
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna=GetNombreColumnaClaseMinusculaC(column)+"=CambiarNullAVacio(" +GetNombreColumnaClaseMinusculaC(column)+");\r\n";
	}
	else
	{
	    strNombreColumna=GetNombreColumnaClaseMinusculaC(column)+"=CambiarNullAVacio(" +GetNombreColumnaClaseMinusculaC(column)+");\r\n";
		strNombreColumna+=GetNombreColumnaClaseMinusculaC(column)+"Descripcion=CambiarNullAVacio(" +GetNombreColumnaClaseMinusculaC(column)+"Descripcion"+");\r\n";
	}
	return strNombreColumna;
}

	public static string GetNombreColumnaClaseMinusculaFiltradosC(ColumnSchema column,bool conVersionRow)
{
	String strNombreColumna="";
	
	if(column.DataType==DbType.Binary&&column.Name!=strVersionRow)
	{
		return "";		
	}
	
	if(!conVersionRow)
	{
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
		return "";
		}
	}
	else
	{
		if(column.Name==strIsActive||column.Name==strIsExpired)
		{
		return "";
		}
	}
	
	if(!column.IsForeignKeyMember)
	{
		strNombreColumna=GetNombreColumnaClaseMinusculaC(column);	
	}
	else
	{
	    strNombreColumna=GetNombreColumnaClaseMinusculaC(column);
		strNombreColumna+=",";
		strNombreColumna+=GetNombreColumnaClaseMinusculaC(column)+"Descripcion";
	}
	
	return strNombreColumna;
}
	
	public static ColumnSchema GetColumnaFromNombreC(String strColumnaNombre,TableSchema tableSchema) {
		ColumnSchema columnSchemaEncontrada=null;
		
		columnSchemaEncontrada=GetColumnaFromNombreC(strColumnaNombre,tableSchema,false);
		
		return columnSchemaEncontrada;
	}
	
	public static ColumnSchema GetColumnaFromNombreC(String strColumnaNombre,TableSchema tableSchema,bool conNombreTablaMSSql) {
		ColumnSchema columnSchemaEncontrada=null;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			//if(GetNombreColumnFromProperties(columnSchema).Equals(strId)) {//Constantes.VERSION_ROW
			if(columnSchema.Name.Equals(strId)) {
				columnSchemaEncontrada=columnSchema;
			}
			
			if(!conNombreTablaMSSql) {
				if(GetNombreColumnFromProperties(columnSchema).Equals(strColumnaNombre)) {
					columnSchemaEncontrada=columnSchema;
					break;
				}
			} else {
				if(columnSchema.Name.Equals(strColumnaNombre)) {
					columnSchemaEncontrada=columnSchema;
					break;
				}
			}
		}
			
		return columnSchemaEncontrada;			
	}
	
	public static TableSchema GetTablaFromNombreC(String strTableNombre,TableSchema tableSchema) {
		TableSchema tableSchemaEncontrada=null;
		
		tableSchemaEncontrada=GetTablaFromNombreC(strTableNombre,tableSchema,false);
			
		return tableSchemaEncontrada;			
	}
	
	public static TableSchema GetTablaFromNombreC(String strTableNombre,TableSchema tableSchema,bool conNombreTablaMSSql) {
		return GetTablaFromNombreC(strTableNombre,tableSchema,null,conNombreTablaMSSql);
	}
	
	public static TableSchema GetTablaFromNombreC(String strTableNombre,DatabaseSchema dataBaseSchema,bool conNombreTablaMSSql) {
		return GetTablaFromNombreC(strTableNombre,null,dataBaseSchema,conNombreTablaMSSql);
	}
	
	public static TableSchema GetTablaFromNombreC(String strTableNombre,TableSchema tableSchema,DatabaseSchema dataBaseSchema,bool conNombreTablaMSSql) {
		TableSchema tableSchemaEncontrada=tableSchema;
		TableSchemaCollection tableSchemaCollection=null;				
		
		if(tableSchema!=null) {
			tableSchemaCollection=tableSchema.Database.Tables;
		} else {
			tableSchemaCollection=dataBaseSchema.Tables;
		}
			
		foreach(TableSchema tableSchemai in tableSchemaCollection) {
			if(!conNombreTablaMSSql) {
				if(GetNombreTableFromProperties(tableSchemai).Equals(strTableNombre)) {
					//if(strTableNombre.Equals("tipo_visual"))
					//Trace.WriteLine(strTableNombre+"-"+tableSchemai.Name+"-"+GetNombreTableFromProperties(tableSchemai));
					
					tableSchemaEncontrada=tableSchemai;
					
					return tableSchemai;
					//return tableSchemaEncontrada=tableSchemai;
					//break;
				}
			} else {
				if(GetNombreClaseC(tableSchemai.ToString()).Equals(strTableNombre)) {
					return tableSchemai;
					//break;
				}
			}
		}
			
		
		
		
		return tableSchemaEncontrada;
	}	
		
	public TableSchema GetTablaFromNombreClaseC(String strTableNombreClase,TableSchema tableSchema) 
		{
			TableSchema tableSchemaEncontrada=tableSchema;
			
			foreach(TableSchema tableSchemai in tableSchema.Database.Tables)
			{
				if(GetNombreClaseC(tableSchemai.ToString()).Equals(strTableNombreClase))
				{
					return tableSchemai;
					//break;
				}
			}
			
			return tableSchemaEncontrada;
		}
	
	public TableSchema GetTablaFromNombreColumnaFkClaseC(String strTableNombreColumna,TableSchema tableSchema,ref bool encontrado) {
			TableSchema tableSchemaEncontrada=tableSchema;
			encontrado=false;
			try {
				
			foreach(TableSchema tableSchemai in tableSchema.Database.Tables) {
				//Trace.WriteLine(strTableNombreColumna.Substring(2,strTableNombreColumna.Length-2));
				if(strTableNombreColumna.Substring(2,strTableNombreColumna.Length-2).Equals(tableSchemai.Name)) {
					tableSchemaEncontrada=tableSchemai;
					encontrado=true;
					
					//return tableSchemai;
					break;
				}
			}
						
			if(!encontrado) {	
				int iPosicionUltimoUpper=0;
				String strNombreColumnaSinAdicional="";
				
				if(!TieneNumeroChar(strTableNombreColumna)) {				
					iPosicionUltimoUpper= GetUltimoUpper(strTableNombreColumna);
					strNombreColumnaSinAdicional=GetNombreSinAdicional(strTableNombreColumna,iPosicionUltimoUpper);
					
					foreach(TableSchema tableSchemai in tableSchema.Database.Tables) {
						//Trace.WriteLine(strTableNombreColumna.Substring(2,strTableNombreColumna.Length-2));
						if(strNombreColumnaSinAdicional.Substring(2,strNombreColumnaSinAdicional.Length-2).Equals(tableSchemai.Name)) {
							tableSchemaEncontrada=tableSchemai;
							encontrado=true;
							
							break;
						}
					}
					
					
					//SI NO ENCUENTRA BUSCA SI TIENE ADICIONAL CON OTRO UPPER DE FINAL
					if(!encontrado) {								
						iPosicionUltimoUpper= GetUltimoUpper(strNombreColumnaSinAdicional);
						strNombreColumnaSinAdicional=GetNombreSinAdicional(strNombreColumnaSinAdicional,iPosicionUltimoUpper);
						
						foreach(TableSchema tableSchemai in tableSchema.Database.Tables) {
							//Trace.WriteLine(strTableNombreColumna.Substring(2,strTableNombreColumna.Length-2));
							if(strNombreColumnaSinAdicional.Substring(2,strNombreColumnaSinAdicional.Length-2).Equals(tableSchemai.Name)) {
								tableSchemaEncontrada=tableSchemai;
								encontrado=true;
								
								break;
							}
						}
					}
				} else {
					//SI NO ENCUENTRA BUSCA SI TIENE ADICIONAL CON NUMERO FINAL
					if(!encontrado) {								
						iPosicionUltimoUpper= GetUltimoNumero(strTableNombreColumna);																		
						strNombreColumnaSinAdicional=GetNombreSinAdicional(strTableNombreColumna,iPosicionUltimoUpper);
					
						//Trace.WriteLine(strTableNombreColumna+"->NombreFinal="+strNombreColumnaSinAdicional);
						
						foreach(TableSchema tableSchemai in tableSchema.Database.Tables) {
							//Trace.WriteLine(strTableNombreColumna.Substring(2,strTableNombreColumna.Length-2));
							if(strNombreColumnaSinAdicional.Substring(2,strNombreColumnaSinAdicional.Length-2).Equals(tableSchemai.Name)) {
								tableSchemaEncontrada=tableSchemai;
								encontrado=true;
								
								break;
							}
						}
					}
				}
			}
			
			} catch(Exception e) {
				Trace.WriteLine("ERROR:En Tabla:"+tableSchema.Name+ ",NOMBRE COLUMNA="+strTableNombreColumna+"->funcion common GetTablaFromNombreColumnaFkClaseC");
				throw e;	
			}
			return tableSchemaEncontrada;
	}	
	
	public int GetUltimoUpper(String strNombreColumna) {
		String strDescritionTabla=string.Empty;
		int iPosicionUltimoUpper=0;
		int i=0;
		
		foreach(char c in strNombreColumna) {
			if(char.IsUpper(c)) {
				iPosicionUltimoUpper=i;
				//break;
			}
			i++;
		}
		
		return iPosicionUltimoUpper;
	}
	
	public int GetUltimoNumero(String strNombreColumna) {
		String strDescritionTabla=string.Empty;
		int iPosicionUltimoUpper=0;
		int i=0;
		
		foreach(char c in strNombreColumna) {
			if(char.IsDigit(c)) {
				iPosicionUltimoUpper=i;
				//break;
			}
			i++;
		}
		
		return iPosicionUltimoUpper;
	}
	
	public bool TieneNumeroChar(String strNombreColumna) {
		String strDescritionTabla=string.Empty;
		int iPosicionUltimoUpper=0;
		int i=0;
		bool tiene=false;
		
		foreach(char c in strNombreColumna) {
			if(char.IsDigit(c)) {
				tiene=true;
				iPosicionUltimoUpper=i;
				//break;
			}
			i++;
		}
		
		return tiene;//iPosicionUltimoUpper;
	}
	
	public String GetNombreSinAdicional(String strNombreColumna,int iPosicionUltimoUpper) {
		String strNombreTablaSinAdicional=string.Empty;
		int i=0;
		
		foreach(char c in strNombreColumna) {
			if(iPosicionUltimoUpper.Equals(i)) {
				break;
			}
			strNombreTablaSinAdicional+=c.ToString();
			
			i++;
		}
		
		return strNombreTablaSinAdicional;
	}
	
	public String SetDataToCombosBusquedasIndiceTablaC(ColumnSchema column,TableSchema tableSchema) 
	{
			String	strDataToCombos="";		
						
			foreach(IndexSchema indexSchema in tableSchema.Indexes)
			{					
				if(indexSchema.IsUnique)
				{
					continue;
				}
				
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
							{
								if(memberColumnSchema.IsForeignKeyMember)
								{
									if(memberColumnSchema.Name.Equals(column.Name))
									{
									strDataToCombos+="\r\n\r\n\t\tif(jmaki.attributes.get('"+ GetNameControlHtmlBusqueda(memberColumnSchema,indexSchema.Name)+  "')!=undefined)";
									strDataToCombos+=" {";
									strDataToCombos+="\r\n\t\t\tjmaki.attributes.get('"+ GetNameControlHtmlBusqueda(memberColumnSchema,indexSchema.Name)+  "').setValues(this.arrData"+GetNombreClaseRelacionadaFromColumn(memberColumnSchema) +");";
									strDataToCombos+="\r\n\t\t}";
									}
								}
							
							}															
			}								
			return  strDataToCombos;
	}
	
		public String SetDataToCombosBusquedasIndiceSoloFKTablaSeleccionadoC(ColumnSchema column,TableSchema tableSchema) 
	{
			String	strDataToCombos="";		
						
			foreach(IndexSchema indexSchema in tableSchema.Indexes)
			{
				if(!indexSchema.Name.Contains(strFK+"_"))
				{
				continue;
				}
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
							{
								if(memberColumnSchema.IsForeignKeyMember&&indexSchema.MemberColumns.Count.Equals(1))
								{
									if(memberColumnSchema.Name.Equals(column.Name))
									{
									strDataToCombos+="\r\n\t\tif(jmaki.attributes.get('"+ GetNameControlHtmlBusqueda(memberColumnSchema,indexSchema.Name)+  "')!=undefined)\r\n";
									strDataToCombos+="\t\t{";
									strDataToCombos+="\r\n\t\t\tjmaki.attributes.get('"+ GetNameControlHtmlBusqueda(memberColumnSchema,indexSchema.Name)+  "').wrapper.dataProvider.setData(arrData"+GetNombreClaseRelacionadaFromColumn(memberColumnSchema) +");";
									strDataToCombos+="\r\n\t\t\tjmaki.attributes.get('"+ GetNameControlHtmlBusqueda(memberColumnSchema,indexSchema.Name)+  "').wrapper.setValue(Servicios"+GetNombreClaseC(tableSchema.ToString())+"IntIdUnico"+GetNombreClaseRelacionadaFromColumn(memberColumnSchema) +");\r\n";
									strDataToCombos+="\t\t}\r\n";
									}
								}
							
							}															
			}								
			return  strDataToCombos;
	}
	
		public static string GetVariablesFromXmlC(ColumnSchema column,bool reemplazarForeigKey,bool reemplazarBooleanValue)
	{
		string strInicio="item.getElementsByTagName(\"";
		string strFin="\")[0].firstChild.nodeValue;";
		string strFin2="\")[0].firstChild)";
	
	string strNombre="";
	string strGetColumn="";
	string strPrefijoTabla="";
	string strPrefijoTipo="";
	string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+strPrefijoTabla+strPrefijoTipo+strNombreColumna+"()"+GetTipoColumnaToString(column);
	
	
		if(column.Name==strIsActive||column.Name==strIsExpired||(column.DataType==DbType.Binary&&column.Name!=strVersionRow))
		{
		return "";
		}
	
		if(column.IsForeignKeyMember)
		{
			strNombre="\r\n\r\n\t\t\t\t\tvar "+ column.Name.Substring(0, column.Name.Length).ToLower()+ "='';";
			
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+strFin2+"{";
			strNombre+=column.Name.Substring(0, column.Name.Length).ToLower()+"="+strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
			strNombre+=strFin+"}";
			
			strNombre+="\r\n\r\n\t\t\t\t\tvar "+ column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+ "='';";
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strFin2+"{";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+"="+ strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";		
			strNombre+=strFin+"}";
		}
		else
		{
			strNombre="\r\n\r\n\t\t\t\t\tvar "+ column.Name.Substring(0, column.Name.Length).ToLower()+ "='';";
			strNombre+="\r\n\t\t\t\t\t"+"if("+strInicio+column.Name.Substring(0, column.Name.Length).ToLower()+strFin2+"{";
			
			strNombre+=column.Name.Substring(0, column.Name.Length).ToLower()+"="+ strInicio;
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
			strNombre+=strFin+"}";
		}
	/*if(reemplazarForeigKey)
	{
		if(column.IsForeignKeyMember)
		{
		strNombre="var "+ column.Name.Substring(0, column.Name.Length).ToLower()+ strInicio;
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";
		strNombre+=strFin;
		}
		else
		{
		strNombre="var "+ column.Name.Substring(0, column.Name.Length).ToLower()+ strInicio;
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
		strNombre+=strFin;
		}
	}*/
	/*else
	{
		strNombre="var "+ column.Name.Substring(0, column.Name.Length).ToLower()+ strInicio;
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
		strNombre+=strFin;
	}*/
	/*
	if(reemplazarBooleanValue)
	{
		if(column.DataType==DbType.Boolean)
		{
		strNombre+="\t\t"+ column.Name.Substring(0, column.Name.Length).ToLower()+"=CambiarBooleanValueToControl("+column.Name.Substring(0, column.Name.Length).ToLower() +",id);\r\n";	
		}	
	}
	*/
	return strNombre;
	}
	
	
	#endregion
		
		#region Licence
		
		public String  GetByDanLicence() 
		{
			String strLicencia="";
			
			if(strTipoLicencia.Equals("GPL")) {
				strLicencia+="/*";
				strLicencia+="\r\n* ============================================================================";
				strLicencia+="\r\n* GNU Lesser General Public License";
				strLicencia+="\r\n* ============================================================================";
				strLicencia+="\r\n*";
				strLicencia+="\r\n* BYDAN-Byron Danilo Chavez Parra - Free Java BYDAN-Byron Danilo Chavez Parra library.";
				strLicencia+="\r\n* Copyright (C) 2013 ";
				strLicencia+="\r\n* ";
				strLicencia+="\r\n* This library is free software; you can redistribute it and/or";
				strLicencia+="\r\n* modify it under the terms of the GNU Lesser General Public";
				strLicencia+="\r\n* License as published by the Free Software Foundation; either";
				strLicencia+="\r\n* version 2.1 of the License, or (at your option) any later version.";
				strLicencia+="\r\n* ";
				strLicencia+="\r\n* This library is distributed in the hope that it will be useful,";
				strLicencia+="\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of";
				strLicencia+="\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU";
				strLicencia+="\r\n* Lesser General Public License for more details.";
				strLicencia+="\r\n* ";
				strLicencia+="\r\n* You should have received a copy of the GNU Lesser General Public";
				strLicencia+="\r\n* License along with this library; if not, write to the Free Software";
				strLicencia+="\r\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.";
				strLicencia+="\r\n* ";
				strLicencia+="\r\n* BYDAN-Byron Danilo Chavez Parra Corporation";
				strLicencia+="\r\n*/";
				
			} else if(strTipoLicencia.Equals("APACHE")) {
				strLicencia+="/*";
				strLicencia+="\r\n* Copyright 2013 BYDAN-Byron Danilo Chavez Parra";

				strLicencia+="\r\n\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");";
				strLicencia+="\r\n* you may not use this file except in compliance with the License.";
				strLicencia+="\r\n* You may obtain a copy of the License at";
				
				strLicencia+="\r\n\r\n* 	http://www.apache.org/licenses/LICENSE-2.0";
				
				strLicencia+="\r\n\r\n* Unless required by applicable law or agreed to in writing, software";
				strLicencia+="\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,";
				strLicencia+="\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.";
				strLicencia+="\r\n* See the License for the specific language governing permissions and";
				strLicencia+="\r\n* limitations under the License.";
				strLicencia+="\r\n*/";
				
			} else if(strTipoLicencia.Equals("ME")) {
				strLicencia+="/*";				
				strLicencia+="\r\n*AVISO LEGAL";
				strLicencia+="\r\n© Copyright";				
				strLicencia+="\r\n*Este programa esta protegido por la ley de derechos de autor.";
				strLicencia+="\r\n*La reproduccion o distribucion ilicita de este programa o de cualquiera de"; 
				strLicencia+="\r\n*sus partes esta penado por la ley con severas sanciones civiles y penales,"; 
				strLicencia+="\r\n*y seran objeto de todas las sanciones legales que correspondan.";
				strLicencia+="\r\n\r\n*Su contenido no puede copiarse para fines comerciales o de otras,";
				strLicencia+="\r\n*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.";
				strLicencia+="\r\nSolo esta permitido colocar hipervinculos al sitio web.";
				strLicencia+="\r\n*/";
			}
			
			return strLicencia;
		}
		#endregion

		#region Me Extend Properties
	
	public  String GetPropertyAccionTableFromPropertiesC(MeExtendProperty meExtendProperty,String strProperty)
	{
			
		String[] descripciones;
		String[] tipo;
		String strPropertyValue="";
		
		
			if(meExtendProperty.Value!="")
			{			
				descripciones=meExtendProperty.Value.Split('|');
							
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
								
					if(tipo[0].Equals(strProperty))
					{
						strPropertyValue=tipo[1];
						
						break;
					}
				}
			}	
		
		
		
		
		return strPropertyValue;
	}
	
	public  ArrayList GetPropertyAccionsTableFromPropertiesC(TableSchema tableSchema,String strProperty)
	{
		ArrayList arrAccionPropertyValues=new ArrayList();
		
		ArrayList arrAccionExtendsProperty=new ArrayList();
		
		arrAccionExtendsProperty=GetAccionExtendsPropertyC(tableSchema);
		
		String[] descripciones;
		String[] tipo;
		String strPropertyValue="";
		
		foreach(MeExtendProperty meExtendProperty in arrAccionExtendsProperty)
		{
			if(meExtendProperty.Value!="")
			{			
				descripciones=meExtendProperty.Value.Split('|');
							
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
								
					if(tipo[0].Equals(strProperty))
					{
						strPropertyValue=tipo[1];
						arrAccionPropertyValues.Add(strPropertyValue);
						break;
					}
				}
			}	
		}
		
		
		
		return arrAccionPropertyValues;
	}
	
	public ArrayList GetAccionExtendsPropertyC(TableSchema tableSchema)
	{
		ArrayList arrAccionExtendsProperty=new ArrayList();
		
		arrAccionExtendsProperty=GetExtendsPropertyC(tableSchema,strPrefijoAccionTableExtendProperty);
		
		return arrAccionExtendsProperty;
	}
	
	public ArrayList GetExtendsPropertyC(TableSchema tableSchema,String strTipoExtendProperty)
	{
		ArrayList arrExtendsProperty=new ArrayList();
		
		String strExtend=string.Empty;										 						
		
		MeExtendProperty meExtendProperty=new MeExtendProperty();
		
		foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
		{					
			if(extendedProperty.Name.Contains(strPrefijoMeTableExtendProperty+strTipoExtendProperty))
			{
				meExtendProperty=new MeExtendProperty(extendedProperty.Name,extendedProperty.Value.ToString());
				arrExtendsProperty.Add(meExtendProperty);
			}
		}
		//MeExtendProperty
		return arrExtendsProperty;
	}
	
	#endregion
	
		#region Me Extra Code
		public static string GetExtra1Faces(TableSchema table,bool EsSwing,String strEmpresa)
		{
			return ExtraCode.GetExtra1Faces(table,EsSwing,strEmpresa);
		}
		
		public static string GetExtra1Servlet(TableSchema table)
		{
			return ExtraCode.GetExtra1Servlet(table);
		}
		
		public static string GetExtra2ServletComment(TableSchema table)
		{
			return ExtraCode.GetExtra2ServletComment(table);
		}
		
		#endregion
		
		#region DataAccess Functions
		public String GetNombreTablaC(TableSchema TablaBase) {
			String strNombreTabla=string.Empty;
														
			strNombreTabla=GetNombreTablaInternoC(TablaBase,false);
									
			return strNombreTabla; 
		}
		
		public String GetNombreTablaInternoC(TableSchema TablaBase,bool blnEsMSSql) {
			String strNombreTabla=string.Empty;
			
			if(!blnEsMSSql) {
				strNombreTabla=GetNombreTableFromProperties(TablaBase);
			} else {
				strNombreTabla=TablaBase.Name;
			}
									
			return strNombreTabla; 
		}
		
		public string GetParameterNoLastIndexC(TableSchema table)
		{		
			string strNombre =String.Empty; 
			int count=0;	
				
			for (int i = 0; i < table.Columns.Count; i++){ 	
			strNombre=table.Columns[i].Name;
			switch (strNombre)
			{
				case strVersionRow:
				{
					break;
				}
				
				default:
				{
					count++;
					break;
				}
		
			}
				} 
				
			return count.ToString();
		}
		
		public string GetParameterLastIndexC(TableSchema table)
		{		
			string strNombre =String.Empty; 
			int count=0;	
				
			for (int i = 0; i < table.Columns.Count; i++){ 	
		
					count++;
					
		
				} 
				
			return count.ToString();
		}

		public static string GetNombreCampoTablaC(ColumnSchema column)
		{
			//ANTES DE JPA
			/*
			string strPrefijo = "\r\n\tpublic static String getColumnName"+column.Name+"()";
			strPrefijo += " {\r\n\t\treturn \""+ column.Name+"\";\r\n\t}";
			*/
			
			
			string strPrefijo=String.Empty;
			string strPrefijoTabla=GetPrefijoTablaC().ToLower();
			string strPrefijoTipo =GetPrefijoTipoC(column);
		
			strPrefijo=strPrefijoTabla+strPrefijoTipo;
			
			string strNombre = GetNombreColumnaClaseC(column);
			strPrefijo+=strNombre;
			
			string strFunction= "\r\n\tpublic static String getColumnName"+column.Name+"()";
			strFunction += " {\r\n\t\treturn \""+ strPrefijo+"\";\r\n\t}";
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					//strPrefijo=String.Empty;
					strFunction=strVersionRow;
					break;
				}	
				case strIsExpired:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsExpired;
					break;
				}	
				case strIsActive:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsActive;
					break;
				}	
				case strId:
				{
					//strPrefijo=String.Empty;
					strFunction=strId;
					break;
				}
			}
			
			//return strFunction;
			return strFunction;
		}
		
		public static string GetNombreCampoTablaNativeC(ColumnSchema column)
		{
			//ANTES DE JPA
			/*
			string strPrefijo = "\r\n\tpublic static String getColumnName"+column.Name+"()";
			strPrefijo += " {\r\n\t\treturn \""+ column.Name+"\";\r\n\t}";
			*/
			
			
			string strPrefijo=String.Empty;
			string strPrefijoTabla=GetPrefijoTablaC().ToLower();
			string strPrefijoTipo =GetPrefijoTipoC(column);
		
			strPrefijo=GetNombreColumnFromProperties(column);//strPrefijoTabla+strPrefijoTipo;
			
			string strNombre = GetNombreColumnaClaseC(column);
			//strPrefijo+=strNombre;
			
			string strFunction= "\r\n\tpublic static final String getColumnNameNative"+column.Name+"()";
			strFunction += " {\r\n\t\treturn \""+ strPrefijo+"\";\r\n\t}";
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					//strPrefijo=String.Empty;
					strFunction=strVersionRow;
					break;
				}	
				case strIsExpired:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsExpired;
					break;
				}	
				case strIsActive:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsActive;
					break;
				}	
				case strId:
				{
					//strPrefijo=String.Empty;
					strFunction=strId;
					break;
				}
			}
			
			//return strFunction;
			return strFunction;
		}
		
		public static string GetNombreCampoTablaNativeUpperConstantC(ColumnSchema column)
		{
			//ANTES DE JPA
			/*
			string strPrefijo = "\r\n\tpublic static String getColumnName"+column.Name+"()";
			strPrefijo += " {\r\n\t\treturn \""+ column.Name+"\";\r\n\t}";
			*/
			
			
			string strPrefijo=String.Empty;
			string strPrefijoTabla=GetPrefijoTablaC().ToLower();
			string strPrefijoTipo =GetPrefijoTipoC(column);
		
			strPrefijo=GetNombreColumnFromProperties(column);//strPrefijoTabla+strPrefijoTipo;
			
			string strNombre = GetNombreColumnaClaseC(column);
			//strPrefijo+=strNombre;
			
			string strFunction="public static final String "+column.Name.ToUpper()+"";
			strFunction += "= \""+ strPrefijo+"\";";
			
			//Trace.WriteLine(column.Name);
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					//strPrefijo=String.Empty;
					strFunction=strVersionRow;
					break;
				}	
				case strIsExpired:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsExpired;
					break;
				}	
				case strIsActive:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsActive;
					break;
				}	
				case strId:
				{
					//strPrefijo=String.Empty;
					strFunction=strId;
					break;
				}
			}
			
			//return strFunction;
			return strFunction;
		}
		
		public string GetTituloCampoTablaUpperConstantC(ColumnSchema column)
		{
			//ANTES DE JPA
			/*
			string strPrefijo = "\r\n\tpublic static String getColumnName"+column.Name+"()";
			strPrefijo += " {\r\n\t\treturn \""+ column.Name+"\";\r\n\t}";
			*/
			
			
			string strPrefijo=String.Empty;
			string strPrefijoLower=String.Empty;
			string strPrefijoTabla=GetPrefijoTablaC().ToLower();
			string strPrefijoTipo =GetPrefijoTipoC(column);
		
			strPrefijo=GetWebNombreTituloColumnFromPropertiesC(column);//strPrefijoTabla+strPrefijoTipo;
			strPrefijoLower=GetWebNombreTituloLowerColumnFromPropertiesC(column);
			
			string strNombre = GetNombreColumnaClaseC(column);
			//strPrefijo+=strNombre;
			
			string strFunction="\tpublic static final String LABEL_"+column.Name.ToUpper();
			strFunction += "= \""+ strPrefijo+"\";";
			
			//LOWER CASE
			strFunction+="\r\n\t\tpublic static final String LABEL_"+column.Name.ToUpper()+"_LOWER";
			strFunction += "= \""+strPrefijoLower+"\";";
			
			//GetWebNameDescriptionColumnBaseC(column,true,false)
			
			/*
			switch (column.Name)
			{
				case strVersionRow:
				{
					//strPrefijo=String.Empty;
					strFunction=strVersionRow;
					break;
				}	
				case strIsExpired:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsExpired;
					break;
				}	
				case strIsActive:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsActive;
					break;
				}	
				case strId:
				{
					//strPrefijo=String.Empty;
					strFunction=strId;
					break;
				}
			}
			*/
			
			//return strFunction;
			return strFunction;
		}
		
		public string GetTituloDesdeNombreCampoTablaUpperConstantC(ColumnSchema column,bool paraDescripcionDetallado)
		{
			//ANTES DE JPA
			/*
			string strPrefijo = "\r\n\tpublic static String getColumnName"+column.Name+"()";
			strPrefijo += " {\r\n\t\treturn \""+ column.Name+"\";\r\n\t}";
			*/
			
			
			string strPrefijo=String.Empty;
			string strPrefijoTabla=GetPrefijoTablaC().ToLower();
			string strPrefijoTipo =GetPrefijoTipoC(column);
		
			strPrefijo=GetWebNombreTituloColumnFromPropertiesC(column);//strPrefijoTabla+strPrefijoTipo;
			
			string strNombre = GetNombreColumnaClaseC(column);
			//strPrefijo+=strNombre;
			
			string strFunction="";
			string strColumnatoString="";
			string strColumnaClase="";
			
			if(!paraDescripcionDetallado) {
				strFunction="if(sNombreColumna.equals("+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+")) {";
				strFunction += "sLabelColumna="+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+";}";
			} else {
				strFunction="sDescripcion+="+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+"+\"=\";";
				
				if(!EsVarCharColumn(column) && !EsCharColumn(column)) {
					strColumnatoString=".toString()";
				}
				
				if(!column.Name.Equals(strId) && !column.Name.Equals(strVersionRow)) {
					strColumnaClase=GetNombreColumnaClaseC(column);
				} else {
					if(column.Name.Equals(strId)) {
						strColumnaClase=strIdGetSet;
					} else {
						strColumnaClase=strVersionRowGetSet;
					}
				}
				
				strFunction+="\r\n\t\tsDescripcion+="+GetNombreClaseObjetoC(column.Table.ToString())+".get"+GetPrefijoTipoC(column)+strColumnaClase+"()"+strColumnatoString+"+\",\";";
				
				
			}
			
			/*
			switch (column.Name)
			{
				case strVersionRow:
				{
					//strPrefijo=String.Empty;
					strFunction=strVersionRow;
					break;
				}	
				case strIsExpired:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsExpired;
					break;
				}	
				case strIsActive:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsActive;
					break;
				}	
				case strId:
				{
					//strPrefijo=String.Empty;
					strFunction=strId;
					break;
				}
			}
			*/
			
			//return strFunction;
			return strFunction;
		}
		
		public static string GetLabelCampoTablaC(ColumnSchema column)
		{
			//ANTES DE JPA
			/*
			string strPrefijo = "\r\n\tpublic static String getColumnName"+column.Name+"()";
			strPrefijo += " {\r\n\t\treturn \""+ column.Name+"\";\r\n\t}";
			*/
			
			
			//string strPrefijo=String.Empty;
			//string strPrefijoTabla=GetPrefijoTablaC().ToLower();
			//string strPrefijoTipo =GetPrefijoTipoC(column);
		
			//strPrefijo=strPrefijoTabla+strPrefijoTipo;
			
			string strNombre = GetNombreColumnaClaseC(column);
			//strPrefijo+=strNombre;
			string strPrefijo=GetWebNombreTituloColumnFromPropertiesC(column);
			
			string strFunction= "\r\n\tpublic static String getColumnLabel"+column.Name+"()";
			strFunction += " {\r\n\t\treturn \""+ strPrefijo+"\";\r\n\t}";
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					//strPrefijo=String.Empty;
					strFunction=strVersionRow;
					break;
				}	
				case strIsExpired:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsExpired;
					break;
				}	
				case strIsActive:
				{
					//strPrefijo=String.Empty;
					strFunction=strIsActive;
					break;
				}	
				case strId:
				{
					//strPrefijo=String.Empty;
					strFunction=strId;
					break;
				}
			}
			
			//return strFunction;
			return strFunction;
		}
		
		public string GetSqlParameterInsertC(ColumnSchema column)
		{
			
			String param=GetNombreColumnFromPropertiesC(column,true);
			
			
			
			param+="=?";
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					param=GetNombreColumnFromPropertiesC(column,true);
					param+="=current_timestamp";
					break;
				}	
				/*case "isActive":
				{
					param+="=true";
					break;
				}	
				case "isExpired":
				{
					param+="=false";
					break;
				}	
				*/
				case strId:
				{
					if(TieneIdentityColumnC(column.Table)) {
						param="";
					} else {
						param+=",";
					}
					
					break;
				}
				
			}
			
			return param;
		}
		
		public string GetSqlParameterInsertPostgresC(ColumnSchema column,bool esValor)
		{
			
			String param="";
			
			if(!esValor) {
				param+=GetNombreColumnFromPropertiesC(column,true);
			} else {
				param+="?";
			}
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					if(!esValor) {
						param=GetNombreColumnFromPropertiesC(column,true);
					} else {
						param="current_timestamp";
					}
					
					break;
				}	
				/*case "isActive":
				{
					param+="=true";
					break;
				}	
				case "isExpired":
				{
					param+="=false";
					break;
				}	
				*/
				case strId:
				{
					if(TieneIdentityColumnC(column.Table)) {
						param="";
					} else {
						param+=",";
					}
					
					break;
				}
				
			}
			
			return param;
		}
		
		public string GetSqlStoreProcedureParameterInsertC(ColumnSchema column)
		{
			
			String param="";//GetNombreColumnFromProperties(column);	
			
			param+="?";
			
			switch (column.Name)
			{
				/*
				case strVersionRow:
				{
					param="CURRENT_TIMESTAMP";GetNombreColumnFromProperties(column);
					//param+="=CURRENT_TIMESTAMP";
					break;
				}
				*/
				/*case "isActive":
				{
					param+="=true";
					break;
				}	
				case "isExpired":
				{
					param+="=false";
					break;
				}	
				*/
				case strId:case strVersionRow:
				{
					param="";
					break;
				}
				
			}
			
			return param;
		}
		
		public string GetSqlStoreProcedureParameterUpdateC(ColumnSchema column)
		{
			
			String param="";// GetNombreColumnFromProperties(column);
			
			param+="?";
			
			switch (column.Name)
			{
				/*
				case strVersionRow:
				{
					param="CURRENT_TIMESTAMP";// GetNombreColumnFromProperties(column);
					//param+="=CURRENT_TIMESTAMP";
					break;
				}	
				*/
				case strId:case strVersionRow:
				{
					param=String.Empty;
					break;
				}
			}
			
			return param;
		}
		
		public string GetSqlParameterUpdateC(ColumnSchema column)
		{
			
			String param= GetNombreColumnFromPropertiesC(column,true);
			
			param+="=?";
			
			switch (column.Name)
			{
				case strVersionRow:
				{
					param= GetNombreColumnFromPropertiesC(column,true);
					param+="=current_timestamp";
					break;
				}	
				case strId:
				{
					if(TieneIdentityColumnC(column.Table)) {
						param=String.Empty;
					} else {
						param+=",";
					}
					
					break;
				}
			}
			
			return param;
		}
		
		public string GetSqlParameterSelectC(ColumnSchema column,TableSchema TablaBase,String Schema)
		{
			
			String param= "\"+"+GetNombreClaseC(TablaBase.ToString())+strClaseConstantesFunciones+".SCHEMA+\".\"+"+GetNombreClaseC(TablaBase.ToString())+strClaseConstantesFunciones+".TABLENAME"+"+\"."+GetNombreColumnFromProperties(column);
			
			if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired|| column.Name==strVersionRow)
			{
			param="\"+"+GetNombreClaseC(TablaBase.ToString())+strClaseConstantesFunciones+".SCHEMA+\".\"+"+GetNombreClaseC(TablaBase.ToString())+strClaseConstantesFunciones+".TABLENAME"+"+\"."+GetNombreColumnFromPropertiesC(column,true);//column.Name;
			}
			
			return param;
		}
		#endregion	
	
		#region Data Type
		public String GetParameterFunctionColumnC(ColumnSchema columnSchema,bool blnConComaInicial) 
		{
			String strParameterFunctionColumn="";
			String strComa="";
			
			if(blnConComaInicial) {
				strComa=",";
			}
			
			strParameterFunctionColumn+=strComa+GetTipoColumnaClaseC(columnSchema)+" "+GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema); 
		
			return strParameterFunctionColumn;
		}
		
		public String GetParameterFunctionUsoColumnC(ColumnSchema columnSchema,bool blnConComaInicial) 
		{
			String strParameterFunctionColumn="";
			String strComa="";
			
			if(blnConComaInicial) {
				strComa=",";
			}
			
			strParameterFunctionColumn+=strComa+GetPrefijoTipoC(columnSchema)+GetNombreColumnaClaseC(columnSchema); 
		
			return strParameterFunctionColumn;
		}
		
		public Boolean EsDecimalColumn(ColumnSchema columnSchema) 
		{
			Boolean isDecimal=false;
			
			if(columnSchema.DataType==DbType.Decimal) {
				 isDecimal=true;
			}
			
			return isDecimal;
		}
		
		public Boolean EsBigIntColumn(ColumnSchema columnSchema) 
		{
			Boolean isBigInt=false;
			
			if(columnSchema.DataType==DbType.Int64) {
				 isBigInt=true;
			}
			
			return isBigInt;
		}
		
		public Boolean EsIntColumn(ColumnSchema columnSchema) 
		{
			Boolean isInt=false;
			
			if(columnSchema.DataType==DbType.Int32) {
				 isInt=true;
			}
			
			return isInt;
		}
	
		public Boolean EsSmallIntColumn(ColumnSchema columnSchema) 
		{
			Boolean isSmallInt=false;
			
			if(columnSchema.DataType==DbType.Int16) {
				 isSmallInt=true;
			}
			
			return isSmallInt;
		}
		
		public Boolean EsCharColumn(ColumnSchema columnSchema) 
		{
			Boolean isChar=false;
			
			if(columnSchema.DataType==DbType.AnsiStringFixedLength) {
				 isChar=true;
			}
			
			return isChar;
		}
		
		public Boolean EsVarCharColumn(ColumnSchema columnSchema) 
		{
			Boolean isVarChar=false;
			
			if(columnSchema.DataType==DbType.AnsiString) {
				 isVarChar=true;
			}
			
			return isVarChar;
		}
		
		public Boolean EsDateTimeColumn(ColumnSchema columnSchema) 
		{
			Boolean isDateTime=false;
			
			if(columnSchema.DataType==DbType.DateTime) {
				if(GetTipoColumnaFromColumn(columnSchema).Equals("Timestamp")) {
					isDateTime=true;
				}
				/*
				if(GetTipoColumnaFromColumn(columnSchema).Equals("")) {
					isDateTime=true;
				} else {
					if(GetTipoColumnaFromColumn(columnSchema).Equals("Timestamp")) {
						isDateTime=true;
					}
				}
				*/ 
			}
			
			return isDateTime;
		}
		
		public Boolean EsDateColumn(ColumnSchema columnSchema) 
		{
			Boolean isDate=false;
			
			if(columnSchema.DataType==DbType.DateTime) {	
				if(GetTipoColumnaFromColumn(columnSchema).Equals("")) {
					isDate=true;
				} else {
					if(GetTipoColumnaFromColumn(columnSchema).Equals("Date")) {
						isDate=true;
					}
				}			
			}
			
			return isDate;
		}
		
		public Boolean EsTimeColumn(ColumnSchema columnSchema) 
		{
			Boolean isTime=false;
			
			if(columnSchema.DataType==DbType.DateTime) {			
				if(GetTipoColumnaFromColumn(columnSchema).Equals("Time")) {
					isTime=true;
				}
			}
			
			return isTime;
		}
		
		public Boolean EsTiempoColumn(ColumnSchema columnSchema) {
			Boolean isTime=false;
			
			if(EsDateTimeColumn(columnSchema) || EsDateColumn(columnSchema) || EsTimeColumn(columnSchema)) {
				isTime=true;
			}
			
			return isTime;
		}
		
		public Boolean EsBitColumn(ColumnSchema columnSchema) 
		{
			Boolean isBit=false;
			
			if(columnSchema.DataType==DbType.Boolean) {
				 isBit=true;
			}
			
			return isBit;
		}
		//SE APLICA PARA VERSIONROW,IMAGE Y BINARY PROPIAMENTE DICHO O CAMPO DE ARCHIVO CUALQUIERA
		public Boolean EsBinaryColumn(ColumnSchema columnSchema) 
		{
			Boolean isBinary=false;
			
			if(columnSchema.DataType==DbType.Binary) {
				 isBinary=true;
			}
			
			return isBinary;
		}
		
		//SE APLICA PARA IMAGENES O ARCHIVOS CUALQUIERA
		public Boolean EsImagenArchivoColumn(ColumnSchema columnSchema) 
		{
			Boolean isBinary=false;
			Boolean isImage=false;
			
			isBinary=EsBinaryColumn(columnSchema);
			
			if(columnSchema.NativeType.Equals("image")) {
				 isImage=true;
			}
			
			return isBinary&&isImage;
		}
		
		//TIPOS QUE NO DEBERIAN ESTAR
		
		public Boolean EsTextColumn(ColumnSchema columnSchema) 
		{
			Boolean isText=false;
			
			if(columnSchema.DataType==DbType.AnsiString&&columnSchema.Size==16) {
				 isText=true;
			}
			
			return isText;
		}
		
		public Boolean EsStringNVarCharColumn(ColumnSchema columnSchema) 
		{
			Boolean isStringNVarChar=false;
			
			if(columnSchema.DataType==DbType.String) {
				 isStringNVarChar=true;
			}
			
			return isStringNVarChar;
		}
		
		public Boolean EsPathImagenDocumentoColumn(ColumnSchema columnSchema) 
		{
			Boolean isPathImagenDocumento=false;
			String strPathImagen="PathImagen";
			String strPathDocumento="PathDocumento";
			
			if(columnSchema.Name.Contains(strPathImagen)||columnSchema.Name.Contains(strPathDocumento)) {
				 isPathImagenDocumento=true;
			}
			
			return isPathImagenDocumento;
		}
		
		public Boolean EsPathDocumentoColumn(ColumnSchema columnSchema) 
		{
			Boolean isPathDocumento=false;
			String strPathDocumento="PathDocumento";
			
			if(columnSchema.Name.Contains(strPathDocumento)) {
				 isPathDocumento=true;
			}
			
			return isPathDocumento;
		}
		
		public Boolean EsPathImagenColumn(ColumnSchema columnSchema) 
		{
			Boolean isPathDocumento=false;
			String strPathImagen="PathImagen";
			
			if(columnSchema.Name.Contains(strPathImagen)) {
				 isPathDocumento=true;
			}
			
			return isPathDocumento;
		}
		
		public Boolean EsAutoAuditoriaColumnC(ColumnSchema columnSchema) 
		{
			Boolean isAutoAuditoria=false;
			String strPrefijoUsuario="Aux";
			
			if(columnSchema.Name.Equals(strId+strPrefijoUsuario+"Usuario")
			||columnSchema.Name.Equals("InsertFechaHora")
			||columnSchema.Name.Equals("InsertProceso")
			||columnSchema.Name.Equals(strId+strPrefijoUsuario+"UsuarioUpdate")
			||columnSchema.Name.Equals("UpdateFechaHora")
			||columnSchema.Name.Equals("UpdateProceso")
			) {
				isAutoAuditoria=true;
				return isAutoAuditoria;
			} 
				
			return isAutoAuditoria;
		}
		
		public bool ValidacionCampoTotalizarC(ColumnSchema column) {
			bool validado=false;
			
			if(EsDecimalColumn(column)) {
				validado=true;
			}
			
			return validado;
		}

		public bool TieneCampoTotalizarC(TableSchema table) {
			bool validado=false;
			
			foreach(ColumnSchema column in table.Columns) {
				if(ValidacionCampoTotalizarC(column)) {
					validado=true;
				}
			}
			
			return validado;
		}
					
		public bool EsNormalOrientationC(TableSchema table,bool GenerarReporteVertical) {
			bool blnNormalOrientationLocal=true;
			
			int j=0;
			int intTotalWidth=GetTotalWidthCabeceraReporteC(table,ref j,GenerarReporteVertical);
			
			if(intTotalWidth>535) {
				blnNormalOrientationLocal=false;
			}
			
			return blnNormalOrientationLocal;
		}
		
		public int GetTotalWidthCabeceraReporteC(TableSchema TablaBase,ref int j,bool GenerarReporteVertical) {
			//int j=0;
			int k=0;
			int intTotalWidth=0;
			
			for (int i = 0; i < TablaBase.Columns.Count; i++) { 		
				if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow|| GetEsReporteColumnFromPropertiesC(TablaBase.Columns[i]) || GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])||EsPathImagenDocumentoColumn(TablaBase.Columns[i])) {
					continue; 
				}
			
				j++;		
				intTotalWidth+=GetWidthXmlCabeceraReporteColumnaClaseC(TablaBase.Columns[i],GenerarReporteVertical,true);
			
				/*
				//INDICA Q IMAGEN SI ALCANZO A SER MOSTRADO
				if(GenerarConImagen && EsPathImagenColumn(TablaBase.Columns[i])) {
					if(intTotalWidth<=842) {
						blnConImagenEnreporte=true;
					}
				}
				*/
			} 
			
			return intTotalWidth;
		}
		
		
		public bool GenerarParaGroupGenericoVerificacionNegacionC(ColumnSchema column,bool EsParaGroupGenerico) {
			bool verifica=false;
			
			if(EsParaGroupGenerico && !ValidacionCampoTotalizarC(column)) {
				verifica=true;
			}
			
			return verifica;
		}
		
		public static String GetNombreConSeparacionC(String strNombre) {
			String strDescritionTabla=string.Empty;
			bool blnEsPrimero=true;
			
			foreach(char c in strNombre) {
				if(!blnEsPrimero && char.IsUpper(c)) {
					strDescritionTabla+="_";
				}
				
				strDescritionTabla+=c.ToString();
				
				if(blnEsPrimero) {
					blnEsPrimero=false;
				}	
			}
			
			return strDescritionTabla;	
		}
		
		public static String GetNombreConMixedCaseC(String strNombre) {
			return GetNombreConMixedCaseC(strNombre,false);
		}
		
		public static String GetNombreConMixedCaseC(String strNombre,bool desdeMayusculas) {
			String strDescritionTabla=string.Empty;
			bool blnEsPrimero=true;
			bool blnTieneEspacionAnterior=false;
			String strCharActual="";
			
			if(!desdeMayusculas) {
				foreach(char c in strNombre) {
					if(!blnEsPrimero && char.IsUpper(c)) {
						strDescritionTabla+=" ";
					}
					
					strDescritionTabla+=c.ToString();
					
					if(blnEsPrimero) {
						blnEsPrimero=false;
					}	
				}
				
			} else {			
				
				blnTieneEspacionAnterior=false;
				foreach(char c in strNombre) {
					//strCharActual=c.ToString();
					
					if(char.IsWhiteSpace(c)) {
						blnTieneEspacionAnterior=true;
					}
					
					if(blnEsPrimero || (!blnEsPrimero && char.IsWhiteSpace(c))) {
						strDescritionTabla+=c.ToString();												
					
					} else {
						strCharActual=c.ToString();
						
						if(!blnTieneEspacionAnterior) {							
							strDescritionTabla+=strCharActual.ToLower();							
						
						} else {
							blnTieneEspacionAnterior=false;
							
							strDescritionTabla+=c.ToString();
						}
					}
					
									
					if(blnEsPrimero) {
						blnEsPrimero=false;
					}	
				}
				
				//Trace.WriteLine(strNombre+"->"+strDescritionTabla);
			}
			
			return strDescritionTabla;	
		}
		#endregion
			
		#region ExtraCode
		public void GenerateFoldersExtraCodeC(TableSchema tableSchema) {
			string path = Directory.GetCurrentDirectory();
			int indice=path.IndexOf("\\Global\\");
			string subpath="";
			
			if(indice!=-1) {
				subpath=path.Substring(0,indice+8);
			} else {
				subpath=path+"\\";
			}
			
			//Trace.WriteLine(subpath);
			
			String strAuxPath=subpath+"Code_Additional\\";
			String strAuxPathColumn="";
			
			if (!Directory.Exists(strAuxPath)) {
                Directory.CreateDirectory(strAuxPath);
            }
			
			strAuxPath+=tableSchema.Database.Name+"\\";
			
			if (!Directory.Exists(strAuxPath)) {
                Directory.CreateDirectory(strAuxPath);
            }
			
			strAuxPath+=tableSchema.Name+"\\";
			
			if (!Directory.Exists(strAuxPath)) {
                Directory.CreateDirectory(strAuxPath);
            }
			
			strAuxPath+="Columns\\";
			
			if (!Directory.Exists(strAuxPath)) {
                Directory.CreateDirectory(strAuxPath);
            }
			
			foreach(ColumnSchema columnSchema in tableSchema.Columns) {
				strAuxPathColumn=strAuxPath+columnSchema.Name+"\\";
				//Trace.WriteLine(strAuxPathColumn);
				
				if (!Directory.Exists(strAuxPathColumn)) {
					//Trace.WriteLine(strAuxPathColumn);
					try {
						Directory.CreateDirectory(strAuxPathColumn);
					}catch(Exception e) {
						
					}
				}
			}
			
			//Trace.WriteLine(path+"--"+indice.ToString());
			//Trace.WriteLine(subpath);			
		}
		
		public string GetExtraCodeC(TableSchema tableSchema,String strTemplate,String strBloqueCodigo) {
			string path = Directory.GetCurrentDirectory();
			int indice=path.IndexOf("\\Global\\");
			string subpath="";
			string strExtraCode="";
			
			if(indice!=-1) {
				subpath=path.Substring(0,indice+8);
			} else {
				subpath=path+"\\";
			}
			
			String strAuxPath=subpath+"Code_Additional/";
			String strAuxPathFile="";
			
			strAuxPath+=tableSchema.Database.Name+"\\";
			strAuxPath+=tableSchema.Name+"\\";
			//strAuxPath+="Columns\\";
			//strAuxPath+=columnSchema.Name+"\\";						
			
			String strExtraCodeProperty=GetConExtraCodeTableFromPropertiesC(tableSchema);
			
			if(!strExtraCodeProperty.Equals(string.Empty)) {			
				if(ExisteExtraCode(strExtraCodeProperty,strBloqueCodigo)) {
					//Trace.WriteLine(strExtraCodeProperty);
			
					if (Directory.Exists(strAuxPath)) {
						strAuxPathFile=strAuxPath+strTemplate+"\\"+strBloqueCodigo+".txt";
						//Trace.WriteLine(strAuxPathFile);
						if(File.Exists(strAuxPathFile)) {
							strExtraCode=System.IO.File.ReadAllText(strAuxPathFile);
						}
					}	
				}
			}
			
			return strExtraCode;
		}
		
		public string GetExtraCodeC(ColumnSchema columnSchema,String strTemplate,String strBloqueCodigo) {
			string path = Directory.GetCurrentDirectory();
			int indice=path.IndexOf("\\Global\\");
			string subpath="";
			string strExtraCode="";
			
			if(indice!=-1) {
				subpath=path.Substring(0,indice+8);
			} else {
				subpath=path+"\\";
			}

			String strAuxPath=subpath+"Code_Additional/";
			String strAuxPathFile="";
			
			strAuxPath+=columnSchema.Table.Database.Name+"\\";
			strAuxPath+=columnSchema.Table.Name+"\\";
			strAuxPath+="Columns\\";
			strAuxPath+=columnSchema.Name+"\\";						
			
			String strExtraCodeProperty=GetConExtraCodeColumnFromPropertiesC(columnSchema);
			
			
			if(!strExtraCodeProperty.Equals(string.Empty)) {
				
				if(ExisteExtraCode(strExtraCodeProperty,strBloqueCodigo)) {
					//Trace.WriteLine(strExtraCodeProperty);
			
					if (Directory.Exists(strAuxPath)) {
						strAuxPathFile=strAuxPath+strTemplate+"\\"+strBloqueCodigo+".txt";
						//Trace.WriteLine(strAuxPathFile);
						if(File.Exists(strAuxPathFile)) {
							strExtraCode=System.IO.File.ReadAllText(strAuxPathFile);
						}
					}	
				}
			}
			
			return strExtraCode;
		}
		
		public bool ExisteExtraCode(String strExtraCodeProperty,String strBloqueCodigo) {
			bool existe=false;
			
			String[] arrExtraCodes=strExtraCodeProperty.Split(',');
			
			foreach(string strExtraCode in arrExtraCodes) {
				if(strExtraCode.Equals(strBloqueCodigo)) {
					 existe=true;
					break;
				}
			}
			
			return existe;
		}
		#endregion
		
		#region Codesmith
		
		public void CreateXmlAttributesExtendedPropertyMemberColumnSchemaC(XmlDocument xmlDocument,XmlNode xmlSchemaNode,MemberColumnSchema memberColumnSchema) {
			//EXTENDED PROPERTY
			foreach(ExtendedProperty extendedProperty in memberColumnSchema.ExtendedProperties) {
				//Trace.WriteLine("heeeeeeeeeeeeeeeeeeee");
				//Trace.WriteLine(extendedProperty.Value.ToString());
				//strReturn+="\r\nPROPERTY="+extendedProperty.Name+"-"+extendedProperty.Value;
				//if(PermiteExtendedProperty(extendedProperty)) {
					XmlNode xmlNodeAttributa = xmlDocument.CreateElement("ExtendedProperty");
					CreateXmlAttributesExtendedAttributeC(xmlDocument,xmlNodeAttributa,extendedProperty);
					xmlNodeAttributa.InnerText = extendedProperty.Name;				
					xmlSchemaNode.AppendChild(xmlNodeAttributa);
				//}
			}
			//EXTENDED PROPERTY
			
			//EXTENDED PROPERTY
			foreach(ExtendedProperty extendedProperty in memberColumnSchema.ColumnExtendedProperties) {
				//Trace.WriteLine("00000000heeeeeeeeeeeeeeeeeeee");
				//strReturn+="\r\nPROPERTY="+extendedProperty.Name+"-"+extendedProperty.Value;
				//if(PermiteExtendedProperty(extendedProperty)) {
					XmlNode xmlNodeAttributa = xmlDocument.CreateElement("ColumnExtendedProperty");
					CreateXmlAttributesExtendedAttributeC(xmlDocument,xmlNodeAttributa,extendedProperty);
					xmlNodeAttributa.InnerText = extendedProperty.Name;
					xmlSchemaNode.AppendChild(xmlNodeAttributa);
				//}
			}
			//EXTENDED PROPERTY
		}
		
		public void CreateXmlAttributesMemberColumnSchemaC(XmlDocument xmlDocument,XmlNode xmlSchemaNode,MemberColumnSchema memberColumnSchema) {
			CreateXmlAttributeC("Name",memberColumnSchema.Column.Name,xmlDocument,xmlSchemaNode);												
			CreateXmlAttributeC("DeepLoad",memberColumnSchema.DeepLoad.ToString(),xmlDocument,xmlSchemaNode);
			CreateXmlAttributeC("Description",memberColumnSchema.Description,xmlDocument,xmlSchemaNode);	
			CreateXmlAttributeC("AllowDBNull",memberColumnSchema.AllowDBNull.ToString(),xmlDocument,xmlSchemaNode);
			CreateXmlAttributeC("Table",memberColumnSchema.Table.Name,xmlDocument,xmlSchemaNode);			
			CreateXmlAttributeC("Column",memberColumnSchema.Column.Name,xmlDocument,xmlSchemaNode);
			
			CreateXmlAttributeC("DataType",memberColumnSchema.DataType.ToString(),xmlDocument,xmlSchemaNode);
			CreateXmlAttributeC("IsForeignKeyMember",memberColumnSchema.IsForeignKeyMember.ToString(),xmlDocument,xmlSchemaNode);
			CreateXmlAttributeC("IsPrimaryKeyMember",memberColumnSchema.IsPrimaryKeyMember.ToString(),xmlDocument,xmlSchemaNode);
			CreateXmlAttributeC("IsUnique",memberColumnSchema.IsUnique.ToString(),xmlDocument,xmlSchemaNode);
			CreateXmlAttributeC("NativeType",memberColumnSchema.NativeType,xmlDocument,xmlSchemaNode);
			
			CreateXmlAttributeC("Precision",memberColumnSchema.Precision.ToString(),xmlDocument,xmlSchemaNode);
			CreateXmlAttributeC("Scale",memberColumnSchema.Scale.ToString(),xmlDocument,xmlSchemaNode);
			CreateXmlAttributeC("Size",memberColumnSchema.Size.ToString(),xmlDocument,xmlSchemaNode);
			CreateXmlAttributeC("SystemType",memberColumnSchema.SystemType.ToString(),xmlDocument,xmlSchemaNode);
			
			/*
			//EXTENDED PROPERTY
			foreach(ExtendedProperty extendedProperty in memberColumnSchema.ExtendedProperties) {
				//Trace.WriteLine("heeeeeeeeeeeeeeeeeeee");
				//Trace.WriteLine(extendedProperty.Value.ToString());
				//strReturn+="\r\nPROPERTY="+extendedProperty.Name+"-"+extendedProperty.Value;
				XmlNode xmlNodeAttributa = xmlDocument.CreateElement("ExtendedProperty");
				CreateXmlAttributesExtendedAttributeC(xmlDocument,xmlNodeAttributa,extendedProperty);
				xmlNodeAttributa.InnerText = extendedProperty.Name;				
				xmlSchemaNode.AppendChild(xmlNodeAttributa);
			}
			//EXTENDED PROPERTY
			
			//EXTENDED PROPERTY
			foreach(ExtendedProperty extendedProperty in memberColumnSchema.ColumnExtendedProperties) {
				//Trace.WriteLine("00000000heeeeeeeeeeeeeeeeeeee");
				//strReturn+="\r\nPROPERTY="+extendedProperty.Name+"-"+extendedProperty.Value;
				XmlNode xmlNodeAttributa = xmlDocument.CreateElement("ColumnExtendedProperty");
				CreateXmlAttributesExtendedAttributeC(xmlDocument,xmlNodeAttributa,extendedProperty);
				xmlNodeAttributa.InnerText = extendedProperty.Name;
				xmlSchemaNode.AppendChild(xmlNodeAttributa);
			}
			//EXTENDED PROPERTY
			*/
		}
		
		public void CreateXmlAttributesExtendedAttributeC(XmlDocument xmlDocument,XmlNode xmlSchemaNode,ExtendedProperty extendedProperty) {		
			CreateXmlAttributeC("Name",extendedProperty.Name,xmlDocument,xmlSchemaNode);								
			CreateXmlAttributeC("Value",extendedProperty.Value.ToString(),xmlDocument,xmlSchemaNode);												
			CreateXmlAttributeC("DataType",extendedProperty.DataType.ToString(),xmlDocument,xmlSchemaNode);								
			
		}
		
		public void CreateXmlAttributeC(String strName,String strValue,XmlDocument xmlDocument,XmlNode xmlTableKeySchemaNode) {
			XmlAttribute xmlAttribute = xmlDocument.CreateAttribute(strName);
			xmlAttribute.Value = strValue;
			xmlTableKeySchemaNode.Attributes.Append(xmlAttribute);
		}
		
		public void CreateXmlTableKeySchemaC(TableSchema tableSchema,ColumnSchema columnSchema,XmlDocument xmlDocument,XmlNode xmlRootNode,String strRootName){
			XmlNode xmlTableKeySchemaNode = xmlDocument.CreateElement(strRootName);
					CreateXmlAttributeC("Name",columnSchema.Name,xmlDocument,xmlTableKeySchemaNode);
					CreateXmlAttributeC("Table",columnSchema.Table.Name,xmlDocument,xmlTableKeySchemaNode);
				xmlTableKeySchemaNode.InnerText = columnSchema.Name;		
			
			xmlRootNode.AppendChild(xmlTableKeySchemaNode);	
		}
		
		public void CreateXmlTableKeySchemaC(TableSchema tableSchema,TableKeySchema tableKeySchema,XmlDocument xmlDocument,XmlNode xmlRootNode,String strRootName){
			XmlNode xmlTableKeySchemaNode = xmlDocument.CreateElement(strRootName);
					CreateXmlAttributeC("Name",tableKeySchema.Name,xmlDocument,xmlTableKeySchemaNode);
					CreateXmlAttributeC("DeepLoad",tableKeySchema.DeepLoad.ToString(),xmlDocument,xmlTableKeySchemaNode);
					CreateXmlAttributeC("Description",tableKeySchema.Description,xmlDocument,xmlTableKeySchemaNode);
					CreateXmlAttributeC("PrimaryKeyTable",tableKeySchema.PrimaryKeyTable.Name,xmlDocument,xmlTableKeySchemaNode);
					CreateXmlAttributeC("ForeignKeyTable",tableKeySchema.ForeignKeyTable.Name,xmlDocument,xmlTableKeySchemaNode);						
				xmlTableKeySchemaNode.InnerText = tableKeySchema.Name;
																		
						//COLUMNAS PK
						foreach(MemberColumnSchema memberColumnSchema in tableKeySchema.PrimaryKeyMemberColumns) {
							//Trace.WriteLine("here");
							XmlNode xmlPrimaryKeyMemberColumnsNode = xmlDocument.CreateElement("PrimaryKeyMemberColumn");															
								CreateXmlAttributesMemberColumnSchemaC(xmlDocument,xmlPrimaryKeyMemberColumnsNode,memberColumnSchema);								
							xmlPrimaryKeyMemberColumnsNode.InnerText = memberColumnSchema.Column.Name;							
							xmlTableKeySchemaNode.AppendChild(xmlPrimaryKeyMemberColumnsNode);
							
								//DESCRIPCIONES POR COLUMNAS
								CreateXmlAttributesExtendedPropertyMemberColumnSchemaC(xmlDocument,xmlPrimaryKeyMemberColumnsNode,memberColumnSchema);								
						}
				
						//COLUMNAS FK
						foreach(MemberColumnSchema memberColumnSchema in tableKeySchema.ForeignKeyMemberColumns) {
							//Trace.WriteLine("here");
							XmlNode xmlPrimaryKeyMemberColumnsNode = xmlDocument.CreateElement("ForeignKeyMemberColumn");															
								CreateXmlAttributesMemberColumnSchemaC(xmlDocument,xmlPrimaryKeyMemberColumnsNode,memberColumnSchema);
							xmlPrimaryKeyMemberColumnsNode.InnerText = memberColumnSchema.Column.Name;							
							xmlTableKeySchemaNode.AppendChild(xmlPrimaryKeyMemberColumnsNode);
							
								//DESCRIPCIONES POR COLUMNAS
								CreateXmlAttributesExtendedPropertyMemberColumnSchemaC(xmlDocument, xmlPrimaryKeyMemberColumnsNode,memberColumnSchema);							
						}
					
							//EXTENDED PROPERTIES
						 
							foreach(ExtendedProperty extendedProperty in tableKeySchema.ExtendedProperties) {
								//strReturn+="\r\nPROPERTY="+extendedProperty.Name+"-"+extendedProperty.Value;
								XmlNode xmlPrimaryKeyMemberColumnsNode = xmlDocument.CreateElement("ExtendedProperty");								
									CreateXmlAttributesExtendedAttributeC(xmlDocument,xmlPrimaryKeyMemberColumnsNode,extendedProperty);
								xmlPrimaryKeyMemberColumnsNode.InnerText = extendedProperty.Name;							
								xmlTableKeySchemaNode.AppendChild(xmlPrimaryKeyMemberColumnsNode);
							}
						
						
						//PRIMARY KEY
						XmlNode xmlPrimaryKey = xmlDocument.CreateElement("PrimaryKey");						
							CreateXmlAttributeC("Name",tableKeySchema.PrimaryKey.Name,xmlDocument,xmlPrimaryKey);							
							CreateXmlAttributeC("DeepLoad",tableKeySchema.PrimaryKey.DeepLoad.ToString(),xmlDocument,xmlPrimaryKey);							
							CreateXmlAttributeC("Table",tableKeySchema.PrimaryKey.Table.Name,xmlDocument,xmlPrimaryKey);							
							CreateXmlAttributeC("Description",tableKeySchema.PrimaryKey.Description,xmlDocument,xmlPrimaryKey);						
						xmlPrimaryKey.InnerText = tableKeySchema.PrimaryKey.Name;
						
								//COLUMNAS PRIMARY KEY OF PRIMARY KEY
								foreach(MemberColumnSchema memberColumnSchema in tableKeySchema.PrimaryKey.MemberColumns) {
									//Trace.WriteLine("here");
									XmlNode xmlPrimaryKeyMemberColumnsNode = xmlDocument.CreateElement("MemberColumn");									
										CreateXmlAttributesMemberColumnSchemaC(xmlDocument,xmlPrimaryKeyMemberColumnsNode,memberColumnSchema);
									xmlPrimaryKeyMemberColumnsNode.InnerText = memberColumnSchema.Column.Name;									
									xmlPrimaryKey.AppendChild(xmlPrimaryKeyMemberColumnsNode);
								}
								//COLUMNAS PRIMARY KEY OF PRIMARY KEY
								
								//EXTENDED PROPERTY OF PRIMARY KEY
								
									foreach(ExtendedProperty extendedProperty in tableKeySchema.PrimaryKey.ExtendedProperties) {
										//strReturn+="\r\nPROPERTY="+extendedProperty.Name+"-"+extendedProperty.Value;
										XmlNode xmlPrimaryKeyMemberColumnsNode = xmlDocument.CreateElement("ExtendedProperty");
											CreateXmlAttributesExtendedAttributeC(xmlDocument,xmlPrimaryKeyMemberColumnsNode,extendedProperty);
										xmlPrimaryKeyMemberColumnsNode.InnerText = extendedProperty.Name;
										xmlPrimaryKey.AppendChild(xmlPrimaryKeyMemberColumnsNode);
									}								
								//EXTENDED PROPERTY OF PRIMARY KEY
							
						xmlTableKeySchemaNode.AppendChild(xmlPrimaryKey);
						//PRIMARY KEY
					
				xmlRootNode.AppendChild(xmlTableKeySchemaNode);	
		}
		
		public void CreateXmlTableSchemaC(String strPathBase,TableSchema tableSchema) {
			//AQUI ESTA BIEN tableSchema.ForeignKeys ,YA QUE SE VA CREAR ARCHIVOS A PARTIR DE
			
			//TableKeySchemaCollection tableKeySchemaCollection= tableSchema.ForeignKeys;
						
			XmlDocument xmlDocument = new XmlDocument();
		
			XmlNode xmlRootNode0 = xmlDocument.CreateElement(tableSchema.Owner);
			xmlDocument.AppendChild(xmlRootNode0);
		
			XmlNode xmlRootNode = xmlDocument.CreateElement(tableSchema.Name);
			xmlRootNode0.AppendChild(xmlRootNode);
			
			XmlAttribute xmlAttribute =null;
			
			foreach(TableKeySchema tableKeySchema in tableSchema.ForeignKeys) {
				CreateXmlTableKeySchemaC(tableSchema,tableKeySchema,xmlDocument,xmlRootNode,"ForeignKey");			
			}
			
			foreach(TableKeySchema tableKeySchema in tableSchema.PrimaryKeys) {
				CreateXmlTableKeySchemaC(tableSchema,tableKeySchema,xmlDocument,xmlRootNode,"PrimaryKey");
			}
		
			foreach(ColumnSchema columnSchema in tableSchema.ForeignKeyColumns) {
				CreateXmlTableKeySchemaC(tableSchema,columnSchema,xmlDocument,xmlRootNode,"ForeignKeyColumn");
			}
			
			String strPathDir=strPathBase+tableSchema.Owner.ToLower()+"/xml_codesmith/"+tableSchema.Name.ToLower();
			
			if (!Directory.Exists(strPathDir)) Directory.CreateDirectory(strPathDir);
			
			xmlDocument.Save(strPathDir+"/"+tableSchema.Name.ToLower()+".xml");
		}
		
		public static TableKeySchemaCollection ReadXmlTableSchemaC(String strPathBase,TableSchema tableSchema) {
			TableKeySchemaCollection tableKeySchemaCollection= new TableKeySchemaCollection();
			
			//if(!dictionaryForeignKeysCollection.ContainsKey(tableSchema.Owner+"_"+tableSchema.Name)) {			
				TableKeySchema tableKeySchema=null;
				String strNameTableKeySchema="";
				bool blnDeepLoadTableKeySchema=false;
				String strDescriptionTableKeySchema="";
				
				TableSchema tableSchemaPrimaryKey=tableSchema;	
				MemberColumnSchemaCollection memberColumnSchemaCollectionPK=new MemberColumnSchemaCollection();
				List<String> listMemberColumnSchemaPK = new List<String>();
				MemberColumnSchema memberColumnSchemaPK=null;
				ColumnSchema columnSchemaPK=null;
				
				TableSchema tableSchemaForeignKey=tableSchema;
				MemberColumnSchemaCollection memberColumnSchemaCollectionFK=new MemberColumnSchemaCollection();	
				List<String> listMemberColumnSchemaFK = new List<String>();
				MemberColumnSchema memberColumnSchemaFK=null;
				ColumnSchema columnSchemaFK=null;
				
				ExtendedProperty[] extendedProperties=null;
				ExtendedProperty extendedProperty=null;
				List<ExtendedProperty> listExtendedProperties = new List<ExtendedProperty>();
				ExtendedPropertyCollection extendedPropertyCollection=new ExtendedPropertyCollection();
				
				String strExtendedPropertyName="";
				String strExtendedPropertyValue="";
				String strExtendedPropertyDataType="";
				
				PrimaryKeySchema primaryKey=null;
				
				String strNameProperty="";
				Object objValueProperty="";
				
				bool ConObjetos=true;
				
				String strPathDir=strPathBase+tableSchema.Owner.ToLower()+"/xml_codesmith/"+tableSchema.Name.ToLower();
				String strPathFile=strPathDir+"/"+tableSchema.Name.ToLower()+".xml";
				
				XmlTextReader reader = new XmlTextReader(strPathFile);
			
				XmlDocument xmlDocument = new XmlDocument();
				
				//MODULO-SEGURIDAD
				XmlNode xmlNodeDocument = xmlDocument.ReadNode(reader);
				
				String strSchema="";
				String strTabla="";
				String strTableKeySchema="";
				String strLevel1="";
				String strLevel2="";
				String strLevel3="";
				
				//TABLAS-SISTEMA
				foreach (XmlNode xmlTablesNode in xmlNodeDocument.ChildNodes) {
					if(IS_DEBUG3) {
						Trace.WriteLine(xmlTablesNode.Name+"="+xmlTablesNode.Value);
					}
						
					//TableKeySchema
					foreach (XmlNode xmlNodeTableKeySchema in xmlTablesNode.ChildNodes) {			
						strTableKeySchema="\t"+xmlNodeTableKeySchema.Name+"="+xmlNodeTableKeySchema.Value;
									
						//(Name,Pk,Fk)
						if(xmlNodeTableKeySchema.Attributes!=null) {
							strTableKeySchema+="-->(";
							foreach(XmlAttribute xmlAttribute in xmlNodeTableKeySchema.Attributes){
								strTableKeySchema+=","+xmlAttribute.Name+"->"+xmlAttribute.Value;
								
								//Trace.WriteLine("Attribute -> "+xmlAttribute.Name);					
								if(ConObjetos) {
									if(xmlAttribute.Name.Equals("Name")) {
										strNameTableKeySchema=xmlAttribute.Value;
										
									} else if (xmlAttribute.Name.Equals("DeepLoad")) {
										blnDeepLoadTableKeySchema=Boolean.Parse(xmlAttribute.Value);
									
									} else if (xmlAttribute.Name.Equals("Description")) {
										strDescriptionTableKeySchema=xmlAttribute.Value;
										
									} else if (xmlAttribute.Name.Equals("PrimaryKeyTable")) {							
										tableSchemaPrimaryKey=GetTablaFromNombreC(xmlAttribute.Value,tableSchema,true);
										//Trace.WriteLine("aaaaaaaaaa-"+xmlAttribute.Value+"="+tableSchemaPrimaryKey.Name);
										
									} else if(xmlAttribute.Name.Equals("ForeignKeyTable")) {
										tableSchemaForeignKey=GetTablaFromNombreC(xmlAttribute.Value,tableSchema,true);
										//Trace.WriteLine("aaaaaaaaaa-"+xmlAttribute.Value+"="+tableSchemaForeignKey.Name);
									}
								}
							}
															
							strTableKeySchema+=")";								
						}
						
						if(IS_DEBUG3) {
							Trace.WriteLine(strTableKeySchema);
						}
						
						//Trace.WriteLine(tableSchemaPrimaryKey.Name);
						//Trace.WriteLine(tableSchemaForeignKey.Name);
							
						
						//PK Column, FK Column,PKey,Extende Property
						foreach (XmlNode xmlNodeChildLevel1 in xmlNodeTableKeySchema.ChildNodes) {
							strLevel1="\t\t"+xmlNodeChildLevel1.Name+"="+xmlNodeChildLevel1.Value;
							
															
							//Name,Value
							if(xmlNodeChildLevel1.Attributes!=null) {
								strLevel1+="-->(";
								foreach(XmlAttribute xmlAttribute in xmlNodeChildLevel1.Attributes){
									strLevel1+=","+xmlAttribute.Name+"->"+xmlAttribute.Value;
									
									if(xmlNodeChildLevel1.Name.Equals("PrimaryKeyMemberColumn")) {	
										/*
										columnSchemaPK=GetColumnaFromNombreC(xmlAttribute.Value,tableSchemaPrimaryKey);							
										memberColumnSchemaPK=new MemberColumnSchema(columnSchemaPK);							
										memberColumnSchemaCollectionPK.Add(memberColumnSchemaPK);
										*/
										
										if(xmlAttribute.Name.Equals("Name")) {
											listMemberColumnSchemaPK.Add(xmlAttribute.Value);
										}
										
									} else if(xmlNodeChildLevel1.Name.Equals("ForeignKeyMemberColumn")) {						
										/*
										columnSchemaFK=GetColumnaFromNombreC(xmlAttribute.Value,tableSchemaForeignKey);							
										memberColumnSchemaFK=new MemberColumnSchema(columnSchemaFK);														
										memberColumnSchemaCollectionFK.Add(memberColumnSchemaFK);
										*/
										
										if(xmlAttribute.Name.Equals("Name")) {
											listMemberColumnSchemaFK.Add(xmlAttribute.Value);
										}
										
									} else if(xmlNodeChildLevel1.Name.Equals("ExtendedProperty")) {
										if(xmlAttribute.Name.Equals("Name")) {
											strExtendedPropertyName=xmlAttribute.Value;
										
										} else if(xmlAttribute.Name.Equals("Value")) {
											strExtendedPropertyValue=xmlAttribute.Value;
											
										} else if(xmlAttribute.Name.Equals("DataType")) {
											strExtendedPropertyDataType=xmlAttribute.Value;
										}							
									}
								}					
								strLevel1+=")";
								
								if(xmlNodeChildLevel1.Name.Equals("ExtendedProperty")) {
									extendedProperty=new ExtendedProperty();
										
									DbType dbType=GetTipoDbTypeC(strExtendedPropertyDataType);
									
									extendedProperty=new ExtendedProperty(strExtendedPropertyName,
																		strExtendedPropertyValue,dbType);
																			
									extendedPropertyCollection.Add(extendedProperty);
										
									listExtendedProperties.Add(extendedProperty);
								}
							}
							
							if(IS_DEBUG3) {
								Trace.WriteLine(strLevel1);
							}
							
							//PK Column, PK Extend(AUN NO)
							foreach (XmlNode xmlNodeChildLevel2 in xmlNodeChildLevel1.ChildNodes) {
								strLevel2="\t\t\t"+xmlNodeChildLevel2.Name+"="+xmlNodeChildLevel2.Value;
							
								//Name,Value
								if(xmlNodeChildLevel2.Attributes!=null) {
									strLevel2+="-->(";
									foreach(XmlAttribute xmlAttribute in xmlNodeChildLevel2.Attributes){
										strLevel2+=","+xmlAttribute.Name+"->"+xmlAttribute.Value;
									}
									strLevel2+=")";
								}
								
								if(IS_DEBUG3) {
									Trace.WriteLine(strLevel2);
								}
													
							}
						}									
						
						
						if(ConObjetos) {
							extendedProperties=listExtendedProperties.ToArray();
							
							//Trace.WriteLine(strNameTableKeySchema);
							//Trace.WriteLine("11111111 "+tableSchemaPrimaryKey.Name);
							//Trace.WriteLine("22222222 "+tableSchemaForeignKey.Name);
							
							
							/*
							tableKeySchema=new TableKeySchema(strNameTableKeySchema,
																tableSchemaForeignKey,tableSchemaPrimaryKey,
																extendedProperties);
							*/								
											
							tableKeySchema=new TableKeySchema(tableSchema.Database,strNameTableKeySchema,
															listMemberColumnSchemaFK.ToArray(),tableSchemaForeignKey.Owner,tableSchemaForeignKey.Name,
															listMemberColumnSchemaPK.ToArray(),tableSchemaPrimaryKey.Owner,tableSchemaPrimaryKey.Name,
															extendedProperties);
								
							tableKeySchema.DeepLoad=blnDeepLoadTableKeySchema;
							tableKeySchema.Description=strDescriptionTableKeySchema;
							
							//SOLO_LECTURA
							//tableKeySchema.PrimaryKey=primaryKey;
							//tableKeySchema.PrimaryKeyMemberColumns=memberColumnSchemaCollectionPK;
							//tableKeySchema.ForeignKeyMemberColumns=memberColumnSchemaCollectionFK;
							//SOLO_LECTURA
							
							tableKeySchemaCollection.Add(tableKeySchema);
				
						}
					}				
				}
			//} else {
				//tableKeySchemaCollection=dictionaryForeignKeysCollection[tableSchema.Owner+"_"+tableSchema.Name];
			//}
			
			return tableKeySchemaCollection;
		}
		
			
		public static void ReadXmlAttributePrimaryKeyMeC(TableSchema tableSchema,XmlAttribute xmlAttribute,PrimaryKeySchemaMe primaryKeySchemaMe) {
			TableSchema table=tableSchema;
			
			if(xmlAttribute.Name.Equals("Name")) {
				primaryKeySchemaMe.Name=xmlAttribute.Value;
										
			} else if(xmlAttribute.Name.Equals("DeepLoad")) {
				primaryKeySchemaMe.DeepLoad=Boolean.Parse(xmlAttribute.Value);
											
			} else if(xmlAttribute.Name.Equals("Description")) {
				primaryKeySchemaMe.Description=xmlAttribute.Value;
				
			} else if(xmlAttribute.Name.Equals("Table")) {
				table=GetTablaFromNombreC(xmlAttribute.Value,tableSchema,true);
				primaryKeySchemaMe.Table=table;
			}
		}
		
		public static void ReadXmlAttributeExtendedPropertyMeC(TableSchema tableSchema,XmlAttribute xmlAttribute,ExtendedPropertyMe extendedPropertyMe) {
			if(xmlAttribute.Name.Equals("Name")) {
				extendedPropertyMe.Name=xmlAttribute.Value;
										
			} else if(xmlAttribute.Name.Equals("Value")) {
				extendedPropertyMe.Value=xmlAttribute.Value;
											
			} else if(xmlAttribute.Name.Equals("DataType")) {
				DbType dbType=GetTipoDbTypeC(xmlAttribute.Value);
				
				extendedPropertyMe.DbType=dbType;
			}
		}
		
		public static void ReadXmlAttributeTableKeySchemaMeC(TableSchema tableSchema,XmlAttribute xmlAttribute,TableKeySchemaMe tableKeySchemaMe) {
			TableSchema tableSchemaPrimaryKey=tableSchema;	
			TableSchema tableSchemaForeignKey=tableSchema;
					
			tableKeySchemaMe.Database=tableSchema.Database;
			
			if(xmlAttribute.Name.Equals("Name")) {
				tableKeySchemaMe.Name=xmlAttribute.Value;
				
			} else if (xmlAttribute.Name.Equals("DeepLoad")) {
				tableKeySchemaMe.DeepLoad=Boolean.Parse(xmlAttribute.Value);
			
			} else if (xmlAttribute.Name.Equals("Description")) {
				tableKeySchemaMe.Description=xmlAttribute.Value;
				
			} else if (xmlAttribute.Name.Equals("PrimaryKeyTable")) {	
				tableSchemaPrimaryKey=GetTablaFromNombreC(xmlAttribute.Value,tableSchema,true);
				tableKeySchemaMe.PrimaryKeyTable=tableSchemaPrimaryKey;
				//Trace.WriteLine("aaaaaaaaaa-"+xmlAttribute.Value+"="+tableSchemaPrimaryKey.Name);
				
			} else if(xmlAttribute.Name.Equals("ForeignKeyTable")) {
				tableSchemaForeignKey=GetTablaFromNombreC(xmlAttribute.Value,tableSchema,true);
				tableKeySchemaMe.ForeignKeyTable=tableSchemaForeignKey;
				//Trace.WriteLine("aaaaaaaaaa-"+xmlAttribute.Value+"="+tableSchemaForeignKey.Name);
			}
		}
		
		public static void ReadXmlAttributeMemberColumnSchemaMeC(TableSchema tableSchema,XmlAttribute xmlAttribute,MemberColumnSchemaMe memberColumnSchemaMe) {
			TableSchema table=tableSchema;
			
			if(xmlAttribute.Name.Equals("Name")) {
				memberColumnSchemaMe.Name=xmlAttribute.Value;
			
			} else if (xmlAttribute.Name.Equals("DeepLoad")) {
				memberColumnSchemaMe.DeepLoad=Boolean.Parse(xmlAttribute.Value);			
			
			} else if (xmlAttribute.Name.Equals("Description")) {
				memberColumnSchemaMe.Description=xmlAttribute.Value;			
			
			} else if (xmlAttribute.Name.Equals("AllowDBNull")) {
				memberColumnSchemaMe.AllowDBNull=Boolean.Parse(xmlAttribute.Value);			
			
			} else if (xmlAttribute.Name.Equals("Table")) {
				table=GetTablaFromNombreC(xmlAttribute.Value,tableSchema,true);
				memberColumnSchemaMe.Table=table;
			
			} else if (xmlAttribute.Name.Equals("Column")) {
				memberColumnSchemaMe.Column=GetColumnaFromNombreC(xmlAttribute.Value,memberColumnSchemaMe.Table,true);			
				//Trace.WriteLine(memberColumnSchemaMe.Column.Name);
			
			} else if (xmlAttribute.Name.Equals("IsForeignKeyMember")) {
				memberColumnSchemaMe.IsForeignKeyMember=Boolean.Parse(xmlAttribute.Value);			
			
			} else if (xmlAttribute.Name.Equals("IsPrimaryKeyMember")) {
				memberColumnSchemaMe.IsPrimaryKeyMember=Boolean.Parse(xmlAttribute.Value);			
			
			} else if (xmlAttribute.Name.Equals("IsUnique")) {
				memberColumnSchemaMe.IsUnique=Boolean.Parse(xmlAttribute.Value);			
			
			} else if (xmlAttribute.Name.Equals("Scale")) {
				memberColumnSchemaMe.Scale=Int32.Parse(xmlAttribute.Value);			
			
			} else if (xmlAttribute.Name.Equals("Size")) {
				memberColumnSchemaMe.Size=Int32.Parse(xmlAttribute.Value);			
			
			} else if (xmlAttribute.Name.Equals("Precision")) {
				memberColumnSchemaMe.Precision=Byte.Parse(xmlAttribute.Value);			
			
			} else if (xmlAttribute.Name.Equals("DataType")) {
				memberColumnSchemaMe.DataType=GetDataType(xmlAttribute.Value);//Int64			
			
			} else if (xmlAttribute.Name.Equals("NativeType")) {
				memberColumnSchemaMe.NativeType=xmlAttribute.Value;//bigint			
			
			} else if (xmlAttribute.Name.Equals("SystemType")) {
				memberColumnSchemaMe.SystemType=GetSystemType(xmlAttribute.Value);//System.Int64			
			
			}  
		}
		
		public static Type GetSystemType(String strType) {
			Type strReturn=Type.GetType("System.Int64");
			
			if(strType.Equals("System.Int64")) {
				strReturn=Type.GetType("System.Int64");
			}
			
			return strReturn;
		}
		
		public static DbType GetDataType(String strType) {
			DbType strReturn=DbType.Int64;
			
			if(strType.Equals("Int64")) {
				strReturn=DbType.Int64;
			}
			
			return strReturn;
		}
		
		public static TableSchemaMe/*TableKeySchemaCollectionMe*/ ReadXmlTableSchemaMeC(String strPathBase,TableSchema tableSchema) {
			TableKeySchemaCollectionMe tableKeySchemaCollectionMe= new TableKeySchemaCollectionMe();
			TableKeySchemaMe tableKeySchemaMe=null;
			TableSchemaMe tableSchemaMe=new TableSchemaMe();
				
			//if(!dictionaryTableSchemaMe.ContainsKey(tableSchema.Owner+"_"+tableSchema.Name)) {			
			
				MemberColumnSchemaMe memberColumnSchemaMePK=null;				
				MemberColumnSchemaMe memberColumnSchemaMeFK=null;
				
				ExtendedPropertyMe extendedPropertyMe=null;
									
				PrimaryKeySchemaMe primaryKeyMe=null;
				
				MemberColumnSchemaMe primaryKeyMemberColumn=new MemberColumnSchemaMe();;
				
				ColumnSchema foreignKeyColumn;
				
				bool ConObjetos=true;
				
				String strPathDir=strPathBase+tableSchema.Owner.ToLower()+"/xml_codesmith/"+tableSchema.Name.ToLower();
				String strPathFile=strPathDir+"/"+tableSchema.Name.ToLower()+".xml";
				
				XmlTextReader reader = new XmlTextReader(strPathFile);
			
				XmlDocument xmlDocument = new XmlDocument();
				
				//MODULO-SEGURIDAD
				XmlNode xmlNodeDocument = xmlDocument.ReadNode(reader);
				
				String strSchema="";
				String strTabla="";
				String strTableKeySchema="";
				String strLevel1="";
				String strLevel2="";
				String strLevel3="";
				String strTipo="";
				
				String strForeignKeyColumn="";
				
				//TABLAS-SISTEMA
				foreach (XmlNode xmlTablesNode in xmlNodeDocument.ChildNodes) {
					//RECIBE VACIOS
					if(xmlTablesNode.Name.Equals("")
						|| xmlTablesNode.Name.Equals("#whitespace")) {
						continue;	
					}
					
					//Trace.WriteLine(xmlTablesNode.Name);
					if(IS_DEBUG3) {
						Trace.WriteLine(xmlTablesNode.Name+"="+xmlTablesNode.Value);
					}
						
					//ForeignKey,PrimaryKey 
					foreach (XmlNode xmlNodeTableKeySchema in xmlTablesNode.ChildNodes) {
						//RECIBE VACIOS
						if(xmlNodeTableKeySchema.Name.Equals("")
							|| xmlNodeTableKeySchema.Name.Equals("#whitespace")) {
							continue;	
						}
						
						if(xmlNodeTableKeySchema.Name.Equals("PrimaryKey")) {
							strTipo="PRIMARYKEY";
							
						} else if(xmlNodeTableKeySchema.Name.Equals("ForeignKey")) {
							strTipo="FOREIGNKEY";
							
						} else if(xmlNodeTableKeySchema.Name.Equals("ForeignKeyColumn")) {	
							strTipo="FOREIGNKEYCOLUMN";
						} else {
							strTipo="NONE";
						}
						
						if(strTipo.Equals("PRIMARYKEY") || strTipo.Equals("FOREIGNKEY")) {
							tableKeySchemaMe=new TableKeySchemaMe();
							
							strTableKeySchema="\t"+xmlNodeTableKeySchema.Name+"="+xmlNodeTableKeySchema.Value;
										
							//(Name,Pk,Fk)
							if(xmlNodeTableKeySchema.Attributes!=null) {
								strTableKeySchema+="-->(";
								foreach(XmlAttribute xmlAttribute in xmlNodeTableKeySchema.Attributes){
									strTableKeySchema+=","+xmlAttribute.Name+"->"+xmlAttribute.Value;
									
									//Trace.WriteLine("Attribute -> "+xmlAttribute.Name);					
									if(ConObjetos) {
										ReadXmlAttributeTableKeySchemaMeC(tableSchema,xmlAttribute,tableKeySchemaMe);
									}
								}
																
								strTableKeySchema+=")";								
							}
							
							if(IS_DEBUG3) {
								Trace.WriteLine(strTableKeySchema);
							}
							
													
							//PK Column, FK Column,PKey,Extende Property
							foreach (XmlNode xmlNodeChildLevel1 in xmlNodeTableKeySchema.ChildNodes) {
								strLevel1="\t\t"+xmlNodeChildLevel1.Name+"="+xmlNodeChildLevel1.Value;
								
								if(xmlNodeChildLevel1.Name.Equals("ExtendedProperty")) {									
									extendedPropertyMe=new ExtendedPropertyMe();
									
								} else if(xmlNodeChildLevel1.Name.Equals("PrimaryKey")) {
									primaryKeyMe=new PrimaryKeySchemaMe();
								
								} else if(xmlNodeChildLevel1.Name.Equals("PrimaryKeyMemberColumn")) {
									memberColumnSchemaMePK=new MemberColumnSchemaMe();
								
								} else if(xmlNodeChildLevel1.Name.Equals("ForeignKeyMemberColumn")) {
									memberColumnSchemaMeFK=new MemberColumnSchemaMe();
								}
									
								//Name,Value
								if(xmlNodeChildLevel1.Attributes!=null) {								
									
									strLevel1+="-->(";
									foreach(XmlAttribute xmlAttribute in xmlNodeChildLevel1.Attributes){
										strLevel1+=","+xmlAttribute.Name+"->"+xmlAttribute.Value;
										
										if(xmlNodeChildLevel1.Name.Equals("PrimaryKeyMemberColumn")) {	
											ReadXmlAttributeMemberColumnSchemaMeC(tableSchema,xmlAttribute,memberColumnSchemaMePK);
											
										} else if(xmlNodeChildLevel1.Name.Equals("ForeignKeyMemberColumn")) {						
											ReadXmlAttributeMemberColumnSchemaMeC(tableSchema,xmlAttribute,memberColumnSchemaMeFK);
											
										} else if(xmlNodeChildLevel1.Name.Equals("ExtendedProperty")) {
											ReadXmlAttributeExtendedPropertyMeC(tableSchema,xmlAttribute,extendedPropertyMe);
										
										} else if(xmlNodeChildLevel1.Name.Equals("PrimaryKey")) {
											ReadXmlAttributePrimaryKeyMeC(tableSchema,xmlAttribute,primaryKeyMe);
										}
									}					
									strLevel1+=")";
																	
								}
								
								if(xmlNodeChildLevel1.Name.Equals("ExtendedProperty")) {									
									tableKeySchemaMe.ExtendedProperties.Add(extendedPropertyMe);									
								
								}  else if(xmlNodeChildLevel1.Name.Equals("PrimaryKey")) {
									tableKeySchemaMe.PrimaryKey=primaryKeyMe;
								
								} else if(xmlNodeChildLevel1.Name.Equals("PrimaryKeyMemberColumn")) {
									tableKeySchemaMe.PrimaryKeyMemberColumns.Add(memberColumnSchemaMePK);
								
								} else if(xmlNodeChildLevel1.Name.Equals("ForeignKeyMemberColumn")) {
									tableKeySchemaMe.ForeignKeyMemberColumns.Add(memberColumnSchemaMeFK);
								}
								
								if(IS_DEBUG3) {
									Trace.WriteLine(strLevel1);
								}
								
								//PK Column, PK Extend(AUN NO)
								foreach (XmlNode xmlNodeChildLevel2 in xmlNodeChildLevel1.ChildNodes) {
									strLevel2="\t\t\t"+xmlNodeChildLevel2.Name+"="+xmlNodeChildLevel2.Value;
									
									if(xmlNodeChildLevel2.Name.Equals("MemberColumn")) {
										primaryKeyMemberColumn=new MemberColumnSchemaMe();	
										
									}
								
									//Name,Value
									if(xmlNodeChildLevel2.Attributes!=null) {
										strLevel2+="-->(";
										foreach(XmlAttribute xmlAttribute in xmlNodeChildLevel2.Attributes){
											strLevel2+=","+xmlAttribute.Name+"->"+xmlAttribute.Value;
											
											if(xmlNodeChildLevel2.Name.Equals("MemberColumn")) {	
												ReadXmlAttributeMemberColumnSchemaMeC(tableSchema,xmlAttribute,primaryKeyMemberColumn);
											
											}
										}
										strLevel2+=")";
									}
									
									if(xmlNodeChildLevel2.Name.Equals("MemberColumn")) {									
										tableKeySchemaMe.PrimaryKey.MemberColumns.Add(primaryKeyMemberColumn);									
									
									}
									
									if(IS_DEBUG3) {
										Trace.WriteLine(strLevel2);
									}
														
								}
							}									
													
							if(ConObjetos) {
								if(strTipo.Equals("FOREIGNKEY")) {
									//tableKeySchemaCollectionMe.Add(tableKeySchemaMe);				
									tableSchemaMe.ForeignKeys.Add(tableKeySchemaMe);
								} else {
									//tableKeySchemaCollectionMe.Add(tableKeySchemaMe);
									tableSchemaMe.PrimaryKeys.Add(tableKeySchemaMe);
								}
							}
						} else if(xmlNodeTableKeySchema.Name.Equals("ForeignKeyColumn")){ //(Foreign Column)														
							strForeignKeyColumn="\t"+xmlNodeTableKeySchema.Name+"="+xmlNodeTableKeySchema.Value;
								
							String strNombreColumnaFk="";
							String strNombreTablaFk="";
							TableSchema tableFk=null;
							
							//(Foreign Column)
							if(xmlNodeTableKeySchema.Attributes!=null) {
								strForeignKeyColumn+="-->(";
								foreach(XmlAttribute xmlAttribute in xmlNodeTableKeySchema.Attributes){
									strForeignKeyColumn+=","+xmlAttribute.Name+"->"+xmlAttribute.Value;
									
									//Trace.WriteLine("Attribute -> "+xmlAttribute.Name);					
									if(ConObjetos) {
										if(xmlAttribute.Name.Equals("Name")) {
											strNombreColumnaFk=xmlAttribute.Value;
										} else if(xmlAttribute.Name.Equals("Table")) {
											strNombreTablaFk=xmlAttribute.Value;
										}
									}
								}
																
								strForeignKeyColumn+=")";								
							}
							
							if(IS_DEBUG3) {
								Trace.WriteLine(strForeignKeyColumn);
							}
							
							if(tableSchema.Name.Equals(strNombreTablaFk)) {
								foreignKeyColumn=GetColumnaFromNombreC(strNombreColumnaFk,tableSchema,true);
							} else {
								tableFk=GetTablaFromNombreC(strNombreTablaFk,tableSchema,true);								
								foreignKeyColumn=GetColumnaFromNombreC(strNombreColumnaFk,tableFk,true);
							}	
							
							//Trace.WriteLine(tableSchema.Columns.Count);
							tableSchemaMe.ForeignKeyColumns.Add(foreignKeyColumn);
							//Trace.WriteLine(tableSchema.Columns.Count);
						}
					}				
				}
				
				//tableSchemaMe.ForeignKeys=tableKeySchemaCollectionMe;
			//} else {
				//tableKeySchemaCollectionMe=dictionaryTableSchemaMe[tableSchema.Owner+"_"+tableSchema.Name];
				//tableSchemaMe=dictionaryTableSchemaMe[tableSchema.Owner+"_"+tableSchema.Name];
			//}
			
			return tableSchemaMe;//tableKeySchemaCollectionMe;
		}
		#endregion
		
	public void InicializarVariablesTemplateGeneradorC(bool blnParamConPaqueteJavaGlobal,String strGlobalConPaqueteJavaGlobalImports,String strGlobalEmpresa,String strGlobalPackage) {
		GlobalConPaqueteJavaGlobal=blnParamConPaqueteJavaGlobal;
		GlobalEmpresa=strGlobalEmpresa;
		GlobalPackage=strGlobalPackage;
		GlobalConPaqueteJavaGlobalImports=strGlobalConPaqueteJavaGlobalImports;
	}
		
	public void InicializarVariablesEmpresaC(String NombreEmpresa,bool blnConFuncionesSqlNativasParam) {
	String strTipoEmpresa=NombreEmpresa;
	blnConFuncionesSqlNativas=blnConFuncionesSqlNativasParam;
	
	arrBusquedaPorTablaFK=new ArrayList();
	
	if(strTipoEmpresa.Equals("ME")) {
		//Trace.WriteLine("ini ME");
		//POR DEFECTO TRABAJAR CON NOMBRES MINUSCULAS (mysql y postgress)
		blnEsLowerCaseDBNames=true;
		blnEsMixedCaseDBNames=false;
		
		if(blnEsLowerCaseDBNames) {
			strIdDB="id";
			strVersionRowDB="version_row";
		}
		
		//strId="id";
		//strVersionRow="versionRow";
		strIdSeguridad="id";
		strIdGetSetSeguridad="Id";
		strEmpresaSeguridad="com.bydan";
		strPackageEntitiesSeguridad="entity";
		strPackageUtilsSeguridad="util";
		strPackageDataAccessSeguridad="dataaccess";
		strPackageBusinessSeguridad="business";
		strPackageLogicSeguridad="logic";
		strPackageServiceSeguridad="service";
		strEjbSeguridad="ejb";
		strEjbInterfaceSeguridad="interfaces";
		
		//strIdDB="id";
		//strVersionRowDB="version_row";
		
		if(!blnEsLowerCaseDBNames&&!blnEsMixedCaseDBNames) {
			strIdDB="ID";//"id";
			strVersionRowDB="VERSION_ROW";//"versionRow";
		}
		
		//VARIABLES CORRECION
		strCorreccionGetUserName="getuser_name";
		
	} else if(strTipoEmpresa.Equals("TAME")) {
		//Trace.WriteLine("ini TAME");
		blnEsLowerCaseDBNames=false;
		blnEsMixedCaseDBNames=false;
		//strId="id";
		//strVersionRow="versionRow";
		strIdSeguridad="oid";
		strIdGetSetSeguridad="Oid";
		strEmpresaSeguridad="Tame";
		strPackageEntitiesSeguridad="Entities";
		strPackageUtilsSeguridad="Utils";
		strPackageDataAccessSeguridad="DataAccess";
		strPackageBusinessSeguridad="Business";
		strPackageLogicSeguridad="Logic";
		strPackageServiceSeguridad="Service";
		strEjbSeguridad="Ejb";
		strEjbInterfaceSeguridad="Inferfaces";
		
		strIdDB="ID";
		strVersionRowDB="VERSION_ROW";
		
		//VARIABLES CORRECION
		strCorreccionGetUserName="getField_chaUserName";
		
	} else if(strTipoEmpresa.Equals("CCFA")) {
		//Trace.WriteLine("ini CCFA");
		blnEsLowerCaseDBNames=false;
		blnEsMixedCaseDBNames=false;
		
		blnEsMaximoTamanioPopup=true;
		//strId="id";
		//strVersionRow="versionRow";
		strIdSeguridad="id";
		strIdGetSetSeguridad="Id";
		strEmpresaSeguridad="ec.mil.gruge";
		strPackageEntitiesSeguridad="entity";
		strPackageUtilsSeguridad="util";
		strPackageDataAccessSeguridad="dataaccess";
		strPackageBusinessSeguridad="business";
		strPackageServiceSeguridad="service";
		strEjbSeguridad="ejb";
		strEjbInterfaceSeguridad="interfaces";
		
		strIdDB="ID";
		strVersionRowDB="VERSION_ROW";
	
	}else if(strTipoEmpresa.Equals("CCFA-FAE")) {
		InicializarVariablesFaeContratoC();
	}else if(strTipoEmpresa.Equals("SISCONTI")) {
		InicializarVariablesSiscontiC();
	}		
}
	
	public void InicializarVariablesSiscontiC() {
		blnEsLowerCaseDBNames=false;
		blnEsMixedCaseDBNames=false;
		
		if(blnEsLowerCaseDBNames) {
			strIdDB="id";
			strVersionRowDB="version_row";
		}
		
		//strId="id";
		//strVersionRow="versionRow";
		strIdSeguridad="id";
		strIdGetSetSeguridad="Id";
		strEmpresaSeguridad="com/bydan";
		strPackageEntitiesSeguridad="entity";
		strPackageUtilsSeguridad="util";
		strPackageDataAccessSeguridad="dataaccess";
		strPackageBusinessSeguridad="business";
		strPackageLogicSeguridad="logic";
		strPackageServiceSeguridad="service";
		strEjbSeguridad="ejb";
		strEjbInterfaceSeguridad="interfaces";
		
		strEmpresaAuditoria="com/bydan";
		strPackageAuditoria="seguridad";
		
		/*
		strPackageEntitiesAuditoria="entity";		
		strPackageBusinessAuditoria="business";
		strPackageLogicAuditoria="logic";
		strPackageUtilsAuditoria="util";
		strPackageDataAccessAuditoria="dataaccess";
		*/
		//strIdDB="id";
		//strVersionRowDB="version_row";
		
		if(!blnEsLowerCaseDBNames&&!blnEsMixedCaseDBNames) {
			strIdDB="ID";//"id";
			strVersionRowDB="VERSION_ROW";//"versionRow";
		}
		
		//VARIABLES CORRECION
		strCorreccionGetUserName="getuser_name";
	}
	
	public void InicializarVariablesFaeContratoC() {
		//Trace.WriteLine("ini CCFA");
		blnEsLowerCaseDBNames=true;
		blnEsMixedCaseDBNames=false;
		
		blnEsMaximoTamanioPopup=true;
		//strId="id";
		//strVersionRow="versionRow";
		strIdSeguridad="id";
		strIdGetSetSeguridad="Id";
		strEmpresaSeguridad="ec.mil.fae";
		strPackageEntitiesSeguridad="entity";
		strPackageUtilsSeguridad="util";
		strPackageDataAccessSeguridad="dataaccess";
		strPackageBusinessSeguridad="business";
		strPackageServiceSeguridad="service";
		strEjbSeguridad="ejb";
		strEjbInterfaceSeguridad="interfaces";
		
		strIdDB="id";
		strVersionRowDB="version_row";
	}
	
	public void IniciarTiempoC(ref Stopwatch stopWatch) {
		IniciarTiempoC(ref stopWatch,IS_DEBUG);
	}
	
	public void IniciarTiempoC(ref Stopwatch stopWatch,bool conDebug) {
		if(conDebug) {
			stopWatch = Stopwatch.StartNew();			
			
			//stopWatch =new Stopwatch();
			//stopWatch.Start();
			
		}
	}
	
	public void IniciarTiempoC(Stopwatch stopWatch) {
		IniciarTiempoC(stopWatch,IS_DEBUG);					
	}
	
	public void IniciarTiempoC(Stopwatch stopWatch,bool conDebug) {
		if(conDebug) {
			stopWatch = Stopwatch.StartNew();
			//stopWatch =new Stopwatch();
			//stopWatch.Start();
			
		}
	}
	
	public void DetenerTiempoC(Stopwatch stopWatch,PaquetesGenerar paqueteGenerar,String strSubPaquete) {
		DetenerTiempoC(stopWatch,paqueteGenerar,strSubPaquete,IS_DEBUG);
	}
	
	public void DetenerTiempoC(Stopwatch stopWatch,PaquetesGenerar paqueteGenerar,String strSubPaquete,bool conDebug) {
		if(conDebug) {
			stopWatch.Stop();	
			ImprimirTiempoC(stopWatch,paqueteGenerar,strSubPaquete,conDebug);
		}
	}

	public void ImprimirTiempoC(Stopwatch stopWatch,PaquetesGenerar paqueteGenerar,String strSubPaquete) {
		ImprimirTiempoC(stopWatch,paqueteGenerar,strSubPaquete,IS_DEBUG);
	}
	
	public void ImprimirTiempoC(Stopwatch stopWatch,PaquetesGenerar paqueteGenerar,String strSubPaquete,bool conDebug) {
		if(conDebug) {
			//TimeSpan timeSpan = new TimeSpan(stopWatch.ElapsedMilliseconds);
			TimeSpan timeSpan = stopWatch.Elapsed;			
			
			String strPaqueteGeneral=GetPaqueteGenerarString(paqueteGenerar,strSubPaquete);
			
			Trace.WriteLine("Tiempo Ejecusion:"+timeSpan+"-------->"+strPaqueteGeneral);
		}
	}
	
	public String GetStringDetenerTiempoC(Stopwatch stopWatch,PaquetesGenerar paqueteGenerar,String strSubPaquete) {
		String strImprimirTiempo="";
		
		//if(IS_DEBUG) {
			stopWatch.Stop();	
			strImprimirTiempo=GetStringImprimirTiempoC(stopWatch,paqueteGenerar,strSubPaquete);
		//}
		
		return strImprimirTiempo;
	}
	
	public String GetStringImprimirTiempoC(Stopwatch stopWatch,PaquetesGenerar paqueteGenerar,String strSubPaquete) {
		//if(IS_DEBUG) {
			String strImprimirTiempo="";
			
			//TimeSpan timeSpan = new TimeSpan(stopWatch.ElapsedMilliseconds);
			
			TimeSpan timeSpan = stopWatch.Elapsed;
			
			//Trace.WriteLine(stopWatch.ElapsedMilliseconds);
			
			//TimeSpan timeSpan =stopWatch.Elapsed;
			
			String strPaqueteGeneral=GetPaqueteGenerarString(paqueteGenerar,strSubPaquete);
			
			strImprimirTiempo=""+timeSpan+"";
		//}
		
		return strImprimirTiempo;
	}
	
	/*
	<%
	if(IS_DEBUG2) {
		IniciarTiempo();	
		DetenerTiempo(PaquetesGenerar.AUXILIAR,"HERE ");
	}
	%>
	
	
	I PARTE
	<%
	if(IS_DEBUG2) {
		IniciarTiempo();
	}
	%>
	
	II PARTE
	<%
		if(IS_DEBUG2) {
			DetenerTiempo(PaquetesGenerar.AUXILIAR,"HERE ");
		}
	%>

	*/
	public bool TieneClasesRelacionadasOForeignKeyC(TableSchema TablaBase)
	{
		bool blnTieneForeignKey=false;
			
			blnTieneForeignKey=TieneForeignKeyC(TablaBase)||TieneClasesRelacionadasC(TablaBase);
				
		return blnTieneForeignKey;
	}
	
	public bool TieneIndiceClaseRelacionadaForeignKeyC(TableSchema TablaBase,TableSchema tablaRelacionada) {
		bool blnTieneForeignKey=false;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
				if(indexSchema.Name.Contains(strFK+"_"+strIdGetSet+GetNombreClaseC(tablaRelacionada.ToString()))) {
					blnTieneForeignKey=true;
					
					break;
				}
			}
				
		return blnTieneForeignKey;
	}		
	
	public bool TieneClasesRelacionadasC(TableSchema TablaBase) {
		return TieneClasesRelacionadasC(TablaBase,true);
	}
	
	public bool TieneClasesRelacionadasC(TableSchema TablaBase,bool ConTodos) {
			bool blnTieneRelacionesLocal=false;
			String strTablaClaseRelacionada="";
				strTablaClaseRelacionada+="";
			String strFuncionInit="\r\n\tpublic void Save"+GetNombreClaseC(TablaBase.ToString())+"RelacionesDetalles(Long idUsuario";
			
			//Trace.WriteLine(TablaBase.Name+" TODOS="+ConTodos);
			
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,ConTodos);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				//Trace.WriteLine("TIENE");
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					blnTieneRelacionesLocal=true;
					break;
					//strTablaClaseRelacionada+=","+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{	
					blnTieneRelacionesLocal=true;
					break;
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					/*
					if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
					*/
					blnTieneRelacionesLocal=true;
					break;
					//strTablaClaseRelacionada+=",ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
				}
			}
			
			
			
			return blnTieneRelacionesLocal; 
		}
		
	public bool TieneForeignKeyODatoBooleanC(TableSchema TablaBase) {
		bool blnTieneForeignKey=false;
			
			blnTieneForeignKey=TieneForeignKeyC(TablaBase)||TieneDatoBooleanC(TablaBase);
				
		return blnTieneForeignKey;
	}

	public bool TieneForeignKeyC(TableSchema TablaBase)	{
		bool blnTieneForeignKey=false;		
		
		TableKeySchemaCollection tableForeignKeySchemaCollection=new TableKeySchemaCollection();
		TableKeySchemaCollectionMe tableForeignKeySchemaCollectionMe=new TableKeySchemaCollectionMe();
		TableSchemaMe tableSchemaMe=new TableSchemaMe();
		
		tableForeignKeySchemaCollection=TablaBase.ForeignKeys;
		


			if(tableForeignKeySchemaCollection!=null && tableForeignKeySchemaCollection.Count>0) {
				blnTieneForeignKey=true;
				
				//Trace.WriteLine(TablaBase.ForeignKeys.Count);
			}
		
		
		/*
		foreach(ColumnSchema columnSchema in TablaBase.Columns) {
			
			if(columnSchema.IsForeignKeyMember) {
				blnTieneForeignKey=true;
				break;					
			}
			
			
			//if(columnSchema.Name.Contains("id")) {
			//	blnTieneForeignKey=true;
			//	break;					
			//}
		}
		*/
				
		return blnTieneForeignKey;
	}
	
	public bool TieneDatoBooleanC(TableSchema TablaBase)
	{
		bool blnTieneForeignKey=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strId||columnSchema.Name==strVersionRow)
					{
						continue; 
					}
					
					if(columnSchema.DataType==DbType.Boolean)
					{
						blnTieneForeignKey=true;
					
					}
				}
				
		return blnTieneForeignKey;
	}
	
	public bool TieneColumnasDatosTotalesC(TableSchema TablaBase) {
		bool tiene=false;
			
		foreach(ColumnSchema columnSchema in TablaBase.Columns) {
			if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strId||columnSchema.Name==strVersionRow
				|| columnSchema.IsForeignKeyMember|| EsBitColumn(columnSchema)) {
					
				continue; 
			}
				
			if(EsTipoColumnaValorParaClaseC(columnSchema) || EsTipoColumnaValorEnteroParaClaseC(columnSchema)) {
				tiene=true;
				break;
			}
		}
				
		return tiene;
	}
	
	public bool TieneColumnaFkIndiceFkC(IndexSchema indexSchema) {
		bool tiene=false;
			
		foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)	{
			if(memberColumnSchema.Column.IsForeignKeyMember) {
				tiene=true;
				break;
			}
		}
				
		return tiene;
	}
	
	public bool TieneFuncionalidadDatosTotalesC(TableSchema TablaBase) {
		bool tiene=false;
		
		tiene=TieneColumnasDatosTotalesC(TablaBase);
		
		return tiene;
	}
	
	public String SoloSiEsParaSeguridadC(DatabaseSchema databaseSchema) {
			String strSeguridad="";
			//System.Windows.Forms.MessageBox.Show(databaseSchema.Name);
			if(databaseSchema.Name=="Seguridad"||databaseSchema.Name=="SeguridadBasico"||databaseSchema.Name=="Seguridads")
			{
				strSeguridad="Seguridad";
			}			
			
			return strSeguridad;
		}
		
		public void EsConSeguridadC(bool esConSeguridad) 
		{
			strGlobalSeguridadComment="";
			
			if(!esConSeguridad)
			{
				strGlobalSeguridadComment="//";
				strGlobalSeguridadCommentNo="";
			}			
			else
			{
				strGlobalSeguridadCommentNo="//";
			}
			
			//return strGlobalSeguridadComment;
		}
		
		public void EsConAuditoriaC(bool esConAuditoria) 
		{
			//strGlobalAuditoriaComment="";
			//System.Windows.Forms.MessageBox.Show(esConAuditoria.ToString());
			
			if(!esConAuditoria)
			{
				strGlobalAuditoriaComment="//";
			 	strGlobalAuditoriaCommentNo="";
			}			
			else
			{
				strGlobalAuditoriaCommentNo="//";
				strGlobalAuditoriaComment="";
			}		
			
			//return strGlobalAuditoriaComment;
		}		
		
		public void InicializarVariablesPorTabla(TableSchema TablaBase) {			
			InicializarVariablesPorTabla(TablaBase,TiposGeneracionGrupo.TODOS);
		}
		
		public void InicializarVariablesPorTabla(TableSchema TablaBase,TiposGeneracionGrupo tiposGeneracionGrupo) 
		{			
			
			Stopwatch stopWatch = new Stopwatch();
			
			if(IS_DEBUG2) {				
				IniciarTiempoC(ref stopWatch,IS_DEBUG2);
			}
				
			blnNoStandardTableFromProperties=GetNoStandardTableFromPropertiesC(TablaBase);
			strGlobalTablaNoStandardComment="";
			
			if(blnNoStandardTableFromProperties) {
				strGlobalTablaNoStandardComment="//";
				
				blnTieneTipoPKStandard=GetTieneTipoPKStandardC(TablaBase);
				strPorTablaColumnsPKParametros=GetColumnsPKParametrosC(TablaBase);
				strPorTablaColumnsPKParametrosSinComaPrimero=GetColumnsPKParametrosSinComaPrimeroC(TablaBase);
				strPorTablaColumnsPKParametrosUso=GetColumnsPKParametrosUsoC(TablaBase);
				strPorTablaColumnsPKParametrosUsoSinComaPrimero=GetColumnsPKParametrosUsoSinComaPrimeroC(TablaBase);
				intPorTablaCountColumnsPKC=GetCountColumnsPKC(TablaBase);
				columnSchemaCollectionPK=GetColumnsPKC(TablaBase);
			}
			
			strPorTablaPrefijoNombre=GetNombrePrefijoTableFromPropertiesC(TablaBase);
			//Trace.WriteLine("HERE");
			
			//VARIABLES CCFA
			blnEsTablaLatitudLongitud=ContieneLatitudLongitudCCFAC(TablaBase);
			//VARIABLES CCFA
			
			blnTieneBusquedas=GetExisteBusquedasTablaC(TablaBase);
			
			intNumeroMaximoColumnasBusquedas=1;			
			if(blnTieneBusquedas) {
				intNumeroMaximoColumnasBusquedas=GetNumeroMaximoColumnasBusquedasTablaC(TablaBase);
				intNumeroIndicesBusquedas=GetNumeroIndicesBusquedasTablaC(TablaBase);
			}
			
			
			//REVISA TODAS LAS COLUMNAS E INICIALIZA VARIABLES GLOBALES POR TABLA TIENE			
			CargarVariablesGlobalesTablaColumnasTieneC(TablaBase);
			
			//CARGA PANELES RELACIONES
			GetNavegacionColumnsTablaTablasClasesRelacionadasC(TablaBase,false,false,false,false,true,false,false,false);
			
			
			blnTieneImagen=ContieneImagen(TablaBase);	
			blnTieneDocumento=ContieneDocumento(TablaBase);
			blnTieneSeguridadCampo=ConSeguridadCampo(TablaBase);
			blnTieneAuditoriaAuto=ConAuditoriaAuto(TablaBase);
		 	blnTieneTextArea=ContieneTextArea(TablaBase);	
			
			if(blnTieneTextArea) {
				blnTieneStringColumn=true;
			} else {
				blnTieneStringColumn=ContieneStringColumn(TablaBase);	
			}
			
			blnTieneValidacionTodo=GetValidacionTodoFromPropertiesC(TablaBase);
			blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
			blnEsReporteGuardar=GetEsReporteGuardarFromPropertiesC(TablaBase);
			blnEsReporteAdditional=GetEsReporteAdditionalFromPropertiesC(TablaBase);
			
			blnEsReporteParaGrupoReporte=false;			
			
			if(blnEsReporte) {
				blnEsReporteParaGrupoReporte=GetEsReporteParaGrupoReporteFromPropertiesC(TablaBase);
			}
			
			blnTieneRelacionesReporte=false;
			blnTieneRelacionesReporte=TieneReporteRelacionesC(TablaBase);
			
			blnEstablaModulo=GetEsTablaModuloFromPropertiesC(TablaBase);
			blnEsReporteVista=GetEsReporteVistaFromPropertiesC(TablaBase);
			blnEsProceso=GetEsProcesoFromPropertiesC(TablaBase);
			blnEsProcesoParametro=GetEsProcesoParamFromPropertiesC(TablaBase);
			blnSinUsoDatos=GetSinUsoFuncionalidadDatosTableFromPropertiesC(TablaBase);
			blnEsLabelProcesar=GetEsLabelProcesarAdditionalFromPropertiesC(TablaBase);
			blnConSeleccionar=GetConSeleccionarTableFromPropertiesC(TablaBase);
			blnConAdditional=GetConAdditionalTableFromPropertiesC(TablaBase);
			blnConTotales=GetConFuncionalidadTotalesTableFromPropertiesC(TablaBase);
			
			blnTieneCampoTotalizar=TieneCampoTotalizarC(TablaBase);
			strParametroSizeTablaTieneTotalizar="";
			if(blnTieneCampoTotalizar) {
				strParametroSizeTablaTieneTotalizar=",iSizeTabla";
			}
			
			blnTieneListener=GetListenerTableFromPropertiesC(TablaBase);
			
			if(!blnTieneListener) {
				strCommentListener="//";
			}
			
			blnNormalOrientation=EsNormalOrientationC(TablaBase,false);
			
			//SE ACTUALIZA ABAJO LUEGO DE CARGAR RELACIONES
			//blnTieneForeignKey=TieneForeignKeyC(TablaBase);						
			
			
			blnTieneWebCombo=GetTieneComboColumnFromPropertiesC(TablaBase);
			blnTieneProcesoBusqueda=GetConFuncionalidadProcesoBusquedaTableFromPropertiesC(TablaBase);
			intNumeroPaginacion=GetNumeroPaginacionTableFromPropertiesC(TablaBase);
			
			if(IS_DEBUG2) {
				DetenerTiempoC(stopWatch,PaquetesGenerar.AUXILIAR,"PROPERTIES PARTE I",IS_DEBUG2);
			}						
									
			
			if(IS_DEBUG2) {				
				IniciarTiempoC(ref stopWatch,IS_DEBUG2);
			}
			
				  		
			blnTieneForeignKey=TieneForeignKeyC(TablaBase);
			blnTieneRelacionesFinal=TieneClasesRelacionadasFinalC(TablaBase);
			blnTieneRelaciones=TieneClasesRelacionadasC(TablaBase,true);
			
			blnTieneRelacionesGlobal=TieneClasesRelacionadasC(TablaBase,false);
			
			
			intNumeroRelaciones=GetNumeroTablasClasesRelacionadasC(TablaBase);
			
			blnOptimizarNumeroRelaciones=false;
			
			if(intNumeroRelaciones > intNumeroMaximoRelacionesOptimizar) {
				blnOptimizarNumeroRelaciones=true;
			}
			
			if(IS_DEBUG2) {
				DetenerTiempoC(stopWatch,PaquetesGenerar.AUXILIAR,"CARGAR FKs",IS_DEBUG2);
			}
			
			
			if(IS_DEBUG2) {				
				IniciarTiempoC(ref stopWatch,IS_DEBUG2);
			}
			
			//Trace.WriteLine(TablaBase.Name+"-"+blnConTotales);
			
			blnEsGuardarRelaciones=GetEsGuardarRelacionesFromPropertiesC(TablaBase);
			strCommentEsGuardarRelaciones="";
			
			//INICIALIZA
			blnTemporalWebNoActualizarDatos=false;
			strTemporalWebNoActualizarDatos="";						
			
			if(blnEsGuardarRelaciones) {
				strCommentEsGuardarRelaciones="//";
				blnTemporalWebNoActualizarDatos=true;
				strTemporalWebNoActualizarDatos=" false and ";
			} else {
				if(GetNoGuardarRelacionesFromPropertiesC(TablaBase)) {
					blnTemporalWebNoActualizarDatos=true;
					strTemporalWebNoActualizarDatos=" false and ";
				}
			}
			
			blnTieneColumnasReporte=TieneColumnasReporteC(TablaBase);
			blnTieneColumnasDatos=TieneColumnasDatosC(TablaBase);
			blnTieneIdentityColumn=TieneIdentityColumnC(TablaBase);
			blnCumpleMaximoRelacionesMantenimiento=GetConMaximoRelacionesC(TablaBase);
			blnConMaxCodigo=GetConMaximoCodigoTableFromPropertiesC(TablaBase);			
			blnEsAutoReferenciada=GetEsAutoReferenciadaTablaC(TablaBase);
			blnPermiteImportar=GetPermiteImportarC(TablaBase,blnTieneForeignKey);
			blnConMinCodigoWeb=GetConMinimoCodigoWebTableFromPropertiesC(TablaBase);
			blnConMaxCodigoWeb=GetConMaximoCodigoWebTableFromPropertiesC(TablaBase);
			
			//blnConMinCodigoWeb=true;
			//blnConFuncionalidadWebExpressVersion2=true;			
			
			
			//COMO NO TIENEN BUSQUEDA, NO ES MUCHA LA DIFERENCIA Y PIERDE FUNCIONALIDAD
			/*
			if(EsTablaCatalogoSimpleC(TablaBase)) {
				blnConFuncionalidadWebExpressVersion2=true;	
			}
			*/
			
			
			strSufijoVersion="";
			strCommentMinCodigoWebIni="";
			strCommentMinCodigoWebFin="";
			strCommentMinCodigoWebLinea="";
			
			sCoWebExpIni="";
			sCoWebExpFin="";
			sCoWebExpLinea="";
			
			//GENERACION NORMAL
			if(!tiposGeneracionGrupo.Equals(TiposGeneracionGrupo.VERSION0_TODO_WEB)) {
				if(blnConMinCodigoWeb) {
					strCommentMinCodigoWebIni="/*";
					strCommentMinCodigoWebFin="*/";
					strCommentMinCodigoWebLinea="//";										
					
				} else {					
					if(blnConFuncionalidadWebExpressVersion2) {
						sCoWebExpIni="/*";
						sCoWebExpFin="*/";
						sCoWebExpLinea="//";
					}
				}
			} else {
				//GENERACION VERSION0
				if(blnConMaxCodigoWeb) {
					strSufijoVersion="TodoWeb";
					strCommentMinCodigoWebIni="";
					strCommentMinCodigoWebFin="";
					strCommentMinCodigoWebLinea="";
					
					if(blnConFuncionalidadWebExpressVersion2) {
						sCoWebExpIni="/*";
						sCoWebExpFin="*/";
						sCoWebExpLinea="//";
					}
					
					strPrefijoJSFFacesOBeanJInternalFrame=strSufijoVersion+strPrefijoBeanSwing+"JInternalFrame";
				}
			}
			
			strObjetoFormDetalle="";
			strFormDetalle="";
			
			if(conFormDetalle) {
				strObjetoFormDetalle="jInternalFrameDetalleForm"+GetNombreClaseC(TablaBase.ToString())+".";
				strFormDetalle="DetalleForm";
			}
			
			//FORZA_DESHABILITAR
			//strCommentMinCodigoWebIni="";
			//strCommentMinCodigoWebFin="";
				
				
			//Trace.WriteLine(blnEsAutoReferenciada);
			
			intNumeroColumnasPrincipalOcultas=GetNumeroColumnasPrincipalOcultasC(TablaBase);
			intNumeroClasesRelacionadasFinal=GetNumeroClasesRelacionadasFinalC(TablaBase);
			intNumeroColumnasParaForm=GetAlignVerticalFormNumeroColumnasTableC(TablaBase);
			
			//PARA DISENO PANTALLA Y ARREGLAR UBICAR PANELES
			iGridyRelaciones=0;
			iGridyPrincipal=0;
			iYPanelCampos=0;			
			iXPanelCampos=0;
			
			if(blnConForzarUbicarPanelesManualmente) {
				sCommentUbicarMan="//";
			} else {
				sCommentUbicarMan="";
			}
			
			//PARA DISENO PANTALLA Y ARREGLAR UBICAR PANELES
			
			blnUsaLabelFormLower=false;
			if(intNumeroColumnasParaForm>2) {
				blnUsaLabelFormLower=true;
			}
			
			//Trace.WriteLine(intNumeroColumnasParaForm);
			
			//totalWidthInicial=0;

			//Trace.WriteLine(blnConTotales);
			
			if(blnEsReporte) {
				strCommentReporte="//";	
			} else {
				strCommentReporte="";
			}
			
			if(blnEsProceso) {
				strCommentProceso="//";
			} else {
				strCommentProceso="";
			}
			
			strCommentAdditional="";
			
			if(!blnConAdditional) {
				strCommentAdditional="//";
			}
			
			strReportesPorModuloComment="";
			if(blnEsReporte && !blnConReportesPorModulo) {
				strReportesPorModuloComment="//";
			}
			
			//bool isValidacionTodos=GetValidacionTodoFromPropertiesC(column.Table);		
			
			blnEsTablaUnoAUnoFk=EsTablaUnoAUnoFk(TablaBase);
			
			if(blnEsTablaUnoAUnoFk) {
				strNombreTablaUnoAUnoPk=NombreTablaUnoAUnoPk(TablaBase);
				
				//Trace.WriteLine(strNombreTablaUnoAUnoPk);
			}
			
			strPackageJava=GetPackageTableFromProperties(TablaBase);
			
			//PAQUETE JAVA COMPLETO
			strPaqueteJavaCompleto="";
			strPaqueteJavaCompleto=GetPaqueteJavaTotalFromTableFromPropertiesC(TablaBase);
			
			if(strPaqueteJavaCompleto!="") {
				strPaqueteJavaCompletoLogic=strPaqueteJavaCompleto.Replace("REPLACE","logic");	
				strPaqueteJavaCompletoEntities=strPaqueteJavaCompleto.Replace("REPLACE","entity");
			} else {
				strPaqueteJavaCompleto="";
				strPaqueteJavaCompletoLogic="";
				strPaqueteJavaCompletoEntities="";
			}
			
			strCellSpacing="";
			strCellSpacing=GetCellSpacingTableFromPropertiesC(TablaBase);
			
			if(strCellSpacing.Equals("")) {
				strCellSpacing="Constantes2.I_CELLSPACING";
			}
			
			strCellSpacingLeft="";
			strCellSpacingLeft=GetCellSpacingLeftTableFromPropertiesC(TablaBase);
			
			if(strCellSpacingLeft.Equals("")) {
				strCellSpacingLeft="Constantes2.I_CELLSPACING_LEFT";
			}
			
			
			//PARA REDUCIR AUTOMATICAMENTE EL TAMANIO DE LOS LABELS AL MINIMO
			strAnchoColumnPorcentajeDefectoTabla="0";
			strAnchoColumnPorcentajeDefectoTabla=GetAnchoColumnPorcentajeDefectoTablaC(TablaBase);
			
			strAltoColumnPorcentajeDefectoTabla="0";
			strAltoColumnPorcentajeDefectoTabla=GetAltoColumnPorcentajeDefectoTablaC(TablaBase);
			
			
			blnTieneTimestamp=false;
			blnTieneColumnaCodigo=false;
			blnTieneColumnaNombre=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
				
				if(EsDateTimeColumn(columnSchema)){
					 blnTieneTimestamp=true;
					//break;
				}
				
				if(columnSchema.Name.Equals("Codigo")) {
					blnTieneColumnaCodigo=true;
				}
				
				if(columnSchema.Name.Equals("Nombre")) {
					blnTieneColumnaNombre=true;
				}
			}
			
			
			if(IS_DEBUG2) {
				DetenerTiempoC(stopWatch,PaquetesGenerar.AUXILIAR,"PROPERTIES PARTE II",IS_DEBUG2);
			}
			
			
			if(IS_DEBUG2) {				
				IniciarTiempoC(ref stopWatch,IS_DEBUG2);
			}
			
			GetInicializarExtraImport(TablaBase);
			
			if(blnConAdditionalExtraCode) {
				GenerateFoldersExtraCodeC(TablaBase);
			}
			
			arrayListEsquemasRel=new ArrayList();			
			
			int intNumeroMaximoNiveles=1;
			
			GetEsquemasClasesRelacionadas(TablaBase,arrayListEsquemasRel,ref intNumeroMaximoNiveles);////arrayListEsquemasRel=
			
			arrayTablasRelacionadasParametros=new ArrayList();
			blnTieneProcesoParametro=false;
			
			if(blnEsReporte) {
				arrayTablasRelacionadasParametros=CargarTablasParametrosDesdeProcesosC(TablaBase);								
				
				if(arrayTablasRelacionadasParametros.Count>0) {				
					blnTieneProcesoParametro=true;
				}
			}
			
			if(blnEsMixedCaseLabelNames) {
				GetInicializarVariablesLabel("MIXED_CASE");
			}
			
			if(IS_DEBUG2) {
				DetenerTiempoC(stopWatch,PaquetesGenerar.AUXILIAR,"EXTRA INICIALIZACION",IS_DEBUG2);
			}		
			
			//FUNCIONALIDAD_PROYECTO
			CommonCodeProyecto.GetInicializarVariablesFuncionalidadProyectoC(TablaBase);
		}								
		
		public void GetInicializarVariablesLabel(String strTipo) {
			if(strTipo.Equals("MIXED_CASE")) {
				strPrincipal="Principal";
				strGeneral="General";
				strArchivo="Archivo";
				strDatos="Datos";
				strAcceso="Acceso";
				strConfiguracion="Configuracion";
				strTipos="Tipos";
				strInterno="Interno";				
				strDefiniciones="Definiciones";
				strProcesos="Procesos";
				strUtilitarios="Utilitarios";
				strReportes="Reportes";				
				strTotales="Totales";
				strExtraPost="Extra/Post";
				strOrden="Orden";
				strEdicionDatos="Edicion Datos";
				strCampos="Campos";
				//strParametrosReportes="Parametros Reportes-Acciones";
				//strParametrosReportesAcciones="Parametros Acciones";
				strParametrosAcciones="Parametros Acciones";
				strCamposOcultos="Campos Ocultos";
				strAcciones="Acciones";
				strRelaciones="Datos Relacionados";
				strGenerarReporte="Generar";//"GENERAR REPORTE";
				//strImportar="IMPORTAR";
				//strExportar_Label="EXPORTAR";
				//strExportar="EXPORTAR";
				//strGenerarReporteRelaciones="RELACIONES";//"REPORTE RELACION";
				strGenerarReporteTodos="Todos";//"TODOS";
				strSeleccionarTodos="Sel. Todos";
				strSeleccionados="Seleccionados";
				//strSeleccionarSeleccionados="SELECCIONAR SELECCIONADOS";
				strConMaximoAltoTabla="Con Maximo Alto Tabla";
				strGrafico="Graf.";
				strGraficoToolTip="Con Grafico";
				strRecargarInformacion="Recargar";// DATOS
				strArbol="Arbol";
				strEditar="Editar";
				strEditarRelaciones="Editar Rel";
				strEdicion="Edicion";
				strSeleccion="Seleccionar";
				strSel="Sel";
				strCodigoUnico="Cod. Unico";
				strNuevo="Nuevo";
				strControlMas=" Crtl +";
				strAltMas=" Alt +";
				strNuevoTabla="Nuevo Tabla";
				strMensaje="Mensaje";
				strDuplicar="Duplicar";
				strNue="Nue";
				strNuevoRelaciones="Nuevo Rel";
				strActualizar="Actualizar";
				strEliminar="Eliminar";
				strEli="Eli";
				strEl="El";
				strCancelar="Cancelar";
				strCerrar="Cerrar";
				strSalir="Salir";
				strMostrarOcultar="Mostrar Ocultar";
				strGuardarCambios="Guardar";
				strGuardarCambiosTabla="Guardar Tabla";
				//strSincronizar="SINCRONIZAR";
				strCopiar="Copiar";
				strVerForm="Ver";
				strMantenimientoDe="Mantenimiento De ";
				strMantenimiento="Mantenimiento";
				strFormulario="Formulario";
				strReporteDe="Reporte De ";
				strNumeroDe="Numero De ";
				strAProcesar=" A Procesar:";
				strProcesar="Procesar";
				strProcesarInformacion="Procesar Informacion";
				strBusquedas="Busquedas";
				strBusqueda="Busqueda";
				strBuscar="Buscar";
				strPor="Por";
				strDe=" De ";
				strSin="Sin";
				strCatalogosSimples="Catalogos Simples";
				strCatalogosCompuestos="Catalogos Compuestos";
				strSiguientes="Siguientes";
				strAnteriores="Anteriores";
				strMostrarTodosResultados="Mostrar todos los resultados";
				strTipo="Tipo";
				strFinal="Final";
				strTiposReportes="Tipos De Reporte";
				strTiposArchivosReportes="Tipos De Archivo";//"TIPOS DE ARCHIVO O REPORTE";
				strPaginacion="Paginacion";
				strTiposPaginacion="Tipos De Paginacion";
				strAccion="Accion";
				strTiposAcciones="Tipos de Acciones";
				strTiposRelaciones="Tipos de Relaciones";
				strTiposSeleccionar="Tipos de Seleccion";
				//strArchivo_Lower="Archivo";
				
				strTipoBusqueda="Tipo=";
				strCodigoDe="Codigo Unico De ";
				strParametrosBusqueda="Parametros->";
				strVentana="Ventana";
				strConfirmacion="Confirmacion";
			}
		}
		
		public void GetInicializarExtraImport(TableSchema tableSchema) {
			//EXTRA - GLOBALES
			strEmpresaExtra="";
			strPackageEntitiesExtra="";
			strPackageUtilsExtra="";
			strPackageDataAccessExtra="";
			strPackageLogicExtra="";
			strPackageEjbInterfaceExtra="";
			strPackageEjbServiceExtra="";
			strPackageReporteSourceExtra="";
			strPackageWebSessionExtra="";
			strPackageEjbInterfaceExtra="";
			
			if(GlobalConPaqueteJavaGlobal) {
				if(GetConPaqueteJavaGlobalFromTableFromPropertiesC(tableSchema)) {					
					strPackageEntitiesExtra="import "+GlobalEmpresa+"."+ GlobalPackage+"."+ GlobalModulePackage+"."+strPackageBusiness+"."+strPackageEntities+".*;";
					strPackageDataAccessExtra="import "+GlobalEmpresa+"."+ GlobalPackage+"."+ GlobalModulePackage+"."+strPackageBusiness+"."+strPackageDataAccess+".*;";
					strPackageLogicExtra="import "+GlobalEmpresa+"."+ GlobalPackage+"."+ GlobalModulePackage+"."+strPackageBusiness+"."+ strPackageLogic+".*;";
					strPackageUtilsExtra+="\r\nimport "+GlobalEmpresa+"."+GlobalPackage+"."+GlobalModulePackage+"."+strPackageUtils+".*;";
					strPackageReporteSourceExtra+="\r\nimport "+GlobalEmpresa+"."+ GlobalPackage+"."+GlobalModulePackage+"."+strPackagePresentation+"."+strPackageReporte+"."+strPackageSource+".*;";	//GetEsPaqueteReporteC(tableSchema)+".*;";	
					strPackageWebSessionExtra+="\r\nimport "+GlobalEmpresa+"."+ GlobalPackage+"."+ GlobalModulePackage+"."+strPackagePresentation+"."+strPackageWeb+"."+strPackageJSF+"."+strPackageSessionBean+".*;";//+GetEsPaqueteReporteC(tableSchema);
					strPackageEjbInterfaceExtra="\r\nimport "+GlobalEmpresa+"."+GlobalPackage+"."+GlobalModulePackage+"."+strPackageService+"."+strEjb+"."+strEjbInterface+".*;";
					
					strEmpresaExtra="";					
					strPackageEjbServiceExtra="";
				
				}
				
				String strPaqueteJava=GetModuloPaqueteJavaFromTableFromPropertiesC(tableSchema);
				String strPackageAux="";
				//System.Windows.Forms.MessageBox.Show(strPaqueteJava);
				
				if(strPaqueteJava!=null && !strPaqueteJava.Equals("") && strPaqueteJava.Equals("global")) {
					if(GlobalConPaqueteJavaGlobalImports!=null && GlobalConPaqueteJavaGlobalImports!="" && GlobalConPaqueteJavaGlobalImports.Length>0) {
						
						foreach(String strPackage in GlobalConPaqueteJavaGlobalImports.Split(',')) {
							strPackageAux=strPackage.ToLower();
							
							strPackageEntitiesExtra+="\r\nimport "+GlobalEmpresa+"."+ GlobalPackage+"."+ strPackageAux+"."+strPackageBusiness+"."+strPackageEntities+".*;";
							strPackageDataAccessExtra+="\r\nimport "+GlobalEmpresa+"."+ GlobalPackage+"."+ strPackageAux+"."+strPackageBusiness+"."+strPackageDataAccess+".*;";
							strPackageLogicExtra+="\r\nimport "+GlobalEmpresa+"."+ GlobalPackage+"."+ strPackageAux+"."+strPackageBusiness+"."+ strPackageLogic+".*;";				
							strPackageUtilsExtra+="\r\nimport "+GlobalEmpresa+"."+GlobalPackage+"."+strPackageAux+"."+strPackageUtils+".*;";
							strPackageReporteSourceExtra+="\r\nimport "+GlobalEmpresa+"."+ GlobalPackage+"."+strPackageAux+"."+strPackagePresentation+"."+strPackageReporte+"."+strPackageSource+".*;";	//GetEsPaqueteReporteC(tableSchema)+".*;";	
							strPackageWebSessionExtra+="\r\nimport "+GlobalEmpresa+"."+ GlobalPackage+"."+ strPackageAux+"."+strPackagePresentation+"."+strPackageWeb+"."+strPackageJSF+"."+strPackageSessionBean+".*;";//+GetEsPaqueteReporteC(tableSchema);
							strPackageEjbInterfaceExtra+="\r\nimport "+GlobalEmpresa+"."+GlobalPackage+"."+strPackageAux+"."+strPackageService+"."+strEjb+"."+strEjbInterface+".*;";
						}
					}
				}
			}
		}
		
		public ArrayList GetModulosC() {
			ArrayList arrayListModulos=new ArrayList();
						
			arrayListModulos.Add("seguridad");//1				
			arrayListModulos.Add("contabilidad");//2
			arrayListModulos.Add("puntoventa");//3
			arrayListModulos.Add("nomina");//4
			arrayListModulos.Add("facturacion");//5
			arrayListModulos.Add("cartera");//6
			arrayListModulos.Add("activosfijos");//7
			arrayListModulos.Add("inventario");//8
			arrayListModulos.Add("comisiones");//9
			arrayListModulos.Add("tesoreria");//10
			arrayListModulos.Add("produccion");//11
			arrayListModulos.Add("importaciones");//12
			
			arrayListModulos.Add("sris");//13
			
			return arrayListModulos;
		}
		
		public ArrayList GetCapasAdditionalC(String sReplace,bool conReport) {
			ArrayList arrayListModulos=new ArrayList();
			String sCapaAdditional="";
			String sSubCapaReport="";
			String sCapaInicial="src_"+sReplace+@"\";
			
			if(conReport) {
				sSubCapaReport=@"report\";
			}
			
			
			sCapaAdditional=@sCapaInicial+@"com\bydan\erp\"+sReplace+@"\business\dataaccess\"+sSubCapaReport;
			arrayListModulos.Add(sCapaAdditional);
			
			sCapaAdditional=@sCapaInicial+@"com\bydan\erp\"+sReplace+@"\business\entity\"+sSubCapaReport;
			arrayListModulos.Add(sCapaAdditional);
			
			sCapaAdditional=@sCapaInicial+@"com\bydan\erp\"+sReplace+@"\business\interfaces\"+sSubCapaReport;
			arrayListModulos.Add(sCapaAdditional);
			
			sCapaAdditional=@sCapaInicial+@"com\bydan\erp\"+sReplace+@"\util\"+sSubCapaReport;
			arrayListModulos.Add(sCapaAdditional);
			
			sCapaAdditional=@sCapaInicial+@"com\bydan\erp\"+sReplace+@"\business\logic\"+sSubCapaReport;
			arrayListModulos.Add(sCapaAdditional);
						
			//SERVICE
			sCapaAdditional=@sCapaInicial+@"com\bydan\erp\"+sReplace+@"\service\ejb\interfaces\"+sSubCapaReport;
			arrayListModulos.Add(sCapaAdditional);
			
			sCapaAdditional=@sCapaInicial+@"com\bydan\erp\"+sReplace+@"\service\ejb\session\"+sSubCapaReport;
			arrayListModulos.Add(sCapaAdditional);
			//SERVICE
						
			sCapaAdditional=@sCapaInicial+@"com\bydan\erp\"+sReplace+@"\presentation\report\source\"+sSubCapaReport;
			arrayListModulos.Add(sCapaAdditional);
			
			//ESTA ES LA UNICA CAPA QUE NO SE COPIA (HACE REFERENCIA A EJB QUE NO SE TIENE)			
			//sCapaAdditional=@sCapaInicial+@"com\bydan\erp\"+sReplace+@"\presentation\swing\jinternalframes\"+sSubCapaReport;
			//arrayListModulos.Add(sCapaAdditional);
			
			
			sCapaAdditional=@sCapaInicial+@"com\bydan\erp\"+sReplace+@"\presentation\web\jsf\sessionbean\"+sSubCapaReport;
			arrayListModulos.Add(sCapaAdditional);
			
			
			return arrayListModulos;
		}
		
		public ArrayList GetCriteriosBusquedaAdditionalC() {
			ArrayList arrayListModulos=new ArrayList();
			String sCapaAdditional="";					
			
			sCapaAdditional="*Additional.java";
			arrayListModulos.Add(sCapaAdditional);
			
			sCapaAdditional="*Additionable.java";
			arrayListModulos.Add(sCapaAdditional);
			
			sCapaAdditional="*AdditionableHome.java";
			arrayListModulos.Add(sCapaAdditional);
			
			sCapaAdditional="*Sql.java";
			arrayListModulos.Add(sCapaAdditional);
			
			sCapaAdditional="*Aux.java";
			arrayListModulos.Add(sCapaAdditional);
			
			return arrayListModulos;
		}
		
		public ArrayList GetCapasFisicasAdditionalC(String sReplaceOrigenDestino) {
			ArrayList arrayListModulos=new ArrayList();
			String sCapaAdditional="";
			
			sCapaAdditional=@"F:\l\proyectos\2013\source\"+sReplaceOrigenDestino+@"\erp_ejb\";//src_"+sReplace+@"\
			arrayListModulos.Add(sCapaAdditional);
			
			sCapaAdditional=@"F:\l\proyectos\2013\source\"+sReplaceOrigenDestino+@"\erp_desktop_all\";//src_"+sReplace+@"\
			arrayListModulos.Add(sCapaAdditional);
			
			return arrayListModulos;
		}
		
		public bool EsTablaUnoAUnoFk(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			if(!blnNoStandardTableFromProperties) {
				foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
					if(columnSchema.IsPrimaryKeyMember && columnSchema.Name.Equals(strId) && columnSchema.IsForeignKeyMember) {
						blContiene=true;
						break;
					}
				}
			}
			return blContiene;			
		}
		
		public String NombreTablaUnoAUnoPk(TableSchema TablaBase) 
		{
			String strNombreTablaPk="";
			//bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.IsPrimaryKeyMember && columnSchema.Name.Equals(strId) && columnSchema.IsForeignKeyMember) {
					//ANTERIOR
					//strNombreTablaPk=GetNombreClaseRelacionadaFromColumn(columnSchema,true);
					strNombreTablaPk=GetNombreClaseRelacionadaFromColumn(columnSchema);
					
					//blContiene=true;
					//Trace.WriteLine(strNombreTablaPk);
					break;
				}
			}
			
			//Trace.WriteLine(strNombreTablaPk);
			
			return strNombreTablaPk;			
		}
		
		public bool ContieneTextArea(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(columnSchema.DataType==DbType.AnsiString ||columnSchema.DataType==DbType.AnsiStringFixedLength ||columnSchema.DataType==DbType.String||columnSchema.DataType==DbType.StringFixedLength) {
					if(columnSchema.Size>50) {
						blContiene=true;
					}
					
					break;
				}
			}
			
			return blContiene;			
		}
		
		public bool ContieneStringColumn(TableSchema TablaBase){
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(EsStringColumnC(columnSchema)) {
					blContiene=true;										
					break;
				}
			}
			
			return blContiene;			
		}
		
		public bool ContieneImagen(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(EsPathImagenColumn(columnSchema)) {
					blContiene=true;
					break;
				}
			}
			
			return blContiene;			
		}
		
		public bool ContieneDocumento(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(EsPathDocumentoColumn(columnSchema)) {
					blContiene=true;
					break;
				}
			}
			
			return blContiene;			
		}
						
		public bool ContieneColumna(TableSchema TablaBase,String sNombrecolumna) {
			bool blContiene=false;
			
			blContiene=ContieneColumna(TablaBase,sNombrecolumna,false);
			
			return blContiene;
		}
		
		public bool ContieneColumna(TableSchema TablaBase,String sNombrecolumna,bool conEsReporteParametro) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(columnSchema.Name.Equals(sNombrecolumna)) {
					if(!conEsReporteParametro) {
						blContiene=true;
						break;
					} else {
						if(GetEsReporteParametroFromPropertiesC(columnSchema)) {
							blContiene=true;
							break;
						}
					}
				}
			}
			
			return blContiene;			
		}
		
		public bool ConSeguridadCampo(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
							
				if(GetConSeguridadColumnFromPropertiesC(columnSchema)) {
					blContiene=true;
					break;
				}
			}
			//System.Windows.Forms.MessageBox.Show(blContiene.ToString());
			return blContiene;			
		}
		
		public bool ConAuditoriaAuto(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			blContiene=GetConAutoAuditoriaTableFromProperties(TablaBase);
			//System.Windows.Forms.MessageBox.Show(blContiene.ToString());
			return blContiene;			
		}
		
		
		public bool ContieneLatitudLongitudCCFAC(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			bool blContieneLatitud=false;
			bool blContieneLongitud=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns) {				
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strVersionRow||columnSchema.Name==strId){continue; } 
				
				if(columnSchema.Name.Equals("Latitud")){
					blContieneLatitud=true;					
				}
				
				if(columnSchema.Name.Equals("Longitud")){
					blContieneLongitud=true;			
				}
				
				if(blContieneLatitud&&blContieneLongitud) {
					blContiene=true;
					break;
				}
			}
			
			return blContiene;			
		}
		
		public void CargarVariablesGlobalesTablaColumnasTieneC(TableSchema TablaBase) {
			String strNombrePanelFin="";
			String strNombrePanelInicio="";
			
			arrayPanelesFin=new ArrayList();
			arrayPanelesInicio=new ArrayList();
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)	{
				if(!blnTieneColumnaConRangoIndices) {
					if(GetConRangoBusquedasColumnFromPropertiesC(columnSchema)) {
						blnTieneColumnaConRangoIndices=true;
					}										
				}
				
				//PANEL FIN
				strNombrePanelFin=GetPanelFinNombreColumnFromPropertiesC(columnSchema,true);
				if(!strNombrePanelFin.Equals("")) {
					//Trace.WriteLine(strNombrePanelFin);
					if(!ExisteListaTextoC(arrayPanelesFin,strNombrePanelFin)) {
						arrayPanelesFin.Add(strNombrePanelFin);
					}
				}
				
				//PANEL INICIO
				strNombrePanelInicio=GetPanelInicioNombreColumnFromPropertiesC(columnSchema,true);
				if(!strNombrePanelInicio.Equals("")) {
					//Trace.WriteLine(strNombrePanelFin);
					if(!ExisteListaTextoC(arrayPanelesInicio,strNombrePanelInicio)) {
						arrayPanelesInicio.Add(strNombrePanelInicio);
					}
				}
			}
		}
		
		public bool ContieneImagenesC(TableSchema TablaBase) 
		{
			bool blContiene=false;
			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{				
				if((columnSchema.NativeType=="image"&&columnSchema.DataType==DbType.Binary&&columnSchema.Name!=strVersionRow)||(columnSchema.DataType==DbType.Binary&&columnSchema.Name!=strVersionRow))
				{
					 blContiene=true;
				}
			}
			return blContiene;
		
		}
	
	public TableSchema GetTablaDetalleClaseRelacionadaC(String strTabla,TableSchema TablaBase) 
	{
		TableSchema tablaRelacionada=null;
		String strBusquedaTablaClaseRelacionada="";
			strBusquedaTablaClaseRelacionada+="";
		Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
				
		foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
		{
			tablaRelacionada=GetTablaFromNombreC(collectionInfo.SecondaryTable,TablaBase);
							
			if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany&&strTabla.Contains(tablaRelacionada.Name))
			{
				break;			
			}
			else
			{
				tablaRelacionada=null;
			}
		}
				
		return tablaRelacionada;
	}

	public bool ExisteBusquedasIndicesTablasClasesC(TableSchema TablaBase) 
		{

			bool existe=false;
			
			
			String strTablaClaseRelacionada=string.Empty;
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes)
			{
			
				if(!indexSchema.IsPrimaryKey)
				{
					
					if(indexSchema.IsUnique)
					{
						continue;
					}
					else
					{
						existe=true;
						
						/*
						if(indexSchema.Name.Contains("FK") ||indexSchema.Name.Contains("fk"))
						{
						}
						*/
					}	
										
				}
				
			}
											
			return existe; 
		}
	
	public bool ExisteColumnaIndiceBusquedaC(TableSchema tableSchema,ColumnSchema columnSchema) {
			string strIndices="";
			string strDescription="";
			string strDescriptionParam="";
			
			bool blnExisteBusqueda=false;
			ColumnSchema columnSchemaIndice=null;
			
			foreach(IndexSchema indexSchema in tableSchema.Indexes) {
				if(!indexSchema.IsPrimaryKey) {					
					if(indexSchema.IsUnique) {
						
					} else {
						if(indexSchema.Name.Contains("Busqueda")) {
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
								columnSchemaIndice=memberColumnSchema.Column;
								
								if(columnSchemaIndice.Name.Equals(columnSchema.Name)) {
									blnExisteBusqueda=true;
									break;
								}
							}
							
							if(blnExisteBusqueda) {
								break;
							}
							//continue;
						} 	
						//strIndices+=indexSchema.Name;
					}																																			
				}
			}			
			
			return blnExisteBusqueda; 
	}

	public bool ExisteColumnaIndiceFechaBusquedaC(TableSchema tableSchema) {
			string strIndices="";
			string strDescription="";
			string strDescriptionParam="";
			
			bool blnExisteBusqueda=false;
			ColumnSchema columnSchemaIndice=null;
			
			foreach(IndexSchema indexSchema in tableSchema.Indexes) {
				if(!indexSchema.IsPrimaryKey) {					
					if(indexSchema.IsUnique) {
						
					} else {
						//if(indexSchema.Name.Contains("Busqueda")) {
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
								columnSchemaIndice=memberColumnSchema.Column;
								
								if(EsDateColumn(columnSchemaIndice)) {
									blnExisteBusqueda=true;
									break;
								}
							}
							
							if(blnExisteBusqueda) {
								break;
							}
							//continue;
						//} 	
						//strIndices+=indexSchema.Name;
					}																																			
				}
			}			
			
			return blnExisteBusqueda; 
	}
	
	public bool ExisteColumnaIndiceTiempoBusquedaC(TableSchema tableSchema) {
			string strIndices="";
			string strDescription="";
			string strDescriptionParam="";
			
			bool blnExisteBusqueda=false;
			ColumnSchema columnSchemaIndice=null;
			
			foreach(IndexSchema indexSchema in tableSchema.Indexes) {
				if(!indexSchema.IsPrimaryKey) {					
					if(indexSchema.IsUnique) {
						
					} else {
						//if(indexSchema.Name.Contains("Busqueda")) {
							foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
								columnSchemaIndice=memberColumnSchema.Column;
								
								if(EsTiempoColumn(columnSchemaIndice)) {
									blnExisteBusqueda=true;
									break;
								}
							}
							
							if(blnExisteBusqueda) {
								break;
							}
							//continue;
						//} 	
						//strIndices+=indexSchema.Name;
					}																																			
				}
			}			
			
			return blnExisteBusqueda; 
	}
	
	public  bool GetTableAuxiliarFromPropertiesC(TableSchema table,ref SchemaExplorer.TableSchemaCollection  tablasJunctionrelacionadas,ref SchemaExplorer.TableSchemaCollection tablasDetalleRelacionadas)
	{
		String nombreTabla="false";
		String nombreColumna="false";
			nombreColumna+="";
		String[] descripciones;
		String[] descripcionesColumna;
			descripcionesColumna=null;
		String[] tipo;
		String[] tipoColumna;
			tipoColumna=null;
		bool esRompimiento=false;
		bool puedeGenerarDetalle=true;
		ColumnSchema columnaSeleccionada;
		columnaSeleccionada=table.Columns[0];
		TableSchema tablaDetalleRelacionada;
		TableSchema junctionTableSchema;
		
		Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
				
		foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
		{
			
			if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
			{

				junctionTableSchema=collectionInfo.JunctionTableSchema;
				tablaDetalleRelacionada=collectionInfo.SecondaryTableSchema;
								
				if(junctionTableSchema.Description!="")
				{
					
					descripciones=table.Description.Split('|');
								
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
									
							if(tipo[0].Equals("NOTABLADETALLE"))
							{
								nombreTabla=tipo[1];
								
								if(nombreTabla.Equals(tablaDetalleRelacionada.Name))
								{
									puedeGenerarDetalle=false;
									break;
								}
							}
						}
				}
								
				if(puedeGenerarDetalle)
				{
					if(!esRompimiento)
					{
						esRompimiento=true;
					}
					
					puedeGenerarDetalle=true;
					
					tablasJunctionrelacionadas.Add(junctionTableSchema);
					tablasDetalleRelacionadas.Add(tablaDetalleRelacionada);
				}
				else
				{
					puedeGenerarDetalle=true;
				}
			}
		}
			
						
		
		return esRompimiento;
	}
	
	public static string GetCascadeTableFromPropertiesC(TableSchema table)
	{
		String nombreTabla="false";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
							
					if(tipo[0].Equals("DELCASCADE"))
					{
						nombreTabla=tipo[1];
						
						break;
					}
				}
		}
		
		return nombreTabla;
	}
	
	public static string GetDinamicoNombreAdicionalTableFromPropertiesC(TableSchema table) {
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("DIN_NOMBRE_ADDICIONAL"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetDinamicoNombreAdicionalTableFromPropertiesC(TableKeySchemaMe tableKeySchemaMe) {
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(tableKeySchemaMe.Description!="")
		{
			
			descripciones=tableKeySchemaMe.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("DIN_NOMBRE_ADDICIONAL"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public String GetDinamicoNombreAdicionalTableMeFromPropertiesC(TableSchema table){
		String strNombreAdicional="";
		bool existe=false;
		
		TableKeySchemaMe tableKeySchemaMe=null;
		
		existe=ExisteTablaRelacionadaMeC(arrayTablasRelacionadasMe,table);		
		
		if(existe) {
			tableKeySchemaMe=GetTablaRelacionadaMeEncontradaC(arrayTablasRelacionadasMe,table);
			strNombreAdicional=GetDinamicoNombreAdicionalTableFromPropertiesC(tableKeySchemaMe);
		}
		
		return strNombreAdicional;
	}
	
	public static string GetTituloNombreTableFromPropertiesC(TableSchema table)	{
		String nombreTabla=GetNombreClaseC(table.ToString()).ToUpper();
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBTITULO"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetTipoDescriptionGenericoTableFromPropertiesC(TableSchema table,String strTipo)	{
		String nombreTabla="";//GetNombreClaseC(table.ToString()).ToUpper();
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strTipo))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	//DONDE
	/*
	0->NOMBRE
	1->NUMERO COLUMNAS
	2->ALINEACION(CENTER,WEST,EAST)
	3->BORDE(NORMAL,NINGUNO,VACIO)
	4->Y --> (Antes X)
	5->X --> (Antes Y)
	6->COLSPAN
	7->ROWSPAN
	*/
	
	//|PANELCONUBICACION=true
	public static string GetPanelNumeroColumnasTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELNUMCOLUMNAS"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
		
	public static string GetValorPanelNumeroColumnasTableFromPropertiesC(TableSchema table,String strPanel,int indiceValor)	{
		String strPanelNumeroColumnas=GetPanelNumeroColumnasTableFromPropertiesC(table);
		String[] arrPanelNumeroColumnas=null;
		String strValorPanelNumeroColumnas="";
		int length=0;
		
			if(!strPanelNumeroColumnas.Equals("")) {
				//intNumeroColumnasSubPanelForm
				arrPanelNumeroColumnas=strPanelNumeroColumnas.Split(';');
				
				foreach(String strPanelNumeroColumnasAux in arrPanelNumeroColumnas) {
					arrPanelNumeroColumnas=strPanelNumeroColumnasAux.Split(',');
					
					if((arrPanelNumeroColumnas[0]!=null && arrPanelNumeroColumnas[0].Equals(strPanel)) //strPanelFin
						//|| (arrPanelNumeroColumnas[0]!=null && arrPanelNumeroColumnas[0].Equals(strPanelInicio))
					) {
						
						length=arrPanelNumeroColumnas.Length;
						
						//Trace.WriteLine("LENGTH="+length);
						//Trace.WriteLine("INDICE="+indiceValor);
						
						if(indiceValor<(length - 1)) {
							
							//Trace.WriteLine("here");
							
							if(arrPanelNumeroColumnas[indiceValor]!=null) {
								strValorPanelNumeroColumnas=arrPanelNumeroColumnas[indiceValor];
								//Trace.WriteLine(strValorPanelNumeroColumnas);
							}
						}
					}
				}
			}
			
		return strValorPanelNumeroColumnas;
	}
	
	public static string GetPanelNumeroRelacionesTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELNUMRELACIONES"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetPanelTamanioGlobalTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="NORMAL";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELTAM"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetPanelTamanioTablaGlobalTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="NORMAL";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELTAM_TABLA"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetPanelColSpanGlobalTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELCOLSPAN"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public string GetTituloNombreTableLowerFromPropertiesC(TableSchema table)	{
		String nombreTabla=GetNombreClaseC(table.ToString()).ToUpper();
		String[] descripciones;
		String[] tipo;
		bool existe=false;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBTITULOLOWER"))
							{
								nombreTabla=tipo[1];
								existe=true;
								break;
							}
						}
		}
		
		if(!existe) {
			nombreTabla=GetWebNameDescriptionTableBaseC(table,true,false);
		}
		
		return nombreTabla;
	}
	
	public String GetWebNameDescriptionColumnBaseC(ColumnSchema columnSchema,bool blnEsLowerCase,bool conClaveDescripcion) {
		String strDescritionTabla=string.Empty;
		
		String strNameTable=string.Empty;
		String strCharNameTable=string.Empty;
		bool esPrimeraVez=true;
		String strColumnName=string.Empty;
		
		if(!columnSchema.IsForeignKeyMember) {
			//Trace.WriteLine(columnSchema.Name);
			
			//DESHABILITAR, NO REEMPLAZAR SI NO ES ID, PUEDEN EXISTIR COLUMNAS CON ID EN MEDIO NOMBRE
			/*
			if(!columnSchema.Name.Equals(strId)) {
				strColumnName=columnSchema.Name.Replace(strId,"");
			} else {
				strColumnName=columnSchema.Name;
			}			
			*/
			
			strColumnName=columnSchema.Name;
			
			
			//ANTES
			/*
			if(columnSchema.Name.Equals(strVersionRow)) {
				esPrimeraVez=false;
			}
			
			foreach(Char charName in strColumnName.ToCharArray()) {
				strCharNameTable=charName.ToString();
				
				if(Char.IsUpper(charName)) {
					if(!esPrimeraVez) {
						strCharNameTable=" "+charName.ToString();//.ToLower();;
					} else {
						esPrimeraVez=false;
					}
				}
				
				strNameTable+=strCharNameTable;
			}
			*/
			
			strNameTable=GetNombreConMixedCaseC(columnSchema.Name);
			
		} else {
			//Trace.WriteLine(columnSchema.Name);
			 //strColumnName=columnSchema.Name.Replace("id","");
			strColumnName=ReplaceFirst(columnSchema.Name,"id","");
			
			/*
			foreach(Char charName in strColumnName.ToCharArray()) {
				strCharNameTable=charName.ToString();
				
				if(Char.IsUpper(charName)) {
					if(!esPrimeraVez) {
						strCharNameTable=" "+charName.ToString();//.ToLower();;
					} else {
						esPrimeraVez=false;
					}
				}
				
				strNameTable+=strCharNameTable;
			}
			*/
			
			strNameTable=GetNombreConMixedCaseC(strColumnName);
		}
	
		//LOS LABELS SIEMPRE VAN HACER MAYUSCULAS
		//if(!blnEsLowerCaseDBNames)
		//{
		
		if(!blnEsLowerCase) {
			//strNameTable=strNameTable.ToUpper();
		}
		
		//}
		
		if(conClaveDescripcion) {
			strDescritionTabla+="|WEBTITULO=";
		}
		
		strDescritionTabla+=strNameTable;
		
		//Trace.WriteLine(strDescritionTabla);
	
		return strDescritionTabla;
	}

	public string ReplaceFirst(string text, string search, string replace)
	{
	int pos = text.IndexOf(search);
	if (pos < 0)
	{
		return text;
	}
	return text.Substring(0, pos) + replace + text.Substring(pos + search.Length);
	}

	public String GetWebNameDescriptionTableBaseC(TableSchema tableSchema,bool blnEsLowerCase,bool conClaveDescripcion) 
	{
		String strDescritionTabla=string.Empty;
		
		String strNameTable=string.Empty;
		String strCharNameTable=string.Empty;
		bool esPrimeraVez=true;
		
		/*
		foreach(Char charName in tableSchema.Name.ToCharArray())
		{
			strCharNameTable=charName.ToString();
			
			if(Char.IsUpper(charName))
			{
				if(!esPrimeraVez)
				{
					strCharNameTable=" "+charName.ToString();//.ToLower();;
				}
				else
				{
					esPrimeraVez=false;
				}
			}
			
			strNameTable+=strCharNameTable;
		}
		
		if(!blnEsLowerCaseDBNames)
		{
			if(blnEsMixedCaseDBNames) {
				strNameTable=strNameTable;
			} else {
				strNameTable=strNameTable.ToUpper();
			}
			
		}
		
		//LOS LABELS SIEMPRE VAN HACER MAYUSCULAS
		//if(!blnEsLowerCaseDBNames)
		//{
			if(!blnEsLowerCase) {
				strNameTable=strNameTable.ToUpper();
			}
		//}
		
		*/
		strNameTable=GetNombreConMixedCaseC(tableSchema.Name);
		
		if(conClaveDescripcion) {
			strDescritionTabla+="|WEBTITULO=";
		}
		
		strDescritionTabla+=strNameTable;
		
		
		return strDescritionTabla;
	}

	public static string GetTituloBusquedaNombreTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=String.Empty;;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBTITULOBUS"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetTituloNombreBotonTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=string.Empty;//GetNombreClaseC(table.ToString()).ToUpper();
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBTITULOBOTON"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetAnchoAltoAuxiliarTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WHAUX"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public string GetAnchoAuxiliarTableFromPropertiesC(TableSchema table)
	{
		String strAnchoAuxiliar="";
		String nombreTabla="";
		nombreTabla=GetAnchoAltoAuxiliarTableFromPropertiesC(table);
		
		//EL ANCHO YA TOMA EN CUENTA UNA COLUMNA
		int intNumeroColumnasForm=GetAlignVerticalFormNumeroColumnasTableC(table);
			intNumeroColumnasForm--;
			
		int intAnchoNumeroColumnas=intNumeroColumnasForm*280;
		int intAncho=0;
		
		if(nombreTabla.Equals("")) {
			if(blnTieneImagen || blnTieneDocumento || blnTieneTextArea) {
				intAncho=400+intAnchoNumeroColumnas;
				strAnchoAuxiliar=intAncho.ToString();
			} else {
				intAncho=330+intAnchoNumeroColumnas;
				strAnchoAuxiliar=intAncho.ToString();
			}
		} else {
			strAnchoAuxiliar=nombreTabla.Split(',')[0];
		}
		//Trace.WriteLine(strAnchoAuxiliar);
		return strAnchoAuxiliar;
	}
	
	public static string GetAltoAuxiliarTableFromPropertiesC(TableSchema table)
	{
		String strAnchoAuxiliar="";
		String nombreTabla="";
		nombreTabla=GetAnchoAltoAuxiliarTableFromPropertiesC(table);
		int intValorTotal=0;
		int intValorBase=150;
		int intValorBasePorColumna=85;
		
		int intNumeroColumnas=GetNumeroColumnasC(table);
		
		
		if(nombreTabla.Equals("")) {
			intValorTotal=intValorBase+(intNumeroColumnas*intValorBasePorColumna);
			
			//System.Windows.Forms.MessageBox.Show(intValorTotal.ToString());
			
			if(intValorTotal<400) {
				strAnchoAuxiliar=intValorTotal.ToString();
			} else if (intValorTotal<600 && intNumeroColumnas<=4) {
				strAnchoAuxiliar="350";
			} else {
				strAnchoAuxiliar="500";
			}
			
		} else {
			strAnchoAuxiliar=nombreTabla.Split(',')[1];
		}
		
		return strAnchoAuxiliar;
	}
	
	public static string GetTopAuxiliarTableFromPropertiesC(TableSchema table)
	{
		String strAnchoAuxiliar="";
		String nombreTabla="";
		nombreTabla="";//GetAnchoAltoAuxiliarTableFromPropertiesC(table);
		int intValorTotal=0;
		int intValorBase=200;
		int intValorBasePorColumna=35;
		
		int intNumeroColumnas=GetNumeroColumnasC(table);
		
		if(nombreTabla.Equals("")) {
			strAnchoAuxiliar="200";
			
			intValorTotal=intValorBase-(intNumeroColumnas*intValorBasePorColumna);
			
			//System.Windows.Forms.MessageBox.Show(intValorTotal.ToString());
			
			if(intValorTotal<=0) {
				strAnchoAuxiliar="40";
				
			} else if(intValorTotal<200&&intNumeroColumnas<=4) {
				strAnchoAuxiliar="200";
				
			} else {
				strAnchoAuxiliar=intValorTotal.ToString();
			}
			
		} else {
			strAnchoAuxiliar=nombreTabla.Split(',')[0];
		}
		
		return strAnchoAuxiliar;
	}
	
	public static int GetNumeroColumnasC(TableSchema TablaBase)
	{
		int intNumeroColumnas=0;
		
		for (int i = 0; i < TablaBase.Columns.Count; i++){ 
			if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; }
			intNumeroColumnas++;
		}
		
		return intNumeroColumnas;
	}
	
	public static int GetNumeroColumnasPkC(TableSchema TablaBase)
	{
		int intNumeroColumnas=0;
		
		for (int i = 0; i < TablaBase.Columns.Count; i++){ 
			//if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; }
			if(TablaBase.Columns[i].IsPrimaryKeyMember) {
				intNumeroColumnas++;
			}
		}
		
		return intNumeroColumnas;
	}
	
	public static bool GetEsIgnorarTableFromPropertiesC(TableSchema table)
	{
	bool nombreTabla=false;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("IGNORAR"))
						{
							nombreTabla=true;
							break;
						}
					}
	}		
	//System.Windows.Forms.MessageBox.Show(nombreTabla.ToString());
	return nombreTabla;
	}
	
	public string GetAlignTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="center";
	
	if(GetAlignHorizontalParameterTableC(table)>100) {
		nombreTabla="left";
	}
	
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("ALIGN"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public int GetAlignHorizontalParameterTableC(TableSchema table)
	{
		//String nombreTabla="center";
		int intCountLimiteCenter=0;
		
		foreach(ColumnSchema columnSchema in table.Columns) {
			if(EsAutoAuditoriaColumnC(columnSchema)||columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||/*columnSchema.Name==strId||*/columnSchema.Name==strVersionRow) {
				continue; 
			} 
			
			intCountLimiteCenter+=GetValorHorizontalWebColumnaClaseC(columnSchema);
		}	
		
		return intCountLimiteCenter;
	}
	
	public int GetAlignVerticalParameterTableC(TableSchema table)
	{
		//String nombreTabla="center";
		int intCountLimiteCenter=0;
		
		foreach(ColumnSchema columnSchema in table.Columns) {
			if(EsAutoAuditoriaColumnC(columnSchema)||columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||/*columnSchema.Name==strId||*/columnSchema.Name==strVersionRow) {
				continue; 
			} 
			
			intCountLimiteCenter+=GetValorVerticalWebColumnaClaseC(columnSchema);
		}	
		
		return intCountLimiteCenter;
	}
	
	public int GetAlignVerticalFormNumeroColumnasTableC(TableSchema table)
	{
		//String nombreTabla="center";
		int intCountLimiteCenter=0;
		int intCountNumeroColumnasAbsoluto=0;
		int intCountNumeroColumnas=0;
		int intValorLimite=100;
		int intNumeroColumnasFromProperties=0;
		
		intNumeroColumnasFromProperties=GetNumeroColumnasTableFromPropertiesC(table);
		
		if(intNumeroColumnasFromProperties<=0) {
			intCountLimiteCenter=GetAlignVerticalParameterTableC(table);
			//Trace.WriteLine("No Total Columnas:"+intCountLimiteCenter);
			
			if(intCountLimiteCenter>intValorLimite) {
				intCountNumeroColumnasAbsoluto=intCountLimiteCenter/intValorLimite;
				
				//Trace.WriteLine("No Total Form Columnas:"+intCountNumeroColumnasAbsoluto);
				
				int intResiduo= intCountLimiteCenter % intValorLimite;
				
				//Trace.WriteLine("RESIUDO"+intResiduo);
				
				if(intResiduo>=30) {
					intCountNumeroColumnasAbsoluto++;
				}
	
				if(intCountNumeroColumnasAbsoluto>0) {
					intCountNumeroColumnas=intCountNumeroColumnasAbsoluto;
				} else {
					intCountNumeroColumnas=1;
				}
			} else {
				intCountNumeroColumnas=1;
			}
		}  else {
			intCountNumeroColumnas=intNumeroColumnasFromProperties;
		}
		
		return intCountNumeroColumnas;
	}
	
	public static string GetWidthBusquedaTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("TAMBUSQUEDA"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetWidthAltoMaximoTablaFromPropertiesC(TableSchema table,bool esParaWeb,bool esTablaRelacionado)
	{
	String nombreTabla="Constantes.ISWING_TAMANIOMAXIMO_TABLADATOS";
	
	if(esTablaRelacionado) {
		nombreTabla="Constantes.ISWING_TAMANIOMAXIMO_TABLADATOSREL";
	}
	
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("ALTOMAXTABLA"))
						{
							nombreTabla=tipo[1];
							
							if(!esParaWeb) {
								nombreTabla=tipo[1].Split(',')[0];
							} else {
								nombreTabla=tipo[1].Split(',')[1];
							}
							
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetWidthAltoMinimoTablaFromPropertiesC(TableSchema table,bool EsSwing,bool esTablaRelacionado)
	{
	String nombreTabla="Constantes.ISWING_TAMANIOMINIMO_TABLADATOS";
	
	if(esTablaRelacionado) {
		nombreTabla="Constantes.ISWING_TAMANIOMINIMO_TABLADATOSREL";
	}
	
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("ALTOMINTABLA"))
						{
							nombreTabla=tipo[1];
							
							if(EsSwing) {
								nombreTabla=tipo[1].Split(',')[0];
							} else {
								nombreTabla=tipo[1].Split(',')[1];
							}
							
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetWidthAltoTabPanelRelacionesTableFromPropertiesC(TableSchema table,bool EsSwing)
	{
	String nombreTabla=SWING_HEIGHT_TABPANE_RELACIONES;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("ALTOTABPANELREL"))
						{
							nombreTabla=tipo[1];
							
							if(EsSwing) {
								nombreTabla=tipo[1].Split(',')[0];
							} else {
								nombreTabla=tipo[1].Split(',')[1];
							}
							
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static int GetNumeroColumnasTableFromPropertiesC(TableSchema table)
	{
	int intNumerocolumnas=0;
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NUMCOLUMNAS"))
						{
							nombreTabla=tipo[1];
							intNumerocolumnas=int.Parse(nombreTabla);
							break;
						}
					}
	}							
	return intNumerocolumnas;
	}
	
	public static int GetNumeroXExtraTableFromPropertiesC(ColumnSchema column)
	{
	int intNumerocolumnas=0;
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(column.Description!="")
	{
		
		descripciones=column.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NUMXEXTRA"))
						{
							nombreTabla=tipo[1];
							intNumerocolumnas=int.Parse(nombreTabla);
							break;
						}
					}
	}							
	return intNumerocolumnas;
	}
		
	public static int GetNumeroYExtraTableFromPropertiesC(ColumnSchema column)
	{
	int intNumerocolumnas=0;
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(column.Description!="")
	{
		
		descripciones=column.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NUMYEXTRA"))
						{
							nombreTabla=tipo[1];
							intNumerocolumnas=int.Parse(nombreTabla);
							break;
						}
					}
	}							
	return intNumerocolumnas;
	}
	
	public static int GetNumeroWheresTableFromPropertiesC(TableSchema table)
	{
	int intNumerocolumnas=0;
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NUMWHERES"))
						{
							nombreTabla=tipo[1];
							intNumerocolumnas=int.Parse(nombreTabla);
							break;
						}
					}
	}							
	return intNumerocolumnas;
	}
	
	public static int GetNumeroColumnasExtraTablaTableFromPropertiesC(TableSchema table)
	{
	int intNumerocolumnas=0;
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NUMCOLUMNASEXTRA"))
						{
							nombreTabla=tipo[1];
							intNumerocolumnas=int.Parse(nombreTabla);
							break;
						}
					}
	}							
	return intNumerocolumnas;
	}
	
	public static int GetNumeroPaginacionTableFromPropertiesC(TableSchema table)
	{
	int intNumerocolumnas=0;
	String nombreTabla="50%";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NUMPAG"))
						{
							nombreTabla=tipo[1];
							intNumerocolumnas=int.Parse(nombreTabla);
							break;
						}
					}
	}							
	return intNumerocolumnas;
	}
	
	public static string GetNombreTableForeingKeyFromPropertiesC(TableSchema table)
	{
	String nombreTabla=GetNombreTableFromProperties(table);
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NOMBREFK"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetConAtrasTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="false";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBCONATRAS"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	#region NO VALIDACIONES
	public static bool GetNoIdTableFromPropertiesC(TableSchema table) {
		bool blnNoId=false;
		String nombreTabla="s";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones) {
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null) {
								if(tipo[0].Equals("NOID")) {
									nombreTabla=tipo[1];
									blnNoId=true;
									break;
								}
							}
						}
		}
		
		return blnNoId;
	}
	
	public static bool GetNoIdentityTableFromPropertiesC(TableSchema table) {
		bool blnNoIdentity=false;
		String nombreTabla="s";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones) {
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null) {
								if(tipo[0].Equals("NOIDENTITY")) {
									nombreTabla=tipo[1];
									blnNoIdentity=true;
									break;
								}
							}
						}
		}
		
		return blnNoIdentity;
	}
	
	public static bool GetNoVersionRowTableFromPropertiesC(TableSchema table) {
		bool blnNoVersionRow=false;
		String nombreTabla="s";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones) {
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null) {
								if(tipo[0].Equals("NOVERSIONROW")) {
									nombreTabla=tipo[1];
									blnNoVersionRow=true;
									break;
								}
							}
						}
		}
		
		return blnNoVersionRow;
	}
	
	public bool GetNoStandardTableFromPropertiesC(TableSchema table) {
		bool blnNoStandard=false;
		String nombreTabla="s";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones) {
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null) {
								if(tipo[0].Equals("NOSTANDARD")) {
									nombreTabla=tipo[1];
									blnNoStandard=true;
									break;
								}
							}
						}
		}
		
		return blnNoStandard;
	}
	#endregion 
	// SE CUMPLE SI Y SOLO SI  NO TIENE LAS 2 COLUMNAS ID Y VERSIONROW
	public bool GetStandardTableC(TableSchema table) {
		bool blnStandard=false;
		bool blnNoStandardFromProperties=false;
		bool blnTieneId=false;
		bool blnTieneVersionRow=false;
		
		blnNoStandardFromProperties=GetNoStandardTableFromPropertiesC(table);
		
		if(blnNoStandardFromProperties) {
			return false;
		}
		
		for (int i = 0; i < table.Columns.Count; i++){ 
			if(table.Columns[i].Name.Equals(strId)){
				blnTieneId=true;
			
			} else if(table.Columns[i].Name.Equals(strVersionRow)){
				blnTieneVersionRow=true;
			}
			
			if(blnTieneId&&blnTieneVersionRow) {
				break;
			}
 		} 
		
		/*
		//AUNQUE NO TENGA VERSIONROW PERO SI INDICA QUE SOLO ESA COLUMNA NO TIENE, AUN LA TABLA PUEDE SER ALGO STANDARD (SOLO ID)
		if(!blnTieneVersionRow&&GetNoVersionRowTableFromPropertiesC(table)) {
			blnTieneVersionRow=true;
		}
		*/
		
		blnStandard=blnTieneId&&blnTieneVersionRow;
		
		return blnStandard;
	}
	
	public static string GetPluralTituloNombreTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="S";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("WEBPLURAL"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla.ToLower();
	}
	
	public static string GetFinalQueryTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("FINALQUERY"))
							{
								nombreTabla=tipo[1];
								nombreTabla=nombreTabla.Replace("()","=");
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public  string GetFinalQueryTableC(TableSchema TablaBase) {	
		string strFinalQuery="";
		
		strFinalQuery=GetFinalQueryTableFromPropertiesC(TablaBase);
		
		//System.Windows.Forms.MessageBox.Show(strFinalQuery);
		
		if(strFinalQuery.Equals("")) {
			if(!blnEsReporte) {
				strFinalQuery="Constantes.SFINALQUERY";
			} else {
				strFinalQuery="\"\"";	
			}
		} else {
			strFinalQuery="\" "+strFinalQuery+"\" ";
		}
		
		return strFinalQuery;
	}
	
	public static string GetSessionKeyQueryTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("SESSIONKEYQUERY"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetPrefijoSqlIdTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("PREFIJOID"))
							{
								nombreTabla=tipo[1];
								nombreTabla=nombreTabla.Replace("()","=");
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetPrefijoSqlTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("PREFIJOSQL"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetPrefijoSqlTableFromPropertiesC(ColumnSchema columnSchema)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(columnSchema.Description!="")
	{
		
		descripciones=columnSchema.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("PREFIJOSQL"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetSufijoRegexTableFromPropertiesC(ColumnSchema columnSchema)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(columnSchema.Description!="")
	{
		
		descripciones=columnSchema.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("SUFIJOREGEX"))
							{
								nombreTabla="_"+tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
			
	public static string GetSqlWhereColumnFromPropertiesC(ColumnSchema columnSchema)
	{
	String nombreTabla=string.Empty;
	String[] descripciones;
	String[] tipo;
	
	if(columnSchema.Description!="")
	{
		
		descripciones=columnSchema.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("SQLWHERE"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
		
	public string GetRelativePathC(TableSchema table) {
		String strRelativePath=strPrefijoRelativePath;
		
		String strRelativePathFromTableProperties=GetRelativePathNavegacionFromTableFromPropertiesC(table);
		String strPath=String.Empty;
		
		String[] strRelativePathsFromTableProperties=strRelativePathFromTableProperties.Split('/');
		bool blnEsPrimera=true;
		
		foreach(String strRelativePathFromTable in strRelativePathsFromTableProperties) {
			if(!blnEsPrimera) {
				strPath+="../";
			} else {
				blnEsPrimera=false;
			}			
		}
		
		String strPathModulo=String.Empty;
		bool blnEsPrimeraModulo=true;
		
		String strModuloActual=Module.Replace(".","/");
		
		String[] strRelativePathsModuloFromTableProperties=strModuloActual.Split('/');
				
		foreach(String strRelativePathModuloFromTable in strRelativePathsModuloFromTableProperties) {
			if(!blnEsPrimeraModulo) {
				//Trace.WriteLine("line-"+blnEsPrimera);
				strPathModulo+="../";
			} else {
				blnEsPrimeraModulo=false;
			}			
		}
		
		String strRelativePathReporte=GetEsPaqueteRelativePathReporteC(table);
		
		String strRelativePathSistemaPaquete="../";
		
		return strRelativePath+strRelativePathReporte+strPath+strPathModulo+strRelativePathSistemaPaquete;
	}		
	
	public static string GetRelativePathNavegacionFromTableFromPropertiesC(TableSchema table) {
		String nombreTabla="";
		
		nombreTabla=GetRelativePathNavegacionFromTableFromPropertiesC(table,false);
		
		return nombreTabla;
	}
	
	public static string GetRelativePathNavegacionFromTableFromPropertiesC(TableSchema table,bool conLower)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="") {		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones) {
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null) {
							if(tipo[0].Equals("PAQUETE")) {
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}
	
		if(nombreTabla=="" && table.Owner!="dbo") {
			nombreTabla=table.Owner;
			
			if(conLower) {
				nombreTabla=nombreTabla.ToLower();
			}
		}
	
		return nombreTabla;
	}
	
	public static string GetModuloDominioConstanteFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="") {		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones) {
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null) {
							if(tipo[0].Equals("MODULODOMI")) {
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}		
	
		return nombreTabla;
	}
	
	public static string GetModuloDominioConstanteFromColumnFromPropertiesC(ColumnSchema column)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(column.Description!="") {		
		descripciones=column.Description.Split('|');
					
					foreach(String descripcion in descripciones) {
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null) {
							if(tipo[0].Equals("MODULODOMI")) {
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}		
	
		return nombreTabla;
	}
	
	/*
	public static string GetSchemaTableC(TableSchema table,String Package)	{
		String nombreTabla="";
		
		if(Package=="" && table.Owner!="dbo") {
			nombreTabla=table.Owner;
		} else {
			nombreTabla=Package;
		}
	
		return nombreTabla;
	}
	*/
	
	public static string GetRelativePathNavegacionFromModuleActualC(TableSchema table)
	{
		/*
		
		nombreTabla=Module.Replace(".","/");
		*/
		String nombreTabla="";
		
		nombreTabla=GetRelativePathNavegacionFromModuleActualC(table,false);
	return nombreTabla;
	}
	
	public static string GetRelativePathNavegacionFromModuleActualC(TableSchema table,bool blnForzarPorTabla)
	{
		String nombreTabla="";
	
		if(!blnForzarPorTabla) {
			nombreTabla=Module.Replace(".","/");
		} else {
			nombreTabla=GetModuloPaqueteJavaFromTableFromPropertiesC(table);
		}
	return nombreTabla;
	}
	
	public static string GetModuloPaqueteJavaFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=string.Empty;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("PAQUETEJAVA"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	
	if(nombreTabla==string.Empty && table.Owner!="dbo") {
		nombreTabla=table.Owner.ToLower();
		//Trace.WriteLine(nombreTabla);
	} else {
		//Trace.WriteLine("none");	
	}
	
	return nombreTabla;
	}
	
	public static string GetPaqueteJavaTotalFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=string.Empty;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("PAQUETEJAVATOTAL"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
			
	return nombreTabla;
	}
	
	public static bool GetConPaqueteJavaGlobalFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=string.Empty;
	bool blnConPaqueteJavaGlobal=false;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CONPAQUETEJAVAGLOBAL"))
							{
								nombreTabla=tipo[1];
								if(tipo[1].Equals("true"))
								{								
								blnConPaqueteJavaGlobal=true;
								break;
								}
							}
						}
					}
	}							
	return blnConPaqueteJavaGlobal;
	}
	
	public static string GetAccionesFromTableFromPropertiesC(TableSchema table) {
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("ACCIONES"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetNombresClasesNoNavegacionFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESNO"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresClasesNoMostrarFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESNOMOSTRAR"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresClasesSiNavegacionFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESSI"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresClasesSiDeepLoadFkFromTableFromPropertiesC(ColumnSchema column)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(column.Description!="")
	{
		
		descripciones=column.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESSI"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static bool GetOnChangeParentFromColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		bool blnNoEdit=false;
		
		if(column.Description!="")
		{
			
			descripciones=column.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("ONCHANGEPARENT"))
								{
									nombreTabla=tipo[1];
								 	blnNoEdit=true;
								
									break;
								}
							}
						}
		}							
		
		//return nombreTabla;
		
		return blnNoEdit;
	}
	
	public static string GetOnChangeParentFromTableFromPropertiesC(TableSchema table)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("ONCHANGEPARENT"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetNombresClasesSiOnChangeFromColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(column.Description!="")
		{
			
			descripciones=column.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("CLASESSIONCHANGE"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetNombresClasesSiOnChangeParentFromColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(column.Description!="")
		{
			
			descripciones=column.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("CLASESSIONCHANGE_PARENT"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetNombresClasesSiOnChangeFromTableFromPropertiesC(TableSchema table)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("CLASESSIONCHANGE"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetNombresClasesSiMostrarFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESSIMOSTRAR"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresClasesParametroFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESPARAM"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresClasesNoPersistenciaFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESPERSISTENCENO"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static bool ExisteNombresClasesNoPersistenciaFromTableFromPropertiesC(TableSchema tableOrigen,TableSchema tableRelacionada)
	{
		String nombreTabla="";
		String strClasesNoRelacionadas=GetNombresClasesNoPersistenciaFromTableFromPropertiesC(tableOrigen);
				
		String[] strClases=strClasesNoRelacionadas.Split(',');
				
		bool blClaseNo=false;
				
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(GetNombreClaseC(tableRelacionada.ToString())))
					{
						blClaseNo=true;
						break;
					}
				}
					
				
		return blClaseNo;
	}
	
	public static string GetNombresClasesOrdenNavegacionFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESORDENR"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresIndicesNoBusquedanFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("INDICESNO"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresIndicesSiBusquedanFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("INDICESSI"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetNombresClasesFkDisableBusquedaFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals("CLASESFKDISABLE"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetKeyNombresIndicesNoBusquedaFromTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0]!=null)
						{
							if(tipo[0].Equals(strKEYINDICESNO))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
					}
	}							
	return nombreTabla;
	}
	
	public bool VerificarIndiceBusquedaTablaC(TableSchema table,String strNombreIndice) {
			String strTablaClaseRelacionada=string.Empty;
			
			TableSchema tablaRelacionadaObjetivo;
						tablaRelacionadaObjetivo=null;
						
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String strClasesSiRelacionadas=string.Empty;
			String[] strClases;
			String[] strClasesSi;
			bool blVerificado=true;
			bool blVerificadoSi=false;
			
			//INDICESSI
			strClasesSiRelacionadas=GetNombresIndicesSiBusquedanFromTableFromPropertiesC(table);
			strClasesSi=strClasesSiRelacionadas.Split(',');
			
			if(strClasesSiRelacionadas!="") {
				
				
				blVerificadoSi=false;
				foreach(String strClase in strClasesSi) {		
					//Trace.WriteLine(strClase);
					if(strClase.Trim().Equals(strNombreIndice.Trim())) {
						//Trace.WriteLine(strClase);
						//Trace.WriteLine(strClase+strSimboloDosPuntos+strNombreIndice);
						blVerificadoSi=true;
						break;
					}
				}
				
				if(!blVerificadoSi) {
					blVerificado=false;
				}
				
				//Trace.WriteLine(blVerificado+strSimboloDosPuntos+strNombreIndice);				
			}
			
			
			//INDICESNO
			strClasesNoRelacionadas=GetNombresIndicesNoBusquedanFromTableFromPropertiesC(table);
			//Trace.WriteLine(strClasesNoRelacionadas);
			
			strClases=strClasesNoRelacionadas.Split(',');
			
			//Trace.WriteLine(strClasesNoRelacionadas);
			
				//Trace.WriteLine(strNombreIndice);
				//Trace.WriteLine(strClasesNoRelacionadas);
			
				foreach(String strClase in strClases) {		
					//Trace.WriteLine(strClase);
					if(strClase.Trim().Equals(strNombreIndice.Trim())) {
						//Trace.WriteLine(strClase);
						//Trace.WriteLine(strClase+strSimboloDosPuntos+strNombreIndice);
						blVerificado=false;
						break;
					}
				}
			
			//Trace.WriteLine("-------------------------------");
			//Trace.WriteLine(strNombreIndice+"->"+blVerificado);
			
			String strKeyClasesNoRelacionadas=GetKeyNombresIndicesNoBusquedaFromTableFromPropertiesC(table);
			//Trace.WriteLine(strKeyClasesNoRelacionadas);
			if(strKeyClasesNoRelacionadas!=""&&strNombreIndice.Contains(strKeyClasesNoRelacionadas)) {
				blVerificado=false;
			}
			
			//Trace.WriteLine(strNombreIndice+"->"+blVerificado);
			
			return blVerificado; 
	}
		
	public bool VerificarClaseFkBusquedaTablaC(TableSchema table,String strNombreClaseFk) 
		{
			String strTablaClaseRelacionada=string.Empty;
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String strClasesNoRelacionadas=string.Empty;
			String[] strClases;
			bool blVerificado=true;
			
	
				strClasesNoRelacionadas=GetNombresClasesFkDisableBusquedaFromTableFromPropertiesC(table);
				
				strClases=strClasesNoRelacionadas.Split(',');
				
								
				foreach(String strClase in strClases)
				{						
					if(strClase.Equals(strNombreClaseFk))
					{
						blVerificado=false;
						break;
					}
				}
				
			
			return blVerificado; 
		}
		
	public  bool VerificarTablaRelacionFromPropertiesC(TableSchema tableRelacionada)
	{
	
		bool verificado=true;
		
		String[] descripciones;
		String[] tipo;
		String relacion;
		
		if(tableRelacionada.Description!="")
		{
			
			descripciones=tableRelacionada.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBRELACIONESNO"))
							{
								relacion=tipo[1];
																
								if(relacion=="false")
								{
									verificado=false;
									break;
								}
																
							}
						}
		}
		
		return verificado;
	}	
	
	public bool VerificarColumnaUsuarioCatalogoGeneralC(ColumnSchema columnSchema) {
		bool blnVerificado=false;
		
		bool blnEsTablaAuditoriaAuto=false;		
		bool blnEsColumnaUsuario=false;
		
		blnEsTablaAuditoriaAuto=GetConAutoAuditoriaTableFromProperties(columnSchema.Table);
		
		if(blnEsTablaAuditoriaAuto) {
			if(columnSchema.Name.Contains("UsuarioUpdate")||columnSchema.Name.Contains("UsuarioInsert")) {
				blnEsColumnaUsuario=true;
			}
		}
		
		if(blnEsTablaAuditoriaAuto && blnEsColumnaUsuario) {
			blnVerificado=true;
		}
		
		return blnVerificado;
		
	}
	
	public bool VerificarColumnaCatalogoGeneralC(ColumnSchema columnSchema)
	{
	bool blnVerificado=false;
	bool blnTieneNombreColumnaValor=false;
	bool blnTieneNombreTablaValor=false;
	bool blnTieneNombreColumnaLista=false;
	bool blnTieneNombreTablaLista=false;
	
	TableSchema tableSchemaFkValor=null;
	ColumnSchema columnSchemaValorEncontrado=null;
	TableSchema tableSchemaFkLista=null;
	
	if(columnSchema.Name.Contains(strCatalogoGeneralValor)) {
		blnTieneNombreColumnaValor=true;
		
	}
	
	if(blnTieneNombreColumnaValor) {
		tableSchemaFkValor=GetTableSchemaFromColumnForeignKey(columnSchema);
		
		if(tableSchemaFkValor!=null) {
			//Trace.WriteLine("Tiene Table");
		if(tableSchemaFkValor.Name.Contains(strCatalogoGeneralValor)) {
			blnTieneNombreTablaValor=true;
		}
		
		if(blnTieneNombreTablaValor) {
			foreach (ColumnSchema columnSchemaValor in tableSchemaFkValor.Columns){	
				if(columnSchemaValor.IsForeignKeyMember && columnSchemaValor.Name.Contains(strCatalogoGeneralLista)) {
					blnTieneNombreColumnaLista=true;
					columnSchemaValorEncontrado=columnSchemaValor;
					break;
				}
			}
			
			if(blnTieneNombreColumnaLista) {
				tableSchemaFkLista=GetTableSchemaFromColumnForeignKey(columnSchemaValorEncontrado);
				
				if(tableSchemaFkLista.Name.Contains(strCatalogoGeneralLista)) {
					blnTieneNombreTablaLista=true;
				}
			}
		}
		}
	}
	
		if(blnTieneNombreColumnaValor && blnTieneNombreTablaValor && blnTieneNombreColumnaLista && blnTieneNombreTablaLista) {
			blnVerificado=true;
		} else {
			blnVerificado=false;
		}
	
		return blnVerificado;
	}

	public bool VerificarTablaValorCatalogoGeneralC(TableSchema tableSchema)
	{
	bool blnVerificado=false;
	//bool blnTieneNombreColumnaValor=false;
	bool blnTieneNombreTablaValor=false;
	bool blnTieneNombreColumnaLista=false;
	bool blnTieneNombreTablaLista=false;
	
	//TableSchema tableSchemaFkValor=null;
	ColumnSchema columnSchemaValorEncontrado=null;
	TableSchema tableSchemaFkLista=null;
	
	/*
	if(tableSchema.Name.Contains(strCatalogoGeneralValor)) {
		blnTieneNombreColumnaValor=true;
	}
	*/
	
	//if(blnTieneNombreColumnaValor) {
		//tableSchemaFkValor=GetTableSchemaFromColumnForeignKey(columnSchema);
		
		if(/*tableSchemaFkValor*/tableSchema.Name.Contains(strCatalogoGeneralValor)) {
			blnTieneNombreTablaValor=true;
		}
		
		if(blnTieneNombreTablaValor) {
			foreach (ColumnSchema columnSchemaValor in /*tableSchemaFkValor*/tableSchema.Columns){	
				if(columnSchemaValor.IsForeignKeyMember && columnSchemaValor.Name.Contains(strCatalogoGeneralLista)) {
					blnTieneNombreColumnaLista=true;
					columnSchemaValorEncontrado=columnSchemaValor;
					break;
				}
			}
			
			if(blnTieneNombreColumnaLista) {
				tableSchemaFkLista=GetTableSchemaFromColumnForeignKey(columnSchemaValorEncontrado);
				
				if(tableSchemaFkLista.Name.Contains(strCatalogoGeneralLista)) {
					blnTieneNombreTablaLista=true;
				}
			}
		}
	//}
	
		if(/*blnTieneNombreColumnaValor &&*/ blnTieneNombreTablaValor && blnTieneNombreColumnaLista && blnTieneNombreTablaLista) {
			blnVerificado=true;
		} else {
			blnVerificado=false;
		}
	
		return blnVerificado;
	}
	
	public bool GetExistTagTableFromPropertiesC(TableSchema table,String strTag)
	{
		
	bool blnExist=false;
	
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strTag))
						{
							blnExist=true;
							break;
						}
					}
	}
	
	return blnExist;
	}
	
	public static string GetSpDescriptionTableC(TableSchema tableSchema,bool esConUpdate,String strDescriptions) {
		String strDescription="";
		
		String strAddOrUpdate=string.Empty;
	
		strAddOrUpdate="add";
		
		if(esConUpdate) {
			strAddOrUpdate="update";
			
		}
		strDescription+="\r\nEXEC sys.sp_"+strAddOrUpdate+"extendedproperty @name=N'MS_Description', @value=N'"+strDescriptions/*GetTableDescriptions(tableSchema)*/+"' ,@level0type=N'SCHEMA', @level0name=N'"+tableSchema.Owner+"', @level1type=N'TABLE', @level1name=N'"+tableSchema.Name+"'\r\n";
    	strDescription+="GO";
	
		return strDescription;
	}
	
	public static string GetSpDescriptionColumnC(TableSchema tableSchema,ColumnSchema columnSchema,bool esConUpdate,String strDescriptions) {
		String strDescription=GetSpDescriptionColumnC(tableSchema,columnSchema,esConUpdate,strDescriptions,false);
		
		return strDescription;
	}
	
	public static string GetSpDescriptionColumnC(TableSchema tableSchema,ColumnSchema columnSchema,bool esConUpdate,String strDescriptions,bool esEliminar) {
		String strDescription="";
		
		String strAddOrUpdate=string.Empty;
		String strValueDescription=string.Empty;
	
		strAddOrUpdate="add";
		strValueDescription=", @value=N'"+strDescriptions/*GetDescriptionsColumn(SourceDatabaseTables[i].Columns[j])*/+"'";
		
		if(esConUpdate) {
			strAddOrUpdate="update";
			
		}
		
		if(esEliminar) {
			strAddOrUpdate="drop";
			strValueDescription="";
		}
		
		strDescription="\r\nEXEC sys.sp_"+strAddOrUpdate+"extendedproperty @name=N'MS_Description'"+strValueDescription+" ,@level0type=N'SCHEMA', @level0name=N'"+tableSchema.Owner+"', @level1type=N'TABLE', @level1name=N'"+tableSchema.Name+"', @level2type=N'COLUMN', @level2name=N'"+columnSchema.Name+"'\r\n";								   
		strDescription+="GO\r\n";	
	
		return strDescription;
	}
	
	public static string GetActualDescriptionTableC(TableSchema tableSchema) {
		String strDescription="";
		
		strDescription=tableSchema.Description;
	
		return strDescription;
	}
	
	public static string GetActualDescriptionColumnaC(ColumnSchema columnSchema) {
		String strDescription="";
		
		//strDescription=columnSchema.Description;
		
		foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties) {
			if(extendedProperty.Name=="CS_Description") {
				strDescription=((String)extendedProperty.Value);
			}
		}
		
		return strDescription;
	}
	
	public static string GetColumnasVariablesGlobalesDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("COLUMNSVARGLOBAL")) {
					nombreTabla=tipo[1];
					break;
				}
			}
		}		
		
		return nombreTabla;
	}
	
	public static string GetColumnasVariablesGlobalesMostrarDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("COLUMNSVARGLOBALSHOW")) {
					nombreTabla=tipo[1];
					break;
				}
			}
		}		
		
		return nombreTabla;
	}
	
	public static string GetClasesAutoReferenciadasGlobalesDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CLASESAUTOREF")) {
					nombreTabla=tipo[1];
					break;
				}
			}
		}		
		
		return nombreTabla;
	}
	
	public static bool ConFechaSistemaDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		bool esReporteProceso=false;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CONFECHASISTEMA")) {
					nombreTabla=tipo[1];
					esReporteProceso=true;
					break;
				}
			}
		}		
		
		return esReporteProceso;
	}
	
	public static string GetClasesNoDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CLASESNO")) {
					nombreTabla=tipo[1];
					break;
				}
			}
		}		
		
		return nombreTabla;
	}
	
	public static bool ExisteEnListaComasC(String sDescripcionListaComas,String sElementoBusqueda) {
		bool existe=false;
		String sClasesListaComas=sDescripcionListaComas;
			
		String[] sClases=sClasesListaComas.Split(',');
			
		foreach(String sClase in sClases) {						
			if(sClase.Equals(sElementoBusqueda)) {					
				existe=true;
				break;					
			}
		}		
				
		return existe;
	}
	
	public static bool GetEsReporteProcesoDatabaseFromPropertiesC(DatabaseSchema databaseSchema) {
		String nombreTabla="";
						
		String[] descripciones;
		String[] tipo;
		
		bool esReporteProceso=false;
		
		if(databaseSchema.Description!=""){		
			descripciones=databaseSchema.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("ESREPORTEPROCESO")) {
					nombreTabla=tipo[1];
					esReporteProceso=true;
					break;
				}
			}
		}		
		
		return esReporteProceso;
	}
	
	public String GetJBossSufijoC(String sJBossVersion,bool ConRMI) {
		String sSufijoJBossVersion=String.Empty;
		
		if(!ConRMI) {
			if(sJBossVersion.Equals("8.1")) {
				sSufijoJBossVersion="_JBOSS81";
			}
		} else {
			sSufijoJBossVersion="_RMI";
		}
		
		return sSufijoJBossVersion;
	}
	
	public static bool EsColumnaVariableGlobalDataBaseFromPropertiesC(ColumnSchema columnSchema) {
		bool existe=EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema,false,false);
		
		return existe;
	}
	
	public static bool EsColumnaVariableGlobalDataBaseFromPropertiesC(ColumnSchema columnSchema,bool conTodos,bool soloConExisteNo) {
		bool existe=false;
		bool existeNo=false;
		
		if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {
			
			DatabaseSchema databaseSchema=columnSchema.Table.Database;
			
			String sClasesNoRelacionadas=GetColumnasVariablesGlobalesDatabaseFromPropertiesC(databaseSchema);
			
			String sClasesVarGlobalNo=GetVarGlobalNOTableFromPropertiesC(columnSchema.Table);
			
			String[] sClases=sClasesNoRelacionadas.Split(',');
			String[] sClasesNo=sClasesVarGlobalNo.Split(',');						
			
			foreach(String sClase in sClases) {						
				if(sClase.Equals(GetNombreColumnFromPropertiesInterno(columnSchema,true))) {					
					if(!conTodos) {
						existeNo=false;
						
						foreach(String sClaseNo in sClasesNo) {
							//Trace.WriteLine(sClaseNo+"="+columnSchema.Name/*GetNombreColumnFromPropertiesInterno(columnSchema,true)*/);
							if(sClaseNo.Equals(GetNombreColumnFromPropertiesInterno(columnSchema,true))) {					
								existeNo=true;
							}
						}
					}
					
					if(!existeNo) {
						existe=true;
						break;
					}
				}
			}				
		}
		
		if(soloConExisteNo) {
			existe=existeNo;
		}
		
		return existe;
	}
	
	public static bool EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(ColumnSchema columnSchema) {
		bool existe=EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(columnSchema,false,false);
		
		return existe;
	}
	
	public static bool EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(ColumnSchema columnSchema,bool conTodos,bool soloConExisteNo) {
		bool existe=false;
		bool existeNo=false;
		
		if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {
			
			DatabaseSchema databaseSchema=columnSchema.Table.Database;
			
			String sClasesNoRelacionadas=GetColumnasVariablesGlobalesMostrarDatabaseFromPropertiesC(databaseSchema);
			
			//String sClasesVarGlobalNo=GetVarGlobalNOTableFromPropertiesC(columnSchema.Table);
			
			String[] sClases=sClasesNoRelacionadas.Split(',');
			//String[] sClasesNo=sClasesVarGlobalNo.Split(',');						
			
			foreach(String sClase in sClases) {						
				if(sClase.Equals(GetNombreColumnFromPropertiesInterno(columnSchema,true))) {					
					existeNo=false;
					
					if(!conTodos) {						
						/*
						foreach(String sClaseNo in sClasesNo) {
							//Trace.WriteLine(sClaseNo+"="+columnSchema.Name);//GetNombreColumnFromPropertiesInterno(columnSchema,true)
							if(sClaseNo.Equals(GetNombreColumnFromPropertiesInterno(columnSchema,true))) {					
								existeNo=true;
							}
						}
						*/
					}
					
					
					if(!existeNo) {
						existe=true;
						break;
					}					
				}
			}				
		}
		
		if(soloConExisteNo) {
			existe=existeNo;
		}
		
		return existe;
	}
	
	public int GetNumeroColumnasPrincipalOcultasC(TableSchema table)
	{
		int intNumeroColumnasForm=0;
			
		foreach(ColumnSchema columnSchema in table.Columns){		
			if( (EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema) 
				|| EsColumnaVariableModuloGlobalC(columnSchema)
				|| GetNoInsertEditColumnFromPropertiesC(columnSchema)
				)
				&& !EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(columnSchema)
				
			) {
				intNumeroColumnasForm++;
			}
		}
		
		return intNumeroColumnasForm;
	}
	
	public static bool EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(IndexSchema indexSchema,ColumnSchema columnSchema) {
		bool existe=false;
		
		if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {
			if(indexSchema.Name.Contains(strFK)) {
				if(EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema)) {
					existe=true;
				}
			}
		}
		
		return existe;
	}
	
	public static bool EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(IndexSchema indexSchema) {
		bool existe=false;
		ColumnSchema columnSchema=null;
		
		
			if(indexSchema.Name.Contains(strFK)) {
				
				foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
					columnSchema=memberColumnSchema.Column;
					
					if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(indexSchema.Table)) {
						//,ColumnSchema columnSchema
						if(EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema)) {
							existe=true;
							break;
						}
					}
				}
			}
		
		
		return existe;
	}
	
	public static bool TieneGlobalVariableColumnC(TableSchema tableSchema) {
		bool existe=false;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			if(columnSchema.IsForeignKeyMember) {
				if( EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema) 
					|| EsColumnaVariableModuloGlobalC(columnSchema)
				) {
					existe=true;
				}
			}
		}
		
		return existe;
	}
	
	public int NumeroBusquedasFkArbolC(TableSchema tableSchema) {
		int iNumeroBusquedas=0;
		bool esAutoReferenciadaFk=false;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			if(columnSchema.IsForeignKeyMember) {
				TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(columnSchema);
				esAutoReferenciadaFk=GetEsAutoReferenciadaTablaC(tableSchemaFk);
				
				if(esAutoReferenciadaFk) {
					iNumeroBusquedas++;
				}
			}
		}
		
		return iNumeroBusquedas;
	}
	
	public static bool EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(IndexSchema indexSchema,ColumnSchema columnSchema) {
		bool existe=false;
		
		if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {
			if(indexSchema.Name.Contains(strFK)) {
				if(EsColumnaVariableModuloGlobalC(columnSchema)) {
					existe=true;
				}
			}
		}
		
		return existe;
	}
	
	public static bool EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(IndexSchema indexSchema) {
		bool existe=false;
		ColumnSchema columnSchema=null;
		
			if(indexSchema.Name.Contains(strFK)) {
				foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {
					columnSchema=memberColumnSchema.Column;
					
					if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {		
						if(EsColumnaVariableModuloGlobalC(columnSchema)) {
							existe=true;
							break;
						}
					}
				}
			}
		
		
		return existe;
	}
	
	public static bool EsColumnaVariableModuloGlobalC(ColumnSchema columnSchema) {
		bool existe=EsColumnaVariableModuloGlobalC(columnSchema,false,false);
		
		return existe;
	}
	
	public static bool EsColumnaVariableModuloGlobalC(ColumnSchema columnSchema,bool conTodos,bool soloConExisteNo) {
		bool existe=false;
		bool existeNo=false;
		
		if(!GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(columnSchema.Table)) {
			String sClase="";	
			//Trace.WriteLine(strIdModulo);
			//if(strIdModulo.Equals(GetNombreColumnFromPropertiesInterno(columnSchema,true))) {
			if(strIdModulo.Equals(columnSchema.Name)) {
				//existe=true;
				
				String sClasesVarGlobalNo=GetVarGlobalNOTableFromPropertiesC(columnSchema.Table);			
				String[] sClasesNo=sClasesVarGlobalNo.Split(',');
				
				if(!conTodos) {
					foreach(String sClaseNo in sClasesNo) {
						//Trace.WriteLine(sClaseNo+"="+columnSchema.Name/*GetNombreColumnFromPropertiesInterno(columnSchema,true)*/);
						if(sClaseNo.Equals(GetNombreColumnFromPropertiesInterno(columnSchema,true))) {					
							existeNo=true;
						}
					}
				}
				
				if(!existeNo) {
					existe=true;
				}									
			}
		}
		
		if(soloConExisteNo) {
			existe=existeNo;
		}
		
		return existe;
	}
	
	public static string GetNombreTableFromProperties(TableSchema table)
	{
		String nombreTabla="";
		
		nombreTabla=GetNombreTableFromProperties(table,true);
		
		return nombreTabla;
	}
	
	public static string GetNombreTableFromProperties(TableSchema table,bool conPrefijo)
	{
	String nombreTabla="";
	
	if(blnEsLowerCaseDBNames) {
		nombreTabla=GetNombreConSeparacionC(table.Name).ToLower();
	} else {
		if(blnEsMixedCaseDBNames) {
			nombreTabla=table.Name;
		} else {
			nombreTabla=GetNombreConSeparacionC(table.Name).ToUpper();
		}
		
	}
	
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NOMBRE"))
						{
							nombreTabla=tipo[1];
							
							if(blnEsLowerCaseDBNames) {
								nombreTabla=nombreTabla.ToLower();
							} else {
								if(blnEsMixedCaseDBNames) {
									nombreTabla=nombreTabla;
								} else {
									nombreTabla=nombreTabla.ToUpper();
								}
								
							}
							break;
						}
					}
	}
	
		string strPorTablaPrefijoNombreTemp=GetNombrePrefijoTableFromPropertiesC(table);
		
		//SI EXISTE GLOBAL ASIGNAR EL ATRIBUTO 
		if(strGlobalPrefijoDBNombreTablas!=null && !strGlobalPrefijoDBNombreTablas.Equals(string.Empty) && strGlobalPrefijoDBNombreTablas.Length>0) {
			strPorTablaPrefijoNombreTemp=strGlobalPrefijoDBNombreTablas;	
		} 
		
		//PARA DATABASE CREATION NO SIRVE INICIALIZAR POR TABLA, AQUI SE REBUNDA
		
		if(conPrefijo) {
			nombreTabla=/*strPorTablaPrefijoNombre+*/strPorTablaPrefijoNombreTemp+nombreTabla;
		} else {
			nombreTabla=/*strPorTablaPrefijoNombre+*/nombreTabla;
		}
		
		//Trace.WriteLine(nombreTabla);
		
		return nombreTabla;
	}
	
	public static string GetNombrePrefijoTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String signoSeparador="";//"_";
	
	if(blnEsLowerCaseDBNames) {
		//nombreTabla=table.Name.ToLower();
	} else {
		if(blnEsMixedCaseDBNames) {
			//nombreTabla=table.Name;
		} else {
			//nombreTabla=table.Name.ToUpper();
		}
		
	}
	
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strPREFIJOTABLA))
						{
							nombreTabla=tipo[1];
							
							if(!nombreTabla.Equals("")) {
								if(blnEsLowerCaseDBNames) {
									nombreTabla=nombreTabla.ToLower();
								} else {
									if(blnEsMixedCaseDBNames) {
										nombreTabla=nombreTabla;
									} else {
										nombreTabla=nombreTabla.ToUpper();
									}
									
								}
								
								nombreTabla=nombreTabla+signoSeparador;
							}
							
							break;
						}
					}
	}
	
	
	
	return nombreTabla;
	}
	
	public static bool GetConEjbServiceTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=true;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NOEJB"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=false;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConAuditoriaTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONAUD"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConNoLoadForeignKeyTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("FKNOLOAD")) {
					nombreTabla=tipo[1];
					blnConAuditoria=true;
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetConCargarPorParteTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CONCARGAR_PARTE")) {
					nombreTabla=tipo[1];
					blnConAuditoria=true;
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetConBusquedaForeignKeyTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CONBUSQUEDA")) {
					nombreTabla=tipo[1];
					blnConAuditoria=true;
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetSinActualizarForeignKeyTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("SINFK_ACTUALIZAR")) {
					nombreTabla=tipo[1];
					blnConAuditoria=true;
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelSinTitulosTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELSINTITULOS")) {
					nombreTabla=tipo[1];
					
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelSinBasicoTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELSINBASICO")) {
					nombreTabla=tipo[1];
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelSinToolBarTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELSINTOOLB")) {
					nombreTabla=tipo[1];
					
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		//Trace.WriteLine(blnConAuditoria);
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelSinMenuTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELSINMENU")) {
					nombreTabla=tipo[1];
					
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		//Trace.WriteLine(blnConAuditoria);
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelSinAccionesFormularioTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELSINACCIONF")) {
					nombreTabla=tipo[1];
					//Trace.WriteLine("11111111111");
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		//Trace.WriteLine(blnConAuditoria);
		
		return blnConAuditoria;
	}
	
	public static bool GetPanelConTabTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELCONTAB")) {
					nombreTabla=tipo[1];
					
					if(nombreTabla.Equals("true")) {
						blnConAuditoria=true;
					}
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static string GetPanelTab_TabAlignTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="";//GetNombreClaseC(table.ToString()).ToUpper();
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELCONTAB_TABALIGN"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public static string GetPanelTabBusqueda_AlignTableFromPropertiesC(TableSchema table)	{
		String nombreTabla="";//GetNombreClaseC(table.ToString()).ToUpper();
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="")
		{
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("TABSBUSQ_ALIGN"))
							{
								nombreTabla=tipo[1];
								break;
							}
						}
		}							
		return nombreTabla;
	}
	
	public static bool GetPanelConUbicacionTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("PANELCONUBICACION")) {
					nombreTabla=tipo[1];
					blnConAuditoria=true;
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetConBusquedaFkForeignKeyTableFromPropertiesC(TableSchema table) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConAuditoria=false;
		
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals("CONBUSQUEDAFK")) {
					nombreTabla=tipo[1];
					blnConAuditoria=true;
					break;
				}
			}
		}	
		
		return blnConAuditoria;
	}
	
	public static bool GetConFuncionalidadTotalesTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONTOTALES"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConFuncionalidadProcesoBusquedaTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONBUSQUEDAPROCESO"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static string GetConExtraCodeTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=string.Empty;//table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONEXTCOD"))
						{
							nombreTabla=tipo[1];
							//if(nombreTabla.Equals("true")) {
								//blnConAuditoria=true;
							//}
							break;
						}
					}
	}							
	//return blnConAuditoria;
	return nombreTabla;
	}
	
	public static bool GetConAutoAuditoriaTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strCONAUDAUTO))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetSinAuditoriaDetalleTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("SINAUDET"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetSinRecargarInformacionTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("SINRECARGARI"))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
							}
							break;
						}
					}
	}				
	
	//Trace.WriteLine(blnConAuditoria);
	return blnConAuditoria;
	}
	
	public static bool GetConTabBusquedaColumnFromPropertiesC(ColumnSchema column)
	{
	String nombreTabla=column.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=true;
	
	if(column.Description!="")
	{
		
		descripciones=column.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONTAB_BUSQUEDA"))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("false")) {
								blnConAuditoria=false;
							}
							break;
						}
					}
	}				
	
	//Trace.WriteLine(blnConAuditoria);
	return blnConAuditoria;
	}	
	
	public static bool GetDinamicoUnoAUnoTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="") {		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("DIN_UNOAUNO"))
						{
							nombreTabla=tipo[1];
							
							//if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
							//}
							break;
						}
					}
	}				
	
	//Trace.WriteLine(blnConAuditoria);
	return blnConAuditoria;
	}
	
	public static bool GetDinamicoUnoAUnoTableFromPropertiesC(TableKeySchemaMe tableKeySchemaMe)
	{
	String nombreTabla=tableKeySchemaMe.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(tableKeySchemaMe.Description!="") {		
		descripciones=tableKeySchemaMe.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("DIN_UNOAUNO"))
						{
							nombreTabla=tipo[1];
							
							//if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
							//}
							break;
						}
					}
	}				
	
	//Trace.WriteLine(blnConAuditoria);
	return blnConAuditoria;
	}
	
	public bool TieneDinamicoUnoAUnoTableFromPropertiesC(TableSchema table){
		bool tiene=false;
		bool existe=false;
		
		TableKeySchemaMe tableKeySchemaMe=null;
		
		existe=ExisteTablaRelacionadaMeC(arrayTablasRelacionadasMe,table);		
		
		if(existe) {
			tableKeySchemaMe=GetTablaRelacionadaMeEncontradaC(arrayTablasRelacionadasMe,table);
			tiene=GetDinamicoUnoAUnoTableFromPropertiesC(tableKeySchemaMe);
		}
		
		return tiene;
	}
	
	public static bool GetSinUsoFuncionalidadDatosTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("SINUSODATOS"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}				
	
	//Trace.WriteLine(blnConAuditoria);
	return blnConAuditoria;
	}
	
	
	public static bool GetConAdditionalTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=true;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strCONADDIT))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("false")) {
								blnConAuditoria=false;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConAdditionalParameterReturnTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONADDIT_PARAMRET"))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConColorTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONCOLOR"))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConValidacionInactividadFkTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONVALIDARFK"))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConMaximoCodigoTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=true;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strCONMAXCODE))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("false")) {
								blnConAuditoria=false;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConMinimoCodigoWebTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONMINCODE_WEB"))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetConMaximoCodigoWebTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONMAXCODE_WEB"))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConAuditoria=true;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static bool GetPermiteImportarC(TableSchema table,bool blnTieneForeignKeyParametro) {
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnPermite=false;
		
		if(!blnTieneForeignKeyParametro) {
			blnPermite=true;
		}
		
		/*
		if(table.Description!="") {			
			descripciones=table.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals(strCONMAXCODE)) {
					nombreTabla=tipo[1];
								
					if(nombreTabla.Equals("false")) {
						blnConAuditoria=false;
						break;
					}
				}
			}
		}
		*/
		
		return blnPermite;
	}
	
	public static bool GetConMaximoCodigoDatabaseFromPropertiesC(DatabaseSchema databaseSchema)
	{
	String nombreTabla="";//table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=true;
	
	if(databaseSchema.Description!="")
	{
		
		descripciones=databaseSchema.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strCONMAXCODE))
						{
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("false")) {
								blnConAuditoria=false;
								break;
							}
						}
					}
	}							
	return blnConAuditoria;
	}
	
	//CONPERSISTENCIA
	
	public static bool GetConPersistenciaTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConPersistencia=true;
	
	if(table.Description!="")
	{
		//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONPERSISTENCIA"))
						{	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
							nombreTabla=tipo[1];
							
							if(nombreTabla!="true") {
								blnConPersistencia=false;
								break;
							}
						}
					}
	}
	
	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
	return blnConPersistencia;
	}
	
	public static bool GetConSeleccionarTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConPersistencia=false;
	
	if(table.Description!="")
	{
		//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
		descripciones=table.Description.Split('|');
		
		//Trace.WriteLine(table.Description);
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONSELEC"))
						{	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConPersistencia=true;
								break;
							}
						}
					}
	}
	
	//Todos tienen esta funcionealidad
	blnConPersistencia=true;
	
	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
	return blnConPersistencia;
	}
		
	public static bool GetConSeleccionarTodosDefectoTableFromPropertiesC(TableSchema table)	{
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConPersistencia=false;
		
		if(table.Description!="")
		{
			//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
			descripciones=table.Description.Split('|');
			
			//Trace.WriteLine(table.Description);
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("CONSELTODOS"))
							{	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
								nombreTabla=tipo[1];
								
								if(nombreTabla.Equals("true")) {
									blnConPersistencia=true;
									break;
								}
							}
						}
		}
	
		
		//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
		return blnConPersistencia;
	}
	
	public static bool GetConSwingAuxiliarTableFromPropertiesC(TableSchema table)	{
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConPersistencia=false;
		
		if(table.Description!="")
		{
			//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
			descripciones=table.Description.Split('|');
			
			//Trace.WriteLine(table.Description);
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("CONSWINGAUX"))
							{	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
								nombreTabla=tipo[1];
								
								if(nombreTabla.Equals("true")) {
									blnConPersistencia=true;
									break;
								}
							}
						}
		}
	
		
		//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
		return blnConPersistencia;
	}		
	
	public static bool GetListenerTableFromPropertiesC(TableSchema table)	{
		String nombreTabla=table.Name;
		String[] descripciones;
		String[] tipo;
		bool blnConPersistencia=false;
		
		if(table.Description!="")
		{
			//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
			descripciones=table.Description.Split('|');
			
			//Trace.WriteLine(table.Description);
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("CONLISTENER"))
							{	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
								nombreTabla=tipo[1];
								
								if(nombreTabla.Equals("true")) {
									blnConPersistencia=true;
									break;
								}
							}
						}
		}
	
		
		//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
		return blnConPersistencia;
	}
		
	public static bool GetConPopupTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConPopup=false;
	//bool blnConPopup=true;
	
	if(table.Description!="")
	{
		//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("ESPOPUP"))
						{	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
							nombreTabla=tipo[1];
							
							if(nombreTabla.Equals("true")) {
								blnConPopup=true;
								break;
							} else if(nombreTabla.Equals("false")) {
								blnConPopup=false;
								break;
							}
						}
					}
	}
	
	//System.Windows.Forms.MessageBox.Show(blnConPersistencia.ToString());
	return blnConPopup;
	}
	
	
	public static bool GetConStoreProceduresTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONSTORE"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static string GetAuditoriaCommentTableFromProperties(TableSchema table)
	{
		String strComment="";
		
		if(!GetConAuditoriaTableFromProperties(table))						
		{
			strComment="//";
		}
	return strComment;
	}
	
	public static bool GetConJavaScriptIncludeTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONJAVASCRIPTIE"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}
	
	
	return blnConAuditoria;
	}
	
	public static bool GetConDivResumenTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONDIVRESUMEN"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}
	
	
	return blnConAuditoria;
	}
	
	public static bool GetConOriginalTableFromProperties(TableSchema table)
	{
	String nombreTabla=table.Name;
	String[] descripciones;
	String[] tipo;
	bool blnConAuditoria=false;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("CONORIG"))
						{
							nombreTabla=tipo[1];
							blnConAuditoria=true;
							break;
						}
					}
	}							
	return blnConAuditoria;
	}
	
	public static string GetOriginalCommentTableFromProperties(TableSchema table)
	{
		String strComment="";
		
		if(!GetConOriginalTableFromProperties(table)&&!GetConAuditoriaTableFromProperties(table))						
		{
			strComment="//";
		}
	return strComment;
	}
	
	public static string GetSchemaTableFromProperties(TableSchema table,String strSchema)
	{
	String nombreTabla=strSchema;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("SCHEMA"))
						{
							nombreTabla=tipo[1];
							return nombreTabla;
							//SI ENCUENTRA SALE
							break;
						}
					}
	}			
	
	//SI EXISTE GLOBAL ASIGNAR EL ATRIBUTO 
	if(strGlobalConexionSchema!=null && !strGlobalConexionSchema.Equals(string.Empty) && strGlobalConexionSchema.Length>0) {
		nombreTabla=strGlobalConexionSchema;	
	} 
	
	return nombreTabla;
	}
	
	public static string GetEsquemasExtraTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("ESQUEMAS"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}			
	
	
	
	return nombreTabla;
	}
	
	public String GetSchemaTableFromDBC(TableSchema tableSchema,String Schema) {
		String strSchema=string.Empty;
			
		strSchema=GetSchemaTableFromProperties(tableSchema,"");
		
		if(strSchema.Equals("")) {
			strSchema=tableSchema.Owner.ToLower();	
			
			if(strSchema.Equals("") || strSchema.Equals("dbo")) {
				strSchema=Schema;
			}
		}
		
		return strSchema;
	}

	public static string GetPackageTableFromProperties(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("PCKG"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetPackageClasesTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("PCKGENTCLASES"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public string GetNewCodeTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NEWCODE"))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}					
	
		if(blnEsTablaUnoAUnoFk || !TieneIdentityColumnC(table)) {
			nombreTabla="SinIdGenerated";
		}
	return nombreTabla;
	}
	
	public static string GetReporteGrupoTableFromPropertiesC(TableSchema table)
	{
	String nombreTabla="DEFAULT";
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals(strESREPORTEGROUP))
						{
							nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return nombreTabla;
	}
	
	public static string GetReporteGrupoTableFromPropertiesC(ColumnSchema column) {
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
	
		if(column.Description!=""){		
			descripciones=column.Description.Split('|');
						
			foreach(String descripcion in descripciones) {
				tipo=descripcion.Split('=');
							
				if(tipo[0].Equals(strESREPORTEGROUP)) {
					nombreTabla=tipo[1];
					break;
				}
			}
		}		
		
		return nombreTabla;
	}
	
	public static bool TieneSchemaTableFromPropertiesC(TableSchema table,String strSchema)
	{
		bool blnTieneSchema=false;
	String nombreTabla=strSchema;
	String[] descripciones;
	String[] tipo;
	
	if(table.Description!="")
	{
		
		descripciones=table.Description.Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("SCHEMA"))
						{
							blnTieneSchema=true;
							//nombreTabla=tipo[1];
							break;
						}
					}
	}							
	return blnTieneSchema;//nombreTabla;
	}
	
	public static string GetNombreOrderColumnFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
		
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			foreach(ColumnSchema column in tableSchema.Columns)
			{
				
				
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("WEBORDEN"))
								{
									if(blExiste)
									{
										nombreColumna+=",";
									}
									else
									{
										blExiste=true;
									}
																		
									nombreColumna+=" "+GetNombreColumnFromProperties(column)+" "+tipo[1]+" ";
									break;
								}
							}
					}
							
				}
			}
		
					
		if(!blExiste)
		{
			return "";
		}
		
		return "\" order by "+nombreColumna+"\"+";
	}
	
	public static bool GetEsRompimientoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESROMPIMIENTO"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsTablaMantenimientoVariablesGlobalesFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESMANTVARGLOBAL"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsGuardarRelacionesFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESGUARDARREL"))
								{
									if(tipo[1].Equals("true")) {
										blExiste=true;
									}
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetNoGuardarRelacionesFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("NOGUARDAR"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsGuardarRelacionesHijoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESGUARDARRELHIJO"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetValidacionTodoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
										
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("VALIDACIONTODO"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
	
		return blExiste;
	}
	
	
	public static bool GetFinalJspVersionFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("FINALJSPVERSION"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetFinalJsfVersionFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			 nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("FINALJSFVERSION"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsInternoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESINTERNO"))
								{
									if(tipo[1].Equals("true"))
									{
										blExiste=true;
									}
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsAuxiliarFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			 nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESAUXILIAR"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsReporteFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals(strESREPORTE))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsReporteParaGrupoReporteFromPropertiesC(TableSchema tableSchema)	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
					
		String strValorParametroReporte="";	
		String sNombreGrupo="";		
				
		foreach (ColumnSchema column in tableSchema.Columns) {
			sNombreGrupo=GetReporteGrupoTableFromPropertiesC(column);
			
			if(!sNombreGrupo.Equals("")) {
				blExiste=true;
				break;
			}
		}
		
		return blExiste;
	}
	
	public static bool GetEsReporteGuardarFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTEGUARDAR"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsReporteAdditionalFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTEADDITIONAL"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsLabelProcesarAdditionalFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESLABELPROCESAR"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsTablaModuloFromPropertiesC(TableSchema tableSchema)	{
		bool blExiste=false;
		
		if(tableSchema.Name.Equals(tableSchema.Owner)) {
			 blExiste=true;
		}
		
		return blExiste;
	}
	public static bool GetEsReporteVistaFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTEVISTA"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsProcesoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESPROCESO"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsProcesoParamFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESPROCESOPARAM"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public static bool GetEsReporteUsaColumnasBaseFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
		//blExiste=GetEsReporteProcesoDatabaseFromPropertiesC(tableSchema.Database);		
		
		//if(!blExiste) {
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTEBASECOL"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
		//}	

		return blExiste;
	}
	
	public bool TieneColumnasReporteC(TableSchema tableSchema) {
		bool tiene=false;					
		bool tiene_columnareporte=false;
		
		if(!blnEsReporte) {
			tiene=true;
		} else {
			foreach(ColumnSchema columnSchema in tableSchema.Columns) {
				if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired
					||columnSchema.Name==strId||columnSchema.Name==strVersionRow){
					continue; 
				}
				
				if(!GetEsReporteParametroFromPropertiesC(columnSchema)) {
					tiene=true;
				}
			}
		}
		
		//Trace.WriteLine(tableSchema.Name+"="+tiene);
		return tiene;
	}
	
	public bool TieneColumnasDatosC(TableSchema tableSchema) {
		bool tiene=false;					
		bool tiene_columnareporte=false;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired
				||columnSchema.Name==strId||columnSchema.Name==strVersionRow){
				continue; 
			}
				
			tiene=true;			
			break;
		}
		
		//Trace.WriteLine(tableSchema.Name+"="+tiene);
		return tiene;
	}
	
	public String GetAnchoColumnPorcentajeDefectoTablaC(TableSchema tableSchema) {
		//bool tiene=false;					
		//bool tiene_columnareporte=false;
		String strAnchoDefecto="0";
		String strWebTituloColumn="";
		int intNumeroCaracteres=0;
		//PARA AGRANDAR CAMPOS SE DISMINUYE FACTOR
		double intFactorTamanio=6.5;//7,6,10;
		double intTamanioCalculado=0;
		double intTamanioDiferencia=0;
		double intTamanioPorcentajeDiferencia=0;
		double intTamanioPorcentajeDiferenciaMinimo=0;
		int intTamanioPorcentajeDiferenciaMinimoEntero=0;
		
		double intTamanioPorcentajeDiferenciaMinimoDefecto=60;
		double intTamanioControlLabelDefecto=150.0;		
		
		int intNumeroCaracteresExtra=2;//DOS PUNTOS Y TALVEZ *
		bool existeTamanioMaximo=false;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired
				||columnSchema.Name==strId||columnSchema.Name==strVersionRow){
				continue; 
			}
				
			if( (EsColumnaVariableGlobalDataBaseFromPropertiesC(columnSchema) 
				|| EsColumnaVariableModuloGlobalC(columnSchema)
				|| GetNoInsertEditColumnFromPropertiesC(columnSchema)
				)
				&& !EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(columnSchema)
				
			) {
				continue;	
			}
			
			strWebTituloColumn=GetWebNombreTituloColumnFromPropertiesC(columnSchema);
			
			intNumeroCaracteres=strWebTituloColumn.Length + intNumeroCaracteresExtra;
			
			intTamanioCalculado=(intNumeroCaracteres * intFactorTamanio);
			
			if(intTamanioCalculado < intTamanioControlLabelDefecto) {
				intTamanioDiferencia=intTamanioControlLabelDefecto - intTamanioCalculado;
				
				intTamanioPorcentajeDiferencia=(intTamanioDiferencia * 100) / intTamanioControlLabelDefecto;
				
				if((intTamanioPorcentajeDiferencia < intTamanioPorcentajeDiferenciaMinimo) 
					|| intTamanioPorcentajeDiferenciaMinimo==0) {
						
					intTamanioPorcentajeDiferenciaMinimo=intTamanioPorcentajeDiferencia;	
					
					//LO MINIMO ES -60%, POR CODIGO UNICO
					if(intTamanioPorcentajeDiferenciaMinimo>intTamanioPorcentajeDiferenciaMinimoDefecto) {
						intTamanioPorcentajeDiferenciaMinimo=intTamanioPorcentajeDiferenciaMinimoDefecto;	
					}
				}				
			} else {
				if(intTamanioCalculado >= intTamanioControlLabelDefecto) {
					if(!existeTamanioMaximo) {
						existeTamanioMaximo=true;
					}
				}
			}
			
			//Trace.WriteLine("Columna="+strWebTituloColumn+"->Tamanio Calculado= "+intTamanioCalculado);
		}				
		
		if(!existeTamanioMaximo) {
			if(intTamanioPorcentajeDiferenciaMinimo!=0) {
				intTamanioPorcentajeDiferenciaMinimoEntero=(int)intTamanioPorcentajeDiferenciaMinimo;
				
				strAnchoDefecto="-"+intTamanioPorcentajeDiferenciaMinimoEntero.ToString();
			}
		}
		
		//Trace.WriteLine("Table="+tableSchema.Name+" -> % Diferencia="+strAnchoDefecto);
		//strAnchoDefecto="-60";//-55
		
		return strAnchoDefecto;//tiene;
	}
	
	public String GetAltoColumnPorcentajeDefectoTablaC(TableSchema tableSchema) {
		return "0";
	}
	
	public bool TieneColumnaReporteParametroC(ColumnSchema columnSchema) {
		bool blnTieneColumnaReporteParametro=false;
		
		if(blnEsReporte && GetEsReporteParametroFromPropertiesC(columnSchema)) {
			blnTieneColumnaReporteParametro=true;
		}
		
		return blnTieneColumnaReporteParametro;
	}

	public static bool GetEsReporteAuxiliarFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals(strESREPORTEAUX))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsParametroReporteReemplazoFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("PARAMSQLREEM"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsParametroReporteReemplazoFromPropertiesC(ColumnSchema columnSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("PARAMSQLREEM"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsReporteParametroFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals(strESREPORTEPARAM))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsReporteParametroFromPropertiesC(ColumnSchema columnSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals(strESREPORTEPARAM))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetEsReporteIngresoFromPropertiesC(ColumnSchema columnSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals(strESREPORTEINGRESO))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public String GetEsPaqueteReporteC(TableSchema TablaBase) {
		String strPaqueteReporte=string.Empty;
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
		
		if(blnEsReporte) {
			strPaqueteReporte="."+strPackageReporte;
			
		}
		
		return strPaqueteReporte;				
	}
	
	public String GetEsPaqueteImportReporteC(TableSchema TablaBase) {
		String strPaqueteReporte=string.Empty;
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
		
		if(blnEsReporte) {
			strPaqueteReporte=strPackageReporte+".";
			
		}
		
		return strPaqueteReporte;				
	}
	
	public String GetEsPaqueteRelativePathReporteC(TableSchema TablaBase) {
		String strRelativePathReporte=string.Empty;
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
		
		if(blnEsReporte) {
			strRelativePathReporte="../";
			
		}
		
		return strRelativePathReporte;				
	}
	
	public String GetEsPaqueteRelativePathReporteParaReporteC(TableSchema TablaBase,bool esParaCompilar) {
		String strRelativePathReporte=string.Empty;
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
		
		if(blnEsReporte) {
			if(esParaCompilar) {
				strRelativePathReporte="report\\\\";
			} else {
				strRelativePathReporte="report/";
			}			
		}
		
		return strRelativePathReporte;				
	}
	
	public String GetEsImplementableAdditionableFromReporteC(TableSchema TablaBase,bool conAdditionable) {
		String strPaqueteReporte=string.Empty;
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
		
		if(conAdditionable) {
			strPaqueteReporte="Additionable";
		
		} else if((blnEsReporte && blnConReportesPorModulo)){
			strPaqueteReporte="Additionable";
			
		} else {
			strPaqueteReporte="Implementable";
		}
		
		return strPaqueteReporte;				
	}
	
	public String GetTablaModuloReporteC(TableSchema TablaBase) {
		String strTablaModuloReporte=string.Empty;
		
		if(!blnConReportesPorModulo) {
			strTablaModuloReporte=GetNombreClaseC(TablaBase.ToString());
			
		} else {
			strTablaModuloReporte=TablaBase.Owner;
		}
		
		return strTablaModuloReporte;				
	}
	
	public String GetAdditionalTablaModuloReporteC(TableSchema TablaBase) {
		String strAdditionalTablaModuloReporte=string.Empty;
		
		if(!blnConReportesPorModulo) {
			strAdditionalTablaModuloReporte="";
			
		} else {
			strAdditionalTablaModuloReporte="Additional";
		}
		
		return strAdditionalTablaModuloReporte;				
	}
	
	public String GetAdditionalFromReporteC(TableSchema TablaBase) {
		String strPaqueteReporte=string.Empty;
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
		
		if(blnEsReporte) {
			strPaqueteReporte="ADDITIONAL";
			
		} else {
			strPaqueteReporte="";
		}
		
		return strPaqueteReporte;				
	}
	
	public String GetEsImportPaqueteReporteC(TableSchema TablaBase,String strToComplete) {
		String strPaqueteReporte=string.Empty;
		bool blnEsReporteAuxiliar=GetEsReporteAuxiliarFromPropertiesC(TablaBase);
		
		if(blnEsReporteAuxiliar) {
			strPaqueteReporte="\r\n"+strToComplete+"."+strPackageReporte+".*;";
			
		}
		
		return strPaqueteReporte;				
	}
	
	public String GetEsImportPaqueteReporteParaEsReporteC(TableSchema TablaBase,String strToComplete) {
		String strPaqueteReporte=string.Empty;
		bool blnEsReporteAuxiliar=GetEsReporteFromPropertiesC(TablaBase);
		
		if(blnEsReporteAuxiliar) {
			strPaqueteReporte="\r\n"+strToComplete+"."+strPackageReporte+".*;";
			
		}
		
		return strPaqueteReporte;				
	}
	
	public String GetEsTablaAuxiliarReporteC(TableSchema TablaBase) {
		String strPaqueteReporte=string.Empty;		
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
				
		if(blnEsReporte) {
			//strPaqueteReporte=TablaBase.Owner;
			
			strPaqueteReporte=GetTablaModuloReporteC(TablaBase);
			/*
			if(GetBuscarTablaAuxiliarReporteC(TablaBase)!=null) {
				strPaqueteReporte=GetNombreClaseC(GetBuscarTablaAuxiliarReporteC(TablaBase).ToString());
			}
			*/
		} else {
			strPaqueteReporte=GetNombreClaseC(TablaBase.ToString());
		}
		
		return strPaqueteReporte;				
	}
	
	public String GetEsTablaObjetoAuxiliarReporteC(TableSchema TablaBase) {
		String strPaqueteReporte=string.Empty;
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
		
		if(blnEsReporte && GetBuscarTablaAuxiliarReporteC(TablaBase)!=null) {
			strPaqueteReporte=GetNombreClaseC(GetBuscarTablaAuxiliarReporteC(TablaBase).ToString()).ToLower();
			
		} else {
			strPaqueteReporte=GetNombreClaseC(TablaBase.ToString()).ToLower();
		}
		
		return strPaqueteReporte;				
	}
	
	public TableSchema GetBuscarTablaAuxiliarReporteC(TableSchema TablaBase) {
		String strPaqueteReporte=string.Empty;
		bool blnEsReporte=GetEsReporteFromPropertiesC(TablaBase);
		String strNombreGrupo=GetReporteGrupoTableFromPropertiesC(TablaBase);
		TableSchema TablaBaseReporteAuxiliar=null;
		/*
		if(blnEsReporte) {
			strPaqueteReporte="."+strPackageReporte;
			
		} else {
			strPaqueteReporte=GetNombreClaseC(TablaBase.ToString());
		}
		*/
		
		for (int i = 0; i < TablaBase.Database.Tables.Count; i++){ 
			if(GetEsReporteAuxiliarFromPropertiesC(TablaBase.Database.Tables[i])) {
				if(GetReporteGrupoTableFromPropertiesC(TablaBase.Database.Tables[i]).Equals(strNombreGrupo)) {
					TablaBaseReporteAuxiliar=TablaBase.Database.Tables[i];
					break;
				}
			}
		
		} 
	
		return TablaBaseReporteAuxiliar;				
	}
	
	
	public static bool GetEsNativeFromPropertiesC(TableSchema tableSchema)
	{
		return true;
		String nombreColumna="";
			nombreColumna+="";
		bool blExiste=false;

		if(!blnConFuncionesSqlNativas) {//ESTA VARIABLE SE PONE TRUE CUANDO SE INICIALIZAN LAS VARIABLES EN LA PRIMERA PANTALLA
			
			String[] descripciones;
			String[] tipo;
			
					foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
					{
						if(extendedProperty.Name=="CS_Description")
						{
						descripciones=((String)extendedProperty.Value).Split('|');
								
								foreach(String descripcion in descripciones)
								{
									tipo=descripcion.Split('=');
									
									if(tipo[0].Equals(strCONNATIVE))
									{									
										blExiste=true;
										break;
									}
								}
						}
								
					}		
		} else {
			blExiste=true;
		}
					
		//SI SE INDICA QUE NO USE MAXIMO CODIGO, SE DESHABILITA
		if(!blnConMaxCodigo){
			blExiste=false;
		}
		
		return blExiste;
	}
	
	public static bool GetEsMenuFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESMENU"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
	
	public static bool GetExisteWhereFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("EXISTEWHERE"))
								{
									
									blExiste=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blExiste;
	}
		
	public static bool GetPermiteInsertarFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blPermite=true;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("INSERTNO")) {									
									if(tipo[1].Equals("true")) {
										blPermite=false;
										break;
									}
								}
							}
					}
							
				}
			
		
					
		
		
		return blPermite;
	}
	
	public static bool GetPermiteEditarFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blPermite=true;
		
	
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("EDITNO"))
								{
									if(tipo[1].Equals("true")){
										blPermite=false;
										break;
									}
								}
							}
					}
							
				}

		//Trace.WriteLine(blPermite);
		
		return blPermite;
	}
	
	public static bool GetUseClasesSiNoPropertyFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blPermite=false;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("USECLASESSINODEEP"))
								{
									
									blPermite=true;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blPermite;
	}
		
	public static bool GetPermiteEliminarFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";
			nombreColumna+="";
		
		String[] descripciones;
		String[] tipo;
		bool blPermite=true;
		
			
				
				
				foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
					descripciones=((String)extendedProperty.Value).Split('|');
							
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("DELETENO"))
								{
									
									blPermite=false;
									break;
								}
							}
					}
							
				}
			
		
					
		
		
		return blPermite;
	}
	
	public static bool GetSinTituloColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("SINTITULO"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetBusquedaForeignKeyColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		bool blExisteBusquedaFk=false;
		TableSchema tableSchemaFk=null;
		
		if(column.IsForeignKeyMember) {
			tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);			
			blExiste=GetConBusquedaForeignKeyTableFromPropertiesC(tableSchemaFk);
			blExisteBusquedaFk=GetConBusquedaFkForeignKeyTableFromPropertiesC(tableSchemaFk);
						
			//Trace.WriteLine(blExisteBusquedaFk);
			
			if(blExiste || blExisteBusquedaFk) {
				return true;
			}
		}
		
		
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONBUSQUEDA"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetEsNuevaFilaColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESNUEVAFILA"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetConEventChangeColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		bool blExisteOnChange=false;
		
			
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTCHANGE"))
								{
									if(tipo[1].Equals("true")) {
										blExiste=true;
									}
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static /*bool*/String GetConEventDependColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		String strValor="";
		
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTDEPEND"))
								{
									blExiste=true;
									strValor=tipo[1];
									
									break;
								}
								
							}
					}							
				}
						
		return strValor;//blExiste;
	}
	
	public static /*bool*/String GetConEventUpdatesColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		String strValor="";
		
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTUPDATES"))
								{
									blExiste=true;
									strValor=tipo[1];
									
									break;
								}
								
							}
					}							
				}
						
		return strValor;//blExiste;
	}
	
	public static /*bool*/String GetConEventUpdatesNingunoColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		String strValor="";
		
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTUPDATESNINGUNO"))
								{
									blExiste=true;
									strValor=tipo[1];
									
									break;
								}
								
							}
					}							
				}
						
		return strValor;//blExiste;
	}
	
	public static /*bool*/String GetConEventSetParentDependColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		String strValor="";
		
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONEVENTDEPENDSETPARENT"))
								{
									blExiste=true;
									strValor=tipo[1];
									
									break;
								}
								
							}
					}							
				}
						
		return strValor;//blExiste;
	}
	
	public static /*bool*/String GetConEventQueryDependColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		String strValor="";
		
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								//tipo=descripcion.Split('=');
								tipo = descripcion.Split(new char[] { '=' }, 2);
								
								if(tipo[0].Equals("CONEVENTDEPENDQUERY"))
								{
									blExiste=true;
									strValor=tipo[1];
									
									break;
								}
								
							}
					}							
				}
						
		return strValor;//blExiste;
	}
	
	public static bool TieneColumnaComboTablaNormalC(ColumnSchema column) {
		bool tiene=TieneColumnaComboTablaNormalC(column,true,true);
		
		return tiene;
	}
	
	public static bool TieneColumnaComboTablaNormalC(ColumnSchema column,bool validarConEventChangeColumn,bool validarConEventDependColumn) {
		bool tiene=true;
		
		if((GetConEventChangeColumnFromPropertiesC(column) || GetOnChangeColumnFromPropertiesC(column)) && validarConEventChangeColumn) { 
			tiene=false;
		}
		
		if(!GetConEventDependColumnFromPropertiesC(column).Equals("") && validarConEventDependColumn) {
			tiene=false;
		}
			
		return tiene;
	}
	
	public static bool GetConValidacionTodoColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("VALIDACIONTODO"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static string GetNumTabuladorForeignKeyColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("NUMTABUL"))
								{
									nombreColumna=tipo[1];
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return nombreColumna;
	}
	
	public static bool GetConNoLoadForeignKeyColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("FKNOLOAD"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	
	
	public static bool GetConNoSaveForeignKeyColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("FKNOSAVE"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetConSeguridadColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONSEG"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetConRangoBusquedasColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
			nombreColumna+="";		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONRANGOINDICES"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetConCargarTodoFkColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
			nombreColumna+="";		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONCARGARTODOFK"))
								{
									if(tipo[1].Equals("true")) {
										blExiste=true;
									}
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetConRangoBusquedasIndicesColumnFromPropertiesC(ColumnSchema column,IndexSchema indexSchema)
	{
		String nombreColumna="";
			nombreColumna+="";		
		String[] descripciones=null;
			descripciones=null;
		String[] tipo=null;
			tipo=null;
		bool blExiste=GetConRangoBusquedasIndicesColumnFromPropertiesC(column);
						
		return blExiste;
	}
	
	public static bool GetConRangoBusquedasIndicesColumnFromPropertiesC(ColumnSchema column,String  strIndexSchemaName)
	{
		String nombreColumna="";
			nombreColumna+="";
				
		String[] descripciones;
			descripciones=null;
		String[] tipo;
			tipo=null;
		bool blExiste=GetConRangoBusquedasIndicesColumnFromPropertiesC(column);
		
				
						
		return blExiste;
	}
	
	public static bool GetConRangoBusquedasIndicesColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
			nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONRANGOINDICE"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static bool GetEsReporteColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
			nombreColumna+="";		
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("ESREPORTE"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
		
	public static bool GetConAuditoriaColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
			nombreColumna+="";	
		String[] descripciones;
		String[] tipo;
		bool blExiste=true;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("CONAUD"))
								{
									blExiste=false;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public static String GetConExtraCodeColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";//nombreColumna+="";
				
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		String nombreTabla=string.Empty;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								
								
								if(tipo[0].Equals("CONEXTCOD"))
								{
									nombreTabla=tipo[1];
								
									//if(nombreTabla.Equals("true")) {
										//blExiste=true;
									
										break;
									//}
									
								}
								
							}
					}							
				}
						
		//return blExiste;
		return nombreTabla;
	}
	
	public static string GetNombreReferenciaColumnFromProperties(ColumnSchema column)
	{
		String nombreColumna=GetNombreColumnFromProperties(column);
		String[] descripciones;
		String[] tipo;				
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("NOMBRE_REF"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	
	public static string GetNombreColumnFromProperties(ColumnSchema column)	{
		return GetNombreColumnFromPropertiesInterno(column,false);
	}
	
	public static string GetNombreColumnFromPropertiesC(ColumnSchema column,bool blnParaSql)	{
		return GetNombreColumnFromPropertiesInterno(column,blnParaSql);
	}
	
	public static string GetNombreColumnFromPropertiesInterno(ColumnSchema column,bool blnParaSql)
	{
	String nombreColumna="";
	
	if(column==null) {
		return nombreColumna;
	}
	
		if(blnEsLowerCaseDBNames) {
			nombreColumna=GetNombreConSeparacionC(column.Name).ToLower();
		} else {	
			if(blnEsMixedCaseDBNames) {
				nombreColumna=column.Name;
			} else {
				nombreColumna=GetNombreConSeparacionC(column.Name).ToUpper();
			}
		}
	
	
	String[] descripciones;
	String[] tipo;
	
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("NOMBRE"))
						{
							nombreColumna=tipo[1];
							
							if(blnEsLowerCaseDBNames) {
								nombreColumna=nombreColumna.ToLower();
							} else {	
								if(blnEsMixedCaseDBNames) {
									nombreColumna=nombreColumna;
								} else {
									nombreColumna=nombreColumna.ToUpper();
								}
							}
							break;
						}
					}
			}
					
		}
	
		if(column.Name.Equals(strId)&&column.IsPrimaryKeyMember&&nombreColumna.Equals(strIdDB)) {
			//Trace.WriteLine(column.Table.Name+"-"+nombreColumna+"="+strIdDB);
			if(!blnParaSql) {
				nombreColumna="ConstantesSql.ID";
			} else {
				nombreColumna=strIdDB;
			}
		}
		
		if(column.Name.Equals(strVersionRow)/* && nombreColumna.Equals(strVersionRowDB)*/) {
			//Trace.WriteLine(column.Table.Name+"-"+nombreColumna+"="+strVersionRowDB);						
			if(!blnParaSql) {
				nombreColumna="ConstantesSql.VERSIONROW";
			} else {
				nombreColumna=strVersionRowDB;
			}
		}
		
		return nombreColumna;
	}
	
	public String GetIdNameC(TableSchema tableSchema) {
	String strIdName=string.Empty;
	String strIdNameValue=string.Empty;
	
	for (int i = 0; i < tableSchema.Columns.Count; i++){
		if(tableSchema.Columns[i].Name.Equals(strId)&&tableSchema.Columns[i].IsPrimaryKeyMember) {
			strIdNameValue=GetNombreColumnFromProperties(tableSchema.Columns[i]);
			
			if(!strIdNameValue.Equals("ConstantesSql.ID")) {
				strIdName="\""+strIdNameValue+"\"";
			}
			
			//TAMANIO PROMEDIO ID,OID
			if(strIdName.Length<5) {
				strIdName=""+strIdName+"";
			}
			
			break;
		}
	}
	
	if(strIdName==string.Empty) {
		strIdName="ConstantesSql.ID";
	}
	
	return strIdName;
				
}

	public  String GetDescripcionComboColumnFromProperties(TableSchema tableSchema,String strNombreObjetoTabla)//PUEDE SER DE MAS DE 1 FK
	{
	
	bool blnExiste=false;	
	string strPrefijoTabla="";
		strPrefijoTabla+="";
	string strPrefijoTipo =""; 
		strPrefijoTipo +=""; 
	string strNombre = "";
		strNombre += "";
	//string strNombreObjetoTabla =GetNombreClaseObjetoC(tableSchema.ToString());
	
	if(strNombreObjetoTabla.Equals("")) {
		strNombreObjetoTabla =GetNombreClaseObjetoC(tableSchema.ToString());
	}
	
	String strColumnaDetalle="";
	String[] descripciones;
	String[] tipo;
	String strColumnaDetalleId="";
	
	if(!GetNoStandardTableFromPropertiesC(tableSchema)) {
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns)
		{
			if(columnSchema.Name==strId)
			{
				strColumnaDetalleId=strNombreObjetoTabla+".get"+strIdGetSet+"().toString()";
			}
			
			foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
			{
				if(extendedProperty.Name=="CS_Description")
				{
				descripciones=((String)extendedProperty.Value).Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBCOMBO"))
							{
								if(blnExiste) {
									strColumnaDetalle+="+\"-\"+";	
								}
								//if(tipo[1]=="true")
								//{
									strColumnaDetalle+=strNombreObjetoTabla+".get"+GetNombreCompletoColumnaClaseC(columnSchema)+"()"+GetTipoColumnaToString(columnSchema)+".trim()";
								//}
								
								//break;
								if(!blnExiste) {
									blnExiste=true;	
								}
							}
						}
				}
						
			}
		}
		
		if(!blnExiste) {
			strColumnaDetalle=strColumnaDetalleId;
		} else {
			strColumnaDetalle+="";
		}
		
	} else {
		strColumnaDetalle=strNombreObjetoTabla+".toString().trim()";
	}
	
	
	return strColumnaDetalle;
	}
	
	public static bool GetTieneComboColumnFromPropertiesC(TableSchema tableSchema){
		bool blExiste=false;
	
		foreach(ColumnSchema column in tableSchema.Columns) {
			blExiste=GetTieneComboColumnFromPropertiesC(column);
			
			if(blExiste) {
				break;
			}
		}
		
		return blExiste;
	}
		
	public static bool GetTieneComboColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
				nombreColumna+="";
		String[] descripciones;
		String[] tipo;
		bool blExiste=false;
		
				foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
				{
					if(extendedProperty.Name=="CS_Description")
					{
						descripciones=((String)extendedProperty.Value).Split('|');
						
							foreach(String descripcion in descripciones)
							{
								tipo=descripcion.Split('=');
								
								if(tipo[0].Equals("WEBCOMBO"))
								{
									blExiste=true;
									
									break;
								}
								
							}
					}							
				}
						
		return blExiste;
	}
	
	public  String GetDescripcionComboColumnFromProperties(TableSchema tableSchema)//PUEDE SER DE MAS DE 1 FK
	{
		return GetDescripcionComboColumnFromProperties(tableSchema,"");
	}
	
	
	public  String GetDescripcionComboColumnFromPropertiesFinalVersionC(TableSchema tableSchema,bool conVariableDescripcion)
	{
	
		
	string strPrefijoTabla="";
		strPrefijoTabla+="";
	string strPrefijoTipo =""; 
		strPrefijoTipo +="";
	string strNombre = "";
		strNombre += "";
	bool blnExiste=false;
	String strColumnaDetalle="";
	String strColumnatoString="";
	String strColumnaDetalleId="";
	String strColumnaDetalleCombo="";
	String[] descripciones;
	String[] tipo;
	
	if(!GetNoStandardTableFromPropertiesC(tableSchema)) {
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns)
		{
			if(columnSchema.Name==strId)
			{
				strColumnaDetalleId=GetNombreClaseObjetoC(tableSchema.ToString())+".get"+strIdGetSet+"().toString();";
			}
			
			foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
			{
				if(extendedProperty.Name=="CS_Description")
				{
				descripciones=((String)extendedProperty.Value).Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBCOMBO"))	{						
								
								//Trace.WriteLine(columnSchema.Name);
								if(blnExiste) {
									strColumnaDetalle+="+\"-\"+";	
								}
								//if(tipo[1]=="true")
								//{
									strColumnaDetalle+=GetNombreClaseObjetoC(tableSchema.ToString())+".get"+GetNombreCompletoColumnaClaseC(columnSchema)+"()"+GetTipoColumnaToString(columnSchema);
								//}
								
								//break;
								
								if(!blnExiste) {
									blnExiste=true;
								}																
							}
						}
				}
						
			}
		}
		
		if(!blnExiste) {
			ColumnSchema columnSchemaCombo=GetColumnDescripcionComboComboC(tableSchema);
			
			if(columnSchemaCombo!=null) {				
				
				strColumnatoString="";
				
				if(!EsVarCharColumn(columnSchemaCombo) && !EsCharColumn(columnSchemaCombo)) {
					strColumnatoString=".toString()";
				}
				
				strColumnaDetalle=GetNombreClaseObjetoC(tableSchema.ToString())+".get"+GetPrefijoTipoC(columnSchemaCombo)+GetNombreColumnaClaseC(columnSchemaCombo)+"()"+strColumnatoString+";";
								
			} else {
				strColumnaDetalle=strColumnaDetalleId;
			}
		} else {
			strColumnaDetalle+=";";
		}
	} else {				
		strColumnaDetalle=GetNombreClaseObjetoC(tableSchema.ToString())+".toString();";
		
	}
	
	if(conVariableDescripcion) {
		strColumnaDetalle="sDescripcion="+strColumnaDetalle;	
	}
	
	if(strColumnaDetalle.Contains(strColumnaDetalleId)) {
		strColumnaDetalle="if("+GetNombreClaseObjetoC(tableSchema.ToString())+".get"+strIdGetSet+"()!=null) {\r\n\t\t\t\t"+strColumnaDetalle;	
		strColumnaDetalle+="\r\n\t\t\t}";
	}
	return strColumnaDetalle;
	}
	
	public  String GetSetDescripcionComboColumnFromPropertiesFinalVersion(TableSchema tableSchema) {	
		string strPrefijoTabla="";
			strPrefijoTabla+="";
		string strPrefijoTipo =""; 
			strPrefijoTipo +="";
		string strNombre = "";
			strNombre += "";
		bool blnExiste=false;
		String strColumnaDetalle="";
		String strColumnatoString="";
		String strColumnaDetalleId="";
		String strColumnaDetalleCombo="";
		String[] descripciones;
		String[] tipo;
		
	if(!GetNoStandardTableFromPropertiesC(tableSchema)) {		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			if(columnSchema.Name==strId) {
				//strColumnaDetalleId=GetNombreClaseObjetoC(tableSchema.ToString())+".get"+strIdGetSet+"().toString();";
			}
			
			foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties) {
				if(extendedProperty.Name=="CS_Description") {
					descripciones=((String)extendedProperty.Value).Split('|');
						
					foreach(String descripcion in descripciones) {
						tipo=descripcion.Split('=');
							
						if(tipo[0].Equals("WEBCOMBO"))	{														
							//Trace.WriteLine(columnSchema.Name);
							if(blnExiste) {
								strColumnaDetalle+="\r\n";//"+\"-\"+";	
							}
							//if(tipo[1]=="true")
							//{
							if(EsVarCharColumn(columnSchema) || EsCharColumn(columnSchema)) {
								strColumnaDetalle+=GetNombreClaseObjetoC(tableSchema.ToString())+".set"+GetNombreCompletoColumnaClaseC(columnSchema)+"(sValor);";//+GetTipoColumnaToString(columnSchema);
							}
							
							//}
								
							//break;
								
							if(!blnExiste) {
								blnExiste=true;
							}
						}
					}
				}						
			}
		}
		
		if(!blnExiste) {
			ColumnSchema columnSchemaCombo=GetColumnDescripcionComboComboC(tableSchema);
			
			if(columnSchemaCombo!=null) {
				strColumnatoString="";
				
				if(EsVarCharColumn(columnSchemaCombo) || EsCharColumn(columnSchemaCombo)) {
					strColumnatoString="";//".toString()";
					strColumnaDetalle=GetNombreClaseObjetoC(tableSchema.ToString())+".set"+GetPrefijoTipoC(columnSchemaCombo)+GetNombreColumnaClaseC(columnSchemaCombo)+"(sValor)"+strColumnatoString+";";
				}								
			} else {
				strColumnaDetalle=strColumnaDetalleId;
			}
		} else {
			strColumnaDetalle+=";";
		}
	} else {
		//strColumnaDetalle=GetNombreClaseObjetoC(tableSchema.ToString())+".toString();";
	}
	
	
	return strColumnaDetalle;
	}
	
	public ColumnSchema GetColumnDescripcionComboComboC(TableSchema tableSchema) {
		ColumnSchema columnSchemaCombo=null;
		bool tiene=false;
		
		int i=1;
		
		foreach(ColumnSchema columnSchema in tableSchema.Columns) {
			if(columnSchema.Name.Equals("Nombre")) {
				columnSchemaCombo=columnSchema;
				break;
			}
			
			if(EsVarCharColumn(columnSchema) && i<=5) {
				tiene=true;
				columnSchemaCombo=columnSchema;
			}
			
			if(!tiene && EsDateColumn(columnSchema) && i<=5) {
				columnSchemaCombo=columnSchema;				
			}
			
			i++;
		}
		
		return columnSchemaCombo;
	}
	
	public  ColumnSchema GetColumnSchemaComboColumnFromProperties(TableSchema tableSchema)
	{
	
	ColumnSchema columnSchemaDetalleCombo=null;
	
	string strPrefijoTabla="";
		strPrefijoTabla+="";
	string strPrefijoTipo =""; 
		strPrefijoTipo +=""; 
	string strNombre = "";
		strNombre += "";
	
	String strColumnaDetalle="id";
		strColumnaDetalle+="";
	String[] descripciones;
	String[] tipo;
	
	foreach(ColumnSchema columnSchema in tableSchema.Columns)
	{
		if(columnSchema.Name==strId)
		{
			columnSchemaDetalleCombo=columnSchema;
		}
		
		foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBCOMBO"))
						{
							columnSchemaDetalleCombo=columnSchema;
							
							break;
						}
					}
			}
					
		}
	}
				
	return  columnSchemaDetalleCombo;
	}
	
	public static string GetWebNombreTituloColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBTITULO"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetTipoDescriptionGenericoColumnFromPropertiesC(ColumnSchema column,String strTipo)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strTipo))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetToolTipColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna=GetWebNombreTituloColumnFromPropertiesC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("TOOLTIP"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public string GetWebNombreTituloLowerColumnFromPropertiesC(ColumnSchema column) {
		bool tiene=false;
		return  GetWebNombreTituloLowerColumnFromPropertiesC(column,ref tiene);
	}
	
	public string GetWebNombreTituloLowerColumnFromPropertiesC(ColumnSchema column,ref bool tiene)
	{
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		bool existe=false;
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBTITULOLOWER"))
							{								
								nombreColumna=tipo[1];
								existe=true;
								tiene=true;
								break;
							}
						}
				}
						
			}
		
		if(!existe) {
			nombreColumna=GetWebNameDescriptionColumnBaseC(column,true,false);	
		}
		
		return nombreColumna;
	}
	
	public static string GetPanelFinNombreColumnFromPropertiesC(ColumnSchema column) {
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		
		nombreColumna=GetPanelFinNombreColumnFromPropertiesC(column,true);
		
		return nombreColumna;
	}
	
	public static string GetPanelFinNombreColumnFromPropertiesC(ColumnSchema column,bool conFormatoNombre)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELFIN"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
			
		if(!nombreColumna.Equals("")) {
			if(conFormatoNombre) {
				nombreColumna=nombreColumna.Replace(" ","_").ToLower();
			}
		}
		
				
		return nombreColumna;
	}
	
	public static string GetPanelInicioNombreColumnFromPropertiesC(ColumnSchema column) {
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		
		nombreColumna=GetPanelInicioNombreColumnFromPropertiesC(column,true);
		
		return nombreColumna;
	} 
	
	public static string GetPanelInicioNombreColumnFromPropertiesC(ColumnSchema column,bool conFormatoNombre)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELINI"))
							{								
								nombreColumna=tipo[1];								
								break;
							}
						}
				}
						
			}
		
		if(!nombreColumna.Equals("")) {
			if(conFormatoNombre) {
				nombreColumna=nombreColumna.Replace(" ","_").ToLower();
			}
		}
		
		return nombreColumna;
	}
	
	public static string GetPanelFinNombreTableFromPropertiesC(TableSchema tableSchema)	{
		String nombreColumna="";
		
		nombreColumna=GetPanelFinNombreTableFromPropertiesC(tableSchema,false);
		
		return nombreColumna;
	}
	
	
	public static string GetPanelFinNombreTableFromPropertiesC(TableSchema tableSchema,bool conFormatoNombre)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELFIN"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		if(!nombreColumna.Equals("")) {
			if(conFormatoNombre) {
				nombreColumna=nombreColumna.Replace(" ","_").ToLower();
			}
		}
		
		return nombreColumna;
	}
	
	public static string GetPanelInicioNombreTableFromPropertiesC(TableSchema tableSchema,bool conFormatoNombre)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("PANELINI"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		if(!nombreColumna.Equals("")) {
			if(conFormatoNombre) {
				nombreColumna=nombreColumna.Replace(" ","_").ToLower();
			}
		}
		
		return nombreColumna;
	}
	
	public static string GetPanelFinNombreReversaTableFromPropertiesC(String strNombre)	{
		String nombreColumna="";
		
		nombreColumna=strNombre.Replace("_"," ").ToUpper();
		
		return nombreColumna;
	}
	
	public static string GetTituloNuevaFilaColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("TITULOFILA"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetAnchoColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WIDTH"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public string GetAnchoColumnPorcentajeExtraFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String nombreColumnaTabla="0";
		String[] descripciones;
		String[] tipo;
		bool tieneEnColumna=false;
		
		if(column.IsForeignKeyMember) {
			TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);
			
			nombreColumna=GetAnchoColumnFkPorcentajeExtraFromPropertiesC(tableSchemaFK);
			
			if(!nombreColumna.Equals("0")) {
				nombreColumnaTabla=nombreColumna;
				//return nombreColumna;
			}
		} else if(EsBitColumn(column)) {
			nombreColumna=GetAnchoCheckBoxTablePorcentajeExtraFromPropertiesC(column.Table);
			
			if(!nombreColumna.Equals("0")) {
				nombreColumnaTabla=nombreColumna;
				//return nombreColumna;
			}
		}
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WIDTHPE"))
							{								
								nombreColumna=tipo[1];
								tieneEnColumna=true;
								break;
							}
						}
				}
						
			}
			
		//SI NO TIENE EN COLUMNA, TOMA DE TABLA (SI NO ES 0)
		if(!tieneEnColumna) {
			if(!nombreColumnaTabla.Equals("0")) {
				nombreColumna=nombreColumnaTabla;
			}
		}
		
		return nombreColumna;
	}
	
	public static string GetAnchoLabelColumnPorcentajeExtraFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		/*
		if(column.IsForeignKeyMember) {
			TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);
			
			nombreColumna=GetAnchoColumnFkPorcentajeExtraFromPropertiesC(tableSchemaFK);
			
			if(!nombreColumna.Equals("0")) {
				return nombreColumna;
			}
		}
		*/
		
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WIDTHPELABEL"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetAnchoFilaTituloColumnPorcentajeExtraFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="100";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		/*
		if(column.IsForeignKeyMember) {
			TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);
			
			nombreColumna=GetAnchoColumnFkPorcentajeExtraFromPropertiesC(tableSchemaFK);
			
			if(!nombreColumna.Equals("0")) {
				return nombreColumna;
			}
		}
		*/
		
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WIDTHPEFILA"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetAltoLabelColumnPorcentajeExtraFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		/*
		if(column.IsForeignKeyMember) {
			TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);
			
			nombreColumna=GetAnchoColumnFkPorcentajeExtraFromPropertiesC(tableSchemaFK);
			
			if(!nombreColumna.Equals("0")) {
				return nombreColumna;
			}
		}
		*/
		
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("HEIGHTPELABEL"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetAnchoLabelTablePorcentajeExtraFromPropertiesC(TableSchema table)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		foreach(ExtendedProperty extendedProperty in table.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WIDTHPELABEL"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetAltoLabelTablePorcentajeExtraFromPropertiesC(TableSchema table)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		foreach(ExtendedProperty extendedProperty in table.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("HEIGHTPELABEL"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetAnchoColumnPorcentajeExtraFromPropertiesC(TableSchema table)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in table.ExtendedProperties) {								
				if(extendedProperty.Name=="CS_Description") {
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WIDTHPE"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	
	
	public static string GetAnchoCheckBoxTablePorcentajeExtraFromPropertiesC(TableSchema table)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in table.ExtendedProperties) {								
				if(extendedProperty.Name=="CS_Description") {
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WIDTHPE_CHECKBOX"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetAnchoColumnFkPorcentajeExtraFromPropertiesC(TableSchema table)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in table.ExtendedProperties) {								
				if(extendedProperty.Name=="CS_Description") {
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WIDTHPEFK"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	//
	public static string GetAltoRelacionesPorcentajeExtraFromPropertiesC(TableSchema table)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in table.ExtendedProperties) {								
				if(extendedProperty.Name=="CS_Description") {
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("HEIGHTPE_REL"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetAltoRelacionesTabPorcentajeExtraFromPropertiesC(TableSchema table)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in table.ExtendedProperties) {								
				if(extendedProperty.Name=="CS_Description") {
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("HEIGHTPE_REL_TAB"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public string GetAnchoColumnSwingExtraC(String strValorInicialWidth,ColumnSchema column) {
		String strSwingWidthControlExtra =" + FuncionesSwing.getValorProporcion("+strValorInicialWidth+",REPLACE)";
		
		String strAnchoColumnPorcentajeExtra = "0";
		
		if(column!=null) {
			strAnchoColumnPorcentajeExtra =GetAnchoColumnPorcentajeExtraFromPropertiesC(column);
		}
		
		strSwingWidthControlExtra=strSwingWidthControlExtra.Replace("REPLACE",strAnchoColumnPorcentajeExtra);
		
		return strSwingWidthControlExtra;
	}

	public static string GetAnchoLabelColumnSwingExtraC(String strValorInicialWidth,ColumnSchema column) {
		String strSwingWidthControlExtra =" + FuncionesSwing.getValorProporcion("+strValorInicialWidth+",REPLACE)";
		
		String strAnchoColumnPorcentajeExtra = "0";
		String strAnchoColumnPorcentajeExtraColumna = "0";
		String strAnchoColumnPorcentajeExtraTabla = "0";
		
		if(column!=null) {
			strAnchoColumnPorcentajeExtraColumna =GetAnchoLabelColumnPorcentajeExtraFromPropertiesC(column);
			
			if(strAnchoColumnPorcentajeExtraColumna.Equals("0")) {
				strAnchoColumnPorcentajeExtraTabla =GetAnchoLabelTablePorcentajeExtraFromPropertiesC(column.Table);			
				
				//Trace.WriteLine(strAnchoColumnPorcentajeExtraColumna);
				
				if(!strAnchoColumnPorcentajeExtraTabla.Equals("0")) {
					strAnchoColumnPorcentajeExtra=strAnchoColumnPorcentajeExtraTabla;
				
				} else {
					strAnchoColumnPorcentajeExtra=strAnchoColumnPorcentajeDefectoTabla;
				}
			} else {
				strAnchoColumnPorcentajeExtra=strAnchoColumnPorcentajeExtraColumna;				
			}
		}
		
		strSwingWidthControlExtra=strSwingWidthControlExtra.Replace("REPLACE",strAnchoColumnPorcentajeExtra);
				
		//Trace.WriteLine(strSwingWidthControlExtra);
		
		return strSwingWidthControlExtra;
	}
	
	public static string GetAltoLabelColumnSwingExtraC(String strValorInicialWidth,ColumnSchema column) {
		String strSwingWidthControlExtra =" + FuncionesSwing.getValorProporcion("+strValorInicialWidth+",REPLACE)";
		
		String strAnchoColumnPorcentajeExtra = "0";
		String strAnchoColumnPorcentajeExtraColumna = "0";
		String strAnchoColumnPorcentajeExtraTabla = "0";
		
		if(column!=null) {
			strAnchoColumnPorcentajeExtraColumna =GetAltoLabelColumnPorcentajeExtraFromPropertiesC(column);
						
			if(strAnchoColumnPorcentajeExtraColumna.Equals("0")) {
				strAnchoColumnPorcentajeExtraTabla =GetAltoLabelTablePorcentajeExtraFromPropertiesC(column.Table);			
			
				if(!strAnchoColumnPorcentajeExtraTabla.Equals("0")) {
					strAnchoColumnPorcentajeExtra=strAnchoColumnPorcentajeExtraTabla;
				
				} else {
					strAnchoColumnPorcentajeExtra=strAltoColumnPorcentajeDefectoTabla;
				}
			} else {
				strAnchoColumnPorcentajeExtra=strAnchoColumnPorcentajeExtraColumna;				
			}
		}
		
		strSwingWidthControlExtra=strSwingWidthControlExtra.Replace("REPLACE",strAnchoColumnPorcentajeExtra);
				
		//Trace.WriteLine(strSwingWidthControlExtra);
		
		return strSwingWidthControlExtra;
	}
	
	public static string GetAnchoColumnTablaSwingExtraC(String strValorInicialWidth,TableSchema table) {
		String strSwingWidthControlExtra =" + FuncionesSwing.getValorProporcion("+strValorInicialWidth+",REPLACE)";
		
		String strAnchoColumnPorcentajeExtra = "0";
		
		if(table!=null) {
			strAnchoColumnPorcentajeExtra =GetAnchoColumnPorcentajeExtraFromPropertiesC(table);
		}
		
		strSwingWidthControlExtra=strSwingWidthControlExtra.Replace("REPLACE",strAnchoColumnPorcentajeExtra);
		
		return strSwingWidthControlExtra;
	}

	public static string GetAltoColumnSwingExtraC(String strValorInicialWidth,ColumnSchema column) {
		String strSwingWidthControlExtra =" + FuncionesSwing.getValorProporcion("+strValorInicialWidth+",REPLACE)";
		
		String strAltoColumnPorcentajeExtra ="0";
		
		if(column!=null) {
			strAltoColumnPorcentajeExtra =GetAltoColumnPorcentajeExtraFromPropertiesC(column);
		}
		
		strSwingWidthControlExtra=strSwingWidthControlExtra.Replace("REPLACE",strAltoColumnPorcentajeExtra);
		
		return strSwingWidthControlExtra;
	}
	
	public static string GetAltoTablaRelacionesSwingExtraC(String strValorInicialWidth,TableSchema table) {
		String strSwingWidthControlExtra =" + FuncionesSwing.getValorProporcion("+strValorInicialWidth+",REPLACE)";
		
		String strAnchoColumnPorcentajeExtra = "0";
		
		if(table!=null) {
			strAnchoColumnPorcentajeExtra =GetAltoRelacionesPorcentajeExtraFromPropertiesC(table);
		}
		
		strSwingWidthControlExtra=strSwingWidthControlExtra.Replace("REPLACE",strAnchoColumnPorcentajeExtra);
		
		return strSwingWidthControlExtra;
	}
	
	public static string GetAltoColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="Constantes.ISWING_ALTO_CONTROL";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("HEIGHT"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetAltoColumnPorcentajeExtraFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="0";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("HEIGHTPE"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetColSpanColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("COLSPAN"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetCellSpacingTableFromPropertiesC(TableSchema table)	{
		String nombreColumna="";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
				
			foreach(ExtendedProperty extendedProperty in table.ExtendedProperties) {								
				if(extendedProperty.Name=="CS_Description") {
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones) {							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("CELLSPACING")) {								
								nombreColumna=tipo[1];
								break;
							}
						}
				}						
			}
				
		return nombreColumna;
	}
	
	public static string GetCellSpacingLeftTableFromPropertiesC(TableSchema table)	{
		String nombreColumna="";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
				
			foreach(ExtendedProperty extendedProperty in table.ExtendedProperties) {								
				if(extendedProperty.Name=="CS_Description") {
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones) {							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("CELLSPACING_LEFT")) {								
								nombreColumna=tipo[1];
								break;
							}
						}
				}						
			}
				
		return nombreColumna;
	}
	
	public static string GetAnchorColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";//"Constantes.ISWING_ANCHO_COLUMNA";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ANCHOR"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetFinalQueryColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("FINALQUERY"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
					break;
				}
						
			}
			
		nombreColumna=nombreColumna.Replace("-IGUAL-","=");
		nombreColumna=nombreColumna.Replace("-I-","=");
		
		return nombreColumna;
	}
	
	public static string GetVarGlobalNOTableFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("VARGLOBALNO"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
					break;
				}
						
			}
			
		//nombreColumna=nombreColumna.Replace("-IGUAL-","=");
		//nombreColumna=nombreColumna.Replace("-I-","=");
		
		return nombreColumna;
	}
	
	public static string GetVarGlobalNOColumnFromPropertiesC(ColumnSchema columnSchema)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("VARGLOBALNO"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
					break;
				}
						
			}
			
		//nombreColumna=nombreColumna.Replace("-IGUAL-","=");
		//nombreColumna=nombreColumna.Replace("-I-","=");
		
		return nombreColumna;
	}
	
	public static string GetVarGlobalNOFkTableFromPropertiesC(TableSchema tableSchema)
	{
		String nombreColumna="";//GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in tableSchema.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("VARGLOBALNOFK"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
					break;
				}
						
			}
			
		//nombreColumna=nombreColumna.Replace("-IGUAL-","=");
		//nombreColumna=nombreColumna.Replace("-I-","=");
		
		return nombreColumna;
	}		
	
	public static string GetColumnClaseParametroColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("VALORPARAM"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetNombreOrderColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBORDEN"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public string GetKeyListaColumnFromPropertiesC(ColumnSchema column)
	{
		TableSchema tableSchemaPK=GetTableSchemaFromColumnForeignKey(column);		
		String nombreColumna=column.Name.Replace(strId+tableSchemaPK.Name,"").ToUpper();//=GetNombreColumnaClaseC(column).ToUpper();
		
		String[] descripciones;
		String[] tipo;
			
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties) {
				if(extendedProperty.Name=="CS_Description") {
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones) {						
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("KEYLISTA")) {								
								nombreColumna=tipo[1];
								break;
							}
						}
				}						
			}
				
		return nombreColumna;
	}
	
	public static string GetJavaScriptValidacionColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("JSVALIDACION"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetJavaValidacionColumnFromPropertiesC(ColumnSchema column)
	{
		String nombreColumna="";
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("VALIDACION"))
							{								
								nombreColumna=tipo[1];
								break;
							}
						}
				}
						
			}
				
		return nombreColumna;
	}
	
	public static string GetValorDeNombreFromSubStringC(String strSubString,String strNombre)
	{
		String nombreColumna="";
		String[] descripciones;
		String[] tipo;
		
		
			//foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			//{
				
				
				//if(extendedProperty.Name=="CS_Description")
				//{
										
					descripciones=strSubString.Split('>');
										
						//foreach(String descripcion in descripciones)
						//{
							
							//tipo=descripcion.Split('=');
							
							if(descripciones[0].Equals(strNombre))
							{								
								nombreColumna=descripciones[1];
								//break;
							}
						//}
				//}
						
			//}
				
		return nombreColumna;
	}
	
	public static bool GetNoEditColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("EDITNO"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetEsPasswordColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ESPASSWORD"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetReadOnlyColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("READONLY"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetNoInsertEditColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strINSERTEDITNO))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetSiInsertEditColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("INSERTEDITSI"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetEsNullColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strESNULL))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetOnChangeColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ONCHANGE"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetOnEventDbColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ONEVENT_DB"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetOnEventDbParentColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ONEVENT_DB_PARENT"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	
	public static bool GetOnClicColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("ONCLIC"))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static bool GetShowTableColumnFromPropertiesC(ColumnSchema column)
	{
		//bool blnNoEdit=false;
		bool blnNoEdit=true;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strSHOWTABLE))
							{								
								nombreColumna=tipo[1];
								
								
								if(nombreColumna.Equals("false")) {
									blnNoEdit=false;
								}
								
								/*
								if(nombreColumna.Equals("true")) {
									blnNoEdit=true;
								}
								*/
								//blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static String GetConListaValoresColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		String strListaValores=string.Empty;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{
				
				
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strLISTAVALOR))
							{								
								//nombreColumna=tipo[1];
								strListaValores=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return strListaValores;
	}
	
	public static bool GetIdNoVisibleColumnFromPropertiesC(ColumnSchema column)
	{
		bool blnNoEdit=false;
		
		String nombreColumna=GetNombreColumnaClaseC(column);
		String[] descripciones;
		String[] tipo;
		
		
			foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
			{							
				if(extendedProperty.Name=="CS_Description")
				{
										
					descripciones=((String)extendedProperty.Value).Split('|');
										
						foreach(String descripcion in descripciones)
						{
							
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals(strIDHIDDEN))
							{								
								nombreColumna=tipo[1];
								 blnNoEdit=true;
								break;
							}
						}
				}
						
			}
				
		return blnNoEdit;
	}
	
	public static int GetWebNumeroFilasColumnFromPropertiesC(ColumnSchema column)
	{
	int numeroFilasRows=column.Size/30;
	int numeroFilasRowsTable=0;
	
	String[] descripciones;
	String[] tipo;
	
	numeroFilasRowsTable=GetWebNumeroFilasTableFromPropertiesC(column.Table);
	
	//Trace.WriteLine(numeroFilasRowsTable);
	
	if(numeroFilasRowsTable>0) {
		return numeroFilasRowsTable;
	}
	
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBFILAS"))
						{
							if(int.TryParse(tipo[1],out numeroFilasRows))
							{
								numeroFilasRows=int.Parse(tipo[1]);
							}
							
							break;
						}
					}
			}
					
		}
				
	return numeroFilasRows;
	}
	
	public static int GetWebNumeroFilasTableFromPropertiesC(TableSchema table)
	{
	int numeroFilasRows=0;//column.Size/30;
	String[] descripciones;
	String[] tipo;
	
		foreach(ExtendedProperty extendedProperty in table.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBFILAS"))
						{
							if(int.TryParse(tipo[1],out numeroFilasRows))
							{
								numeroFilasRows=int.Parse(tipo[1]);
							}
							
							break;
						}
					}
			}
					
		}
				
	return numeroFilasRows;
	}
	
	public static int GetWebNumeroColumnasColumnFromPropertiesC(ColumnSchema column)
	{
	int numeroColumnasRows=30;
	String[] descripciones;
	String[] tipo;
	
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
			descripciones=((String)extendedProperty.Value).Split('|');
					
					foreach(String descripcion in descripciones)
					{
						tipo=descripcion.Split('=');
						
						if(tipo[0].Equals("WEBCOLUMNS"))
						{
							if(int.TryParse(tipo[1],out numeroColumnasRows))
							{
								numeroColumnasRows=int.Parse(tipo[1]);
							}
							
							break;
						}
					}
			}
					
		}
				
	return numeroColumnasRows;
	}
	
	public static bool TieneColumnaTipoTexto(IndexSchema indexSchema) {
		bool tieneColumnaTexto=false;
	
		foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
		{
			if(memberColumnSchema.DataType==DbType.AnsiString ||memberColumnSchema.DataType==DbType.AnsiStringFixedLength ||memberColumnSchema.DataType==DbType.String||memberColumnSchema.DataType==DbType.StringFixedLength)
			{
				tieneColumnaTexto=true;
			}
		}
								
		return tieneColumnaTexto;
	}
	
	public static bool TieneColumnaEsDefectoC(TableSchema tableSchema) {
		bool tieneColumnaTexto=false;
	
		if(tableSchema.Columns.Count<8) {
			foreach(ColumnSchema columnSchema in tableSchema.Columns){
				if(columnSchema.Name.Equals("EsDefecto")) {
					tieneColumnaTexto=true;
					break;
				}
			}
		}		
		
		return tieneColumnaTexto;
	}
	
	public static bool TieneIdentityColumnC(ColumnSchema columnSchemaPK) {
		bool blnValidacionPK=true;
		
		if(!columnSchemaPK.IsForeignKeyMember && columnSchemaPK.IsPrimaryKeyMember) {
			foreach(ExtendedProperty extendedProperty in columnSchemaPK.ExtendedProperties) {
				if(extendedProperty.Name.Equals("CS_IsIdentity")) {
					if(extendedProperty.Value.Equals(false)) {
						if(!GetNoIdTableFromPropertiesC(columnSchemaPK.Table) && !GetNoIdentityTableFromPropertiesC(columnSchemaPK.Table)) {
							blnValidacionPK=false;
							
							//PUEDE NO VALIDAR IDENTITY PERO DEBEN SER TABLAS CON NOMBRE ESTADO
							/*
							if(!C1_EsConPkNOAutoNumerico || (C1_EsConPkNOAutoNumerico && !table.Name.Contains("Estado"))) {
								blnValidacionPK=true;
								strValidation +="No es identity </br>\r\n";									
							}
							*/
						}
					}
				}
			}
		}	
			
		return blnValidacionPK;
	}

	public bool TieneIdentityColumnC(TableSchema tableSchema) {
		bool blnValidacionPK=false;
		
		foreach(ColumnSchema columnSchemaPK in tableSchema.Columns) {
			if(!columnSchemaPK.IsForeignKeyMember && columnSchemaPK.IsPrimaryKeyMember) {
				foreach(ExtendedProperty extendedProperty in columnSchemaPK.ExtendedProperties) {
					if(extendedProperty.Name.Equals("CS_IsIdentity")) {
						if(extendedProperty.Value.Equals(true)) {
							blnValidacionPK=true;								
							break;
							//if(!GetNoIdTableFromPropertiesC(columnSchemaPK.Table) && !GetNoIdentityTableFromPropertiesC(columnSchemaPK.Table)) {
								//blnValidacionPK=false;
								
								//PUEDE NO VALIDAR IDENTITY PERO DEBEN SER TABLAS CON NOMBRE ESTADO
								/*
								if(!C1_EsConPkNOAutoNumerico || (C1_EsConPkNOAutoNumerico && !table.Name.Contains("Estado"))) {
									blnValidacionPK=true;
									strValidation +="No es identity </br>\r\n";
									
								}
								*/
							//}							
						} else {
							
						}
					}
				}
				
				if(blnValidacionPK){
					break;
				}
			}	
		}
		
		return blnValidacionPK;
	}
	
	public bool GetConMaximoRelacionesC(TableSchema tableSchema) {
		bool blnValidacionPK=true;
		
		//Trace.WriteLine(GetNumeroClasesRelacionadasFinalC(tableSchema));
		
		if((GetNumeroClasesRelacionadasFinalC(tableSchema) >12 && (GetNombresClasesNoNavegacionFromTableFromPropertiesC(tableSchema).Equals("") && GetNombresClasesSiNavegacionFromTableFromPropertiesC(tableSchema).Equals(""))) || GetNombresClasesNoNavegacionFromTableFromPropertiesC(tableSchema).Equals(strNINGUNO) || GetNombresClasesSiNavegacionFromTableFromPropertiesC(tableSchema).Equals(strNINGUNO)) {
			 blnValidacionPK=false;			
		}
		
		return blnValidacionPK;
	}

	//PARA FK Y PUEDE SER VARIOS FK, SIEMPRE false
	public string GetNombreClaseRelacionadaFromColumn(ColumnSchema column)
	{
		String nombreClase="NONE";
		
		//ANTES FUNCIONABA PERO SIN CATALOGOS GENERALES
		//nombreClase=GetNombreClaseRelacionadaFromColumn(column,false);
		
		TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);
		
		if(tableSchemaFK!=null) {
			nombreClase=tableSchemaFK.ToString().Replace(tableSchemaFK.Owner+".","");
		} else {
			nombreClase=GetNombreClaseRelacionadaFromColumn(column,false);
		}
		
		//Trace.WriteLine(column.Name+"->"+nombreClase);
		
		return nombreClase;
	}
		
	//SI ES true ES PARA RELACION UNO A UNO	
	public static string GetNombreClaseRelacionadaFromColumn(ColumnSchema column,bool blnEsParaUnoAUno)
	{
	String nombreClase="NONE";
	String tabla=column.Name.Replace(strId,"");
	String[] descripciones;
	String[] tipo;
	
	if(tabla!="") {	
		if(!blnEsParaUnoAUno) {
			nombreClase=GetNombreClaseRelacionadaImproveFromColumn(column);//column.Name.Substring(2,column.Name.Length-2);//tabla;
		} else {
			nombreClase="";
		}
	}
	else
	{
		/*
		if(blnEsParaUnoAUno) {
			Trace.WriteLine("123"+nombreClase);
		}
		*/
		
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TABLA"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	}
	
	
	
	return nombreClase;
	}
	
	public string GetSetEntityColumnaC(ColumnSchema column)
	{				
		String strSetEntity=string.Empty;
		
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)||column.Name.Equals(strIsExpired)||column.Name.Equals(strVersionRow))
		{
			return strSetEntity;
		}
		String strEntityInit="entity.set";
		String strEntityMiddle="resultSet.get";
		String strEntityFinal=")";//);
		
		String strDateInit="";
		String strDateFinal="";
		String strGetValorResulset="";
		
		String strValidacionNulo="";
		String strValidacionNuloInit="";
		String strValidacionNuloFin="";
		
		if(EsDateColumn(column)) {
			strDateInit="new Date(";
			strDateFinal=".getTime())";
			
		}
		
		//entity.setNombre(resultSet.getString("nombre"));	
		String strNombreConstante=GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper()/*GetNombreCampoTablaNativeUpperConstantC(column)*/;
		
		/*column.Name*/
		strGetValorResulset=strDateInit+strEntityMiddle+GetTipoColumnaClaseGetResulsetC(column)+"(strPrefijo+"+/*"\""+GetNombreColumnFromProperties(column)+"\""*/strNombreConstante+strEntityFinal+strDateFinal;				
		
		if(EsBinaryColumn(column)) {
			strValidacionNuloInit="if("+strGetValorResulset+"!=null) {";
			strValidacionNuloFin="}";
		}
		
		strSetEntity=strValidacionNuloInit+  strEntityInit+GetNombreCompletoColumnaClaseC(column)+"("+strGetValorResulset+");"+strValidacionNuloFin;
		
		if(GetEsNullColumnFromPropertiesC(column)) {
			strSetEntity+="if(resultSet.wasNull()) {"+strEntityInit+GetNombreCompletoColumnaClaseC(column)+"(null); }";
		}
		
		return strSetEntity;
	}
	
	public string GetSetEntityColumnaReflectionC(ColumnSchema column)
	{				
		String strSetEntity=string.Empty;
		
		/*
		if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)||column.Name.Equals(strIsExpired)||column.Name.Equals(strVersionRow))
		{
			return strSetEntity;
		}
		*/
		
		String strNombreConstante=GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper()/*GetNombreCampoTablaNativeUpperConstantC(column)*/;
		
		String strEntityInit="\r\n\t\t\t\tcase "+strNombreConstante+":\r\n\t\t\t\t\tfield.set(entity,";
		String strEntityMiddle="resultSet.get";
		String strEntityFinal=")";//);
		
		String strDateInit="";
		String strDateFinal="";
		
		if(EsDateColumn(column)) {
			strDateInit="new Date(";
			strDateFinal=").getTime()";
		}
		
		//entity.setNombre(resultSet.getString("nombre"));	
		
		/*column.Name*/
		//strPrefijo+
		strSetEntity=strEntityInit/*GetNombreCompletoColumnaClaseC(column)+"("*/+strDateInit+strEntityMiddle+GetTipoColumnaClaseGetResulsetC(column)+"(sCampo"+/*"\""+GetNombreColumnFromProperties(column)+"\""*//*strNombreConstante+strEntityFinal*/strDateFinal+"));";
		
		if(GetEsNullColumnFromPropertiesC(column)) {
			//strSetEntity+="if(resultSet.wasNull()) {"+strEntityInit+GetNombreCompletoColumnaClaseC(column)+"(null); }";
		}
		
		strSetEntity+="\r\n\t\t\t\t\tbreak;";
		
		return strSetEntity;
	}
	
	//CON ESTA FUNCION PERMITE TENER MAS DE 1 FOREIGN KEY CON LA MISMA TABLA
	public static string GetNombreClaseRelacionadaImproveFromColumn(ColumnSchema column)
	{
		String nombreClase=column.Name.Substring(2,column.Name.Length-2);
		bool existeNombreClase=false;
		
		foreach(TableSchema tableSchema in column.Database.Tables) {
			if(nombreClase.Equals(tableSchema.Name)) {
				existeNombreClase=true;
			}
		}
		
		String strUltimaPalabra="";
		String strUltimaPalabraOrdenada="";
		
		char charActual='a';
		
			
			
		if(!existeNombreClase) {
			for(int i=nombreClase.ToCharArray().Length-1;i>-1;i--) {
				charActual=nombreClase.ToCharArray()[i];
				strUltimaPalabra+=charActual.ToString();
					
				if(Char.IsUpper(charActual)) {
					break;
				}
			}
			
			for(int j=strUltimaPalabra.ToCharArray().Length-1;j>-1;j--) {
				charActual=strUltimaPalabra.ToCharArray()[j];
				
				strUltimaPalabraOrdenada+=charActual.ToString();
			}
			
			nombreClase=nombreClase.Replace(strUltimaPalabraOrdenada,"");
			//Trace.WriteLine(column.Name+"-->"+nombreClase);
		
		}
		
		return nombreClase;
	}
	
	public static bool ExisteListaTextoC(ArrayList arrayListNombres,String strNombre) {
		bool existeNombreClase=false;
		
		foreach(String strNombreActual in arrayListNombres) {
			if(strNombreActual.Equals(strNombre)) {
				existeNombreClase=true;
			}
		}
		
		return existeNombreClase;
	}
	
	//ESTA FUNCION PERMITE TENER EL NOMBRE DEL FOREIGN KEY, DONDE PUEDE TENER MAS DE 1 CON LA MISMA TABLA
	public  string GetNombreCompletoClaseRelacionadaFromColumn(ColumnSchema column)
	{
	String nombreClase="NONE";
	String tabla=column.Name.Replace(strId,"");
	String[] descripciones;
	String[] tipo;
	TableSchema tableSchemaRelacionadaFK=null;
	
	if(tabla!="")
	{	nombreClase=column.Name.Substring(2,column.Name.Length-2);//tabla;			
	}
	else
	{
		tableSchemaRelacionadaFK=GetTableSchemaFromColumnForeignKey(column);
		
		if(tableSchemaRelacionadaFK!=null) {
			nombreClase=GetNombreClaseC(tableSchemaRelacionadaFK.ToString());
			
			return nombreClase;
		}
		
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TABLACOMPLETA"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				
				break;				
			}
					
		}				
			
	}
	
	return nombreClase;
	}
	
	//ESTA FUNCION PERMITE TENER EL NOMBRE ADICIONAL DEL FOREIGN KEY, DONDE PUEDE TENER MAS DE 1 CON LA MISMA TABLA
	public string GetNombreAdicionalClaseRelacionadaFromRelation(CollectionInfo collectionInfo)
	{
		String nombreAdicional="";
		
		TableKeySchema tableKeySchema=collectionInfo.TableKey;
		
		String strNombreTablaPrimary=tableKeySchema.PrimaryKeyTable.Name;
		
		String strNombreTablaForeign=tableKeySchema.ForeignKeyTable.Name;
		
		//Trace.WriteLine("Table Primary:"+strNombreTablaPrimary);		
		//Trace.WriteLine("Table Foreign:"+strNombreTablaForeign);		
		
		//EL REEMPLAZO ES EN BASE A LA UNICA CLAVE FOREIGN OSEA UNICA PK id
		if(tableKeySchema.ForeignKeyMemberColumns.Count.Equals(1)) {
			String strNombreColumnaFKSecondary=tableKeySchema.ForeignKeyMemberColumns[0].Column.Name;
			//Trace.WriteLine("Column Secondary:"+strNombreColumnaFKSecondary);
			//Trace.WriteLine(strNombreTablaPrimary);
			//Trace.WriteLine("fk Primary:"+strNombreColumnaFKSecondary);
			if(!strNombreColumnaFKSecondary.Equals(strId)) {
				nombreAdicional=strNombreColumnaFKSecondary.Replace(strId+strNombreTablaPrimary,"");
				//Trace.WriteLine(strNombreTablaForeign+nombreAdicional);
				//Trace.WriteLine("Adicional:"+nombreAdicional+"--"+strNombreColumnaFKSecondary+"---"+strId+strNombreTablaPrimary);
			}
		}
		
		//Trace.WriteLine("_____________________________________");
		
		return nombreAdicional;
	}
	
	//ESTA FUNCION PERMITE TENER EL NOMBRE DE ONE TO MANY, DONDE PUEDE TENER MAS DE 1 CON LA MISMA TABLA
	public  string GetNombreExtraClaseRelacionadaFromRelacionC(TableKeySchema tableKeySchema)
	{
	TableSchema tableSchemaPK=tableKeySchema.PrimaryKeyTable;
	
	String nombreClase="";
	String tabla="";//column.Name.Replace(strId,"");
	String[] descripciones;
	String[] tipo;
	TableSchema tableSchemaRelacionadaFK=null;
	
	foreach(ColumnSchema columnSchema in tableKeySchema.ForeignKeyMemberColumns) {
		tabla+=columnSchema.Name.Replace(strId+tableSchemaPK.Name,"");
	}
		
	/*
	if(tabla!="")
	{	nombreClase=column.Name.Substring(2,column.Name.Length-2);//tabla;			
	}
	*/
	
	return tabla;
	}
	
	public static bool ExisteTablasClasesYaRelacionadas(ArrayList arrayList,String SecondaryTable) {
		bool blnExiste=false;
		
		foreach(String strSecondaryTable in arrayList) {
			if(strSecondaryTable.Equals(SecondaryTable)) {
				blnExiste=true;
				break;
			}
		}
		
		return blnExiste;
	}
	
	public static bool EsClaseRelacionadaUnoAUnoFromColumnC(ColumnSchema column)
	{
	String nombreClase="NONE";
		nombreClase+="";
	String tabla=column.Name.Replace(strId,"");
	String[] descripciones;
	String[] tipo;
	bool esRelacionUnoAUno=false;
	
	if(tabla=="")
	{
		esRelacionUnoAUno=true;
			
	}
		return esRelacionUnoAUno;
	}
	
	public TableSchema GetNombreTablaRelacionadaFromColumn(ColumnSchema column) {	
		Hashtable tablasRelacionadas=GetTablasRelacionadas(column.Table);
		
		String strNombreColumna=GetNombreColumnFromProperties(column);
		String strTablaEncontrada=GetNombreClaseRelacionadaFromColumn(column);
				
		//Trace.WriteLine(strNombreColumna+"-"+strTablaEncontrada);
		
		foreach(TableSchema tableSchema in column.Table.Database.Tables) {				
			if(strTablaEncontrada==GetNombreClaseC(tableSchema.ToString())) {
				strTablaEncontrada=GetNombreTableFromProperties(tableSchema);					
				break;
			}
		}
		
					
		TableSchema tableSchemaEncontrada=GetTablaFromNombreC(strTablaEncontrada,column.Table);								
		
		return tableSchemaEncontrada;
	}
	
	public  String VariablesStringForeignKeysLoteC(TableSchema TablaBase,bool conInicializar) {
		String sVariablesArray="";
		
		String strBusquedaFKComment="";
		String strCargarDependencia="";
		String sModuloDominio="this.moduloActual";
		String sModuloDominioProperties="";
		String sInicializar="";
		bool esPrimero=true;
		
		if(conInicializar) {
			sInicializar="String ";
		}
		
		if(!blnNoStandardTableFromProperties) {	
			foreach(ColumnSchema column in TablaBase.Columns) {
				if(column.IsForeignKeyMember) {
					//sModuloDominio="this.moduloActual";
					
					//strBusquedaFKComment="\r\n\r\n\t\t\t\t\t";
									
					//if(EsSwing) {
						/*
						strCargarDependencia="";
						
						if(!GetConEventDependColumnFromPropertiesC(column).Equals("")) {
							strCargarDependencia="cargarCombosDependencia && ";
						}
						*/
						
						if(!esPrimero) {
							sVariablesArray+=",";
						} else {
							esPrimero=false;
						}
						
						sVariablesArray+=sInicializar+"finalQueryGlobal"+GetNombreCompletoClaseRelacionadaFromColumn(column) +"";
						
						
						
						//sVariablesArray+="\r\n\r\n\t\t\t\tif("+strCargarDependencia+"(this."+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column)).ToLower() +"sForeignKey==null||this."+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column)).ToLower() +"sForeignKey.size()<=0)) {";
					//}
					
				}	
			}
		} else {
			ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
				
			foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
				//NUNCA COMENTAR LLAMADA CARGARCOMBOS
					
					strBusquedaFKComment="\r\n\t\t\t\t\t";
					
					
					/*
					if(EsSwing)
					{
						sVariablesArray+="\r\n\t\t\t\tif(this."+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"sForeignKey==null||this."+GetNombreClaseC(tableSchemaForeignKey.ToString()).ToLower() +"sForeignKey.size()<=0)\r\n\t\t\t\t{\r\n";
					}
					
					sVariablesArray+=strBusquedaFKComment+"this.cargarCombos"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"s"+strForeignKey+"Lista();";
					
					if(EsSwing)
					{
						sVariablesArray+="\r\n\t\t\t\t}\r\n";
					}
					*/
			}
		}
				
		return sVariablesArray;
	}
	public String GetAddClassesForeignKeyC(TableSchema TablaBase,bool conNombresClases)	{
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		String strElse="";
		
		if(conNombresClases) {
			strClassesForeignKey+="\r\n\r\n\t\t\t\tfor(String sClasse:arrClasses) {";
		}
		
		foreach(ColumnSchema columnSchema in TablaBase.Columns) {										
			if(columnSchema.IsForeignKeyMember) {
				tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
				
				if(!conNombresClases) {
					strClassesForeignKey+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+".class));";
				} else {
					//strClassesForeignKey+="\r\n\r\n\t\t\t\tfor(String sClasse:arrClasses) {";
						
					strClassesForeignKey+="\r\n\r\n\t\t\t\t\t"+strElse +"if("+GetNombreClaseC(tableSchema.ToString())+ ".class.getSimpleName().equals(sClasse)) {";
					strClassesForeignKey+="\r\n\t\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+ ".class)); continue;";
					//strClassesForeignKey+="\r\n\t\t\t\t\t\tcontinue;";
					strClassesForeignKey+="\r\n\t\t\t\t\t}";					
					
					//strClassesForeignKey+="\r\n\t\t\t\t}";
				}
			}
		}
		
		if(conNombresClases) {
			strClassesForeignKey+="\r\n\t\t\t\t}";
		}
				
		return strClassesForeignKey;
	}
	
	public String GetAddClassesForeignKeyIncludeC(TableSchema TablaBase,bool conNombresClases)	{
		String strClassesForeignKey=string.Empty;
		String strElse="";
		TableSchema	tableSchema;
		
		if(conNombresClases) {
			strClassesForeignKey+="\r\n\r\n\t\t\t\tfor(String sClasse:arrClasses) {";
		}
		
		foreach(ColumnSchema columnSchema in TablaBase.Columns) {										
			if(columnSchema.IsForeignKeyMember) {
				tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						
				if(!conNombresClases) {
					strClassesForeignKey+="\r\n\t\t\t\tfor(Classe clas:classesP)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchema.ToString())+".class))";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+".class));";
					strClassesForeignKey+="\r\n\t\t\t\t\t}\r\n";
					strClassesForeignKey+="\t\t\t\t}\r\n";
				} else {
					strClassesForeignKey+="\r\n\r\n\t\t\t\t\t"+strElse +"if("+GetNombreClaseC(tableSchema.ToString())+ ".class.getSimpleName().equals(sClasse)) {";
					strClassesForeignKey+="\r\n\t\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+ ".class)); continue;";
					//strClassesForeignKey+="\r\n\t\t\t\t\t\tcontinue;";
					strClassesForeignKey+="\r\n\t\t\t\t\t}";	
				}
			}
		}
		
		if(conNombresClases) {
			strClassesForeignKey+="\r\n\t\t\t\t}";
		}
				
		return strClassesForeignKey;
	}
	
	public String GetAddClassesForeignKeyExcludeC(TableSchema TablaBase,bool conNombresClases) {
		String strClassesForeignKey=string.Empty;
		TableSchema	tableSchema;
		bool blnExiste=false;
		
		foreach(ColumnSchema columnSchema in TablaBase.Columns) {									
			if(columnSchema.IsForeignKeyMember) {
				if(!blnExiste) {
					blnExiste=true;
				}
						
				tableSchema=GetNombreTablaRelacionadaFromColumn(columnSchema);
						
				if(!conNombresClases) {
					strClassesForeignKey+="\r\n\t\t\t\texiste=false;\r\n";
					strClassesForeignKey+="\r\n\t\t\t\tfor(Classe clas:classesP)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC(tableSchema.ToString())+".class))";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\t\texiste=true;\r\n";
					strClassesForeignKey+="\t\t\t\t\t\tbreak;\r\n";
					strClassesForeignKey+="\t\t\t\t\t}\r\n";
					strClassesForeignKey+="\t\t\t\t}\r\n";
						
					strClassesForeignKey+="\r\n\t\t\t\tif(!existe)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+".class));";
					strClassesForeignKey+="\r\n\t\t\t\t}\r\n";
				
				} else {
					strClassesForeignKey+="\r\n\t\t\t\texiste=false;\r\n";		
					strClassesForeignKey+="\r\n\t\t\t\tfor(String sClase:arrClasses)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\tif("+GetNombreClaseC(tableSchema.ToString())+".class.getSimpleName().equals(sClase))";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\t\texiste=true;\r\n";
					strClassesForeignKey+="\t\t\t\t\t\tbreak;\r\n";
					strClassesForeignKey+="\t\t\t\t\t}\r\n";
					strClassesForeignKey+="\t\t\t\t}\r\n";
								
					strClassesForeignKey+="\r\n\t\t\t\tif(!existe)";
					strClassesForeignKey+=" {\r\n";
					strClassesForeignKey+="\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC(tableSchema.ToString())+".class));";
					strClassesForeignKey+="\r\n\t\t\t\t}\r\n";
				}
			}
		}
		
		if(blnExiste) {
			strClassesForeignKey="\r\n\t\t\t\tBoolean existe=false;\r\n"+strClassesForeignKey;			
		}
		
		return strClassesForeignKey;
	}
	
	public String GetAddClassesRelacionadasC(TableSchema TablaBase,bool conNombresClases) {
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			bool useClasesSiNo=GetUseClasesSiNoPropertyFromPropertiesC(TablaBase);
			TableSchema tablaRelacionadaObjetivo=null;
			bool esPrimero=true;
			String strElse="";
			String strMuchosAMuchosIni="";
			String strMuchosAMuchosFin="";
			
			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {
				
				if(conNombresClases) {
					strTablaClaseRelacionada+="\r\n\r\n\t\t\t\tfor(String sClasse:arrClasses) {";
				}
				
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
					strMuchosAMuchosIni="";
					strMuchosAMuchosFin="";
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
					} else {
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
						
						if(!conNombresClases) {
							strMuchosAMuchosIni="if(conMuchosAMuchos) {";
							strMuchosAMuchosFin="}";
						
						} else {
							strMuchosAMuchosIni="conMuchosAMuchos && ";
						}
					}
						
					if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
						continue;					
					}
				
					if(!conNombresClases) {
						strTablaClaseRelacionada+="\r\n\t\t\t\t";
						strTablaClaseRelacionada+=strMuchosAMuchosIni;
						strTablaClaseRelacionada+="classes.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
						strTablaClaseRelacionada+=strMuchosAMuchosFin;
						
					} else {
						if(!esPrimero) {
							strElse="";//" else ";
						}
						
						//strTablaClaseRelacionada+="\r\n\r\n\t\t\t\tfor(String sClasse:arrClasses) {";
						
						strTablaClaseRelacionada+="\r\n\r\n\t\t\t\t\t"+strElse +"if("+strMuchosAMuchosIni+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class.getSimpleName().equals(sClasse)) {";
						strTablaClaseRelacionada+="\r\n\t\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class)); continue;";
						//strTablaClaseRelacionada+="\r\n\t\t\t\t\t\tcontinue;";
						strTablaClaseRelacionada+="\r\n\t\t\t\t\t}";
						
						//strTablaClaseRelacionada+="\r\n\t\t\t\t}";
						
						if(esPrimero) {
							esPrimero=false;		
						}
					}
					/*
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
					{
					}
					else
					{
						strTablaClaseRelacionada+="\r\n\tprivate ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;";
					}
					*/
				}
				
				if(conNombresClases) {
					strTablaClaseRelacionada+="\r\n\t\t\t\t}";
				}
			}
			
			return strTablaClaseRelacionada; 
	}
	
	public String GetAddClassesRelacionadasIncludeC(TableSchema TablaBase,bool conNombresClases) 
		{
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
						
			
			bool useClasesSiNo=GetUseClasesSiNoPropertyFromPropertiesC(TablaBase);			
			TableSchema tablaRelacionadaObjetivo=null;
			String strElse="";
			String strMuchosAMuchosIni="";
			String strMuchosAMuchosFin="";

			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {														
				
				if(conNombresClases) {
					strTablaClaseRelacionada+="\r\n\r\n\t\t\t\tfor(String sClasse:arrClasses) {";	
				}
				
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
					strMuchosAMuchosIni="";
					strMuchosAMuchosFin="";

					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
					} else {
						if(!conNombresClases) {
							strMuchosAMuchosIni="\r\n\t\t\t\tif(conMuchosAMuchos) {";
							strMuchosAMuchosFin="\t\t\t\t}\r\n";
						
						} else {
							strMuchosAMuchosIni="conMuchosAMuchos && ";
						}
						
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
					}
						
					if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
						continue;					
					}
					
					//strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
					
					if(!conNombresClases) {
						strTablaClaseRelacionada+=strMuchosAMuchosIni;
						strTablaClaseRelacionada+="\r\n\t\t\t\tfor(Classe clas:classesP)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)); break;";
						strTablaClaseRelacionada+="\r\n\t\t\t\t\t}\r\n";
						strTablaClaseRelacionada+="\t\t\t\t}\r\n";
						strTablaClaseRelacionada+=strMuchosAMuchosFin;
					} else {
					
						//strTablaClaseRelacionada+="\r\n\r\n\t\t\t\tfor(String sClasse:arrClasses) {";
							
						strTablaClaseRelacionada+="\r\n\r\n\t\t\t\t\t"+strElse +"if("+strMuchosAMuchosIni+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class.getSimpleName().equals(sClasse)) {";
						strTablaClaseRelacionada+="\r\n\t\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class)); continue;";//break
						//strTablaClaseRelacionada+="\r\n\t\t\t\t\t\tcontinue;";
						strTablaClaseRelacionada+="\r\n\t\t\t\t\t}";
							
						//strTablaClaseRelacionada+="\r\n\t\t\t\t}";
					}
					
					/*
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
					{
					}
					else
					{
						strTablaClaseRelacionada+="\r\n\tprivate ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s;";
					}
					*/
				}
				
				if(conNombresClases) {
					strTablaClaseRelacionada+="\r\n\t\t\t\t}";
				}
			}					
			return strTablaClaseRelacionada; 
		}
	
	public String GetAddClassesRelacionadasExcludeC(TableSchema TablaBase,bool conNombresClases) 
		{
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			bool blnExiste=false;
			
			
			bool useClasesSiNo=GetUseClasesSiNoPropertyFromPropertiesC(TablaBase);
			TableSchema tablaRelacionadaObjetivo=null;

			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
				{
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					} else {
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
					}
						
					if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
						continue;					
					}
					
					//strTablaClaseRelacionada+="\r\n\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
					if(!blnExiste)
					{
						blnExiste=true;
					}
					
					if(!conNombresClases) {
						strTablaClaseRelacionada+="\r\n\t\t\t\texiste=false;\r\n";		
						strTablaClaseRelacionada+="\r\n\t\t\t\tfor(Classe clas:classesP)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t\texiste=true;\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t\tbreak;\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t}\r\n";
						strTablaClaseRelacionada+="\t\t\t\t}\r\n";
								
						strTablaClaseRelacionada+="\r\n\t\t\t\tif(!existe)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));";
						strTablaClaseRelacionada+="\r\n\t\t\t\t}\r\n";
					
					} else {
						
						strTablaClaseRelacionada+="\r\n\t\t\t\texiste=false;\r\n";		
						strTablaClaseRelacionada+="\r\n\t\t\t\tfor(String sClase:arrClasses)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\tif("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class.getSimpleName().equals(sClase))";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t\texiste=true;\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t\tbreak;\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\t}\r\n";
						strTablaClaseRelacionada+="\t\t\t\t}\r\n";
								
						strTablaClaseRelacionada+="\r\n\t\t\t\tif(!existe)";
						strTablaClaseRelacionada+=" {\r\n";
						strTablaClaseRelacionada+="\t\t\t\t\tclasses.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class));";
						strTablaClaseRelacionada+="\r\n\t\t\t\t}\r\n";
					}
				}
				
				if(blnExiste)
				{
					strTablaClaseRelacionada="\r\n\t\t\t\tBoolean existe=false;\r\n"+strTablaClaseRelacionada;			
				}
			}
			
			return strTablaClaseRelacionada; 
		}
	
	public String GetFuncionesGetTablasClasesRelacionadasForeigKeysDescriptionC(TableSchema TablaBase) 
		{
			String strFuncion="";
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";// void  getTR[";
			
			String strEndFuncion="";
			
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
					
			if(!blnNoStandardTableFromProperties) {										
				foreach(ColumnSchema columnSchema in TablaBase.Columns)
				{
					
					
					if(columnSchema.IsForeignKeyMember)
					{
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
						{
						continue;
						}
							
							strInitFuncion="\r\n\t\t\t";//"\r\n\t@Transient";				
							
							strInitFuncion+="";//"\r\n\tpublic ";
						
						
							//strInitFuncion+="String get"+GetPrefijoRelacionC()+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+strDescripcion+"() {\r\n";
							//strTablaClaseRelacionada="\t\treturn this."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+strDescripcion+";\r\n";
						
							strTablaClaseRelacionada=""+GetNombreClaseObjetoC(TablaBase.ToString())+"Aux.set"+GetPrefijoRelacionC()+GetNombreColumnaClaseFkDescripcionC(columnSchema);
							strTablaClaseRelacionada+="("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"Descripcion"+"("+GetNombreClaseObjetoC(TablaBase.ToString())+"Aux.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"()));";
							
							//Resp
							//strTablaClaseRelacionada+="("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"Descripcion"+"("+GetNombreClaseObjetoC(TablaBase.ToString())+"Aux.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+"()));";
							
							strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion;
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			
				foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseC(tableSchemaForeignKey.ToString()),tableSchemaForeignKey))
					{
						continue;
					}
							
					strInitFuncion="\r\n\t\t\t";//"\r\n\t@Transient";				
							
					strInitFuncion+="";//"\r\n\tpublic ";
																		
					strTablaClaseRelacionada=""+GetNombreClaseObjetoC(TablaBase.ToString())+"Aux.set"+GetPrefijoRelacionC()+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+strDescripcion;
					strTablaClaseRelacionada+="("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Descripcion"+"("+GetNombreClaseObjetoC(TablaBase.ToString())+"Aux.get"+GetPrefijoRelacionC()+GetNombreClaseC(tableSchemaForeignKey.ToString())+"()));";
							
					strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion;							
				}
			}
			
			return strFuncion; 
		}
		
	public String GetAddTiposClassesRelacionadasC(TableSchema TablaBase,String strTab,bool paraArrayLista,bool esRowsReportes) {
			String strTablaClaseRelacionada=string.Empty;
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,false);
			
			bool useClasesSiNo=GetUseClasesSiNoPropertyFromPropertiesC(TablaBase);
			TableSchema tablaRelacionadaObjetivo=null;
			bool esPrimero=true;
			String strElse="";
			String strSufijoAutoRef="";
			String strNombreAdicional="";
			String strPlural="";
			String strCondicionPlural="";
			String strForIfPluralIni="";
			String strForIfPluralFin="";
			
			if((!GetNombresClasesNoNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO) && !GetNombresClasesSiNavegacionFromTableFromPropertiesC(TablaBase).Equals(strNINGUNO)) || useClasesSiNo) {
												
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
					strSufijoAutoRef="";
					strPlural="";
					strCondicionPlural="";
					strForIfPluralIni="";
					strForIfPluralFin="";
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						strPlural="s";
					
					} else {
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
						strPlural="s";
						
						continue;
					}
					
					if(TablaBase.Name.Equals(tablaRelacionadaObjetivo.Name)) {
						strSufijoAutoRef="AutoRef";
					}
					
					if(useClasesSiNo && !GetPermiteClaseRelacionadaC(TablaBase,tablaRelacionadaObjetivo)){
						continue;					
					}
					
					
					if(paraArrayLista) {
						strTablaClaseRelacionada+="\r\n\r\n\t\treporte=new Reporte();";
						strTablaClaseRelacionada+="\r\n\t\treporte.setsCodigo("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.SCLASSWEBTITULO);";
						strTablaClaseRelacionada+="\r\n\t\treporte.setsDescripcion("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.SCLASSWEBTITULO);";		
						strTablaClaseRelacionada+="\r\n\t\tthis.tiposRelacionesSelect.add(reporte);";
					
					} else if(esRowsReportes) {
						strTablaClaseRelacionada+="\r\n\r\n\r\n"+strTab+"\t\t\t\t//"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString());
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\tif(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.SCLASSWEBTITULO))) {";								
						
						if(strPlural.Equals("s")) {
							strCondicionPlural=" && "+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strNombreAdicional+strPlural+"().size()>0";
							strForIfPluralIni="for("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+" "+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strSufijoAutoRef+" : "+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strNombreAdicional+strPlural+"()) {";
							strForIfPluralFin="}";
						} else {
							strForIfPluralIni=""+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+" "+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strSufijoAutoRef+"="+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strNombreAdicional+strPlural+"();";		
							strForIfPluralFin="";
						}
						
						strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strNombreAdicional+strPlural+"()!=null"+strCondicionPlural+") {";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\trow = sheet.createRow(iRow++);";		
						strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\t\tiCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\tcell.setCellValue("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.SCLASSWEBTITULO);";
						
						//strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$cellReport=new CellReport(); $cellReport->inicializarTextWidthHeightLine("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::$STRCLASSWEBTITULO,40,7,1); $cellReport->setblnFill(true); $cellReport->setintColSpan(3);$subheader[]=$cellReport;";
						
						strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\t\trow = sheet.createRow(iRow++);";																		
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.generarExcelReporteHeader"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"(\"RELACIONADO\",row,workbook);";
						//strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\t\t$row="+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::getHeaderReportRow('RELACIONADO',$this->arrOrderBy,$this->bitParaReporteOrderBy);";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t}";
						
						
						strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+strNombreAdicional+strPlural+"()!=null) {";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\ti2=0;";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t"+strForIfPluralIni;
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t\trow = sheet.createRow(iRow++);";
						strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\t\t\tcellStyleDataAuxHijo=null;";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t\tif(i2%2==0) {";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t\t\tcellStyleDataAuxHijo=cellStyleData;";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t\t}";
						strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\t\t\t"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones.generarExcelReporteData"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"(\"RELACIONADO\",row,workbook,"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+strSufijoAutoRef+",cellStyleDataAuxHijo);";
						//strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$row="+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::getDataReportRow('RELACIONADO',$"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+",$this->arrOrderBy,$this->bitParaReporteOrderBy);";						
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t\ti2++;";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t}";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t"+strForIfPluralFin;
						
						
						/*
						strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\tif(count($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s())>0) {";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$subheader=array();";																		
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$cellReport=new CellReport(); $cellReport->inicializarTextWidthHeightLine("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::$STRCLASSWEBTITULO,40,7,1); $cellReport->setblnFill(true); $cellReport->setintColSpan(3);$subheader[]=$cellReport;";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$data[]=$subheader;";
						
						strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\t\t$row="+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::getHeaderReportRow('RELACIONADO',$this->arrOrderBy,$this->bitParaReporteOrderBy);";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$data[]=$row;";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t}";
						
						strTablaClaseRelacionada+="\r\n\r\n"+strTab+"\t\t\t\tforeach($"+GetNombreClaseObjetoC(TablaBase.ToString())+"->get"+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"s() as $"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+") {";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$row="+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+"ConstantesFunciones::getDataReportRow('RELACIONADO',$"+GetNombreClaseObjetoC(tablaRelacionadaObjetivo.ToString())+",$this->arrOrderBy,$this->bitParaReporteOrderBy);";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t\t$data[]=$row;";
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t\t}";
						*/
						
						
						strTablaClaseRelacionada+="\r\n"+strTab+"\t\t\t}";
					
					}
			
					/*
					strTablaClaseRelacionada+="\r\n\t\t\t\t";
					strTablaClaseRelacionada+=strMuchosAMuchosIni;
					strTablaClaseRelacionada+="classes.add(new Classe("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ ".class));";
					strTablaClaseRelacionada+=strMuchosAMuchosFin;
					*/											
				}			
			}
			
			return strTablaClaseRelacionada; 
	}
	
	
	public static string GetFunctionValidationControlHtmlBusqueda(ColumnSchema column)
	{
		
	String strName="";
	String strLetNull="";
	
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strId)|| column.Name.Equals(strVersionRow))
	{
			strLetNull="\"\";";
			return string.Empty;
	}
		
	
	strName=column.Name;
	
		if(!column.IsForeignKeyMember)
		{
		
			if(GetEsNullColumnFromPropertiesC(column)/*.AllowDBNull*/)
			{
			strLetNull="\"s\"";
			}
			else
			{
			strLetNull="\"s\"";
			}
			
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				
			strName="validacion.check_text(this,"+column.Size+",\"n\",\"n\",\"s\",\"s\",\"s\","+strLetNull+")";
							
			}
			
			else if(column.DataType==DbType.Boolean)
			{
				return string.Empty;
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double)
			{
				strName="validacion.check_num(this,0,1000000,\"s\","+strLetNull+")";
				
			}
			else if(column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
			strName="validacion.check_num(this,0,1000000,\"n\","+strLetNull+")";	
			}
			else if(column.DataType==DbType.Int16||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
			strName="validacion.check_num(this,0,1000,\"n\",\"s\")";	
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				strName="validacion.check_dateDate(this,"+strLetNull+")";
			
			}
		}
		else
		{

		return string.Empty;
		}
	
	
	return strName;
}
	
	public static string GetOnBlurEventValidationControlHtmlBusqueda(ColumnSchema column,String strIndexName)
	{
	/*String strFunctionMensaje="createSimpleYahooDialogErrorValidacion('Validacion campo: "+column.Name+ "',";
	
	String strName=" onBlur=\""+strFunctionMensaje +GetFunctionValidationControlHtmlBusqueda(column)+",this)\"";
	*/
	String strName=" onBlur=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.validarFormulario"+GetNombreClaseC(column.Table.ToString())+strIndexName+"()\"";
	return strName;
	}	

	public static string GetOnBlurEventValidationControlHtml(ColumnSchema column)
	{
	/*
	String strFunctionMensaje="createSimpleYahooDialogErrorValidacion('Validacion campo: "+column.Name+ "',";
	
	String strName=" onBlur=\""+strFunctionMensaje +GetFunctionValidationControlHtml(column)+",this)\"";
	
	*/
	String strName=" onBlur=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.validar"+GetNombreClaseC(column.Table.ToString())+GetNombreColumnaClaseC(column)+"()\"";

	return strName;
	}	
	
	public static string GetFunctionValidationControlHtml(ColumnSchema column)
	{
		
	String strName="";
	String strLetNull="";
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strId)|| column.Name.Equals(strVersionRow))
	{
			return strLetNull="\"\"";
	}
		
	
	strName=column.Name;
	
		if(!column.IsForeignKeyMember)
		{
			
			if(GetJavaScriptValidacionColumnFromPropertiesC(column)!="")
			{
				strName=strValidacion+GetJavaScriptValidacionColumnFromPropertiesC(column);
				return strName;
			}
			
		
			if(GetEsNullColumnFromPropertiesC(column)/*.AllowDBNull*/)
			{
			strLetNull="\"n\"";
			}
			else
			{
			strLetNull="\"s\"";
			}
			
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				
			strName="validacion.check_text(this,"+column.Size+",\"n\",\"n\",\"s\",\"s\",\"s\","+strLetNull+")";
							
			}
			
			else if(column.DataType==DbType.Boolean)
			{
				return "\"\"";
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double)
			{
				strName="validacion.check_num(this,0,1000000,\"s\","+strLetNull+")";
				
			}
			else if(column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
			strName="validacion.check_num(this,0,1000000,\"n\","+strLetNull+")";	
			}
			else if(column.DataType==DbType.Int16||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
			strName="check_num(this,0,1000,\"n\","+strLetNull+")";	
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				strName="validacion.check_dateDate(this,"+strLetNull+")";
			
			}
		}
		else
		{

		return string.Empty;
		}
	
	
	return strName;
}
	
	public static string GetIdParameterColumnC(TableSchema tableSchema)
	{	
		String sIdColumn="";
		
		sIdColumn=GetNombreClaseObjetoC(tableSchema.ToString())+".get"+strIdGetSet+"";
		
		if(blnTieneIdentityColumn) {
			sIdColumn+="()";
		} else {
			sIdColumn+="Original()";		
		}
		
		return sIdColumn;
	}

	public String GetParameterSelectionC(ColumnSchema column,bool esUltimo,bool esUnico,bool esCompuesto,bool esNative,bool esRanges,bool esRangesFinal) 
		{
			String strParaBusquedaString=""; 
			String strParaBusquedaString0=""; 
			String strParaBusquedaCompuesto=""; 
			String strEqualsLike="Equal";
			String strDataAccessConstantesFunciones="";
			String strParentesis="";
			
			String strSufijoRangesFinal="";
			String strSufijoRangesFinalName="";
						
			//SETEO LOS PARAMETROS DEACUERDO SI ES RANGO
			
			if(esRanges) {
				if(esRangesFinal) {
					esUltimo=true;
					strEqualsLike="MenorIgual";
					strSufijoRangesFinal=strSufijoRangoFinal;
					strSufijoRangesFinalName=",\""+strSufijoRangoFinal+"\"";	
				} else {
					esUltimo=false;
					strEqualsLike="MayorIgual";
				}
			}
						
			/*
			if(GetConRangoBusquedasColumnFromPropertiesC(column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(column,indexSchema)) {
				if(!esRangesFinalFinal) {
					esRangesFinalInicial=true;
				}
			}
			*/
			
			/*
			if(esRangesFinal) {
				strSufijoRangesFinal=strSufijoRangoFinal;	
			}
			*/
			
			if(esCompuesto)
			{
				strParaBusquedaCompuesto="Constantes.SCHEMA+\".\"+"+GetNombreClaseC(column.Table.ToString())+"DataAccess.TABLENAME+\".\"+";
										  
			}
			
			if(/*column.DataType==DbType.DateTime ||*/column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				if(!esUnico)	
				{
					strEqualsLike="Like";
					strParaBusquedaString="+\"%\"";
					strParaBusquedaString0="\"%\"+";
				}
			}
			
			String strConNative="";
			
			if(esNative) {
				strConNative=strNativeSolo;//strNative;
			}
			
			String strColumnName="";
			
			if(!blnEsReporte) {
				if(column.Name!=strId) {
					strColumnName=column.Name;
				} else {
					strColumnName=strIdGetSet;
				}
			} else {
				strColumnName=column.Name.ToUpper();
			}
			
			bool blnEsPKCompuestoTabla=EsPKCompuestoTabla(column.Table);
			String  strPalabraclaveEsPKCompuestoTabla="";
			
			if(blnEsPKCompuestoTabla&&column.IsPrimaryKeyMember) {
				strPalabraclaveEsPKCompuestoTabla="Constantes.IDCOMPOSEKEY+";
			}
			
			strDataAccessConstantesFunciones="ConstantesFunciones."+column.Name.ToUpper();//"DataAccess.getColumnName";
			strParentesis="()";
			
			if(blnEsReporte) {
				strDataAccessConstantesFunciones="ConstantesFunciones.";
				strParentesis="";
			}
			
			String strParameterSelection=String.Empty;
			strParameterSelection="\r\n\r\n\t\t\tParameterSelectionGeneral parameterSelectionGeneral"+column.Name+strSufijoRangesFinal+"= new ParameterSelectionGeneral();";
			strParameterSelection+="\r\n\t\t\tparameterSelectionGeneral"+column.Name+strSufijoRangesFinal+".setParameterSelectionGeneral"+strEqualsLike+"(ParameterType."+GetTipoColumnaClaseEnumC(column)+","+strParaBusquedaString0+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoRangesFinal+ /*GetTipoColumnaToString(column)+*/strParaBusquedaString +","+strParaBusquedaCompuesto+strPalabraclaveEsPKCompuestoTabla+GetNombreClaseC(column.Table.ToString())+strDataAccessConstantesFunciones+strSufijoRangesFinalName+",";//strConNative+strColumnName+strParentesis+
			
			if(esUltimo) {
			strParameterSelection+="ParameterTypeOperator.NONE);";		
			}
			else
			{
			strParameterSelection+=	"ParameterTypeOperator.AND);";	
			}
			
			strParameterSelection+="\r\n\t\t\tqueryWhereSelectParameters.addParameter(parameterSelectionGeneral"+column.Name+strSufijoRangesFinal+");";
		
			return strParameterSelection;
		}
	
	public string GetWebMethodAnnotationFromConWebServicesC(bool ConWebServices)
{	
	String strWebMethodAnnotationFromConWebServices="";
	
	if(ConWebServices) {
		strWebMethodAnnotationFromConWebServices="@WebMethod";
	
	}
	return strWebMethodAnnotationFromConWebServices;
}

	public static string GetNameControlHtml(ColumnSchema column)
	{
	
	
	String strName="";
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
	{
			return string.Empty;
	}
		
	if(column.Name.Equals(strId))
	{
		strName="hdnIdActual";
		
	}
	else if(column.Name.Equals(strVersionRow))
	{
		strName="hdn"+column.Name;
		
	}
	else
	{
		if(!column.IsForeignKeyMember)
		{
		
		
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				
				strName="txt"+column.Name;
							
			}
			
			else if(column.DataType==DbType.Boolean)
			{
				strName="chb"+column.Name;
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
				strName="txt"+column.Name;
				
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				strName="cal"+GetNombreClaseC(column.Table.ToString())+column.Name;
			
			}
		}
		else
		{

		strName="cmb"+GetNombreClaseC(column.Table.ToString())+column.Name;
		}
	}
	
	return strName;
}

public static string GetNameControlHtmlFkC(TableSchema tableSchemaPk,TableSchema tableSchemaFk) {		
	String strName="";
	
	strName="cmb"+GetNombreClaseC(tableSchemaPk.ToString())+GetNombreClaseC(tableSchemaFk.ToString());
	
	return strName;
}

	public static string GetNameControlHtmlBusqueda(ColumnSchema column,String strIndexName)
	{
	
	String strName="";
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
	{
			return string.Empty;
	}
		
	if(column.Name.Equals(strId))
	{
		strName="hdnIdActual"+ strIndexName;
		
	}
	else if(column.Name.Equals(strVersionRow))
	{
		strName="hdn"+column.Name+ strIndexName;
		
	}
	else
	{
		if(!column.IsForeignKeyMember)
		{
		
		
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				
			strName="txt"+column.Name+strIndexName;
							
			}
			
			else if(column.DataType==DbType.Boolean)
			{
				strName="chb"+column.Name+strIndexName;
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
				strName="txt"+column.Name+strIndexName;
				
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				strName="cal"+GetNombreClaseC(column.Table.ToString())+column.Name+strIndexName;
			
			}
		}
		else
		{
			strName="cmb"+GetNombreClaseC(column.Table.ToString())+column.Name+strIndexName;
			//Trace.WriteLine(strName);
		}
	}
	
	return strName;
}

	public string GetControlHtmlBusqueda(ColumnSchema column,String strIndexName,bool ConFaces,bool ConRichFaces,bool ConRangeFinal) {
	
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=" "+GetPrefijoTipoC(column);	
	String strColumna=GetNombreColumnaClaseC(column);
	
	String strControl="";
	String strType="";
	String strName="";
	
	String strObjectFace="";
	String strValueFace="";
	
	String strSufijoConRangeFinal="";
	
	if(ConRangeFinal) {
		strSufijoConRangeFinal=strSufijoRangoFinal;
	}
	
	if(ConFaces||ConRichFaces) {
		strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
	}
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
		return string.Empty;
	}
		
	if(column.Name.Equals(strId)) {
		strType="\"hidden\"";
		strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+"\"";
		
		if(!ConFaces&&!ConRichFaces) {
			strControl="<input type="+strType+strName+">";
		} else {
			if(ConFaces||ConRichFaces) {
				strControl="<h:inputHidden "+strName.Replace("name=","id=")+" />";
			}
		}
	}
	
	if(column.Name.Equals(strVersionRow)) {
		strType="\"hidden\"";
		strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+"\"";
				
		if(!ConFaces&&!ConRichFaces) {
			strControl="<input type="+strType+strName+">";
		} else {
			if(ConFaces||ConRichFaces) {
				strControl="<h:inputHidden "+strName.Replace("name=","id=")+" />";
			}
		}
	} else {
		if(!column.IsForeignKeyMember) {				
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {
			String strMaxLength="";
			String strRows="";
			int numRows=0;
			int numCols=0;
			
			strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+strSufijoConRangeFinal+"\"";
			
				if(column.Size<30) {
					strType="\"text\"";
					strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
										
					if(!ConFaces&&!ConRichFaces) {
						strControl="<input type="+strType+strMaxLength+strName+GetOnBlurEventValidationControlHtmlBusqueda(column,strIndexName)+">";		
					} else {
						if(ConFaces||ConRichFaces) {
							strValueFace=" value=\"#{"+strObjectFace+"."+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoConRangeFinal+strIndexName+"}\" ";
							
							strControl="\r\n\t\t\t\t\t\t\t<h:inputText "+strName.Replace("name=","id=")+strValueFace+strMaxLength+" >";
							strControl+="\r\n\t\t\t\t\t\t\t</h:inputText>";
						}
					}
				} else if(column.Size<200) {
					numRows=column.Size/15;
					numCols=30;
					
					strType="<textarea";
					strRows=" rows=\""+numRows.ToString()+"\"";
					strMaxLength=" cols=\""+numCols.ToString()+"\"";
										
					if(!ConFaces&&!ConRichFaces) {
						strControl=strType+strName+strMaxLength+strRows+GetOnBlurEventValidationControlHtmlBusqueda(column,strIndexName)+"></textarea>";
					} else {
						if(ConFaces||ConRichFaces) {
							strValueFace=" value=\"#{"+strObjectFace+"."+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoConRangeFinal+strIndexName+"}\" ";
							
							strControl="\r\n\t\t\t\t\t\t\t<h:inputTextarea "+strName.Replace("name=","id=")+strValueFace+strRows+strMaxLength+" >";
							strControl+="\r\n\t\t\t\t\t\t\t</h:inputTextarea>";
						}
					}
				} else {
					numRows=GetWebNumeroFilasColumnFromPropertiesC(column);
					numCols=GetWebNumeroColumnasColumnFromPropertiesC(column);
					
					strType="<textarea";
					strRows=" rows=\""+numRows.ToString()+"\"";
					strMaxLength=" cols=\""+numCols.ToString()+"\"";
										
					if(!ConFaces&&!ConRichFaces) {
						strControl=strType+strName+strMaxLength+strRows+GetOnBlurEventValidationControlHtmlBusqueda(column,strIndexName)+"></textarea>";
					} else {
						if(ConFaces||ConRichFaces) {
							strValueFace=" value=\"#{"+strObjectFace+"."+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoConRangeFinal+strIndexName+"}\" ";
							
							strControl="\r\n\t\t\t\t\t\t\t<h:inputTextarea "+strName.Replace("name=","id=")+strValueFace+strRows+strMaxLength+">";
							strControl+="\r\n\t\t\t\t\t\t\t</h:inputTextarea>";
						}
					}
				}
			} else if(column.DataType==DbType.Boolean) {
				strType="\"checkbox\"";
				strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+"\"";
								
				if(!ConFaces&&!ConRichFaces) {
					strControl="<input type="+strType+strName+">";
					
				} else {
					if(ConFaces||ConRichFaces) {
						strValueFace=" value=\"#{"+strObjectFace+"."+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strIndexName+"}\" ";
							
						strControl="\r\n\t\t\t\t\t\t\t<h:selectBooleanCheckbox "+strName.Replace("name=","id=")+strValueFace+">";
						strControl+="\r\n\t\t\t\t\t\t\t</h:selectBooleanCheckbox>";
					}
				}	
				
			} else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
				strType="\"text\"";
				strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+strSufijoConRangeFinal+"\"";
				String strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
								
				if(!ConFaces&&!ConRichFaces) {
					strControl="<input type="+strType+strMaxLength+strName+GetOnBlurEventValidationControlHtmlBusqueda(column,strIndexName)+">";
				} else {
					if(ConFaces||ConRichFaces) {
						strValueFace=" value=\"#{"+strObjectFace+"."+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoConRangeFinal+strIndexName+"}\" ";
						
						strControl="\r\n\t\t\t\t\t\t\t<h:inputText "+strName.Replace("name=","id=")+strValueFace+strMaxLength+">";
						strControl+="\r\n\t\t\t\t\t\t\t</h:inputText>";
					}
				}	
			} else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime) {	
				String strDatePattern="";
				String strFinalCalendar="";
				
				strName=" name=\""+GetNameControlHtmlBusqueda(column,strIndexName)+strSufijoConRangeFinal+"\"";
				
				if(!ConFaces&&!ConRichFaces) {
					strType="\"dojo.dijit.calendar\"";
					strName=" id=\""+GetNameControlHtmlBusqueda(column,strIndexName)+"\"";
					strControl="<a:widget  name="+strType+strName+"/>";
				} else {
					if(ConRichFaces) {
						if(EsDateColumn(column)) {
							//strDatePattern="ConstantesJsp.SDATEDATEPATTERN";
							strDatePattern="yyyy-MM-dd";
							
						} else if(EsDateTimeColumn(column)) {
							//strDatePattern="ConstantesJsp.SDATETIMEDATEPATTERN";
							strDatePattern="yyyy-MM-dd HH:mm:00.0";
							
						} else if(EsTimeColumn(column)) {
							//strDatePattern="ConstantesJsp.STIMEDATEPATTERN";
							strDatePattern="yyyy-MM-dd HH:mm:00";
						}
						
						strDatePattern=" datePattern=\""+strDatePattern+"\"";
						
						if(EsDateColumn(column)) {
							strFinalCalendar=">\r\n\t\t\t\t\t\t\t</rich:calendar>";
							//strFinalCalendar=" />";							
							
						} else if(EsDateTimeColumn(column)) {
							strFinalCalendar=" showApplyButton=\"true\">";
							strFinalCalendar+="\r\n\t\t\t\t\t\t\t\t<f:converter  converterId=\"TimestampConverter\">";
							strFinalCalendar+="\r\n\t\t\t\t\t\t\t</rich:calendar>";
							
						} else if(EsTimeColumn(column)) {
							strFinalCalendar=" showApplyButton=\"true\">";
							strFinalCalendar+="\r\n\t\t\t\t\t\t\t\t<f:converter  converterId=\"TimeConverter\">";
							strFinalCalendar+="\r\n\t\t\t\t\t\t\t</rich:calendar>";
						}		
						
						strValueFace=" value=\"#{"+strObjectFace+"."+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijoConRangeFinal+strIndexName+"}\" ";
							
						strControl="\r\n\t\t\t\t\t\t\t<rich:calendar "+strName.Replace("name=","id=")+strValueFace+strDatePattern+strFinalCalendar;
					}
				}	
			}
		} else {
			String strNameOnly=GetNameControlHtmlBusqueda(column,strIndexName);
			
			strName=" id=\""+strNameOnly+"\"";
						
			if(!ConFaces&&!ConRichFaces) {
				strControl="<a:widget"+strName+"name=\"dojo.dijit.combobox\" value=\"[{label : 'Alabama', value : 'AL'}]\""+"/>";
			
			} else {
				if(ConFaces) {
					strControl="\r\n\t\t\t\t\t\t\t<h:selectOneMenu "+strName.Replace("name=","id=")+" value=\"#{"+strObjectFace+"."+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strIndexName+"}\">\r\n";				
					strControl+="\r\n\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+"."+GetNombreClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"ListSelectItem}\"/>\r\n";
					strControl+="\r\n\t\t\t\t\t\t\t</h:selectOneMenu>\r\n";
					
				} else {
					//NO PANEL EN COMBO
					//rich:comboBox
					//strControl="\t\t\t\t\t\t<rich:panel id=\"richPanel"+   strNameOnly+"\">\r\n";														
					strControl+="\r\n\t\t\t\t\t\t\t<h:selectOneMenu "+strName.Replace("name=","id=")+" value=\"#{"+strObjectFace+"."+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strIndexName+"}\">\r\n";				
					strControl+="\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+"."+GetNombreClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"ListSelectItem}\"/>\r\n";
					strControl+="\t\t\t\t\t\t\t</h:selectOneMenu>";
					//strControl+="</rich:panel>";
					//rich:comboBox 
				}							
			}	
		}
	}
	
	return strControl;
}

public string GetControlSwingC(ColumnSchema column,bool blnConFk,bool esTablaParametros)
	{
	
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=" "+GetPrefijoTipoC(column);	
	String strColumna=GetNombreColumnaClaseC(column);
	
	String strControl="";
	String strControlPanel="";
	String strControlName="";
	String strType="";
		strType+="";
	String strName="";
	
	String strObjectFace="";
	String strValueFace="";
	String strPrefijoCampo="";
	
	String strIndexName="";
	String strFinalName="";
	
	strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
	strPrefijoCampo=GetPrefijoTablaC().ToLower();
	
	string strFieldColumnaclase=GetPrefijoTablaC().ToLower()+GetPrefijoTipoC(column)+strColumna;
	
	bool esProcesoParamAux=GetEsProcesoParamFromPropertiesC(column.Table);
	
	strControlPanel+="\r\n\t\tthis."+GetNombrePanelControlVariablesSwingC(column,"","",blnConFk)+"=new JPanelMe(\"fondo_formulario\",true);//new JPanel();\r\n";	
	
	if(!esTablaParametros) {
		strControlPanel+="\r\n\t\tthis."+GetNombrePanelControlVariablesSwingC(column,"","",blnConFk)+".setToolTipText("+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+");\r\n";
	}
	
	strControlPanel+="\t\tthis.gridaBagLayout"+GetNombreClaseC(column.Table.ToString())+" = new GridBagLayout();\r\n";		
	strControlPanel+="\t\tthis."+GetNombrePanelControlVariablesSwingC(column,"","",blnConFk)+".setLayout(this.gridaBagLayout"+GetNombreClaseC(column.Table.ToString())+");\r\n\r\n";	
			
	String strSwingWidthControlExtra ="";//GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
	String strSwingHeighControlExtra ="";//GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
			return string.Empty;
			
	} else if(column.Name.Equals(strVersionRow)) {
			
		strValueFace=" value=\"#{"+strObjectFace+"."+strVersionRow+"}\" ";	
		
		strControl="\r\n\t\tjLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+"= new JLabelMe();\r\n\r\n";
		
		strControl+="\t\tjLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n";
        strControl+="\t\tjLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n";
        strControl+="\t\tjLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n\r\n";

		if(!esProcesoParamAux) {
			if(!CON_OPTIMIZE_V0){
				strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";		
				strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strVersionRow+"}\"), jLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
				strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
				strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
				strControl+="\t\t}\r\n";
			}
		}
		
		//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
		//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";														

	} else if(column.Name.Equals(strId) && !blnConFk) {
		
		strControl="\r\n\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+"= new JLabelMe();\r\n\r\n";
		
		strControl+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n";
        strControl+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n";
        strControl+="\t\tjLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+","+SWING_HEIGHT_CONTROL+"));\r\n\r\n";
		
		if(!esProcesoParamAux) {
			if(!CON_OPTIMIZE_V0){
				strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";		
				strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strId+"}\"), jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
				strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
				strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
				strControl+="\t\t}\r\n";
			}
		}
		
		//CUANDO SE SELECCIONA AUTOMATICAMENTE SE HABILITA Y CUANDO NO SE SELECCIONA SE DESHABILITA
		//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jLabel"+strIdGetSet+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
		//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
				
	} else if(!column.IsForeignKeyMember) {		
		
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
			String strMaxLength="";
			String strRows="";
			int numRows=0;
			int numCols=0;
			
			strName=" name=\""+GetNameControlHtml(column)+"\"";
			
				if(column.Size<51)
				{
					strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
					strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

					strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
					
					strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";						
					
					strControl="\r\n\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JTextFieldMe();\r\n\r\n";
					strControlName="jTextField"+strColumna+GetNombreClaseC(column.Table.ToString());
					
					if(!esProcesoParamAux) {
						strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";
					}
					
					strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
        			strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
        			strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
					
					strControl+="\r\n\t\tFuncionesSwing.setBoldTextField(jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+",STIPO_TAMANIO_GENERAL,false,false,this);\r\n\r\n";
					
					if(!esProcesoParamAux) {
						if(!CON_OPTIMIZE_V0){
							strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";
							strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
							strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
							strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
							strControl+="\t\t}\r\n";
						}
					}
					
					//CUANDO SE SELECCIONA AUTOMATICAMENTE SE HABILITA Y CUANDO NO SE SELECCIONA SE DESHABILITA
					//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
					//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
					
					if(GetReadOnlyColumnFromPropertiesC(column) 
					|| GetNoEditColumnFromPropertiesC(column)){					
						strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
					}

				}
				else if(column.Size<200)
				{
					//SE AGRANDA CON SCROLL
					//String strSwingWidthControlExtra ="";//GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);
					strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
					strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
	
					numRows=column.Size/40;
					numCols=30;
					
					int intTasaPerdidaPorWrap=2;
					
					numRows=numRows+intTasaPerdidaPorWrap;
					
					strRows=" rows=\""+numRows.ToString()+"\"";
					strMaxLength=" cols=\""+numCols.ToString()+"\"";
					
					strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";						
					
					strControl="\r\n\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JTextAreaMe();\r\n";
					strControlName="jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString());
					
					if(!esProcesoParamAux) {
						strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";
					}
					
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
        			strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
        			strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setLineWrap(true);\r\n";
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setWrapStyleWord(true);\r\n";	
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n";						
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setRows("+numRows+");\r\n";
					
					strControl+="\r\n\t\tFuncionesSwing.setBoldTextArea(jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+",STIPO_TAMANIO_GENERAL,false,false,this);\r\n\r\n";
					
					String strHeighArea="70";
					
					if(blnUsaLabelFormLower) {
						strHeighArea="35";
					}
					
					strControl+="\t\tjscrollPane"+strColumna+GetNombreClaseC(column.Table.ToString())+" = new JScrollPane"+strSwtMe+"(jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+");\r\n";
					strControl+="\t\tjscrollPane"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+strHeighArea+"));\r\n";
					strControl+="\t\tjscrollPane"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+strHeighArea+"));\r\n";
					strControl+="\t\tjscrollPane"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+strHeighArea+"));\r\n\r\n";
					
					if(!esProcesoParamAux) {
						if(!CON_OPTIMIZE_V0){
							strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";
							strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
							strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
							strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
							strControl+="\t\t}\r\n";
						}
					}
					
					
					//CUANDO SE SELECCIONA AUTOMATICAMENTE SE HABILITA Y CUANDO NO SE SELECCIONA SE DESHABILITA
					//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
					//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
					
					if(GetReadOnlyColumnFromPropertiesC(column) 
					|| GetNoEditColumnFromPropertiesC(column)){					
						strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
					}
				}
				else
				{
					strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
					strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
	
					//SE AGRANDA CON SCROLL
					//String strSwingWidthControlExtra ="";//GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);
					
					numRows=GetWebNumeroFilasColumnFromPropertiesC(column);
					numCols=GetWebNumeroColumnasColumnFromPropertiesC(column);
					
					int intTasaPerdidaPorWrap=4;
					
					numRows=numRows+intTasaPerdidaPorWrap;
					
					
					strRows=" rows=\""+numRows.ToString()+"\"";
					strMaxLength=" cols=\""+numCols.ToString()+"\"";
					
					strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";						
					
					strControl="\r\n\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JTextAreaMe();\r\n";
					strControlName="jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString());
					
					if(!esProcesoParamAux) {
						strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";
					}
					
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";//strSwingHeighControlExtra+
        			strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";//strSwingHeighControlExtra+
        			strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";//strSwingHeighControlExtra+
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setLineWrap(true);\r\n";
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setWrapStyleWord(true);\r\n";	
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n";						
					strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setRows("+numRows+");\r\n";
					
					strControl+="\r\n\t\tFuncionesSwing.setBoldTextArea(jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+",STIPO_TAMANIO_GENERAL,false,false,this);\r\n\r\n";
					
					String strHeighArea="70";
					
					if(blnUsaLabelFormLower) {
						strHeighArea="35";
					}
					
					String strSwingHeighControlScrollExtra =GetAltoColumnSwingExtraC(strHeighArea,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
	
					strControl+="\t\tjscrollPane"+strColumna+GetNombreClaseC(column.Table.ToString())+" = new JScrollPane"+strSwtMe+"(jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+");\r\n";
					strControl+="\t\tjscrollPane"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+strHeighArea+strSwingHeighControlScrollExtra+"));\r\n";
					strControl+="\t\tjscrollPane"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+strHeighArea+strSwingHeighControlScrollExtra+"));\r\n";
					strControl+="\t\tjscrollPane"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+strHeighArea+strSwingHeighControlScrollExtra+"));\r\n\r\n";
				
					if(!esProcesoParamAux) {
						if(!CON_OPTIMIZE_V0){
							strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";
							strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
							strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
							strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
							strControl+="\t\t}\r\n";
						}
					}
					
					//CUANDO SE SELECCIONA AUTOMATICAMENTE SE HABILITA Y CUANDO NO SE SELECCIONA SE DESHABILITA
					//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
					//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
					
					if(GetReadOnlyColumnFromPropertiesC(column) 
					|| GetNoEditColumnFromPropertiesC(column)){					
						strControl+="\t\tjTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
					}
				
				}
			}			
			else if(column.DataType==DbType.Boolean)
			{
				
				strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";						
				
				
				strControl="\r\n\t\tjCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JCheckBoxMe();\r\n";
				strControlName="jCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString());
				
				if(!esProcesoParamAux) {
					strControl+="\t\tjCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n\r\n";
				}
				
				strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
				strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
				
				//Trace.WriteLine(strSwingWidthControlExtra);
	
				strControl+="\t\tjCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
				strControl+="\t\tjCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
				strControl+="\t\tjCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";				
				
				strControl+="\r\n\t\tFuncionesSwing.setBoldCheckBox(jCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+",STIPO_TAMANIO_GENERAL,false,false,this);\r\n\r\n";
				
				if(!esProcesoParamAux) {
					if(!CON_OPTIMIZE_V0){
						strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";
						strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"selected\"));\r\n";	
						//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
						strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
						strControl+="\t\t}\r\n";
					}
				}
				
				//CUANDO SE SELECCIONA AUTOMATICAMENTE SE HABILITA Y CUANDO NO SE SELECCIONA SE DESHABILITA
				//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
				//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
	
				if(GetReadOnlyColumnFromPropertiesC(column) 
				|| GetNoEditColumnFromPropertiesC(column)){					
					strControl+="\t\tjCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
				}
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
				String strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
				
				strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";
				
				strControl="\r\n\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JTextFieldMe();\r\n";
				strControlName="jTextField"+strColumna+GetNombreClaseC(column.Table.ToString());
				
				if(!esProcesoParamAux) {
					strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";
				}
				
				strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL_VALOR,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
				strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";

				
				strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL_VALOR+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
        		strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL_VALOR+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
        		strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL_VALOR+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
				
				strControl+="\r\n\t\tFuncionesSwing.setBoldTextField(jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+",STIPO_TAMANIO_GENERAL,false,false,this);\r\n\r\n";
				
				/*
				strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",65),"+SWING_HEIGHT_CONTROL+"));\r\n";
        		strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",65),"+SWING_HEIGHT_CONTROL+"));\r\n";
        		strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",65),"+SWING_HEIGHT_CONTROL+"));\r\n";
				*/
				
				if(column.DataType==DbType.Decimal||column.DataType==DbType.Double) {
					strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setText(\"0.0\");\r\n\r\n";
				} else {
					strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setText(\"0\");\r\n\r\n";	
				}
				
				if(!esProcesoParamAux) {
					if(!CON_OPTIMIZE_V0){
						strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";
						strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
						strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
						strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
						strControl+="\t\t}\r\n";
					}
				}
				
				//CUANDO SE SELECCIONA AUTOMATICAMENTE SE HABILITA Y CUANDO NO SE SELECCIONA SE DESHABILITA
				//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
				//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
				
				if(GetReadOnlyColumnFromPropertiesC(column) 
				|| GetNoEditColumnFromPropertiesC(column)){					
					strControl+="\t\tjTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
				}
			}
			else if(EsDateColumn(column) || EsDateTimeColumn(column) || EsTimeColumn(column))
			{
				
				if(!EsTimeColumn(column)) {
					if(!EsDateTimeColumn(column)) {
						strControl="\r\n\t\t//jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JFormattedTextFieldMe();\r\n";								
						strControl+="\r\n\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JDateChooser();\r\n";
						strControlName="jDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString());
						
						if(!esProcesoParamAux) {
							strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";
						} else {
							
							if(ConFechaSistemaDatabaseFromPropertiesC(column.Table.Database)) {
								if(!GetEsReporteParametroFromPropertiesC(column)) {
									//AQUI NO SE CAMBIA, SINO EN this.asientocontableBean.activarfecha_emisionAsientoContable
									//strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";
								}
							}
						}
						
						strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL_FECHA,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
						strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL_FECHA,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
	
						strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
						strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
						strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
						strControl+="\r\n\t\tFuncionesSwing.setBoldDate(jDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+",STIPO_TAMANIO_GENERAL,false,false,this);\r\n";
						
						strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setDate(new Date());\r\n";
						strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setDateFormatString(\"yyyy-MM-dd\");;\r\n";
						strControl+="\t\t//jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setText(Funciones.getStringMySqlCurrentDate());\r\n\r\n";
						
						if(!esProcesoParamAux) {
							if(!CON_OPTIMIZE_V0){
								strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";
								strControl+="\t\t\t//binding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
								strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"date\"));\r\n";	
								strControl+="\t\t\t//binding"+GetNombreClaseC(column.Table.ToString())+".setConverter(new DateConverterFromDate<Date,String>());\r\n";//new DateConverter<String,Date>());\r\n";	new DateConverterFromDate<Date,String>());
								strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
								strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
								strControl+="\t\t}\r\n";
							}
						}
						
						//CUANDO SE SELECCIONA AUTOMATICAMENTE SE HABILITA Y CUANDO NO SE SELECCIONA SE DESHABILITA
						//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
						//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
						
						if(GetReadOnlyColumnFromPropertiesC(column) 
						|| GetNoEditColumnFromPropertiesC(column)){
							strControl+="\t\t//jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
							strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
						}
						
						
					} else {
						strControl="\r\n\t\t//jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JFormattedTextFieldMe();\r\n";								
						strControl+="\r\n\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JPanelDateTimeMe(FuncionesSwing.getFondoImagen(parametroGeneralUsuario.getid_tipo_fondo()),true);\r\n";
						strControlName="jDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString());
						
						if(!esProcesoParamAux) {
							strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";
						}
						
						strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+"*2,85),"+SWING_HEIGHT_CONTROL+"+ Constantes.ISWING_ALTO_FILA_TABLA_EXTRA_FECHA));\r\n";
						strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+"*2,85),"+SWING_HEIGHT_CONTROL+"+ Constantes.ISWING_ALTO_FILA_TABLA_EXTRA_FECHA));\r\n";
						strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+"*2,85),"+SWING_HEIGHT_CONTROL+"+ Constantes.ISWING_ALTO_FILA_TABLA_EXTRA_FECHA));\r\n";
						strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setDate(new Timestamp((new Date()).getTime()));\r\n";//new Date()
						strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setDateFormatString(\"yyyy-MM-dd\");;\r\n";
						strControl+="\t\t//jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setText(Funciones.getStringMySqlCurrentDate());\r\n\r\n";
						
						if(!esProcesoParamAux) {
							if(!CON_OPTIMIZE_V0){
								strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";
								strControl+="\t\t\t//binding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
								strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"date\"));\r\n";	
								strControl+="\t\t\t//binding"+GetNombreClaseC(column.Table.ToString())+".setConverter(new DateConverterFromDate<Date,String>());\r\n";//new DateConverter<String,Date>());\r\n";	new DateConverterFromDate<Date,String>());
								strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
								strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
								strControl+="\t\t}\r\n";
							}
						}
						
						//CUANDO SE SELECCIONA AUTOMATICAMENTE SE HABILITA Y CUANDO NO SE SELECCIONA SE DESHABILITA
						//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
						//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
						
						if(GetReadOnlyColumnFromPropertiesC(column) 
						|| GetNoEditColumnFromPropertiesC(column)){
							strControl+="\t\t//jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
							strControl+="\t\tjDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
						}
					}
				} else {
					strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL_FECHA,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
					strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL_FECHA,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
	
					strControl="\r\n\t\t//jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JFormattedTextFieldMe();\r\n";								
					strControl+="\r\n\t\tjSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JSpinner(new SpinnerDateModel());;\r\n";
					strControlName="jSpinner"+strColumna+GetNombreClaseC(column.Table.ToString());
					
					if(!esProcesoParamAux) {
						strControl+="\t\tjSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";
					}
					
					strControl+="\t\tJSpinner.DateEditor timeEditor"+strColumna+GetNombreClaseC(column.Table.ToString())+" = new JSpinner.DateEditor(jSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+", \"HH:mm:ss\");\r\n\r\n";
					strControl+="\t\tjSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEditor(timeEditor"+strColumna+GetNombreClaseC(column.Table.ToString())+");\r\n\r\n";
					strControl+="\t\tjSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+".setValue(new Date());\r\n\r\n";
					
					strControl+="\t\tjSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
					strControl+="\t\tjSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
					strControl+="\t\tjSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL_FECHA+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL_FECHA+strSwingHeighControlExtra+"));\r\n";
					strControl+="\r\n\t\tFuncionesSwing.setBoldHora(jSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+",STIPO_TAMANIO_GENERAL,false,false,this);\r\n";
					
					strControl+="\t\tjSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+".setValue(new Date());\r\n";
					strControl+="\t\t//jSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+".setDateFormatString(\"yyyy-MM-dd\");;\r\n";
					strControl+="\t\t//jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setText(Funciones.getStringMySqlCurrentDate());\r\n\r\n";
					
					if(!esProcesoParamAux) {
						if(!CON_OPTIMIZE_V0){
							strControl+="\t\tif(!"+GetNombreClaseC(column.Table.ToString())+strPrefijoSwingInternalFrame+".ISBINDING_MANUAL_TABLA) {\r\n";
							strControl+="\t\t\t//binding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\r\n";	
							strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement."+strFieldColumnaclase+"}\"), jSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"date\"));\r\n";	
							strControl+="\t\t\t//binding"+GetNombreClaseC(column.Table.ToString())+".setConverter(new DateConverterFromDate<Date,String>());\r\n";//new DateConverter<String,Date>());\r\n";	new DateConverterFromDate<Date,String>());
							strControl+="\t\t\tbinding"+GetNombreClaseC(column.Table.ToString())+".setSourceUnreadableValue(null);\r\n";	
							strControl+="\t\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";	
							strControl+="\t\t}\r\n";
						}
					}
					
					//CUANDO SE SELECCIONA AUTOMATICAMENTE SE HABILITA Y CUANDO NO SE SELECCIONA SE DESHABILITA
					//strControl+="\t\tbinding"+GetNombreClaseC(column.Table.ToString())+" = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jTableDatos"+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.ELProperty.create(\"${selectedElement != null}\"), jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+", org.jdesktop.beansbinding.BeanProperty.create(\"enabled\"));\r\n";	
					//strControl+="\t\tbindingGroup"+GetNombreClaseC(column.Table.ToString())+".addBinding(binding"+GetNombreClaseC(column.Table.ToString())+");\r\n";											
					
					if(GetReadOnlyColumnFromPropertiesC(column) 
					|| GetNoEditColumnFromPropertiesC(column)){
						strControl+="\t\t//jFormattedTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
						strControl+="\t\tjSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
					}		
				}
			}
			
			if(blnConFuncionalidadAccionesCampoVersion1) {
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda= new JButtonMe();\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL_BOTONICONO+","+SWING_HEIGHT_CONTROL_BOTONICONO+"));\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL_BOTONICONO+","+SWING_HEIGHT_CONTROL_BOTONICONO+"));\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL_BOTONICONO+","+SWING_HEIGHT_CONTROL_BOTONICONO+"));\r\n";	
				strControl+="\t\t//this.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setText(\"U\");\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setToolTipText(\"BUSCAR DATOS (\"+FuncionesSwing.getKeyNameControl(\"CONTROL_BUSCAR\")+\")\");\r\n";
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setFocusable(false);\r\n";
				strControl+="\t\tFuncionesSwing.addImagenButtonGeneral(this.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda,\"buscardatos\",\"BUSCAR DATOS\");\r\n\r\n";
			}			
			
			if(!EsBinaryColumn(column)) {
				strControl+="\t\tsKeyStrokeName = FuncionesSwing.getKeyNameControl(\"CONTROL_BUSCAR\");\r\n";     
				strControl+="\t\tkeyStrokeControl=FuncionesSwing.getKeyStrokeControl( \"CONTROL_BUSCAR\");\r\n";
				strControl+="\t\t"+strControlName+".getInputMap().put(keyStrokeControl, sKeyStrokeName);\r\n";
				strControl+="\t\t"+strControlName+".getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Busqueda\"));\r\n\r\n";
        	}
			
			if(!esTablaParametros) {
				strControl+="\t\tif(this."+GetNombreClaseObjetoC(column.Table.ToString())+"SessionBean.getEsGuardarRelacionado() || paginaTipo.equals(PaginaTipo.SECUNDARIO)) {\r\n";
					if(blnConFuncionalidadAccionesCampoVersion1) {
						strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setVisible(false);";	
					}
				strControl+="\t\t}\r\n";
			}
		}
		else
		{
			//ESTO NUNCA DEBERIA EJECUTARSE
			strName=" id=\""+GetNameControlHtml(column)+"\"";
		
			
			//strControl="<h:selectOneMenu "+strName.Replace("name=","id=")+" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" >\r\n";
			//strControl+="\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFace+"."+GetNombreClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"ListSelectItem}\"/>\r\n";		
			//strControl+="\t\t\t\t\t\t\t</h:selectOneMenu>";
			
			strSwingWidthControlExtra =GetAnchoColumnSwingExtraC(SWING_WIDTH_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
			strSwingHeighControlExtra =GetAltoColumnSwingExtraC(SWING_HEIGHT_CONTROL,column);//" + FuncionesSwing.getValorProporcion("+SWING_WIDTH_CONTROL+",0)";
				
			strControl="\r\n\t\tjComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JComboBoxMe();\r\n";
			strControlName="jComboBox"+strColumna+GetNombreClaseC(column.Table.ToString());
			strControl+="\t\tjComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
			strControl+="\t\tjComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
			strControl+="\t\tjComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";	
			
			strControl+="\r\n\t\tFuncionesSwing.setBoldComboBox(jComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+",STIPO_TAMANIO_GENERAL,false,false,this);\r\n";
			
			if(!TieneColumnaComboTablaNormalC(column) && blnConSwingCombosDinamicosTabla) {					
				strControl+="\r\n\t\tjComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+"ParaTabla= new JComboBoxMe();\r\n";
				strControl+="\t\tjComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+"ParaTabla.setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
				strControl+="\t\tjComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+"ParaTabla.setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";
				strControl+="\t\tjComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+"ParaTabla.setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL+strSwingWidthControlExtra+","+SWING_HEIGHT_CONTROL+strSwingHeighControlExtra+"));\r\n";	
							
				strControl+="\r\n\t\tFuncionesSwing.setBoldComboBox(jComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+"ParaTabla,STIPO_TAMANIO_GENERAL,false,false,this);\r\n";
				
			}
				
			if( (EsColumnaVariableGlobalDataBaseFromPropertiesC(column) 
				|| EsColumnaVariableModuloGlobalC(column)
				|| GetNoInsertEditColumnFromPropertiesC(column)
				|| GetReadOnlyColumnFromPropertiesC(column) 
				|| GetNoEditColumnFromPropertiesC(column)
				)
				&& !EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(column)
				
			){
					
				strControl+="\t\tjComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n";		
			}
			
			strControl+="\r\n";
			
			//strControl+="\t\tjComboBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".setEnabled(false);\r\n\r\n";		
			
			/*
			strControl+="\t\tjPanel"+strColumna+GetNombreClaseC(column.Table.ToString())+"=new JPanel();\r\n\r\n";	
			strControl+="\t\tGridBagLayout gridaBagLayout"+strColumna+GetNombreClaseC(column.Table.ToString())+" = new GridBagLayout();\r\n";		
			strControl+="\t\tjPanel"+strColumna+GetNombreClaseC(column.Table.ToString())+".setLayout(gridaBagLayout"+strColumna+GetNombreClaseC(column.Table.ToString())+");\r\n\r\n";	
			*/
			
			if(blnConFuncionalidadAccionesCampoVersion1) {
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"= new JButtonMe();\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMinimumSize(new Dimension(50,"+SWING_HEIGHT_CONTROL+"));\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+".setMaximumSize(new Dimension(50,"+SWING_HEIGHT_CONTROL+"));\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+".setPreferredSize(new Dimension(50,"+SWING_HEIGHT_CONTROL+"));\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+".setText(\""+GetRecargarInformacionBuscarC(false,column.Table)/*strBuscar*/+"\");\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+".setToolTipText(\""+GetRecargarInformacionBuscarC(false,column.Table)/*strBuscar*/+" (\"+FuncionesSwing.getKeyNameControl(\"CONTROL_BUSQUEDA\")+\")\");\r\n";
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+".setFocusable(false);\r\n";
				strControl+="\t\tFuncionesSwing.addImagenButtonGeneral(this.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+",\"buscar_form\",\""+GetRecargarInformacionBuscarC(false,column.Table)/*strBuscar*/+"\");\r\n\r\n";
			}
			
			strControl+="\t\tsKeyStrokeName = FuncionesSwing.getKeyNameControl(\"CONTROL_BUSQUEDA\");\r\n";     
			strControl+="\t\tkeyStrokeControl=FuncionesSwing.getKeyStrokeControl( \"CONTROL_BUSQUEDA\");\r\n";
        	strControl+="\t\t"+strControlName+".getInputMap().put(keyStrokeControl, sKeyStrokeName);\r\n";
        	strControl+="\t\t"+strControlName+".getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"\"));\r\n\r\n";
        
			
			if(blnConFuncionalidadAccionesCampoVersion1) {
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda= new JButtonMe();\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL_BOTONICONO+","+SWING_HEIGHT_CONTROL_BOTONICONO+"));\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL_BOTONICONO+","+SWING_HEIGHT_CONTROL_BOTONICONO+"));\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL_BOTONICONO+","+SWING_HEIGHT_CONTROL_BOTONICONO+"));\r\n";	
				strControl+="\t\t//this.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setText(\"U\");\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setToolTipText(\"BUSCAR DATOS (\"+FuncionesSwing.getKeyNameControl(\"CONTROL_BUSCAR\")+\")\");\r\n";
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setFocusable(false);\r\n";
				strControl+="\t\tFuncionesSwing.addImagenButtonGeneral(this.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda,\"buscardatos\",\"BUSCAR DATOS\");\r\n\r\n";
			}
			
			
			strControl+="\t\tsKeyStrokeName = FuncionesSwing.getKeyNameControl(\"CONTROL_BUSCAR\");\r\n";     
			strControl+="\t\tkeyStrokeControl=FuncionesSwing.getKeyStrokeControl( \"CONTROL_BUSCAR\");\r\n";
        	strControl+="\t\t"+strControlName+".getInputMap().put(keyStrokeControl, sKeyStrokeName);\r\n";
        	strControl+="\t\t"+strControlName+".getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Busqueda\"));\r\n\r\n";
        
			if(!esTablaParametros) {
				strControl+="\t\tif(this."+GetNombreClaseObjetoC(column.Table.ToString())+"SessionBean.getEsGuardarRelacionado() || paginaTipo.equals(PaginaTipo.SECUNDARIO)) {\r\n";
				if(blnConFuncionalidadAccionesCampoVersion1) {
					strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Busqueda.setVisible(false);";	
				}
				strControl+="\t\t}\r\n\r\n";
			}
			
			if(blnConFuncionalidadAccionesCampoVersion1) {
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Update= new JButtonMe();\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Update.setMinimumSize(new Dimension("+SWING_WIDTH_CONTROL_BOTONICONO+","+SWING_HEIGHT_CONTROL_BOTONICONO+"));\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Update.setMaximumSize(new Dimension("+SWING_WIDTH_CONTROL_BOTONICONO+","+SWING_HEIGHT_CONTROL_BOTONICONO+"));\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Update.setPreferredSize(new Dimension("+SWING_WIDTH_CONTROL_BOTONICONO+","+SWING_HEIGHT_CONTROL_BOTONICONO+"));\r\n";	
				strControl+="\t\t//this.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Update.setText(\"U\");\r\n";	
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Update.setToolTipText(\"ACTUALIZAR DATOS (\"+FuncionesSwing.getKeyNameControl(\"CONTROL_ACTUALIZAR\")+\")\");\r\n";
				strControl+="\t\tthis.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Update.setFocusable(false);\r\n";
				strControl+="\t\tFuncionesSwing.addImagenButtonGeneral(this.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Update,\"actualizardatos\",\"ACTUALIZAR DATOS\");\r\n";
			}
			
			
			strControl+="\t\tsKeyStrokeName = FuncionesSwing.getKeyNameControl(\"CONTROL_ACTUALIZAR\");\r\n";     
			strControl+="\t\tkeyStrokeControl=FuncionesSwing.getKeyStrokeControl( \"CONTROL_ACTUALIZAR\");\r\n";
        	strControl+="\t\t"+strControlName+".getInputMap().put(keyStrokeControl, sKeyStrokeName);\r\n";
        	strControl+="\t\t"+strControlName+".getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Update\"));\r\n\r\n";
        
			TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
			bool esAutoReferenciadaFk=GetEsAutoReferenciadaTablaC(tableSchemaFk);
				
			if(blnEsAutoReferenciada|| esAutoReferenciadaFk) {				
				if(tableSchemaFk.Name.Equals(column.Table.Name) || esAutoReferenciadaFk) {
					if(blnConFuncionalidadAccionesCampoVersion1) {
						strControl+="\r\n\t\tjButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Arbol= new JButtonMe();\r\n";	
						strControl+="\t\tjButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Arbol.setMinimumSize(new Dimension(50,"+SWING_HEIGHT_CONTROL+"));\r\n";	
						strControl+="\t\tjButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Arbol.setMaximumSize(new Dimension(50,"+SWING_HEIGHT_CONTROL+"));\r\n";	
						strControl+="\t\tjButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Arbol.setPreferredSize(new Dimension(50,"+SWING_HEIGHT_CONTROL+"));\r\n";	
						strControl+="\t\tjButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Arbol.setText(\""+strArbol+"\");\r\n";	
						strControl+="\t\tjButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Arbol.setToolTipText(\""+strBuscar+" "+strPor+" "+strArbol+" (\"+FuncionesSwing.getKeyNameControl(\"CONTROL_ARBOL\")+\")\");\r\n";	
						strControl+="\t\tjButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Arbol.setFocusable(false);\r\n";
						strControl+="\t\tFuncionesSwing.addImagenButtonGeneral(this.jButton"+strColumna+GetNombreClaseC(column.Table.ToString())+"Arbol,\"arbol\",\""+strBuscar+" "+strPor+" "+strArbol+"\");\r\n\r\n";
					}
					
					strControl+="\t\tsKeyStrokeName = FuncionesSwing.getKeyNameControl(\"CONTROL_ARBOL\");\r\n";     
					strControl+="\t\tkeyStrokeControl=FuncionesSwing.getKeyStrokeControl(\"CONTROL_ARBOL\");\r\n";
        			strControl+="\t\t"+strControlName+".getInputMap().put(keyStrokeControl, sKeyStrokeName);\r\n";
        			strControl+="\t\t"+strControlName+".getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(this,\""+GetNombreColumnaClaseC(column)+strIndexName+strFinalName+GetNombreClaseC(column.Table.ToString())+"Arbol\"));\r\n\r\n";
        
				}
			}
		}
	
	
	return strControlPanel+strControl;
}

public String GetRecargarInformacionBuscarC(bool esBusqueda,TableSchema TablaBase) {
	String sTablaClaseRelacionada="";
	
	if(!blnEsLabelProcesar) {
		sTablaClaseRelacionada=strBuscar;
		
		if(blnEsReporte){
			//sTablaClaseRelacionada=strProcesar;
		}
		
		String sLabelBusqueda=GetTituloBusquedaNombreTableFromPropertiesC(TablaBase);
		
		if(esBusqueda) {
			sLabelBusqueda=GetTituloBusquedaNombreTableFromPropertiesC(TablaBase);
			
			if(!sLabelBusqueda.Equals(String.Empty)) {
				sTablaClaseRelacionada=sLabelBusqueda;
			}
		}
	} else {
		sTablaClaseRelacionada=strProcesar;
	}
	
	return sTablaClaseRelacionada;
}

public string GetControlHtml(ColumnSchema column,bool ConFaces,bool ConRichFaces,String RichFaces_Version) {	
	return GetControlHtml(column,ConFaces,ConRichFaces,RichFaces_Version,false);
}

public string GetControlHtml(ColumnSchema column,bool ConFaces,bool ConRichFaces,String RichFaces_Version,bool esParaTabla) {	
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=" "+GetPrefijoTipoC(column);	
	String strColumna=GetNombreColumnaClaseC(column);
	
	String strControl="";
	String strType="";
	String strName="";
	String strNameControl="";
	
	String strObjectFace="";
	String strObjectFaceOnlyFace="";
	String strValueFace="";
	String strPrefijoCampo="";
	String strRendered="";
	String strAjaxEvenAuxiliar="";
	String strAjaxBlurEvenValidation="";
	String strDisabled="";
	//String strRenderedControl="";
	String strIdMessage="";
	
	String strValidacion="";
	bool ConMostrarValidaciones=false;
	
	if(EsVersionRichFaces4C(RichFaces_Version)) {
		ConMostrarValidaciones=true;
		strAjaxBlurEvenValidation="\r\n\t\t\t\t\t\t\t\t<f:ajax event=\"blur\" render=\"TO_REPLACE\"/>";//TO_REPLACE  	frmMantenimiento"+GetNombreClaseC(column.Table.ToString())+"		execute=\"@form\"
	}
	
	if(ConMostrarValidaciones) {
		strValidacion=GetValidacionParameterClaseC(column,ConMostrarValidaciones,true);
	}
		
	if(ConFaces||ConRichFaces) {
		if(!esParaTabla) {
			strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+"."+GetNombreClaseObjetoC(column.Table.ToString());
		} else {
			strRendered=" rendered=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".isEditarEnTabla}\"";
			strAjaxEvenAuxiliar="\r\n\t\t\t\t\t\t\t\t<a4j:ajax event=\"change\" execute=\"@form\" listener=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".ejecutarAuxiliar"+GetNombreClaseC(column.Table.ToString())+"ParaAjaxPostBack}\" render=\""+GetNombreClaseObjetoC(column.Table.ToString())+"sAjaxWebPart\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(column.Table.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(column.Table.ToString())+"();\"/>\r\n";
			
			strObjectFace=GetNombreClaseObjetoC(column.Table.ToString());
		}
		
		strObjectFaceOnlyFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
		strPrefijoCampo=GetPrefijoTablaC().ToLower();
	}
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)) {
			return string.Empty;
	}
		
	if(column.Name.Equals(strId)) {
		strType="\"hidden\"";
		strNameControl=GetNameControlHtml(column);
		strName=" name=\""+strNameControl+"\"";
		
		if(!ConFaces&&!ConRichFaces) {
			strControl="\r\n\t\t\t\t\t\t\t<input type="+strType+strName+">";
		} else {
			if(ConFaces||ConRichFaces) {
				strControl="<h:inputHidden "+strName.Replace("name=","id=")+" />";
				//strControl+="<h:inputHidden id=\"maximumSeverity\" value=\"#{"+strObjectFaceOnlyFace+".maximumSeverity}\"/>";
			}
		}		
	}
	
	if(column.Name.Equals(strVersionRow)) {
		strType="\"hidden\"";
		strNameControl=GetNameControlHtml(column);
		strName=" name=\""+strNameControl+"\"";
		
		if(!ConFaces&&!ConRichFaces) {
			strControl="\r\n\t\t\t\t\t\t\t<input type="+strType+strName+">";
		} else {
			if(ConFaces||ConRichFaces) {
				strValueFace=" value=\"#{"+strObjectFace+"."+strVersionRow+"}\" ";
							
				strControl="\r\n\t\t\t\t\t\t\t<h:inputHidden "+strName.Replace("name=","id=")+strValueFace+" />";
			}
		}	
		
	} else {
		
		String strObjectFaceOnly=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
		String strSufijoVariables=GetNombreClaseC(column.Table.ToString())+ GetNombreColumnaClaseC(column);		
		
		bool blnConSeguridadColumn=GetConSeguridadColumnFromPropertiesC(column);
		
		if(ConFaces||ConRichFaces) {
			if(blnConSeguridadColumn) {			
				//strRendered=" rendered=\"#{"+strObjectFaceOnly+".isPermisoConsulta"+strSufijoVariables+"}\"";
				strRendered=" rendered=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".isEditarEnTabla && "+strObjectFaceOnly+".isPermisoConsulta"+strSufijoVariables+"}\"";
			}
		}
		
		if(!column.IsForeignKeyMember) {
			
			String strReadOnlyColumna="";
			
			if(ConFaces||ConRichFaces) {
				if(!blnConSeguridadColumn) {
					if(GetNoEditColumnFromPropertiesC(column)
						|| GetReadOnlyColumnFromPropertiesC(column)) {
						strReadOnlyColumna=" readonly=\"true\"";
					}
				} else {
					strReadOnlyColumna=" readonly=\"#{!"+strObjectFaceOnly+".isPermisoNuevoActualizar"+strSufijoVariables+"}\"";
				}
			}
			
			strReadOnlyColumna=strRendered + strReadOnlyColumna;
			
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {				
				if(!EsPathImagenDocumentoColumn(column)) {
					
				String strMaxLength="";
				String strRows="";
				int numRows=0;
				int numCols=0;
				
				strNameControl=GetNameControlHtml(column);
				strName=" name=\""+strNameControl+"\"";
				
					if(column.Size<51) {
						strType="\"text\"";
						strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
						
						if(!ConFaces&&!ConRichFaces) {
							strControl="\r\n\t\t\t\t\t\t\t<input type="+strType+strMaxLength+strName+GetOnBlurEventValidationControlHtml(column)+">";		
						
						} else {
							if(ConFaces||ConRichFaces) {
								strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";
								
								strControl="\r\n\t\t\t\t\t\t\t<h:inputText "+strName.Replace("name=","id=")+strValueFace+strMaxLength+strReadOnlyColumna+" >\r\n";
								strControl+="\t\t\t\t\t\t\t\t<rich:"+strAjaxValidator+strAjaxEventOnBlur+"/>\r\n";
								
								if(EsVersionRichFaces3C(RichFaces_Version)){
									strControl+="\t\t\t\t\t\t\t\t<rich:"+strAjaxValidator+" event=\"submit\"/>\r\n";
								}
								
								strControl+=strAjaxEvenAuxiliar;
								strControl+=strValidacion;
								strControl+=strAjaxBlurEvenValidation.Replace("TO_REPLACE","msg"+strNameControl);					
								strControl+="\r\n\t\t\t\t\t\t\t</h:inputText>\r\n\r\n";
								
								strControl+="\t\t\t\t\t\t\t<rich:message id=\"msg"+strNameControl+"\" "+strName.Replace("name=","for=")+" ajaxRendered=\"true\"/>";
							}
						}					
					} else if(column.Size<200) {
						numRows=column.Size/30;
						numCols=30;
						
						strType="\r\n\t\t\t\t\t\t\t<textarea";
						strRows=" rows=\""+numRows.ToString()+"\"";
						strMaxLength=" cols=\""+numCols.ToString()+"\"";
						
						if(!ConFaces&&!ConRichFaces) {
							strControl=strType+strName+strMaxLength+strRows+GetOnBlurEventValidationControlHtml(column)+"></textarea>";
						} else {
							if(ConFaces||ConRichFaces) {
								strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";
							
								strControl="\r\n\t\t\t\t\t\t\t<h:inputTextarea "+strName.Replace("name=","id=")+strValueFace+strRows+strMaxLength+strReadOnlyColumna+" >\r\n";
								
								strControl+="\t\t\t\t\t\t\t\t<rich:"+strAjaxValidator+strAjaxEventOnBlur+"/>\r\n";
								
								if(EsVersionRichFaces3C(RichFaces_Version)){
									strControl+="\t\t\t\t\t\t\t\t<rich:"+strAjaxValidator+" event=\"submit\"/>\r\n";
								}
								
								strControl+=strAjaxEvenAuxiliar;
								strControl+=strValidacion;
								strControl+=strAjaxBlurEvenValidation.Replace("TO_REPLACE","msg"+strNameControl);
								strControl+="\r\n\t\t\t\t\t\t\t</h:inputTextarea>\r\n\r\n";
								
								strControl+="\t\t\t\t\t\t\t<rich:message id=\"msg"+strNameControl+"\" "+strName.Replace("name=","for=")+" ajaxRendered=\"true\"/>";
							}
						}						
					} else {
						numRows=GetWebNumeroFilasColumnFromPropertiesC(column);
						numCols=GetWebNumeroColumnasColumnFromPropertiesC(column);
						
						strType="\r\n\t\t\t\t\t\t\t<textarea";
						strRows=" rows=\""+numRows.ToString()+"\"";
						strMaxLength=" cols=\""+numCols.ToString()+"\"";
						
						if(!ConFaces&&!ConRichFaces) {
							strControl=strType+strName+strMaxLength+strRows+GetOnBlurEventValidationControlHtml(column)+"></textarea>";
						} else {
							if(ConFaces||ConRichFaces) {
								strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";
								
								strControl="\r\n\t\t\t\t\t\t\t<h:inputTextarea "+strName.Replace("name=","id=")+strValueFace+strRows+strMaxLength+strReadOnlyColumna+" >\r\n";
								
								strControl+="\t\t\t\t\t\t\t\t<rich:"+strAjaxValidator+strAjaxEventOnBlur+"/>\r\n";
								
								if(EsVersionRichFaces3C(RichFaces_Version)){
									strControl+="\t\t\t\t\t\t\t\t<rich:"+strAjaxValidator+" event=\"submit\"/>\r\n";
								}
								
								strControl+=strAjaxEvenAuxiliar;
								strControl+=strValidacion;
								strControl+=strAjaxBlurEvenValidation.Replace("TO_REPLACE","msg"+strNameControl);
								strControl+="\r\n\t\t\t\t\t\t\t</h:inputTextarea>\r\n\r\n";
								
								strControl+="\t\t\t\t\t\t\t<rich:message id=\"msg"+strNameControl+"\" "+strName.Replace("name=","for=")+" ajaxRendered=\"true\"/>";
							}
						}
						
					}
				} else {//if EsPathImagen Documento
					if(ConRichFaces) {
						String strTypes="jpg, gif, png, bmp";
						String strLabelLink="Ver Imagen (Presionado Ctrl)";
						
						if(EsPathDocumentoColumn(column)) {
							strTypes="doc,docx, xls,xlsx, pdf, txt, ppt,pptx, pps,ppsx";
							strLabelLink="Descargar Documento (Presionado Ctrl)";
						}
						
						strControl="\r\n\t\t\t\t\t\t\t<rich:fileUpload fileUploadListener=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".listener"+GetNombreColumnaClaseC(column)+"}\" maxFilesQuantity=\"1\" id=\"upload"+GetNombreColumnaClaseC(column)+"\" immediateUpload=\"false\" acceptedTypes=\""+strTypes+"\"\r\n";
						strControl+="\t\t\t\t\t\t\tallowFlash=\"false\" listHeight=\"80px\" listWidth=\"200px\" addControlLabel=\"Nuevo\" uploadControlLabel=\"Cargar\" cancelEntryControlLabel=\"Cancelar\">\r\n";
				        strControl+="\t\t\t\t\t\t\t<a4j:support event=\"onuploadcomplete\" "+strReRender+"=\"richPanelMantenimiento"+GetNombreClaseC(column.Table.ToString())+strAjaxWebPart+"\"/>\r\n";
				        strControl+="\t\t\t\t\t\t\t</rich:fileUpload>\r\n\r\n";
						
						if(!EsPathDocumentoColumn(column)) {
							strControl+="\t\t\t\t\t\t\t<h:graphicImage id=\"graphicImage"+GetNombreColumnaClaseC(column)+"\" height=\"100px\" width=\"100px\" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\"/>\r\n";
						} else {
							strControl+="\t\t\t\t\t\t\t<h:outputText value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\"/>\r\n";
						}
						
						//ES SOLO HTML Y NO SOLUCIONA PROBLEMA
						//strControl+="\t\t\t\t\t\t\t<a href=\""+GetRelativePathC(column.Table)+"${"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" target=\"_blank\">"+strLabelLink+"</a>\r\n";
						
						//UTILIZAR ESTE AUNQUE HAY Q TENER APLASTADO CONTROL O A SU VEZ CLICK DERECHO ABRIR EN NUEVA PAGINA
						strControl+="\t\t\t\t\t\t\t<h:outputLink value=\""+GetRelativePathC(column.Table)+"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" target=\"_blank\">"+strLabelLink+"</h:outputLink>";
						
						//NO UTILIZAR AQUI YA QUE SE PIERDE FORMULARIO AL ABRIR LINK
						//strControl+="\r\n\t\t\t\t\t\t\t<h:commandLink value=\""+strLabelLink+"\" onclick=\"funcionGeneral.abrirLink('#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}')\"/>";
					}
				}
			} else if(column.DataType==DbType.Boolean) {
				strType="\"checkbox\"";
				strNameControl=GetNameControlHtml(column);
				strName=" name=\""+strNameControl+"\"";
				
				if(!ConFaces&&!ConRichFaces) {
					strControl="\r\n\t\t\t\t\t\t\t<input type="+strType+strName+">";
					
				} else {
					if(ConFaces||ConRichFaces) {
						strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";
						//Trace.WriteLine(strAjaxEvenAuxiliar);	
						strControl="\r\n\t\t\t\t\t\t\t<h:selectBooleanCheckbox "+strName.Replace("name=","id=")+strValueFace+strReadOnlyColumna+" >";
						strControl+=strAjaxEvenAuxiliar;
						strControl+="\r\n\t\t\t\t\t\t\t</h:selectBooleanCheckbox>";
					}
				}
				
			} else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
				strType="\"text\"";
				strNameControl=GetNameControlHtml(column);
				strName=" name=\""+strNameControl+"\"";
				String strMaxLength=" maxlength=\""+column.Size.ToString()+"\"";
				
				if(!ConFaces&&!ConRichFaces) {
					strControl="\r\n\t\t\t\t\t\t\t<input type="+strType+strMaxLength+strName+GetOnBlurEventValidationControlHtml(column)+">";
				} else {
					if(ConFaces||ConRichFaces) {
						strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";
						
						strControl="\r\n\t\t\t\t\t\t\t<h:inputText "+strName.Replace("name=","id=")+strValueFace+strMaxLength+strReadOnlyColumna+" >\r\n";
						
						strControl+="\t\t\t\t\t\t\t\t<rich:"+strAjaxValidator+strAjaxEventOnBlur+"/>\r\n";
						
						if(EsVersionRichFaces3C(RichFaces_Version)){
							strControl+="\t\t\t\t\t\t\t\t<rich:"+strAjaxValidator+" event=\"submit\"/>\r\n";
						}
						
						strControl+=strAjaxEvenAuxiliar;
						strControl+=strValidacion;
						strControl+=strAjaxBlurEvenValidation.Replace("TO_REPLACE","msg"+strNameControl);
						strControl+="\r\n\t\t\t\t\t\t\t</h:inputText>\r\n\r\n";
						
						strControl+="\t\t\t\t\t\t\t<rich:message id=\"msg"+strNameControl+"\" "+strName.Replace("name=","for=")+" ajaxRendered=\"true\"/>";
					}
				}				
			} else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime) {
				String strDatePattern="";
				String strFinalCalendar="";
				
				strNameControl=GetNameControlHtml(column);
				strName=" name=\""+strNameControl+"\"";
				
				if(!ConFaces&&!ConRichFaces) {
					strType="\"dojo.dijit.calendar\"";
					strName=" id=\""+GetNameControlHtml(column)+"\"";
					strControl="<a:widget  name="+strType+strName+"/>";
					
				} else {
					if(ConRichFaces) {
						if(EsDateColumn(column)) {
							//strDatePattern="ConstantesJsp.SDATEDATEPATTERN";
							strDatePattern="yyyy-MM-dd";
						}else if(EsDateTimeColumn(column)) {
							//strDatePattern="ConstantesJsp.SDATETIMEDATEPATTERN";
							strDatePattern="yyyy-MM-dd HH:mm:00.0";
						}else if(EsTimeColumn(column)) {
							//strDatePattern="ConstantesJsp.STIMEDATEPATTERN";
							strDatePattern="yyyy-MM-dd HH:mm:00";
						}
						//strDatePattern=" datePattern=\"#{"+strDatePattern+"}\"";
						strDatePattern=" datePattern=\""+strDatePattern+"\"";
						
						if(EsDateColumn(column)) {
							strFinalCalendar+=">";
							strFinalCalendar+=strAjaxEvenAuxiliar;
							strFinalCalendar+="\r\n\t\t\t\t\t\t\t</rich:calendar>";
							
						}else if(EsDateTimeColumn(column)) {
							strFinalCalendar=" showApplyButton=\"true\">\r\n\t\t\t\t\t\t\t\t";
							strFinalCalendar+=" <f:converter  converterId=\"TimestampConverter\" />";
							strFinalCalendar+=strAjaxEvenAuxiliar;
							strFinalCalendar+="\r\n\t\t\t\t\t\t\t</rich:calendar>";
							
						}else if(EsTimeColumn(column)) {
							strFinalCalendar=" showApplyButton=\"true\">";
							strFinalCalendar+="\r\n\t\t\t\t\t\t\t\t";
							strFinalCalendar+="<f:converter  converterId=\"TimeConverter\" />";
							strFinalCalendar+=strAjaxEvenAuxiliar;
							strFinalCalendar+="\r\n\t\t\t\t\t\t\t</rich:calendar>";
						}						
							
						strValueFace=" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" ";
							
						strControl="\r\n\t\t\t\t\t\t\t<rich:calendar "+strName.Replace("name=","id=")+strValueFace+strDatePattern+strReadOnlyColumna+strFinalCalendar;
					}
				}				       
			}
		} else {						
			if(!blnNoStandardTableFromProperties) {					
				strNameControl=GetNameControlHtml(column);
				String strNameOnly=strNameControl;//GetNameControlHtml(column);
				strName=" id=\""+strNameOnly+"\"";
				bool existeChangeCombo=false;
				
				if(	(EsColumnaVariableGlobalDataBaseFromPropertiesC(column) 
					|| EsColumnaVariableModuloGlobalC(column)
					)
					&& !EsColumnaVariableGlobalMostrarDataBaseFromPropertiesC(column)
					
				) {
					strDisabled=" disabled=\"true\" ";
					
					if(!esParaTabla) {
						strRendered=" rendered=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces+".isDeveloping}\"";
					}
				}
				
				if(!ConFaces&&!ConRichFaces) {
					strControl="<a:widget"+strName+"name=\"dojo.dijit.combobox\" value=\"[{label : 'Alabama', value : 'AL'}]\""+"/>";
				} else {
					if(ConFaces) {
						strControl="\r\n\t\t\t\t\t\t\t<h:selectOneMenu "+strName.Replace("name=","id=")+" value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" >\r\n";
						strControl+="\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strObjectFaceOnlyFace+"."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"ListSelectItem}\"/>\r\n";		
						strControl+="\t\t\t\t\t\t\t</h:selectOneMenu>";
					} else {
						//System.Windows.Forms.MessageBox.Show("here");
						//rich:comboBox
						String strValueFk="";
						String strValueFkMaybe="";
						
						if(!GetConNoSaveForeignKeyColumnFromPropertiesC(column)) {
							strValueFk="value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\"";
						} else {
							//ES LO MISMO QUE ANTERIOR SOLO COMO COMENTARIO HTML
							//DESHABILITO, ME SALE ERROR
							//strValueFkMaybe="\r\n\t\t\t\t\t\t\t<!-- value=\"#{"+strObjectFace+"."+strPrefijoCampo+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+"}\" -->";
						}
						
						String strItemsValue="";
						
						strItemsValue=strObjectFaceOnlyFace+"."+GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower() +"s"+strForeignKey+"ListSelectItem";
						
						if(!GetConEventDependColumnFromPropertiesC(column).Equals("")) {
							if(esParaTabla) {
								strItemsValue=strObjectFaceOnlyFace+".get"+ GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"s"+strForeignKey+"ListSelectItemAuxiliarDesdePadre("+GetNombreClaseObjetoC(column.Table.ToString())+")";
							} else {
								//strItemsValue=strObjectFaceOnlyFace+".get"+ GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"s"+strForeignKey+"ListSelectItemAuxiliarDesdePadre("+strObjectFaceOnlyFace+"."+GetNombreClaseObjetoC(column.Table.ToString())+")";
								strItemsValue=strObjectFaceOnlyFace+"."+ GetNombreCompletoClaseRelacionadaFromColumn(column).ToLower()+"s"+strForeignKey+"ListSelectItem";
							}
						}
						
						//COMBO_PANEL(DESHABILITADO)
						//strControl="\r\n\t\t\t\t\t\t<rich:panel id=\"richPanel"+   strNameOnly+"\" "+strRendered+">\r\n";
						strControl="\r\n\t\t\t\t\t\t\t<h:selectOneMenu "+strName.Replace("name=","id=")+" "+strValueFk+strRendered+strDisabled+" >"+strValueFkMaybe+"\r\n";
						strControl+="\t\t\t\t\t\t\t\t<f:selectItems value=\"#{"+strItemsValue+"}\"/>\r\n";		
						
						if(GetConEventChangeColumnFromPropertiesC(column) || GetOnChangeColumnFromPropertiesC(column)){
							existeChangeCombo=true;
							strControl+="\t\t\t\t\t\t\t\t<a4j:ajax event=\"change\" execute=\"@form\" listener=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"RequestBean.recargarForm"+GetNombreClaseC(column.Table.ToString())+GetNombreCompletoClaseRelacionadaFromColumn(column)+"('Formulario')}\" render=\"richPanelMantenimiento"+GetNombreClaseC(column.Table.ToString())+"AjaxWebPart\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(column.Table.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarFinalizacionProceso"+GetNombreClaseC(column.Table.ToString())+"();\"/>\r\n";
						}
						
						if(!existeChangeCombo) {
							strControl+=strAjaxEvenAuxiliar;
						}
						
						strControl+="\t\t\t\t\t\t\t</h:selectOneMenu>\r\n";
						
						if(GetBusquedaForeignKeyColumnFromPropertiesC(column)) {
							TableSchema tableSchemaForeignKey=GetNombreTablaRelacionadaFromColumn(column);
							String strPlural=GetPluralTituloNombreTableFromPropertiesC(tableSchemaForeignKey);
							
							if(!esParaTabla) {
								strControl+="\t\t\t\t\t\t\t<a4j:commandButton id=\"cmdBusqueda"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"\" action=\"#{"+GetNombreClaseObjetoC(column.Table.ToString())+"RequestBean.registrarSesion"+GetNombreClaseC(column.Table.ToString())+"ParaBusqueda"+GetNombreClaseC(tableSchemaForeignKey.ToString())+strPlural.ToLower()+"}\" render=\"auxiliar"+GetNombreClaseC(column.Table.ToString())+"\" image=\""+GetRelativePathC(column.Table)+"Imagenes/busqueda.gif\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarInicioProceso"+GetNombreClaseC(column.Table.ToString())+"();\" oncomplete=\""+GetNombreClaseObjetoC(column.Table.ToString())+"FuncionGeneral.procesarFinalizacionProcesoAbrirLink"+GetNombreClaseC(column.Table.ToString())+"();\"/>\r\n";
							}
							//strControl+="\t\t\t\t\t\t\t<a4j:commandButton id=\"imgBusqueda"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"\" render=\"auxiliar"+GetNombreClaseC(TablaBase.ToString())+"\" image=\""+GetRelativePathC(column.Table)+"Imagenes/busqueda.gif\" onclick=\""+GetNombreClaseObjetoC(column.Table.ToString())+"PaginaWebInteraccion.abrirBusquedaFk"+GetNombreClaseC(tableSchemaForeignKey.ToString())+GetNombreClaseC(column.Table.ToString())+"sOnClick()\"/>\r\n";//action="#{perfilusuarioRequestBean.irAPerfilUsuarioFkActual}" rendered="#{perfilusuarioSessionBean.isPermiteNavegacionHaciaForeignKeyDesdePerfilUsuario}"
							
						}
						
						//COMBO_PANEL(DESHABILITADO)
						//strControl+="\t\t\t\t\t\t</rich:panel>";
						//rich:comboBox
					}					
				}	
			}
		}
	}
	
	return strControl;
}
	
	//ESTA FUNCION UTILIZAN LOS TEMPLATES --> CACHE=false
	public Hashtable GetTablasRelacionadas(TableSchema table) {
		Hashtable hashChildrenTablesFinalFinal=new Hashtable();			
		//return hashChildrenTablesFinalFinal;
		
		bool conTodasRelaciones=true;
				
		hashChildrenTablesFinalFinal=GetTablasRelacionadas(table,conTodasRelaciones);	
		
		return hashChildrenTablesFinalFinal;
	}		
	
	public ArrayList GetArrayTablasRelacionadasParametrosC(SchemaExplorer.TableSchema table,bool conForzarReporte) {//Hashtable
		ArrayList arrayListChildrenTables=new ArrayList();
		
		Hashtable hashChildrenTables=new Hashtable();
		Hashtable hashChildrenTablesFinal=new Hashtable();
				
		if(blnEsReporte || conForzarReporte) {
			hashChildrenTables=GetChildrenCollections(table,table.Database.Tables);								
									
			TableSchema tablaRelacionadaObjetivo=null;
			
			foreach(CollectionInfo collectionInfo in hashChildrenTables.Values)	{
				//NO TOMAR EN CUENTA MULTIPLE
				if(TieneFkMultiple(collectionInfo)) {
					continue;	
				}
						
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
							
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
							
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}								
				
				//ES/SON TABLAS QUE REPRESENTAN PARAMETROS DE PROCESOS
				if(GetEsProcesoParamFromPropertiesC(tablaRelacionadaObjetivo)) {
					hashChildrenTablesFinal.Add(collectionInfo.PropertyName,collectionInfo);
					
					//Trace.WriteLine("ok="+tablaRelacionadaObjetivo.Name);
						
					arrayListChildrenTables.Add(tablaRelacionadaObjetivo);
					//continue;				
				}
			}
			
			//return hashChildrenTablesFinal;
			
			//Trace.WriteLine(arrayListChildrenTables.Count);
		}
		
		return arrayListChildrenTables;
	}
	
	public Hashtable GetTablasRelacionadas(SchemaExplorer.TableSchema table,bool conTodasRelaciones) {		
		//return new Hashtable();
		Hashtable hashChildrenTablesFinal=new Hashtable();
		Hashtable hashChildrenTablesFinalFinal=new Hashtable();
		
		bool esTablaClasesNoDatabase=false;
		
			String strClasesNoFromProperties="";
			
			strClasesNoFromProperties=GetClasesNoDatabaseFromPropertiesC(table.Database);
			
			if(ExisteEnListaComasC(strClasesNoFromProperties,table.Name)) {
				esTablaClasesNoDatabase=true;						
			}
				
			//VERIFICA NUEVAMENTE PARA NO CREAR RELACIONES MUY GRANDES
			//SI EXISTE NO TRAER TODAS RELACIONES Y SI TIENE NINGUNO NO TRAER NINGUNO
						
			if(conTodasRelaciones) {								
				if(esTablaClasesNoDatabase) {
					conTodasRelaciones=false;
				}
			}
			//VERIFICA NUEVAMENTE PARA NO CREAR RELACIONES MUY GRANDES
			
				SchemaExplorer.TableSchemaCollection tablasRelacionadas=new SchemaExplorer.TableSchemaCollection();										
				
				String strClasesNoRelacionadas=string.Empty;					
				String strClasesSiRelacionadas=string.Empty;
				
				strClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
				strClasesSiRelacionadas=GetNombresClasesSiNavegacionFromTableFromPropertiesC(table);
				
				//PUEDE LLAMAR A TODAS LAS RELACIONES DONDE NINGUNO NO APLICA
				if((strClasesNoRelacionadas.Equals(strNINGUNO) || strClasesSiRelacionadas.Equals(strNINGUNO)) && !conTodasRelaciones) {
					return new Hashtable();
				}
				
				//DESCOMENTAR SI ES NECESARIO
				
				//SE REPITE ABAJO PERO NO ESTA MAL
				if(esTablaClasesNoDatabase || (!strClasesNoRelacionadas.Equals("") && !conTodasRelaciones)
										   || (!strClasesSiRelacionadas.Equals("") && !conTodasRelaciones)) {
											
					for (int i = 0; i < table.Database.Tables.Count; i++) { 	
						if(table.Database.Tables[i].Equals(table)) {
							continue;
						}
						
						//SI ES TABLA CLASES NO DATABASE NO TRAER TODAS LAS TABLAS DE DB, SOLO LA QUE TENDRIA RELACION											
						//if(esTablaClasesNoDatabase) {						
						//	if(!GetPermiteClaseRelacionadaC(table,table.Database.Tables[i])) {							
						//		continue;
						//	} else {
								//Trace.WriteLine("SI PERMITE="+table.Database.Tables[i].Name);
						//	}
						//}					
						
						//APLICANDO A TODOS
						//(NO SE GANA MUCHO) Y DEBE COMENTARSE ARRIBA					
						//if(!GetPermiteClaseRelacionadaC(table,table.Database.Tables[i])) {	
							//SI TOMAR EN CUENTA TODAS RELACIONES YA QUE LO GUARDA EN CACHE
							//continue;
						//}
						
							
						tablasRelacionadas.Add(table.Database.Tables[i]);
					}
				}
												
				
				Hashtable hashChildrenTables=new Hashtable();
				
				//SIEMPRE TRAE TODAS LAS RELACIONES YA QUE SE GUARDA EN CACHE DE CODESMITH
				//NO VALE ESTO
				//SI ES CLASES NO DATABASE GLOBAL O SE FILTRA RELACIONADAS CUANDO NO SE NECESITA TODAS RELACIONES
				/*
				if(esTablaClasesNoDatabase || (!strClasesNoRelacionadas.Equals("") && !conTodasRelaciones)
										   || (!strClasesSiRelacionadas.Equals("") && !conTodasRelaciones)) {
					
					if(IS_DEBUG) {
						Trace.WriteLine("TABLAS DB REL DE "+table.Name+"="+tablasRelacionadas.Count);
					}
										
					hashChildrenTables=GetChildrenCollections(table,tablasRelacionadas);// tablasRelacionadas);																																		
										
				} else {
					
					hashChildrenTables=GetChildrenCollections(table,table.Database.Tables);
				}
				*/
				
				ArrayList arrayListChildrenTables=new ArrayList();
				
				hashChildrenTablesFinal=new Hashtable();
				hashChildrenTablesFinalFinal=new Hashtable();				
								
				hashChildrenTables=GetChildrenCollections(table,table.Database.Tables);								
								
				foreach(CollectionInfo collectionInfo in hashChildrenTables.Values)	{
					//NO TOMAR EN CUENTA MULTIPLE
					if(TieneFkMultiple(collectionInfo)) {
						continue;	
					}
					
					if(!ExisteRelacion(arrayListChildrenTables,collectionInfo.SecondaryTable)){
						arrayListChildrenTables.Add(collectionInfo.SecondaryTable);
						
						//Trace.WriteLine(collectionInfo.PropertyName);
						hashChildrenTablesFinal.Add(collectionInfo.PropertyName,collectionInfo);
					}
				}
				
				
					
				String[] sClases;
				bool blClaseNo=false;
				TableSchema tablaRelacionadaObjetivo;							
					
				foreach(CollectionInfo collectionInfo in hashChildrenTablesFinal.Values)	{
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
					} else {
						tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
					}
					
					//ES/SON TABLAS QUE REPRESENTAN PARAMETROS DE PROCESOS
					if(GetEsProcesoParamFromPropertiesC(tablaRelacionadaObjetivo)) {
						continue;
					}
					
					if(!conTodasRelaciones) {										
						if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo)) {
							continue;
						}
					}
									
					//QUITAR FK MULTIPLE
					//DESHABILITADO
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
						TableKeySchema TableKey =collectionInfo.TableKey;
						
						if(TableKey.PrimaryKeyMemberColumns.Count>1) {
							//continue;
						}
					}
					
					hashChildrenTablesFinalFinal.Add(collectionInfo.PropertyName,collectionInfo);
				}
				
				//Trace.WriteLine(hashChildrenTablesFinalFinal.Count);
				//return hashChildrenTables; 	
		
		
		return hashChildrenTablesFinalFinal; 
	}
		
	public bool TieneReporteRelacionesC(TableSchema table) {
		bool tiene=true;
				
		if(GetNombresClasesNoNavegacionFromTableFromPropertiesC(table).Equals(strNINGUNO)) {
			 tiene=false;
		}
		
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table,false,false,false,false);
			
		if(tablasRelacionadasEncontradas.Count<=0) {
			tiene=false;
		}
		
		return tiene;
	}
	
	public ArrayList GetTablasRelacionadasFinal(TableSchema table,bool conTodos) {
			ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table,true,conTodos,false,false);
			
			return tablasRelacionadasEncontradas;
	}				
	
	public ArrayList GetTablasRelacionadasFinal(TableSchema table,bool conTodos,bool conOrden) {
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table,true,conTodos,conOrden,false);
			
		return tablasRelacionadasEncontradas;
	}
	
	public ArrayList GetTablasRelacionadasFinal(TableSchema table) {
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table,true,false,false,false);
			
		return tablasRelacionadasEncontradas;
	}		
	
	//UTILIZA FUNCION DE ARRIBA
	public ArrayList GetTablasRelacionadasFinal(TableSchema table,bool conMultiple,bool conTodos,bool conOrden,bool conDinamico) {
			Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			ArrayList arrayListTablasRelacionadas= new ArrayList();						
			arrayTablasRelacionadasMe= new ArrayList();
			TableKeySchemaMe tableKeySchemaMe=new TableKeySchemaMe();
			
			//CON ORDEN O NO
			if(!conOrden) {
				arrayListTablasRelacionadas=GetArrayListFromHashtableC(tablasRelacionadas);				
			} else {
				arrayListTablasRelacionadas=GetOrdenTablasRelacionadasC(table,tablasRelacionadas);	
			}
			
			TableSchema tablaRelacionadaObjetivo;
			ArrayList tablasRelacionadasEncontradas=new ArrayList();
			bool encontrado=false;
			String sClasesNoRelacionadas=String.Empty;
			String[] sClases;
			bool blClaseNo=false;
			String strNombreAdicional="";
			int intTamanioMaximoDescripcion=3700;
			
			foreach(CollectionInfo collectionInfo in arrayListTablasRelacionadas) {//tablasRelacionadas.Values)			
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);									
				
				if(!conMultiple) {
					if(TieneFkMultiple(collectionInfo)) {
						continue;	
					}
				}
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;	
					
					if(tablaRelacionadaObjetivo.Description.Length < intTamanioMaximoDescripcion) {
						if(conDinamico) {
							//if(!tablaRelacionadaObjetivo.Description.Contains("DIN_UNOAUNO")) {
								//SE GUARDA AUTOMATICA-DESHABILITADO
								//tablaRelacionadaObjetivo.Description+="|DIN_UNOAUNO=true";
								
								if(!ExisteTablaRelacionadaMeC(arrayTablasRelacionadasMe,tablaRelacionadaObjetivo)) {
									tableKeySchemaMe=new TableKeySchemaMe();
								} else {
									tableKeySchemaMe=GetTablaRelacionadaMeEncontradaC(arrayTablasRelacionadasMe,tablaRelacionadaObjetivo);
								}
								
								tableKeySchemaMe.TableSchemaActual=tablaRelacionadaObjetivo;																								
								
								if(!tableKeySchemaMe.Description.Equals("")) {
									tableKeySchemaMe.Description+="|";
								}
								
								tableKeySchemaMe.Description+="DIN_UNOAUNO=true";
								
								arrayTablasRelacionadasMe.Add(tableKeySchemaMe);
							//}
						}
					}
					
				} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {					
					tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					
				} else {
					tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
				}
								
				if(!strNombreAdicional.Equals("")) {
					if(tablaRelacionadaObjetivo.Description.Length < intTamanioMaximoDescripcion) {
						//Trace.WriteLine("TAMANIO CARACTERES DE "+tablaRelacionadaObjetivo.Name+"= "+tablaRelacionadaObjetivo.Description.Length);
						
						if(conDinamico) {
							//if(!tablaRelacionadaObjetivo.Description.Contains("DIN_NOMBRE_ADDICIONAL")) {
								//SE GUARDA AUTOMATICA-DESHABILITADO
								//tablaRelacionadaObjetivo.Description+="|DIN_NOMBRE_ADDICIONAL="+strNombreAdicional;
								
								if(!ExisteTablaRelacionadaMeC(arrayTablasRelacionadasMe,tablaRelacionadaObjetivo)) {
									tableKeySchemaMe=new TableKeySchemaMe();
								} else {
									tableKeySchemaMe=GetTablaRelacionadaMeEncontradaC(arrayTablasRelacionadasMe,tablaRelacionadaObjetivo);
								}
								
								tableKeySchemaMe.TableSchemaActual=tablaRelacionadaObjetivo;
								
								if(!tableKeySchemaMe.Description.Equals("")) {
									tableKeySchemaMe.Description+="|";
								}
								
								tableKeySchemaMe.Description+="DIN_NOMBRE_ADDICIONAL="+strNombreAdicional;
								
								arrayTablasRelacionadasMe.Add(tableKeySchemaMe);
							//}
						}
					}
				}
				
				if(!conTodos) {											
					if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo)) {
						continue;
					}
				}
												
				encontrado=false;
				
				foreach(TableSchema tableSchema in tablasRelacionadasEncontradas) {										
					if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)) {
						encontrado=true;
					}
				}				
				
				if(!encontrado) {
					tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
					//sTablaClaseRelacionada+=GetCargarTablesRelacionadas(tablaRelacionadaObjetivo,collectionInfo);
				}		
				
				//Trace.WriteLine(table.Name+strSimboloDosPuntos+tablaRelacionadaObjetivo.Name+"-->"+collectionInfo.CollectionRelationshipType);
			}
			
		return tablasRelacionadasEncontradas;
	}
		
	public String GetListasParametroTablesRelacionadasC(TableSchema table,bool esParaLogic,bool esParaEventos,bool esParaActualizarBeanActual,bool esParaActualizarFormulario,bool esParaActualizarListaConstantesFunciones,bool esParaActualizarObjetoActualRelaciones,bool ConEjb,bool esParaActualizarObjetoActualRelacionesGenerico) { //Donde esParaLogic=ConEjb
	//Donde esParaLogic=ConEjb
	String sTablaClaseRelacionada=String.Empty;
	
	//ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table);
	System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table,false);
	
	//GetTablasRelacionadas(table);
	
	//String strSelectedRow="intSelectedRow";
	String strTipoLista="";
	String strTipoObjetos="";
	String strNombreAdicional="";
	String strComentarioParaEjb="";
	
	if(ConEjb) {
		strComentarioParaEjb="//";
	}
		
	foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {								
		strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);		
		strTipoLista="";
		
		if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
			if(!esParaEventos && !esParaActualizarBeanActual && !esParaActualizarFormulario && !esParaActualizarListaConstantesFunciones && !esParaActualizarObjetoActualRelaciones && !esParaActualizarObjetoActualRelacionesGenerico) { 
				strTipoLista="this."+strObjetoFormDetalle+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()";
				}
				
				//if(!ConEjb) {
				sTablaClaseRelacionada+=","+strTipoLista+ strTipoObjetos;
				//}
			
			} else if(esParaEventos) {
				strTipoLista="this."+strObjetoFormDetalle+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()";
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\tfor(Classe clas:classes) {";
				sTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";				
				sTablaClaseRelacionada+="\r\n\t\t\t\t"+strComentarioParaEjb+GetNombreClaseObjetoC(table.ToString())+".set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"("+strTipoLista+ strTipoObjetos+");";//this.
				sTablaClaseRelacionada+="\r\n\t\t\t\t\tbreak;";
				sTablaClaseRelacionada+="\r\n\t\t\t\t}";
				sTablaClaseRelacionada+="\r\n\t\t\t}";
				
			} else if(esParaActualizarBeanActual) {
				strTipoLista=""+GetNombreClaseObjetoC(table.ToString())+strReturnGeneral+".get"+GetNombreClaseC(table.ToString())+"().";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"";
				} else {
					strTipoObjetos="get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()";
				}

				sTablaClaseRelacionada+="\r\n\t\t\t"+strComentarioParaEjb+"this."+GetNombreClaseObjetoC(table.ToString())+strClaseBean+".set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"("+strTipoLista+ strTipoObjetos+");";
			
			} else if(esParaActualizarFormulario) {
				strTipoLista="this."+strObjetoFormDetalle+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(";
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\tfor(Classe clas:classes) {";
				sTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";							
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strComentarioParaEjb+strTipoLista+ strTipoObjetos+""+GetNombreClaseObjetoC(table.ToString())+/*strClaseBean+*/".get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"());";
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strTipoLista+"inicializarActualizarBindingTabla"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(false);";
				sTablaClaseRelacionada+="\r\n\t\t\t\t\tbreak;";
				sTablaClaseRelacionada+="\r\n\t\t\t\t}";
				sTablaClaseRelacionada+="\r\n\t\t\t}";
				
			} else if(esParaActualizarListaConstantesFunciones) {
				strTipoLista=""+GetNombreClaseObjetoC(table.ToString())+".";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Local";
				} else {
					strTipoObjetos="get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()";
				}

				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strComentarioParaEjb+GetNombreClaseObjetoC(table.ToString())+"Local.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"("+strTipoLista+ strTipoObjetos+");";
			
			} else if(esParaActualizarObjetoActualRelaciones) {
				String strTipoListaRelaciones="this."+strObjetoFormDetalle+GetNombreClaseObjetoC(collectionInfo.SecondaryTableSchema.ToString())+"BeanSwingJInternalFrame";		
				String strTipoObjetosRelaciones=".quitarFilaTotales();";
				
				sTablaClaseRelacionada+="\r\n\r\n\t\t\t\t\t\t\t"+"if("+strTipoListaRelaciones+"!=null && "+strTipoListaRelaciones+".conTotales) {"+strTipoListaRelaciones+ strTipoObjetosRelaciones+"}";		
	
	
	
				strTipoLista=GetNombreClaseObjetoC(table.ToString())+"Aux.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"(this."+strObjetoFormDetalle+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
													
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+");";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"());";
				}

				sTablaClaseRelacionada+="\r\n\t\t\t\t\t\t\t"+strComentarioParaEjb+strTipoLista+ strTipoObjetos;
			
			} else if(esParaActualizarObjetoActualRelacionesGenerico) {
				
			}
		
		} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
			if(!esParaEventos && !esParaActualizarBeanActual && !esParaActualizarFormulario && !esParaActualizarListaConstantesFunciones && !esParaActualizarObjetoActualRelaciones && !esParaActualizarObjetoActualRelacionesGenerico) {
				strTipoLista="this."+strObjetoFormDetalle+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()";		
				}
				
				//if(!ConEjb) {
					sTablaClaseRelacionada+=","+strTipoLista+ strTipoObjetos;	
				//}
			
			} else if(esParaEventos) {
				strTipoLista="this."+strObjetoFormDetalle+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()";		
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\tfor(Classe clas:classes) {";
				sTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strComentarioParaEjb+GetNombreClaseObjetoC(table.ToString())+".set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s("+strTipoLista+ strTipoObjetos+");";//this.
				sTablaClaseRelacionada+="\r\n\t\t\t\t\tbreak;";
				sTablaClaseRelacionada+="\r\n\t\t\t\t}";
				sTablaClaseRelacionada+="\r\n\t\t\t}";
				
			} else if(esParaActualizarBeanActual) {
				strTipoLista=""+GetNombreClaseObjetoC(table.ToString())+strReturnGeneral+".get"+GetNombreClaseC(table.ToString())+"().";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
				} else {
					strTipoObjetos="get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s()";
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\t"+strComentarioParaEjb+"this."+GetNombreClaseObjetoC(table.ToString())+strClaseBean+".set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s("+strTipoLista+ strTipoObjetos+");";
			
			} else if(esParaActualizarFormulario) {
				strTipoLista="this."+strObjetoFormDetalle+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(";		
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\tfor(Classe clas:classes) {";
				sTablaClaseRelacionada+="\r\n\t\t\t\tif(clas.clas.equals("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";											
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strComentarioParaEjb+strTipoLista+ strTipoObjetos+""+GetNombreClaseObjetoC(table.ToString())+/*strClaseBean+*/".get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s());";
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strTipoLista+"inicializarActualizarBindingTabla"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"(false);";
				sTablaClaseRelacionada+="\r\n\t\t\t\t\tbreak;";
				sTablaClaseRelacionada+="\r\n\t\t\t\t}";
				sTablaClaseRelacionada+="\r\n\t\t\t}";
				
			} else if(esParaActualizarListaConstantesFunciones) {
				strTipoLista=""+GetNombreClaseObjetoC(table.ToString())+".";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s";
				} else {
					strTipoObjetos="get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s()";
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t"+strComentarioParaEjb+GetNombreClaseObjetoC(table.ToString())+"Local.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s("+strTipoLista+ strTipoObjetos+");";
			
			}  else if(esParaActualizarObjetoActualRelaciones) {
				String strTipoListaRelaciones="this."+strObjetoFormDetalle+GetNombreClaseObjetoC(collectionInfo.SecondaryTableSchema.ToString())+"BeanSwingJInternalFrame";		
				String strTipoObjetosRelaciones=".quitarFilaTotales();";
				
				sTablaClaseRelacionada+="\r\n\r\n\t\t\t\t\t\t\t"+"if("+strTipoListaRelaciones+"!=null && "+strTipoListaRelaciones+".conTotales) {"+strTipoListaRelaciones+ strTipoObjetosRelaciones+"}";		
	
				
	
				strTipoLista=GetNombreClaseObjetoC(table.ToString())+"Aux.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s(this."+strObjetoFormDetalle+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s);";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s());";		
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\t\t\t\t\t"+strComentarioParaEjb+strTipoLista+ strTipoObjetos;
			
			} else if(esParaActualizarObjetoActualRelacionesGenerico) {
				
				String strTipoListaRelaciones="this."+strObjetoFormDetalle+GetNombreClaseObjetoC(collectionInfo.SecondaryTableSchema.ToString())+"BeanSwingJInternalFrame";		
				//String strTipoObjetosRelaciones=".quitarFilaTotales();";
				
				//sTablaClaseRelacionada+="\r\n\r\n\t\t\t\t\t\t\t"+"if("+strTipoListaRelaciones+"!=null && "+strTipoListaRelaciones+".conTotales) {"+strTipoListaRelaciones+ strTipoObjetosRelaciones+"}";		
	
				
	
				strTipoLista=GetNombreClaseObjetoC(table.ToString())+"Local.set"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s(this."+strObjetoFormDetalle+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"BeanSwingJInternalFrame.";
				
				
				if(!esParaLogic) {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s);";
				} else {
					strTipoObjetos=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"Logic.get"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s());";		
				}
				
				sTablaClaseRelacionada+="\r\n\t\t\t\t"+strComentarioParaEjb+strTipoLista+ strTipoObjetos;

			}
		}
	}
	
	return sTablaClaseRelacionada;
}

	public bool ExisteTablaRelacionadaMeC(ArrayList arrayTablasRelacionadasMe,TableSchema tableSchemaActual) {
		bool existe=false;
		
		foreach(TableKeySchemaMe tableKeySchemaMe in arrayTablasRelacionadasMe) {
			if(tableKeySchemaMe.TableSchemaActual.Equals(tableSchemaActual)) {
				existe=true;
				break;
			}
		}
		
		return existe;
	}
	
	public TableKeySchemaMe GetTablaRelacionadaMeEncontradaC(ArrayList arrayTablasRelacionadasMe,TableSchema tableSchemaActual) {
		TableKeySchemaMe tableKeySchemaMeEncontrada=null;
		
		foreach(TableKeySchemaMe tableKeySchemaMe in arrayTablasRelacionadasMe) {
			if(tableKeySchemaMe.TableSchemaActual.Equals(tableSchemaActual)) {
				tableKeySchemaMeEncontrada=tableKeySchemaMe;
				break;
			}
		}
		
		return tableKeySchemaMeEncontrada;
	}
	
	public void QuitarParametrosDinamicosTablasC(ArrayList arrayListTablasRelacionadas) {
		foreach(TableSchema tableSchema in arrayListTablasRelacionadas) {
			tableSchema.Description=tableSchema.Description.Replace("|DIN_UNOAUNO=true","");
			tableSchema.Description=tableSchema.Description.Replace("|DIN_NOMBRE_ADDICIONAL=true","");
		}
	}
	
	public bool GetPermiteClaseRelacionadaC(TableSchema table,TableSchema tablaRelacionadaObjetivo) {
		String sClasesNoRelacionadas=String.Empty;
		String sClasesSiRelacionadas=String.Empty;
		String[] sClases;
		bool blClasePermite=true;
													
		sClasesNoRelacionadas=GetNombresClasesNoNavegacionFromTableFromPropertiesC(table);
		
		if(!sClasesNoRelacionadas.Equals(String.Empty)) {
			if(!sClasesNoRelacionadas.Equals(strNINGUNO)) {
				sClases=sClasesNoRelacionadas.Split(',');
													
				foreach(String sClase in sClases){						
					if(sClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))) {
						blClasePermite=false;
						break;
					}
				}
			} else {
				blClasePermite=false;
			}
		} else {
			sClasesSiRelacionadas=GetNombresClasesSiNavegacionFromTableFromPropertiesC(table);	
		
			if(!sClasesSiRelacionadas.Equals(strNINGUNO)) {			
				if(!sClasesSiRelacionadas.Equals(String.Empty)) {
					sClases=sClasesSiRelacionadas.Split(',');
						
					blClasePermite=false;
					
					foreach(String sClase in sClases){						
						if(sClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))) {
							blClasePermite=true;
							break;
						}
					}
				}
			} else {
				blClasePermite=false;
			}
		}
		
		return blClasePermite;
	}
		
	public bool GetPermitePorOcultoClaseRelacionadaC(TableSchema table,TableSchema tablaRelacionadaObjetivo) {
		String sClasesNoRelacionadas=String.Empty;
		String sClasesSiRelacionadas=String.Empty;
		String[] sClases;
		bool blClasePermite=true;
													
		sClasesNoRelacionadas=GetNombresClasesNoMostrarFromTableFromPropertiesC(table);
		
		if(!sClasesNoRelacionadas.Equals(String.Empty)) {
			if(!sClasesNoRelacionadas.Equals(strNINGUNO)) {
				sClases=sClasesNoRelacionadas.Split(',');
													
				foreach(String sClase in sClases){						
					if(sClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))) {
						blClasePermite=false;
						break;
					}
				}
			} else {
				blClasePermite=false;
			}
		} else {
			sClasesSiRelacionadas=GetNombresClasesSiMostrarFromTableFromPropertiesC(table);	
		
			if(!sClasesSiRelacionadas.Equals(strNINGUNO)) {			
				if(!sClasesSiRelacionadas.Equals(String.Empty)) {
					sClases=sClasesSiRelacionadas.Split(',');
						
					blClasePermite=false;
					
					foreach(String sClase in sClases){						
						if(sClase.Equals(GetNombreClaseC(tablaRelacionadaObjetivo.ToString()))) {
							blClasePermite=true;
							break;
						}
					}
				}
			} else {
				blClasePermite=false;
			}
		}
		
		return blClasePermite;
	}
	
	public ArrayList GetArrayListFromHashtableC(Hashtable tablasRelacionadas) {
			Hashtable tablasRelacionadasOrden = new Hashtable();
			ArrayList arrLisTtablasRelacionadasOrden=new ArrayList();
					
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
				arrLisTtablasRelacionadasOrden.Add(collectionInfo);
			}
			
			
		return arrLisTtablasRelacionadasOrden;
	}
		
	public bool TieneFkMultiple(CollectionInfo collectionInfo) {
		bool tiene=false;
		
		if(!blnNoStandardTableFromProperties) {
			if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
				TableKeySchema TableKey =collectionInfo.TableKey;
						
				if(TableKey.PrimaryKeyMemberColumns.Count>1) {
					tiene=true;
				}
			}
		}
		
		return tiene;
	}
	
	public int GetNumeroClasesRelacionadasFinalC(TableSchema table) {
		int iTotal=0;
		
		String sTablaClaseRelacionada=String.Empty;
		
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(table);				
		
		iTotal=tablasRelacionadasEncontradas.Count;
						
		//Trace.Write(iTotal);
		
		return iTotal;
	}
	
		public bool ExisteRelacion(ArrayList arrayListChildrenTables,String strSecondaryTableItem) {
			bool blnExiste=false;
			
			foreach(String strSecondaryTable in arrayListChildrenTables) {
				if(strSecondaryTable.Equals(strSecondaryTableItem)) {
					blnExiste=true;	
				}
			}
			
			return blnExiste;
		}
		
		public SchemaExplorer.TableSchemaCollection GetTablasRelacionadasDondeTablaEsForeignKeyC(SchemaExplorer.TableSchema table) 
		{
			SchemaExplorer.TableSchemaCollection tablasRelacionadas=new SchemaExplorer.TableSchemaCollection();
										 			
			for (int i = 0; i < table.Database.Tables.Count; i++)
			{ 	
				if(table.Database.Tables[i].Equals(table))
				{
					//continue;
				}
				
				
				foreach(ColumnSchema columnSchema in table.Database.Tables[i].Columns)
				{
					if(!columnSchema.IsForeignKeyMember)
					{
						continue;
					}
					
					if(GetNombreClaseRelacionadaFromColumn(columnSchema).Equals(table.Name))
					{
						tablasRelacionadas.Add(table.Database.Tables[i]);
						break;
					}
				}
			}
								
			return tablasRelacionadas; 
	}			
	
	public int GetNumeroTablasClasesRelacionadasC(TableSchema TablaBase) {
		System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,false);
			
		int iNumeroClasesRelacionadas=tablasRelacionadas.Count;
		
		return iNumeroClasesRelacionadas;
	}
	
	public String GetFuncionesTablasClasesRelacionadasC(TableSchema TablaBase) 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n\tpublic  void  set"+GetPrefijoRelacionC();
			
			String strEndFuncion="\r\n\t\t} catch(Exception e) {\r\n\t\t\t;\r\n\t\t}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,false);
			//Trace.WriteLine("Numero de Relaciones "+ tablasRelacionadas.Count); 
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				//NO FUNCIONA EN DESORDEN RELACIONES
				/*
				if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.PrimaryTable)) {
					//continue;
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				} else {
					strNombreAdicional="";
					arrayListRelaciones.Add(collectionInfo.PrimaryTable);
				}
				*/
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "("+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+" "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+") {\r\n\ttry {\r\n";
					strTablaClaseRelacionada+="\t\t\tthis."+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"="+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";";
				}
				else
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s("+""+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+">"+" "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s) {\r\n\t\ttry {\r\n";
					strTablaClaseRelacionada+="\t\t\tthis."+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s="+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s;";
			
				}
				
			strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n";
			}
								
			return strFuncion; 
		}
	
	public String GetFuncionesGetTablasClasesRelacionadasC(bool conRelacionesPersistencia,bool ConPersistenciaAnotaciones,TableSchema TablaBase) 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";//"public ";// void  getTR_";
			
			String strEndFuncion="\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,false);
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			TableKeySchema tableKeySchema;
			
			String strCommentRelacionesPersistencia="";
			String strTransient="";
			
			if(!conRelacionesPersistencia) {
				strCommentRelacionesPersistencia="//";	
				strTransient="@Transient";
			}
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{	
				tableKeySchema=collectionInfo.TableKey;
				//System.Windows.Forms.MessageBox.Show("1="+tableKeySchema.PrimaryKeyTable.Name);
				//System.Windows.Forms.MessageBox.Show("2="+tableKeySchema.ForeignKeyTable.Name);
				/*
				String strColumns="";
				foreach(MemberColumnSchema mcs in tableKeySchema.ForeignKeyMemberColumns) {
					strColumns+=mcs.Column.Name;
				}
				*/
				//System.Windows.Forms.MessageBox.Show("3="+strColumns);
				//System.Windows.Forms.MessageBox.Show(GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo));
				//System.Windows.Forms.MessageBox.Show(collectionInfo.TableKey.ToString());
				
				//System.Windows.Forms.MessageBox.Show(collectionInfo.SecondaryTable);
		
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				//NO FUNCIONA EN DESORDEN RELACIONES
				/*
				if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.PrimaryTable)) {
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					//continue;
				} else {
					strNombreAdicional="";
					arrayListRelaciones.Add(collectionInfo.PrimaryTable);
				}
				*/
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					
					
					strInitFuncion="";
					
					if(GetConPersistenciaTableFromProperties(TablaBase)&&GetConPersistenciaTableFromProperties(collectionInfo.SecondaryTableSchema) && ConPersistenciaAnotaciones){
						// NO ESTA FUNCIONAL ESTA RELACION
						strInitFuncion="\r\n\t"+strTransient;
						strInitFuncion+="\r\n\t"+strCommentRelacionesPersistencia+"@OneToOne(fetch = FetchType.LAZY,cascade={"+strJpaCascadeTypeDefault+"}, mappedBy = \""+GetNombreTablaRelacionMappedByClaseC(TablaBase)+"\")";//, mappedBy = \""+GetNombreTableFromProperties(TablaBase)+"\")";
						//strInitFuncion+="\r\n\t@Transient";
					}  else {
						strInitFuncion="";
					}
					
					if(GetConPersistenciaTableFromProperties(TablaBase)&&!GetConPersistenciaTableFromProperties(collectionInfo.SecondaryTableSchema) && ConPersistenciaAnotaciones){
						strInitFuncion+="\r\n\t@Transient";
					}
						
					strInitFuncion+="\r\n\tpublic ";	
					strInitFuncion+=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+" get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"() {";
					strTablaClaseRelacionada="\r\n\t\treturn this."+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";\r\n";
				}
				else
				{
					strInitFuncion="";
					
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
						if(GetConPersistenciaTableFromProperties(TablaBase)&&GetConPersistenciaTableFromProperties(collectionInfo.SecondaryTableSchema) && ConPersistenciaAnotaciones 
						   && !TieneFkMultiple(collectionInfo)){
							strInitFuncion="\r\n\t"+strTransient;
							strInitFuncion+="\r\n\t"+strCommentRelacionesPersistencia+"@OneToMany(fetch = FetchType.LAZY,cascade={"+strJpaCascadeTypeDefault+"}, mappedBy = \""+GetNombreTablaRelacionMappedByClaseC(TablaBase)+strNombreAdicional+ "\")";
						} else {
							
							if(TieneFkMultiple(collectionInfo)) {
								//Trace.WriteLine(collectionInfo.PkIdxName);
								strInitFuncion+="\r\n\t@Transient";
							} else {
								strInitFuncion="";
							}
						}
						
						
					} else {
						if(GetConPersistenciaTableFromProperties(TablaBase)&&GetConPersistenciaTableFromProperties(collectionInfo.SecondaryTableSchema) && ConPersistenciaAnotaciones){
							strInitFuncion="\r\n\t"+strTransient;
							strInitFuncion+="\r\n\t"+strCommentRelacionesPersistencia+"@ManyToMany(fetch = FetchType.LAZY,cascade={"+strJpaCascadeTypeDefault+"})";//, mappedBy = \""+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(TablaBase.ToString())+ "s\")";
							strInitFuncion+="\r\n\t"+strCommentRelacionesPersistencia+"@JoinTable(";
							strInitFuncion+="\r\n\t\t"+strCommentRelacionesPersistencia+"name="+GetNombreClaseC("dbo."+collectionInfo.JunctionTable)+"ConstantesFunciones.TABLENAME,schema = "+GetNombreClaseC("dbo."+collectionInfo.JunctionTable)+"ConstantesFunciones.SCHEMA,";//GetNombreTableFromProperties(collectionInfo.JunctionTableSchema)
							//strInitFuncion+="\r\n\t\tjoinColumns=@JoinColumn(name=\""+strIdDB+GetNombreTableFromProperties(TablaBase)+"\", referencedColumnName="+GetIdName(TablaBase)+"),";
							//strInitFuncion+="\r\n\t\tinverseJoinColumns=@JoinColumn(name=\""+strIdDB+GetNombreTableFromProperties(collectionInfo.SecondaryTableSchema)+"\", referencedColumnName="+GetIdName(collectionInfo.SecondaryTableSchema)+")";
							
							/*
							if(!blnNoStandardTableFromProperties) {	
								GetPersistenceTableManyToManyColumnsC(TablaBase,collectionInfo);
								strInitFuncion+="\r\n\t\tjoinColumns=@JoinColumn(name=ConstantesSql.ID+"+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.TABLENAME, referencedColumnName="+GetIdNameC(TablaBase)+"),";
								strInitFuncion+="\r\n\t\tinverseJoinColumns=@JoinColumn(name=ConstantesSql.ID+"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"ConstantesFunciones.TABLENAME, referencedColumnName="+GetIdNameC(collectionInfo.SecondaryTableSchema)+")";
							} else {
								//NO STANDARD
								strInitFuncion+=GetPersistenceTableManyToManyColumnsC(TablaBase,collectionInfo);
							}
							*/
							
							//PARA STANDARD Y NO STANDARD
							strInitFuncion+=strCommentRelacionesPersistencia+GetPersistenceTableManyToManyColumnsC(TablaBase,collectionInfo,strCommentRelacionesPersistencia);
							
							strInitFuncion+="\r\n\t\t"+strCommentRelacionesPersistencia+")";
							
							if(ExisteNombresClasesNoPersistenciaFromTableFromPropertiesC(TablaBase,collectionInfo.SecondaryTableSchema)) {
								strInitFuncion+="\r\n\t@Transient";
							}
						}
					}
					
					if(GetConPersistenciaTableFromProperties(TablaBase)&&!GetConPersistenciaTableFromProperties(collectionInfo.SecondaryTableSchema) && ConPersistenciaAnotaciones){
						strInitFuncion+="\r\n\t@Transient";
					}
					
					
					strInitFuncion+="\r\n\tpublic ";
					strInitFuncion+=""+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s() {";
					strTablaClaseRelacionada="\r\n\t\treturn this."+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+ "s;\r\n";
				}
				
			strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n";
			}
								
			return strFuncion; 
		}
		
	public TableSchemaCollection GetTablasForModuloC(DatabaseSchema SourceDatabase,String SourceModuloForGenerate,bool paraReportes) {
		return GetTablasForModuloC(SourceDatabase,SourceModuloForGenerate,paraReportes,false,TiposGeneracionGrupo.TODOS,TiposGeneracionRelaciones.NINGUNO);
	}
	
	public TableSchemaCollection GetTablasForModuloC(DatabaseSchema SourceDatabase,String SourceModuloForGenerate,bool paraReportes,bool paraProcesos,TiposGeneracionGrupo tipoGeneracionGrupo,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
			
		TableSchemaCollection tableSchemaCollectionForReporte=new TableSchemaCollection();
		String strReporteGrupoAux="";
		
		for (int i = 0; i < SourceDatabase.Tables.Count; i++) {
			strReporteGrupoAux=GetModuloPaqueteJavaFromTableFromPropertiesC(SourceDatabase.Tables[i]);
				
			if(SourceModuloForGenerate!="" && strReporteGrupoAux.Equals(SourceModuloForGenerate)) {
				if(!paraReportes && !paraProcesos) {					
					if(PermiteGenerarC(SourceDatabase.Tables[i],tipoGeneracionGrupo)) {
						tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);							
					}
					
					//AGREGA TABLAS RELACIONADAS
					if(!tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.NINGUNO)) {
						AddTablasRelacionadasC(SourceDatabase.Tables[i],tableSchemaCollectionForReporte,tiposGeneracionRelaciones);					
					}
								
				} else if(paraReportes && GetEsReporteFromPropertiesC(SourceDatabase.Tables[i])) {
					tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
				
				} else if(paraProcesos && GetEsProcesoFromPropertiesC(SourceDatabase.Tables[i])) {
					tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
				}
			}			
		}
		
		//Trace.WriteLine(tableSchemaCollectionForReporte.Count);
		
		return tableSchemaCollectionForReporte;
	}
	
	public TableSchemaCollection GetTablasForFuncionalidadC(DatabaseSchema SourceDatabase,String SourceFuncionalidadTablesForGenerate,bool paraReportes,bool paraProcesos,TiposGeneracionGrupo tipoGeneracionGrupo,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
			
		TableSchemaCollection tableSchemaCollectionForReporte=new TableSchemaCollection();
		String strReporteGrupoAux="";
		
		for (int i = 0; i < SourceDatabase.Tables.Count; i++) {
			//strReporteGrupoAux=GetModuloPaqueteJavaFromTableFromPropertiesC(SourceDatabase.Tables[i]);
			InicializarVariablesPorTabla(SourceDatabase.Tables[i]);
				
			if(SourceFuncionalidadTablesForGenerate!="" && CommonCode.strTipoTablaFuncionalidad.Equals(SourceFuncionalidadTablesForGenerate)) {
				if(!paraReportes && !paraProcesos) {					
					if(PermiteGenerarC(SourceDatabase.Tables[i],tipoGeneracionGrupo)) {
						tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);							
					}
					
					//AGREGA TABLAS RELACIONADAS					
					if(!tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.NINGUNO)) {
						AddTablasRelacionadasC(SourceDatabase.Tables[i],tableSchemaCollectionForReporte,tiposGeneracionRelaciones);					
					}
					
								
				} else if(paraReportes && GetEsReporteFromPropertiesC(SourceDatabase.Tables[i])) {
					tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
				
				} else if(paraProcesos && GetEsProcesoFromPropertiesC(SourceDatabase.Tables[i])) {
					tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
				}
			}			
		}
		
		//Trace.WriteLine(tableSchemaCollectionForReporte.Count);
		
		return tableSchemaCollectionForReporte;
	}	
	
	public TableSchemaCollection GetTablasMemoriaReportesC(DatabaseSchema SourceDatabase,String SourceTablesForGenerateMemoria,bool paraReportes) {
		return GetTablasMemoriaReportesC(SourceDatabase,SourceTablesForGenerateMemoria,paraReportes,false,TiposGeneracionGrupo.TODOS,TiposGeneracionRelaciones.NINGUNO);
	}
	
	public TableSchemaCollection GetTablasMemoriaReportesC(DatabaseSchema SourceDatabase,String SourceTablesForGenerateMemoria,bool paraReportes,bool paraProcesos,TiposGeneracionGrupo tipoGeneracionGrupo,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
			
		TableSchemaCollection tableSchemaCollectionForReporte=new TableSchemaCollection();
		String strReporteGrupoAux="";
		String[] arrTablasMemoria=null;
		int countTablasMemoria=0;
		bool existe=false;
				
		for (int i = 0; i < SourceDatabase.Tables.Count; i++) {							
			if(SourceTablesForGenerateMemoria!="") {
				existe=false;
				
				arrTablasMemoria=SourceTablesForGenerateMemoria.Split(',');
				
				if(arrTablasMemoria!=null && arrTablasMemoria.Length>0) {
					foreach(String strTablaMemoria in arrTablasMemoria) {
						if(SourceDatabase.Tables[i].Name.Equals(strTablaMemoria)) {
							existe=true;
							
							if(!paraReportes && !paraProcesos) {
								if(PermiteGenerarC(SourceDatabase.Tables[i],tipoGeneracionGrupo)) {
									tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);								
								}
								
								//AGREGA TABLAS RELACIONADAS
								if(!tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.NINGUNO)) {
									AddTablasRelacionadasC(SourceDatabase.Tables[i],tableSchemaCollectionForReporte,tiposGeneracionRelaciones);					
								}
								
							} else if(paraReportes && GetEsReporteFromPropertiesC(SourceDatabase.Tables[i])) {
								tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
							
							} else if(paraProcesos && GetEsProcesoFromPropertiesC(SourceDatabase.Tables[i])) {
								tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
							}
							
							break;
						}
					}	
					
					if(existe) {
						countTablasMemoria++;
					}
					
					if(countTablasMemoria.Equals(arrTablasMemoria.Length)) {
						break;	
					}
				}
			}			
		}
		
		//Trace.WriteLine(tableSchemaCollectionForReporte.Count);
		
		return tableSchemaCollectionForReporte;
	}
	
	public TableSchemaCollection GetTablasForEsquemaC(DatabaseSchema SourceDatabase,String SourceEsquemaForGenerate,bool paraReportes) {
		return GetTablasForEsquemaC(SourceDatabase,SourceEsquemaForGenerate,paraReportes,false,TiposGeneracionGrupo.TODOS,TiposGeneracionRelaciones.NINGUNO);
	}
	
	public TableSchemaCollection GetTablasForEsquemaC(DatabaseSchema SourceDatabase,String SourceEsquemaForGenerate,bool paraReportes,bool paraProcesos,TiposGeneracionGrupo tipoGeneracionGrupo,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
			
		TableSchemaCollection tableSchemaCollectionForReporte=new TableSchemaCollection();
		String strReporteGrupoAux="";
		
		for (int i = 0; i < SourceDatabase.Tables.Count; i++) {
			//Trace.WriteLine(SourceDatabase.Tables[i].Name+"-"+SourceEsquemaForGenerate+"-"+SourceDatabase.Tables[i].Owner);
				
			if(SourceEsquemaForGenerate!="" && SourceDatabase.Tables[i].Owner.Equals(SourceEsquemaForGenerate)) {
				//Trace.WriteLine(SourceDatabase.Tables[i].Name+"-"+SourceEsquemaForGenerate+"-"+SourceDatabase.Tables[i].Owner);
				if(!paraReportes && !paraProcesos) {					
					if(PermiteGenerarC(SourceDatabase.Tables[i],tipoGeneracionGrupo)) {
						tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);								
					}
					
					//AGREGA TABLAS RELACIONADAS
					if(!tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.NINGUNO)) {
						AddTablasRelacionadasC(SourceDatabase.Tables[i],tableSchemaCollectionForReporte,tiposGeneracionRelaciones);					
					}
				} else if(paraReportes && GetEsReporteFromPropertiesC(SourceDatabase.Tables[i])) {					
					tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
				
				} else if(paraProcesos && GetEsProcesoFromPropertiesC(SourceDatabase.Tables[i])) {					
					tableSchemaCollectionForReporte.Add(SourceDatabase.Tables[i]);
				}
			}
			
		}
		
		return tableSchemaCollectionForReporte;
	}
	
	public String GetListaNombresTablasC(TableSchemaCollection tableSchemaCollection) {
		String strListaNombresTablas="";
		bool esPrimero=true;
		
		foreach(TableSchema tableSchema in tableSchemaCollection) {
			if(!esPrimero) {
				strListaNombresTablas+=",";
			}
			
			strListaNombresTablas+=tableSchema.Name;			
			
			if(esPrimero) {
				esPrimero=false;	
			}
		}
		
		return strListaNombresTablas;
	}
	
	public TableSchemaCollection GetTablasNormalesReportesC(TableSchemaCollection tableSchemaCollection,bool paraReportes) {
		return GetTablasNormalesReportesC(tableSchemaCollection,paraReportes,false,TiposGeneracionGrupo.TODOS,TiposGeneracionRelaciones.NINGUNO);
	}
	
	public TableSchemaCollection GetTablasNormalesReportesC(TableSchemaCollection tableSchemaCollection,bool paraReportes,bool paraProcesos,TiposGeneracionGrupo tipoGeneracionGrupo,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
			
		TableSchemaCollection tableSchemaCollectionForReporte=new TableSchemaCollection();
	
		foreach (TableSchema tableSchema in tableSchemaCollection) {
			if(!paraReportes && !paraProcesos) {
				if(PermiteGenerarC(tableSchema,tipoGeneracionGrupo)) {
					tableSchemaCollectionForReporte.Add(tableSchema);
				}
				
				//AGREGA TABLAS RELACIONADAS
				if(!tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.NINGUNO)) {
					AddTablasRelacionadasC(tableSchema,tableSchemaCollectionForReporte,tiposGeneracionRelaciones);					
				}
				
			} else if(paraReportes && GetEsReporteFromPropertiesC(tableSchema)) {
				tableSchemaCollectionForReporte.Add(tableSchema);
				
			} else if(paraProcesos && GetEsProcesoFromPropertiesC(tableSchema)) {
				tableSchemaCollectionForReporte.Add(tableSchema);
				
			}
		}
		
		return tableSchemaCollectionForReporte;
	}
	
	public bool PermiteGenerarC(TableSchema tableSchema,TiposGeneracionGrupo tipoGeneracionGrupo) {
		bool permiteGenerar=false;
		TableSchema tableSchemaFk=null;
			
		if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.TODOS)) {
			permiteGenerar=true;
				
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.GUARDAR_RELACIONES) 
			&& GetEsGuardarRelacionesFromPropertiesC(tableSchema) 
			&& !GetEsTablaModuloFromPropertiesC(tableSchema)) {
			
			permiteGenerar=true;
		
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.GUARDAR_RELACIONES_RELACIONADOS) 
			//&& GetEsGuardarRelacionesFromPropertiesC(tableSchema) 
			&& !GetEsTablaModuloFromPropertiesC(tableSchema)) {
						
			foreach(ColumnSchema columnSchema in tableSchema.Columns) {
				if(columnSchema.IsForeignKeyMember) {
					tableSchemaFk=GetTableSchemaFromColumnForeignKey(columnSchema);
					
					if(GetEsGuardarRelacionesFromPropertiesC(tableSchemaFk) 
						&& !GetEsTablaModuloFromPropertiesC(tableSchemaFk)) {
						
						permiteGenerar=true;
						
						//Trace.WriteLine("Tabla Padre= "+tableSchemaFk.Name + ", Tabla Hijo= " + tableSchema.Name);
						
						break; 
					}
				}
			}
			
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.CATALOGOS_SIMPLES) 
			&& EsTablaCatalogoSimpleC(tableSchema)
			//&& !GetConAdditionalTableFromPropertiesC(tableSchema) 
			//&& !GetConMaximoCodigoTableFromPropertiesC(tableSchema)
			//&& !GetEsTablaModuloFromPropertiesC(tableSchema)
			) {
			
			permiteGenerar=true;
		
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.RELACIONES_SIMPLES) 
			&& !GetEsGuardarRelacionesFromPropertiesC(tableSchema) && TieneClasesRelacionadasFinalC(tableSchema)
			&& !GetEsTablaModuloFromPropertiesC(tableSchema)) {
			
			permiteGenerar=true;
			
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.TABLAS_MODULO) 
			&& GetEsTablaModuloFromPropertiesC(tableSchema)) {
			
			permiteGenerar=true;
			
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.TABLAS_AUTOREFERENCIADAS) 
			&& GetEsAutoReferenciadaTablaC(tableSchema)) {
			
			permiteGenerar=true;
			
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.TABLAS_SIN_IDENTITY) 
			&& !TieneIdentityColumnC(tableSchema)) {
			
			permiteGenerar=true;
			
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.TABLAS_UNO_A_UNO) 
			&& EsTablaUnoAUnoFk(tableSchema)) {
			
			permiteGenerar=true;
			
		} else if(tipoGeneracionGrupo.Equals(TiposGeneracionGrupo.VERSION0_TODO_WEB) 
			&& GetConMaximoCodigoWebTableFromPropertiesC(tableSchema)) {
			
			permiteGenerar=true;
		}
				
		return permiteGenerar;
	}
	
	public bool EsTablaCatalogoSimpleC(TableSchema tableSchema) {
		bool esTablaCatalogoSimple=false;
		
		if(!GetConAdditionalTableFromPropertiesC(tableSchema) 
		&& !GetConMaximoCodigoTableFromPropertiesC(tableSchema) 
		&& !GetEsTablaModuloFromPropertiesC(tableSchema)) 
		{			
			esTablaCatalogoSimple=true;
		
		}
		
		return esTablaCatalogoSimple;
	}
	
	public void AddTablasRelacionadasC(TableSchema tableSchema,TableSchemaCollection tableSchemaCollectionForReporte,TiposGeneracionRelaciones tiposGeneracionRelaciones) {
		bool conTodos=false;
					
		if(tiposGeneracionRelaciones.Equals(TiposGeneracionRelaciones.TODOS)) {
			conTodos=true;
		}
					
		ArrayList tablasRelacionadasEncontradas=GetTablasRelacionadasFinal(tableSchema,conTodos);
					
		foreach(TableSchema tableSchemaAux in tablasRelacionadasEncontradas) {			
			if(!tableSchemaAux.Name.Equals(tableSchema.Name)) {
				tableSchemaCollectionForReporte.Add(tableSchemaAux);
			}
		}
	}
	
	public String GetEsquemasImportClasesRelacionadas(String strEsquemaIni,String strEsquemaFin) {
		String strImportRel="";
		
		if(arrayListEsquemasRel!=null) {
			foreach(String strEsquema in arrayListEsquemasRel) {
				//Trace.WriteLine(strEsquema);
				//strImportRel+="\r\n"+strEsquemaIni+"."+strEsquema.ToLower()+"."+strEsquemaFin+"";
				strImportRel+=GetEsquemasImportClasesRelacionadas("",strEsquemaIni,strEsquema,strEsquemaFin);
			}
		}
		
		return strImportRel;
	}
	
	public String GetEsquemasImportClasesRelacionadas(String strEsquemaIni,String strEsquemaFin,bool ConEjb) {
		String strImportRel="";
		String strComment="";
		
		if(ConEjb){
			strComment="//";
		}
		
		if(arrayListEsquemasRel!=null) {
			foreach(String strEsquema in arrayListEsquemasRel) {			
				//strImportRel+="\r\n"+strComment+strEsquemaIni+"."+strEsquema.ToLower()+"."+strEsquemaFin+"";
				strImportRel+=GetEsquemasImportClasesRelacionadas(strComment,strEsquemaIni,strEsquema,strEsquemaFin);
			}
		}
		
		return strImportRel;
	}
	
	public String GetEsquemasImportClasesRelacionadas(String strComment,String strEsquemaIni,String strEsquema,String strEsquemaFin) {
		String strReturn="";
		
		strReturn="\r\n"+strComment+strEsquemaIni+"."+strEsquema.ToLower()+"."+strEsquemaFin+"";
		
		return strReturn;
	}
	
	public void GetEsquemasClasesRelacionadas(TableSchema TablaBase,ArrayList arrayListEsquemas,ref int intNumeroMaximoNiveles) {//ArrayList
			//Trace.WriteLine("_____________________________");
		
			String strTablaClaseRelacionada=string.Empty;
			TableSchema tableSchemaFK=null;
			TableSchema tableSchemaRel=null;
			
			Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			//ArrayList arrayListEsquemas=new ArrayList();
			
			//FOREIGN KEY
			//blnNoStandardTableFromProperties=true;
			if(!blnNoStandardTableFromProperties) {										
				foreach(ColumnSchema columnSchema in TablaBase.Columns)	{						
					if(columnSchema.IsForeignKeyMember)	{
						//Trace.WriteLine(columnSchema.Name);
						
						//strTablaClaseRelacionada+="\r\n\tpublic "+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+" "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(columnSchema))+";";
						tableSchemaFK=GetTableSchemaFromColumnForeignKey(columnSchema);
						
						//Trace.WriteLine(tableSchemaFK.Owner);
						
						if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))	{
						//if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),tableSchemaFK))	{
							continue;
						}
						
						//Trace.WriteLine(tableSchemaFK.Owner);						
						
						AgregarEsquema(arrayListEsquemas,tableSchemaFK.Owner,TablaBase);
					}
				}
			} else {
				ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
								
				//foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {
					//strTablaClaseRelacionada+="\r\n\tpublic "+GetNombreClaseC(tableSchemaForeignKey.ToString())+" "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC(tableSchemaForeignKey.ToString())+";";					
				//}
			}
				
			
			
			//RELACIONADAS
			//String strTablaClaseRelacionada=string.Empty;
			/*Hashtable*/ tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			ArrayList arrayListRelaciones=new ArrayList();
			Hashtable tablasRelacionadasHijos=new Hashtable();
			String strNombreAdicional="";
			
			
			//Trace.WriteLine("TABLAS-RELACIONADAS");
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);					
				//NO FUNCIONA EN DESORDEN DE RELACIONES
								
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
					//strTablaClaseRelacionada+="\r\n\tpublic "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+";";
					tableSchemaRel=collectionInfo.SecondaryTableSchema;
					AgregarEsquema(arrayListEsquemas,tableSchemaRel.Owner,TablaBase);
					
					if(!TablaBase.Name.Equals(tableSchemaRel.Name)) {
						tablasRelacionadasHijos=GetTablasRelacionadas(tableSchemaRel);
						
						if(tablasRelacionadasHijos.Count>0) {
							if(intNumeroMaximoNiveles<=intNumeroMaximoNivelesGlobal) {
								intNumeroMaximoNiveles++;
								//Trace.WriteLine(TablaBase.Name+"->"+tableSchemaRel.Name);
								GetEsquemasClasesRelacionadas(tableSchemaRel,arrayListEsquemas,ref intNumeroMaximoNiveles);
							}
						}
					}
				} else {
					//strTablaClaseRelacionada+="\r\n\tpublic "+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+ "s;";
					tableSchemaRel=collectionInfo.SecondaryTableSchema;
					AgregarEsquema(arrayListEsquemas,tableSchemaRel.Owner,TablaBase);
					
					if(!TablaBase.Name.Equals(tableSchemaRel.Name)) {
						tablasRelacionadasHijos=GetTablasRelacionadas(tableSchemaRel);
						
						if(tablasRelacionadasHijos.Count>0) {
							if(intNumeroMaximoNiveles<=intNumeroMaximoNivelesGlobal) {
								intNumeroMaximoNiveles++;
								//Trace.WriteLine(TablaBase.Name+"->"+tableSchemaRel.Name);
								GetEsquemasClasesRelacionadas(tableSchemaRel,arrayListEsquemas,ref intNumeroMaximoNiveles);
							}
						}
					}
				}
				
				//Trace.WriteLine(tableSchemaRel.Owner);
				//Trace.WriteLine(TablaBase.Name+"-"+tableSchemaRel.Name+"->"+intNumeroMaximoNiveles);
			}			
			
			String strEsquemasExtra=GetEsquemasExtraTableFromPropertiesC(TablaBase);
			String [] arrEsquemasExtra = null;
			
			if(!strEsquemasExtra.Equals("")) {
				arrEsquemasExtra = strEsquemasExtra.Split(',');
				
				foreach(String strEsquemaExtra in arrEsquemasExtra) {
					AgregarEsquema(arrayListEsquemas,strEsquemaExtra.ToLower(),TablaBase);
				}
			}
		//return arrayListEsquemas; 
	}
		
	public static void AgregarEsquema(ArrayList arrayListEsquemas,String strEsquemaNuevo,TableSchema TablaBase) {
		bool blnExiste=false;
		
		foreach(String strEsquema in arrayListEsquemas) {
			//Trace.WriteLine(strEsquema+"="+strEsquemaNuevo);
			
			if(strEsquema.Equals(strEsquemaNuevo)) {
				blnExiste=true;
				
				break;
			}
		}
		
		if(!blnExiste) {
			if((!blnEsReporte && !strEsquemaNuevo.Equals(TablaBase.Owner)) || blnEsReporte) {
				//Trace.WriteLine(strEsquemaNuevo);
				//Trace.WriteLine(TablaBase.Name);
				arrayListEsquemas.Add(strEsquemaNuevo);
			}
		}
	}
	
	public bool ExisteTablaEnTablasRelacionadasC(SchemaExplorer.TableSchema table,String tabla,ColumnSchema columnSchema) {
		return ExisteTablaEnTablasRelacionadasC(table,tabla,columnSchema,null);
	}
	
	public bool ExisteTablaEnTablasRelacionadasC(SchemaExplorer.TableSchema table,String tabla,TableSchema tableSchema) {
		return ExisteTablaEnTablasRelacionadasC(table,tabla,null,tableSchema);
	}
	
	public bool ExisteTablaEnTablasRelacionadasC(SchemaExplorer.TableSchema table,String tabla,ColumnSchema columnSchema,TableSchema tableSchema) {
		bool existe= false;
			
		SchemaExplorer.TableSchemaCollection tablasRelacionadas=new SchemaExplorer.TableSchemaCollection();
		Hashtable tablasRelacionadasFinales=new Hashtable();
		
		
		/*
		for (int i = 0; i < table.Database.Tables.Count; i++) { 	
         	if(table.Database.Tables[i].Equals(table)) {
				continue;
			}
			
			tablasRelacionadas.Add(table.Database.Tables[i]);
		}
		*/
		
		bool conTodasRelaciones=true;
				
		tablasRelacionadasFinales=GetTablasRelacionadas(table,conTodasRelaciones);
		
		//ANTES
		//tablasRelacionadasFinales= GetChildrenCollections(table, tablasRelacionadas); 
		
		
		
			
		foreach(CollectionInfo collectionInfo in tablasRelacionadasFinales.Values) {
			//BYDAN-RECURSIVO
			if(collectionInfo.SecondaryTable.Equals(tabla)&&!collectionInfo.SecondaryTable.Equals(table.Name))	{
				existe= true;
				//Trace.WriteLine(columnSchema.Name);
			}
		}
		
		
		
		//CUANDO ES FK MULTIPLE
		//Trace.WriteLine(columnSchema.Name+"-"+GetNombreClaseRelacionadaFromColumn(columnSchema));
		
		String sNombreClaseRelacionada="XXX";
		//String sNombreTablaRelacionadaFromColumn=columnSchema.Name.Replace(strID,"");
		
		
		if(columnSchema!=null) {
			sNombreClaseRelacionada=GetNombreClaseRelacionadaFromColumn(columnSchema);
		} else if(tableSchema!=null) {
			sNombreClaseRelacionada=GetNombreClaseC(tableSchema.ToString());
		}
				
		/*		
		if(columnSchema!=null) {
			//NO TOMAR EN CUENTA SI ES RELACION UNO A UNO
			//if(!columnSchema.IsPrimaryKeyMember) { 
			if(columnSchema.IsPrimaryKeyMember) { 
				if(!columnSchema.Name.Contains(sNombreClaseRelacionada)) {
					existe= true;
					//tablaTrace.WriteLine(tabla);
					//Trace.WriteLine(sNombreClaseRelacionada);
				}
			}
		}
		*/
		
		return existe;
	}
		
    public static string GetNombreClaseC(string strTablaBase) {
		//strTablaBase=strTablaBase.Replace("dbo.",string.Empty);
		string [] strTabla = strTablaBase.Split('.');
		string strNombreClase=string.Empty;
		
		strNombreClase=strTabla[1];		
		strNombreClase=strNombreClase.Replace("\"","");		
		return strNombreClase;
	}
	
	public static string GetNombreClaseParametroC(TableSchema TablaBase) {
		string strNombreClase=string.Empty;
		
		string strTablaBase=TablaBase.ToString();
		
		if(!blnEsReporte){
			strNombreClase=GetNombreClaseC(strTablaBase);
		} else {
			if(blnConReportesPorModulo) {
				strNombreClase=TablaBase.Owner;
			} else {
				strNombreClase=GetNombreClaseC(strTablaBase);
			}
		}
		
		return strNombreClase;
	}
	
	public static string GetNombreClaseObjetoC(string strTablaBase)
	{
	//strTablaBase=strTablaBase.Replace("dbo.",string.Empty);
	string [] strTabla = strTablaBase.Split('.');
	string strNombreClase=string.Empty;
	
	strNombreClase=strTabla[1].Substring(0, 1).ToLower()+strTabla[1].Substring(1, strTabla[1].Length-1).ToLower();		
	strNombreClase=strNombreClase.Replace("\"","");		
	return strNombreClase;
	}
	
	public static string GetPrefijoTablaC()
	{
	string strPrefijoTabla="";//strField+"_";
	return strPrefijoTabla;
	}
	
	public static string GetPrefijoRelacionC()
	{
	string strPrefijoRelacion="";//"Relationship"+"_";
	return strPrefijoRelacion;
	}
	
	public static string GetPrefijoTipoC(ColumnSchema column)
	{
		string strPrefijoTipo = column.NativeType.ToString().Substring(0, 3).ToLower();
	
		if(GetTipoColumnaFromColumn(column)!="")
		{
			strPrefijoTipo =GetTipoColumnaFromColumn(column).Substring(0, 3).ToLower();
		}
	//if(column.Name.Equals("Codigo")) {
	//System.Windows.Forms.MessageBox.Show(column.Table.Name);
	//System.Windows.Forms.MessageBox.Show(column.NativeType.ToString());
	//}
	switch (strPrefijoTipo)
	{
		
		case "big":
		{
			strPrefijoTipo="l" ;
			break;
		}
		case "int":
		{
			strPrefijoTipo="i" ;
			break;
		}
		case "bit":
		{
			strPrefijoTipo="is" ;
			break;
		}
		case "dec":
		{
			strPrefijoTipo="d" ;
			break;
		}
		case "nva":
		{
			strPrefijoTipo="s" ;
			break;
		}
		case "var":
		{
			strPrefijoTipo="s" ;
			break;
		}
		case "cha":
		{
			strPrefijoTipo="cha" ;
			break;
		}
		case "dat":
		{
			strPrefijoTipo="s" ;
			break;
		}
		case "tim":
		{
			if(column.Name==strVersionRow)
			{
				strPrefijoTipo=  "s";
			}
			
			break;
		}
		
		
	}
	strPrefijoTipo="";
	return strPrefijoTipo;
	}
	
	public static string GetPrefijoTipoToGetSetC(ColumnSchema column)
	{
		string strPrefijoTipo =column.NativeType.ToString().Substring(0, 1).ToUpper()+ column.NativeType.ToString().Substring(1, 2).ToLower();
	
		if(GetTipoColumnaFromColumn(column)!="")
		{
			strPrefijoTipo =GetTipoColumnaFromColumn(column).Substring(0, 1).ToUpper()+GetTipoColumnaFromColumn(column).Substring(1, 2).ToLower();
		}
	
	switch (strPrefijoTipo)
	{
		case "Nva":
		{
			strPrefijoTipo="s" ;
			break;
		}
		case "Var":
		{
			strPrefijoTipo="s" ;
			break;
		}
		case "Dat":
		{
			strPrefijoTipo="s" ;
			break;
		}
		case "Tim":
		{
			if(column.Name==strVersionRow)
			{
				strPrefijoTipo=  "s";
			}
			
			break;
		}
		case "Cha":
		{
			strPrefijoTipo="cha" ;
			break;
		}
		case "Big":
		{
			strPrefijoTipo="l" ;
			break;
		}
		case "Int":
		{
			strPrefijoTipo="i" ;
			break;
		}
		case "Bit":
		{
			strPrefijoTipo="is" ;
			break;
		}
		case "Dec":
		{
			strPrefijoTipo="d" ;
			break;
		}		
	}
	return strPrefijoTipo;
	}
	
	public string GetForeignKeysMemberColumnaFuncionDescripcionC(TableSchema TablaBase,String tablaBase)
	{
		string strNombre="";
		
		if(!blnNoStandardTableFromProperties) {	
			for (int i = 0; i < TablaBase.Columns.Count; i++){ 
				strNombre+=GetForeignKeyMemberColumnaFuncionDescripcionC(TablaBase.Columns[i]);
			}
		} else {
			ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			string strInitFuncion="\r\n\tpublic static String get"+GetPrefijoRelacionC();
			string strColumnasDescripcion="";
			//System.Windows.Forms.MessageBox.Show("a");
			foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {				
				if(TablaBase.Name.Equals(tableSchemaForeignKey.Name)) {
					continue;
				}
				
				strNombre+=strInitFuncion+ GetNombreClaseC(tableSchemaForeignKey.ToString())+"Descripcion("+GetNombreClaseC(tableSchemaForeignKey.ToString())+" "+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString()) +") {\r\n";
				strNombre+="\t\tString sDescripcion=Constantes.SCAMPONONE;\r\n\r\n";
				strNombre+="\t\tif("+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString()) +"!=null/*&&"+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString()) +".get"+strIdGetSet+"()>0*/) {\r\n";
				
				//OPCION 1
				/*
				MemberColumnSchemaCollection memberColumnSchemaCollectionFK=GetMemberColumnSchemaForeignKeysC(TablaBase,tableSchemaForeignKey);
				MemberColumnSchemaCollectionMe memberColumnSchemaCollectionFKMe=GetMemberColumnSchemaForeignKeysMeC(TablaBase,tableSchemaForeignKey);
				*/
				
				//OPCION 2
				ColumnSchemaCollection columnSchemaCollectionPK=GetColumnsPKC(tableSchemaForeignKey);
				
				//System.Windows.Forms.MessageBox.Show(tableSchemaForeignKey.Name);
				//OPCION 1
				
				//strColumnasDescripcion=GetColumnsForeignKeysAdditionalDescripcionC(tableSchemaForeignKey,memberColumnSchemaCollectionFK);
				
				//OPCION 2
				//strColumnasDescripcion=GetColumnsForeignKeysAdditionalDescripcionC(tableSchemaForeignKey,columnSchemaCollectionPK);
			
				//TOMA DIRECTAMENTE DE CONSTANTES FUNCIONES FK
				strColumnasDescripcion="\t\t\tsDescripcion="+GetNombreClaseC(tableSchemaForeignKey.ToString())+"ConstantesFunciones.get"+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Descripcion("+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString())+");";
				
				//strNombre+="\t\t\tsDescripcion="+GetNombreClaseObjetoC(tableSchemaForeignKey.ToString()) +"."+GetXmlColumnaFuncionDescripcionFromPropertiesC(column)+";";
				strNombre+=strColumnasDescripcion;
				strNombre+="\r\n\t\t}\r\n\r\n";
				strNombre+="\t\treturn sDescripcion;\r\n\t}";									
			}
		}
		
	return strNombre;
	}
	
	public string GetForeignKeysColumnListaValorCodigoC(TableSchema TablaBase)
	{
		string strNombre="";
		
		if(!blnNoStandardTableFromProperties) {	
			for (int i = 0; i < TablaBase.Columns.Count; i++){ 
				if(TablaBase.Columns[i].IsForeignKeyMember) {			
					if(VerificarColumnaCatalogoGeneralC(TablaBase.Columns[i])) {
						strNombre+="\r\n\tpublic static String S"+TablaBase.Columns[i].Name.ToUpper()+"CODIGO=\""+GetKeyListaColumnFromPropertiesC(TablaBase.Columns[i])+"\";";	
					}
				}
			}
		} else {
			ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
			//string strInitFuncion="\r\n\tpublic static String get"+GetPrefijoRelacionC();
			//string strColumnasDescripcion="";
			//System.Windows.Forms.MessageBox.Show("a");
			int cont=0;
			foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {				
				if(VerificarTablaValorCatalogoGeneralC(tableSchemaForeignKey)) {
					cont++;
					strNombre+="\t\tpublic static String S"+cont.ToString()+"CODIGO=\"\";\r\n\r\n";	
				}
			}
		}
		
	return strNombre;
	}
	
	public string GetForeignKeyMemberColumnaFuncionDescripcionC(ColumnSchema column)
	{
		string strNombre="";
		string strInitFuncion="\r\n\r\n\tpublic static String get"+GetPrefijoRelacionC();
				
			
		if(column.IsForeignKeyMember) {			
			TableSchema tableSchema=GetNombreTablaRelacionadaFromColumn(column);
			
			//Trace.WriteLine("Tabla="+tableSchema.Name+",Columna="+column.Name);
			
			if(GetNombreClaseC(column.Table.ToString()).Equals(GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column)))) {
				return "";	
			}
			
			strNombre+=strInitFuncion+ GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"Descripcion("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+" "+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(column)) +") {\r\n";
			strNombre+="\t\tString sDescripcion=Constantes.SCAMPONONE;\r\n\r\n";
			strNombre+="\t\tif("+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(column)) +"!=null/*&&"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(column)) +".get"+strIdGetSet+"()>0*/) {\r\n";
			
			//strNombre+="\t\t\tsDescripcion="+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(column)) +"."+GetXmlColumnaFuncionDescripcionFromPropertiesC(column)+";";
			//DIRECTO DESDE CONSTANTES FUNCIONES
			strNombre+="\t\t\tsDescripcion="+GetNombreClaseC(tableSchema.ToString())+"ConstantesFunciones.get"+GetNombreClaseC(tableSchema.ToString())+"Descripcion("+GetNombreClaseObjetoC(tableSchema.ToString())+");";
			
			strNombre+="\r\n\t\t}\r\n\r\n";
			strNombre+="\t\treturn sDescripcion;\r\n\t}";	
			
			
		}
		//System.Windows.Forms.MessageBox.Show(strNombre);
		
	return strNombre;
	}
	
	public  String GetXmlColumnaFuncionDescripcionFromPropertiesC(ColumnSchema column)
	{
	
	TableSchema tablaRelacionada=column.Table;//GetNombreTablaRelacionadaFromColumn(column);
	
	String strNombreTabla=GetNombreClaseRelacionadaFromColumn(column);
	String strColumnatoString="";
	
	foreach(TableSchema tableForeignKey in column.Database.Tables)
	{
		if(tableForeignKey.Name.Equals(strNombreTabla))
		{
			tablaRelacionada=tableForeignKey;
		}
	}
	
	string strPrefijoTabla="";
	string strPrefijoTipo =""; 
	string strNombre = "";
	
	String strColumnaDetalle="get"+strIdGetSet+"()"+GetTipoColumnaToString(column);
	String[] descripciones;
	String[] tipo;
	
	foreach(ColumnSchema columnSchema in tablaRelacionada.Columns)
	{
		if(columnSchema.Name!=strId)
		{
		
			foreach(ExtendedProperty extendedProperty in columnSchema.ExtendedProperties)
			{
				if(extendedProperty.Name=="CS_Description")
				{
					descripciones=((String)extendedProperty.Value).Split('|');
							
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0].Equals("WEBCOMBO"))
							{
								//if(tipo[1]=="true")
								//{
									strPrefijoTabla=GetPrefijoTablaC();
									strPrefijoTipo = GetPrefijoTipoC(columnSchema);
									//System.Windows.Forms.MessageBox.Show(columnSchema.Name);
									//System.Windows.Forms.MessageBox.Show(strPrefijoTipo);
									strNombre = GetNombreColumnaClaseC(columnSchema);	
									
									strColumnaDetalle="get"+strPrefijoTabla+strPrefijoTipo+strNombre+"()"+GetTipoColumnaToString(columnSchema);
								//}
								
								break;
							}
						}
				}
			
			}
					
		}
	}
		
	ColumnSchema columnSchemaCombo=GetColumnDescripcionComboComboC(tablaRelacionada);
			
	if(columnSchemaCombo!=null) {
		strColumnatoString="";
				
		if(!EsVarCharColumn(columnSchemaCombo) && !EsCharColumn(columnSchemaCombo)) {
			strColumnatoString=".toString()";
		}
				
		strColumnaDetalle=/*GetNombreClaseObjetoC(column.Table.ToString())+"."*/"get"+GetPrefijoTipoC(columnSchemaCombo)+GetNombreColumnaClaseC(columnSchemaCombo)+"()"+strColumnatoString+";";
	}
			
	return strColumnaDetalle;
	}
	
	public string GetXmlColumnaC(ColumnSchema column,String tablaBase,bool blnEsParaCompuesto)
	{
	string strNombre="\r\n";
	string strGetColumn="";
	string strPrefijoTabla="";
	string strPrefijoTipo="";
	string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+GetNombreCompletoColumnaClaseC(column)+"()"+GetTipoColumnaToString(column);
	
	if(column.DataType==DbType.Binary&&column.Name!=strVersionRow)
	{
		return "";
	}
	
	if(column.Name==strId)
	{
	  strNombre="\txml.append(\"<item code=\\\"\"+"+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+"+\"\\\">\");\r\n\r\n";
	}

	
	if(!blnEsParaCompuesto)
	{
		strNombre+= "\t\t\t\txml.append(\"<";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
		strNombre+=">\");\r\n";
		
		strNombre+="\t\t\t\txml.append("+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+");\r\n";
		
		strNombre+="\t\t\t\txml.append(\"</";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
		strNombre+=">\");";
	}
	else
	{
		strNombre+= "\t\t\t\txml.append(\"<";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
		strNombre+=">\");\r\n";
		
		if(column.Name==strId)
		{
			strNombre+="\r\n\t\t\t\tif("+GetNombreClaseObjetoC(tablaBase)+".get"+strIdGetSet+"()!=0&&"+GetNombreClaseObjetoC(tablaBase)+".get"+strIdGetSet+"()!=null)\r\n\t\t\t\t{\r\n";
			strNombre+="\t\t\t\t\txml.append("+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+");\r\n";		
			
			strNombre+="\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\txml.append("+strId+"Temporal.toString());\r\n\t\t\t\t\t"+strId+"Temporal--;\r\n\t\t\t\t}\r\n\r\n";
			
		}
		else
		{
			strNombre+="\t\t\t\txml.append("+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+");\r\n";
		}
		
		strNombre+="\t\t\t\txml.append(\"</";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
		strNombre+=">\");";
	}
	
	if(column.IsForeignKeyMember)
	{
		//SI SE NECESITARA PARA NO ESTANDAR FALTARIA Y LOS CAMBIOS NO SERIAN TAN DIRECTOS
		if(!blnNoStandardTableFromProperties) {
			strNombre+= "\r\n\t\t\t\txml.append(\"<";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=">\");\r\n";
			
			strNombre+="\t\t\t\txml.append("+GetNombreClaseC(tablaBase)+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"Descripcion("+GetNombreClaseObjetoC(tablaBase) +".get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"()));\r\n";
			
			strNombre+="\t\t\t\txml.append(\"</";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=">\");\r\n";
		}
	}
		
	return strNombre;
	}
	
	
	public string GetXmlColumnaCompuestoC(ColumnSchema column,String tablaBase)
	{
	string strNombre="\r\n";
	string strGetColumn="";
	string strPrefijoTabla="";
	string strPrefijoTipo="";
	string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+GetNombreCompletoColumnaClaseC(column)+"()"+GetTipoColumnaToString(column);
	
	if(column.DataType==DbType.Binary&&column.Name!=strVersionRow)
	{
		return "";
	}
	
	if(column.Name==strId)
	{
	  ;//strNombre="\txml.append(\"<item code=\\\"\"+"+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+"+\"\\\">\\r\n\");\r\n\r\n";
	}


	strNombre+= "\t\t\t\txml.append(\"<";
	strNombre+=GetNombreClaseObjetoC(tablaBase)+ column.Name.Substring(0, column.Name.Length).ToLower();
	strNombre+=">\");\r\n";
	
	strNombre+="\t\t\t\txml.append("+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+");\r\n";
	
	strNombre+="\t\t\t\txml.append(\"</";
	strNombre+=GetNombreClaseObjetoC(tablaBase)+column.Name.Substring(0, column.Name.Length).ToLower();
	strNombre+=">\");";
	
	if(column.IsForeignKeyMember)
	{
		strNombre+= "\r\n\t\t\t\txml.append(\"<";
		strNombre+=GetNombreClaseObjetoC(tablaBase)+column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";
		strNombre+=">\");\r\n";
		
		strNombre+="\t\t\t\txml.append("+GetNombreClaseC(tablaBase)+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"Descripcion("+GetNombreClaseObjetoC(tablaBase) +".get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"()));\r\n";
		
		strNombre+="\t\t\t\txml.append(\"</";
		strNombre+=GetNombreClaseObjetoC(tablaBase)+column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";
		strNombre+=">\");\r\n";
		
		return strNombre;
	}
		
	return strNombre;
	}
	
	
		public string GetXmlColumnaAdditionalC(ColumnSchema column,String tablaBase)
	{
	string strNombre="\r\n";
	string strGetColumn="";
	string strPrefijoTabla="";
	string strPrefijoTipo="";
	string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+GetNombreCompletoColumnaClaseC(column)+"()"+GetTipoColumnaToString(column);
	
	if(column.DataType==DbType.Binary&&column.Name!=strVersionRow)
	{
		return "";
	}
	
	if(column.Name==strId)
	{
	  strNombre="\txml.append(\"<item code=\\\"\"+"+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+"+\"\\\">\\r\n\");\r\n\r\n";
	}


	strNombre+= "\t\t\t\txml.append(\"<";
	strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
	strNombre+=">\");\r\n";
	
	strNombre+="\t\t\t\txml.append("+GetNombreClaseObjetoC(tablaBase)+"A."+strGetColumn+");\r\n";
	
	strNombre+="\t\t\t\txml.append(\"</";
	strNombre+= column.Name.Substring(0, column.Name.Length).ToLower();
	strNombre+=">\\r\n\");";
	
	if(column.IsForeignKeyMember)
	{
		strNombre+= "\r\n\t\t\txml.append(\"<";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";
		strNombre+=">\");\r\n";
		
		strNombre+="\t\t\txml.append(this.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"Descripcion("+GetNombreClaseObjetoC(tablaBase) +"A.get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"()));\r\n";
		
		strNombre+="\t\t\txml.append(\"</";
		strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion";
		strNombre+=">\\r\n\");\r\n";
		
		return strNombre;
	}
		
	return strNombre;
	}
	
	public string GetJsonColumnaC(ColumnSchema column,String tablaBase,bool blnEsParaCompuesto)
	{
		string strNombre="";
		string strGetColumn="";
		string strPrefijoTabla="";
		string strPrefijoTipo="";
		string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+GetNombreCompletoColumnaClaseC(column)+"()"+GetTipoColumnaToString(column);
	
		String strColumnName="";
		String strColumn="";
		
		if(!(column.Name.Equals(strId)||column.Name.Equals(strVersionRow))) {
			strColumnName=column.Name;
		} else {
			if(column.Name.Equals(strId)) {
				strColumnName=strIdGetSet;
			} else {
				strColumnName=strVersionRowGetSet;
			}
		}
		
		
		if(column.DataType==DbType.Binary&&column.Name!=strVersionRow) {
			return "";
		}
	
		if(column.Name==strId) {
			//strNombre="\txml.append(\"<item code=\\\"\"+"+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+"+\"\\\">\");\r\n\r\n";
		}

	
		if(!blnEsParaCompuesto) {
			//strNombre+= "\t\t\t\txml.append(\"<";
			//strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			//strNombre+=">\");\r\n";
			if(column.Name==strId||column.Name==strVersionRow) {
				if(column.Name==strId) {
					strColumn="ConstantesJsp.SJSONIDCOLUMN";
				} else {
					strColumn="ConstantesJsp.SJSONVERSIONROWCOLUMN";
				}
			} else {
				strColumn=GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+"";
			}
			
			strNombre+="\tjsonObject"+GetNombreClaseC(column.Table.ToString())+".put("+strColumn+",Funciones.validarCampoJson("+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+","+GetNombreClaseC(column.Table.ToString())+".class.getSimpleName()));";
			
			//strNombre+="\t\t\t\txml.append(\"</";
			//strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			//strNombre+=">\");";
		} else {
			/*
			strNombre+= "\t\t\t\txml.append(\"<";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=">\");\r\n";
			*/
			/*
			if(column.Name==strId) {
				strNombre+="\r\n\t\t\t\tif("+GetNombreClaseObjetoC(tablaBase)+".get"+strIdGetSet+"()!=0&&"+GetNombreClaseObjetoC(tablaBase)+".get"+strIdGetSet+"()!=null)\r\n\t\t\t\t{\r\n";
				strNombre+="\t\t\t\t\txml.append("+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+");\r\n";		
				
				strNombre+="\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\txml.append("+strId+"Temporal.toString());\r\n\t\t\t\t\t"+strId+"Temporal--;\r\n\t\t\t\t}\r\n\r\n";				
			
			} else {
				strNombre+="\t\t\t\txml.append("+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+");\r\n";
			}
			*/
			/*
			strNombre+="\t\t\t\txml.append(\"</";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=">\");";*/
		}
		
		if(column.IsForeignKeyMember||column.DataType==DbType.Boolean) {
			/*
			strNombre+= "\r\n\t\t\t\txml.append(\"<";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=">\");\r\n";
			*/
			if(column.IsForeignKeyMember) {
				TableSchema tableSchemaFK=GetNombreTablaRelacionadaFromColumn(column);
				//System.Windows.Forms.MessageBox.Show(column.Name+"-"+tableSchemaFK.Name);
				// SI SE NECESITARA PARA NO STANDAR, FALTARIA Y TOCARIA REALIZAR ALGUNOS CAMBIOS NO TAN DIRECTOS
				if(!blnNoStandardTableFromProperties) {
					strNombre+="\r\n\t\t\t\tjsonObject"+GetNombreClaseC(column.Table.ToString())+".put("+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+"+ConstantesJsp.SDESCRIPCION,Funciones.validarCampoJson("+GetNombreClaseC(tablaBase)+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"Descripcion("+GetNombreClaseObjetoC(tablaBase) +".get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"()),"+GetNombreClaseC(column.Table.ToString())+".class.getSimpleName()));";
				}
			} else {
				String strColumna=GetNombreColumnaClaseC(column);
				
				strNombre+="\r\n\t\t\t\tjsonObject"+GetNombreClaseC(column.Table.ToString())+".put("+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+"+ConstantesJsp.SDESCRIPCION,Funciones.validarCampoJson("+GetNombreClaseC(tablaBase)+"ConstantesFunciones.get"+strColumna+"HtmlDescripcion("+GetNombreClaseObjetoC(tablaBase) +"),"+GetNombreClaseC(column.Table.ToString())+".class.getSimpleName()));";
			}
			/*
			strNombre+="\t\t\t\txml.append(\"</";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=">\");\r\n";	
			*/
		}
			
		return strNombre;
	}
	
	public static string GetJsonColumnaColumnC(ColumnSchema column,String tablaBase,bool blnEsParaCompuesto)
	{
		string strNombre="";
		string strGetColumn="";
		string strPrefijoTabla="";
		string strPrefijoTipo="";
		string strNombreColumna="";
	
		strPrefijoTabla=GetPrefijoTablaC();
	    strPrefijoTipo=GetPrefijoTipoC(column);
	    strNombreColumna=GetNombreColumnaClaseC(column);
		strGetColumn="get"+GetNombreCompletoColumnaClaseC(column)+"()"/*+GetTipoColumnaToString(column)*/;
	
		String strColumnName="";
		String strColumn="";
		String strColumnLabel="";
		
		if(!(column.Name.Equals(strId)||column.Name.Equals(strVersionRow))) {
			strColumnName=column.Name;
		} else {
			if(column.Name.Equals(strId)) {
				strColumnName=strIdGetSet;
			} else {
				//strColumnName=strVersionRowGetSet;
				return "";
			}
		}
		
		
		if(column.DataType==DbType.Binary&&column.Name!=strVersionRow) {
			return "";
		}
	
		if(column.Name==strId) {
			//strNombre="\txml.append(\"<item code=\\\"\"+"+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+"+\"\\\">\");\r\n\r\n";
		}

	
		if(!blnEsParaCompuesto&&!column.IsForeignKeyMember&&column.DataType!=DbType.Boolean) {
			//strNombre+= "\t\t\t\txml.append(\"<";
			//strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			//strNombre+=">\");\r\n";
			
			//strNombre+="\tjsonObject"+GetNombreClaseC(column.Table.ToString())+".put("+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+strColumnName+"(),"+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+");";
			
			if(column.Name==strId||column.Name==strVersionRow) {
				if(column.Name==strId) {
					strColumn="ConstantesJsp.SJSONIDCOLUMN";
				} else {
					strColumn="ConstantesJsp.SJSONVERSIONROWCOLUMN";
				}
			} else {
				strColumn=GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+"";
			}
			
			if(column.Name==strId||column.Name==strVersionRow) {
				if(column.Name==strId) {
					strColumnLabel="ConstantesJsp.SJSONIDCOLUMNLABEL";
				} else {
					strColumnLabel="ConstantesJsp.SJSONVERSIONROWCOLUMNLABEL";
				}
			} else {
				strColumnLabel=GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.getColumnLabel"+strColumnName+"()";
			}
			
			strNombre+="\r\n\t\t\t\t\tjsonObject"+GetNombreClaseC(column.Table.ToString())+"Column=new JSONObject();\r\n";
			strNombre+="\t\t\t\t\tjsonObject"+GetNombreClaseC(column.Table.ToString())+"Column.put(ConstantesJsp.SJMAKIID, "+strColumn+");\r\n";
			strNombre+="\t\t\t\t\tjsonObject"+GetNombreClaseC(column.Table.ToString())+"Column.put(ConstantesJsp.SJMAKILABEL, "+strColumnLabel+");\r\n";
			strNombre+="\t\t\t\t\tjsonArray"+GetNombreClaseC(column.Table.ToString())+"Columns.put(jsonObject"+GetNombreClaseC(column.Table.ToString())+"Column);\r\n";
			
			//strNombre+="\t\t\t\txml.append(\"</";
			//strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			//strNombre+=">\");";
		} else {
			/*
			strNombre+= "\t\t\t\txml.append(\"<";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=">\");\r\n";
			*/
			/*
			if(column.Name==strId) {
				strNombre+="\r\n\t\t\t\tif("+GetNombreClaseObjetoC(tablaBase)+".get"+strIdGetSet+"()!=0&&"+GetNombreClaseObjetoC(tablaBase)+".get"+strIdGetSet+"()!=null)\r\n\t\t\t\t{\r\n";
				strNombre+="\t\t\t\t\txml.append("+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+");\r\n";		
				
				strNombre+="\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\txml.append("+strId+"Temporal.toString());\r\n\t\t\t\t\t"+strId+"Temporal--;\r\n\t\t\t\t}\r\n\r\n";				
			
			} else {
				strNombre+="\t\t\t\txml.append("+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+");\r\n";
			}
			*/
			/*
			strNombre+="\t\t\t\txml.append(\"</";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=">\");";*/
		}
		
		if(column.IsForeignKeyMember||column.DataType==DbType.Boolean) {
			/*
			strNombre+= "\r\n\t\t\t\txml.append(\"<";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=">\");\r\n";
			*/
			
			//strNombre+="\r\n\t\t\t\tjsonObject"+GetNombreClaseC(column.Table.ToString())+".put("+GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+strColumnName+"()+\"Descripcion\","+GetNombreClaseC(tablaBase)+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"Descripcion("+GetNombreClaseObjetoC(tablaBase) +".get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"()));";
			
			strNombre+="\t\t\r\n\t\t\tjsonObject"+GetNombreClaseC(column.Table.ToString())+"Column=new JSONObject();\r\n";
			strNombre+="\t\t\t\t\tjsonObject"+GetNombreClaseC(column.Table.ToString())+"Column.put(ConstantesJsp.SJMAKIID, "+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+"+ConstantesJsp.SDESCRIPCION);\r\n";
			strNombre+="\t\t\t\t\tjsonObject"+GetNombreClaseC(column.Table.ToString())+"Column.put(ConstantesJsp.SJMAKILABEL, "+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.getColumnLabel"+strColumnName+"());\r\n";
			strNombre+="\t\t\t\t\tjsonArray"+GetNombreClaseC(column.Table.ToString())+"Columns.put(jsonObject"+GetNombreClaseC(column.Table.ToString())+"Column);\r\n";
			/*
			strNombre+="\t\t\t\txml.append(\"</";
			strNombre+= column.Name.Substring(0, column.Name.Length).ToLower()+"Descripcion"+strSeparadorXml+GetNombreClaseObjetoC(column.Table.ToString()).ToLower();
			strNombre+=">\");\r\n";	
			*/
		}
			
		return strNombre;
	}
	
	public static string GetJsonColumnaComboC(TableSchema table,String tablaBase,bool blnEsParaCompuesto)
	{
		string strNombre="";
		string strGetColumn="";
		string strPrefijoTabla="";
			strPrefijoTabla+="";
		string strPrefijoTipo="";
			strPrefijoTipo+="";
		string strNombreColumna="";
			strNombreColumna+="";
	
		strGetColumn="get"+strIdGetSet;
	
		String strColumnName="";
			strColumnName+="";
		String strColumn="";
			strColumn+="";
		
		String strDescripcionTabla=GetNombreClaseC(table.ToString())+"ConstantesFunciones.get"+GetNombreClaseC(tablaBase.ToString())+"Descripcion("+GetNombreClaseObjetoC(tablaBase.ToString())+")";
		
		//strColumn=GetNombreClaseC(column.Table.ToString())+"DataAccess.getColumnName"+strColumnName+"()";
			
		strNombre+="\r\n\t\tjsonObject"+GetNombreClaseC(table.ToString())+".put(ConstantesJsp.SJMAKILABEL,"+strDescripcionTabla+");\r\n";
		strNombre+="\t\tjsonObject"+GetNombreClaseC(table.ToString())+".put(ConstantesJsp.SJMAKIVALUE,Funciones.validarCampoJson("+GetNombreClaseObjetoC(tablaBase)+"."+strGetColumn+"(),"+GetNombreClaseC(table.ToString())+".class.getSimpleName()));";
			
		return strNombre;
	}
	
	public static string GetNombreColumnaClaseMinusculaC(ColumnSchema column)
	{
	string strNombre = column.Name.Substring(0, column.Name.Length).ToLower();
	return strNombre;
	}
	
	public static string GetNombreColumnaClaseC(ColumnSchema column) {
		string strNombre = "";
		
		if(!column.IsForeignKeyMember) {
			if(!column.Name.Equals(strId)) {
				strNombre =GetNombreColumnFromProperties(column);//column.Name;//.Substring(0, 1).ToUpper() + column.Name.Substring(1, column.Name.Length-1).ToLower();
			} else {
				strNombre =strId;
			}
		} else {
			if(!column.Name.Equals(strId)) {
				strNombre =GetNombreColumnFromProperties(column);//column.Name;//column.Name.Substring(0, 1).ToUpper() + column.Name.Substring(1, column.Name.Length-1);
			} else {
				//CUANDO RELACION ES DE UNO A UNO
				TableSchema tableSchema=GetTableSchemaFromColumnForeignKey(column);
			
				//strNombre =strIdGetSet+GetNombreClaseC(tableSchema.ToString());
				strNombre ="";//column.Name;//GetNombreColumnFromProperties(column);
				strNombre =GetParameterClaseFkRelacionadoC(tableSchema);
				
				//strNombre =GetNombreColumnFromProperties(column);
			}						
		}
		
		return strNombre;
	}
	
	public string GetNombreColumnaClaseFkDescripcionC(ColumnSchema column) {
		string strNombre = "";
		
		strNombre =GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+strDescripcion;
		
		return strNombre;
	}
	
	public static string GetNombreTablaRelacionMappedByClaseC(TableSchema TablaBase) {
		string strNombre =GetPrefijoRelacionC().ToLower();//+GetNombreClaseObjetoC(TablaBase.ToString());
		
		string strNombreClase =GetNombreClaseC(TablaBase.ToString());
		
		strNombre =strNombreClase.Substring(0,1).ToLower()+strNombreClase.Substring(1,strNombreClase.Length-1);
		
		return strNombre;
	}
	
	public static  string GetParameterClaseFkRelacionadoC(TableSchema tableSchema)	{
		String strNombre="";
		
		strNombre =strId+"_"+GetNombreTableFromProperties(tableSchema,false);//GetNombreClaseObjetoC(tableSchema.ToString());
		
		if(blnEsLowerCaseDBNames) {
			strNombre=strId+"_"+GetNombreTableFromProperties(tableSchema,false);//GetNombreClaseObjetoC(tableSchema.ToString());
			strNombre=strNombre.ToLower();
		} else {	
			if(blnEsMixedCaseDBNames) {
				strNombre=strIdGetSet+"_"+GetNombreClaseC(tableSchema.ToString());
			} else {
				strNombre=strId+"_"+GetNombreTableFromProperties(tableSchema,false);//GetNombreClaseC(tableSchema.ToString());
				strNombre=strNombre.ToUpper();
			}
		}
		
		return strNombre;
	}
	/*
	TableKeySchema TableKey;
	TableKey.ForeignKeyMemberColumns
	if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
	*/
	
	public static  string GetParameterClaseDeepRelacionadoC(CollectionInfo collectionInfo)	{
		String strColumnName="";
		string strPrefijo=String.Empty;
		string strPrefijoTabla="";
		string strPrefijoTipo ="";					
					
		TableKeySchema tableKey=collectionInfo.TableKey;
		ColumnSchemaCollection columnSchemaCollection; 
		
		
		if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
			columnSchemaCollection=tableKey.ForeignKeyMemberColumns;
		} else {
			if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {
				columnSchemaCollection=tableKey.ForeignKeyMemberColumns;
			} else {
				columnSchemaCollection=tableKey.ForeignKeyMemberColumns;
			}
		}	
		
		if(columnSchemaCollection!=null) {
			foreach(ColumnSchema columnSchema in columnSchemaCollection) {
					/*
					strPrefijo=String.Empty;
					strPrefijoTabla=GetPrefijoTablaC().ToLower();
					strPrefijoTipo =GetPrefijoTipoC(columnSchema);
				
					strPrefijo=strPrefijoTabla+strPrefijoTipo;
					
					strColumnName = GetNombreColumnaClaseC(columnSchema);
					strColumnName=strPrefijo+strColumnName;
					*/
					strColumnName=GetNombreColumnaClaseC(columnSchema);
					//Trace.WriteLine(strColumnName);
					break;
			}
		}
		return strColumnName;
	}
	
	public string GetParameterClaseC(ColumnSchema column,bool ConValidaciones,bool ConMostrarValidaciones,String strSufijo)	{
		return GetParameterClaseC(column,ConValidaciones,ConMostrarValidaciones,strSufijo,true,false);
	}
	
	public string GetParameterClaseC(ColumnSchema column,bool ConValidaciones,bool ConMostrarValidaciones,String strSufijo,bool conSaltoLinea,bool conPublic)
	{
		String strPublicPrivate="private";
		String strSaltoLinea="\r\n\t";
		
		if(conPublic) {
			strPublicPrivate="public";
		}
		
		if(!conSaltoLinea) {
			strSaltoLinea="";
		}
		
		if((column.Name==strId && !column.IsForeignKeyMember)||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)	{
			//Trace.WriteLine(column.Name);
			
			return "";
		}
		//Trace.WriteLine(column.Name);
		string strValidacion="";
		
		if(ConMostrarValidaciones) {
			strValidacion=GetValidacionParameterClaseC(column,ConValidaciones,false);
		}
		
		string strPrefijo=String.Empty;
		string strPrefijoTabla=GetPrefijoTablaC().ToLower();
		string strPrefijoTipo =GetPrefijoTipoC(column);
	
		strPrefijo=strPrefijoTabla+strPrefijoTipo;
		
		string strNombre = GetNombreColumnaClaseC(column);
		strPrefijo+=strNombre;
			
		string param =  GetTipoColumnaClaseC(column);
		//System.Windows.Forms.MessageBox.Show(strSufijo);
		return strValidacion+strSaltoLinea+""+strPublicPrivate+" "+param+" "+strPrefijo+strSufijo+";";
	}
	
	public string GetValidacionParameterClaseC(ColumnSchema column,bool ConValidaciones,bool EsValidacionWeb)
	{	
		//Trace.WriteLine("COLUMN:"+column.Name);
		string strValidacion=String.Empty;		
		string strValidacionFromProperties=GetJavaValidacionColumnFromPropertiesC(column);
		string strConValidacion=String.Empty;
		string strConValidacionFin=String.Empty;
		String strTabsFormularioWeb="";
		String strObjectFace=GetNombreClaseObjetoC(column.Table.ToString())+strPrefijoJSFFaces;
		
		//Trace.WriteLine(ConValidaciones);
		
		if(!EsValidacionWeb) {
			if(!ConValidaciones) {
				strConValidacion="//";
			}
		} else {
			strTabsFormularioWeb="\t\t\t\t\t\t\t";
			
			if(!ConValidaciones) {
				strConValidacion="<!--";
				strConValidacionFin="-->";
			}
		}
		
		String[] arrValidaciones;
		String strValoresCaracteristicaValidacion="";
		String[] arrValoresCaracteristicaValidacion;
		
		if(!GetEsNullColumnFromPropertiesC(column)/*.AllowDBNull*/) {
			if(!EsValidacionWeb) {
				strValidacion+="\r\n\t"+strTabsFormularioWeb+strConValidacion+"@NotNull(message=ConstantesValidacion.SVALIDACIONNOTNULL)";
			} else {
				
			}
		}
		
		if(EsTipoColumnaNumeroParaClaseC(column)) {
			strValidacion+=GetValidacionNumeroParameterClaseC(column,EsValidacionWeb,strTabsFormularioWeb);
		}
		
		if(EsTipoColumnaStringParaTrimClaseC(column)) {
			if(!EsValidacionWeb) {
				strValidacion+="\r\n\t"+strTabsFormularioWeb+strConValidacion+"@Length(min=0,max="+column.Size+",message=ConstantesValidacion.SVALIDACIONLENGTH)";
				
				if(!column.AllowDBNull) {
					strValidacion+="\r\n\t"+strTabsFormularioWeb+strConValidacion+"@NotEmpty(message=ConstantesValidacion.SVALIDACIONNOVACIO)";
				}
			} else {
				strValidacion+="\r\n\t"+strTabsFormularioWeb+"<f:validateLength maximum=\""+column.Size+"\" />";//minimum=\"0\" 
				
				if(!column.AllowDBNull) {
					strValidacion+="\r\n\t"+strTabsFormularioWeb+"<f:validateRequired/>";
				}
			}
		}
				
		if(EsTipoColumnaParaRegularExpresionClaseC(column)) {
			String strComment="";
			bool isParaReporte=GetEsReporteFromPropertiesC(column.Table);
			
			if(isParaReporte || blnTieneValidacionTodo) {
				strComment="//";
			}
			
			if(!EsValidacionWeb) {
				strValidacion+="\r\n\t"+strTabsFormularioWeb+strComment+strConValidacion+"@Pattern(regex="+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.SREGEX"+GetNombreColumnaClaseC(column).ToUpper()+",message="+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.SMENSAJEREGEX"+GetNombreColumnaClaseC(column).ToUpper()+")";//Constantes."+GetTipoColumnaMensajeRegularExpresionClaseC(column)+")";
			} else {
				strValidacion+="\r\n\t"+strTabsFormularioWeb+"<f:validateRegex pattern=\"#{"+strObjectFace+".regexCadena}\"/>";
			}
		}
		
		if(!strValidacionFromProperties.Equals(string.Empty)) {
			arrValidaciones=strValidacionFromProperties.Split(',');
			
			foreach(String strValidacionItem in arrValidaciones) {						
				if(!EsValidacionWeb) {
					if(strValidacionItem.Equals("NOEMPTY")) {
						strValidacion+="\r\n\t"+strConValidacion+"@NotEmpty(message=ConstantesValidacion.SVALIDACIONNOVACIO)";
					}
					
					if(strValidacionItem.Equals("NONULL")) {
						strValidacion+="\r\n\t"+strConValidacion+"@NotNull(message=ConstantesValidacion.SVALIDACIONNONULL)";
					}
					
					if(strValidacionItem.Equals("EMAIL")) {
						strValidacion+="\r\n\t"+strConValidacion+"@Email(message=ConstantesValidacion.SVALIDACIONMAIL)";
					}
					
					if(strValidacionItem.Equals("PAST")) {
						strValidacion+="\r\n\t"+strConValidacion+"@Past(message=ConstantesValidacion.SVALIDACIONMENORIGUAL)";
					}
					
					if(strValidacionItem.Equals("FUTURE")) {
						strValidacion+="\r\n\t"+strConValidacion+"@Future(message=ConstantesValidacion.SVALIDACIONMAYORIGUAL)";
					}
					
					if(strValidacionItem.Equals("VALID")) {
						strValidacion+="\r\n\t"+strConValidacion+"@Valid";
					}
					
					if(strValidacionItem.Equals("TRUE")) {
						strValidacion+="\r\n\t"+strConValidacion+"@AssertTrue(message=ConstantesValidacion.SVALIDACIONVERDADERO)";
					}
					
					if(strValidacionItem.Equals("FALSE")) {
						strValidacion+="\r\n\t"+strConValidacion+"@AssertFalse(message=ConstantesValidacion.SVALIDACIONFALSO)";
					}
					
					//if(strValidacionItem.Contains("RANGE")) {
						
						strValoresCaracteristicaValidacion=GetValorDeNombreFromSubStringC(strValidacionItem,"RANGE");//arrCaracteristicasValidacion[1];
						
						if(!strValoresCaracteristicaValidacion.Equals("")){
							arrValoresCaracteristicaValidacion=strValoresCaracteristicaValidacion.Split('-');
							
							strValidacion+="\r\n\t"+strConValidacion+"@Range(";
							strValidacion+="min="+arrValoresCaracteristicaValidacion[0];
							strValidacion+=",max="+arrValoresCaracteristicaValidacion[1];
							strValidacion+=",message=\"El valor debe estar entre {min} y {max}\"";
							strValidacion+=")";
						}
						
						
						strValoresCaracteristicaValidacion=GetValorDeNombreFromSubStringC(strValidacionItem,"LENGTH");//arrCaracteristicasValidacion[1];
						
						if(!strValoresCaracteristicaValidacion.Equals("")){
							arrValoresCaracteristicaValidacion=strValoresCaracteristicaValidacion.Split('-');
							
							strValidacion+="\r\n\t"+strConValidacion+"@Length(";
							strValidacion+="min="+arrValoresCaracteristicaValidacion[0];
							strValidacion+=",max="+arrValoresCaracteristicaValidacion[1];
							strValidacion+=",message=\"El valor debe estar entre {min} y {max}\"";
							strValidacion+=")";
						}
						
						strValoresCaracteristicaValidacion=GetValorDeNombreFromSubStringC(strValidacionItem,"MIN");//arrCaracteristicasValidacion[1];
						
						if(!strValoresCaracteristicaValidacion.Equals("")){
							arrValoresCaracteristicaValidacion=strValoresCaracteristicaValidacion.Split('-');
							
							strValidacion+="\r\n\t"+strConValidacion+"@Min(";
							strValidacion+="value="+arrValoresCaracteristicaValidacion[0];
							strValidacion+=",message=\"El valor minimo es {value}\"";
							strValidacion+=")";
						}
						
						strValoresCaracteristicaValidacion=GetValorDeNombreFromSubStringC(strValidacionItem,"MAX");//arrCaracteristicasValidacion[1];
						
						if(!strValoresCaracteristicaValidacion.Equals("")){
							arrValoresCaracteristicaValidacion=strValoresCaracteristicaValidacion.Split('-');
							
							strValidacion+="\r\n\t"+strConValidacion+"@Max(";
							strValidacion+="value="+arrValoresCaracteristicaValidacion[0];
							strValidacion+=",message=\"El valor maximo es {value}\"";
							strValidacion+=")";
						}
						
						strValoresCaracteristicaValidacion=GetValorDeNombreFromSubStringC(strValidacionItem,"SIZE");//arrCaracteristicasValidacion[1];
						
						if(!strValoresCaracteristicaValidacion.Equals("")){
							arrValoresCaracteristicaValidacion=strValoresCaracteristicaValidacion.Split('-');
							
							strValidacion+="\r\n\t"+strConValidacion+"@Size(";
							strValidacion+="min="+arrValoresCaracteristicaValidacion[0];
							strValidacion+=",max="+arrValoresCaracteristicaValidacion[1];
							strValidacion+=",message=\"El valor debe estar entre {min} y {max}\"";
							strValidacion+=")";
						}
						
						strValoresCaracteristicaValidacion=GetValorDeNombreFromSubStringC(strValidacionItem,"DIGITS");//arrCaracteristicasValidacion[1];
						
						if(!strValoresCaracteristicaValidacion.Equals("")){
							arrValoresCaracteristicaValidacion=strValoresCaracteristicaValidacion.Split('-');
							
							strValidacion+="\r\n\t"+strConValidacion+"@Digits(";
							strValidacion+="integerDigits="+arrValoresCaracteristicaValidacion[0];
							strValidacion+=",fractionalDigits="+arrValoresCaracteristicaValidacion[1];
							strValidacion+=",message=\"Solo numeros enteros\"";
							strValidacion+=")";
						}
						
						strValoresCaracteristicaValidacion=GetValorDeNombreFromSubStringC(strValidacionItem,"PATTERN");//arrCaracteristicasValidacion[1];
						
						if(!strValoresCaracteristicaValidacion.Equals("")){
							arrValoresCaracteristicaValidacion=strValoresCaracteristicaValidacion.Split('-');
							
							strValidacion+="\r\n\t"+strConValidacion+"@Pattern(";
							strValidacion+="regex=\""+arrValoresCaracteristicaValidacion[0]+"\"";
							strValidacion+=",message=\"Debe cumplir con {regex}\"";
							//strValidacion+=",fraction="+arrValoresCaracteristicaValidacion[1];
							strValidacion+=")";
						}
						
					//}
					
					
					
					/*
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("VALIDACION")) {								
						nombreColumna=tipo[1];
						break;
					}
					*/
				}
			}
		}
			
		return strValidacion;
	}
	
	public string GetValidacionNumeroParameterClaseC(ColumnSchema column,bool EsValidacionWeb,String strTabsFormularioWeb)
	{
		String strValidacionNumero="";
		String sValorMinimoFk="0";
		TableSchema tableSchemaFk=null;
		
		if(!EsValidacionWeb) {
			if(EsSmallIntColumn(column)) {
				strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"@Digits(integerDigits="+column.Precision+",fractionalDigits="+column.Scale+",message=ConstantesValidacion.SVALIDACIONSMALLINT)";
			} else if(EsIntColumn(column)) {
				strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"@Digits(integerDigits="+column.Precision+",fractionalDigits="+column.Scale+",message=ConstantesValidacion.SVALIDACIONINT)";
			} else if(EsBigIntColumn(column)) {
				strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"@Digits(integerDigits="+column.Precision+",fractionalDigits="+column.Scale+",message=ConstantesValidacion.SVALIDACIONBIGINT)";
				
				if(column.IsForeignKeyMember && !column.AllowDBNull) {
					tableSchemaFk=GetNombreTablaRelacionadaFromColumn(column);
					
					if(GetEsGuardarRelacionesFromPropertiesC(tableSchemaFk)) {						
						sValorMinimoFk="-100000";
					}
					
					strValidacionNumero+="\r\n\t"+strTabsFormularioWeb+"@Min(value="+sValorMinimoFk+",message=ConstantesValidacion.SVALIDACIONNOVACIO)";
				}
				
			} else if(EsDecimalColumn(column)) {
				strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"@Digits(integerDigits="+column.Precision+",fractionalDigits="+column.Scale+",message=ConstantesValidacion.SVALIDACIONDECIMAL)";
			}
		} else {
			if(EsSmallIntColumn(column)) {
				//strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"<f:validateRegex pattern=\"\d*\" />";
				strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"<f:convertNumber integerOnly=\"true\" type=\"number\" />";
			} else if(EsIntColumn(column)) {
				//strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"<f:validateRegex pattern=\"\d*\" />";
				strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"<f:convertNumber integerOnly=\"true\" type=\"number\" />";
			} else if(EsBigIntColumn(column)) {
				//strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"<f:validateRegex pattern=\"\d*\" />";
				strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"<f:convertNumber integerOnly=\"true\" type=\"number\" />";
				
				if(column.IsForeignKeyMember && !column.AllowDBNull) {
					strValidacionNumero+="\r\n\t"+strTabsFormularioWeb+"@Min(value=0,message=ConstantesValidacion.SVALIDACIONNOVACIO)";
				}
			} else if(EsDecimalColumn(column)) {
				//strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"<f:validateRegex pattern="\d*" />";
				strValidacionNumero="\r\n\t"+strTabsFormularioWeb+"<f:validateDoubleRange minimum=\"0.0\" />";
			}
		}
		
		return strValidacionNumero;
	}
	
	
	public string GetParameterBusquedaClaseC(ColumnSchema column)
	{
		//PARA RELACION UNO A UNO
		//column.Name==strId||
		//(column.Name==strId && !column.IsForeignKeyMember)||
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
			return"";
		}
		
		string strPrefijo=String.Empty;
		String strSufijo=String.Empty;
		string strPrefijoTabla=GetPrefijoTablaC().ToLower();
		string strPrefijoTipo =GetPrefijoTipoC(column);
			
		strPrefijo=strPrefijoTabla+strPrefijoTipo;
		
		string strNombre = GetNombreColumnaClaseC(column);
						
		strPrefijo+=strNombre;
			
		string param =  GetTipoColumnaClaseC(column);
		
		String strReturn="private "+param+" "+strPrefijo+strSufijo+";";
		
		if(GetConRangoBusquedasColumnFromPropertiesC(column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(column,"TODOS")) {
			strReturn+="\r\n\tprivate "+param+" "+strPrefijo+strSufijoRangoFinal+";"; 
		}
			
		return strReturn;
	}
	
	public Boolean GetEsColumnaIndiceC(ColumnSchema columnSchema) 
	{
		Boolean blnEsColumnaIndice=false;
		
		foreach(IndexSchema indexSchema in columnSchema.Table.Indexes)
		{
			foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
			{
				if(memberColumnSchema.Column.Equals(columnSchema)) {
					blnEsColumnaIndice=true;
					break;
				}
			}
		}
		
		return blnEsColumnaIndice;
	}
	
	public string GetValueDefaultParameterBusquedaClaseC(ColumnSchema column)
	{
		
		if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
			return"";
		}
		string strPrefijo=String.Empty;
		string strValor=String.Empty;
		
		string strPrefijoTabla="";//GetPrefijoTablaC().ToLower();
		string strPrefijoTipo =GetPrefijoTipoC(column);
	
		strPrefijo="this."+strPrefijoTabla+strPrefijoTipo;
		
		switch(column.Name)
		{
			case strIsActive:
			strValor="";
			break;
			
			case strIsExpired:
			strValor="";
			break;
			
			case strVersionRow:
			strValor="";
			break;
			
			default:
			strValor=GetDefaultValueColumna(column);
			break;
		}
		
		
		
		string strNombre = GetNombreColumnaClaseC(column);
		strPrefijo+=strNombre;
	
		String  strReturn=strPrefijo+"="+strValor+";";
		
		if(GetConRangoBusquedasColumnFromPropertiesC(column)||GetConRangoBusquedasIndicesColumnFromPropertiesC(column,"TODOS")) {
			strReturn+="\r\n\t\t"+strPrefijo+strSufijoRangoFinal+"="+strValor+";"; 
		}
		
		return strReturn;
	}
	
	public string GetParameterBusquedaClaseMethodC(ColumnSchema column,bool blnConRangoFinal)
	{	
		
		//PUEDE SER PARA RELACION UNO A UNO
		//column.Name==strId||
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
			return"";
		}
		
		String strConRangoFinal="";
		
		if(blnConRangoFinal) {
			strConRangoFinal=strSufijoRangoFinal;
		}
		
		string strPrefijo=String.Empty;
		string strPrefijoTabla="";//GetPrefijoTablaC();
		string strPrefijoFuncion="\r\n\tpublic ";//"\r\n\t"+GetPersistenciaColumnaClaseC(column)+"\r\n\tpublic ";
		string strPrefijoTipo = GetPrefijoTipoC(column);
	
		strPrefijo=strPrefijoFuncion;	
		string strNombre = GetNombreColumnaClaseC(column);		
		string param =  GetTipoColumnaClaseC(column);
			
		strPrefijo+=param+" get"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"() {";
		strPrefijo+="\r\n\t\treturn this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strConRangoFinal+";\r\n\t}";
	
		return strPrefijo;
	}


	public string GetParameterBusquedaClaseSetMethodC(ColumnSchema column,bool blnConRangoFinal)
	{			  
		String strConRangoFinal="";
		
		if(blnConRangoFinal) {
			strConRangoFinal=strSufijoRangoFinal;
		}
		
		//PARA RELACION UNO A UNO
		//column.Name==strId||
		if(column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
		{
			return"";
		}
		string strPrefijo=String.Empty;
		string strPrefijoTabla="";//GetPrefijoTablaC();
		string strPrefijoFuncion="\r\n\tpublic void set";
		string strPrefijoTipo = GetPrefijoTipoC(column);
		
		strPrefijo=strPrefijoFuncion;
		
		string strNombre = GetNombreColumnaClaseC(column);
			
		string param =  GetTipoColumnaClaseC(column);
		
		if(GetEsNullColumnFromPropertiesC(column)/*.AllowDBNull*/)
		{
			strPrefijo+=strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"("+param+ " new"+strPrefijoTabla+strPrefijoTipo+strNombre +strConRangoFinal+")";
			
			if(column.DataType==DbType.AnsiString||column.DataType==DbType.AnsiStringFixedLength||
			column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				strPrefijo+="throws Exception";
			}
			
			strPrefijo+=" {";
			
			strPrefijo+="\r\n\t\tif(this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strConRangoFinal+"!="+"new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+") {";			
			
			if(column.DataType==DbType.AnsiString||column.DataType==DbType.AnsiStringFixedLength||
			column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				strPrefijo+="\r\n\r\n\t\t\t\tif("+"new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"!=null&&new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+".length()>"+column.Size+") {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tnew"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+".substring(0,"+(column.Size-2).ToString()+");\r\n\t\t\t\t\t\tSystem.out.println(\""+GetNombreClaseC(column.Table.ToString())+strConRangoFinal+":Ha sobrepasado el numero maximo de caracteres permitidos,Maximo="+column.Size+" en columna "+GetNombreColumnaClaseC(column)+strConRangoFinal+"\");\r\n\t\t\t\t\t} catch(Exception e) {\r\n\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}";
			}
			
			strPrefijo+="\r\n\r\n\t\t\tthis."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strConRangoFinal+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+";"+ "\r\n\t\t}\r\n\t}";//\r\n\t\t\tthis.setIsChanged(true);
		}
		else
		{
			strPrefijo+=strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"("+param+ " new"+strPrefijoTabla+strPrefijoTipo+strNombre +strConRangoFinal+")throws Exception\r\n\t{";
			strPrefijo+="\r\n\t\ttry {\r\n\t\t\tif(this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strConRangoFinal+"!="+"new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+") {\r\n\t\t\t\tif("+"new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"==null) {\r\n\t\t\t\t\t//new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"="+GetDefaultValueColumna(column)+";\r\n\t\t\t\t\tif(Constantes.ISDEVELOPING) {\r\n\t\t\t\t\t\tSystem.out.println(\""+GetNombreClaseC(column.Table.ToString())+strConRangoFinal+":Valor nulo no permitido en columna "+GetNombreColumnaClaseC(column)+strConRangoFinal+"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}";			
			
			if(column.DataType==DbType.AnsiString||column.DataType==DbType.AnsiStringFixedLength||
			column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				strPrefijo+="\r\n\r\n\t\t\t\tif("+"new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"!=null&&new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+".length()>"+column.Size+") {\r\n\t\t\t\t\tnew"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+".substring(0,"+(column.Size-2).ToString()+");\r\n\t\t\t\t\tSystem.out.println(\""+GetNombreClaseC(column.Table.ToString())+strConRangoFinal+":Ha sobrepasado el numero maximo de caracteres permitidos,Maximo="+column.Size+" en columna "+GetNombreColumnaClaseC(column)+strConRangoFinal+"\");\r\n\t\t\t\t}";
			}
			
			
			strPrefijo+="\r\n\r\n\t\t\t\tthis."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strConRangoFinal+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+strConRangoFinal+";"+ "\r\n\t\t\t}\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}";//\r\n\t\t\t\tthis.setIsChanged(true);
		}
		
		
		return strPrefijo;
	}

	public string GetValueDefaultParameterClaseC(ColumnSchema column,String strSufijo) {
		string strValor=String.Empty;
		
		strValor=GetValueDefaultParameterClaseC(column,strSufijo,"this",false,false,false);
		
		return strValor;
	}
	
	public string GetValueDefaultParameterClaseC(ColumnSchema column,String strSufijo,String strObjetoPadre,bool conSetFuncion) {
		string strValor=String.Empty;
		
		strValor=GetValueDefaultParameterClaseC(column,strSufijo,strObjetoPadre,conSetFuncion,false,false);
		
		return strValor;
	}
	
	public string GetValueDefaultParameterClaseC(ColumnSchema column,String strSufijo,String strObjetoPadre,bool conSetFuncion,bool conId,bool conVersionRow) {
		if(column.Name==strIsActive||column.Name==strIsExpired) {
			return "";
		}
		
		if(!conId && column.Name.Equals(strId)) {
			return "";
		}
		
		if(!conVersionRow && column.Name.Equals(strVersionRow)) {
			return "";
		}
		
		string strPrefijo=String.Empty;
		string strValor=String.Empty;
		
		string strPrefijoTabla=GetPrefijoTablaC().ToLower();
		string strPrefijoTipo =GetPrefijoTipoC(column);
	
		strPrefijo=strPrefijoTabla+strPrefijoTipo;
		
		switch(column.Name) {
			case strIsActive:
			strValor="";
			break;
			
			case strIsExpired:
			strValor="";
			break;
			
			/*
			case strVersionRow:
			strValor="";
			break;
			*/
			
			default:
			strValor=GetDefaultValueColumna(column);
			break;
		}
				
		string strNombre ="";
						
		if(!column.Name.Equals(strId) && !column.Name.Equals(strVersionRow)) {
			strNombre = GetNombreColumnaClaseC(column);
			
		} else {
			if(column.Name.Equals(strId)) {
				strNombre ="Id";
			} else if(column.Name.Equals(strVersionRow)) {
				strNombre ="VersionRow";
			}
		}
	
	
		strPrefijo+=strNombre;
		
		String sIgualSetFuncion="=";
		String sIniSetFuncion="";
		String sAbreSetFuncion="";
		String sCierraSetFuncion="";	
		
		if(conSetFuncion) {
			sIgualSetFuncion="";
			sIniSetFuncion="set";
			sAbreSetFuncion="(";
			sCierraSetFuncion=")";	
		}
	
	return strObjetoPadre+"."+sIniSetFuncion+strPrefijo+strSufijo+sAbreSetFuncion+sIgualSetFuncion+strValor+sCierraSetFuncion+";";
}

public string GetValueParameterFromParameterClaseC(ColumnSchema column) {	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow) {
		return"";
	}
	string strPrefijo=String.Empty;
	string strValor=String.Empty;
	
	string strPrefijoTabla=GetPrefijoTablaC().ToLower();
	string strPrefijoTipo =GetPrefijoTipoC(column);

	strPrefijo=strPrefijoTabla+strPrefijoTipo;
	
	switch(column.Name)	{
		case strIsActive:
		strValor="";
		break;
		
		case strIsExpired:
		strValor="";
		break;
		
		case strVersionRow:
		strValor="";
		break;
		
		default:
		strValor="";//GetDefaultValueColumna(column);
		break;
	}
	
	string strNombre = GetNombreColumnaClaseC(column);
	strPrefijo+=strNombre;
		
	return "this."+strPrefijo+"="+strPrefijo+";";//strValor+";";
}

public string GetParameterToConstructorClaseC(TableSchema TablaBase) {	
	ColumnSchema column=null;
	string strPrefijo=String.Empty;
	string strValor=String.Empty;
	string strPrefijoTabla=GetPrefijoTablaC().ToLower();
	string strPrefijoTipo ="";
	string strNombre = "";
	string strReturn = "";
	string param ="";
	
	for (int i = 0; i < TablaBase.Columns.Count; i++){ 	
		if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; }
   	 		column=TablaBase.Columns[i];
			
			if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow|| GetEsReporteParametroFromPropertiesC(column)) {
				continue;
			}
		
		param =  GetTipoColumnaClaseC(column);
		
		strPrefijoTipo =GetPrefijoTipoC(column);
	
		strPrefijo=strPrefijoTabla+strPrefijoTipo;
		
		strNombre = GetNombreColumnaClaseC(column);
		strPrefijo+=strNombre;
			
		strReturn += /*"this."+strPrefijo+"="+*/param+" "+strPrefijo;//strValor+";";
		
		if(i<TablaBase.Columns.Count-1) {
			strReturn +=",";
		}
	}
	
	return strReturn;
		
}

public string GetParameterClaseMethodC(ColumnSchema column,bool isGetOnly,bool esPKClase,bool ConPersistenciaAnotaciones,String strSufijo)
{	
	
	if((column.Name==strId && !column.IsForeignKeyMember)||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	string strPrefijo=String.Empty;
	string strPrefijoTabla=GetPrefijoTablaC();
	String strPersistencia="";
	String strPersistenciaComment="";
	bool blnEsFkUnoAUno=false;
	
	if(GetConPersistenciaTableFromProperties(column.Table)) {
		if(column.IsForeignKeyMember && column.Name.Equals(strId)) {
			blnEsFkUnoAUno=true;
		}
		
		if(blnEsFkUnoAUno && ConPersistenciaAnotaciones) {
			strPersistenciaComment="@Transient//";
		}
		
		strPersistencia=strPersistenciaComment+GetPersistenciaColumnaClaseC(column,esPKClase,ConPersistenciaAnotaciones);
	}
	
	string strPrefijoFuncion="\r\n\t"+strPersistencia+"\r\n\tpublic ";
	string strPrefijoTipo = GetPrefijoTipoC(column);

	strPrefijo=strPrefijoFuncion;	
	string strNombre = GetNombreColumnaClaseC(column);		
	string param =  GetTipoColumnaClaseC(column);
	string strException="throws Exception";
		   strException+="";
	
	string strTrimString= "";
	
	//NO VALIO CON PERSISTENCIA USA ESTO Y LE CAMBIA AUTOMATICAMENTE EL DATO Y OBLICA UPDATES EN SIMPLES SELECTS
	/*
	if(EsTipoColumnaStringParaTrimClaseC(column)&& EsCharColumn(column)) {
		strTrimString= ".trim()";
	}
	*/
	
	if(!isGetOnly) {	
		if(EsPKCompuestoTabla(column.Table)&&column.IsPrimaryKeyMember&&!esPKClase) {
			strPrefijo+=param+" get"+strPrefijoTabla+strPrefijoTipo+strNombre+strSufijo+"() throws Exception {";
			strPrefijo+="\r\n\t\tif(this."+GetNombreClaseObjetoC(column.Table.ToString())+"Pk!=null) {";
			strPrefijo+="\r\n\t\t\tthis.set"+strPrefijoTabla+strPrefijoTipo+strNombre+strSufijo+"(";		
			strPrefijo+="this."+GetNombreClaseObjetoC(column.Table.ToString())+"Pk.get"+strPrefijoTabla+strPrefijoTipo+strNombre+strSufijo+"());";
			strPrefijo+="\r\n\t\t}";
		} else {
			strPrefijo+=param+" get"+strPrefijoTabla+strPrefijoTipo+strNombre+strSufijo+"() {";
		}	
		
		if(blnEsFkUnoAUno) {
			strPrefijo+="\r\n\t\tthis."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strTrimString+strSufijo+"=this."+strId+";\r\n";
		}
		
		strPrefijo+="\r\n\t\treturn this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strTrimString+strSufijo+";\r\n\t}";
	} else {
		strPrefijo="get"+strPrefijoTabla+strPrefijoTipo+strNombre+strSufijo+"()";
	}
	
	return strPrefijo;
}

public string GetSetParameterClaseMethodC(ColumnSchema column,String strVariableOrigenDestino,bool blnPonerTrim)
{	
	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	string strPrefijo=String.Empty;
	string strPrefijoTabla=GetPrefijoTablaC();
	String strPersistencia="";
	
	String strPonerTipo="";
	
	if(blnPonerTrim) {
		strPonerTipo=".trim()";
	}
	
	string strPrefijoFuncion="\r\n\t"+strPersistencia+"\r\n\tpublic ";
	string strPrefijoTipo = GetPrefijoTipoC(column);

	strPrefijo=strPrefijoFuncion;	
	string strNombre = GetNombreColumnaClaseC(column);		
	string param =  GetTipoColumnaClaseC(column);
	string strException="throws Exception";
		 strException+="";
	
	String strValor="";
	
	if(EsTipoColumnaStringParaTrimClaseC(column)) {
		strValor=strVariableOrigenDestino+".get"+strPrefijoTabla+strPrefijoTipo+strNombre+"()"+strPonerTipo;
		
	} else if(EsTipoColumnaValorParaClaseC(column)) {
		strValor="0.0";
	} else if(EsTipoColumnaValorEnteroParaClaseC(column)) {//ish_value
		if(EsIntColumn(column)) {
			strValor="0";
		} else if(EsBigIntColumn(column)) {
			strValor="0L";
		} else if(EsSmallIntColumn(column)) {
			strValor="ish_value";
		}
	}
	
	strPrefijo=strVariableOrigenDestino+".set"+strPrefijoTabla+strPrefijoTipo+strNombre+"("+strValor+");";
	
	
	return strPrefijo;
}

public string GetSetPartParameterClaseMethodC(ColumnSchema column,String strVariableDestino,bool blnPonerTrim)
{	
	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	string strPrefijo=String.Empty;
	string strPrefijoTabla=GetPrefijoTablaC();
	String strPersistencia="";
	
	String strPonerTipo="";
	
	if(blnPonerTrim) {
		strPonerTipo=".trim()";
	}
	
	string strPrefijoFuncion="\r\n\t"+strPersistencia+"\r\n\tpublic ";
	string strPrefijoTipo = GetPrefijoTipoC(column);

	strPrefijo=strPrefijoFuncion;	
	string strNombre = GetNombreColumnaClaseC(column);		
	string param =  GetTipoColumnaClaseC(column);
	string strException="throws Exception";
		 strException+="";
	
	strPrefijo=strVariableDestino+".set"+strPrefijoTabla+strPrefijoTipo+strNombre+"(";
	
	
	return strPrefijo;
}

public string GetParameterClaseSetMethodC(ColumnSchema column,bool isHerenciaDeGeneralEntity,String strSufijo)
{			  
	if((column.Name==strId && !column.IsForeignKeyMember) ||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	string strPrefijo=String.Empty;
	string strPrefijoTabla=GetPrefijoTablaC();
	string strPrefijoFuncion="\r\n\tpublic void set";
	string strPrefijoTipo = GetPrefijoTipoC(column);
	
	strPrefijo=strPrefijoFuncion;
	
	string strNombre = GetNombreColumnaClaseC(column);
		
	string param =  GetTipoColumnaClaseC(column);
	
	String strSetIsChangedGeneralEntity="\r\n\t\t\t\tthis.setIsChanged(true);";
	
	string strTrimString= "";
	
	if(EsTipoColumnaStringParaTrimClaseC(column)&& EsCharColumn(column)) {
		strTrimString= ".trim()";
	}
	
	if(!isHerenciaDeGeneralEntity || GetEsProcesoParamFromPropertiesC(column.Table)) {
		strSetIsChangedGeneralEntity="";
	}
	
	String strAllowDBNullValidationExtra="";
	String strAllowDBNullValidation="";
	
	bool blnEsFkUnoAUno=false;
	String sEsFkUnoAUno="";
	String sEsFkUnoAUnoElse="";
	
	if(column.IsForeignKeyMember && column.Name.Equals(strId)) {
		blnEsFkUnoAUno=true;
	}
		
	if(GetEsNullColumnFromPropertiesC(column) || EsBinaryColumn(column)/*.AllowDBNull*/)  
	{
		strAllowDBNullValidationExtra+="\r\n\t\tif(this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strSufijo+strTrimString+"==null&&new"+strPrefijoTabla+strPrefijoTipo+strNombre+"!=null) {";			
		strAllowDBNullValidationExtra+="\r\n\t\t\tthis."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strSufijo+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+";"+strSetIsChangedGeneralEntity+ "\r\n\t\t}\r\n";
		
		strAllowDBNullValidation="this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strTrimString+strSufijo+"!=null&&";
		
		strPrefijo+=strPrefijoTabla+strPrefijoTipo+strNombre+strSufijo+"("+param+ " new"+strPrefijoTabla+strPrefijoTipo+strNombre +")";
		
		if(column.DataType==DbType.AnsiString||column.DataType==DbType.AnsiStringFixedLength||
		   column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
		{
			if(!EsBinaryColumn(column)) {
				strPrefijo+="throws Exception";
			}
		}
		
		strPrefijo+=" {";
		
		strPrefijo+=strAllowDBNullValidationExtra+"\r\n\t\tif("+strAllowDBNullValidation+"!this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strTrimString+strSufijo+".equals("+"new"+strPrefijoTabla+strPrefijoTipo+strNombre+")) {";			
		
		if(column.DataType==DbType.AnsiString||column.DataType==DbType.AnsiStringFixedLength||
		   column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
		{
			strPrefijo+="\r\n\r\n\t\t\t\tif("+"new"+strPrefijoTabla+strPrefijoTipo+strNombre+"!=null&&new"+strPrefijoTabla+strPrefijoTipo+strNombre+".length()>"+column.Size+") {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tnew"+strPrefijoTabla+strPrefijoTipo+strNombre+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+".substring(0,"+(column.Size-2).ToString()+");\r\n\t\t\t\t\t\tSystem.out.println(\""+GetNombreClaseC(column.Table.ToString())+":Ha sobrepasado el numero maximo de caracteres permitidos,Maximo="+column.Size+" en columna "+GetNombreColumnaClaseC(column)+"\");\r\n\t\t\t\t\t} catch(Exception e) {\r\n\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}";
		}
		
		strPrefijo+="\r\n\r\n\t\t\tthis."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strSufijo+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+";"+strSetIsChangedGeneralEntity+ "\r\n\t\t}\r\n\t}";
	}
	else
	{
		sEsFkUnoAUno="";
		sEsFkUnoAUnoElse="";
		
		if(blnEsFkUnoAUno) {
			sEsFkUnoAUno="this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strSufijo+strTrimString+"!=null && ";	
			sEsFkUnoAUnoElse=" else if(this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strSufijo+strTrimString+"==null && new"+strPrefijoTabla+strPrefijoTipo+strNombre+"!=null) {";
			sEsFkUnoAUnoElse+="\r\n\t\t\t\tthis."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strSufijo+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+";";
			sEsFkUnoAUnoElse+="\r\n\t\t\t\tthis."+strId+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+";";
			sEsFkUnoAUnoElse+=strSetIsChangedGeneralEntity+"\r\n\t\t\t}";
		}
		
		strPrefijo+=strPrefijoTabla+strPrefijoTipo+strNombre+strSufijo+"("+param+ " new"+strPrefijoTabla+strPrefijoTipo+strNombre +")throws Exception\r\n\t{";
		strPrefijo+="\r\n\t\ttry {\r\n\t\t\tif("+sEsFkUnoAUno+"this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strSufijo+strTrimString+"!="+"new"+strPrefijoTabla+strPrefijoTipo+strNombre+") {\r\n\t\t\t\tif("+"new"+strPrefijoTabla+strPrefijoTipo+strNombre+"==null) {\r\n\t\t\t\t\t//new"+strPrefijoTabla+strPrefijoTipo+strNombre+"="+GetDefaultValueColumna(column)+";\r\n\t\t\t\t\tif(Constantes.ISDEVELOPING) {\r\n\t\t\t\t\t\tSystem.out.println(\""+GetNombreClaseC(column.Table.ToString())+":Valor nulo no permitido en columna "+GetNombreColumnaClaseC(column)+"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}";			
		//this."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strSufijo+strTrimString+"!=null && 
		
		if(column.DataType==DbType.AnsiString||column.DataType==DbType.AnsiStringFixedLength||
		   column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
		{
			strPrefijo+="\r\n\r\n\t\t\t\tif("+"new"+strPrefijoTabla+strPrefijoTipo+strNombre+"!=null&&new"+strPrefijoTabla+strPrefijoTipo+strNombre+".length()>"+column.Size+") {\r\n\t\t\t\t\tnew"+strPrefijoTabla+strPrefijoTipo+strNombre+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+".substring(0,"+(column.Size-2).ToString()+");\r\n\t\t\t\t\tSystem.out.println(\""+GetNombreClaseC(column.Table.ToString())+":Ha sobrepasado el numero maximo de caracteres permitidos,Maximo="+column.Size+" en columna "+GetNombreColumnaClaseC(column)+"\");\r\n\t\t\t\t}";
		}
		
		
		strPrefijo+="\r\n\r\n\t\t\t\tthis."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strSufijo+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+";"+ strSetIsChangedGeneralEntity+"\r\n\t\t\t}"+sEsFkUnoAUnoElse+"\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}";//\r\n\t\t\t\tthis.setIsChanged(true);
		
	}
	
	
	return strPrefijo;
}


public string GetParameterClaseTypeSetMethodC(ColumnSchema column)
{			  
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	string strPrefijo=String.Empty;
	string strPrefijoTabla=GetPrefijoTablaC();
	string strPrefijoFuncion="\r\n\tpublic void set";
	string strPrefijoTipo = GetPrefijoTipoC(column);
	
	strPrefijo=strPrefijoFuncion;
	
	string strNombre = GetNombreColumnaClaseC(column);
		
		
	string param =  GetTipoColumnaClaseC(column);
	
		strPrefijo="\r\n\tpublic void listener"+GetNombreColumnaClaseC(column)+"(/*UploadEvent event*/) throws Exception{";
			strPrefijo+="\r\n\t\ttry {";
				strPrefijo+="\r\n\t\t\t//UploadItem uploadItem = event.getUploadItem();";
				strPrefijo+="\r\n\t\t\tArchivos archivos= new Archivos();";
				
				strPrefijo+="\r\n\r\n\t\t\tString sCarpetaPath=\"\";";
				strPrefijo+="\r\n\t\t\tString sPath=\"\";//Constantes.SEJBSEPARATOR+Constantes.SNOMBRECARPETAIMAGENES+Constantes.SEJBSEPARATOR+"+GetNombreClaseC(column.Table.ToString())+".class.getSimpleName().toLowerCase()+Constantes.SEJBSEPARATOR+"+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+".toLowerCase()+Constantes.SEJBSEPARATOR;";
				
				strPrefijo+="\r\n\r\n\t\t\tFile imagenFile= new File(servletContext.getRealPath(sPath));";
				
				strPrefijo+="\r\n\t\t\tif(!imagenFile.exists()) {";
					strPrefijo+="\r\n\t\t\t\timagenFile.mkdirs();";
				strPrefijo+="\r\n\t\t\t}";
				
				strPrefijo+="\r\n\r\n\t\t\t//if(uploadItem.getData()!=null) {";
					strPrefijo+="\r\n\t\t\t\t//archivos.setAttribute_sLength(uploadItem.getData().length);";					
				strPrefijo+="\r\n\t\t\t//}";
				
				strPrefijo+="\r\n\r\n\r\n\t\t\tString sNombreArchivo=\"\";//uploadItem.getFileName();\r\n";
			
				strPrefijo+="\r\n\r\n\t\t\tif(this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+strIdGetSet+"()>0) {";
					strPrefijo+="\r\n\t\t\t\tsNombreArchivo=this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+strIdGetSet+"()+sNombreArchivo;";
				strPrefijo+="\r\n\t\t\t} ";
				
				strPrefijo+="\r\n\r\n\t\t\tarchivos.setAttribute_sName(sNombreArchivo);";
				strPrefijo+="\r\n\t\t\tarchivos.setAttribute_sDirectory(sPath);";
				strPrefijo+="\r\n\t\t\tarchivos.setAttribute_sPath(sPath+sNombreArchivo);";
				strPrefijo+="\r\n\t\t\t//archivos.setAttribute_flData(uploadItem.getData());";
			
				strPrefijo+="\r\n\r\n\t\t\t//BORRAR ANTERIOR";
				strPrefijo+="\r\n\t\t\tFunciones.eliminarArchivo(servletContext.getRealPath(this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+strPrefijoTabla+strPrefijoTipo+strNombre+"()));";
				
				/*
				strPrefijo+="\r\n\t\t\tString sRealPathAnterior=servletContext.getRealPath(this."+GetNombreClaseObjetoC(column.Table.ToString())+".get"+strPrefijoTabla+strPrefijoTipo+strNombre+"());";
				
				strPrefijo+="\r\n\t\t\tFile imagenFileAnterior= new File(sRealPathAnterior);";
	
				strPrefijo+="\r\n\r\n\t\t\tif(imagenFileAnterior.exists()) {";
				strPrefijo+="\r\n\t\t\t\timagenFileAnterior.delete();";
				strPrefijo+="\r\n\t\t\t}";
				*/
				strPrefijo+="\r\n\t\t\t//BORRAR ANTERIOR";
				
				strPrefijo+="\r\n\r\n\t\t\tString sRealPath=servletContext.getRealPath(sPath+Constantes.SEJBSEPARATOR+archivos.getAttribute_sName());";
				strPrefijo+="\r\n\t\t\timagenFile= new File(sRealPath);";
				
				strPrefijo+="\r\n\r\n\t\t\tFileOutputStream archivoNuevo = new FileOutputStream(sRealPath);";
				strPrefijo+="\r\n\t\t\tarchivoNuevo.write(archivos.getAttribute_flData(),0,archivos.getAttribute_lLength());";
						
				strPrefijo+="\r\n\r\n\t\t\tthis."+GetNombreClaseObjetoC(column.Table.ToString())+".set"+strPrefijoTabla+strPrefijoTipo+strNombre+"(archivos.getAttribute_sPath());";
				
			strPrefijo+="\r\n\r\n\t\t} catch(Exception e) {";
			strPrefijo+="\r\n\t\t\tFunciones"+strFrameworkDomain+".manageException(this, e,logger);";
			strPrefijo+="\r\n\r\n\t\t}";
		strPrefijo+="\r\n\t}"; 
	
	return strPrefijo;
}

	public static string GetNombreColumnaClaseTituloC(ColumnSchema column)
	{
		string strNombre =  column.Name.Substring(0, column.Name.Length-1).ToUpper();
		return strNombre;
	}
	
	public string GetSetVariablesFormularioToClaseTableModelC(TableSchema TablaBase){		
		string strVariables=GetSetVariablesFormularioToClaseTableModelBaseC(TablaBase,"",false,"",false);
		
		return strVariables;
	}
	
	public string GetSetVariablesFormularioToClaseTableModelBaseC(TableSchema TablaBase,String strPrefijo,bool paraImportacion,String strTabsExtra,bool conCampoActual){		
		string strVariables="";
		string strElse=" else "; strElse+="";
		string strTabsBase="\r\n\t\t\t";
		string strTabsBaseTryCatch="\r\n\t\t";
		string strSufijoVariables=""; strSufijoVariables+="";
			  
		bool esPrimero=false;
		//string strCommentEjb="";strCommentEjb+="";
		
		String strControl="";strControl+="";
		String strTituloControl="";strTituloControl+="";
		String strTipoControlId="";
		String strTipoControClaselId="";strTipoControClaselId+="";
		String strColumna="";
		String strToString="";strToString+="";
		String strToStringBase=".toString()";strToStringBase+="";
		string strPrefijoTipo="";
		string strPrefijoTipoParse="";
		string strPrefijoTipoAux="";
		string strSufijoTipoAux="";
		string strImportacionReplace="arrColumnas[REPLACE]";
		string strImportacionReplaceFinal="arrColumnas[REPLACE]";
		string strValorTexto="";
		string strValidarColumnInit="";
		string strValidarColumnFin="";
		
		int intCount=-1;
		String strComment="";
		
		/*
		if(ConEjb){
			strCommentEjb="//";
		}
		*/
		
		//System.Windows.Forms.MessageBox.Show("here");
		
		strVariables+="";//"\r\n"+strTabsBase+"Constantes2.S_SELECCIONAR";
		
		//int iPosicion=iPosicionInicialTablaModel;
		
		foreach(ColumnSchema column in TablaBase.Columns) {
			strComment="";
			
			if(EsColumnaOcultaTablaC(column,false) || (!paraImportacion && column.Name.Equals(strVersionRow))) {//column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired)|| column.Name.Equals(strVersionRow)) {
				continue;	
			}						
			
			intCount++;
			
			//strImportacionReplaceFinal=strImportacionReplace.Replace("REPLACE",intCount.ToString());
			strImportacionReplaceFinal=strImportacionReplace.Replace("REPLACE","iColumn++");
			
			strToString="";
			strPrefijoTipoAux="";
			strSufijoTipoAux="";
		
			strValidarColumnInit="";
			strValidarColumnFin="";
		
			strColumna=GetNombreColumnaClaseC(column);
			
			strPrefijoTipo =  GetTipoColumnaClaseC(column);			
			strPrefijoTipoParse=strPrefijoTipo;
			
			if(EsIntColumn(column)) {
				strPrefijoTipoParse="Int";
			}
			
			if(EsDateTimeColumn(column)) {
				strPrefijoTipoAux="new Timestamp(";
				strSufijoTipoAux=".getTime())";
			}
			
			if(!paraImportacion && conCampoActual && !column.IsForeignKeyMember) {
				strVariables+="\r\n"+strTabsBaseTryCatch+strTabsExtra+"try {";
			}
			
			if(column.Name.Equals(strId)) {
				strColumna=GetNombreColumnaClaseC(column);
				//strToString=strToStringBase;
				
				strTipoControlId="jLabel";
				strTipoControClaselId="JLabel";
				
				if(!TieneIdentityColumnC(column)) {
					strTipoControlId="jTextField";
					strTipoControClaselId="JTextFieldMe";
				}
				
				if(!paraImportacion) {
					strValorTexto="this."+strObjetoFormDetalle+strTipoControlId+GetNombreColumnaClaseC(column)/*strIdGetSet*/+GetNombreClaseC(column.Table.ToString())+".getText()";				
				} else {
					strValorTexto=strImportacionReplaceFinal;
				}
				
				if(!paraImportacion) {
					strVariables+=strTabsBase+strTabsExtra+"if("+strValorTexto+"==null || "+strValorTexto+"==\"\" || "+strValorTexto+"==\"Id\") {";
					strVariables+=strTabsBase+strTabsExtra+"\t"+strValorTexto.Replace("getText()","setText(\"0\");");				
					strVariables+=strTabsBase+strTabsExtra+"}\r\n";
				}
				
				strVariables+=strTabsBase+strTabsExtra+"if(conColumnasBase) {"+strPrefijo+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+GetNombreCompletoColumnaClaseC(column)+"("+strPrefijoTipo+".parse"+strPrefijoTipo+"("+strValorTexto+"));}";			
				
			}  else if(column.Name.Equals(strVersionRow)) {
				//strToString=strToStringBase;				
				
				
				//if(!blnConSeguridadFuncionalidad) {//getcon_exportar_campo_version
				//	continue;	
				//}
				
				if(!paraImportacion) {
					strValorTexto="this."+strObjetoFormDetalle+"jLabel"+strVersionRowGetSet+GetNombreClaseC(column.Table.ToString())+".getText()";
				} else {
					strValorTexto=strImportacionReplaceFinal;
				}
				
				strValidarColumnInit="\r\n\r\n\t\t\t\tif(parametroGeneralUsuario.getcon_exportar_campo_version()){";
				strValidarColumnFin="\r\n\t\t\t\t}\r\n";
					
				strVariables+=strValidarColumnInit;
				
				if(!paraImportacion) {
					strVariables+=strTabsBase+strTabsExtra+strPrefijo+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+GetNombreCompletoColumnaClaseC(column)+"("+strPrefijoTipo+".parse"+strPrefijoTipo+"("+strValorTexto+"));";					
				} else {
					strVariables+=strTabsBase+strTabsExtra+strPrefijo+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+GetNombreCompletoColumnaClaseC(column)+"(Timestamp"+/*strPrefijoTipo+*/".valueOf"+/*strPrefijoTipo+*/"("+strValorTexto+"));";
				}
				
				strVariables+=strValidarColumnFin;
				
			} else if(!column.IsForeignKeyMember) {
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {
					if(column.Size<51) {													
						if(!paraImportacion) {
							strValorTexto="this."+strObjetoFormDetalle+"jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".getText()";
						} else {
							strValorTexto=strImportacionReplaceFinal;
						}
				
						strVariables+=strTabsBase+strTabsExtra+strPrefijo+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+GetNombreCompletoColumnaClaseC(column)+"("+strValorTexto+");";						
						
					} else if(column.Size<200) {												
						if(!paraImportacion) {
							strValorTexto="this."+strObjetoFormDetalle+"jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".getText()";
						} else {
							strValorTexto=strImportacionReplaceFinal;
						}
						
						strVariables+=strTabsBase+strTabsExtra+strPrefijo+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+GetNombreCompletoColumnaClaseC(column)+"("+strValorTexto+");";												
					} else {												
						if(!paraImportacion) {
							strValorTexto="this."+strObjetoFormDetalle+"jTextArea"+strColumna+GetNombreClaseC(column.Table.ToString())+".getText()";
						} else {
							strValorTexto=strImportacionReplaceFinal;
						}
						
						strVariables+=strTabsBase+strPrefijo+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+GetNombreCompletoColumnaClaseC(column)+"("+strValorTexto+");";
					}
				} else if(column.DataType==DbType.Boolean) {										
					if(!paraImportacion) {
						strValorTexto="this."+strObjetoFormDetalle+"jCheckBox"+strColumna+GetNombreClaseC(column.Table.ToString())+".isSelected()";
					} else {
						strValorTexto=strImportacionReplaceFinal;
						strValorTexto="Boolean.parseBoolean("+strValorTexto+")";
					}
						
					strVariables+=strTabsBase+strTabsExtra+strPrefijo+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+GetNombreCompletoColumnaClaseC(column)+"("+strValorTexto+");";				
					
				} else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
					//strToString=strToStringBase;										
					if(!paraImportacion) {
						strValorTexto="this."+strObjetoFormDetalle+"jTextField"+strColumna+GetNombreClaseC(column.Table.ToString())+".getText()";
					} else {
						strValorTexto=strImportacionReplaceFinal;
					}
					
					strVariables+=strTabsBase+strTabsExtra+strPrefijo+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+GetNombreCompletoColumnaClaseC(column)+"("+strPrefijoTipo+".parse"+strPrefijoTipoParse+"("+strValorTexto+"));";					
					
				} else if(EsDateColumn(column) || EsDateTimeColumn(column) || EsTimeColumn(column)) {										
					if(!EsTimeColumn(column)) {					
						if(!paraImportacion) {
							strValorTexto="this."+strObjetoFormDetalle+"jDateChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".getDate()";
						} else {
							strValorTexto=strImportacionReplaceFinal;
							
							if(EsDateColumn(column)) {
								strValorTexto="Funciones.ConvertToDate("+strValorTexto+")";
							
							} else if(EsTimeColumn(column) || EsDateTimeColumn(column)) {
								strComment="//";	
							}
						}											
					} else {
						if(!paraImportacion) {
							strValorTexto="new Time(((Date)this."+strObjetoFormDetalle+"jSpinner"+strColumna+GetNombreClaseC(column.Table.ToString())+".getValue()).getTime())";
						} else {
							strValorTexto=strImportacionReplaceFinal;
							
							if(EsDateColumn(column)) {
								strValorTexto="Funciones.ConvertToDate("+strValorTexto+")";
							
							} else if(EsTimeColumn(column) || EsDateTimeColumn(column)) {
								strComment="//";	
							}
						}	
					}
					
					strVariables+=strTabsBase+strTabsExtra+strComment+strPrefijo+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+GetNombreCompletoColumnaClaseC(column)+"("+strPrefijoTipoAux+strValorTexto+strSufijoTipoAux+");";					
					
				} else if((column.NativeType=="image"&&column.DataType==DbType.Binary&&column.Name!=strVersionRow)||(column.DataType==DbType.Binary&&column.Name!=strVersionRow)) {
					if(!paraImportacion) {
						String strValor="this."+strObjetoFormDetalle+"jFileChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".getSelectedFile()";
						strValorTexto="FuncionesSwing.getBytesFromFile("+strValor+")";
						//strValorTexto="this.jFileChooser"+strColumna+GetNombreClaseC(column.Table.ToString())+".getSelectedFile()";
						
						strVariables+=strTabsBase+strTabsExtra+strComment+strPrefijo+"if("+strValor+"!=null){"+GetNombreClaseObjetoC(TablaBase.ToString())+".set"+GetNombreCompletoColumnaClaseC(column)+"("+strPrefijoTipoAux+strValorTexto+strSufijoTipoAux+");}";
					} else {
						
					}
				}
			}
			
			
			if(!paraImportacion && conCampoActual && !column.IsForeignKeyMember) {
				strVariables+=strTabsBaseTryCatch+strTabsExtra+"} catch(Exception e) {";
				strVariables+=strTabsBase+strTabsExtra+"estaValidado=false;"+GetCampoActualLabelAuxiliarC(column,strTabsBase,strTabsExtra);
				strVariables+=strTabsBaseTryCatch+strTabsExtra+"}";
			}
		}
		
		return strVariables;
	}
	
	public String GetCampoActualLabelAuxiliarC(ColumnSchema column,String strTabsBase,String strTabsExtra) {
		String strLabelTitulo=GetNombreTituloControlVariablesSwingC(column,"","",false);
		String strCampoActual="";
		
		strCampoActual=strTabsBase+strTabsExtra+"sMensajeCampoActual+=\"\\r\\n\"+"+GetNombreClaseC(column.Table.ToString())+"ConstantesFunciones.LABEL_"+column.Name.ToUpper()+"+\"-->\"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;";
		strCampoActual+="FuncionesSwing.mostrarCampoMensajeInvalido(false,this."+strObjetoFormDetalle+strLabelTitulo+",ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);";
		
		
		return strCampoActual;
	}
	
	public bool EsColumnaOcultaTablaC(ColumnSchema column) {
		bool esColumnaOculta=EsColumnaOcultaTablaC(column,true);				
	
		return esColumnaOculta;
	}
	
	public bool EsColumnaOcultaTablaC(ColumnSchema column,bool conVersionRow) {
		bool esColumnaOculta=false;
		
		if(GetEsReporteParametroFromPropertiesC(column) 
		   ||!GetShowTableColumnFromPropertiesC(column) 
		   || column.Name==strIsActive
		   || column.Name==strIsExpired 
		   || (column.Name==strVersionRow && conVersionRow)
		) {
			esColumnaOculta=true;
		}
	
		return esColumnaOculta;
	}

	public static bool GetExistTagColumnaFromColumnPropiertiesC(ColumnSchema column,String strTag)
	{
	bool blnExistTag=false;
	String nombreClase="";
		nombreClase+="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals(strTag))
					{
						blnExistTag=true;
						//nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return blnExistTag;
	}
	
	public static string GetTipoColumnaFromColumn(ColumnSchema column)
	{
	
		
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPO"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	
	public static string GetTipoColumnaStoreProcedureFromColumn(ColumnSchema column)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPOSQL"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	
	public static string GetTipoParseColumnaFromColumn(ColumnSchema column,String data)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPO"))
					{
						nombreClase=tipo[1];//+".valueOf("+data+")";
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	public static string GetTipoResultSetColumnaFromColumn(ColumnSchema column)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPO"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	
	public static string GetToStringFromTipoColumnaFromColumn(ColumnSchema column)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPO"))
					{
						nombreClase=".toString()";
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	
	public static string GetTipoColumnaClaseC(ColumnSchema column)
	{
		//Trace.WriteLine("H3123");
	string tipoColumna =  GetTipoColumnaFromColumn(column);
	//System.Windows.Forms.MessageBox.Show("a");
	//Trace.WriteLine(column.Name+"-"+tipoColumna);
	if(tipoColumna!="")
	{
		return tipoColumna;
	}
		
	string param =  column.NativeType;
	string paramType =  column.DataType.ToString();
	
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			param =  "Boolean";
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  "Date";
			}
			else
			{
				//ANTES
				param =  "byte []";
				
				//TEST
				//param =  "File";
			}
			
			break;
		}
		case DbType.DateTime:
		{
			param =  strTipoParaFecha;
			break;
		}
		case DbType.AnsiString:
		{
			param =  "String";
			break;
		}
		case DbType.Int32:case DbType.UInt32:
		{
			param =  "Integer";
			break;
		}
		case DbType.Int64:case DbType.UInt64:
		{
			param =  "Long";
			break;
		}
		case DbType.Int16:case DbType.UInt16:
		{
			param =  "Short";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "String";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "String";
			break;
		}
		
		
		case DbType.String:
		{
			param =  "String";
			break;
		}
		
		case DbType.Decimal:case DbType.Double:
		{
			param =  "Double";
			break;
		}
		default:
		{
			param =  "None:"+paramType ;
			break;
		}

	}
	
	return param;
	}
	
	public static DbType GetTipoDbTypeC(String strType)	{
		DbType param = DbType.String;
		
		switch (strType) {
			case "Boolean": 
				param = DbType.Boolean ;
				break;
			
			case "Date":			
				param =DbType.Binary;								
				break;
							
			case "AnsiString":
				param =DbType.AnsiString  ;
				break;
			
			case "Integer"://DbType.Int32:case DbType.UInt32:			
				param =  DbType.Int32;
				break;
			
			case "Long"://:case DbType.UInt64:			
				param = DbType.Int64 ;
				break;
			
			case "Short"://DbType.Int16:case DbType.UInt16:			
				param = DbType.Int16;
				break;
			
			case "AnsiStringFixedLength":			
				param =  DbType.AnsiStringFixedLength;
				break;
			
			case "StringFixedLength":			
				param =  DbType.StringFixedLength;
				break;						
			
			case "String":			
				param =  DbType.String;
				break;			
			
			case "Double"://:case DbType.Double:			
				param =  DbType.Decimal;
				break;
			
			default:			
				param = DbType.String ;
				break;			
		}
		
		return param;
	}
	
	public static int GetValorHorizontalWebColumnaClaseC(ColumnSchema column)
	{
		//Trace.WriteLine("H3123");
	int tipoColumna = 0;// GetTipoColumnaFromColumn(column);
	//System.Windows.Forms.MessageBox.Show("a");
	//Trace.WriteLine(column.Name+"-"+tipoColumna);
	if(tipoColumna>0)
	{
		return tipoColumna;
	}
		
	int param =  10;
	string paramType =  column.DataType.ToString();
	
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			param =  10;
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  10;
				//param =  "Date";
			}
			else
			{	param =  10;
				//param =  "byte []";
			}
			
			break;
		}
		case DbType.DateTime:
		{
			param =  10;
			//param =  strTipoParaFecha;
			break;
		}
		case DbType.AnsiString:
		{
			param =  10;
			break;
		}
		case DbType.Int32:case DbType.UInt32:
		{
			param =  10;
			break;
		}
		case DbType.Int64:case DbType.UInt64:
		{
			param =  10;
			break;
		}
		case DbType.Int16:case DbType.UInt16:
		{
			param =  10;
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  10;
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  10;
			break;
		}
		
		
		case DbType.String:
		{
			param =  10;
			break;
		}
		
		case DbType.Decimal:case DbType.Double:
		{
			param =  10;
			break;
		}
		default:
		{
			param =  10;
			//param =  "None:"+paramType ;
			break;
		}

	}
	
	return param;
	}
	
	public static int GetValorVerticalWebColumnaClaseC(ColumnSchema column)
	{
		//Trace.WriteLine("H3123");
	int tipoColumna = 0;// GetTipoColumnaFromColumn(column);
	//System.Windows.Forms.MessageBox.Show("a");
	//Trace.WriteLine(column.Name+"-"+tipoColumna);
	if(tipoColumna>0)
	{
		return tipoColumna;
	}
		
	int param =  10;
	string paramType =  column.DataType.ToString();
	
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			param =  10;
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  10;
				//param =  "Date";
			}
			else
			{	param =  10;
				//param =  "byte []";
			}
			
			break;
		}
		case DbType.DateTime:
		{
			param =  10;
			//param =  strTipoParaFecha;
			break;
		}
		case DbType.AnsiString:
		{
			param =  10;
			break;
		}
		case DbType.Int32:case DbType.UInt32:
		{
			param =  10;
			break;
		}
		case DbType.Int64:case DbType.UInt64:
		{
			param =  10;
			break;
		}
		case DbType.Int16:case DbType.UInt16:
		{
			param =  10;
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  10;
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  10;
			break;
		}
		
		
		case DbType.String:
		{
			param =  10;
			break;
		}
		
		case DbType.Decimal:case DbType.Double:
		{
			param =  10;
			break;
		}
		default:
		{
			param =  10;
			//param =  "None:"+paramType ;
			break;
		}

	}
	
	return param;
	}
	
	public static bool EsTipoColumnaStringParaTrimClaseC(ColumnSchema column)
	{
		bool esTipoColumnaParaRegularExpresion=false;
	
		string param =  column.NativeType;
		string paramType =  column.DataType.ToString();
		
		switch (column.DataType) {
			 case DbType.AnsiString: case DbType.AnsiStringFixedLength:case DbType.StringFixedLength:case DbType.String: {
				esTipoColumnaParaRegularExpresion=true;
				break;

			} default: {
				esTipoColumnaParaRegularExpresion=false;
				break;
			}
		}
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public  bool EsTipoColumnaNumeroParaClaseC(ColumnSchema column)
	{
		bool esTipoColumnaParaRegularExpresion=false;
	
		if(EsSmallIntColumn(column)||EsIntColumn(column)||EsBigIntColumn(column)||EsDecimalColumn(column)) {
			esTipoColumnaParaRegularExpresion=true;
		}
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public  bool EsTipoColumnaValorParaClaseC(ColumnSchema column)
	{
		bool esTipoColumnaParaRegularExpresion=false;
	
		if(EsDecimalColumn(column)) {
			esTipoColumnaParaRegularExpresion=true;
		}
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public  bool EsTipoColumnaValorEnteroParaClaseC(ColumnSchema column)
	{
		bool esTipoColumnaParaRegularExpresion=false;
	
		if(EsSmallIntColumn(column)||EsIntColumn(column)||EsBigIntColumn(column)) {
			esTipoColumnaParaRegularExpresion=true;
		}
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public  bool EsTipoColumnaValorGeneralParaClaseC(ColumnSchema column) {
		bool esTipoColumnaParaRegularExpresion=false;
	
		if(EsTipoColumnaValorParaClaseC(column)||EsTipoColumnaValorEnteroParaClaseC(column)) {
			esTipoColumnaParaRegularExpresion=true;
		}
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public static bool EsTipoColumnaParaRegularExpresionClaseC(ColumnSchema column)
	{
		bool esTipoColumnaParaRegularExpresion=false;
		
		esTipoColumnaParaRegularExpresion=EsTipoColumnaStringParaTrimClaseC(column);
		/*
		string param =  column.NativeType;
		string paramType =  column.DataType.ToString();
		
		switch (column.DataType) {
			case DbType.Boolean:{			
				break;
				
			} case DbType.Binary: {				
				break;
				
			} case DbType.DateTime:	{
				break;
				
			} case DbType.AnsiString: {
				esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.Int32:case DbType.UInt32: {
				//esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.Int64:case DbType.UInt64: {
				//esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.Int16:case DbType.UInt16: {
				//esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.AnsiStringFixedLength: {
				esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.StringFixedLength: {
				esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.String: {
				esTipoColumnaParaRegularExpresion=true;
				break;
				
			} case DbType.Decimal:case DbType.Double: {
				//esTipoColumnaParaRegularExpresion=true;
				break;
				
			} default: {
				esTipoColumnaParaRegularExpresion=false;
				break;
			}
		}
		*/
		
		return esTipoColumnaParaRegularExpresion;
	}
	
	public String GetTipoColumnaRegularExpresionClaseC(ColumnSchema column)
	{
		String strTipoColumnaRegularExpresion="SREGEXTODOS";
	
		string param =  column.NativeType;
		string paramType =  column.DataType.ToString();
		
		
		String strTodos="";
		
		if(blnTieneValidacionTodo||EsPathImagenDocumentoColumn(column)) {
			strTodos="TODOS";
		}
				
		
		switch (column.DataType) {
			case DbType.Boolean:{			
				break;
				
			} case DbType.Binary: {				
				break;
				
			} case DbType.DateTime:	{
				break;
				
			} case DbType.AnsiString: {
				strTipoColumnaRegularExpresion="SREGEXCADENA"+strTodos;
				break;
				
			} case DbType.AnsiStringFixedLength: {
				strTipoColumnaRegularExpresion="SREGEXCADENA"+strTodos;
				break;
				
			} case DbType.StringFixedLength: {
				strTipoColumnaRegularExpresion="SREGEXCADENA"+strTodos;
				break;
				
			} case DbType.String: {
				strTipoColumnaRegularExpresion="SREGEXCADENA"+strTodos;
				break;
				
			} case DbType.Int32:case DbType.UInt32: {
				strTipoColumnaRegularExpresion="SREGEXNUMEROENTERO";
				break;
				
			} case DbType.Int64:case DbType.UInt64: {
				strTipoColumnaRegularExpresion="SREGEXNUMEROENTERO";
				break;
				
			} case DbType.Int16:case DbType.UInt16: {
				strTipoColumnaRegularExpresion="SREGEXNUMEROENTERO";
				break;
				
			} case DbType.Decimal:case DbType.Double: {
				strTipoColumnaRegularExpresion="SREGEXNUMERODOUBLE";
				break;
				
			} default: {
				strTipoColumnaRegularExpresion="SREGEXTODOS";
				break;
			}
		}
		
		String strSufijoRegex=GetSufijoRegexTableFromPropertiesC(column);
		
		return strTipoColumnaRegularExpresion+strSufijoRegex;
	}
	
	public String GetTipoColumnaMensajeRegularExpresionClaseC(ColumnSchema column)
	{
		String strTipoColumnaRegularExpresion="SVALIDACIONTODOS";
	
		string param =  column.NativeType;
		string paramType =  column.DataType.ToString();
		
		switch (column.DataType) {
			case DbType.Boolean:{			
				break;
				
			} case DbType.Binary: {				
				break;
				
			} case DbType.DateTime:	{
				break;
				
			} case DbType.AnsiString: {
				strTipoColumnaRegularExpresion="SVALIDACIONCADENA";
				break;
				
			} case DbType.Int32:case DbType.UInt32: {
				strTipoColumnaRegularExpresion="SVALIDACIONNUMEROENTERO";
				break;
				
			} case DbType.Int64:case DbType.UInt64: {
				strTipoColumnaRegularExpresion="SVALIDACIONNUMEROENTERO";
				break;
				
			} case DbType.Int16:case DbType.UInt16: {
				strTipoColumnaRegularExpresion="SVALIDACIONNUMEROENTERO";
				break;
				
			} case DbType.AnsiStringFixedLength: {
				strTipoColumnaRegularExpresion="SVALIDACIONCADENA";
				break;
				
			} case DbType.StringFixedLength: {
				strTipoColumnaRegularExpresion="SVALIDACIONCADENA";
				break;
				
			} case DbType.String: {
				strTipoColumnaRegularExpresion="SVALIDACIONCADENA";
				break;
				
			} case DbType.Decimal:case DbType.Double: {
				strTipoColumnaRegularExpresion="SVALIDACIONNUMERODOUBLE";
				break;
				
			} default: {
				strTipoColumnaRegularExpresion="SVALIDACIONTODOS";
				break;
			}
		}
		
		if(EsPathImagenDocumentoColumn(column)) {
			strTipoColumnaRegularExpresion="SVALIDACIONTODOS";
		}
		
		String strSufijoRegex=GetSufijoRegexTableFromPropertiesC(column);
		
		return strTipoColumnaRegularExpresion+strSufijoRegex;
	}
	
	
	public static string GetTipoColumnaStoreProcedureC(ColumnSchema column)
	{
	string tipoColumna =  GetTipoColumnaStoreProcedureFromColumn(column);
	//System.Windows.Forms.MessageBox.Show(tipoColumna);
	if(tipoColumna!="")
	{
		return tipoColumna;
	}
		
	string param =  column.NativeType;
	string paramType =  column.DataType.ToString();
	
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			param =  "tinyint(4)";
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  "timestamp";
			}
			else
			{
				param =  "binary("+column.Size+")";
			}
			
			break;
		}
		case DbType.DateTime:
		{
			param =  "datetime";
			break;
		}
		case DbType.AnsiString:
		{
			param =   "varchar("+column.Size+")";
			break;
		}
		case DbType.Int32:case DbType.UInt32:
		{
			param =  "int("+column.Size+")";
			break;
		}
		case DbType.Int64:case DbType.UInt64:
		{
			param =  "bigint("+column.Size+")";
			break;
		}
		case DbType.Int16:case DbType.UInt16:
		{
			param =  "int("+column.Size+")";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "char("+column.Size+")";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "char("+column.Size+")";
			break;
		}
		
		
		case DbType.String:
		{
			param =  "varchar("+column.Size+")";
			break;
		}
		
		case DbType.Decimal:case DbType.Double:
		{
			param =  "decimal("+column.Size+","+column.Precision+")";
			break;
		}
		default:
		{
			param =  "None:"+paramType ;
			break;
		}

	}
	
	return param;
	}
	
	public static int GetWidthXmlCabeceraReporteColumnaClaseC(ColumnSchema column,bool paraGenerarReporteVertical,bool paraLabelCabeceras) {
		int intWidth=0;
		
		if(!paraGenerarReporteVertical) {
			if(!column.IsForeignKeyMember) {
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {
					intWidth=intReportWidthLabel;
					
				} else if(column.DataType==DbType.Boolean) {
					intWidth=50;
					
				} else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
					intWidth=50;
					
				} else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime) {
					intWidth=50;
				}
			} else {
				intWidth=intReportWidthLabel;
			}
		
		} else {
			int intProporcion=1;
			
			if(!paraLabelCabeceras) {
				intProporcion=2;
			}
			
			if(!column.IsForeignKeyMember) {
				if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength) {
					intWidth=intReportWidthLabel * intProporcion;
					
				} else if(column.DataType==DbType.Boolean) {
					intWidth=intReportWidthLabel * intProporcion;
					
				} else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64) {
					intWidth=intReportWidthLabel * intProporcion;
					
				} else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime) {
					intWidth=intReportWidthLabel * intProporcion;
				}
			} else {
				intWidth=intReportWidthLabel * intProporcion;
			}
		}
		
		return intWidth;
	}
	
	public static int GetHeightXmlCabeceraReporteColumnaClaseC(ColumnSchema column,bool paraGenerarReporteVertical) {
		int intHeight=intReportHeightLabel;				
		
		return intHeight;
	}
	
	public static int GetHeightSwingFormularioColumnaClaseC(ColumnSchema column)
	{
		int intWidth=0;
		int intHeight=INTSWING_HEIGHT_CONTROL*2;
		
		if(!column.IsForeignKeyMember)
		{
			if(column.DataType==DbType.AnsiString ||column.DataType==DbType.AnsiStringFixedLength ||column.DataType==DbType.String||column.DataType==DbType.StringFixedLength)
			{
				if(column.Size<51){
					intWidth=intHeight;
				} if(column.Size<200){
					intWidth=intHeight*3;
				} else {
					intWidth=intHeight*3;
				}
			}
			else if(column.DataType==DbType.Boolean)
			{
				intWidth=intHeight;
			}
			else if(column.DataType==DbType.Decimal||column.DataType==DbType.Double||column.DataType==DbType.Int16||column.DataType==DbType.Int32||column.DataType==DbType.Int64||column.DataType==DbType.Single||column.DataType==DbType.UInt16||column.DataType==DbType.UInt32||column.DataType==DbType.UInt64)
			{
				intWidth=intHeight;
			}
			else if(column.DataType==DbType.Date||column.DataType==DbType.DateTime)
			{
				intWidth=intHeight;
			}
		}
		else
		{
			intWidth=intHeight;
		}
		
		return intWidth;
	}
	
	public string GetTipoXmlCabeceraReporteColumnaClaseC(ColumnSchema column,int totalWidth,int intSobrante,bool blnNormalOrientation,int contador,bool GenerarParaReporteDinamico,int intYInicial,String JasperReports_Version,int totalHeight,bool paraGenerarReporteVertical)	{					
	//intSobrante=0;
	/*
	if(column.Table.Name.Equals("TipoVisual")) {
		System.Windows.Forms.MessageBox.Show(totalWidth.ToString());
	}
	*/
	
	String strXmlCommentIni="";
	String strXmlCommentFin="";
	
	String strValorX="";
	String strValorY="";
	String strValorWidth="";
	
	String strStaticText="staticText";
	String strTextFieldExpression="text";
	String strFontName="\r\n\t\t\t\t\t\t<font pdfFontName=\"Helvetica-Bold\" size=\"10\" isBold=\"true\"/>";
	
	if(JasperReports_Version.Equals("5.5")) {
		strFontName="<font size=\"10\" isBold=\"true\"/>";
		//strStaticText="textField";
		//strTextFieldExpression="textFieldExpression";
	}
	
	if(GenerarParaReporteDinamico) {
		strXmlCommentIni="<!--col_"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"_col";
		strXmlCommentFin="col_"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"_col-->";
	}
	
	if(!blnNormalOrientation) {
		if(totalWidth>782) {
			if(!paraGenerarReporteVertical) {
				return "";
			}
		}
	}
		
	string param =  column.NativeType;
	string paramType =  column.DataType.ToString();
	int intWidth=0;
	int intHeight=0;
	
	intWidth=GetWidthXmlCabeceraReporteColumnaClaseC(column,paraGenerarReporteVertical,true);
	intHeight=GetHeightXmlCabeceraReporteColumnaClaseC(column,paraGenerarReporteVertical);
	
	int x=totalWidth;
	int y=totalHeight;
	
	/*
	System.Windows.Forms.MessageBox.Show(x.ToString());	
	*/
	
	if(totalWidth!=0) {
		//System.Windows.Forms.MessageBox.Show(contador.ToString());
		if(contador>1) {
			x+=intSobrante * contador;	
		} else {
			x+=intSobrante;	
		}				
	}
	
	intWidth+=intSobrante;
	
	String strNombre =  GetWebNombreTituloColumnFromPropertiesC(column);
						
	strValorX=x.ToString();
	strValorY=y.ToString();
	
	//System.Windows.Forms.MessageBox.Show(x.ToString());	
	
	strValorWidth=intWidth.ToString();
		
	if(GenerarParaReporteDinamico) {
		strValorX="colx_"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"_colx";
		strValorWidth="colancho_"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"_colancho";
	}
	
	//System.Windows.Forms.MessageBox.Show(strValorX);
	
				param="\r\n\t\t\t\t"+strXmlCommentIni+"<"+strStaticText+">";
				param+="\r\n\t\t\t\t\t<reportElement";
				
				if(!paraGenerarReporteVertical) {
					param+="\r\n\t\t\t\t\t\tx=\""+strValorX+"\"";
					param+="\r\n\t\t\t\t\t\ty=\""+intYInicial+"\"";//1
				} else {
					param+="\r\n\t\t\t\t\t\tx=\"0\"";
					param+="\r\n\t\t\t\t\t\ty=\""+strValorY+"\"";//1
				}
				
				param+="\r\n\t\t\t\t\t\twidth=\""+strValorWidth+"\"";
				param+="\r\n\t\t\t\t\t\theight=\"15\"";
				param+="\r\n\t\t\t\t\t\tforecolor=\"#000000\"";
				
				if(paraGenerarReporteVertical) {
					param+="\r\n\t\t\t\t\t\tmode=\"Opaque\"";
					param+="\r\n\t\t\t\t\t\tbackcolor=\"#E8E8E8\"";
				}
				
				param+="\r\n\t\t\t\t\t\tkey=\"element-90\"/>";
				param+="\r\n\t\t\t\t\t<box leftPadding=\"2\" rightPadding=\"2\">";					
				param+="\r\n\t\t\t\t\t<topPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t<leftPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t<bottomPen lineWidth=\"0.0\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t<rightPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
				param+="\r\n\t\t\t\t\t</box>";
				param+="\r\n\t\t\t\t\t<textElement>";
				
				param+=strFontName;
				
				param+="\r\n\t\t\t\t\t</textElement>";
				param+="\r\n\t\t\t\t\t<"+strTextFieldExpression+"><![CDATA["+strNombre+"]]></"+strTextFieldExpression+">";
				param+="\r\n\t\t\t\t</"+strStaticText+">"+strXmlCommentFin;
				
		//System.Windows.Forms.MessageBox.Show(param);
		
		return param;
	}
		
	public String GetRectangleCabeceraC(bool esParaMaestro,bool blnNormalOrientation,bool GenerarParaReporteDinamico,int intYInicial,int intNivelTitulo) {
		String strTablaClaseRelacionada="";
		String strBackcolor="CCCCCC";
		
			
		if(esParaMaestro){
			strBackcolor="999999";
		}
				
		if(intNivelTitulo.Equals(2)) {
			strBackcolor="ECE9E9";
		}
		
		String strXmlCommentIni="";
		String strXmlCommentFin="";
		
		if(GenerarParaReporteDinamico) {
			/*
			strXmlCommentIni="<!--";
			strXmlCommentFin="-->";
			*/
		}
		
		
		strTablaClaseRelacionada+="\r\n\t\t\t\t"+strXmlCommentIni+"<rectangle radius=\"0\">";
		strTablaClaseRelacionada+="\r\n\t\t\t\t\t<reportElement";
		strTablaClaseRelacionada+=" mode=\"Opaque\"";
		strTablaClaseRelacionada+=" x=\"1\"";
		strTablaClaseRelacionada+=" y=\""+intYInicial+"\"";
		strTablaClaseRelacionada+=" width=\""+GetAnchoLineasRectangleC(blnNormalOrientation)+"\"";
		strTablaClaseRelacionada+=" height=\"17\"";
		strTablaClaseRelacionada+=" forecolor=\"#000000\"";
		strTablaClaseRelacionada+=" backcolor=\"#"+strBackcolor+"\"";
		strTablaClaseRelacionada+=" key=\"element-22\"/>";
		strTablaClaseRelacionada+="\r\n\t\t\t\t\t<graphicElement stretchType=\"NoStretch\">";
		strTablaClaseRelacionada+="\r\n\t\t\t\t\t\t<pen lineWidth=\"0.25\" lineStyle=\"Solid\"/>";
		strTablaClaseRelacionada+="\r\n\t\t\t\t\t</graphicElement>";
		strTablaClaseRelacionada+="\r\n\t\t\t\t</rectangle>"+strXmlCommentFin+"";
					
		return strTablaClaseRelacionada; 
	}

	public string GetAnchoLineasRectangleC(bool blnNormalOrientation)	{
		String param= "534";
		
		if(!blnNormalOrientation)
		{
			param= "781";
		}
		return param;
	}
	
	public string GetTipoXmlReporteColumnaClaseC(ColumnSchema column,int totalWidth,int intSobrante,bool blnNormalOrientation,bool GenerarRelacionesMaestro,int contador/*,bool GenerarConImagen*/,bool esParaTotalGroup,bool esParaTotalTotal,bool GenerarParaReporteDinamico,int intYInicial,int totalHeight,bool GenerarReporteVertical) {					
		//intSobrante=0;
		String strXmlCommentIni="";
		String strXmlCommentFin="";
		
		String strValorX="";
		String strValorY="";
		String strValorWidth="";
	
		if(GenerarParaReporteDinamico) {
			strXmlCommentIni="<!--col_"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"_col";
			strXmlCommentFin="col_"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"_col-->";
		}
	
	
		int y=intYInicial;
		
		if(GenerarRelacionesMaestro) {
			y+=intDesplazamientoReporteMaestro;
		}
	
		String strWidthLine="535";
	
		string strPrefijo=String.Empty;
		string strPrefijoTabla=GetPrefijoTablaC().ToLower();
		string strPrefijoTipo =GetPrefijoTipoC(column);
	
		strPrefijo=strPrefijoTabla+strPrefijoTipo;
		
		string strNombre = "";
		
		if(!column.IsForeignKeyMember) {
			strNombre = GetNombreColumnaClaseC(column);
			strPrefijo+=strNombre;
		
		} else {
			TableSchema tableSchemaFk=null;
			
			strPrefijo=GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column));
		}
	
	
		if(!blnNormalOrientation) {
			if(totalWidth>782) {
				if(!GenerarReporteVertical) {
					return "";
				}
			} else {
				strWidthLine="782";
			}
		}
	
		string param =  "";//column.NativeType;
		string paramType =  column.DataType.ToString();
		
		int intWidth=0;
		
		intWidth=GetWidthXmlCabeceraReporteColumnaClaseC(column,GenerarReporteVertical,false);
		
		int x=totalWidth;
		int y2=totalHeight;
	
		if(totalWidth!=0) {
			if(contador>1) {
				x+=intSobrante*contador;	
			} else {
				x+=intSobrante;	
			}	
		}
		
		intWidth+=intSobrante;
		
		//String strNombre = GetNombreColumnaClaseC(column);
				
				
		if(!esParaTotalGroup && !esParaTotalTotal && !GenerarReporteVertical) {
			param="\r\n\t\t\t\t"+strXmlCommentIni+"<line direction=\"TopDown\">";
			param+="\r\n\t\t\t\t\t<reportElement";
			param+="\r\n\t\t\t\t\t\tx=\"0\"";
			param+="\r\n\t\t\t\t\t\ty=\"17\"";
			param+="\r\n\t\t\t\t\t\twidth=\""+strWidthLine+"\"";
			param+="\r\n\t\t\t\t\t\theight=\"0\"";
					
			if(!GenerarRelacionesMaestro) {
				param+="\r\n\t\t\t\t\t\tforecolor=\"#808080\"";
			} else {
				param+="\r\n\t\t\t\t\t\tforecolor=\"#FFFFFF\"";
			}
					
			param+="\r\n\t\t\t\t\t\tkey=\"line\"";
			param+="\r\n\t\t\t\t\t\tpositionType=\"FixRelativeToBottom\"/>";
			param+="\r\n\t\t\t\t\t<graphicElement stretchType=\"NoStretch\">";
			param+="\r\n\t\t\t\t\t<pen lineWidth=\"0.25\" lineStyle=\"Solid\"/>";
			param+="\r\n\t\t\t\t\t</graphicElement>";
			param+="\r\n\t\t\t\t</line>"+strXmlCommentFin;
		}
		
		//if(!EsPathImagenColumn(column)) {
					
		strValorX=x.ToString();
		strValorY=y2.ToString();
		
		strValorWidth=intWidth.ToString();
	
		if(GenerarParaReporteDinamico) {
			strValorX="colx_"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"_colx";
			strValorWidth="colancho_"+GetNombreCompletoClaseRelacionadaFromColumn(column)+"_colancho";
		}
	
		param+="\r\n\t\t\t\t"+strXmlCommentIni+"<textField isStretchWithOverflow=\"false\" isBlankWhenNull=\"false\" evaluationTime=\"Now\" hyperlinkType=\"None\"  hyperlinkTarget=\"Self\" >";
		param+="\r\n\t\t\t\t\t<reportElement";
		
		if(!GenerarReporteVertical) {
			param+="\r\n\t\t\t\t\t\tx=\""+strValorX/*x.ToString()*/+"\"";
			param+="\r\n\t\t\t\t\t\ty=\""+y.ToString()+"\"";
		} else {
			param+="\r\n\t\t\t\t\t\tx=\""+intReportXVerticalColumnaDatos+"\"";
			param+="\r\n\t\t\t\t\t\ty=\""+strValorY+"\"";
		}
		
		param+="\r\n\t\t\t\t\t\twidth=\""+strValorWidth/*intWidth.ToString()*/+"\"";
		param+="\r\n\t\t\t\t\t\theight=\"15\"";
		param+="\r\n\t\t\t\t\t\tkey=\"textField\"/>";
					
		//param+="\r\n\t\t\t\t\t<box topBorder=\"None\" topBorderColor=\"#000000\" leftBorder=\"None\" leftBorderColor=\"#000000\" rightBorder=\"None\" rightBorderColor=\"#000000\" bottomBorder=\"None\" bottomBorderColor=\"#000000\"/>";
					
					
		param+="\r\n\t\t\t\t\t<box>";
		param+="\r\n\t\t\t\t\t\t<topPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
		param+="\r\n\t\t\t\t\t\t<leftPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
		param+="\r\n\t\t\t\t\t\t<bottomPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
		param+="\r\n\t\t\t\t\t\t<rightPen lineWidth=\"0.0\" lineStyle=\"Solid\" lineColor=\"#000000\"/>";
		param+="\r\n\t\t\t\t\t</box>";
					
					
		param+="\r\n\t\t\t\t\t<textElement>";
		param+="\r\n\t\t\t\t\t\t<font/>";
		param+="\r\n\t\t\t\t\t</textElement>";
					
		String strTipo="java.lang.String";					
		String strPrefijoValue="";
		String strTipoValue="F";
		
		if(esParaTotalGroup || esParaTotalTotal) {
			strTipoValue="V";
		}
		
		if(esParaTotalGroup) {
			strPrefijoValue="vg_total_";		
		} else if(esParaTotalTotal) {
			strPrefijoValue="vt_total_total_";
		}
		
		if(column.DataType==DbType.Boolean || column.IsForeignKeyMember) {
			param+="\r\n\t\t\t\t<textFieldExpression class=\""+strTipo +"\"><![CDATA[$F{"+strPrefijo+strDescripcion+"}]]></textFieldExpression>";						
		} else {
			param+="\r\n\t\t\t\t<textFieldExpression class=\""+GetTipoReporteColumnaClaseC(column) +"\"><![CDATA[$"+strTipoValue+"{"+strPrefijoValue+strPrefijo+"}]]></textFieldExpression>";
		}
					
		param+="\r\n\t\t\t\t</textField>"+strXmlCommentFin;
		
		/*
		} else {					
			if(GenerarConImagen) {
				param+="\r\n\t\t\t\t<image>";
				param+="\r\n\t\t\t\t\t<reportElement key=\"image-1\" x=\""+x.ToString()+"\" y=\""+y.ToString()+"\" width=\""+intWidth.ToString()+"\" height=\"95\"/>";
				param+="\r\n\t\t\t\t\t<imageExpression class=\"java.lang.String\"><![CDATA[$F{"+strPrefijo+"}]]></imageExpression>";
				param+="\r\n\t\t\t\t</image>";
			}					
		}
		*/
				
		return param;
	}
	
	public string GetTipoReporteColumnaClaseC(ColumnSchema column)
	{
	string tipoColumna =  GetTipoReporteColumnaFromColumn(column);
	
	if(tipoColumna!="")
	{
		return tipoColumna;
	}
		
	string param =  column.NativeType;
	string paramType =  column.DataType.ToString();
	
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			param =  "java.lang.Boolean";
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  "java.sql.Timestamp";
			}
			else
			{
				param =  "byte []";
			}
			
			break;
		}
		case DbType.DateTime:
		{
			if(EsDateColumn(column)) {
				param =  "java.util.Date";
				
			} else if(EsDateTimeColumn(column)) {
				param =  "java.sql.Timestamp";
				
			} else if(EsTimeColumn(column)) {
				param =  "java.sql.Time";
				
			} else {
				param =  "java.util.Date";
			}
			
			break;
		}
		case DbType.AnsiString:
		{
			param =  "java.lang.String";
			break;
		}
		case DbType.Int32:case DbType.UInt32:
		{
			param =  "java.lang.Integer";
			break;
		}
		case DbType.Int64:case DbType.UInt64:
		{
			param =  "java.lang.Long";
			break;
		}
		case DbType.Int16:case DbType.UInt16:
		{
			param =  "java.lang.Short";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "java.lang.String";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "java.lang.String";
			break;
		}		
		case DbType.String:
		{
			param =  "java.lang.String";
			break;
		}
		
		case DbType.Decimal:case DbType.Double:
		{
			param =  "java.lang.Double";
			break;
		}
		default:
		{
			param =  "None:"+paramType ;
			break;
		}

	}
	
	return param;
	}
	
	public static string GetTipoReporteColumnaFromColumn(ColumnSchema column)
	{
	String nombreClase="";
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPOREPORTE"))
					{
						nombreClase=tipo[1];
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return nombreClase;
	}
	
	public static string GetTipoColumnaClaseGetResulsetC(ColumnSchema column)
	{
		string tipoColumna =  GetTipoResultSetColumnaFromColumn(column);
	
	if(tipoColumna!="")
	{
		return tipoColumna;
	}
	
string param =  column.NativeType;
	
	switch (column.DataType)
	{
		case DbType.DateTime:
		{
			param =  strTipoParaFecha;
			break;
		}
		case DbType.AnsiString:
		{
			param =  "String";
			break;
		}
		case DbType.Boolean:
		{
			param =  "Boolean";
			break;
		}
		case DbType.Int32:
		{
			param =  "Int";
			break;
		}
		case DbType.Int64:
		{
			param =  "Long";
			break;
		}
		case DbType.Int16:
		{
			param =  "Short";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "String";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "String";
			break;
		}
		case DbType.Decimal:
		{
			param =  "Double";
			break;
		}
		
		case DbType.String:
		{
			param =  "String";
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
				param =  "String";
			}
			else
			{
				param =  "Bytes";
				//param =  "BinaryStream";
			}
			
			break;
		}
		default:
		{
			param =  "None";
			break;
		}

	}
	
	return param;
	}
	
	public static string GetTipoControlColumnaClaseC(ColumnSchema column)
	{
string param =  column.NativeType;
	
	switch (column.DataType)
	{
		case DbType.DateTime:
		{
			param =  "dtp";
			break;
		}
		case DbType.Boolean:
		{
			param =  "chk";
			break;
		}
		case DbType.Binary:
		{
			if(column.Name==strVersionRow)
			{
			param =  "hdn";
			}
			else
			{
			param =  "chk";
			}
			break;
		}
		case DbType.AnsiString:
		{
			param =  "txt";
			break;
		}
		case DbType.Int32:
		{
			param =  "ddl";
			break;
		}
		case DbType.Int64:
		{
			param =  "txt";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "txt";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "txt";
			break;
		}		
		case DbType.String:
		{
			param =  "txt";
			break;
		}
		default:
		{
			param =  "NONE";
			break;
		}
	}	
	return param;
	}
	
	public string GetTipoColumnaClaseEnumC(ColumnSchema column) {
	string param =  column.NativeType;
	
	switch (column.DataType)
	{
		case DbType.DateTime:
		{
			if(EsDateColumn(column)) {
				param="DATE";
			} else if(EsDateTimeColumn(column)) {
				param="TIMESTAMP";
			} else if(EsTimeColumn(column)) {
				param="TIME";
			} 
			break;
		}
		case DbType.Boolean:
		{
			param =  "BOOLEAN";
			break;
		}
		case DbType.Binary:
		{
			//PARA MYSQL REPETIR FUNCION DE BYTES PARA BINARYSTREAM EN FRAMEWORKaddMYSQLParameter
			param =  "BYTES";//"BYTES";"BINARYSTREAM";
			break;
		}
		case DbType.AnsiString:
		{
			param =  "STRING";
			break;
		}
		case DbType.Int16:
		{
			param =  "SHORT";
			break;
		}
		case DbType.Int32:
		{
			param =  "INT";
			break;
		}
		case DbType.Int64:
		{
			param =  "LONG";
			break;
		}
		case DbType.AnsiStringFixedLength:
		{
			param =  "STRING";
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  "STRING";
			break;
		}
		
		case DbType.Decimal:
		{
			param =  "DOUBLE";
			break;
		}
		case DbType.String:
		{
			param =  "STRING";
			break;
		}
		default:
		{
			param =  "NONE";
			break;
		}

	}
		param=GetTipoColumnaEnumFromColumn(column,param);
		
	return param;
	}
	
	public static string GetTipoColumnaEnumFromColumn(ColumnSchema column,String strEnum)
	{
	String nombreClase="";
	String nombreEnum=strEnum;
	String[] descripciones;
	String[] tipo;
				
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("TIPO"))
					{
						
						nombreClase=tipo[1];
						
						if(nombreClase.Equals("Date"))
						{
							strEnum="DATE";
						}
						else if(nombreClase.Equals("Timestamp"))
						{
							strEnum="TIMESTAMP";
						}
						break;
					}
				}
				break;
			}
					
		}
			
	
	
	return strEnum;
	}
	
	public static string GetTipoColumnaToString(ColumnSchema column)
	{
	string tipoColumna = GetToStringFromTipoColumnaFromColumn(column);
	
	if(tipoColumna!="")
	{
		return tipoColumna;
	}
	
string param = ".toString()";
	
	switch (column.DataType)
	{
		case DbType.DateTime:
		{
			if(strTipoParaFecha=="String") {
				param = string.Empty;
			}
			
			break;
		}
		case DbType.AnsiString:
		{
			param =   string.Empty;
			break;
		}
		
		
		case DbType.AnsiStringFixedLength:
		{
			param =   string.Empty;
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  string.Empty;
			break;
		}
		
		
		case DbType.String:
		{
			param =   string.Empty;
			break;
		}
		/*default:
		{
			param =  "None";
			break;
		}
		*/
	}
	
	return param;
	}
	
	public static string GetTipoColumnaParse(ColumnSchema column,String data)
	{
		
	string tipoColumna =  GetTipoParseColumnaFromColumn(column,data);
	string param = string.Empty;		
	string paramInit = string.Empty;
	string paramEnd = string.Empty;
	

	if(tipoColumna!="")
	{
		
		if(tipoColumna=="Date") {
			paramInit =  "Funciones.ConvertToDate(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
		} else {
			param=tipoColumna+".valueOf("+data+")";
		}
		
		return param;
	}
	
	//System.Windows.Forms.MessageBox.Show(column.Name);
	//System.Windows.Forms.MessageBox.Show(column.DataType.ToString());		
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			paramInit =  "Boolean.parseBoolean(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
			break;
		}
		case DbType.Int32:
		{
			paramInit =  "Integer.parseInt(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
			break;
		}
		case DbType.Int64:
		{
			paramInit =  "Long.parseLong(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
			break;
		}
		case DbType.Int16:
		{
			paramInit =  "Short.parseShort(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
			break;
		}
		case DbType.Decimal:
		{
			paramInit =  "Double.parseDouble(";
			paramEnd=")";
			param=paramInit+data+paramEnd;
			break;
		}
		case DbType.DateTime:
		{			
			if(strTipoParaFecha=="String") {
				param =   string.Empty;			
			} else {
				paramInit =  "Funciones.ConvertToDate(";
				paramEnd=")";
				param=paramInit+data+paramEnd;
			}
				
			break;
		}
		case DbType.AnsiString:
		{
			param =   string.Empty;
			break;
		}
		
		
		case DbType.AnsiStringFixedLength:
		{
			param =   string.Empty;
			break;
		}
		case DbType.StringFixedLength:
		{
			param =  string.Empty;
			break;
		}
		
		
		case DbType.String:
		{
			param =   string.Empty;
			break;
		}
		case DbType.Binary:
		{
			if(column.Name!=strVersionRow)
			{
				param =  "None";
			}
			else
			{
				paramInit =  "Funciones.ConvertToDate(";
				paramEnd=")";
				param=paramInit+data+paramEnd;
			}
			
			break;
		}
		default:
		{
			param =  "None";
			break;
		}

	}
	if(param==string.Empty)
	{
		param=data;
	}
	else if(param=="None")
	{
		param="null";
	}
	return param;
	}
	
	public string GetDefaultValueColumna(ColumnSchema column)
	{
		string param = string.Empty;
		
		param =GetDefaultValueColumna(column,false);
		
		return param;
		
	}
	
	public static string GetDefaultValueColumna(TableSchema table)
	{
		String nombreTabla="";
		String[] descripciones;
		String[] tipo;
		
		if(table.Description!="") {
			
			descripciones=table.Description.Split('|');
						
						foreach(String descripcion in descripciones)
						{
							tipo=descripcion.Split('=');
							
							if(tipo[0]!=null)
							{
								if(tipo[0].Equals("DEFAULT"))
								{
									nombreTabla=tipo[1];
									break;
								}
							}
						}
		}		
		
		return nombreTabla;
	}
	
	public string GetDefaultValueColumna(ColumnSchema column,bool soloManualDefault)
	{
		string param = string.Empty;		

		if(!soloManualDefault) {
			if(GetEsNullColumnFromPropertiesC(column)/*.AllowDBNull*/) {
				return "null";
			}
		}

		String[] descripciones;
		String[] tipo;
		String strDefault="";
	
		foreach(ExtendedProperty extendedProperty in column.ExtendedProperties)
		{
			if(extendedProperty.Name=="CS_Description")
			{
				descripciones=extendedProperty.Value.ToString().Split('|');
				
				foreach(String descripcion in descripciones)
				{
					tipo=descripcion.Split('=');
					
					if(tipo[0].Equals("DEFAULT"))
					{
						strDefault=tipo[1];
						break;
					}
				}
				break;
			}
					
		}

	if(strDefault!="") {
		return strDefault;
		
	}  else {
		if(column.IsForeignKeyMember) {
			TableSchema tableSchemaForeignKey=GetNombreTablaRelacionadaFromColumn(column);
				
			String strDefaultFromTabla=GetDefaultValueColumna(tableSchemaForeignKey);
				
			if(strDefaultFromTabla!="") {
					
				return strDefaultFromTabla;
			}
		}
	}


	if(!soloManualDefault) {		
		switch (column.DataType)
		{
			case DbType.Int32:
			{
				
				param="0";
				break;
			}
			case DbType.Int64:
			{
				if(!column.IsForeignKeyMember) {
					param="0L";
				} else {
					param="-1L";
				}
				
				break;
			}
			case DbType.Int16:
			{
				param="Short.parseShort(\"0\")";
				break;
			}
			case DbType.Boolean:
			{
				param="false";
				break;
			}
			case DbType.DateTime:
			{
				if(EsDateColumn(column)) {
					param="new Date()";
				} else if(EsDateTimeColumn(column)) {
					param="new Timestamp((new Date()).getTime())";
				} else if(EsTimeColumn(column)) {
					param="new Time((new Date()).getTime())";
				} 
				break;
			}
			
			case DbType.Decimal:
			{
				param="0.0";
				break;
			}
			
			case DbType.AnsiString:
			{
				param ="\"\"";
				break;
			}
			
			
			case DbType.AnsiStringFixedLength:
			{
				param ="\"\"";
				break;
			}
			case DbType.StringFixedLength:
			{
				param ="\"\"";
				break;
			}
			
			
			case DbType.String:
			{
				param ="\"\"";
				break;
			}
			case DbType.Binary:
			{
				//Trace.WriteLine("111");
				
				if(column.Name==strVersionRow)
				{
					param =  "new java.sql.Timestamp(Calendar.getInstance().getTime().getTime())";//"\"\"";
				}
				else
				{
					param =  "null";
				}
				
				break;
			}
			default:
			{
				param =  "None";
				break;
			}
	
		}
	}
	
	return param;
	}
	
	public static string GetNombreCompletoColumnaClaseC(ColumnSchema column) {
		string strPrefijo =GetNombreCompletoColumnaClaseC(column,"");
		
		return strPrefijo;
	}
	
	public static string GetNombreCompletoColumnaClaseC(ColumnSchema column,String strSufijo) {
		if(column.Name==strId) {
			return strIdGetSet;
			
		} else if(column.Name==strIsActive) {
			return strIsActiveGetSet;
			
		} else if(column.Name==strIsExpired) {
			return strIsExpiredGetSet;
			
		} else if(column.Name==strVersionRow) {
			return strVersionRowGetSet;
		}
		
		string strPrefijo =GetPrefijoTablaC()+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column)+strSufijo;
	
	
		return strPrefijo;
	}
	public static string GetNombreCompletoLowerColumnaClaseC(ColumnSchema column)
{
	if(column.Name==strId)
	{
		return strIdGetSet;
	}
	else if(column.Name==strIsActive)
	{
		return strIsActiveGetSet;
	}
	else if(column.Name==strIsExpired)
	{
		return strIsExpiredGetSet;
	}
	else if(column.Name==strVersionRow)
	{
		return strVersionRowGetSet;
	}
	
	string strPrefijo =GetPrefijoTablaC().ToLower()+GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
	
	
	return strPrefijo;
}

	public static string GetNombreCompletoColumnaClaseSinPrefijoTablaC(ColumnSchema column)
{
	string strPrefijo =GetPrefijoTipoC(column)+GetNombreColumnaClaseC(column);
	
	
	return strPrefijo;
}
/*		
	public static string GetNombreCampoTablaC(ColumnSchema column)
{
	string strPrefijo =column.Name;
	
	
	return strPrefijo;
}
*/	
		#region NetTiersFunctions

// [ab 012605] convenience array for checking if a datatype is an integer 
		private readonly static DbType[] aIntegerDbTypes = new DbType[] {DbType.Int16,DbType.Int32, DbType.Int64 };
		
		private string entityFormat 		= "{0}";
		private string componentServiceFormat = "{0}Service";
		private string entityDataFormat 	= "{0}EntityData";
		private string collectionFormat 	= "{0}Collection";
		private string genericListFormat 	= "TList<{0}>";
		private string genericViewFormat 	= "VList<{0}>";
		private string providerFormat 		= "{0}Provider";
		private string interfaceFormat	 	= "I{0}";
		private string baseClassFormat 		= "{0}Base";
		private string unitTestFormat		= "{0}Test";
		private string enumFormat 			= "{0}List";
		private string manyToManyFormat		= "{0}From{1}";
		private string strippedTablePrefixes		= "tbl;tbl_";
		private string customProcedureStartsWith = "_{0}_";
		private string aliasFilePath 		= "";
		private string procedurePrefix = "";
		private string auditUserField = "";
		private string auditDateField = "";
		private bool cspUseDefaultValForNonNullableTypes = false;
		private bool parseDbColDefaultVal  = false;
		private bool changeUnderscoreToPascalCase  = false;
		private bool includeCustoms = true;

		private MethodNamesProperty methodNames = null;
		private Hashtable aliases = null;
		
		#region CSharpKeywords
		
		private string[] csharpKeywords = new string[77] 
		{
				"abstract","event", "new", "struct", 
				"as", "explicit", "null", "switch",
				"base", "extern", "object", "this",
				"bool", "false", "operator", "throw",
				"break", "finally", "out", "true",
				"byte", "fixed", "override", "try",
				"case", "float", "params", "typeof",
				"catch", "for", "private", "uint",
				"char", "foreach", "protected", "ulong",
				"checked", "goto", "public", "unchecked",
				"class", "if", "readonly", "unsafe",
				"const", "implicit", "ref", "ushort",
				"continue","in","return","using",
				"decimal","int","sbyte","virtual",
				"default","interface","sealed","volatile",
				"delegate","internal","short","void",
				"do","is","sizeof","while",
				"double","lock","stackalloc",
				"else","long","static",
				"enum","namespace", "string"
		}; 
		
		#endregion 
		
		/// <summary>
		/// Return a specified number of tabs
		/// </summary>
		/// <param name="n">Number of tabs</param>
		/// <returns>n tabs</returns>
		public string Tab(int n)
		{
			return new String('\t', n);
		}
		
		#region Diagnostics
		
		/// <summary>
		/// Gets or sets a value that indicates if output during generation should
		/// be verbose or not.
		/// </summary>
		protected bool Verbose { get { return verbose; } set { verbose = value; } }
		private bool verbose = false;

		
		/// <summary>
		/// Write a message to the debug log.
		/// </summary>
		protected void DebugWriteLine(string msg)
		{
			if (Verbose && msg != null && msg.Length > 0)
				System.Diagnostics.Debug.WriteLine(msg);
		}
		#endregion
		
		
		#region "9. Code Style public properties"
		MethodNamesProperty MethodNames
		{
			get
			{
				if ( methodNames == null )
				{
					methodNames = new MethodNamesProperty();
				}
				
				return methodNames;
			}
			set { methodNames = value; }
		}
		
		/// <summary>
		/// This property is used to set the MethodNames property from NetTiers.cst
		/// due to runtime error when trying to set it directly using an object value.
		/// </summary>
		string MethodNamesValues
		{
			get { return MethodNames.ToStringList(); }
			set { MethodNames = new MethodNamesProperty(value); }
		}
		
		string StrippedTablePrefixes
		{
			get {return this.strippedTablePrefixes;}
			set	{this.strippedTablePrefixes = value;}
		}
		
		string EntityFormat
		{
			get {return this.entityFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "EntityFormat");
				}
				this.entityFormat = value;
			}
		}
		
		string CollectionFormat
		{
			get {return this.collectionFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "CollectionFormat");
				}
				this.collectionFormat = value;
			}
		}
		
		string GenericViewFormat
		{
			get {return this.genericViewFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "GenericViewFormat");
				}
				this.genericViewFormat = value;
			}
		}
		
		string GenericListFormat
		{
			get {return this.genericListFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "GenericListFormat");
				}
				this.genericListFormat = value;
			}
		}
		
		
		
		string ProviderFormat
		{
			get {return this.providerFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "ProviderFormat");
				}
				this.providerFormat = value;
			}
		}
		
		string InterfaceFormat
		{
			get {return this.interfaceFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "InterfaceFormat");
				}
				this.interfaceFormat = value;
			}
		}
		
		string BaseClassFormat
		{
			get {return this.baseClassFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "BaseClassFormat");
				}
				this.baseClassFormat = value;
			}
		}
		
		string EnumFormat
		{
			get {return this.enumFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "EnumFormat");
				}
				this.enumFormat = value;
			}
		}
		
			string ManyToManyFormat
		{
			get {return this.manyToManyFormat;}
			set
			{
				if (value.IndexOf("{0}") == -1) 
				{
					throw new ArgumentException("This parameter must contains the pattern {0} to be valid.", "ManyToManyFormat");
				}
				this.manyToManyFormat = value;
			}
		}
				
		bool ParseDbColDefaultVal
		{
			get { return this.parseDbColDefaultVal; }
			set { this.parseDbColDefaultVal = value; }
		}
		
	bool ChangeUnderscoreToPascalCase
		{
			get { return this.changeUnderscoreToPascalCase; }
				set { this.changeUnderscoreToPascalCase = value; }
		}
		
		
				string AliasFilePath
		{
			get {return this.aliasFilePath;}
			set	{this.aliasFilePath = value;}
		}
		
		string ProcedurePrefix
		{
			get {return this.procedurePrefix;}
			set
			{
				if (value == null || value == string.Empty)
					return;
				this.procedurePrefix = value;
			}
		}

		string CustomProcedureStartsWith
		{
			get { return this.customProcedureStartsWith; }
			set { this.customProcedureStartsWith = value; }
		}
		
		bool IncludeCustoms
		{
			get { return this.includeCustoms; }
			set { this.includeCustoms = value; }
		}		
		
			bool CSPUseDefaultValForNonNullableTypes
		{
			get { return this.cspUseDefaultValForNonNullableTypes; }
			set { this.cspUseDefaultValForNonNullableTypes = value; }
		}
		
		public enum CustomNonMatchingReturnType
		{
			DataSet,
			IDataReader
		}
		#endregion

		/// <summary>
		/// Get the safe name for a data object by determining if it contains spaces or other illegal
		/// characters - if so wrap with []
		/// </summary>
		/// <param name="schemaObject">Database schema object (e.g. a table, stored proc, etc)</param>
		/// <returns>The safe name of the object</returns>
		public string GetSafeName(SchemaObjectBase schemaObject)
		{
			return GetSafeName(schemaObject.Name);
		}

		/// <summary>
		/// Get the safe name for a data object by determining if it contains spaces or other illegal
		/// characters - if so wrap with []
		/// </summary>
		/// <param name="objectName">The name of the database schema object</param>
		/// <returns>The safe name of the object</returns>
		public string GetSafeName(string objectName)
		{
			return objectName.IndexOfAny(new char[]{' ', '@', '-', ',', '!'}) > -1 ? "[" + objectName + "]" : objectName;
		}

		/// <summary>
		/// Get the camel cased version of a name.  
		/// If the name is all upper case, change it to all lower case
		/// </summary>
		/// <param name="name">Name to be changed</param>
		/// <returns>CamelCased version of the name</returns>
        public string GetCamelCaseName(string name)
        {
            if (name.Equals(name.ToUpper()) && name.IndexOf("_") == -1)
                return name.ToLower().Replace(" ", "");
            else
            {
                // first get the PascalCase version of the name (DRY)
                string pascalName = GetPascalCaseName(name);
                // now lowercase the first character to transform it to camelCase
                return pascalName.Substring(0, 1).ToLower() + pascalName.Substring(1);
            }
        }

        /// <summary>
        /// Get the Pascal cased version of a name.  
        /// </summary>
        /// <param name="name">Name to be changed</param>
        /// <returns>PascalCased version of the name</returns>
        public string GetPascalCaseName(string name)
        {
			string[] splitNames;
			if (ChangeUnderscoreToPascalCase)
			{
				char[] splitter = {'_', ' '};
				splitNames = name.Split(splitter);
			}	
			else
			{
				char[] splitter =  {' '};
				splitNames = name.Split(splitter);
			}
			
            string pascalName = "";
            foreach (string s in splitNames)
            {
                if (s.Length > 0)
                    pascalName += s.Substring(0, 1).ToUpper() + s.Substring(1);
            }

            return pascalName;
        }

        /// <summary>
        /// Get the Pascal spaced version of a name.  
        /// </summary>
        /// <param name="name">Name to be changed</param>
        /// <returns>PascalSpaced version of the name</returns>
        public string PascalToSpaced(string name)
        {
            Regex regex = new Regex("(?<=[a-z])(?<x>[A-Z])|(?<=.)(?<x>[A-Z])(?=[a-z])");
            return regex.Replace(name, " ${x}");
        }

        /// <summary>
        /// Get the Pascal spaced version of a name.  
        /// </summary>
        /// <param name="name">Name to be changed</param>
        /// <returns>PascalSpaced version of the name</returns>
        public string GetPascalSpacedName(string name)
        {
            return PascalToSpaced(GetClassName(name));
        }		

		/// <summary>
		/// Remove any non-word characters from a SchemaObject's name (word characters are a-z, A-Z, 0-9, _)
		/// so that it may be used in code
		/// </summary>
		/// <param name="schemaObject">DB Object whose name is to be cleaned</param>
		/// <returns>Cleaned up object name</returns>
		public string GetCleanName(SchemaObjectBase schemaObject)
		{
			return GetCleanName(schemaObject.Name);
		}
		
		
		/// <summary>
		/// Applies the configured string format to the table module
		/// </summary>
		private string ApplyBaseClassFormat(string className)
		{
			return string.Format(baseClassFormat, className);
		}
		
		#region Business object class name
		/// <summary>
		/// Gets the abstract class name of a table.
		/// </summary>
		public string GetAbstractClassName(string tableName)
		{
			return ApplyBaseClassFormat(GetClassName(tableName));
		}
		
		/// <summary>
		/// Get the name of the IEntityKey implementation for the specified table.
		/// </summary>
		public string GetKeyClassName(string tableName)

		{
			return String.Format("{0}Key", GetClassName(tableName));
		}
		
		/// <summary>
		/// Get a partial class name from a standard class name.
		/// </summary>
		/// <param name="className">The normal class name.</param>
		public string GetPartialClassName(string className)
		{
			return string.Format("{0}.generated", className);
		}
		
		
		/// <summary>
		/// Get a service based class name from a standard class name.
		/// </summary>
		/// <param name="className">The normal class name.</param>
		public string GetServiceClassName(string className)
		{
			return string.Format("{0}Service", GetClassName(className));
		}

		/// <summary>
		/// Get a partial class name from a standard class name.
		/// </summary>
		/// <param name="className">The normal class name.</param>
		public string GetAbstractServiceClassName(string className)
		{
			return string.Format("{0}ServiceBase", GetClassName(className));
		}
		
		/// <summary>
		/// Get the proxy class name of the Data Repository.
		/// </summary>
		/// <param name="className">The normal class name.</param>
		public string GetProxyClassName(string className)
		{
			return string.Format("{0}Services", className);
		}
		
		/// <summary>
		/// 
		/// </summary>
		public string GetEnumName(string tableName)
		{
			return string.Format(this.enumFormat, GetClassName(tableName));
		}
				
		/// <summary>
		/// 
		/// </summary>
		public string GetStructName(string tableName)
		{
			return string.Format(this.entityDataFormat, GetClassName(tableName));
		}
				
		
		/// <summary>
		/// This function get the alias name for this object name.
		/// </summary>
		/// <remark>This function should not be called directly, but via the GetClassName.</remark>
		public string GetAliasName(string tableName)
		{
			tableName = GetCleanName(tableName);
			
			// If the aliases aren't loaded yet, and the filepath exists, then load the hashtable of aliases.
			if (aliases == null && File.Exists(this.aliasFilePath))
			{				
				//Debugger.Break();
				aliases = new Hashtable();
				using (StreamReader sr = new StreamReader(this.aliasFilePath))
				{
					string line;
					while ((line = sr.ReadLine()) != null)	
					{
						if (line.IndexOf(strSimboloDosPuntos) > 0)
						{
							aliases.Add(line.Split(':')[0], (line.Split(':')[1]));
						}
					}
				}
			}
			
			// See if our tablename is in the aliases hashtable, and if so, replace it.
			if (aliases != null)
			{
				//Debugger.Break();
				IDictionaryEnumerator alias = aliases.GetEnumerator();
				while (alias.MoveNext())
				{
					if (tableName.ToLower() == alias.Key.ToString().ToLower())
					{
						tableName = alias.Value.ToString();
						break;
					}
				}
			}
			return tableName;
		}
				
		/// <summary>
		///  Create a class name from a table name, for a business object.
		/// Is an alias file is present, use the defined mapping.
		/// Otherwise, use the cleaned table name.
		/// </summary>
		public string GetClassName(TableSchema tableName)
		{
			return GetClassName(tableName.Name);
		}
		
		/// <summary>
		///  Create a class name from a table name, for a business object.
		/// Is an alias file is present, use the defined mapping.
		/// Otherwise, use the cleaned table name.
		/// </summary>
		public string GetClassName(string tableName)
		{
			
			if (File.Exists(this.aliasFilePath))
			{			
				//See newName there is any alias for this table name
				string tableAlias = GetAliasName(tableName);
				// see if the alias and original table name are the different
				if ( string.Compare(tableName, tableAlias, true) != 0 )
					return tableAlias;

				// ok, just fall thru and allow normal stripping of prefixes
			}
						
			
			// Otherwise just use the old good method ;-) (strip prefix, remove bad char, Pascal case)
			
			// 1. strip prefix
			string newName = tableName;
			
			string[] strips = this.strippedTablePrefixes.Split(new char[] {',', ';'});
			foreach(string strip in strips)
			{
            if (newName.StartsWith(strip))
				{
					newName = newName.Remove(0, strip.Length);
					continue;
				}
			}
			
			// 2.remove space or bad characters
			newName = GetCleanName(string.Format(this.entityFormat, newName));
			
			if (Regex.IsMatch(newName, @"^[\d]"))
				newName="Entity" + newName;
				
			// 3. Set Pascal case
			return GetPascalCaseName(newName);
			
			/*
			// 3. Remove any plural - Experimental, need more grammar analysis//ref: http://www.gsu.edu/~wwwesl/egw/crump.htm
			ArrayList invariants = new ArrayList();
			invariants.Add("alias");
							
			if (invariants.Contains(name.ToLower()))
			{
				return name;
			}
			else if (name.EndsWith("ies"))
			{
				return name.Substring(0, name.Length-3) + "y";
			}
			else if (name.EndsWith("s") && !(name.EndsWith("ss") || name.EndsWith("us")))
			{
				return name.Substring(0, name.Length-1);
			}
			else
				return name;	
			*/		
		}		
		#endregion
		
		
		#region collection class name
		/// <summary>
		/// 
		/// </summary>
		public string GetAbstractCollectionClassName(string tableName)
		{
			return ApplyBaseClassFormat(GetCollectionClassName(tableName));
		}
		/// <summary>
		/// 
		/// </summary>
		public string GetCollectionClassName(string tableName)
		{
			return string.Format(genericListFormat, GetClassName(tableName));
		}
		
		public string GetViewCollectionClassName(string tableName)
		{
			return string.Format(genericViewFormat, GetClassName(tableName));
		}
		
		public string GetCollectionPropertyName(string tableName)
		{
			return string.Format(collectionFormat, GetClassName(tableName));
		}
		
		#endregion

		#region Provider class name
		/// <summary>
		/// 
		/// </summary>
		public string GetProviderName(string tableName)
		{
			return string.Format(providerFormat, GetClassName(tableName));
		}
		
		/// <summary>
		/// 
		/// </summary>
		public string GetProviderClassName(string tableName)
		{
			return GetProviderName(tableName);
		}
		
		/*public string GetProviderDecoratorClassName(string tableName)
		{
			return string.Format(decoratorFormat, GetProviderClassName(tableName));
		}*/
		/// <summary>
		/// 
		/// </summary>
		public string GetIProviderName(string tableName)
		{
			return string.Format(interfaceFormat, GetProviderClassName(tableName));
		}
		/// <summary>
		/// 
		/// </summary>
		public string GetProviderBaseName(string tableName)
		{
			return ApplyBaseClassFormat(GetProviderClassName(tableName));
		}
		/// <summary>
		/// 
		/// </summary>
		public string GetProviderTestName(string tableName)
		{
			return string.Format(unitTestFormat, GetClassName(tableName));
		}
		#endregion
		
		#region Factory class name
				
		/// <summary>
		/// 
		/// </summary>
		public string GetAbstractRepositoryClassName(string tableName)
		{
			return ApplyBaseClassFormat(GetRepositoryClassName(tableName));
		}
		
		/// <summary>
		/// 
		/// </summary>
		public string GetRepositoryClassName(string tableName)
		{
			return GetProviderName(tableName);
		}		
		
		/// <summary>
		/// 
		/// </summary>
		public string GetRepositoryTestClassName(string tableName)
		{
			return string.Format(unitTestFormat, GetClassName(tableName));
		}
		#endregion
		
        #region 6b - Web Advanced Options
        /// <summary>
        /// Build and return a concatened list of columns that are contained in the specified key. (ex: Column1, Column2() )
        /// </summary>
        /// <param name="keys"> the key instance.</param>
        public string GetDataKeyNames(ColumnSchemaCollection keys)
        {
            StringBuilder Name = new StringBuilder();
            for (int x = 0; x < keys.Count; x++)
            {
                Name.Append(GetPropertyName(keys[x].Name));
                if (x < keys.Count - 1)
                {
                    Name.Append(", ");
                }
            }
            return Name.ToString();
        }

        /// <summary>
        /// Returns TableSchemaCollection of tables by a fk
        /// </summary>
        /// <param name="col"></param>
        /// <param name="sourceTables"></param>
        /// <returns></returns>
        public TableSchemaCollection GetTablesCollectionByFk(ColumnSchema col, TableSchemaCollection sourceTables)
        {
            TableSchemaCollection SourceTablesRelated = new TableSchemaCollection();

            for (int x = 0; x < sourceTables.Count; x++)
            {
                TableSchema SourceTable = sourceTables[x];
                foreach (ColumnSchema tCol in SourceTable.Columns)
                {
                    if (col.Name == tCol.Name && col.SystemType == tCol.SystemType && tCol.IsForeignKeyMember && !tCol.IsPrimaryKeyMember)
                        SourceTablesRelated.Add(SourceTable);
                }
            }

            return SourceTablesRelated;
        }

        #endregion

		/// <summary>
		/// Remove any non-word characters from a name (word characters are a-z, A-Z, 0-9, _)
		/// so that it may be used in code
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>Cleaned up object name</returns>
		public string GetCleanName(string name)
		{
			return Regex.Replace(name, @"[\W]", "");
		}
		
		/// <summary>
		/// Remove any non-word characters from a name (word characters are a-z, A-Z, 0-9, _)
		/// with the exception of a period (.)
		/// so that it may be used in code
		/// </summary>
		/// <remarks>
		///		Meant to be used to format things like namespaces and database names.
		///	</remarks>
		/// <param name="name">name to be cleaned</param>
		/// <returns>Cleaned up object name</returns>
		public string GetCleanName2(string name)
		{
			return Regex.Replace(name, @"[^A-Za-z0-9_\.]", "");
		}
		
		/// <summary>
		/// Transform the name of a column into a public class property name.
		/// </summary>
		public string GetPropertyName(ColumnSchema column)
		{
			if (column == null)
				return "";
				
		   	return GetPropertyName(column.Name);
		}
		
		/// <summary>
		/// Transform a name into a public class property name.
		/// </summary>
		public string GetPropertyName(string name)
		{
		   	name = Regex.Replace(name, @"[\W]", "");
		   	name = name.TrimStart(new char[] {'_', '-', '+', '=', '*'});
			name = GetPascalCaseName(name);
			
			if (Regex.IsMatch(name, @"^[\d]"))
				name="Data" + name;
			return name;
		}
		
		/// <summary>
		/// Gets the expression used to set the property value in an entity.  Specificly used to handle nullable columns.
		/// </summary>
		/// <param name="column">The column object </param>
		/// <param name="containerName">The object that has a string indexer for the column (DataRow, IDataReader, etc)</param>
		/// <param name="objectName">The object instance name.</param>
		/// <param name="indent">How tabs should the code be indented</param>
		/// <returns>An expression that sets the property based on contents of the column in the container.</returns>
		/// <remarks>This method should not append the trailing semicolon.</remarks>
		public string GetObjectPropertySetExpression(ColumnSchema column, string containerName, string objectName, int indent)
		{
			if ( column.AllowDBNull )
			{
				return string.Format("{2} = ({1}.IsDBNull({1}.GetOrdinal(\"{0}\")))?null:({3}){1}[\"{0}\"]",
						/*0*/column.Name,
						/*1*/containerName,
						/*2*/GetObjectPropertyAccessor(column,objectName),
						/*3*/GetCSType(column));
			}
			else
			{
				// regular NOT NULL data types, set to default value for type if null
				return string.Format("{2} = ({3}){1}[\"{0}\"]",
					/*0*/column.Name,
					/*1*/containerName,
					/*2*/GetObjectPropertyAccessor(column,objectName),
					/*3*/GetCSType(column),
					/*4*/GetCSDefaultByType(column));
			}
		}
		
		/// <summary>
		/// Gets the expression used to set the property value in an entity.  Specificly used to handle nullable columns.
		/// </summary>
		/// <param name="column">The column object </param>
		/// <param name="containerName">The object that has a string indexer for the column (DataRow, IDataReader, etc)</param>
		/// <param name="objectName">The object instance name.</param>
		/// <param name="indent">How tabs should the code be indented</param>
		/// <returns>An expression that sets the property based on contents of the column in the container.</returns>
		/// <remarks>This method should not append the trailing semicolon.</remarks>
		public string GetOriginalObjectPropertySetExpression(ColumnSchema column, string containerName, string objectName, int indent)
		{
			if ( column.AllowDBNull )
			{
				return string.Format("{2} = ({1}.IsDBNull({1}.GetOrdinal(\"{0}\")))?null:({3}){1}[\"{0}\"]",
						/*0*/column.Name,
						/*1*/containerName,
						/*2*/GetOriginalObjectPropertyAccessor(column,objectName),
						/*3*/GetCSType(column));
			}
			else
			{
				// regular NOT NULL data types, set to default value for type if null
				return string.Format("{2} = ({3}){1}[\"{0}\"]",
					/*0*/column.Name,
					/*1*/containerName,
					/*2*/GetOriginalObjectPropertyAccessor(column,objectName),
					/*3*/GetCSType(column),
					/*4*/GetCSDefaultByType(column));
			}
		}

		/// <summary>
		/// Gets the expression used to set the property value in an entity.  Specificly used to handle nullable columns.
		/// </summary>
		/// <param name="column">The column object </param>
		/// <param name="containerName">The object that has a string indexer for the column (DataRow, IDataReader, etc)</param>
		/// <param name="objectName">The object instance name.</param>
		/// <param name="indent">How tabs should the code be indented</param>
		/// <returns>An expression that sets the property based on contents of the column in the container.</returns>
		/// <remarks>This method should not append the trailing semicolon.</remarks>
		public string GetDatasetPropertySetExpression(ColumnSchema column, string containerName, string objectName, int indent)
		{
			if ( column.AllowDBNull )
			{
				return string.Format("{2} = (Convert.IsDBNull({1}[\"{0}\"]))?null:({3}){1}[\"{0}\"]",
						/*0*/column.Name,
						/*1*/containerName,
						/*2*/objectName,
						/*3*/GetCSType(column));
			}
			else
			{
				// regular NOT NULL data types, set to default value for type if null
				return string.Format("{2} = ({3}){1}[\"{0}\"]",
					/*0*/column.Name,
					/*1*/containerName,
					/*2*/objectName,
					/*3*/GetCSType(column),
					/*4*/GetCSDefaultByType(column));
			}
		}
		
		/// <summary>
		/// Gets the expression used to set the property value in an entity.  Specificly used to handle nullable columns.
		/// </summary>
		/// <param name="column">The column object </param>
		/// <param name="containerName">The object that has a string indexer for the column (DataRow, IDataReader, etc)</param>
		/// <param name="objectName">The object instance name.</param>
		/// <param name="indent">How tabs should the code be indented</param>
		/// <returns>An expression that sets the property based on contents of the column in the container.</returns>
		/// <remarks>This method should not append the trailing semicolon.</remarks>
		public string GetObjectPropertySetExpression(ViewColumnSchema column, string containerName, string objectName, int indent)
		{
			if ( column.AllowDBNull )
			{
				// nullable reference types (strings), set to null if null retrieved from database
				return string.Format("{2} = ({1}.IsDBNull({1}.GetOrdinal(\"{0}\")))?null:({3}){1}[\"{0}\"]",
					/*0*/column.Name,
					/*1*/containerName,
					/*2*/GetObjectPropertyAccessor(column,objectName),
					/*3*/GetCSType(column));
			}
			else
			{
				// regular NOT NULL data types, set to default value for type if null
				return string.Format("{2} = ({3}){1}[\"{0}\"]",
					/*0*/column.Name,
					/*1*/containerName,
					/*2*/GetObjectPropertyAccessor(column,objectName),
					/*3*/GetCSType(column),
					/*4*/GetCSDefaultByType(column));
			}
		}

		/// <summary>
		/// Gets the expression used to set the property value in an entity.  Specificly used to handle nullable columns.
		/// </summary>
		/// <param name="column">The column object </param>
		/// <param name="containerName">The object that has a string indexer for the column (DataRow, IDataReader, etc)</param>
		/// <param name="objectName">The object instance name.</param>
		/// <param name="indent">How tabs should the code be indented</param>
		/// <returns>An expression that sets a temporary variable with a null value if possible.</returns>
		/// <remarks>This method should not append the trailing semicolon.</remarks>
		public string GetKeyIfNullable(ColumnSchema column, string objectName)
		{
			if ( column.AllowDBNull )
			{
				// nullable reference types (strings), set to null if null retrieved from database
				return string.Format("{2} tmp = {1} ?? {1}",
					/*0*/GetObjectPropertyAccessor(column,objectName),
					/*1*/GetCSDefaultByType(column));
			}
			return "";
		}
		
		/// <summary>
		/// Creates a string that reprensents an entity and its property.
		/// </summary>
		/// <param name="objectName">Name of the object.</param>
		/// <param name="column">Name of the column that define the property.</param>
		public string GetObjectPropertyAccessor(ColumnSchema column, string objectName)
		{
			return objectName + "." + GetPropertyName(column.Name);
		}
		
		/// <summary>
		/// Creates a string that reprensents an entity and its property.
		/// </summary>
		/// <param name="objectName">Name of the object.</param>
		/// <param name="column">Name of the column that define the property.</param>
		public string GetObjectPropertyAccessorWithDefault(ColumnSchema column, string objectName)
		{
			
			if ( column.AllowDBNull )
			{
				// nullable reference types (strings), set to null if null retrieved from database
				return string.Format("({0} ?? {1})",
					/*0*/GetObjectPropertyAccessor(column,objectName),
					/*1*/GetCSDefaultByType(column));
			}
			return objectName + "." + GetPropertyName(column.Name);
		}
		
		/// <summary>
		/// Creates a string that reprensents an entity and its property.
		/// </summary>
		/// <param name="objectName">Name of the object.</param>
		/// <param name="column">Name of the column that define the property.</param>
		public string GetOriginalObjectPropertyAccessor(ColumnSchema column, string objectName)
		{
			return objectName + ".Original" + GetPropertyName(column.Name);
		}

		/// <summary>
		/// Creates a string that reprensents an entity and its property.
		/// </summary>
		/// <param name="objectName">Name of the object.</param>
		/// <param name="column">Name of the column that define the property.</param>
		public string GetObjectPropertyAccessor(ViewColumnSchema column, string objectName)
		{
			return objectName + "." + GetPropertyName(column.Name);
		}
		
		/// <summary>
		/// Creates a string that retpresents a column as a class private member.
		/// </summary>
		/// <param name="column">the database column from which we want the generate a private member.</param>
		public string GetPrivateName(ColumnSchema column)
		{
			return GetPrivateName(column.Name);
		}
		

		
		/// <summary>
		/// Creates a string that retpresents a column as a class private member.
		/// </summary>
		/// <param name="name">the name from which we want the generate a private member.</param>
		public string GetPrivateName(string name)
		{		
		   	name = Regex.Replace(name, @"[\W]", "");
			name = GetCamelCaseName(name);
			
			foreach(string keyword in csharpKeywords)
			{
				if (keyword == name)
				{
					name = "@" + name;
				}
			}	
			
			if (Regex.IsMatch(name, @"^[\d]"))
				name="data" + name;
			
			return name;
		}

		/// <summary>
		/// Creates a string that represents a many to many relation name.
		/// </summary>
		/// <param name="junctionTableKey">The key that make the relationship.</param>
		/// <param name="junctionTableName">the table that store the relation.</param>
		public string GetManyToManyName(TableKeySchema junctionTableKey, string junctionTableName) {			
			return GetManyToManyName(junctionTableKey.ForeignKeyMemberColumns, junctionTableName);
		}
		
		public string GetManyToManyName(TableKeySchemaMe junctionTableKey, string junctionTableName) {			
			return GetManyToManyName(junctionTableKey.ForeignKeyMemberColumns, junctionTableName);
		}
		/// <summary>
		/// Creates a string that represents a many to many relation name.
		/// </summary>
		/// <param name="columns">The columns that belong to the relationship.</param>
		/// <param name="junctionTableName">the table that store the relation.</param>
		public string GetManyToManyName(ColumnSchemaCollection columns, string junctionTableName)
		{
			StringBuilder result = new StringBuilder();
			foreach(ColumnSchema pCol in columns)
			{
				result.Append(GetCleanName(pCol.Name));
			}
			
			//See if there is any alias for this table name (check include in GetClassName)
			junctionTableName = GetClassName(junctionTableName);
			
			return string.Format(this.manyToManyFormat, result.ToString(), junctionTableName);
		}
		
		public string GetManyToManyName(MemberColumnSchemaCollectionMe columns, string junctionTableName)
		{
			StringBuilder result = new StringBuilder();
			foreach(MemberColumnSchemaMe pColMember in columns) {
				ColumnSchema pCol=pColMember.Column;
				result.Append(GetCleanName(pCol.Name));
			}
			
			//See if there is any alias for this table name (check include in GetClassName)
			junctionTableName = GetClassName(junctionTableName);
			
			return string.Format(this.manyToManyFormat, result.ToString(), junctionTableName);
		}
		
		/// <summary>
		/// Check that a given key has all foreign's columns into the primary key.
		/// </summary>
		/// <param name="key">The key to check.</param>
		public bool IsJunctionKey(TableKeySchema key)
		{
			foreach(ColumnSchema col in key.ForeignKeyMemberColumns)
			{
				if (!col.IsPrimaryKeyMember)
				{
					//BYDAN_NETTIERS
					//System.Windows.Forms.MessageBox.Show(col.Name);
					//return false;
				}
			}
			return true;
		}
		
		public bool IsJunctionKey(TableKeySchemaMe key)
		{
			foreach(MemberColumnSchemaMe col in key.ForeignKeyMemberColumns)
			{
				if (!col.Column.IsPrimaryKeyMember)
				{
					//BYDAN_NETTIERS
					//System.Windows.Forms.MessageBox.Show(col.Name);
					//return false;
				}
			}
			return true;
		}
		
		/// <summary>
		/// Check that a given table has a primary key.
		/// </summary>
		/// <param name="table">The table to check.</param>
		public bool HasPrimaryKey(TableSchema table) {
			
			//ANTERIOR(DESHABILITADO)			
            if (table.GetType().GetProperty("HasPrimaryKey") != null)
            {
                if (!(bool)table.GetType().GetProperty("HasPrimaryKey").GetValue(table, null)) return false;
            }
			if (table.PrimaryKey == null || table.PrimaryKey.MemberColumns.Count == 0) return false;
			
			return true;
			
			
			//NUEVO BYDAN
			/*
			bool existe=false;
			
			foreach(ColumnSchema columnSchema in table.Columns) {
				if(columnSchema.IsPrimaryKeyMember) {
					existe=true;
					
					break;
				}
			}
			
			return existe;
			*/
		}
		
		/// <summary>
		/// Check that a given index has all it's columns into the primary key.
		/// </summary>
		/// <param name="index">The index to check.</param>
		public bool IsPrimaryKey(IndexSchema index)
		{
			foreach(ColumnSchema col in index.MemberColumns)
			{
				if (!col.IsPrimaryKeyMember)
					return false;
			}
			return true;
		}

		/// <summary>
		/// Get the cleaned, camelcased name of a parameter
		/// </summary>
		/// <param name="par">Command Parameter</param>
		/// <returns>the cleaned, camelcased name </returns>
		public string GetCleanParName(ParameterSchema par)
		{
			return GetCleanParName(par.Name);
		}

		/// <summary>
		/// Get the cleaned, camelcased version of a name
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>the cleaned, camelcased name </returns>
		public string GetCleanParName(string name)
		{
			return GetCamelCaseName(GetCleanName(name));
		}

		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="column">The ColumnSchema with the name to be cleaned</param>
		/// <returns>the cleaned, camelcased name with a _ prefix</returns>
		public string GetMemberVariableName(ColumnSchema column)
		{
			return "_" + GetCleanParName(column.Name);
		}

		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>the cleaned, camelcased name with a _ prefix</returns>
		public string GetMemberVariableName(string name)
		{
			return "_" + GetCleanParName(name);
		}
		
		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="column">The column with the name to be cleaned</param>
		/// <returns>the cleaned, pascal cases name with a _Original prefix</returns>
		public string GetOriginalMemberVariableName(ColumnSchema column)
		{
			return GetOriginalMemberVariableName(column.Name);
		}
		
		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>the cleaned, camelcased name with a _ prefix</returns>
		public string GetOriginalMemberVariableName(string name)
		{
			return "_" + GetOriginalPropertyName(name);
		}
		
		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="column">the column from which we want the name to be cleaned</param>
		/// <returns>the cleaned, camelcased name with a _ prefix</returns>
		public string GetOriginalPropertyName(ColumnSchema column)
		{
			return GetOriginalPropertyName(column.Name);
		}
		
		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>the cleaned, camelcased name with a _ prefix</returns>
		public string GetOriginalPropertyName(string name)
		{
			return "Original" + GetPropertyName(name);
		}

		/// <summary>
		/// Get the description ext. property of a column and return as inline SQL comment
		/// </summary>
		/// <param name="schemaObject">Any database object, but typically a column</param>
		/// <returns>Object description, as inline SQL comment</returns>
		public string GetColumnSqlComment(SchemaObjectBase schemaObject)
		{
			return schemaObject.Description.Length > 0 ? "-- " + schemaObject.Description.Replace(Environment.NewLine, Environment.NewLine + "-- ") : "";
		}
		
		#region GetColumnXmlComment
		/// <summary>
		/// Gets the table's description as a well formatted string for C# XML comments.
		/// </summary>
		public string GetColumnXmlComment(TableSchema table, int indentLevel)
		{
			return GetColumnXmlComment(table.Description, indentLevel);
		}

		/// <summary>
		/// Gets the column's description as a well formatted string for C# XML comments.
		/// </summary>
		public string GetColumnXmlComment(ColumnSchema column, int indentLevel)
		{
			return GetColumnXmlComment(column.Description, indentLevel);
		}

		/// <summary>
		/// Gets the view's description as a well formatted string for C# XML comments.
		/// </summary>
		public string GetColumnXmlComment(ViewSchema view, int indentLevel)
		{
			return GetColumnXmlComment(view.Description, indentLevel);
		}

		/// <summary>
		/// Gets the table key's description as a well formatted string for C# XML comments.
		/// </summary>
		public string GetColumnXmlComment(TableKeySchema key, int indentLevel)
		{
			return GetColumnXmlComment(key.Description, indentLevel);
		}
		
		/// <summary>
		/// Internal implementation.  Gets the description text as a clean C# XML comment line.
		/// </summary>
		private string GetColumnXmlComment(string description, int indentLevel)
		{
			string linePrefix = new string('\t', indentLevel) + "/// ";
			return description.Replace(Environment.NewLine, Environment.NewLine + linePrefix);
		}
		#endregion GetColumnXmlComment
		
		#region Component/Composition Helper Methods
			/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="column">The ColumnSchema with the name to be cleaned</param>
		/// <returns>the cleaned, camelcased name </returns>
		public string GetComponentMemberVariableName(ColumnSchema column)
		{
			return GetCleanParName(column.Name);
		}
		
		/// <summary>
		/// Get the member variable styled version of a name
		/// </summary>
		/// <param name="name">name to be cleaned</param>
		/// <returns>the cleaned, camelcased name</returns>
		public string GetComponentMemberVariableName(string name)
		{
			return GetCleanParName(name);
		}
		
		public string GetForeignKeyCompositeName (string fk, TableKeySchemaCollection fkeys)
		{
			foreach (TableKeySchema key in fkeys)
			{
				foreach (ColumnSchema col in key.ForeignKeyMemberColumns)
				{
					if (col.Name == fk)
					{
						return GetPropertyName(GetClassName(key.PrimaryKeyTable.Name));
					}
				}
			}
			return "//TODO: UNKNOWN, COULD NOT FIND FOREIGN KEY COMPOSITE NAME \t";
		}
				
		public string GetCompositeClassName(string fk, TableKeySchemaCollection fkeys)
		{
			foreach (TableKeySchema key in fkeys)
			{
				foreach (ColumnSchema col in key.ForeignKeyMemberColumns)
				{
					if (col.Name == fk)
					{
						return GetClassName(key.PrimaryKeyTable.Name);
					}
				}
			}
			return "//TODO: UNKNOWN, COULD NOT FIND COMPOSITE CLASS NAME \t" ;
		}
		
		public string GetCompositeMemberVariableName(string fk, TableKeySchemaCollection fkeys)
		{
			foreach (TableKeySchema key in fkeys)
			{
				foreach (ColumnSchema col in key.ForeignKeyMemberColumns)
				{
					if (col.Name == fk)
					{
						return GetComponentMemberVariableName(GetClassName(key.PrimaryKeyTable.Name));
					}
				}
			}
			return "//TODO: UNKNOWN, COULD NOT FIND COMPOSITE MEMBER VARIABLE NAME\t ";
		}
		
				
		public string GetCompositePropertyName(string fk, TableKeySchemaCollection fkeys)
		{
			foreach (TableKeySchema key in fkeys)
			{
				foreach (ColumnSchema col in key.ForeignKeyMemberColumns)
				{
					if (col.Name == fk)
					{
						return GetPropertyName(GetClassName(key.PrimaryKeyTable.Name));
					}
				}
			}
			return "//TODO: UNKNOWN, COULD NOT FIND COMPOSITE PROPERTY NAME\t ";
		}

		public string GetFKPropertyName(string fk, TableKeySchemaCollection fkeys)
		{
			foreach (TableKeySchema key in fkeys)
			{
				foreach (ColumnSchema col in key.ForeignKeyMemberColumns)
				{
					if (col.Name == fk)
					{
						return GetPropertyName(GetClassName(key.PrimaryKeyMemberColumns[0].Name));
					}
				}
			}
			return "//TODO: UNKNOWN, COULD NOT FIND FK COLUMN PROPERTY NAME\t ";
		}
		#endregion 

/*
		/// <summary>
		/// Transform the list of sql parameters to a list of comment param for a method
		/// </summary>
		public string TransformStoredProcedureInputsToMethodComments(ParameterSchemaCollection inputParameters)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<inputParameters.Count; i++)
			{
				temp.AppendFormat("{2}\t/// <param name=\"{0}\"> A <c>{1}</c> instance.</param>", GetPrivateName(inputParameters[i].Name.Substring(1)), GetCSType(inputParameters[i]).Replace("<", "&lt;").Replace(">", "&gt;"), Environment.NewLine);
			}
			
			return temp.ToString();
		}
		
*/

		/// <summary>
		/// Cleans the given text so that it can be used in a [DescriptionAttribute] attribute in C# code.
		/// </summary>
		public string GetDescriptionAttributeText(string text)
		{
			return text.Replace(Environment.NewLine, " ").Replace("\"", "'");
		}
		
		/// <summary>
		/// Determines if the given column has a user defined data type.  
		/// </summary>
		/// <remarks>
		/// User defined data types are dynamically loaded from the database where the column is from.
		/// </remarks>
		public bool IsUserDefinedType(ColumnSchema column)
		{
			// lazy load the user defined user type list
			if ( userDefinedTypes == null )
			{
				userDefinedTypes = GetUserDefinedTypes(column.Database);
			}
			
			foreach (string userDefinedType in userDefinedTypes)
			{
				// compare the data types case ignoring the case.
				if ( String.Compare(column.NativeType, userDefinedType, true) == 0 )
					return true;
			}
			return false;
		}
		
		private string[] userDefinedTypes = null;

		/// <summary>
		/// Determines if the given schema object has a user defined data type.  
		/// -- [ab] this is a generic ver of IsUserDefinedType(ColumnSchema column)
		/// </summary>
		/// <remarks>
		/// User defined data types are dynamically loaded from the database where the schema object is from.
		/// </remarks>
		public bool IsUserDefinedType<TSchemaType>(TSchemaType schemaItem) where TSchemaType:DataObjectBase
		{
			// lazy load the user defined user type list
			if ( userDefinedTypes == null )
			{
				userDefinedTypes = GetUserDefinedTypes(schemaItem.Database);
			}
			
			foreach (string userDefinedType in userDefinedTypes)
			{
				// compare the data types case ignoring the case.
				if ( String.Compare(schemaItem.NativeType, userDefinedType, true) == 0 )
					return true;
			}
			return false;
		}



		/// <summary>
		/// Get the user defined data types from the specified database.
		/// </summary>
		protected string[] GetUserDefinedTypes(DatabaseSchema database)
		{
			switch (database.Provider.Name)
			{
				case "SqlSchemaProvider":
					return GetSqlUserDefinedTypes(database);
				default:
					return new string[0];
			}
		}
		
		/// <summary>
		/// Get the user defined data types from the specified Sql Server database.
		/// </summary>
		protected string[] GetSqlUserDefinedTypes(DatabaseSchema database)
		{
			try
			{
				SqlCommand	command = new SqlCommand();
				command.CommandText = "sp_MShelptype";
				command.CommandType = CommandType.StoredProcedure;
				command.Connection = new SqlConnection(database.ConnectionString);
	   
				command.Parameters.Add("@typename", SqlDbType.NVarChar, 517);
				command.Parameters.Add("@flags", SqlDbType.NVarChar, 10);

				command.Parameters[0].Value = System.DBNull.Value;
				command.Parameters[1].Value = "uddt";  // look in user defined datatypes

				ArrayList udt = new ArrayList();
				command.Connection.Open();
				using (SqlDataReader reader = command.ExecuteReader(CommandBehavior.CloseConnection))
				{
					while(reader.Read()) 
					{
						udt.Add(reader["UserDatatypeName"]);
					}
				}
				
				string[] userDatatypeNames = new string[ udt.Count ];
				udt.CopyTo(userDatatypeNames,0);
				return userDatatypeNames;
			}
			catch 
			{
				return new string[0]; // oh oh, should handle this better.
			}
		}

		/// <summary>
		/// Check if a column is an identity column
		/// </summary>
		/// <param name="column">DB table column to be checked</param>
		/// <returns>Identity?</returns>
		public bool IsIdentityColumn(ColumnSchema column)
		{
			// for sql server
			if (column.ExtendedProperties["CS_IsIdentity"] != null)
				return (bool)column.ExtendedProperties["CS_IsIdentity"].Value;
			
			// for access
			if (column.ExtendedProperties["Autoincrement"] != null)
				return (bool)column.ExtendedProperties["Autoincrement"].Value;
			
			// test mysql
			
			
			return false;
			
			//Autoincrement: 
			//return (bool)column.ExtendedProperties["CS_IsIdentity"].Value;
		} 
		
		/// <summary>
		/// Get's the default value of a column
		/// </summary>
		/// <param name="column">DB table column to be checked</param>
		/// <returns>string representation of the default value</returns>
		public string GetColumnDefaultValue(ColumnSchema column)
		{
			/*
			return "";
			
			// for sql server
			if (column.ExtendedProperties["CS_Default"] != null)
			{
				string value = column.ExtendedProperties["CS_Default"].Value.ToString().ToLower();
				value = value.Replace("getdate()", "DateTime.Now");
				value = value.Replace("newid()", "Guid.NewGuid()");
				
				while(value.StartsWith("(") && value.EndsWith(")"))
    			 	value= value.TrimStart('(').TrimEnd(')');
	
				if (column.DataType == DbType.Boolean)
					value = value.Contains("1") ? "true" : "false";
				else if (!IsNumericType(column) || value.IndexOf("DateTime.Now") > -1 || value.IndexOf("Guid.NewGuid()") > -1)
					value = string.Format("\"{0}\"", value);
					
				return value;
	
				
			// for access
			if (column.ExtendedProperties["DefaultValue"] != null)
				return column.ExtendedProperties["DefaultValue"].Value.ToString();
			
			// test mysql
			}
			
			*/

			return "";			
		} 
		
		/// <summary>
		/// Determines if the column is a numeric column or not.
		/// </summary>
		/// <param name="column">DB table column to be checked</param>
		/// <returns>true when Numeric, otherwise false</returns>
		public bool IsNumericType(ColumnSchema column)
		{
			switch (column.NativeType.ToLower())
			{
				case "bigint":
				case "bit":
				case "decimal":
				case "float":
				case "int":
				case "money":
				case "numeric":
				case "real":
				case "smallint":
				case "smallmoney":
				case "tinyint": return true;
				default: return false;
			}
		}

		/// <summary>
		/// Check if a column is read-only.
		/// </summary>
		public bool IsReadOnlyColumn(ColumnSchema column)
		{
			// sql server
			if (column.ExtendedProperties["CS_ReadOnly"].Value != null && (bool)column.ExtendedProperties["CS_ReadOnly"].Value)
				return true;
			
			// access, if auto inco
			if (column.ExtendedProperties["Autoincrement"] != null && (bool)column.ExtendedProperties["Autoincrement"].Value)
				return true;
				
			// Jet: if auto generate
			if (column.ExtendedProperties["Jet OLEDB:AutoGenerate"] != null && (bool)column.ExtendedProperties["Jet OLEDB:AutoGenerate"].Value)
				return true;
				
			// default
			return false;
			
			//return column.ExtendedProperties.Count == 0 || (bool)column.ExtendedProperties["CS_ReadOnly"].Value;
		}
		
		/// <summary>
		///  Check if a column is computed.
		/// </summary>
		/// <param name="column"></param>
		public bool IsComputed(ColumnSchema column)
		{
			// Sql server extended property
			if (column.ExtendedProperties["CS_IsComputed"] != null && (bool)column.ExtendedProperties["CS_IsComputed"].Value)
				return true;
			
			// sqlserver timestamp field are computed
			if (column.NativeType.ToLower() == "timestamp")
				return true;
				
			// access, if auto inco
			if (column.ExtendedProperties["Autoincrement"] != null && (bool)column.ExtendedProperties["Autoincrement"].Value)
				return true;
				
			// Jet: if auto generate
			if (column.ExtendedProperties["Jet OLEDB:AutoGenerate"] != null && (bool)column.ExtendedProperties["Jet OLEDB:AutoGenerate"].Value)
				return true;
			
			
			return false;
			
			//return (bool)column.ExtendedProperties["CS_IsComputed"].Value == true || column.NativeType.ToLower() == "timestamp";
		}
		
		/// <summary>
		///  Check if a column is a guid (uniqueidentifier).
		/// </summary>
		/// <param name="column"></param>
		public bool IsGuidColumn( ColumnSchema column )
		{
			return column.SystemType.ToString() == typeof(System.Guid).ToString();
		}

		/// <summary>
		/// Get the owner of a table.
		/// </summary>
		/// <param name="table">The table to check</param>
		/// <returns>The safe name of the owner of the table</returns>
		public string GetOwner(TableSchema table)
		{
			return (table.Owner.Length > 0) ? GetSafeName(table.Owner) + "." : "";
		}
		
		/// <summary>
		/// Get the owner of a view
		/// </summary>
		/// <param name="view">The view to check</param>
		/// <returns>The safe name of the owner of the view</returns>
		public string GetOwner(ViewSchema view)
		{
			return (view.Owner.Length > 0) ? GetSafeName(view.Owner) + "." : "";
		}

		/// <summary>
		/// Get the owner of a command
		/// </summary>
		/// <param name="command">The command to check</param>
		/// <returns>The safe name of the owner of the command</returns>
		public string GetOwner(CommandSchema command)
		{
			return (command.Owner.Length > 0) ? GetSafeName(command.Owner) + "." : "";
		}

		/// <summary>
		/// Does the command have a resultset?
		/// </summary>
		/// <param name="cmd">Command in question</param>
		/// <returns>Resultset?</returns>
		public bool HasResultset(CommandSchema cmd)
		{
			return cmd.CommandResults.Count > 0;
		}
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="columns">Columns for which to get the Sql parameter statement</param>
		/// <returns>Sql Parameter statement</returns>
		public string GetSqlParameterStatement(ColumnSchemaCollection columns)
		{
			StringBuilder result = new StringBuilder();
			
			for(int i=0; i<columns.Count; i++)
			{
				if (i>0) result.Append(", ");
				
				result.Append(GetSqlParameterStatement(columns[i]));
				result.Append(Environment.NewLine);
				
			}	
			return result.ToString();
		}

		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <returns>Sql Parameter statement</returns>
		public string GetSqlParameterStatement(ColumnSchema column)
		{
			return GetSqlParameterStatement(column, false);
		}
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <param name="isOutput">Is this an output parameter?</param>
		/// <returns>Sql Parameter statement</returns>
		public string GetSqlParameterStatement(ColumnSchema column, bool isOutput)
		{
			StringBuilder param = new StringBuilder();
			param.AppendFormat("@{0} {1}", GetPropertyName(column.Name), column.NativeType);
			
			// user defined data types do not need size components
			if ( ! IsUserDefinedType(column) )
			{
			switch (column.DataType)
			{
				case DbType.Decimal:
				{
					if (column.NativeType != "real")
						param.AppendFormat("({0}, {1})", column.Precision, column.Scale);
				
					break;
				}
				// [ab 022205] now handles xxxbinary data type
				case DbType.Binary:
				// 
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				{
					if (column.NativeType != "text" && 
						column.NativeType != "ntext" && 
						column.NativeType != "timestamp" &&
						column.NativeType != "image"
						)

					{
						if (column.Size > 0)
						{
							param.AppendFormat("({0})", column.Size);
						}
					}
					break;
				}
			}
			}
			if (isOutput)
			{
				param.Append(" OUTPUT");
			}
			
			return param.ToString();
		}
		
		
		public bool IsColumnFindable(ColumnSchema column)
		{
			if (column.DataType == DbType.Binary || column.NativeType == "text" || 
					column.NativeType == "ntext" || 
					column.NativeType == "timestamp" ||
					column.NativeType == "image"
				)
				return false;
			
			return true;
		}
		
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <param name="Name">the name of the parameter?</param>
		/// <returns>Sql Parameter statement</returns>
		public string GetSqlParameterStatement(ColumnSchema column, string Name)
		{
			string param = "@" + GetPropertyName(Name) + " " + column.NativeType;
			
			// user defined data types do not need size components
			if ( ! IsUserDefinedType(column) )
			{
			switch (column.DataType)
			{
				case DbType.Decimal:
				{
					param += "(" + column.Precision + ", " + column.Scale + ")";
					break;
				}
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				{
					if (column.NativeType != "text" && column.NativeType != "ntext")
					{
						if (column.Size > 0)
						{
							param += "(" + column.Size + ")";
						}
					}
					break;
				}
			}	
			}
			return param;
		}
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <param name="isOutput">indicates the direction</param>
		/// <returns>Sql Parameter statement</returns>
		public string GetSqlParameterXmlNode(ColumnSchema column, bool isOutput)
		{
			return GetSqlParameterXmlNode(column, column.Name, isOutput, false);
		}
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <param name="parameterName">the name of the parameter?</param>
		/// <param name="isOutput">indicates the direction</param>
		/// <returns>the xml Sql Parameter statement</returns>
		public string GetSqlParameterXmlNode(ColumnSchema column, string parameterName, bool isOutput)
		{
			return GetSqlParameterXmlNode(column, parameterName, isOutput, false);
		}
		
		/// <summary>
		/// Get a SqlParameter statement for a column
		/// </summary>
		/// <param name="column">Column for which to get the Sql parameter statement</param>
		/// <param name="parameterName">the name of the parameter?</param>
		/// <param name="isOutput">indicates the direction</param>
		/// <param name ="nullDefaults">indicates whether to give each parameter a null or empty default.  (used mainly for Find sp's)</param>
		/// <returns>the xml Sql Parameter statement</returns>
		public string GetSqlParameterXmlNode(ColumnSchema column, string parameterName, bool isOutput, bool nullDefaults)
		{
			string formater = "<parameter name=\"@{0}\" type=\"{1}\" direction=\"{2}\" size=\"{3}\" precision=\"{4}\" scale=\"{5}\" param=\"{6}\" nulldefault=\"{7}\"/>";			
			
			string nullDefaultValue = "";
			if (nullDefaults)
			{
				nullDefaultValue = "null";
			}

			bool isReal = false;
			if (column.NativeType.ToLower() == "real") // SQL doesn't like precision or scale on Real
			{
				isReal = true;
			}

			return string.Format(formater, GetPropertyName(parameterName), column.NativeType, isOutput ? "Output" : "Input", column.Size, column.Precision, column.Scale, isReal ? "" : GetSqlParameterParam(column), nullDefaultValue);
		}
		
		/// <summary>
		/// Get an xml representation for a stored procedure parameter - this is for pre-existing (most likely, custom) Stored Procedures
		/// </summary>
		/// <param name="parameter">SP Parameter for which to get the Sql parameter statement</param>
		/// <returns>the xml Sql Parameter statement</returns>
		public string GetSqlParameterXmlNode(ParameterSchema parameter)
		{
			string formater = "<parameter name=\"@{0}\" type=\"{1}\" direction=\"{2}\" size=\"{3}\" precision=\"{4}\" scale=\"{5}\" param=\"{6}\" nulldefault=\"{7}\"/>";			
			
			return string.Format(	formater, 
									parameter.Name.TrimStart('@'),
									parameter.NativeType, 
									parameter.Direction.ToString(), 
									parameter.Size, 
									parameter.Precision, 
									parameter.Scale, 
									parameter.NativeType.ToLower() == "real" ? String.Empty : GetSqlParameterParam<ParameterSchema>(parameter), 
									parameter.AllowDBNull? "null":String.Empty );
		}
		
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="column"></param>
		public string GetSqlParameterParam(ColumnSchema column)
		{
			string param = string.Empty;
			
			// user defined data types do not need size components
			if ( ! IsUserDefinedType(column) )
			{
			switch (column.DataType)
			{
				case DbType.Decimal:
				{
					param = "(" + column.Precision + ", " + column.Scale + ")";
					break;
				}
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				case DbType.Binary:
				{
					if (column.NativeType != "text" && column.NativeType != "ntext" && column.NativeType != "image" && column.NativeType != "timestamp")
					{
						if (column.Size > 0)
						{
							param = "(" + column.Size + ")";
						}
						else if (column.Size == -1)
						{
							param = "(MAX)";
						}
					}
					break;
				}
			}	
			}
			return param;
		}

		/// <summary>
		/// 	[ab] This is a somewhat generic :) version of the singly typed GetSqlParameterParam
		/// </summary>
		/// <param name="column"></param>
		/// <remarks>
		///	
		/// </remarks>
		public string GetSqlParameterParam<TSchemaType>(TSchemaType schemaItem) where TSchemaType:DataObjectBase
		{
			string param = string.Empty;
			
			// user defined data types do not need size components
			if ( ! IsUserDefinedType<TSchemaType>(schemaItem) )
			{
			switch (schemaItem.DataType)
			{
				case DbType.Decimal:
				{
					param = "(" + schemaItem.Precision + ", " + schemaItem.Scale + ")";
					break;
				}
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				case DbType.Binary:				
				{
					if (schemaItem.NativeType != "text" && schemaItem.NativeType != "ntext")
					{
						if (schemaItem.Size > 0)
						{
							param = "(" + schemaItem.Size + ")";
						}
						else if (schemaItem.Size == -1)
						{
							param = "(MAX)";
						}
					}
					break;
				}
			}	
			}
			return param;
		}
		

		/// <summary>
		/// Parse the text of a stored procedure to retrieve any comment prior to the CREATE PROC construct
		/// </summary>
		/// <param name="commandText">Command Text of the procedure</param>
		/// <returns>The procedure header comment</returns>
		public string GetSqlProcedureComment(string commandText)
		{
			string comment = "";
			// Find anything upto the CREATE PROC statement
			Regex regex = new Regex(@"CREATE\s+PROC(?:EDURE)?", RegexOptions.IgnoreCase);	
			comment = regex.Split(commandText)[0];
			//remove comment characters
			regex = new Regex(@"(-{2,})|(/\*)|(\*/)");
			comment = regex.Replace(comment, string.Empty);
			//trim and return
			return comment.Trim();
		}

		/// <summary>
		/// Get any in-line SQL comments on the same lines as parameters
		/// </summary>
		/// <param name="commandText">Command Text of the procedure</param>
		/// <returns>Hashtable of parameter comments, with parameter names as keys</returns>
		public Hashtable GetSqlParameterComments(string commandText)
		{
			Hashtable paramComments = new Hashtable();
			//Get parameter names and comments
			string pattern = @"(?<param>@\w*)[^@]*--(?<comment>.*)";
			//loop through the matches and extract the parameter and the comment, ignoring duplicates
			foreach (Match match in Regex.Matches(commandText, pattern))
				if (!paramComments.ContainsKey(match.Groups["param"].Value))
					paramComments.Add(match.Groups["param"].Value, match.Groups["comment"].Value.Trim());
			//return the hashtable
			return paramComments;
		}
		
		
		#region "Stored procedures input transformations"
		
		/// <summary>
		/// Transform the list of sql parameters to a list of method parameters.
		/// </summary>
		public string TransformStoredProcedureInputsToMethod(ParameterSchemaCollection inputParameters)
		{
			return TransformStoredProcedureInputsToMethod(false, inputParameters);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of method parameters.
		/// </summary>
		public string TransformStoredProcedureInputsToMethod(bool startWithComa, ParameterSchemaCollection inputParameters)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<inputParameters.Count; i++)
			{
				if ((i>0) || startWithComa)
					temp.Append(", ");

				temp.AppendFormat("{0} {1}", GetCSType(inputParameters[i]), GetPrivateName(inputParameters[i].Name.Substring(1)));
			}
			
			return temp.ToString();
		}
		
		public string TransformStoredProcedureInputsToMethod(bool startWithComa, CommandSchema command)
		{
			string temp = string.Empty;
			
			for(int i=0; i<command.InputParameters.Count; i++)
			{
				temp += (temp.Length > 0) || startWithComa ? ", " : "";
				temp += GetCSType(command.InputParameters[i]) + " " + GetPrivateName(command.InputParameters[i].Name.Substring(1));
			}
			for(int j=0; j < command.InputOutputParameters.Count; j++)
			{
				temp += (temp.Length > 0) || (startWithComa)  ? ", out " : " out ";
				temp += GetCSType(command.InputOutputParameters[j]) + " " + GetPrivateName(command.InputOutputParameters[j].Name.Substring(1));
			}
			
			return temp;
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureInputsToDataAccess(ParameterSchemaCollection inputParameters)
		{
			return TransformStoredProcedureInputsToDataAccess(false, inputParameters);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureInputsToDataAccess(bool alwaysStartWithaComa, ParameterSchemaCollection inputParameters)
		{
			return TransformStoredProcedureInputsToDataAccess(alwaysStartWithaComa, inputParameters, false);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureInputsToDataAccess(bool alwaysStartWithaComa, ParameterSchemaCollection inputParameters, bool useCustomPrefix)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<inputParameters.Count; i++)
			{
				if ( (i>0) || alwaysStartWithaComa )
					temp.Append(", ");

				if ( useCustomPrefix )
				{
					temp.Append( GetCustomVariableName(inputParameters[i].Name.Substring(1) , inputParameters[i].Command) );
				}
				else
				{
					temp.Append( GetPrivateName(inputParameters[i].Name.Substring(1)) );
				}
			}
			
			return temp.ToString();
		}
						
		/// <summary>
		/// Transform the list of sql parameters to a list of comment param for a method
		/// </summary>
		public string TransformStoredProcedureInputsToMethodComments(ParameterSchemaCollection inputParameters)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<inputParameters.Count; i++)
			{
				temp.AppendFormat("{2}\t\t/// <param name=\"{0}\"> A <c>{1}</c> instance.</param>", GetPrivateName(inputParameters[i].Name.Substring(1)).Replace("@", ""), GetCSType(inputParameters[i]).Replace("<", "&lt;").Replace(">", "&gt;"), "\r\r\n");
			}
			
			return temp.ToString();
		}

		/// <summary>
		/// Transform the list of sql parameters to a list of comment param for a method
		/// </summary>
		public string TransformStoredProcedureInputsToMethodComments(CommandSchema command)
		{
			string temp = string.Empty;
			for(int i=0; i<command.InputParameters.Count; i++)
			{
				temp += string.Format("{2}\t\t\t/// <param name=\"{0}\"> A <c>{1}</c> instance.</param>", GetPrivateName(command.InputParameters[i].Name.Substring(1)), GetCSType(command.InputParameters[i]), "\r\r\n");
			}
			for(int i=0; i<command.InputOutputParameters.Count; i++)
			{
				temp += string.Format("{2}\t\t\t/// <param name=\"{0}\"> An output  <c>{1}</c> instance.</param>", GetPrivateName(command.InputOutputParameters[i].Name.Substring(1)).Replace("@", ""), GetCSType(command.InputOutputParameters[i]), Environment.NewLine);
			}
			
			return temp;
		}

		#endregion
		
		#region "Stored procedures output transformations"
		
		/// <summary>
		/// Transform the list of sql parameters to a list of method parameters.
		/// </summary>
		public string TransformStoredProcedureOutputsToMethod(ParameterSchemaCollection outputParameters)
		{
			return TransformStoredProcedureOutputsToMethod(false, outputParameters);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of method parameters.
		/// </summary>
		public string TransformStoredProcedureOutputsToMethod(bool startWithComa, ParameterSchemaCollection outputParameters)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<outputParameters.Count; i++)
			{
				if ((i>0) || startWithComa)
					temp.Append(", ");

				temp.AppendFormat("ref {0} {1}", GetCSType(outputParameters[i]), GetPrivateName(outputParameters[i].Name.Substring(1)));
			}
			
			return temp.ToString();
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureOutputsToDataAccess(ParameterSchemaCollection outputParameters)
		{
			return TransformStoredProcedureOutputsToDataAccess(false, outputParameters);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureOutputsToDataAccess(bool alwaysStartWithaComa, ParameterSchemaCollection outputParameters)
		{
			return TransformStoredProcedureOutputsToDataAccess(alwaysStartWithaComa, outputParameters, false);
		}
		
		/// <summary>
		/// Transform the list of sql parameters to a list of ExecuteXXXXX parameters.
		/// </summary>
		public string TransformStoredProcedureOutputsToDataAccess(bool alwaysStartWithaComa, ParameterSchemaCollection outputParameters, bool useCustomPrefix)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<outputParameters.Count; i++)
			{
				if ( (i>0) || alwaysStartWithaComa )
					temp.Append(", ");

				if ( useCustomPrefix )
				{
					temp.AppendFormat("ref {0}", GetCustomVariableName(outputParameters[i].Name.Substring(1), outputParameters[i].Command) );
				}
				else
				{
					temp.AppendFormat("ref {0}", GetPrivateName(outputParameters[i].Name.Substring(1)) );
				}
			}
			
			return temp.ToString();
		}
						
		/// <summary>
		/// Transform the list of sql parameters to a list of comment param for a method
		/// </summary>
		public string TransformStoredProcedureOutputsToMethodComments(ParameterSchemaCollection outputParameters)
		{
			StringBuilder temp = new StringBuilder();
			for(int i=0; i<outputParameters.Count; i++)
			{
				temp.AppendFormat("{2}\t\t\t/// <param name=\"{0}\"> A <c>{1}</c> instance.</param>", GetPrivateName(outputParameters[i].Name.Substring(1)).Replace("@", ""), GetCSType(outputParameters[i]).Replace("<", "&lt;").Replace(">", "&gt;"), Environment.NewLine);
			}
			
			return temp.ToString();
		}

		#endregion
		
		/// <summary>
		/// Returns a string that reprenst the given columns formated as method parameters definitions. (ex: string param1, int param2)
		/// </summary>
		/// <param name="columns">The columns to transform.</param>
		public string GetFunctionHeaderParameters(ColumnSchemaCollection columns)
		{
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				output.AppendFormat("{0} {1}", GetCSType(columns[i]), GetPrivateName(columns[i].Name));
				if (i < columns.Count - 1)
				{
					output.Append(", ");
				}
			}
			return output.ToString();
		}
		
		
		/// <summary>
		/// Returns a string that reprenst the given columns formated as method parameters call. (ex: param1, param2)
		/// </summary>
		/// <param name="columns">The columns to transform.</param>
		public string GetFunctionCallParameters(ColumnSchemaCollection columns)
		{
			return GetFunctionCallParameters(columns, string.Empty, null);
		}
		
		public delegate bool AppendIf(ColumnSchema col);
		
		/// <summary>
		/// Returns a string that reprenst the given columns formated as method parameters call. (ex: param1, param2)
		/// </summary>
		/// <param name="columns">The columns to transform.</param>
		public string GetFunctionCallParameters(ColumnSchemaCollection columns, string appendString, AppendIf condition)
		{			
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{		
				output.Append(GetPrivateName(columns[i].Name));
				if (condition != null)
				{
					if (condition(columns[i]))
					{
						output.Append(appendString);
					}
				}
					
				if (i < columns.Count - 1)
				{
					output.Append(", ");
				}
			}
			return output.ToString();
		}
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="columns"></param>
		public string GetFunctionEntityParameters(ColumnSchemaCollection columns)
		{
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				output.AppendFormat("entity.{0}", GetPropertyName(columns[i].Name));
				if (i < columns.Count - 1)
				{
					output.Append(", ");
				}
			}
			return output.ToString();
		}
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="columns"></param>
		/// <param name="accessor"></param>
		public string GetFunctionThisParametersWithNullable(ColumnSchemaCollection columns, string accessor)
		{
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				if (!columns[i].AllowDBNull)
					output.AppendFormat("{1}.{0}", GetPropertyName(columns[i].Name), accessor);
				else
					output.AppendFormat("({1}.{0} ?? {2})", GetPropertyName(columns[i].Name), accessor, GetCSDefaultByType(columns[i]));
				
				if (i < columns.Count - 1)
				{
					output.Append(", ");
				}
			}
			return output.ToString();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="columns"></param>
		/// <param name="objectName"></param>
		public string GetFunctionObjectParameters(ColumnSchemaCollection columns, String objectName)
		{
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				output.AppendFormat("{1}.{0}", GetPropertyName(columns[i].Name), objectName);

				if (i < columns.Count - 1)
				{
					output.Append(", ");
				}
			}
			return output.ToString();
		}

		/// <summary>
		/// Gets the <see cref="System.ComponentModel.DataObjectField" /> Ctor Params
		/// based on the schema information on a column.
		/// The 4 params are 
		///	1. indicates whether the field is the primary key 
		/// 2. whether the field is a database identity field
		/// 3. whether the field can be null
		/// 4. sets the length of the field
		/// </summary>
		/// <param name="column">Column</param>
		/// <returns>The ctor params for the <see cref="System.ComponentModel.DataObjectField" /></returns>
		public string GetDataObjectFieldCallParams(ColumnSchema column)
		{
			return string.Format("{0}, {1}, {2}{3}",
				/*0*/ column.IsPrimaryKeyMember.ToString().ToLower(),
				/*1*/ IsIdentityColumn(column).ToString().ToLower(),
				/*2*/ column.AllowDBNull.ToString().ToLower(),
				/*3*/ (CanCheckLength(column) ? ", " + column.Size.ToString() : ""));
		}
		
		/// <summary>
		/// Gets the parameters needed for the ColumnEnumAttribute class
		/// for the specified column.
		/// </summary>
		/// <param name="column"></param>
		public string GetColumnEnumAttributeParams(ColumnSchema column)
		{
			return string.Format("\"{0}\", typeof({1}), System.Data.{2}, ",
				column.Name,
				GetCSTypeWithoutNullable(column),
				GetDbType(column)
			) + GetDataObjectFieldCallParams(column);
		}

		/// <summary>
		/// Convert database types to C# types
		/// </summary>
		/// <param name="field">Column or parameter</param>
		/// <returns>The C# (rough) equivalent of the field's data type</returns>
		public string GetCSType(DataObjectBase field)
		{		
			if (field.NativeType.ToLower() == "real")
				return "System.Single" + (field.AllowDBNull?"?":"");
			else if (field.NativeType.ToLower() == "xml")
				return "string";
			//else if (field.NativeType.ToLower() == "xml")
			//	return "System.Xml.XmlNode";
			///Only for Custom Stored Procedures that allow nulls for every param
			else if (CSPUseDefaultValForNonNullableTypes 
					&& (field is ParameterSchema)
					&&	!IsCSReferenceDataType(field))
			{			
				if (!DefaultIsNull(	(ParameterSchema)field ))
					return field.SystemType.ToString();
				else 
					return field.SystemType.ToString() + "?";
			}
			else if (!IsCSReferenceDataType(field) && field.AllowDBNull)
			{				
				return field.SystemType.ToString() + "?";
			}
			else
				return field.SystemType.ToString();
		}
		
		#region Defualt Param Value
		
        public static string parseParameterRegex = @"
CREATE\s+PROC(?:EDURE)?                               # find the start of the stored procedure
.*?                                                   # skip all content until we get to the name of the parameter that we are looking for
{0}                                                   # name of the parameter we are interested in
\s+[\w\.\(\)\[\]]+                                    # parameter data type
(?:\s*\=\s*(?<default>(?:'[^']*' | [\w]+)))?          # parameter default value";

		///<summary>
		/// Checks a Parameter Schema if NULL is set to the default value of that procedure param
		///</summary>
		public bool DefaultIsNull(ParameterSchema param)
		{
			if (param == null)
				return false;
			
			System.Text.RegularExpressions.Regex DefaultParamRegex = new System.Text.RegularExpressions.Regex(String.Format(parseParameterRegex, param.Name), 
				System.Text.RegularExpressions.RegexOptions.IgnoreCase | 
				System.Text.RegularExpressions.RegexOptions.Multiline | 
				System.Text.RegularExpressions.RegexOptions.Singleline | 
				System.Text.RegularExpressions.RegexOptions.CultureInvariant | 
				System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace);

		
            System.Text.RegularExpressions.Match match = DefaultParamRegex.Match(param.Command.CommandText);
            if (match != null && match.Success)
			{
				if (match.Groups["default"].Value != null && match.Groups["default"].Value.ToString().Trim().ToUpper() == "NULL")
					return true;
			}	
			return false;
		}
		#endregion 
		
		/// <summary>
		/// Convert database types to C# types, withou nullable support.
		/// </summary>
		/// <param name="field">Column or parameter</param>
		/// <returns>The C# (rough) equivalent of the field's data type</returns>
		public string GetCSTypeWithoutNullable(DataObjectBase field)
		{
			if (field.NativeType.ToLower() == "real")
				return "System.Single";
			else if (field.NativeType.ToLower() == "xml")
				return "string";
			//else if (field.NativeType.ToLower() == "xml")
			//	return "System.Xml.XmlNode";
			else
				return field.SystemType.ToString();
			//return GetCSType(field.DataType);
		}
		
		/// <summary>
		/// Return the DbType enum entry of a specified column. It's a hack of the SchemaExplorer property, as it do not support Xml column properly.
		/// </summary>
		/// <param name="field">Column or parameter</param>
		public string GetDbType(DataObjectBase field)
		{
			if (field.NativeType.ToLower() == "xml")
			{
				return "DbType.Xml";
			}
			else
			{
				return "DbType." + field.DataType.ToString();
			}
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="column"></param>
		public string GetCSDefaultByType(DataObjectBase column)
		{
			return GetCSDefaultByType(column, false);
		}
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="column"></param>
		public string GetCSDefaultByType(DataObjectBase column, bool forceReturnDefault)
		{
			// first attempt to see if the DB defines any default values for this
			// column.  If so, return it.
			string defaultValue;
			if (ParseDbColDefaultVal && !forceReturnDefault)
			{
				defaultValue = GetCSDefaultValueByType(column);
				if (defaultValue != null)
					return defaultValue;
			}

			if (column.NativeType.ToLower() == "real")
				return "0.0F";
			else
			{
				DbType dataType = column.DataType;
				switch (dataType)
				{
					case DbType.AnsiString: 
						return "string.Empty";
						
					case DbType.AnsiStringFixedLength: 
						return "string.Empty";
					
					case DbType.String: 
						return "string.Empty";
						
					case DbType.Boolean: 
						return "false";
					
					case DbType.StringFixedLength: 
						return "string.Empty";
						
					case DbType.Guid: 
						return "Guid.Empty";
					
					
					//Answer modified was just 0
					case DbType.Binary: 
						return "new byte[] {}";
					
					//Answer modified was just 0
					case DbType.Byte:
						return "(byte)0";
						//return "{ 0 }";
					
					case DbType.Currency: 
						return "0";
					
					case DbType.Date: 
						return "DateTime.MinValue";
					
					case DbType.DateTime: 
						return "DateTime.MinValue";
					
					case DbType.Decimal: 
						return "0.0m";
						//return "0M";
						//return "0.0M";
					
					case DbType.Double: 
						return "0.0f";
					
					case DbType.Int16: 
						return "(short)0";
						
					case DbType.Int32: 
						return "(int)0";
						
					case DbType.Int64: 
						return "(long)0";
					
					case DbType.Object: 
						return "null";
					
					case DbType.Single: 
						return "0F";
					
					//case DbType.Time: return "DateTime.MaxValue";
					case DbType.Time: return "new DateTime(1900,1,1,0,0,0,0)";
					case DbType.VarNumeric: return "0";
						//the following won't be used
						//		case DbType.SByte: return "0";
						//		case DbType.UInt16: return "0";
						//		case DbType.UInt32: return "0";
						//		case DbType.UInt64: return "0";
					default: return "null";
				}
			}
		}
		
		/// <summary>
		/// This method returns the default value from the database if it is available.  It returns null
		/// if no default value could be parsed.
		/// 
		/// NOTE: rudimentary support for default values with computations/functions is built in.  Right now th
		///   only supported function is getdate().  Any others can be added below if desired.
		/// </summary>
		/// <param name="column"></param>
		public string GetCSDefaultValueByType(DataObjectBase column)
		{
			if (column == null)
				return null;

			ExtendedProperty defaultValueProperty = column.ExtendedProperties["CS_Default"];
			if (defaultValueProperty == null)
				return null;			
				
			string defaultValue = null;
			
			#region Convert declarations
			bool boolConvert;
			byte byteConvert;
			decimal decimalConvert;
			double doubleConvert;
			float floatConvert;
			int intConvert;
			long longConvert;
			short shortConvert;
			DateTime dateConvert;
			Guid guidConvert; 
			XmlNode xmlNodeConvert;
			#endregion
	
			try
			{
				//Get Default Value 
				defaultValue = defaultValueProperty.Value.ToString();
				
				if (defaultValue == null || defaultValue.Trim().Length == 0)
					return null;
				
				// trim off the surrounding ()'s if they exist (SQL Server)
				while (defaultValue.StartsWith("(") && defaultValue.EndsWith(")") 
					|| defaultValue.StartsWith("\"") && defaultValue.EndsWith("\""))
				{
					defaultValue = defaultValue.Substring(1);
					defaultValue = defaultValue.Substring(0, defaultValue.Length - 1);
				}
				
				if (IsNumericType(column as ColumnSchema))
					defaultValue = defaultValue.TrimEnd('.');
					
				if (defaultValueProperty.DataType == DbType.String)
				{
					// probably a char type.  Let's remove the quotes so parsing is happy
					if (defaultValue.StartsWith("'") && defaultValue.EndsWith("'"))
					{
						defaultValue = defaultValue.Substring(1);
						defaultValue = defaultValue.Substring(0, defaultValue.Length - 1);
					}
		
					//this is probably a custom function, lets handle it sane-like
					if (defaultValue.Contains("()"))
					{
						if ( defaultValue.ToLower() == "getdate()" )
							defaultValue = "DateTime.Now";
						else if ( defaultValue.ToLower() == "newid()" )
							defaultValue = "new Guid()";
						else if ( defaultValue.ToLower() == "getutcdate()" )
							defaultValue = "DateTime.UtcNow";
						else
							return null;
					}
				}

				if (column.NativeType.ToLower() == "real")
				{
					floatConvert = float.Parse(defaultValue);
					if (defaultValue != null)
						return floatConvert.ToString() + "F";
					else
						return null;
				}
				else
				{
					DbType dataType = column.DataType;
					switch (dataType)
					{
						case DbType.AnsiString:
							if (defaultValue != null)
								return "\"" + defaultValue + "\"";
							else
								return null;
			
						case DbType.AnsiStringFixedLength:
							if (defaultValue != null)
								return "\"" + defaultValue + "\"";
							else
								return null;
			
						case DbType.String:
							if (defaultValue != null)
								return "\"" + defaultValue + "\"";
							else
								return null;
			
						case DbType.Boolean:
						
							if (defaultValue != null )
							{
								if (defaultValue == "1") return "true";
								if (defaultValue == "0") return "false";
								if (defaultValue.Trim().ToLower() == "yes") return "true";
								if (defaultValue.Trim().ToLower() == "no") return "false";
								if (defaultValue.Trim().ToLower() == "y") return "true";
								if (defaultValue.Trim().ToLower() == "n") return "false";
								
								boolConvert = bool.Parse(defaultValue);
								return boolConvert.ToString();
							}
							else
								return null;
			
						case DbType.StringFixedLength:
							if (defaultValue != null)
								return "\"" + defaultValue + "\"";
							else
								return null;
			
						case DbType.Guid:
							if (defaultValue == "new Guid()")
								return defaultValue;
								
							guidConvert = new Guid(defaultValue);
							if (defaultValue != null && guidConvert != null)
								return "new Guid(\"" + guidConvert.ToString() + "\")";
							else
								return null;
						case DbType.Xml:
								return null;			
			
						//Answer modified was just 0
						case DbType.Binary:
							return null;
			
						//Answer modified was just 0
						case DbType.Byte:
							if (defaultValue != null )
							{
								byteConvert = byte.Parse(defaultValue);
								return "(byte)" + byteConvert.ToString();
							}
							else
								return null;
			
						case DbType.Currency:
							if (defaultValue != null)
							{
								decimalConvert = decimal.Parse(defaultValue);
								return decimalConvert.ToString() + "m";
							}
							else
								return null;
			
						case DbType.Date:
						case DbType.DateTime:
						
							if (defaultValue == "DateTime.Now")
								return "DateTime.Now";
							if (defaultValue == "DateTime.UtcNow")
								return "DateTime.UtcNow";

							dateConvert = DateTime.Parse(defaultValue);
							if (defaultValue != null )
								return "new DateTime(\"" + dateConvert.ToString() + "\")";
					
							return null;
						
						case DbType.Decimal:
							if (defaultValue != null)
							{
								decimalConvert = decimal.Parse(defaultValue);
								return decimalConvert.ToString() + "m";
							}
							else
								return null;
			
						case DbType.Double:
							if (defaultValue != null)
							{
								floatConvert = float.Parse(defaultValue);
								return floatConvert.ToString() + "f";
							}
							else
								return null;
			
						case DbType.Int16:
							if (defaultValue != null)
							{
								shortConvert = short.Parse(defaultValue);
								return "(short)" + shortConvert.ToString();
							}
							else
								return null;
			
						case DbType.Int32:
							if (defaultValue != null )
							{
								intConvert = int.Parse(defaultValue);
								return "(int)" + intConvert.ToString();
							}
							else
								return null;
			
						case DbType.Int64:
							if (defaultValue != null)
							{
								longConvert = long.Parse(defaultValue);
								return "(long)" + longConvert.ToString();
							}
							else
								return null;
			
						case DbType.Object:
							return null;
			
						case DbType.Single:
							if (defaultValue != null)
							{
								floatConvert = float.Parse(defaultValue);
								return floatConvert.ToString() + "F";
							}
							else
								return null;
			
						case DbType.Time:
							if (defaultValue == "DateTime.Now")
								return defaultValue;
							else if (defaultValue != null)
							{
								dateConvert = DateTime.Parse(defaultValue);
								return "DateTime.Parse(\"" + dateConvert.ToString() + "\")";
							}
							return null;
						case DbType.VarNumeric:
							if (defaultValue != null)
							{	
								decimalConvert = decimal.Parse(defaultValue);
								return decimalConvert.ToString();
							}
							else
								return null;
						//the following won't be used
						//		case DbType.SByte: return "0";
						//		case DbType.UInt16: return "0";
						//		case DbType.UInt32: return "0";
						//		case DbType.UInt64: return "0";
						default: return null;
					}
				}
			}
			catch{}
			return null;
		}
		
		public bool IsLengthType(DataObjectBase column)
		{
			DbType dataType = column.DataType;
			switch (dataType)
			{
				case DbType.AnsiString: 
				case DbType.AnsiStringFixedLength: 
				case DbType.String: 
				case DbType.StringFixedLength: 
				case DbType.Binary: 
					return true;
					
				default: 
						return false;
			}
		}

		/// <summary>
		/// Determines whether base DataObjectBase is a string type
		/// </summary>
		public bool IsStringType(DataObjectBase column)
		{
			DbType dataType = column.DataType;
			switch (dataType)
			{
				case DbType.AnsiString: 
				case DbType.AnsiStringFixedLength: 
				case DbType.String: 
				case DbType.StringFixedLength: 
					return true;
					
				default: 
						return false;
			}
		}
		
		/// <summary>
		/// Determines whether base DataObjectBase is a string type, and not a blob column of text or ntext
		/// </summary>
		public bool CanCheckLength(DataObjectBase column)
		{
			switch (column.DataType)
			{
				case DbType.AnsiString: 
				case DbType.AnsiStringFixedLength: 
				case DbType.String: 
				case DbType.StringFixedLength: 
					return 
					(
						column.NativeType != "text" && 
						column.NativeType != "ntext" && 
						column.Size > 0
					);
					
				default: 
						return false;
			}
		}
		
		
		/// <summary>
		/// Returns true if the column is represented as a reference data type
		/// rather than a value type. In other words, the C# code can set a
		/// column of this data type to \"null\"
		/// </summary>
		public bool IsCSReferenceDataType(DataObjectBase column)
		{
			if (column.NativeType.ToLower() == "real")
				return false;
			else if (column.NativeType.ToLower() == "xml")
				return true;
			else
			{
				DbType dataType = column.DataType;
				switch (dataType)
				{
					case DbType.AnsiString: 
					case DbType.AnsiStringFixedLength: 
					case DbType.String: 
					case DbType.StringFixedLength: 
					case DbType.Binary: 
						return true;
						
					case DbType.Boolean: 
					case DbType.Guid: 
					case DbType.Byte:
					case DbType.Currency: 
					case DbType.Date: 
					case DbType.DateTime: 
					case DbType.Decimal: 
					case DbType.Double:
					case DbType.Int16: 
					case DbType.Int32: 
					case DbType.Int64: 
					case DbType.Object: 
					case DbType.Single: 
					case DbType.Time:
					case DbType.VarNumeric:
						return false;
						
					default: 
						return false;
				}
			}
		}

		
		/// <summary>
		/// Get a mock value for a given data type. Used by the unit test classes.
		/// </summary>
		/// <param name="column">Data type for which to get the default value.</param>
		/// <param name="stringValue">a mock string value.</param>
		/// <param name="bValue">a mock boolean value.</param>
		/// <param name="guidValue">a mock Guid value.</param>
		/// <param name="numValue">a mock numeric value.</param>
		/// <param name="dtValue">a mock datetime value.</param>
		/// <returns>A string representation of the default value.</returns>
		public string GetCSMockValueByType(DataObjectBase column, string stringValue, bool bValue, Guid guidValue, int numValue, DateTime dtValue)
		{	
			if (column.NativeType.ToLower() == "real")
				return numValue.ToString() + "F";
			else if (column.NativeType.ToLower() == "xml")
			{
				return "\"" + "<TEST></TEST>" + "\"";
			}	
			else
			{
				switch (column.DataType)
				{
					case DbType.AnsiString: 
						return "\"" + stringValue + "\"";
						
					case DbType.AnsiStringFixedLength: 
					return "\"" + stringValue + "\"";
					
					case DbType.String: 
						return "\"" + stringValue + "\"";
						
					case DbType.Boolean: 
						return bValue.ToString().ToLower();
					
					case DbType.StringFixedLength: 
						return "\"" + stringValue + "\"";
						
					case DbType.Guid: 
						return "new Guid(\"" + guidValue.ToString() + "\")"; 
					
					
					//Answer modified was just 0
					case DbType.Binary: 
						return "new byte[] {" + numValue.ToString() + "}";
					
					//Answer modified was just 0
					case DbType.Byte:
						return "(byte)" + numValue.ToString() + "";
						//return "{ 0 }";
					
					case DbType.Currency: 
						return numValue.ToString();
					
					case DbType.Date: 
						return string.Format("new DateTime({0}, {1}, {2}, 0, 0, 0, 0)", dtValue.Date.Year, dtValue.Date.Month, dtValue.Date.Day);
					
					case DbType.DateTime: 
						return string.Format("new DateTime({0}, {1}, {2}, {3}, {4}, {5}, {6})", dtValue.Year, dtValue.Month, dtValue.Day, dtValue.Hour, dtValue.Minute, dtValue.Second, dtValue.Millisecond);
					
					case DbType.Decimal: 
						return numValue.ToString() + "m";
						//return "0M";
						//return "0.0M";
					
					case DbType.Double: 
						return numValue.ToString() + ".0f";
					
					case DbType.Int16: 
						return "(short)" + numValue.ToString();
						
					case DbType.Int32: 
						return "(int)" + numValue.ToString();
						
					case DbType.Int64: 
						return "(long)" + numValue.ToString();
					
					case DbType.Object: 
						return "null";
					
					case DbType.Single: 
						return numValue.ToString() + "F";
					
					//case DbType.Time: return "DateTime.MaxValue";
					case DbType.Time: 
						return string.Format("new DateTime({0}, {1}, {2}, {3}, {4}, {5}, {6})", dtValue.Year, dtValue.Month, dtValue.Day, dtValue.Hour, dtValue.Minute, dtValue.Second, dtValue.Millisecond);
						
					case DbType.VarNumeric: 
						return numValue.ToString();
						//the following won't be used
						//		case DbType.SByte: return "0";
						//		case DbType.UInt16: return "0";
						//		case DbType.UInt32: return "0";
						//		case DbType.UInt64: return "0";
					default: return "null";
				}
			}
		}
		
		
		/// <summary>
		/// Generates a random number between the given bounds.
		/// </summary>
		/// <param name="min">lowest bound</param>
		/// <param name="max">highest bound</param>
		public int RandomNumber(int min, int max)
		{
			Random random = new Random();
			return random.Next(min, max); 
		}
		
		public string RandomString(ViewColumnSchema column, bool lowerCase)
		{
			//Debugger.Break();
			int size = 2; // default size
			
			// calculate maximum size of the field
			switch (column.DataType)
			{				
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				{
					if (column.NativeType != "text" && column.NativeType != "ntext")
					{
						if (column.Size > 0)
						{
							size = column.Size;
						}
						
						if (size > 1000)
						{
							size = 1000;	
						}
					}
					break;
				}
			}
			
			return RandomString((size/2) -1, lowerCase);
		}

		public string RandomString(ColumnSchema column, bool lowerCase)
		{
			//Debugger.Break();
			int size = 2; // default size
			
			// calculate maximum size of the field
			switch (column.DataType)
			{				
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
				{
					if (column.NativeType != "text" && column.NativeType != "ntext")
					{
						if (column.Size > 0)
						{
							size = column.Size;
						}
						
						if (size > 1000)
						{
							size = 1000;	
						}
					}
					break;
				}
			}
			
			return RandomString((size/2) -1, lowerCase);
		}
		
		/// <summary>
		/// Generates a random string with the given length
		/// </summary>
		/// <param name="size">Size of the string</param>
		/// <param name="lowerCase">If true, generate lowercase string</param>
		/// <returns>Random string</returns>
		/// <remarks>Mahesh Chand  - http://www.c-sharpcorner.com/Code/2004/Oct/RandomNumber.asp</remarks>
		public string RandomString(int size, bool lowerCase)
		{
			StringBuilder builder = new StringBuilder();
			Random random = new Random(size);
			char ch ;
			for(int i=0; i<size; i++)
			{
				ch = Convert.ToChar(Convert.ToInt32(26 * random.NextDouble() + 65)) ;
				builder.Append(ch); 
			}
			if(lowerCase)
			return builder.ToString().ToLower();
			return builder.ToString();
		}


		/// <summary>
		/// Get the Sql Data type of a column
		/// </summary>
		/// <param name="column">Column for which to get the type</param>
		/// <returns>String representing the SQL data type</returns>
		public string GetSqlDbType(DataObjectBase column)	
		{
			switch (column.NativeType)
			{
				case "bigint": return "BigInt";
				case "binary": return "Binary";
				case "bit": return "Bit";
				case "char": return "Char";
				case "datetime": return "DateTime";
				case "decimal": return "Decimal";
				case "float": return "Float";
				case "image": return "Image";
				case "int": return "Int";
				case "money": return "Money";
				case "nchar": return "NChar";
				case "ntext": return "NText";
				case "numeric": return "Decimal";
				case "nvarchar": return "NVarChar";
				case "real": return "Real";
				case "smalldatetime": return "SmallDateTime";
				case "smallint": return "SmallInt";
				case "smallmoney": return "SmallMoney";
				case "sql_variant": return "Variant";
				case "sysname": return "NChar";
				case "text": return "Text";
				case "timestamp": return "Timestamp";
				case "tinyint": return "TinyInt";
				case "uniqueidentifier": return "UniqueIdentifier";
				case "varbinary": return "VarBinary";
				case "varchar": return "VarChar";
				default: return "__UNKNOWN__" + column.NativeType;
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="fkey"></param>
		public string FKColumnName(TableKeySchema fkey)
		{
			StringBuilder Name = new StringBuilder();
			for(int x=0;x < fkey.ForeignKeyMemberColumns.Count;x++)
			{
				Name.Append( GetPropertyName(fkey.ForeignKeyMemberColumns[x].Name) );
			}
			return Name.ToString();
		}
		
		
		
		/// <summary>
		/// Build and return a concatened list of columns that are contained in the specified index. (ex: Column1Column2() )
		/// </summary>
		/// <param name="index"> the index instance.</param>
		public string IXColumnName(IndexSchema index)
		{
			StringBuilder Name = new StringBuilder();
			for(int x=0;x < index.MemberColumns.Count;x++)
			{
				Name.Append( GetPropertyName(index.MemberColumns[x].Name) );
			}
			return Name.ToString();
		}
		
		/// <summary>
		/// Build and return a comma separated list of column contained in the specified index. (ex: column1, column2 )
		/// </summary>
		/// <param name="index"> the index instance.</param>
		public string IXColumnNames(IndexSchema index)
		{
			StringBuilder Name = new StringBuilder();
			for(int x=0;x < index.MemberColumns.Count;x++)
			{
				if ( x > 0 )
					Name.Append(", ");

				Name.Append( GetPrivateName(index.MemberColumns[x].Name) );
			}
			return Name.ToString();
		}
		
		/// <summary>
		/// Build and return a concatened list of columns that are contained in the specified key. (ex: Column1Column2() )
		/// </summary>
		/// <param name="keys"> the key instance.</param>
		public string GetKeysName(ColumnSchemaCollection keys) {	
			StringBuilder Name = new StringBuilder();
			
			for(int x=0; x < keys.Count;x++) {
				Name.Append( GetPropertyName(keys[x].Name) );
			}
			return Name.ToString();
		}

		
		public string GetKeysName(MemberColumnSchemaCollectionMe keys) {	
			StringBuilder Name = new StringBuilder();
			
			for(int x=0; x < keys.Count;x++) {
				Name.Append( GetPropertyName(keys[x].Name) );
			}
			return Name.ToString();
		}
		
		/// <summary>
		/// Indicates if the key is containing more than one column.
		/// </summary>
		/// <param name="keys"> <c>true</c> if > 1; false otherwise.</param>
		public bool IsMultiplePrimaryKeys(ColumnSchemaCollection keys)
		{
			if(keys.Count > 1)
				return true;
			return false;
		}
		
		public bool HasCommonColumn(ColumnSchemaCollection cols1, ColumnSchemaCollection cols2)
		{
			foreach(ColumnSchema col1 in cols1)
			{
				foreach(ColumnSchema col2 in cols2)
				{
					if (col1.Equals(col2))
					return true;
				}	
			}
			return false;
		}
		
		/// <summary>
		/// Return a ColumnSchemaCollection of columns that are contained in all of the tables
		/// </summary>
		/// <param name="sourceTables">Tables to search.</param>
		public ColumnSchemaCollection GetCommonTableColumns(TableSchemaCollection sourceTables)
		{
			ColumnSchemaCollection commonColumns = new ColumnSchemaCollection();
			
			if (sourceTables.Count > 0)
			{
				foreach(ColumnSchema col in sourceTables[0].Columns)
				{
					bool isInEveryTable = true;
					
					//System.Diagnostics.Debug.Write (col.Name + strSimboloDosPuntos + Environment.NewLine);
					
					for (int k = 1; k < sourceTables.Count ; k++)
					{
						TableSchema table = sourceTables[k];
						bool isInThisTable = false;
							
						// scan each column of this table to find this column
						foreach (ColumnSchema tCol in table.Columns)
						{					
							if (col.Name == tCol.Name && col.SystemType == tCol.SystemType && col.AllowDBNull == tCol.AllowDBNull)
							{
								isInThisTable= true;
							}
						}
						
						//System.Diagnostics.Debug.Write ("\t" + table.Name + " : " + isInThisTable.ToString() + Environment.NewLine);					
						isInEveryTable = isInEveryTable && isInThisTable;			
					}
										
					// If this column is present in every table, put it in the IEnity interface.
					if (isInEveryTable)
					{
						commonColumns.Add(col);
					}
				}
				
			}
			return commonColumns;
		}
		
		/// <summary>
		/// Check a table for enum eligibility
		/// </summary>
		/// <param name="table">the table instance to check.</param>
		/// <exception name="ApplicationException"/>
		public void ValidForEnum(TableSchema table)
		{
			#region "Primary key validation"
			
			// No primary key
			if (!HasPrimaryKey(table))
			{
				throw new ApplicationException("table has no primary key.");
			}
			
			// Multiple column in primary key
			if (table.PrimaryKey.MemberColumns.Count != 1)
			{
				throw new ApplicationException("table primary key contains more than one column.");
			}
			
			// Primary key column is not an integer
			if (!isIntXX(table.PrimaryKey.MemberColumns[0]))
			{
				throw new ApplicationException("table primary key column is not an integer. (used for enum value)");
			}
			
			#endregion
			
			#region "Second column must be a string"
			
			// The table must have 2 columns at least
			if (table.Columns.Count < 2)
			{
				throw new ApplicationException("table must at least contains two columns, an integer primary key, and a string.");
			}
			
			// The second column must be a string (char, varchar) 
			if (table.Columns[1].SystemType != typeof(string))
			{
				throw new ApplicationException("table 2nd column must be a string.");
			}
						
			// The second column must have a unique constraint (index with unique constraint)
			if (!table.Columns[1].IsUnique)
			{
				throw new ApplicationException("table 2nd column must be unique (used for the enum label).");
			}
									
			#endregion
			
			#region "Check relations"
			// the table mustn't have foreign relation
			//if (table.ForeignKeys.Count > 0)
			//{
			//	throw new ApplicationException("table cannot have relations where it is the foreign table.");
			//}
			
			SchemaExplorer.TableKeySchemaCollection tableKeySchemaCollection = new TableKeySchemaCollection();//table.ForeignKeys;
			TableKeySchemaCollectionMe tableKeySchemaCollectionMe = new TableKeySchemaCollectionMe();//table.ForeignKeys;
			TableSchemaMe tableSchemaMe=new TableSchemaMe();
			
			tableKeySchemaCollection = table.PrimaryKeys;
			
			
				// relation with table as primary key can only be on the first column 
				foreach(TableKeySchema key in tableKeySchemaCollection) {
					if (key.PrimaryKeyMemberColumns[0].Name != table.Columns[0].Name || key.PrimaryKeyMemberColumns.Count > 1) {
						throw new ApplicationException("table cannot have relations where it is the foreign table.");
					}										
				}
			
			#endregion
		}
	
		/// <summary>
		/// Indicates if the output rowset of the command is compliant with the table rowset.
		/// </summary>
		/// <param name="command">The stored procedure</param>
		/// <param name="table">The table</param>
		public bool IsMatching(CommandSchema command, TableSchema table)
		{
			try
			{
				if (command.CommandResults.Count == 0)
					return false;
					
				if (command.CommandResults[0].Columns.Count != table.Columns.Count)
				{
					return false;
				}
				
				for(int i=0; i<table.Columns.Count; i++)
				{
					if (IsComputed(table.Columns[i]))
						continue;
				
					if (!command.CommandResults[0].Columns.Contains(table.Columns[i].Name.ToLower()))
					{
						return false;
					}
					
					// manage the xml column type separately
					if ( table.Columns[i].NativeType == "xml" && (command.CommandResults[0].Columns[i].NativeType == "sql_variant" || command.CommandResults[0].Columns[i].NativeType == "ntext"))
					{
						continue;
					}
					else if (!SqlTypesAreEquivalent(command.CommandResults[0].Columns[i].NativeType, table.Columns[i].NativeType))
					{
						return false;
					}
				}
				return true;
			}	
			catch(Exception ec)
			{
				System.Diagnostics.Debug.WriteLine("Procedure Threw Exception: " + command.Name+ec);
				return false;	
			}
		}
		
		/// <summary>
		/// Indicates if the output rowset of the command is compliant with the view rowset.
		/// </summary>
		/// <param name="command">The stored procedure</param>
		/// <param name="view">The view</param>
		public bool IsMatching(CommandSchema command, ViewSchema view)
		{
			try
			{
				if (command.CommandResults.Count == 0)
					return false;
					
				if (command.CommandResults[0].Columns.Count != view.Columns.Count)
				{
					return false;
				}
				
				for(int i=0; i<view.Columns.Count; i++)
				{	
					if (!command.CommandResults[0].Columns.Contains(view.Columns[i].Name.ToLower()))
					{
						return false;
					}
					
					// manage the xml column type separately
					if ( view.Columns[i].NativeType == "xml" && (command.CommandResults[0].Columns[i].NativeType == "sql_variant" || command.CommandResults[0].Columns[i].NativeType == "ntext"))
					{
						continue;
					}
					else if (!SqlTypesAreEquivalent(command.CommandResults[0].Columns[i].NativeType, view.Columns[i].NativeType))
					{
						return false;
					}
				}
				return true;
			}	
			catch(Exception ec)
			{
				System.Diagnostics.Debug.WriteLine("!!ERROR!! - Procedure Threw Exception: " + command.Name+ec);
				return false;	
			}
		}
		
		/// <summary>
		/// Compares two sql types and determines if they are syntax equivalent.
		/// </summary>
		/// <param name="type1">The first sql type to compare.</param>
		/// <param name="type2">The second sql type to compare.</param>
		public bool SqlTypesAreEquivalent(string type1, string type2)
		{
			type1 = type1.ToLower();
			type2 = type2.ToLower();
			
			if ((type1 == "numeric" && type2 == "decimal") || (type2 == "numeric" && type1 == "decimal"))
			{
				return true;
			}
			else if ((type1 == "varchar" && type2 == "nvarchar") || (type2 == "varchar" && type2 == "nvarchar"))
			{
					return true;   
			}
			return (type1 == type2);
		}
		

		public bool isIntXX(DataObjectBase column)
		{
			bool result = false;

			for(int i = 0; i < aIntegerDbTypes.Length; i++)
			{
				if (aIntegerDbTypes[i] == column.DataType) result=true;
			}
			
			return result;
		}

		/// <summary>
		///	Indicates if a column is an int.
		/// </summary>
		/// <author>ab</author>
		/// <date>01/26/05</date>
		public bool isIntXX(ColumnSchema column)
		{
			bool result = false;

			for(int i = 0; i < aIntegerDbTypes.Length; i++)
			{
				if (aIntegerDbTypes[i] == column.DataType) result=true;
			}
			
			return result;		
		}
		
		#region Long Line Wrapping Handling
		// EntityBase.cst and EntityCollectionBase.cst render constructs with every column
		// in a table as arguments.  For very long tables, the C# compliler complains with
		// "CS1034: Compiler limit exceeded: Line cannot exceed 2046 characters"
		// Data warehouses can have very long tables.
		
		/// <summary>
		/// Stores the current column were are at.
		/// </summary>
		private int wrapCurrentColumn;
		
		/// <summary>
		/// Inititalizes the line wrapping to column 50.
		/// </summary>
		protected void WrapInit()
		{
			wrapCurrentColumn = 50;
		}

		/// <summary>
		/// Increment the wrap column by the normal amount.
		/// </summary>
		/// <remarks>
		/// This is not meant to be exact, rough estimate only.  This is called by
		/// EntityBase.cst and EntityCollectionBase.cst.
		/// </remarks>
		protected void WrapIncr(ColumnSchema column)
		{
			wrapCurrentColumn += GetCSType(column).Length + 1 /*space*/ + column.Table.Name.Length + GetPropertyName(column.Name).Length + 2; /*comma, space*/;
		}

		/// <summary>
		/// Wrap the line of text if the line exceeds 130 columns long.
		/// </summary>
		/// <remarks>
		/// CS1034: Compiler limit exceeded: Line cannot exceed 2046 characters
		/// </remarks>
		protected void WrapLine(int indentLevel)
		{
			if ( wrapCurrentColumn >= 130 ) // keep this reasonable, people do like printing code too
			{
				Response.Write(Environment.NewLine);
				for (int i = 0; i < indentLevel; i++)
					Response.Write("\t");
				wrapCurrentColumn = indentLevel * 4; // most people use 4 space tabs
			}
		}
		#endregion
		
		#region Column Comparer
		// [ab 013105] column name sorting comparer
		public class columnSchemaComparer : IComparer  
		{
	      	int IComparer.Compare( Object x, Object y )  
			{
				if (x is ColumnSchema && y is ColumnSchema)
	          		return( (new CaseInsensitiveComparer()).Compare( ((ColumnSchema)x).Name,  ((ColumnSchema)y).Name ) );
					
				throw new ArgumentException("one or both object(s) are not of type ColumnSchema");
			}
				
      	}
      	#endregion
		
		#region Utils
		
		#region Recursive Copy Code
		///<summary>
		/// Safely Copies all files from one directory to another
		///</summary>
		public void SafeCopyAll(string path, string destination) 
		{ 
			System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(path); 
			SafeCopyAll(dir, destination); 
		} 
		
		///<summary>
		/// Safely Copies all files from one directory to another
		///</summary>
		public void SafeCopyAll(System.IO.DirectoryInfo dir, string destination) 
		{ 
			string path; 
			foreach ( System.IO.FileInfo f in dir.GetFiles() ) 
			{ 
				f.CopyTo(System.IO.Path.Combine(destination, f.Name), true); 
			} 
			
			foreach ( System.IO.DirectoryInfo d in dir.GetDirectories() ) 
			{ 
				path = System.IO.Path.Combine(destination, d.Name); 
				SafeCreateDirectory(path); 
				SafeCopyAll(d, path); 
			} 
		} 
		
		/// <summary>
		/// Copy the specified file.
		/// </summary>
		public void SafeCreateDirectory(string path)
		{
			if (!Directory.Exists(path))
			{
				Directory.CreateDirectory(path);
			}
		}
		
		/// <summary>
		/// Copy the specified file.
		/// </summary>
		public void SafeCopyFile(string path, string destination)
		{
			FileInfo file1 = new FileInfo(path);
			file1.CopyTo(destination, true);
		}

		#endregion 
		
		#region Recursive Get Files
		///<summary>
		/// Get's all available files with the proper extensions for inclusion into a project
		/// NOTE: Not Tested
		///</summary>
		public System.Collections.IList  GetFiles(string path) 
		{ 
				System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(path); 
			
			return GetFiles(dir, new System.Collections.ArrayList()); 
		} 
		
		///<summary>
		/// Get's all available files with the proper extensions for inclusion into a project
		/// NOTE: Not Tested
		///</summary>
		public System.Collections.IList GetFiles(System.IO.DirectoryInfo dir, System.Collections.ArrayList files) 
		{ 
			string path; 
			foreach (System.IO.FileInfo f in dir.GetFiles() ) 
			{
				if (Array.IndexOf(IncludeExtensions, f.Extension) >= 0)
					files.Add(f);
			} 
			
			foreach (System.IO.DirectoryInfo d in dir.GetDirectories() ) 
			{ 
				path = System.IO.Path.Combine(dir.FullName, d.Name); 
				files.AddRange(GetFiles(d, files)); 
			} 
			
			return files;
		} 
		#endregion 
		
      	#region File Extensions
		private static string[] IncludeExtensions = new string[]{".arj", ".asa",".asax", ".ascx", ".asmx", ".ashx", ".asp", ".aspx", ".au", ".avi", ".bat", ".bmp", 
													  ".cab", ".chm", ".com", ".config", ".cs", ".css", ".disco", ".dll", ".doc", 
													  ".exe", ".png", ".gif", ".hlp", ".htm", ".html", ".jpg", ".inc", ".ini", 
													  ".log", ".mdb", ".mid", ".midi", ".mov", ".mp3", ".mpg", ".mpeg", ".fla", ".swf",
													  ".cur", ".ico", ".resx", ".jsl", ".cd", ".rdlc", ".js", ".vbs", ".wsf", ".master", 
													  ".skin", ".pdf", ".ppt", ".psd", ".sys", ".txt", ".tif", ".vb", ".vbs", ".vsdisco", 
													  ".wav", ".wri", ".xls", ".xml", ".xsd", ".xslt", ".zip", ".rpt", ".java",
													  ".settings", ".cfm", ".cfmx", ".jsp", ".mdf", ".ldf" };
													
		#endregion 
		
		#endregion 
		
		#region Custom Stored Procedures
		
		public IDictionary GetCustomProcedures(TableSchema table)
		{
			return GetCustomProcedures(table.Name, table.Database.Commands);
		}
		
		public IDictionary GetCustomProcedures(ViewSchema view)
		{
			return GetCustomProcedures(view.Name, view.Database.Commands);
		}
		
		public IDictionary GetCustomProcedures(string objectName, CommandSchemaCollection allCommands)
		{		
			string customPrefix = string.Format(CustomProcedureStartsWith, objectName, ProcedurePrefix);
			IDictionary procs = new Hashtable();
			string customName;
			bool discover = true;
			System.Collections.ArrayList invalids = new System.Collections.ArrayList();
			string current = string.Empty;
			
			while(discover)
			{
				try
				{
					procs.Clear();
					foreach ( CommandSchema proc in allCommands )
					{
						if (proc == null)
							continue;
							
						current = proc.Name;
						if (invalids.Contains(proc.Name))
							continue;
							
						if ( proc.Name.ToLower().StartsWith(customPrefix.ToLower()) )
						{
							customName = proc.Name.Substring(customPrefix.Length);
							procs.Add(customName, proc);
						}
					}
					discover = false;
				}
				catch(Exception ec)
				{
					System.Diagnostics.Debug.WriteLine("Stored Procedure Command Failed: " + current+ec);	
					invalids.Add(current);
				}	
			}
		
			return procs;
		}

		public string GetReturnCustomProcReturnType(CustomNonMatchingReturnType nonMatchingReturnType, SchemaExplorer.TableSchema table, SchemaExplorer.CommandSchema command)
		{
			string returnType = "void";
			try
			{
				if (IsMatching(command, table))
				{
					returnType = GetCollectionClassName(table.Name);
				}
				else if (command.CommandResults != null && command.CommandResults.Count > 0)
				{
					returnType = nonMatchingReturnType.ToString();				
				}
			}
			catch(Exception ec)
			{
				System.Diagnostics.Debug.WriteLine("!!ERROR!!: Could not get return type from " + command.Name+ec);	
			}	
			return returnType;	
		}

		
		public string GetReturnCustomProcReturnType(CustomNonMatchingReturnType nonMatchingReturnType, SchemaExplorer.ViewSchema view, SchemaExplorer.CommandSchema command)
		{
			string returnType = "void";
			try
			{
				if (IsMatching(command, view))
				{
					returnType = GetViewCollectionClassName(view.Name);
				}
				else if (command.CommandResults != null && command.CommandResults.Count > 0)
				{
					returnType = nonMatchingReturnType.ToString();
				}
			}
			catch(Exception ec)
			{
				System.Diagnostics.Debug.WriteLine("!!ERROR!!: Could not get return type from " + command.Name);	
			}	
			
			return returnType;	
		}

		public string GetCustomVariableName(string paramName, SchemaExplorer.CommandSchema command)
		{
			int c = 1;
			try
			{
				for(;c < command.Database.Commands.Count; c++)
				{
					CommandSchema tmp = command.Database.Commands[c];
					
					if (tmp.Name == command.Name)
						break;
				}
			} catch{}
			
			return string.Format("sp{1}_{0}", GetPropertyName(paramName), c);
		}
		
		#endregion 
      	
		#region Execute sql file

		public void ExecuteSqlInFile(string pathToScriptFile, string connectionString ) 
		{
			SqlConnection connection;

			StreamReader _reader			= null;

			string sql	= "";

			if( false == System.IO.File.Exists( pathToScriptFile )) 
			{
				throw new Exception("File " + pathToScriptFile + " does not exists");
			}
			using( Stream stream = System.IO.File.OpenRead( pathToScriptFile ) ) 
			{
				_reader = new StreamReader( stream );

				connection = new SqlConnection(connectionString);

				SqlCommand	command = new SqlCommand();

				connection.Open();
				command.Connection = connection;
				command.CommandType	= System.Data.CommandType.Text;

				while( null != (sql = ReadNextStatementFromStream( _reader ) )) 
				{
					command.CommandText = sql;

					command.ExecuteNonQuery();
				}

				_reader.Close();
			}
			connection.Close();			
		}


		private static string ReadNextStatementFromStream( StreamReader _reader ) 
		{			
			StringBuilder sb = new StringBuilder();

			string lineOfText;

			while(true) 
			{
				lineOfText = _reader.ReadLine();
				if( lineOfText == null ) 
				{

					if( sb.Length > 0 ) 
					{
						return sb.ToString();
					}
					else 
					{
						return null;
					}
				}

				if( lineOfText.TrimEnd().ToUpper() == "GO" ) 
				{
					break;
				}
			
				sb.Append(lineOfText + Environment.NewLine);
			}

			return sb.ToString();
		}

		#endregion
		
		#region Children Collections
		
		/////////////////////////////////////////////////////////////////////////////////////
		/// Begin Children Collection 
		/////////////////////////////////////////////////////////////////////////////////////
		
		///<summary>
		///  An ArrayList of all the child collections for this table.
		///</summary>
		private System.Collections.ArrayList _collections = new System.Collections.ArrayList();
		
		///<summary>
		///  An ArrayList of all the properties rendered.  
		///  Eliminate Dupes through common junction tables and fk relationships
		///</summary>
		private Hashtable relationshipDictionary = new Hashtable();
		
		///<summary>
		///	Returns an array list of Child Collections of the object
		///</summary>
		public Hashtable GetChildrenCollections(SchemaExplorer.TableSchema table, SchemaExplorer.TableSchemaCollection tables) 
		{
			//System.Diagnostics.Debugger.Break();
			
			String strClasesDatabaseNoFromProperties="";
			bool esTablaClasesNoDatabase=false;						
			
			///  An ArrayList of all the child collections for this table.
			Hashtable _collections = new Hashtable();
		
			CurrentTable = table.Name;
			
			//Check Cache
			if( relationshipDictionary[table.Name] == null )
			{
				relationshipDictionary[table.Name] = _collections;
			}
			else 
			{				
				return relationshipDictionary[table.Name] as Hashtable;
			}
	
			
			
			//Provides Informatoin about the foreign keys
			SchemaExplorer.TableKeySchemaCollection fkeys = table.ForeignKeys;
			
			//Provides information about the indexes contained in the table. 
			IndexSchemaCollection indexes = table.Indexes;
			
			// Begin -- Fix for TableSchema.PrimaryKeys issue 2006-09-21 mwerner
			// Fix to generate code for recursive relations for a table
			
			// All keys that relate to this table
			TableKeySchemaCollection primaryKeyCollection = new TableKeySchemaCollection();
			primaryKeyCollection.AddRange(table.PrimaryKeys);
			
			// Add missing item to primaryKeyCollection 			
			foreach(TableKeySchema keyschema in fkeys)
			{
				if (keyschema.ForeignKeyTable.Equals(table) && keyschema.PrimaryKeyTable.Equals(table))
				{
					bool found = false;
					
					foreach(TableKeySchema primaryKey in primaryKeyCollection)
					{
						if (keyschema.Equals(primaryKey))
						{
							found = true;
							break;
						}
					}
					if (!found)
					{						
						primaryKeyCollection.Add(keyschema);
					}					
				}
			}
			
			// End -- Fix for TableSchema.PrimaryKeys issue 2006-09-21 mwerner						
			
			//for each relationship
			foreach(TableKeySchema keyschema in primaryKeyCollection)
			{			
				
						
				// add the relationship only if the linked table is part of the selected tables (ie: omit tables without primary key)
				if (!tables.Contains(keyschema.ForeignKeyTable.Owner, keyschema.ForeignKeyTable.Name))
				{					
					continue;
				}
				if (IsRelationOneToOne(keyschema))
				{
					//System.Windows.Forms.MessageBox.Show("1 a 1");
					CollectionInfo collectionInfo = new CollectionInfo();

					#region Additional 1:1 meta-data properties
					collectionInfo.PkColNames = GetColumnNames(table.PrimaryKey.MemberColumns);
					collectionInfo.PrimaryTable = GetClassName(table);
					collectionInfo.SecondaryTable = GetClassName(keyschema.ForeignKeyTable);
					collectionInfo.SecondaryTablePkColNames = GetColumnNames(keyschema.ForeignKeyTable.PrimaryKey.MemberColumns);
					collectionInfo.CollectionRelationshipType = RelationshipType.OneToOne;			
					collectionInfo.CollectionName = GetCollectionPropertyName(collectionInfo.SecondaryTable);
					collectionInfo.CollectionTypeName = GetCollectionClassName(collectionInfo.SecondaryTable);
					collectionInfo.TableKey = keyschema;
					collectionInfo.CleanName = GetClassName(collectionInfo.SecondaryTable);
					collectionInfo.SecondaryTableSchema=keyschema.ForeignKeyTable;										
					#endregion 

					//Key Name - Each collection should have a unique key namce
					collectionInfo.PkIdxName = keyschema.Name;
										
					// Method to fill this entity
					collectionInfo.GetByKeysName = "GetBy" + GetKeysName(keyschema.ForeignKeyMemberColumns);
					
					// Params to fill this entity
					collectionInfo.CallParams = GetFunctionRelationshipCallParameters(keyschema.PrimaryKeyMemberColumns);
					
					// Property String Name for a this relationship
					collectionInfo.PropertyName = GetClassName(collectionInfo.SecondaryTable);

					// Property String Name for a this relationship
					collectionInfo.PropertyNameUnique = GetClassName(collectionInfo.SecondaryTable);

					// Property Type for this relationship
					collectionInfo.TypeName = GetClassName(collectionInfo.SecondaryTable);
					
					// Field Variable String
					collectionInfo.FieldName = GetPrivateName(collectionInfo.SecondaryTable) + GetKeysName(keyschema.ForeignKeyMemberColumns);

					AddToCollection(_collections, collectionInfo);
				}
				//Add 1-N,N-1 relations
				else
				{
					CollectionInfo collectionInfo = new CollectionInfo();
					//System.Windows.Forms.MessageBox.Show("1 a M");
					
					#region Additional 1:N meta-data properties
					
					collectionInfo.PkColNames = GetColumnNames(table.PrimaryKey.MemberColumns);
					collectionInfo.PrimaryTable = GetClassName(table);
					collectionInfo.SecondaryTable = GetClassName(keyschema.ForeignKeyTable);
					collectionInfo.SecondaryTableSchema = keyschema.ForeignKeyTable;
					collectionInfo.SecondaryTablePkColNames = GetColumnNames(keyschema.ForeignKeyTable.PrimaryKey.MemberColumns);
					collectionInfo.CollectionRelationshipType = RelationshipType.OneToMany;
					collectionInfo.CollectionName = GetCollectionPropertyName(collectionInfo.SecondaryTable);
					collectionInfo.TableKey = keyschema;
					collectionInfo.CleanName = GetClassName(collectionInfo.SecondaryTable); 
					collectionInfo.CollectionTypeName = GetCollectionClassName(collectionInfo.SecondaryTable);
										
					#endregion 
					
					//Key Name - Each collection should have a unique key namce
					collectionInfo.PkIdxName = keyschema.Name;
					
					
					// Gets Method Calls
					if (IsForeignKeyCoveredByIndex(keyschema))
					{
						IndexSchema idx = GetIndexCoveringForeignKey(keyschema);
						
						// Method to fill this entity
						collectionInfo.GetByKeysName = "GetBy" + GetKeysName(idx.MemberColumns);

						// Params to fill this entity
						collectionInfo.CallParams = GetFunctionRelationshipCallParametersInKeyOrder(idx.MemberColumns, keyschema);
					}
					else
					{
						// Method to fill this entity
						collectionInfo.GetByKeysName = "GetBy" + GetKeysName(keyschema.ForeignKeyMemberColumns);
						
						// Params to fill this entity
						collectionInfo.CallParams = GetFunctionRelationshipCallParameters(keyschema.PrimaryKeyMemberColumns);
					}	

					// Usually the same as the property string
					collectionInfo.PropertyName = GetCollectionPropertyName(collectionInfo.SecondaryTable);

					// Usually the same as the property string
					collectionInfo.PropertyNameUnique = GetCollectionPropertyName(collectionInfo.SecondaryTable);

					// Usually the same as the property type
					collectionInfo.TypeName = GetCollectionClassName(collectionInfo.SecondaryTable);

					// Field Variable String
					collectionInfo.FieldName = GetPrivateName(collectionInfo.SecondaryTable) + GetKeysName(keyschema.ForeignKeyMemberColumns);

					AddToCollection(_collections, collectionInfo);
				}
			}

			//Add N-N relations
			foreach(SchemaExplorer.TableKeySchema key in primaryKeyCollection)
			{
				esTablaClasesNoDatabase=false;
				
				// Check that the key is related to a junction table and that this key relate a PK in this junction table
				
				//System.Windows.Forms.MessageBox.Show(table.Name+" M a M:"+key.ForeignKeyTable.Name);
				
				/*
				if(tables.Contains(key.ForeignKeyTable.Owner, key.ForeignKeyTable.Name))
				{
					System.Windows.Forms.MessageBox.Show(table.Name+" si 1");		
				}
				
				
				if(IsJunctionTable(key.ForeignKeyTable))
				{
					System.Windows.Forms.MessageBox.Show(table.Name+" si 2: IsJunctionTable:"+key.ForeignKeyTable.Name);		
				}
				else
				{
					System.Windows.Forms.MessageBox.Show("No 2:"+key.ForeignKeyTable.Name);
				}
				*/
				//BYDAN_NETTIERS
				
				/*
				if(IsJunctionKey(key))
				{
					System.Windows.Forms.MessageBox.Show(table.Name+" si 3: IsJunctionKey:"+key.ForeignKeyTable.Name);		
				}
				else
				{
					System.Windows.Forms.MessageBox.Show("No 3");
				}
				*/
				
				//EN SU NOMBRE EL NOMBRE DE LA TABLA PRINCIPAL, CASO CONTRARIO NO SE TOMA EN CUENTA, ASI SE AHORRA TIEMPO
					
				strClasesDatabaseNoFromProperties=GetClasesNoDatabaseFromPropertiesC(table.Database);
				
				if(ExisteEnListaComasC(strClasesDatabaseNoFromProperties,table.Name)) {
					esTablaClasesNoDatabase=true;		
					//Trace.WriteLine(table.Name);
				}
				
				if ( tables.Contains(key.ForeignKeyTable.Owner, key.ForeignKeyTable.Name) &&  IsJunctionTable(key.ForeignKeyTable) && IsJunctionKey(key) && !esTablaClasesNoDatabase)
				{
					//System.Windows.Forms.MessageBox.Show("OK:  M a M");
					TableSchema junctionTable = key.ForeignKeyTable;
					
					// Search for the other(s) key(s) of the junction table' primary key
					foreach(TableKeySchema junctionTableKey in junctionTable.ForeignKeys)
					{				
						if ( tables.Contains(junctionTableKey.ForeignKeyTable.Owner, junctionTableKey.ForeignKeyTable.Name) && IsJunctionKey(junctionTableKey) && junctionTableKey.Name != key.Name )
						{
							//BYDAN----->CUANDO  EN UNA TABLA EXISTE 2 FOREIGN KEY DE OTRA, SE PIENSA QUE EXISTE RELACION M-M QUE NO EXISTE
							if(GetClassName(table).Equals(GetClassName(junctionTableKey.PrimaryKeyTable))) {
								continue;
							}
							//System.Windows.Forms.MessageBox.Show("OK2:  M a M");
							
							TableSchema secondaryTable = junctionTableKey.PrimaryKeyTable;
																			
							CollectionInfo collectionInfo = new CollectionInfo();
					
							#region Additional M:M meta-data 
							collectionInfo.PkColNames = GetColumnNames(table.PrimaryKey.MemberColumns);
							collectionInfo.PrimaryTable = GetClassName(table);
							collectionInfo.SecondaryTable = GetClassName(junctionTableKey.PrimaryKeyTable);
							collectionInfo.SecondaryTablePkColNames = GetColumnNames(junctionTableKey.PrimaryKeyTable.PrimaryKey.MemberColumns);
							collectionInfo.JunctionTableSchema = junctionTable;
							collectionInfo.SecondaryTableSchema = junctionTableKey.PrimaryKeyTable;
							collectionInfo.PrimaryTableSchema = table;
							collectionInfo.JunctionTable = GetClassName(junctionTable);
							collectionInfo.JunctionTablePkColNames = GetColumnNames(junctionTable.PrimaryKey.MemberColumns);
							collectionInfo.CollectionName = string.Format("{0}_From_{1}", GetCollectionPropertyName( collectionInfo.SecondaryTable), GetClassName(collectionInfo.JunctionTable)); //GetManyToManyName(GetCollectionClassName( collectionInfo.SecondaryTable), collectionInfo.JunctionTable);
							collectionInfo.CollectionTypeName = GetCollectionClassName( collectionInfo.SecondaryTable);
							collectionInfo.CollectionRelationshipType = RelationshipType.ManyToMany;
							collectionInfo.FkColNames = GetColumnNames(secondaryTable.PrimaryKey.MemberColumns);
							collectionInfo.TableKey = key;		
							collectionInfo.CleanName = string.Format(manyToManyFormat, GetClassName(collectionInfo.SecondaryTable), GetClassName(junctionTable.Name)); 
														
							#endregion 
							
							//Key Name - Each collection should have a unique key name
							collectionInfo.PkIdxName = junctionTableKey.Name;
							
							// Property Name
							collectionInfo.PropertyName = string.Format("{0}_From_{1}", GetCollectionPropertyName( collectionInfo.SecondaryTable), GetClassName(collectionInfo.JunctionTable)); 

							// Uninque Property Name, in case of conflict
							collectionInfo.PropertyNameUnique = string.Format("{0}_From_{1}", GetCollectionPropertyName( collectionInfo.SecondaryTable), GetClassName(collectionInfo.JunctionTable)); 

							// Field Variable String
							collectionInfo.FieldName = GetManyToManyName(key, GetCleanName(junctionTable.Name)).Substring(5);
							
							// Property/Field Type Name
							collectionInfo.TypeName = GetCollectionClassName(collectionInfo.SecondaryTable);
							
							//Method Params
							collectionInfo.CallParams = GetFunctionRelationshipCallParameters(table.PrimaryKey.MemberColumns);
							
							//Method Name
							collectionInfo.GetByKeysName = GetManyToManyName(key, GetCleanName(junctionTable.Name));
							
							AddToCollection(_collections, collectionInfo);
						}
					}
				}
			}// end N-N relations
			
			return _collections; 
		}
		
		//AL CACHE CODESMITH ERROR
		/*
		public Hashtable GetChildrenCollections(SchemaExplorer.TableSchema table, SchemaExplorer.TableSchemaCollection tables) 
		{
			//Debugger.Break();
			
			bool isJunction=false;
			String strClasesDatabaseNoFromProperties="";
			bool esTablaClasesNoDatabase=false;
			
			Stopwatch stopWatchChildren = new Stopwatch();
			Stopwatch stopWatchTotalChildren = new Stopwatch();
			Stopwatch stopWatchGroupChildren = new Stopwatch();
			
			if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchTotalChildren,IS_DEBUG3);}
			if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchChildren,IS_DEBUG3);}
			
			if(IS_DEBUG3) {Trace.WriteLine("INICIO GETCHILDREN");}
			
			///  An ArrayList of all the child collections for this table.
			Hashtable _collections = new Hashtable();
		
			CurrentTable = table.Name;
			
			//Check Cache
			if( relationshipDictionary[table.Name] == null ){	
				//Trace.WriteLine("NO CACHE PARA "+table.Name);
				relationshipDictionary[table.Name] = _collections;
				
			} else {
				//Trace.WriteLine("CACHE PARA "+table.Name);
				return relationshipDictionary[table.Name] as Hashtable;
			}
	
			//Provides Informatoin about the foreign keys
			if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchChildren,IS_DEBUG3);}	
			//TO_OPTIMIZE
			//ESTO TOMA EL MAYOR TIEMPO
			SchemaExplorer.TableKeySchemaCollection fkeys = new TableKeySchemaCollection();//table.ForeignKeys;
			SchemaExplorer.TableKeySchemaCollection primaryKeys = new TableKeySchemaCollection();//table.ForeignKeys;
			
			TableKeySchemaCollectionMe fkeysMe = new TableKeySchemaCollectionMe();//table.ForeignKeys;
			TableKeySchemaCollectionMe primaryKeysMe = new TableKeySchemaCollectionMe();//table.ForeignKeys;
			
			TableSchemaMe tableSchemaMe=new TableSchemaMe();
						
			
			fkeys = table.ForeignKeys;
			primaryKeys=table.PrimaryKeys;
			
			
			
			
			if(IS_DEBUG3) {DetenerTiempoC(stopWatchChildren,PaquetesGenerar.AUXILIAR,"GETCHILDREN: ASIGNA FOREIGNKEYS",IS_DEBUG3); }
			
			//Provides information about the indexes contained in the table. 
			IndexSchemaCollection indexes = table.Indexes;
			
			// Begin -- Fix for TableSchema.PrimaryKeys issue 2006-09-21 mwerner
			// Fix to generate code for recursive relations for a table
			
			// All keys that relate to this table
			TableKeySchemaCollection primaryKeyCollection = new TableKeySchemaCollection();
			TableKeySchemaCollectionMe primaryKeyCollectionMe = new TableKeySchemaCollectionMe();
			
			primaryKeyCollection.AddRange(primaryKeys);
								
			
			if(IS_DEBUG3) {
				//Trace.WriteLine("GETCHILDREN: ASIGNA FOREIGN,INDICES,PRIMARIES");	
			}
			
			if(IS_DEBUG3) {DetenerTiempoC(stopWatchChildren,PaquetesGenerar.AUXILIAR,"GETCHILDREN: ASIGNA FOREIGN,INDICES,PRIMARIES",IS_DEBUG3); }
			
			if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchChildren,IS_DEBUG3);}
			
			// Add missing item to primaryKeyCollection 
				foreach(TableKeySchema keyschema in fkeys) {
					if (keyschema.ForeignKeyTable.Equals(table) && keyschema.PrimaryKeyTable.Equals(table)) {
						bool found = false;
						
						foreach(TableKeySchema primaryKey in primaryKeyCollection) {
							if (keyschema.Equals(primaryKey)) {
								found = true;
								break;
							}
						}
						if (!found) {
							primaryKeyCollection.Add(keyschema);
						}					
					}
				}
			
			
			if(IS_DEBUG3) {
				//Trace.WriteLine("GETCHILDREN: TERMINA PRIMARIES KEY COLLECTION");	
			}
			
			if(IS_DEBUG3) {DetenerTiempoC(stopWatchChildren,PaquetesGenerar.AUXILIAR,"GETCHILDREN: TERMINA PRIMARIES KEY COLLECTION",IS_DEBUG3); }
			
			if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchChildren,IS_DEBUG3);}
			// End -- Fix for TableSchema.PrimaryKeys issue 2006-09-21 mwerner
			
			
			//for each relationship
				foreach(TableKeySchema keyschema in primaryKeyCollection)
				{
					// add the relationship only if the linked table is part of the selected tables (ie: omit tables without primary key)
					if (!tables.Contains(keyschema.ForeignKeyTable.Owner, keyschema.ForeignKeyTable.Name))
					{					
						continue;
					}
					if (IsRelationOneToOne(keyschema,table))
					{
						//System.Windows.Forms.MessageBox.Show("1 a 1");
						CollectionInfo collectionInfo = new CollectionInfo();
	
						#region Additional 1:1 meta-data properties
						collectionInfo.PkColNames = GetColumnNames(table.PrimaryKey.MemberColumns);
						collectionInfo.PrimaryTable = GetClassName(table);
						collectionInfo.SecondaryTable = GetClassName(keyschema.ForeignKeyTable);
						collectionInfo.SecondaryTablePkColNames = GetColumnNames(keyschema.ForeignKeyTable.PrimaryKey.MemberColumns);
						collectionInfo.CollectionRelationshipType = RelationshipType.OneToOne;			
						collectionInfo.CollectionName = GetCollectionPropertyName(collectionInfo.SecondaryTable);
						collectionInfo.CollectionTypeName = GetCollectionClassName(collectionInfo.SecondaryTable);
						collectionInfo.TableKey = keyschema;
						collectionInfo.CleanName = GetClassName(collectionInfo.SecondaryTable);
						collectionInfo.SecondaryTableSchema=keyschema.ForeignKeyTable;
						#endregion 
	
						//Key Name - Each collection should have a unique key namce
						collectionInfo.PkIdxName = keyschema.Name;
											
						// Method to fill this entity
						collectionInfo.GetByKeysName = "GetBy" + GetKeysName(keyschema.ForeignKeyMemberColumns);
						
						// Params to fill this entity
						collectionInfo.CallParams = GetFunctionRelationshipCallParameters(keyschema.PrimaryKeyMemberColumns);
						
						// Property String Name for a this relationship
						collectionInfo.PropertyName = GetClassName(collectionInfo.SecondaryTable);
	
						// Property String Name for a this relationship
						collectionInfo.PropertyNameUnique = GetClassName(collectionInfo.SecondaryTable);
	
						// Property Type for this relationship
						collectionInfo.TypeName = GetClassName(collectionInfo.SecondaryTable);
						
						// Field Variable String
						collectionInfo.FieldName = GetPrivateName(collectionInfo.SecondaryTable) + GetKeysName(keyschema.ForeignKeyMemberColumns);
	
						AddToCollection(_collections, collectionInfo);
					}
					//Add 1-N,N-1 relations
					else
					{
						CollectionInfo collectionInfo = new CollectionInfo();
						//System.Windows.Forms.MessageBox.Show("1 a M");
						
						#region Additional 1:N meta-data properties
						
						collectionInfo.PkColNames = GetColumnNames(table.PrimaryKey.MemberColumns);
						collectionInfo.PrimaryTable = GetClassName(table);
						collectionInfo.SecondaryTable = GetClassName(keyschema.ForeignKeyTable);
						collectionInfo.SecondaryTableSchema = keyschema.ForeignKeyTable;
						collectionInfo.SecondaryTablePkColNames = GetColumnNames(keyschema.ForeignKeyTable.PrimaryKey.MemberColumns);
						collectionInfo.CollectionRelationshipType = RelationshipType.OneToMany;
						collectionInfo.CollectionName = GetCollectionPropertyName(collectionInfo.SecondaryTable);
						collectionInfo.TableKey = keyschema;
						collectionInfo.CleanName = GetClassName(collectionInfo.SecondaryTable); 
						collectionInfo.CollectionTypeName = GetCollectionClassName(collectionInfo.SecondaryTable);
						
						#endregion 
						
						//Key Name - Each collection should have a unique key namce
						collectionInfo.PkIdxName = keyschema.Name;
						
						
						// Gets Method Calls
						if (IsForeignKeyCoveredByIndex(keyschema))
						{
							IndexSchema idx = GetIndexCoveringForeignKey(keyschema);
							
							// Method to fill this entity
							collectionInfo.GetByKeysName = "GetBy" + GetKeysName(idx.MemberColumns);
	
							// Params to fill this entity
							collectionInfo.CallParams = GetFunctionRelationshipCallParametersInKeyOrder(idx.MemberColumns, keyschema);
						}
						else
						{
							// Method to fill this entity
							collectionInfo.GetByKeysName = "GetBy" + GetKeysName(keyschema.ForeignKeyMemberColumns);
							
							// Params to fill this entity
							collectionInfo.CallParams = GetFunctionRelationshipCallParameters(keyschema.PrimaryKeyMemberColumns);
						}	
	
						// Usually the same as the property string
						collectionInfo.PropertyName = GetCollectionPropertyName(collectionInfo.SecondaryTable);
	
						// Usually the same as the property string
						collectionInfo.PropertyNameUnique = GetCollectionPropertyName(collectionInfo.SecondaryTable);
	
						// Usually the same as the property type
						collectionInfo.TypeName = GetCollectionClassName(collectionInfo.SecondaryTable);
	
						// Field Variable String
						collectionInfo.FieldName = GetPrivateName(collectionInfo.SecondaryTable) + GetKeysName(keyschema.ForeignKeyMemberColumns);
	
						AddToCollection(_collections, collectionInfo);
					}
				}			
			

			if(IS_DEBUG3) {
				//Trace.WriteLine("GETCHILDREN: COLLECTION INFO PRIMARIES KEYS");	
			}
			
			if(IS_DEBUG3) {DetenerTiempoC(stopWatchChildren,PaquetesGenerar.AUXILIAR,"GETCHILDREN: COLLECTION RELATIONS INFO PRIMARIES KEYS 1-1 AND 1-M",IS_DEBUG3); }
			
			if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchGroupChildren,IS_DEBUG3);}
			
			//Add N-N relations
			//TO_OPTIMIZE
			//AQUI TOMA EL MAYOR TIEMPO
			int countNNRelation=0;
			
			
				foreach(SchemaExplorer.TableKeySchema key in primaryKeyCollection) {
					countNNRelation++;
					esTablaClasesNoDatabase=false;				
					isJunction=false;
					
					// Check that the key is related to a junction table and that this key relate a PK in this junction table
					
					//System.Windows.Forms.MessageBox.Show(table.Name+" M a M:"+key.ForeignKeyTable.Name);
					
					
					
					
					if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchChildren,IS_DEBUG3);}
													
					
					//LA FUNCION IsJunctionTable SE DEMORA POR LO QUE SE PREGUNTA SI LA POSIBLE TABLA JUNCTION CONTIENE 
					//EN SU NOMBRE EL NOMBRE DE LA TABLA PRINCIPAL, CASO CONTRARIO NO SE TOMA EN CUENTA, ASI SE AHORRA TIEMPO
					
					strClasesDatabaseNoFromProperties=GetClasesNoDatabaseFromPropertiesC(table.Database);
				
					if(ExisteEnListaComasC(strClasesDatabaseNoFromProperties,table.Name)) {
						esTablaClasesNoDatabase=true;		
						//Trace.WriteLine(table.Name);
					}
				
					if(key.ForeignKeyTable.Name.Contains(table.Name) && !esTablaClasesNoDatabase) {
						isJunction=IsJunctionTable(key.ForeignKeyTable);
						//Trace.WriteLine("SI ES POSIBLE M-M:"+key.ForeignKeyTable.Name+" DE "+table.Name);
					} else {
						//Trace.WriteLine("NO ES POSIBLE M-M:"+key.ForeignKeyTable.Name+" DE "+table.Name);
					}
					
						
					
					
					
					
					if (tables.Contains(key.ForeignKeyTable.Owner, key.ForeignKeyTable.Name) && IsJunctionKey(key)
						&& isJunction)//LO HACE LENTO
					{
						//Trace.WriteLine("aaaaaaaaaaaaaaaaaaaaaaaaaa");
						
						//System.Windows.Forms.MessageBox.Show("OK:  M a M");
						TableSchema junctionTable = key.ForeignKeyTable;
						
						// Search for the other(s) key(s) of the junction table' primary key
						TableKeySchemaCollection tableForeignKeySchemaCollection=new TableKeySchemaCollection();
						TableKeySchemaCollectionMe tableForeignKeySchemaCollectionMe=new TableKeySchemaCollectionMe();
						tableSchemaMe=new TableSchemaMe();
				
						tableForeignKeySchemaCollection=junctionTable.ForeignKeys;
						
						
							foreach(TableKeySchema junctionTableKey in tableForeignKeySchemaCollection)
							{				
								if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchChildren,IS_DEBUG3);}
								
								if ( tables.Contains(junctionTableKey.ForeignKeyTable.Owner, junctionTableKey.ForeignKeyTable.Name) && IsJunctionKey(junctionTableKey) && junctionTableKey.Name != key.Name )
								{
									
									//BYDAN----->CUANDO  EN UNA TABLA EXISTE 2 FOREIGN KEY DE OTRA, SE PIENSA QUE EXISTE RELACION M-M QUE NO EXISTE
									if(GetClassName(table).Equals(GetClassName(junctionTableKey.PrimaryKeyTable))) {
										continue;
									}
									//System.Windows.Forms.MessageBox.Show("OK2:  M a M");
									
									TableSchema secondaryTable = junctionTableKey.PrimaryKeyTable;
																					
									CollectionInfo collectionInfo = new CollectionInfo();
							
								if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchChildren,IS_DEBUG3);}
									#region Additional M:M meta-data 
									collectionInfo.PkColNames = GetColumnNames(table.PrimaryKey.MemberColumns);
									collectionInfo.PrimaryTable = GetClassName(table);
									collectionInfo.SecondaryTable = GetClassName(junctionTableKey.PrimaryKeyTable);
									collectionInfo.SecondaryTablePkColNames = GetColumnNames(junctionTableKey.PrimaryKeyTable.PrimaryKey.MemberColumns);
									collectionInfo.JunctionTableSchema = junctionTable;
									collectionInfo.SecondaryTableSchema = junctionTableKey.PrimaryKeyTable;
									collectionInfo.PrimaryTableSchema = table;
									collectionInfo.JunctionTable = GetClassName(junctionTable);
									collectionInfo.JunctionTablePkColNames = GetColumnNames(junctionTable.PrimaryKey.MemberColumns);
									collectionInfo.CollectionName = string.Format("{0}_From_{1}", GetCollectionPropertyName( collectionInfo.SecondaryTable), GetClassName(collectionInfo.JunctionTable)); //GetManyToManyName(GetCollectionClassName( collectionInfo.SecondaryTable), collectionInfo.JunctionTable);
									collectionInfo.CollectionTypeName = GetCollectionClassName( collectionInfo.SecondaryTable);
									collectionInfo.CollectionRelationshipType = RelationshipType.ManyToMany;
									collectionInfo.FkColNames = GetColumnNames(secondaryTable.PrimaryKey.MemberColumns);
									collectionInfo.TableKey = key;		
									collectionInfo.CleanName = string.Format(manyToManyFormat, GetClassName(collectionInfo.SecondaryTable), GetClassName(junctionTable.Name)); 
									#endregion 
								if(IS_DEBUG3) {DetenerTiempoC(stopWatchChildren,PaquetesGenerar.AUXILIAR,"FOR COLLECTION:(3) LOAD INFO COLLECTION ",IS_DEBUG3); }
									
								if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchChildren,IS_DEBUG3);}
									//Key Name - Each collection should have a unique key name
									collectionInfo.PkIdxName = junctionTableKey.Name;
									
									// Property Name
									collectionInfo.PropertyName = string.Format("{0}_From_{1}", GetCollectionPropertyName( collectionInfo.SecondaryTable), GetClassName(collectionInfo.JunctionTable)); 
		
									// Uninque Property Name, in case of conflict
									collectionInfo.PropertyNameUnique = string.Format("{0}_From_{1}", GetCollectionPropertyName( collectionInfo.SecondaryTable), GetClassName(collectionInfo.JunctionTable)); 
									
								if(IS_DEBUG3) {DetenerTiempoC(stopWatchChildren,PaquetesGenerar.AUXILIAR,"FOR COLLECTION:(4) PROPERTY NAME ",IS_DEBUG3); }
									
								if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchChildren,IS_DEBUG3);}
									// Field Variable String
									collectionInfo.FieldName = GetManyToManyName(key, GetCleanName(junctionTable.Name)).Substring(5);
									
									// Property/Field Type Name
									collectionInfo.TypeName = GetCollectionClassName(collectionInfo.SecondaryTable);
								
								if(IS_DEBUG3) {DetenerTiempoC(stopWatchChildren,PaquetesGenerar.AUXILIAR,"FOR COLLECTION:(4) MANY TO MANY NAME ",IS_DEBUG3); }
								
								if(IS_DEBUG3) {	IniciarTiempoC(ref stopWatchChildren,IS_DEBUG3);}
									//Method Params
									collectionInfo.CallParams = GetFunctionRelationshipCallParameters(table.PrimaryKey.MemberColumns);
									
									//Method Name
									collectionInfo.GetByKeysName = GetManyToManyName(key, GetCleanName(junctionTable.Name));
									
									AddToCollection(_collections, collectionInfo);
									
								if(IS_DEBUG3) {DetenerTiempoC(stopWatchChildren,PaquetesGenerar.AUXILIAR,"FOR COLLECTION:(4) RELATIONSHIP PARAMETER Y FINAL" ,IS_DEBUG3); }
								}
								
								if(IS_DEBUG3) {DetenerTiempoC(stopWatchChildren,PaquetesGenerar.AUXILIAR,"FOR COLLECTION:(2) IF 2",IS_DEBUG3); }
									
							} 
						
					}
					
					if(IS_DEBUG3) {DetenerTiempoC(stopWatchChildren,PaquetesGenerar.AUXILIAR,"FOR COLLECTION:(1) IF 1",IS_DEBUG3); }
					
					
					if(IS_DEBUG3) {
						//Trace.WriteLine("GETCHILDREN: FOR COLLECTION INFO N-N RELATIONS STEP "+countNNRelation);	
					}
				} 
			
			
			if(IS_DEBUG3) {
				//Trace.WriteLine("GETCHILDREN: COLLECTION INFO N-N RELATIONS ");	
			}
			
			if(IS_DEBUG3) {DetenerTiempoC(stopWatchGroupChildren,PaquetesGenerar.AUXILIAR,"GETCHILDREN: COLLECTION INFO N-N RELATIONS",IS_DEBUG3); }
			
			
			if(IS_DEBUG3) {
				//Trace.WriteLine("FIN GETCHILDREN");	
			}
			
			if(IS_DEBUG3) {DetenerTiempoC(stopWatchTotalChildren,PaquetesGenerar.AUXILIAR,"FIN GETCHILDREN",IS_DEBUG3); }
			
			//Trace.WriteLine("aaaaaaaaaaaa");
			
			return _collections; 
		}
		*/
		
		public void AddToCollection(Hashtable _collections, CollectionInfo collectionInfo)
		{
			if(_collections[collectionInfo.PropertyName] == null)
			{
				_collections[collectionInfo.PropertyName] = collectionInfo;
			}
			else
			{
				CollectionInfo tmp = (CollectionInfo)_collections[collectionInfo.PropertyName];
				tmp.PropertyNameUnique = collectionInfo.PropertyName + tmp.GetByKeysName.Substring(3);

				collectionInfo.PropertyName += collectionInfo.GetByKeysName.Substring(3);
				collectionInfo.PropertyNameUnique += collectionInfo.GetByKeysName.Substring(3);

				if (_collections[collectionInfo.PropertyNameUnique] != null)
				{
					collectionInfo.PropertyName += "From" + GetPropertyName(collectionInfo.PkIdxName);
					collectionInfo.PropertyNameUnique += "From" + GetPropertyName(collectionInfo.PkIdxName);
				}
				_collections[collectionInfo.PropertyName] = collectionInfo;
			}
		}
		#endregion 
		
		#region CollectionInfo class
		///<summary>
		///	Child relationship structure information and their <see cref="RelationshipType" />
		/// to store in the ChildCollections ArrayList
		///</summary>
		public class CollectionInfo 
		{
			public string CleanName;
			public string[] PkColNames;
			public string PkIdxName;
			public string[] FkColNames;
			public string FkIdxName;
			public string PrimaryTable;
			public string SecondaryTable;
			public string[] SecondaryTablePkColNames;
			public string JunctionTable;
			public string[] JunctionTablePkColNames;
			public TableSchema JunctionTableSchema;
			public TableSchema SecondaryTableSchema;
			public TableSchema PrimaryTableSchema;
			public string CollectionName = string.Empty;
			public string CollectionTypeName = string.Empty;
			public string CallParams = string.Empty;
			public string PropertyName = string.Empty;
			public string PropertyNameUnique = string.Empty;
			public string TypeName = string.Empty;
			public string FieldName = string.Empty;
			public string GetByKeysName = string.Empty;
			public RelationshipType CollectionRelationshipType;	
			public TableKeySchema TableKey = null;
		}
		#endregion
			
		#region Relationships
		
		/// <summary>
		/// Gets params for a method based on the columns
		/// </summary>
		public string GetFunctionRelationshipCallParameters(ColumnSchemaCollection columns)
		{
			
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				if (i > 0)
					output.Append(", ");
				output.AppendFormat("entity.{0}", GetPropertyName(columns[i].Name));
			}
			return output.ToString();
		}

		public string GetFunctionRelationshipCallParameters(MemberColumnSchemaCollectionMe columns)
		{
			
			StringBuilder output = new StringBuilder();
			for (int i = 0; i < columns.Count; i++)
			{
				ColumnSchema column=columns[i].Column;
				
				if (i > 0)
					output.Append(", ");
				output.AppendFormat("entity.{0}", GetPropertyName(column.Name));
			}
			return output.ToString();
		}
		
		/// <summary>
		/// Orders the params for a method, based on the ordered column list.  It's useful when dealing with the IsForeignKeyCoveredByIndex method, which the 
		/// columns may be in different orders
		/// </summary>
		public string GetFunctionRelationshipCallParametersInKeyOrder(ColumnSchemaCollection orderedColumns, TableKeySchema keySchema)
		{
			ColumnSchemaCollection unorderedColumns = keySchema.ForeignKeyMemberColumns;
			ColumnSchemaCollection entityColumns = keySchema.PrimaryKeyMemberColumns;
			
			StringBuilder output = new StringBuilder();
			for (int j = 0; j < orderedColumns.Count; j++)
			{
				for (int i = 0; i < unorderedColumns.Count; i++)
				{
					if (orderedColumns[j].Name.ToLower() != unorderedColumns[i].Name.ToLower())
						continue;
						
					if (j > 0)
						output.Append(", ");
						
					output.AppendFormat("entity.{0}", GetPropertyName(entityColumns[i].Name));
				}
			}
			return output.ToString();
		}
		
		public string GetFunctionRelationshipCallParametersInKeyOrder(ColumnSchemaCollection orderedColumns, TableKeySchemaMe keySchema)
		{
			MemberColumnSchemaCollectionMe unorderedColumns = keySchema.ForeignKeyMemberColumns;
			MemberColumnSchemaCollectionMe entityColumns = keySchema.PrimaryKeyMemberColumns;
			
			StringBuilder output = new StringBuilder();
			for (int j = 0; j < orderedColumns.Count; j++)
			{
				for (int i = 0; i < unorderedColumns.Count; i++)
				{
					ColumnSchema columnOrdered=orderedColumns[j];
					ColumnSchema columnUnOrdered=unorderedColumns[j].Column;
					ColumnSchema columnEntity=entityColumns[j].Column;
					
					if (columnOrdered.Name.ToLower() != columnUnOrdered.Name.ToLower())
						continue;
						
					if (j > 0)
						output.Append(", ");
						
					output.AppendFormat("entity.{0}", GetPropertyName(columnEntity.Name));
				}
			}
			return output.ToString();
		}
	
		///<summary>
		/// Workaround for when a method in the DAL is using Indexes to create the method
		/// instead of the keys
		/// Sometimes when working with composite primary keys, the orders could be 
		/// different in the index than in the key.
		/// So it could be Col1 Col2 in TableKeySchema.ForeignKeyMemberColumns 
		/// But in Index.MemberColumns it could be Col2, Col1
		///</summary>
		public ColumnSchemaCollection GetCorrectColumnOrder(TableKeySchema key)
		{		
			if(IsForeignKeyCoveredByIndex(key))
			{
				bool found = true;
				foreach (IndexSchema idx in key.PrimaryKeyTable.Indexes)
				{
					foreach(ColumnSchema col in key.ForeignKeyMemberColumns)
					{
						if (!idx.MemberColumns.Contains(col.Name))
							found = false;
					}
					
					if (found)
					{
						return idx.MemberColumns;
					}
				}
			}
			
			return key.ForeignKeyMemberColumns;
		}

		/// <summary>
		/// Determines if the table key represents a identifying relationship.
		/// </summary>
		/// <param name="key">The key to check.</param>
		/// <returns>true if all of the child's foreign key members are part of the primary key.</returns>
		/// <remarks>
		/// An identifying relationship means that the child table cannot 
		/// be uniquely identified without the parent.
		/// </remarks>
		/// <exception cref="ArgumentNullException">key is null</exception>
		public bool IsIdentifyingRelationship(TableKeySchema key)
		{
			if (key == null)
				throw new ArgumentNullException("key");

			PrimaryKeySchema childPrimaryKey = key.ForeignKeyTable.PrimaryKey;
			
			// cant be a identifying relationship if the child does not have a PK
			if ( childPrimaryKey.MemberColumns.Count == 0 )
				return false;

			for (int i = 0; i < key.ForeignKeyMemberColumns.Count; i++)
			{
				// see if the child table's PK has the FK member
				if (childPrimaryKey.MemberColumns[key.ForeignKeyMemberColumns[i].Name] == null)
					;//return false;
			}
			return true;
		}

		public bool IsIdentifyingRelationship(TableKeySchemaMe key)
		{
			if (key == null)
				throw new ArgumentNullException("key");

			//ESTO NO GENERA UN CLASSE ME
			PrimaryKeySchema childPrimaryKey = key.ForeignKeyTable.PrimaryKey;
			
			// cant be a identifying relationship if the child does not have a PK
			if ( childPrimaryKey.MemberColumns.Count == 0 )
				return false;

			for (int i = 0; i < key.ForeignKeyMemberColumns.Count; i++)
			{
				// see if the child table's PK has the FK member
				if (childPrimaryKey.MemberColumns[key.ForeignKeyMemberColumns[i].Name] == null)
					;//return false;
			}
			return true;
		}
		
		///<summary>
		/// returns true all primary key columns have is a foreign key relationship
		/// </summary>
		public bool IsJunctionTable(TableSchema table) {	
			//return false;
			//Trace.WriteLine("JUNCTION");
			if (!HasPrimaryKey(table)) {
				//Response.WriteLine(string.Format("IsJunctionTable: The table {0} doesn't have a primary key.", table.Name));
				return false;
			}
			
			//NETTIERS(DESHABILITADO-SIEMPRE)	
			//if (table.PrimaryKey.MemberColumns.Count == 1) {
				//BYDAN_NETTIERS
				//return false;				
			//}
			
			TableKeySchemaCollection tableForeignKeySchemaCollection=new TableKeySchemaCollection();
			TableKeySchemaCollectionMe tableForeignKeySchemaCollectionMe=new TableKeySchemaCollectionMe();
			ColumnSchemaCollection columnForeignKeySchemaCollection=new ColumnSchemaCollection();
			
			TableSchemaMe tableSchemaMe=new TableSchemaMe();			
			
				tableForeignKeySchemaCollection=table.ForeignKeys;
				columnForeignKeySchemaCollection=table.ForeignKeyColumns;
					
			
				// junction table requires at least 2 FK
				if (tableForeignKeySchemaCollection.Count < 2)
					return false;
				
				// we need 2 identifying relationships
				
				int identifyingRelationshipCount = 0;
				for (int i = 0; i < tableForeignKeySchemaCollection.Count; i++)
				{
					if(tableForeignKeySchemaCollection[i].PrimaryKeyTable.Equals(table))
					{
						//System.Windows.Forms.MessageBox.Show(table.Name);
						//System.Windows.Forms.MessageBox.Show(tableForeignKeySchemaCollection[i].PrimaryKeyTable.Name);
						continue;
					}
					
						
					//BYDAN_NETTIERS	2da condicion no puede ser junction si foreing key es id
					if (IsIdentifyingRelationship(tableForeignKeySchemaCollection[i]) 
							&& !tableForeignKeySchemaCollection[i].ForeignKeyMemberColumns[0].Name.Equals(strId)) {
							
						identifyingRelationshipCount++;
					}
				}
				
				if (identifyingRelationshipCount != 2) {
					return false;
				}
					//BYDAN_NETTIERS(DESHABILITADO-SIEMPRE)	
					
					//for (int i=0;i < table.PrimaryKey.MemberColumns.Count; i++){
					//	if (!table.PrimaryKey.MemberColumns[i].IsForeignKeyMember)
					//		;//return false;
					//}
					
				
				//BYDAN_NETTIERS
				for (int i=0;i < columnForeignKeySchemaCollection.Count; i++){//table.ForeignKeyColumns.Count
					//Trace.WriteLine(table.Name+strSimboloDosPuntos+GetNombreClaseRelacionadaFromColumn(table.ForeignKeyColumns[i]));
					if (!table.Name.Contains(GetNombreClaseRelacionadaFromColumn(columnForeignKeySchemaCollection[i]))) {
						return false;
					}
				}

			
			return true;			
		}
		
		
		public bool IsRelationOneToOne(TableKeySchema keyschema) //, PrimaryKeySchema primaryKey)
		{
			bool result = true;
			
			// if this key do not contain
			if (keyschema.PrimaryKeyMemberColumns.Count != keyschema.PrimaryKeyTable.PrimaryKey.MemberColumns.Count)
				return false;
			
			
			// Each member must reference a unique key in the foreign table
			foreach(ColumnSchema column in keyschema.ForeignKeyMemberColumns)
			{
				bool columnIsUnique = false;

				// the only way to find the key in the foreign table is to loop through the indexes
				foreach(IndexSchema i in keyschema.ForeignKeyTable.Indexes)
				{
					
					//The index must be unique and the numer of columns columns
					//in the FK must match the number of columns in the index
					if((i.IsUnique || i.IsPrimaryKey) && (keyschema.ForeignKeyMemberColumns.Count == i.MemberColumns.Count))
					{												
						if(i.MemberColumns.Contains(column.Name) && (!IsJunctionTable(keyschema.ForeignKeyTable)))
						{
							columnIsUnique = true;
						}
					}
				}
				
				result = result && columnIsUnique;
			}
			
			return result;
		}
		
		//AL QUERER CACHE
		/*
		public bool IsRelationOneToOne(TableKeySchema keyschema,TableSchema table) //, PrimaryKeySchema primaryKey)
		{
			bool result = true;			
			bool isJunction=false;								
			
			String strClasesDatabaseNoFromProperties="";
			bool esTablaClasesNoDatabase=false;
			
			// if this key do not contain
			if (keyschema.PrimaryKeyMemberColumns.Count != keyschema.PrimaryKeyTable.PrimaryKey.MemberColumns.Count)
				return false;
			
			
			// Each member must reference a unique key in the foreign table
			foreach(ColumnSchema column in keyschema.ForeignKeyMemberColumns) {
				bool columnIsUnique = false;

				// the only way to find the key in the foreign table is to loop through the indexes
				foreach(IndexSchema i in keyschema.ForeignKeyTable.Indexes) {
					isJunction=false;
					esTablaClasesNoDatabase=false;
					
					//The index must be unique and the numer of columns columns
					//in the FK must match the number of columns in the index
					if((i.IsUnique || i.IsPrimaryKey) && (keyschema.ForeignKeyMemberColumns.Count == i.MemberColumns.Count)) {														
						//LA FUNCION IsJunctionTable SE DEMORA POR LO QUE SE PREGUNTA SI LA POSIBLE TABLA JUNCTION CONTIENE 
						//EN SU NOMBRE EL NOMBRE DE LA TABLA PRINCIPAL, CASO CONTRARIO NO SE TOMA EN CUENTA, ASI SE AHORRA TIEMPO
						
						strClasesDatabaseNoFromProperties=GetClasesNoDatabaseFromPropertiesC(table.Database);
			
						if(ExisteEnListaComasC(strClasesDatabaseNoFromProperties,table.Name)) {
							esTablaClasesNoDatabase=true;						
						}
						
						if(keyschema.ForeignKeyTable.Name.Contains(table.Name) && !esTablaClasesNoDatabase) {
							isJunction=IsJunctionTable(keyschema.ForeignKeyTable);
							//Trace.WriteLine("SI ES POSIBLE M-M:"+key.ForeignKeyTable.Name+" DE "+table.Name);
						}
				
						if(i.MemberColumns.Contains(column.Name) && (!isJunction)) {//IsJunctionTable(keyschema.ForeignKeyTable)
							columnIsUnique = true;
						}
					}
				}
				
				result = result && columnIsUnique;
			}
			
			return result;
		}
		*/
		
		public bool IsRelationOneToOne(TableKeySchemaMe keyschema,TableSchema table) //, PrimaryKeySchema primaryKey)
		{
			bool result = true;			
			bool isJunction=false;								
			
			String strClasesDatabaseNoFromProperties="";
			bool esTablaClasesNoDatabase=false;
			
			// if this key do not contain
			if (keyschema.PrimaryKeyMemberColumns.Count != keyschema.PrimaryKeyTable.PrimaryKey.MemberColumns.Count)
				return false;
			
			
			// Each member must reference a unique key in the foreign table
			foreach(MemberColumnSchemaMe memberColumnSchema in keyschema.ForeignKeyMemberColumns) {
				ColumnSchema column=memberColumnSchema.Column;
				bool columnIsUnique = false;

				// the only way to find the key in the foreign table is to loop through the indexes
				foreach(IndexSchema i in keyschema.ForeignKeyTable.Indexes) {
					isJunction=false;
					esTablaClasesNoDatabase=false;
					
					//The index must be unique and the numer of columns columns
					//in the FK must match the number of columns in the index
					if((i.IsUnique || i.IsPrimaryKey) && (keyschema.ForeignKeyMemberColumns.Count == i.MemberColumns.Count)) {														
						//LA FUNCION IsJunctionTable SE DEMORA POR LO QUE SE PREGUNTA SI LA POSIBLE TABLA JUNCTION CONTIENE 
						//EN SU NOMBRE EL NOMBRE DE LA TABLA PRINCIPAL, CASO CONTRARIO NO SE TOMA EN CUENTA, ASI SE AHORRA TIEMPO
						
						strClasesDatabaseNoFromProperties=GetClasesNoDatabaseFromPropertiesC(table.Database);
			
						if(ExisteEnListaComasC(strClasesDatabaseNoFromProperties,table.Name)) {
							esTablaClasesNoDatabase=true;						
						}
						
						if(keyschema.ForeignKeyTable.Name.Contains(table.Name) && !esTablaClasesNoDatabase) {
							isJunction=IsJunctionTable(keyschema.ForeignKeyTable);
							//Trace.WriteLine("SI ES POSIBLE M-M:"+key.ForeignKeyTable.Name+" DE "+table.Name);
						}
				
						if(i.MemberColumns.Contains(column.Name) && (!isJunction/*IsJunctionTable(keyschema.ForeignKeyTable)*/)) {
							columnIsUnique = true;
						}
					}
				}
				
				result = result && columnIsUnique;
			}
			
			return result;
		}

		
		public bool IsForeignKeyCoveredByIndex(TableKeySchema fKey)
		{
			bool isCovered = false;
				
			//If the Foreign key is also covered by an index, let the index 
			//processing handle the Get methods
			foreach(IndexSchema i in fKey.ForeignKeyTable.Indexes)
			{
				ColumnSchemaCollection fkCols = fKey.ForeignKeyMemberColumns;
				
				//First, the index must contain the same number of columns as the key
				if (fkCols.Count != i.MemberColumns.Count)
					continue;
					
				//Index must contain the same columns
				bool hasAllColumns = true;
				foreach(ColumnSchema column in fkCols)
				{
					if(!i.MemberColumns.Contains(column.Name))
					{
						hasAllColumns = false;
						break;
					}
				}
				
				if ( hasAllColumns )
				{
					//Index is a match - stop looking
					isCovered = true;
					break;
					
				}	
			}
			
			return isCovered;
		}
		
		public bool IsForeignKeyCoveredByIndex(TableKeySchemaMe fKey)
		{
			bool isCovered = false;
				
			//If the Foreign key is also covered by an index, let the index 
			//processing handle the Get methods
			foreach(IndexSchema i in fKey.ForeignKeyTable.Indexes)
			{
				MemberColumnSchemaCollectionMe fkCols = fKey.ForeignKeyMemberColumns;
				
				//First, the index must contain the same number of columns as the key
				if (fkCols.Count != i.MemberColumns.Count)
					continue;
					
				//Index must contain the same columns
				bool hasAllColumns = true;
				foreach(MemberColumnSchemaMe memberColumn in fkCols) {
					ColumnSchema column=memberColumn.Column;
					
					if(!i.MemberColumns.Contains(column.Name))
					{
						hasAllColumns = false;
						break;
					}
				}
				
				if ( hasAllColumns )
				{
					//Index is a match - stop looking
					isCovered = true;
					break;
					
				}	
			}
			
			return isCovered;
		}
		
		public IndexSchema GetIndexCoveringForeignKey(TableKeySchema fKey)
		{
			bool isCovered = false;
				
			//If the Foreign key is also covered by an index, let the index 
			//processing handle the Get methods
			foreach(IndexSchema i in fKey.ForeignKeyTable.Indexes)
			{
				ColumnSchemaCollection fkCols = fKey.ForeignKeyMemberColumns;
				
				//First, the index must contain the same number of columns as the key
				if (fkCols.Count != i.MemberColumns.Count)
					continue;
					
				//Index must contain the same columns
				bool hasAllColumns = true;
				foreach(ColumnSchema column in fkCols)
				{
					if(!i.MemberColumns.Contains(column.Name))
					{
						hasAllColumns = false;
						break;
					}
				}
				
				if ( hasAllColumns )
				{
					//Index is a match - stop looking
					isCovered = true;
					return i;
				}	
			}
			
			return null;
		}
		
		public IndexSchema GetIndexCoveringForeignKey(TableKeySchemaMe fKey)
		{
			bool isCovered = false;
				
			//If the Foreign key is also covered by an index, let the index 
			//processing handle the Get methods
			foreach(IndexSchema i in fKey.ForeignKeyTable.Indexes)
			{
				MemberColumnSchemaCollectionMe fkCols = fKey.ForeignKeyMemberColumns;
				
				//First, the index must contain the same number of columns as the key
				if (fkCols.Count != i.MemberColumns.Count)
					continue;
					
				//Index must contain the same columns
				bool hasAllColumns = true;
				foreach(MemberColumnSchemaMe memberColumn in fkCols) {
					ColumnSchema column=memberColumn.Column;
					
					if(!i.MemberColumns.Contains(column.Name))
					{
						hasAllColumns = false;
						break;
					}
				}
				
				if ( hasAllColumns )
				{
					//Index is a match - stop looking
					isCovered = true;
					return i;
				}	
			}
			
			return null;
		}
		
		/// <summary>
		/// 
		/// </summary>
		public ColumnSchemaCollection GetRelationKeyColumns(TableKeySchemaCollection fkeys, IndexSchemaCollection indexes)
		{
			//Debugger.Break();
			for (int j=0; j < fkeys.Count; j++)
			{
				bool skipkey = false;
				foreach(IndexSchema i in indexes)
				{
					if(i.MemberColumns.Contains(fkeys[j].ForeignKeyMemberColumns[0]))
						skipkey = true;			
				}
				if(skipkey)
					continue;

				return fkeys[j].ForeignKeyMemberColumns;
			}
			return new ColumnSchemaCollection();
		}
		
		/// <summary>
		/// Gets the names of all the columns in the collection as a string array.
		/// </summary>
		/// <param name="columns"></param>
		/// <returns></returns>
		private string[] GetColumnNames(ColumnSchemaCollection columns)
		{
			string[] columnNames = new string[ columns.Count ];
			for (int i = 0; i < columns.Count; i++)
				columnNames[i] = GetPropertyName(columns[i].Name);
			return columnNames;
		}

		///<summary>
		/// Get's the constraint side of a column from a m:m relationship to it's corresponding 1:m relationship
		///</summary>
		public ColumnSchema GetCorrespondingRelationship(TableKeySchemaCollection fkeys, string columnName)
		{
			//System.Diagnostics.Debugger.Break();
			for (int j=0; j < fkeys.Count; j++)
			{
				for (int y=0; y < fkeys[j].ForeignKeyMemberColumns.Count; y++)
				{
					if (fkeys[j].ForeignKeyMemberColumns[y].Name.ToLower() 
							== columnName.ToLower())
						return fkeys[j].PrimaryKeyMemberColumns[y];
				}
			}
			return null;
		}


		private string _currentTable = string.Empty;
		
		///<summary>
		///  Store the most recent SourceTable of the templates,
		///  Used to clean up upon new SourceTable execution.  
		///</summary>
		[BrowsableAttribute(false)]
		public  string CurrentTable {
			get{return _currentTable;}
			set {_currentTable = value;}
		}
		
		///<summary>
		///  Store the most recent
		///  Used to keep track of which childcollections have been rendered
		///  Eliminates the Dupes.
		///</summary>
		[BrowsableAttribute(false)]
		public  Hashtable RelationshipDictionary {
			get{return relationshipDictionary;}
			set {relationshipDictionary = value;}
		}
		
		
		///<summary>
		/// Child Collection RelationshipType Enum
		///</summary>
		[BrowsableAttribute(false)]
		public enum RelationshipType{
			None = 0,
			OneToOne,
			OneToMany,
			ManyToOne,
			ManyToMany
		}
		
		#endregion Relationships
		
		#region GetParent/Child Tables
		///<summary>
		/// Get's the parent tables if any based on a child table.
		///</summary>
		public TableSchemaCollection GetParentTables(SchemaExplorer.TableSchema table)
		{
			TableSchemaCollection _tbParent= new TableSchemaCollection();
			if(CurrentTable != table.Name){
				CurrentTable = table.Name;
			}
			DatabaseSchema _dbCurrent;
			_dbCurrent=table.Database;
			
			foreach(TableSchema _tb in _dbCurrent.Tables){
				if(CurrentTable!=_tb.Name){
					foreach(ColumnSchema _col in _tb.PrimaryKey.MemberColumns){
						foreach(ColumnSchema col in table.Columns){
							if (col.Name == _col.Name){
								_tbParent.Add(_tb);
							}
						}                        
					}
				}
			}
			return _tbParent;
		}
			
		///<summary>
		///  Get's all the child tables based on a parent table
		///</summary>
		public TableSchemaCollection GetChildTables(SchemaExplorer.TableSchema table)
		{
			TableSchemaCollection _tbChild= new TableSchemaCollection();
				if(CurrentTable != table.Name){
					CurrentTable = table.Name;
				}
				DatabaseSchema _dbCurrent;
				_dbCurrent=table.Database;
				foreach(TableSchema _tb in _dbCurrent.Tables){
					if(CurrentTable!=_tb.Name){
						foreach(ColumnSchema _col in _tb.Columns){
							foreach(ColumnSchema primaryCol in table.PrimaryKey.MemberColumns){
								if (_col.Name == primaryCol.Name){
									_tbChild.Add(_tb);
								}
							}                       
						}
					}
				}
			return _tbChild;
		}
		#endregion 
	}

	#region Retry
	public enum SleepStyle
	{ 
		/// <summary>Each sleep will be the <i>n</i> milliseconds.</summary>
		Constant, 
		/// <summary>Each sleep will increase by <i>n</i>*<i>attempts</i> milliseconds.</summary>
		Linear, 
		/// <summary>Each sleep will increase exponential by <i>n</i>^<i>attempts</i> milliseconds.</summary>
		Exponential 
	}
	#endregion
	
	#region UnitTests
	
	public enum UnitTestStyle
	{
		/// <summary>No unit test should be included.</summary>
		None,
		/// <summary>NUnit tests should be generated.</summary>
		NUnit,
		/// <summary>VSTS test should be gerenated.</summary>
		VSTS
	}
	#endregion
	
	#region ComponentPatternType
	public enum ComponentPatternType
	{
		/// <summary>No Component Pattern Generation should be included.</summary>
		None,
		/// <summary>A Service Layer Pattern should be included.</summary>
		ServiceLayer,
		/// <summary>A Domain Model Pattern Generation should be included.</summary>
		DomainModel
	}
	#endregion
	
	#region DatabaseType
	public enum DatabaseType
	{
		/// <summary>No specific database type.</summary>
		None,
		/// <summary>SQL Server 2000.</summary>
		//SQLServer2000,
		/// <summary>SQL Server 2005.</summary>
		SQLServer2005
		/// <summary>Oracle 8i.</summary>
		//Oracle8i,
		/// <summary>Oracle 9i.</summary>
		//Oracle9i,
		/// <summary>Oracle 10g.</summary>
		//Oracle10g,
	}
	#endregion

	#region MethodNamesProperty
	
	[Serializable]
	//[TypeConverter(typeof(MethodNamesTypeConverter))]
	[TypeConverter(typeof(ExpandableObjectConverter))]
	[PropertySerializer(typeof(XmlPropertySerializer))]
	public class MethodNamesProperty
	{
		public MethodNamesProperty() { }
		public MethodNamesProperty(string values)
		{
			ParseCore(values);
		}
		
		// used for testing
		private static readonly string _methodNameSuffix = "";
		
		private string _get = "Get" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Get operation.")]
		public string Get
		{
			get { return _get; }
			set { if ( IsValid(value) ) _get = value.Trim(); }
		}
		
		private string _getAll = "GetAll" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a GetAll operation.")]
		public string GetAll
		{
			get { return _getAll; }
			set { if ( IsValid(value) ) _getAll = value.Trim(); }
		}
		
		private string _getPaged = "GetPaged" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a GetPaged operation.")]
		public string GetPaged
		{
			get { return _getPaged; }
			set { if ( IsValid(value) ) _getPaged = value.Trim(); }
		}
		
		private string _find = "Find" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Find operation.")]
		public string Find
		{
			get { return _find; }
			set { if ( IsValid(value) ) _find = value.Trim(); }
		}
		
		private string _insert = "Insert" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Insert operation.")]
		public string Insert
		{
			get { return _insert; }
			set { if ( IsValid(value) ) _insert = value.Trim(); }
		}
		
		private string _update = "Update" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Update operation.")]
		public string Update
		{
			get { return _update; }
			set { if ( IsValid(value) ) _update = value.Trim(); }
		}
		
		private string _save = "Save" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Save operation.")]
		public string Save
		{
			get { return _save; }
			set { if ( IsValid(value) ) _save = value.Trim(); }
		}
		
		private string _delete = "Delete" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a Delete operation.")]
		public string Delete
		{
			get { return _delete; }
			set { if ( IsValid(value) ) _delete = value.Trim(); }
		}
		
		private string _deepLoad = "DeepLoad" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a DeepLoad operation.")]
		public string DeepLoad
		{
			get { return _deepLoad; }
			set { if ( IsValid(value) ) _deepLoad = value.Trim(); }
		}
		
		private string _deepSave = "DeepSave" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a DeepSave operation.")]
		public string DeepSave
		{
			get { return _deepSave; }
			set { if ( IsValid(value) ) _deepSave = value.Trim(); }
		}
		
		private string _getTotalItems = "GetTotalItems" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a GetTotalItems operation.")]
		public string GetTotalItems
		{
			get { return _getTotalItems; }
			set { if ( IsValid(value) ) _getTotalItems = value.Trim(); }
		}
		
		private string _bulkInsert = "BulkInsert" + _methodNameSuffix;
		[NotifyParentProperty(true)]
		[Description("The name of the method used to perform a BulkInsert operation.")]
		public string BulkInsert
		{
			get { return _bulkInsert; }
			set { if ( IsValid(value) ) _bulkInsert = value.Trim(); }
		}
		
		private bool IsValid(string value)
		{
			return ( value != null && value.Trim().Length > 0 );
		}
		
		private void ParseCore(string value)
		{
			if ( value != null && value.Length > 0 )
			{
				string[] values = value.Split(new char[] { ',' });
				
				if ( values.Length > 0 )
					Get = values[0];
				if ( values.Length > 1 )
					GetAll = values[1];
				if ( values.Length > 2 )
					GetPaged = values[2];
				if ( values.Length > 3 )
					Find = values[3];
				if ( values.Length > 4 )
					Insert = values[4];
				if ( values.Length > 5 )
					Update = values[5];
				if ( values.Length > 6 )
					Save = values[6];
				if ( values.Length > 7 )
					Delete = values[7];
				if ( values.Length > 8 )
					DeepLoad = values[8];
				if ( values.Length > 9 )
					DeepSave = values[9];
				if ( values.Length > 10 )
					GetTotalItems = values[10];
				if ( values.Length > 11 )
					BulkInsert = values[11];
			}
		}
		
		public static MethodNamesProperty Parse(string value)
		{
			return new MethodNamesProperty(value);
		}
		
		public string ToStringList()
		{
			string[] names = new string[] {
				Get, GetAll, GetPaged, Find,
				Insert, Update, Save, Delete,
				DeepLoad, DeepSave, GetTotalItems,
				BulkInsert
			};
			
			return string.Join(",", names);
		}
		
		public override string ToString()
		{
			return "(Expand to edit...)";
		}
	}
	
	public class MethodNamesTypeConverter : ExpandableObjectConverter
	{
		public override bool CanConvertFrom(ITypeDescriptorContext context, Type t)
		{
			if ( t == typeof(string) )
			{
				return true;
			}
			else if ( t == typeof(XmlNode) )
			{
				return true;
			}
			
			return base.CanConvertFrom(context, t);
		}
		
		public override bool CanConvertTo(ITypeDescriptorContext context, Type t)
		{
			if ( t == typeof(XmlNode) )
			{
				return true;
			}
			
			return base.CanConvertTo(context, t);
		}
		
		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo info, object value)
		{
			if ( value is string )
			{
				return MethodNamesProperty.Parse(value as string);
			}
			else if ( value is XmlNode )
			{
				XmlNode node = (XmlNode) value;
				XmlSerializer ser = new XmlSerializer(context.PropertyDescriptor.PropertyType);
				XmlNodeReader reader = new XmlNodeReader(node.FirstChild);
				return ser.Deserialize(reader);
			}
			
			return base.ConvertFrom(context, info, value);
		}
		
		public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type t)
		{
			if ( t == typeof(string) )
			{
				return ((MethodNamesProperty) value).ToStringList();
			}
			else if ( t == typeof(XmlNode) )
			{
				XmlSerializer ser = new XmlSerializer(t);
				MemoryStream stream = new MemoryStream();
				ser.Serialize(stream, value);
				stream.Position = 0;
				XmlDocument xml = new XmlDocument();
				xml.Load(stream);
				stream.Close();
				return xml.DocumentElement.FirstChild;
			}
			
			return base.ConvertTo(context, culture, value, t);
		}
		
	#endregion MethodNamesProperty
	


#endregion
	}
	
	#region ExtraCode
	
		public  class ExtraCode 	
		{		
			public static string GetExtra1Faces(TableSchema table,bool EsSwing,String strEmpresa)
			{
				String strExtra1Faces="";
				
				if(strEmpresa.Equals("CCFA")) {
					if(GetValidationExtra1Ccfa(table)) {
						strExtra1Faces+="\r\n\r\n\tpublic void generarGpxFileId() throws Exception {";
						strExtra1Faces+="\r\n\t\t"+CommonCode.GetNombreClaseC(table.ToString())+" "+CommonCode.GetNombreClaseObjetoC(table.ToString())+"= ("+CommonCode.GetNombreClaseC(table.ToString())+") "+CommonCode.GetNombreClaseObjetoC(table.ToString())+"sListDataModel.getRowData();";
							
						strExtra1Faces+="\r\n\r\n\t\tFuncionesBeanFace.generarGpxFile(\""+CommonCode.strId.ToUpper()+"\", "+CommonCode.GetNombreClaseObjetoC(table.ToString())+".get"+CommonCode.strIdGetSet+"(), this.datosCliente, "+CommonCode.GetNombreClaseC(table.ToString())+".class.getSimpleName(), "+CommonCode.GetNombreClaseObjetoC(table.ToString())+".get"+CommonCode.strIdGetSet+"().toString());";
						strExtra1Faces+="\r\n\t}";	
					}
				}
				
				return strExtra1Faces;
				
			}
			
			public static string GetExtra1Servlet(TableSchema table)
			{
				String strExtra1Servlet="";
				String strPathFile="";
					strPathFile+="";
				if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("Curso"))
				{
					
					strExtra1Servlet="\r\n\t\t\tif(session.getAttribute(\"AlumnoActual\")!=null&&request.getParameter(\"accionBusqueda\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\trequest.setAttribute(\"accionAdicional\", \"MOSTRAR_CURSOS_ALUMNOACTUAL\");";
					strExtra1Servlet+="\r\n\t\t\t}";
					
					//strPathFile="ExtraCode/AulaVirtual/Servlet/Extra1/Code.txt";					
					//strExtra1Servlet=ReadFile(strPathFile);
				}
				else if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("UnidadCurricular"))
				{
					strExtra1Servlet="\r\n\t\t\tif(session.getAttribute(\"AlumnoActual\")!=null&&request.getParameter(\"accionBusqueda\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\trequest.setAttribute(\"accionAdicional\", \"MOSTRAR_UNIDADESDECURSO_ALUMNOACTUAL\");";
					
					strExtra1Servlet+="\r\n\r\n\t\t\t\tif(session.getAttribute(\"BusquedaDesdeForeignKeySesionCurso\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\t\tsession.removeAttribute(\"BusquedaDesdeForeignKeySesionCurso\");";
					strExtra1Servlet+="\r\n\t\t\t\t}";
				
					strExtra1Servlet+="\r\n\r\n\t\t\t}";
				}
				else if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("Test"))
				{
					strExtra1Servlet="\r\n\t\t\tif(session.getAttribute(\"AlumnoActual\")!=null&&request.getParameter(\"accionBusqueda\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\trequest.setAttribute(\"accionAdicional\", \"MOSTRAR_TESTSDEUNIDADES_ALUMNOACTUAL\");";
					
					strExtra1Servlet+="\r\n\r\n\t\t\t\tif(session.getAttribute(\"BusquedaDesdeForeignKeySesionUnidadCurricular\")!=null)";
					strExtra1Servlet+="\r\n\t\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\t\tsession.removeAttribute(\"BusquedaDesdeForeignKeySesionUnidadCurricular\");";
					strExtra1Servlet+="\r\n\t\t\t\t}";
					
					strExtra1Servlet+="\r\n\t\t\t}";
				}
				else if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("Nota"))
				{
					strExtra1Servlet="\r\n\t\t\tif(request.getParameter(\"accionBusqueda\")!=null&&request.getParameter(\"accionBusqueda\").equals(\"FK_IdUnidadCurricularTutorAlumno\"))";
					strExtra1Servlet+="\r\n\t\t\t{";
					strExtra1Servlet+="\r\n\t\t\t\trequest.setAttribute(\"accionAdicional\", \"MOSTRAR_NOTAS_ALUMNOACTUAL\");";
					strExtra1Servlet+="\r\n\t\t\t}";
				}
				
				return strExtra1Servlet;
			}				
			
			public static string GetExtra2ServletComment(TableSchema table)
			{
				String strExtra1Servlet="";
				
				if(table.Database.Name=="AulaVirtual"&&table.Name.Equals("Alumno"))
				{
					strExtra1Servlet="//";
				}
				
				return strExtra1Servlet;
			}
			/*
			public static string ReadFile(String strPathFile)
			{
				String strExtra="";
				
				try
         		{
					FileStream s = new FileStream(strPathFile, FileMode.Open);
					StreamReader r = new StreamReader(s);
					string t;
					while ((t = r.ReadLine()) != null)
					{
						strExtra+=t;
					}
				}
				catch(IOException e)
				{
					Console.WriteLine("An IO exception has been thrown! con Extra Code");
					Console.WriteLine(e.ToString());
				}
				
				return strExtra;
			}
			*/
			
			public static bool GetValidationExtra1Ccfa(TableSchema table)
			{
				bool blnExtra1Servlet=false;
				
				for (int i = 0; i < table.Columns.Count; i++){
					//if(table.Columns[i].Name==strIsActive||table.Columns[i].Name==strIsExpired||table.Columns[i].Name==strId||table.Columns[i].Name==strVersionRow ){continue; }
					//GetParameterClaseC(TablaBase.Columns[i],ConValidaciones,true,"") 
					if(table.Columns[i].Name.Equals("Latitud")||table.Columns[i].Name.Equals("Latitud")) {
						blnExtra1Servlet=true;
						break;
					}
				}
				
				return blnExtra1Servlet;
			}
		}
		
		public class TipoClaseRelacionada
	{
		public TableSchema table=null;
		public TableSchema tablaRelacionadaObjetivo=null;
		public String strNombreAdicional=null;
		
	   	public TipoClaseRelacionada() {
			strNombreAdicional="";
		}
	}
	
	public class KeyNameTemplate {
		public static String Sisconti_ViewPorTabla="Sisconti_ViewPorTabla";
		
	}
	
	public class KeyName_Sisconti_ViewPorTabla {
		//C1-->DESPUES DE CARGAR COMBO
		public static String C1="C1";				
		
		public static String T1="T1";		
	}
	#endregion

}
