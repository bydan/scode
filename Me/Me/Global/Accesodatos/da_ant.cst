<%@ Template Language="C#" TargetLanguage="C#" Description="Template de la capa de Acceso a Datos" ResponseEncoding="ASCII"%>    	
<%@ CodeTemplate Src="..\CommonCode\CommonCode.cs" Inherits="Me.CommonCode" Language="C#" TargetLanguage="C#" Description="A base class for the entities." ResponseEncoding="ASCII"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="NombreProgramador" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre del Programdor" %>
<%@ Property Name="Package" Type="System.String" Default="Indefinido" Category="Options" Description="Nombre de la Entidad" %>
<%@ Property Name="Empresa" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre de la Empresa" %>
<%@ Property Name="Schema" Type="System.String" Default="Tame" Category="Options" Description="Schema" %>
<%@ Property Name="TablaBase" Type="SchemaExplorer.TableSchema" EXCLUDED="true"	Category="Context"%>
<%@ Property Name="TablasBaseCompuestoJunction" Type="SchemaExplorer.TableSchemaCollection" Category="Context"%>
<%@ Property Name="TablasBaseCompuestoDetalle" Type="SchemaExplorer.TableSchemaCollection" 	Category="Context"%>

<script runat="template">

public bool TieneCompuesto() 
{
	bool blnTieneCompuesto=false;
	
		if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
		{
			blnTieneCompuesto=true;
		}
	
	return blnTieneCompuesto;
}
		
public String GetFuncionesTablasClasesRelacionadasCompuestos() 
		{
			String strFuncion=string.Empty;
			String strBodyFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="";
			String strInit2Funcion=" get"+GetPrefijoRelacionC();
			
			String strEndFuncion="\r\n\t\t\t\tentities.add(entity);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstatement.close();\r\n\t\t} catch(SQLException e) {";
			strEndFuncion+="\r\n\t\t\tthrow e;\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n\r\n\t\treturn entities;\r\n\t}";
			
			String strMiddleFuncion="";
			String strMiddle2Funcion="";
			String strMiddle3Funcion="";
			strMiddleFuncion+="\r\n\r\n\t\tString sQuery;\r\n\r\n\t\ttry {\r\n\t\t\tStatement statement = connexion.getConnection().createStatement();";
			
			
			//strMiddleFuncion+="\r\n\t\t\tsQuery=DataAccessHelper.buildSqlGeneralGetEntities(entity,queryWhereSelectParameters);";
			
					
			strMiddle3Funcion+="\r\n\t\t\tResultSet resultSet = statement.executeQuery(sQuery);";
			strMiddle3Funcion+="\r\n\r\n\t\t\twhile (resultSet.next()) {";
			
			if(TablasBaseCompuestoDetalle!=null&&TablasBaseCompuestoJunction!=null&&TablasBaseCompuestoDetalle.Count==TablasBaseCompuestoJunction.Count&&TablasBaseCompuestoJunction.Count>0)
			{
				
				for(int i=0;i<TablasBaseCompuestoJunction.Count;i++)
				{
					strMiddleFuncion="\r\n\r\n\t\tString sQuery;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tStatement statement = connexion.getConnection().createStatement();";
					strMiddleFuncion+="\r\n\r\n\t\t\tString strSqlSoloWhereBusqueda=\"\";";
					strMiddleFuncion+="\r\n\r\n\t\t\tif(queryWhereSelectParameters!=queryWhereSelectParameters2) {";
					strMiddleFuncion+="\r\n\t\t\t\tstrSqlSoloWhereBusqueda=DataAccessHelper.buildSqlGeneralGetEntitiesCompuesto(queryWhereSelectParameters).replace(DataAccessHelper.buildSqlGeneralGetEntitiesCompuesto(queryWhereSelectParameters2).trim(), \"\");";			
					strMiddleFuncion+="\r\n\t\t\t}";
					strMiddleFuncion+="\r\n\r\n\t\t\tsQuery=\"nselect * from (\";";		
					strMiddleFuncion+="\r\n\t\t\tsQuery+="+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"Compuesto.QuerySelect;";				
					strMiddleFuncion+="\r\n\t\t\tsQuery+=DataAccessHelper.buildSqlGeneralGetEntitiesCompuesto(queryWhereSelectParameters);";				
					strMiddleFuncion+="\r\n\t\t\tsQuery+=\" union \";";				
					strMiddleFuncion+="\r\n\t\t\tsQuery+="+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"Compuesto.QuerySelectNoSeleccionados+\"\"+"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"Compuesto.QuerySelecttIdSeleccionados;";	
					strMiddleFuncion+="\r\n\t\t\tsQuery+=DataAccessHelper.buildSqlGeneralGetEntitiesCompuesto(queryWhereSelectParameters2);";							
					strMiddleFuncion+="\r\n\t\t\tsQuery+=\")";
					strMiddleFuncion+="\"+strSqlSoloWhereBusqueda+\")as T  \"+queryWhereSelectParameters.getFinalQuery();";	
					
						
					strInitFuncion="\r\n\tpublic ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> getEntities"+strClaseAuxiliar+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"(Connexion connexion,QueryWhereSelectParameters queryWhereSelectParameters,QueryWhereSelectParameters queryWhereSelectParameters2) throws SQLException,Exception";
					strInitFuncion+=" {";
					strInitFuncion+="\r\n\t\tArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"> entities = new  ArrayList<"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+">();";		
					strInitFuncion+="\r\n\t\t"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+" entity = new "+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"();";
					
					strBodyFuncion="\r\n\t\t\t\tentity = new "+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+strClaseAuxiliar+"();";
								
					strBodyFuncion+="\r\n\r\n\t\t\t\tDataAccessHelper.getGeneralEntity(\"\",entity.get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"(),resultSet);";
					strBodyFuncion+="\r\n\t\t\t\t"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"DataAccess.getEntity"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"(\"\", entity.get"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"(), resultSet);";
								
					strBodyFuncion+="\r\n\r\n\t\t\t\tDataAccessHelper.getGeneralEntity("+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"DataAccess.TABLENAME,entity.get"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"(),resultSet);";
					strBodyFuncion+="\r\n\t\t\t\t"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"DataAccess.getEntity"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"("+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"DataAccess.TABLENAME, entity.get"+GetNombreClase(TablasBaseCompuestoDetalle[i].ToString())+"(), resultSet);";
					
					strMiddle2Funcion="\r\n\t\t\tsQuery=sQuery.replace(\"isActive=\","+"Constantes.getSSchema()+\".\"+"+GetNombreClase(TablasBaseCompuestoJunction[i].ToString())+"DataAccess.TABLENAME+\".isActive=\");";
					strFuncion+=strInitFuncion+strMiddleFuncion+strMiddle2Funcion+strMiddle3Funcion+strBodyFuncion+strEndFuncion;								
				}						
				
			
			}
			
			return strFuncion; 
		}
		
public String GetFuncionesTablasClasesRelacionadasForeigKeys() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public ";
			String strInit2Funcion=" get"+GetPrefijoRelacionC();
			
			String strEndFuncion="\r\n\t} catch(Exception e) {\r\n\t;\r\n}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				strInitFuncion="\tpublic ";
				strEndFuncion="\r\n} catch(Exception e) {\r\n\t;\r\n}\r\n\t}";
				
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					
					strInitFuncion+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+strInit2Funcion;
						
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "(Connexion connexion,"+GetNombreClaseC("dbo."+TablaBase.Name)+ " rel"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+")throws SQLException,Exception {\r\n\r\n\t\t"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+" "+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"= new "+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"();\r\n\r\n\t\ttry {";
					strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess "+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess=new "+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess();\r\n";
					strTablaClaseRelacionada+="\t\t\t"+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"="+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"DataAccess.getEntity(connexion,rel"+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+GetNombreCompletoColumnaClaseC(columnSchema)+ "());";
					
					//strTablaClaseRelacionada+="\r\nreturn "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";";
					strEndFuncion="\r\n\t\t} catch(SQLException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n"+"\r\n\treturn "+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+";"+ "\r\n\r\n\t}";
					strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n\r\n";
			
				}
				
			}
								
			return strFuncion; 
		}

public String GetFuncionesTablasClasesRelacionadas() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public ";
			String strInit2Funcion=" get"+GetPrefijoRelacionC();;
			
			String strEndFuncion="\r\n} catch(Exception e) {\r\n;\r\n}\r\n}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strInitFuncion="\tpublic ";
				strEndFuncion="\r\n\t} catch(Exception e) {\r\n\t;\r\n}\r\n\t}";
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strInitFuncion+=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strInit2Funcion;
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ "(Connexion connexion,"+GetNombreClaseC("dbo."+TablaBase.Name)+ " "+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+")throws SQLException,Exception {\r\n\r\n\t\t"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+" "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"= new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"();\r\n\r\n\t\ttry {\r\n";
					strTablaClaseRelacionada+="\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters();\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(\" INNER JOIN "+Schema+"."+GetNombreTableFromProperties(TablaBase)+" ON "+Schema+"."+GetNombreTableFromProperties(collectionInfo.SecondaryTableSchema)+".id"+GetNombreClaseC("dbo."+TablaBase.Name)+"="+Schema+"."+GetNombreTableFromProperties(TablaBase)+".id WHERE "+Schema+"."+GetNombreTableFromProperties(TablaBase)+".id=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()) );\r\n";
					strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccess "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"DataAccess=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccess();\r\n";
					strTablaClaseRelacionada+="\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"="+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"DataAccess.getEntity(connexion,queryWhereSelectParameters);";
					
					//strTablaClaseRelacionada+="\r\nreturn "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";";
					strEndFuncion="\r\n\t\t} catch(SQLException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n"+"\r\n\treturn "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";"+ "\r\n\r\n\t}";
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{	
					strInitFuncion+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+">"+strInit2Funcion;
					
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(Connexion connexion,"+GetNombreClaseC("dbo."+TablaBase.Name)+" "+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+")throws SQLException,Exception {\r\n\r\n\t\t"+"ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s= new "+ "ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+">();\r\n\r\n\t\ttry {\r\n";
					strTablaClaseRelacionada+="\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters();\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(\" INNER JOIN "+Schema+"."+GetNombreTableFromProperties(TablaBase)+" ON "+Schema+"."+collectionInfo.SecondaryTable+".id"+GetNombreClaseC("dbo."+TablaBase.Name)+"="+Schema+"."+GetNombreTableFromProperties(TablaBase)+".id WHERE "+Schema+"."+GetNombreTableFromProperties(TablaBase)+".id=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()));\r\n";
					strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccess "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"DataAccess=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccess();\r\n";
					strTablaClaseRelacionada+="\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s="+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
					
					//strTablaClaseRelacionada+="\r\nreturn "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s;";
					strEndFuncion="\r\n\t\t} catch(SQLException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n"+"\r\n\treturn "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s;"+"\r\n\r\n\t}";
			
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					strInitFuncion+="ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+">"+strInit2Funcion;
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s(Connexion connexion,"+GetNombreClaseC("dbo."+TablaBase.Name)+" "+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+")throws SQLException,Exception {\r\n\r\n\t\t"+"ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s= new "+ "ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+">();\r\n\r\n\t\ttry {\r\n";
					strTablaClaseRelacionada+="\t\t\tQueryWhereSelectParameters queryWhereSelectParameters=new QueryWhereSelectParameters();\r\n\t\t\tqueryWhereSelectParameters.setFinalQuery(\" INNER JOIN "+Schema+"."+GetNombreTableFromProperties(collectionInfo.JunctionTableSchema)+" ON "+Schema+"."+GetNombreTableFromProperties(collectionInfo.JunctionTableSchema)+".id"+GetNombreClaseC("dbo."+GetNombreTableFromProperties(collectionInfo.SecondaryTableSchema))+"="+Schema+"."+GetNombreTableFromProperties(collectionInfo.SecondaryTableSchema)+".id INNER JOIN "+Schema+"."+GetNombreTableFromProperties(TablaBase)+" ON "+Schema+"."+GetNombreTableFromProperties(collectionInfo.JunctionTableSchema)+".id"+GetNombreClaseC("dbo."+GetNombreTableFromProperties(TablaBase))+"="+Schema+"."+GetNombreTableFromProperties(TablaBase)+".id WHERE "+Schema+"."+GetNombreTableFromProperties(TablaBase)+".id=\"+String.valueOf("+GetNombreClaseObjetoC("dbo."+TablaBase.Name)+".get"+strIdGetSet+"()));\r\n";
					strTablaClaseRelacionada+="\r\n\t\t\t"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccess "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"DataAccess=new "+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"DataAccess();\r\n";
					strTablaClaseRelacionada+="\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s="+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"DataAccess.getEntities(connexion,queryWhereSelectParameters);";
					
					//strTablaClaseRelacionada+="\r\nreturn "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s;";
					strEndFuncion="\r\n\t\t} catch(SQLException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch(Exception e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n"+"\r\n\treturn "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s;"+"\r\n\r\n\t}";
			
				}
				
			strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n\r\n";
			}
								
			return strFuncion; 
		}
		
public string GetSetEntityColumna(ColumnSchema column)
{				
	String strSetEntity=string.Empty;
	
	if(column.Name.Equals(strId)||column.Name.Equals(strIsActive)||column.Name.Equals(strIsExpired)||column.Name.Equals(strVersionRow))
	{
		return strSetEntity;
	}
	String strEntityInit="entity.set";
	String strEntityMiddle="(resultSet.get";
	String strEntityFinal="\"));";
	//entity.setNombre(resultSet.getString("nombre"));	
    strSetEntity=strEntityInit+GetNombreCompletoColumnaClaseC(column)+strEntityMiddle+GetTipoColumnaClaseGetResulsetC(column)+"(strPrefijo+\""+column.Name+strEntityFinal;
	
	return strSetEntity;
}

public static string GetNombreClase(string strTablaBase)
{				
		return GetNombreClaseC(strTablaBase);
}

</script>
<%=GetByDanLicence()%>
package <%=Empresa%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageDataAccess%>;

import java.util.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.GeneralEntity;
import <%=Empresa%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.*;<%//=GetNombreClase(TablaBase.ToString())%>
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageLogic%>.QueryWhereSelectParameters;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageDataAccess%>.DataAccessHelper;
<%if(TieneCompuesto()){%>//import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageDataAccess%>.DataAccessHelper.DataAccessHelper;<%}%>
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageUtils%>.*;


public class <%=GetNombreClase(TablaBase.ToString())%>DataAccess extends DataAccessHelper<<%=GetNombreClase(TablaBase.ToString())%>> {
	public static String SCHEMA="<%=GetSchemaTableFromProperties(TablaBase,Schema)%>";	
	public static String TABLENAME="<%=GetNombreTablaC(TablaBase)%>";

	public static String QUERYINSERT="insert into "+<%=GetNombreClase(TablaBase.ToString())%>DataAccess.SCHEMA+"."+<%=GetNombreClase(TablaBase.ToString())%>DataAccess.TABLENAME+" set <% for (int i = 0; i < TablaBase.Columns.Count; i++){ %><%= GetSqlParameterInsertC(TablaBase.Columns[i]) %><% if (i < TablaBase.Columns.Count - 1&&i!=0) { %>,<% } %><% } %>";
	public static String QUERYUPDATE="update "+<%=GetNombreClase(TablaBase.ToString())%>DataAccess.SCHEMA+"."+<%=GetNombreClase(TablaBase.ToString())%>DataAccess.TABLENAME+" set <% for (int i = 0; i < TablaBase.Columns.Count; i++){ %><%= GetSqlParameterUpdateC(TablaBase.Columns[i]) %><% if (i < TablaBase.Columns.Count - 1&&i!=0) { %>,<% } %><% } %> where id=? AND versionRow=?";
	public static String QUERYDELETE="delete from "+<%=GetNombreClase(TablaBase.ToString())%>DataAccess.SCHEMA+"."+<%=GetNombreClase(TablaBase.ToString())%>DataAccess.TABLENAME+" where id=?";
	public static String QUERYSELECT="select <% for (int i = 0; i < TablaBase.Columns.Count; i++){ %><%= GetSqlParameterSelectC(TablaBase.Columns[i],TablaBase,Schema) %><% if (i < TablaBase.Columns.Count - 1) { %>,<% } %><% } %> from "+<%=GetNombreClase(TablaBase.ToString())%>DataAccess.SCHEMA+"."+<%=GetNombreClase(TablaBase.ToString())%>DataAccess.TABLENAME;
	
	public static String STOREPROCEDUREINSERT="call SP_<%=GetNombreClase(TablaBase.ToString()).ToUpper()%>_INSERT(<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %><%= GetSqlStoreProcedureParameterInsertC(TablaBase.Columns[i]) %><% if (i < TablaBase.Columns.Count - 1&&i!=0&&TablaBase.Columns[i].Name!=strVersionRow) { %>,<% } %><% } %>,?)";
	public static String STOREPROCEDUREUPDATE="call SP_<%=GetNombreClase(TablaBase.ToString()).ToUpper()%>_UPDATE(<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %><%= GetSqlStoreProcedureParameterUpdateC(TablaBase.Columns[i]) %><% if (i < TablaBase.Columns.Count - 1&&i!=0&&TablaBase.Columns[i].Name!=strVersionRow) { %>,<% } %><% } %> ,? ,?,?)";
	public static String STOREPROCEDUREDELETE="call SP_<%=GetNombreClase(TablaBase.ToString()).ToUpper()%>_DELETE(?,?)";
	public static String STOREPROCEDURESELECT="call SP_<%=GetNombreClase(TablaBase.ToString()).ToUpper()%>_SELECT(?,?)";
	
	public static Boolean ISDELETECASCADE=<%=GetCascadeTableFromPropertiesC(TablaBase)%>;
	public static boolean ISWITHSCHEMA=true;
	public static boolean ISWITHSTOREPROCEDURES=false;
	
	public static boolean getISWITHSCHEMA() {
		return ISWITHSCHEMA;
	}

	public static void setISWITHSCHEMA(boolean ANISWITHSCHEMA) {
		ISWITHSCHEMA = ANISWITHSCHEMA;
	}		
	
	public static boolean getISWITHSTOREPROCEDURES() {
		return ISWITHSTOREPROCEDURES;
	}

	public static void setISWITHSTOREPROCEDURES(boolean ANISWITHSTOREPROCEDURES) {
		ISWITHSTOREPROCEDURES =ANISWITHSTOREPROCEDURES;
	}
	
	public <%=GetNombreClase(TablaBase.ToString())%>DataAccess() {
		
	}
	
	public static String getTABLENAME() {
		return TABLENAME;
	}

	public static void setTABLENAME(String sTABLENAME) {
		<%=GetNombreClase(TablaBase.ToString())%>DataAccess.TABLENAME = sTABLENAME;
	}
	
	public static String getSCHEMA() {
		return SCHEMA;
	}

	public static void setSCHEMA(String aSCHEMA) {
		<%=GetNombreClase(TablaBase.ToString())%>DataAccess.SCHEMA = aSCHEMA;
	}				
	
	public static String getTableName() {
         return "<%=GetSchemaTableFromProperties(TablaBase,Schema)%>.<%=TablaBase.Name%>";
    }
	
	public static String getColumnNameId() {
		return "id";
	}
	
	public static Boolean getISDELETECASCADE() {
		return ISDELETECASCADE;
	}

	public static void setISDELETECASCADE(Boolean ANISDELETECASCADE) {
		<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISDELETECASCADE = ANISDELETECASCADE;
	}
	
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
    <%= GetNombreCampoTablaC(TablaBase.Columns[i]) %>
	<% } %>
	
	<%if(!GetEsReporteFromPropertiesC(TablaBase)){%>
	
	<%= GetFuncionesTablasClasesRelacionadasCompuestos() %>
	
	<%}%>	
	
	
	<%= GetFuncionesTablasClasesRelacionadasForeigKeys() %>
		
	<%= GetFuncionesTablasClasesRelacionadas() %>
		
	public static void save(<%=GetNombreClase(TablaBase.ToString())%> entity,Connexion connexion)throws SQLException,Exception {	
		try {
			ParametersType parametersType=null;
			String sQuerySave="";
			
			if (entity.getIsDeleted()) {
				parametersType=ParametersType.DELETE;
				sQuerySave=<%=GetNombreClase(TablaBase.ToString())%>DataAccess.QUERYDELETE;
				
			} else if (entity.getIsChanged()) {
				if(entity.getIsNew()) {
					parametersType=ParametersType.INSERT;
					sQuerySave=<%=GetNombreClase(TablaBase.ToString())%>DataAccess.QUERYINSERT;
				} else {
					parametersType=ParametersType.UPDATE;
					sQuerySave=<%=GetNombreClase(TablaBase.ToString())%>DataAccess.QUERYUPDATE;
				}
				
			} 
			
			DataAccessHelper.save(entity, connexion,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.buildParametersMaintenance(connexion.getDbType(), parametersType, entity),sQuerySave,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.TABLENAME,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSTOREPROCEDURES);
		} catch(SQLException e) {
            throw e;
        } catch(Exception e) {
            throw e;
        }
	}
	
	public  static <%=GetNombreClase(TablaBase.ToString())%> getEntity<%=GetNombreClase(TablaBase.ToString())%>(String strPrefijo,<%=GetNombreClase(TablaBase.ToString())%> entity,ResultSet resultSet) throws SQLException,Exception
    {		
        try {     	  
			<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
			<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
			<%=  GetSetEntityColumna(TablaBase.Columns[i]) %>
			<% } %>      	    	    		    	    
      	} catch(SQLException e) {
			throw e;
      	} catch(Exception e) {
			throw e;
      	}
		
    	return entity;	
    }
	  	
	public  <%=GetNombreClase(TablaBase.ToString())%> getEntity(Connexion connexion, Long id) throws SQLException,Exception {
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();		
		
        try {
      		Statement statement = connexion.getConnection().createStatement();
      		ResultSet resultSet = statement.executeQuery(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.QUERYSELECT+ " WHERE <%=TablaBase.ToString().Replace("dbo.","")%>.isActive=1 AND id="+id);
      	    			
      	    if(resultSet.next()) {				
				entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(new <%=GetNombreClase(TablaBase.ToString())%>());
      	    	entity=super.getEntity("",entity,resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA);         	    
      	    	entity=<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity,resultSet); 
				
				<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(super.getEntity("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA));         		
      	    	<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet));
      	    } else {
				entity =null;
			}
      		statement.close();     
			
      	} catch(SQLException e) {
			throw e;
      	} catch(Exception e) {
			throw e;
      	}
		
    	return entity;
    }
	  
	public  <%=GetNombreClase(TablaBase.ToString())%> getEntity(Connexion connexion,QueryWhereSelectParameters queryWhereSelectParameters) throws SQLException,Exception {
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();
				
        try  {
      	    Statement statement = connexion.getConnection().createStatement();			
			String sQuery="";
      	    
      	    if(queryWhereSelectParameters.getQueryWhereSelectParameters()!="") {
      			sQuery+=" AND "+queryWhereSelectParameters.getQueryWhereSelectParameters()+ queryWhereSelectParameters.getFinalQuery();
      	    }
			
      	  	ResultSet resultSet = statement.executeQuery(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.QUERYSELECT+ " WHERE <%=TablaBase.ToString().Replace("dbo.","")%>.isActive=1 "+ sQuery);
        	 
			if(resultSet.next()) {				
				entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(new <%=GetNombreClase(TablaBase.ToString())%>());
      	    	entity=super.getEntity("",entity,resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA);         	    
      	    	entity=<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity,resultSet);    
				
				<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(super.getEntity("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA));         		
      	    	<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet));
      	    } else {
				entity =null;
			}

      	    statement.close(); 
			
      	} catch(SQLException e) {
			throw e;
      	} catch(Exception e) {
			throw e;
      	}
		
    	return entity;	
    }
	  
	public  ArrayList<<%=GetNombreClase(TablaBase.ToString())%>> getEntities(Connexion connexion,QueryWhereSelectParameters queryWhereSelectParameters) throws SQLException,Exception {
		ArrayList<<%=GetNombreClase(TablaBase.ToString())%>> entities = new  ArrayList<<%=GetNombreClase(TablaBase.ToString())%>>();
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();		  
		String sQuery="";
	
        try {     	   
        	Statement statement = connexion.getConnection().createStatement();
			
			sQuery=DataAccessHelper.buildSqlGeneralGetEntities(entity,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.TABLENAME+".",queryWhereSelectParameters,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.QUERYSELECT);
			
			ResultSet resultSet= statement.executeQuery(sQuery);
        	 
      	    while (resultSet.next()) {
      	    	entity = new <%=GetNombreClase(TablaBase.ToString())%>();
      	    	entity=super.getEntity("",entity,resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA);         		
      	    	entity=<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity,resultSet);
      	    	
				<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original( new <%=GetNombreClase(TablaBase.ToString())%>());
      	    	<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(super.getEntity("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA));         		
      	    	<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet));
				
      	    	entities.add(entity);
      	    }

      	    statement.close();      	       	 
			
      	} catch(SQLException e) {
			throw e;
      	} catch(Exception e) {
			throw e;
      	}
		
    	return entities;	
    }
	
	public  ArrayList<<%=GetNombreClase(TablaBase.ToString())%>> getEntities(Connexion connexion,String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters) throws SQLException,Exception {
		ArrayList<<%=GetNombreClase(TablaBase.ToString())%>> entities = new  ArrayList<<%=GetNombreClase(TablaBase.ToString())%>>();
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();		  
		String sQuery="";
	
        try {     	   
        	Statement statement = connexion.getConnection().createStatement();
							
			sQuery=DataAccessHelper.buildSqlGeneralGetEntities(entity,queryWhereSelectParameters,sQuerySelect);
			
			ResultSet resultSet = statement.executeQuery(sQuery);
        	 
      	    while (resultSet.next()) {
      	    	entity = new <%=GetNombreClase(TablaBase.ToString())%>();
      	    	entity=super.getEntity("",entity,resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA);         		
      	    	entity=<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity,resultSet);
      	    	
				<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original( new <%=GetNombreClase(TablaBase.ToString())%>());
      	    	<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(super.getEntity("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA));         		
      	    	<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet));
				
      	    	entities.add(entity);
      	    }

      	    statement.close();   
			
      	} catch(SQLException e) {
			throw e;
      	} catch(Exception e) {
			throw e;
      	}
		
    	return entities;	
    }
	
	public  ArrayList<<%=GetNombreClase(TablaBase.ToString())%>> getEntitiesSimpleQueryBuild(Connexion connexion,String sQuerySelect,QueryWhereSelectParameters queryWhereSelectParameters) throws SQLException,Exception {
		ArrayList<<%=GetNombreClase(TablaBase.ToString())%>> entities = new  ArrayList<<%=GetNombreClase(TablaBase.ToString())%>>();
		<%=GetNombreClase(TablaBase.ToString())%> entity = new <%=GetNombreClase(TablaBase.ToString())%>();		  
		String sQuery="";
	
        try {     	   
        	Statement statement = connexion.getConnection().createStatement();
							
			sQuery=DataAccessHelper.buildSqlGeneralGetEntitiesSimpleQueryBuild(queryWhereSelectParameters,sQuerySelect);
			
			ResultSet resultSet = statement.executeQuery(sQuery);
        	 
      	    while (resultSet.next()) {
      	    	entity = new <%=GetNombreClase(TablaBase.ToString())%>();
      	    	entity=super.getEntity("",entity,resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA);         		
      	    	entity=<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity,resultSet);
      	    	
				<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original( new <%=GetNombreClase(TablaBase.ToString())%>());
      	    	<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(super.getEntity("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet,<%=GetNombreClase(TablaBase.ToString())%>DataAccess.ISWITHSCHEMA));         		
      	    	<%=GetOriginalCommentTableFromProperties(TablaBase)%>entity.set<%=GetNombreClase(TablaBase.ToString())%>Original(<%=GetNombreClase(TablaBase.ToString())%>DataAccess.getEntity<%=GetNombreClase(TablaBase.ToString())%>("",entity.get<%=GetNombreClase(TablaBase.ToString())%>Original(),resultSet));
				
      	    	entities.add(entity);
      	    }

      	    statement.close();      
			
      	} catch(SQLException e) {
			throw e;
      	} catch(Exception e) {
			throw e;
      	}
		
    	return entities;	
    }
	
	public static ParametersMaintenance getParametersMaintenance(GeneralEntity generalEntity) {
		ParametersMaintenance parametersMaintenance=new ParametersMaintenance();
		int orderParameter;

		return parametersMaintenance;
	}
	
	public  static ParametersMaintenance buildParametersMaintenance(ParameterDbType newDbType,ParametersType parametersType,<%=GetNombreClaseC(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>) throws Exception {
		ParametersMaintenance parametersMaintenance=new ParametersMaintenance();		
		
		try {
			//ParametersMaintenance parametersMaintenance=super.getParametersMaintenance();		
			ArrayList<ParameterMaintenance> parametersTemp=new ArrayList<ParameterMaintenance>();
			ParameterMaintenance parameterMaintenance;
			ParameterValue<Long> parameterMaintenanceValueId;
			
			<% int iCount=0; %>
				if(!parametersType.equals(ParametersType.DELETE))
				{		
					<% for (int i = 0; i < TablaBase.Columns.Count; i++){ if(TablaBase.Columns[i].Name.Equals(strId)||TablaBase.Columns[i].Name.Equals(strVersionRow)){ continue;}%>
					<% iCount++; %>				
					parameterMaintenance=new ParameterMaintenance();
					parameterMaintenance.setOrder(<% =iCount.ToString()%>);		
					parameterMaintenance.setParameterMaintenanceType(ParameterType.<%= GetTipoColumnaClaseEnumC(TablaBase.Columns[i]) %>);
					ParameterValue<<%= GetTipoColumnaClaseC(TablaBase.Columns[i]) %>> parameterMaintenanceValue<%= GetNombreColumnaClaseC(TablaBase.Columns[i]) %>=new ParameterValue<<%= GetTipoColumnaClaseC(TablaBase.Columns[i]) %>>();
					parameterMaintenanceValue<%= GetNombreColumnaClaseC(TablaBase.Columns[i]) %>.setValue(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%= GetNombreCompletoColumnaClaseC(TablaBase.Columns[i]) %>());
					parameterMaintenance.setParameterMaintenanceValue(parameterMaintenanceValue<%= GetNombreColumnaClaseC(TablaBase.Columns[i]) %>);
					parametersTemp.add(parameterMaintenance);
					
					<% if(TablaBase.Columns[i].Name.Equals(strVersionRow)){iCount--;} %>
					<% } %>				
						if(parametersType.equals(ParametersType.UPDATE))
						{					
							parameterMaintenance=new ParameterMaintenance();
							parameterMaintenance.setOrder(<%= GetParameterNoLastIndexC(TablaBase) %>);
							parameterMaintenance.setParameterMaintenanceType(ParameterType.LONG);
							parameterMaintenanceValueId=new ParameterValue<Long>();
							parameterMaintenanceValueId.setValue(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%=strIdGetSet%>());
							parameterMaintenance.setParameterMaintenanceValue(parameterMaintenanceValueId);		
							parametersTemp.add(parameterMaintenance);
							
							parameterMaintenance=new ParameterMaintenance();
							parameterMaintenance.setOrder(<%= GetParameterLastIndexC(TablaBase) %>);
							parameterMaintenance.setParameterMaintenanceType(ParameterType.TIMESTAMP);
							ParameterValue<Date> parameterMaintenanceValueVersionRow=new ParameterValue<Date>();
							parameterMaintenanceValueVersionRow.setValue(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%=strVersionRowGetSet%>());
							parameterMaintenance.setParameterMaintenanceValue(parameterMaintenanceValueVersionRow);		
							parametersTemp.add(parameterMaintenance);					
						}
				} else {
					parameterMaintenance=new ParameterMaintenance();
					parameterMaintenance.setOrder(1);
					parameterMaintenance.setParameterMaintenanceType(ParameterType.LONG);
					parameterMaintenanceValueId=new ParameterValue<Long>();
					parameterMaintenanceValueId.setValue(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.get<%=strIdGetSet%>());
					parameterMaintenance.setParameterMaintenanceValue(parameterMaintenanceValueId);		
					parametersTemp.add(parameterMaintenance);
				}
			
			parametersMaintenance= new ParametersMaintenance();
			parametersMaintenance.setDbType(newDbType);
			parametersMaintenance.setParametersMaintenance(parametersTemp);
			//super.setParametersMaintenance(parametersMaintenance);		
		} catch(Exception e) {
			throw e;
		}
		
		return parametersMaintenance;
	}
}
   

