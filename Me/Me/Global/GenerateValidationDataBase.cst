<%@ Template Language="C#" Debug="true" TargetLanguage="C#" Description="Template de la capa de Acceso a Datos" %>    	
<%@ CodeTemplate Src="CommonCode\CommonCode.cs" Inherits="Me.CommonCode" Language="C#" TargetLanguage="C#" Description="A base class for the entities." ResponseEncoding="UTF-8" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Collections" %>
<%@ Import NameSpace="Me" %>

<%@ Property Name="NombreEmpresa" Type="System.String" Default="ME" Category="0. Tipo Generacion" Description="Nombre de la Empresa" %>
<%@ Property Name="GeneracionTodos" Type="System.Boolean" Default="true" Category="0. Tipo Generacion" Description="Nombre del Programdor" %>
<%@ Property Name="GeneracionPorTablas" Type="System.Boolean" Default="false" Category="0. Tipo Generacion" Description="Nombre del Programdor" %>
<%@ Property Name="GeneracionPorModulo" Type="System.Boolean" Default="false" Category="0. Tipo Generacion" Description="Nombre del Programdor" %>
<%@ Property Name="GeneracionPorEsquema" Type="System.Boolean" Default="false" Category="0. Tipo Generacion" Description="Nombre del Programdor" %>
<%@ Property Name="GeneracionReportes" Type="System.Boolean" Default="false" Category="0. Tipo Generacion" Description="Nombre del Programdor" %>

<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="0. General" Description="Database to get the extended properties from." %>
<%@ Property Name="SourceTablesForGenerate" Type="SchemaExplorer.TableSchemaCollection" Category="0. General" Description="Select a set of tables." Optional="true"%>
<%@ Property Name="SourceModuloForGenerate" Type="System.String" Default="" Category="0. General" Description="Nombre de la Entidad" Optional="true"%>
<%@ Property Name="SourceEsquemaForGenerate" Type="System.String" Default="" Category="0. General" Description="Nombre de la Entidad" Optional="true"%>

<%@ Register Name="ValidationTemplate" Template="Auxiliar/ValidationPorTabla.cst" %>

<%@ Property Name="A1_EsConDescripciones" Type="System.Boolean" Default="true" Category="1. General" Description="Puede ser true o false, al principio false para tomar en cuenta solo errores de modelo de base de datos" %>
<%@ Property Name="B1_EsConFkAdicional" Type="System.Boolean" Default="false" Category="1. General" Description="Puede ser true o false, al principio false validar fk existe tabla, luego true para suponer que usa adicional o varios fk de la misma tabla" %>
<%@ Property Name="C1_EsConPkNOAutoNumerico" Type="System.Boolean" Default="false" Category="1. General" Description="Puede ser true o false, al principio false validar tablas que no tengan identity, luego true para suponer que existan tablas sin identity(Estado)" %>
<%@ Property Name="D1_EsConTablasDescripcionVacias" Type="System.Boolean" Default="false" Category="1. General" Description="Debe ser false, caso contrario se lista tablas" %>


<script runat="template">
TableSchemaCollection SourceDatabaseTables;

public bool GetExistTablasClasesRelacionadasForWebCombo(TableSchema TablaBase) 
		{
			bool blnExist=false;
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
						
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					;//strTablaClaseRelacionada+=","+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany)
				{
					
					blnExist=true;
					break;
					;//strTablaClaseRelacionada+=",ArrayList<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
				}
			}
			
	return blnExist;		
}

public string GetValidationTagColumn(TableSchema table,out bool blnValidacionTag)
{		
	blnValidacionTag=false;
	string strValidation ="<td>\r\n"; 
	ColumnSchema columnSchemaPK=null;
	bool blnExisteValidacion=false;
	
	bool blnTieneRelacionesForWebCombo=GetExistTablasClasesRelacionadasForWebCombo(table);
	bool blnTieneWebCombo=false; 
	
	foreach(ColumnSchema columnSchema in table.Columns)
	{
		blnExisteValidacion=false;
		
		if(!GetExistTagColumnaFromColumnPropiertiesC(columnSchema,strNOMBRE))
		{
			blnValidacionTag=true;
			blnExisteValidacion=true;
			strValidation +="Columna:"+columnSchema.Name+",Falta Tag "+strNOMBRE+"</br>\r\n";
		}
		
		if(!GetExistTagColumnaFromColumnPropiertiesC(columnSchema,strWEBTITULO))
		{
			if(columnSchema.Name==strIsActive||columnSchema.Name==strIsExpired||columnSchema.Name==strId||columnSchema.Name==strVersionRow)
			{
				continue; 
			}
			
			blnValidacionTag=true;
			blnExisteValidacion=true;
			strValidation +="Columna:"+columnSchema.Name+",Falta Tag "+strWEBTITULO+"</br>\r\n";
		}
		
		if(columnSchema.DataType==DbType.AnsiStringFixedLength||columnSchema.DataType==DbType.StringFixedLength||columnSchema.DataType==DbType.String||columnSchema.DataType==DbType.AnsiString)
		{
			if(columnSchema.Size>50)
			{
				if(!GetExistTagColumnaFromColumnPropiertiesC(columnSchema,strWEBFILAS))
				{
					blnValidacionTag=true;
					blnExisteValidacion=true;
					strValidation +="Columna:"+columnSchema.Name+",Falta Tag "+strWEBFILAS+"</br>\r\n";
				}
			}
			
		}
		
		//SOLAMENTE SI TIENE WEBCOMBO
		//if(blnTieneRelacionesForWebCombo)
		//{
			if(GetExistTagColumnaFromColumnPropiertiesC(columnSchema,strWEBCOMBO))
			{
				blnTieneWebCombo=true;
				//System.Windows.Forms.MessageBox.Show(columnSchema.Name+" "+ blnTieneRelacionesForWebCombo.ToString());
				//blnExisteValidacion=true;
				//strValidation +="Columna:"+columnSchema.Name+",Falta Tag "+strWEBCOMBO+"</br>\r\n";
			}
		//}
		
		if(blnExisteValidacion)
		{
			strValidation +="<hr>";
		}
	}
	
	foreach(ColumnSchema columnPK in table.Columns)
	{
		
		if(columnPK.Name==strId)
		{
			if(GetExistTagColumnaFromColumnPropiertiesC(columnPK,strWEBCOMBO))
			{
				blnTieneWebCombo=true;
			}
			
			break;
		}
	}
	
	//WEBCOMBO SOLO SI ES TABLA FK RELACIONADA
	if(blnTieneRelacionesForWebCombo&&!blnTieneWebCombo)
	{
		blnValidacionTag=true;
		strValidation+="TABLA:"+table.Name+",Falta Tag "+strWEBCOMBO+"</br>\r\n<hr>\r\n" ;
	}

	
	//WEB COMBO DE CUALQUIER TABLA	
	if(!blnTieneWebCombo && GetConDivResumenTableFromPropertiesC(table)) {
		 blnValidacionTag=true;
		strValidation+="TABLA:"+table.Name+",Falta Tag "+strWEBCOMBO+" PARA TITULO DE LA TABLA</br>\r\n<hr>\r\n" ;
	}
	
	
	strValidation +=".</td>\r\n"; 
	
	/*
	blnValidacionTag=false;
	
	if(strValidation.Length>12)
	{
		 blnValidacionTag=true;
	}
	*/		
	
	return strValidation;
}

public string GetValidationTagTable(TableSchema table,out bool blnValidacionTag)
{	
	blnValidacionTag=false;	
	string strValidation ="<td>\r\n"; 
	ColumnSchema columnSchemaPK=null;
	
	if(!GetExistTagTableFromPropertiesC(table,strNOMBRE))
	{
		blnValidacionTag=true;
		strValidation +="Falta Tag "+strNOMBRE+"</br>\r\n";
	}
	
	if(!GetExistTagTableFromPropertiesC(table,strWEBTITULO))
	{
		blnValidacionTag=true;
		strValidation +="Falta Tag "+strWEBTITULO+"</br>\r\n";
	}
	
	if(!GetExistTagTableFromPropertiesC(table,strWEBPLURAL))
	{
		blnValidacionTag=true;
		strValidation +="Falta Tag "+strWEBPLURAL+"</br>\r\n";
	}
	
	/*
	if(GetExistTagTableFromPropertiesC(table,strCONAUD))
	{
		strValidation +="Falta Tag "+strCONAUD+"</br>\r\n";
	}
	
	
	if(GetExistTagTableFromPropertiesC(table,strESMENU))
	{
		strValidation +="Falta Tag "+strESMENU+"</br>\r\n";
	}
	*/
	
	strValidation +=".</td>\r\n"; 
	
	/*
	 blnValidacionTag=false;
	
	if(strValidation.Length>12)
	{
		 blnValidacionTag=true;
	}
	*/
	
	return strValidation;
}

public string GetValidationIndexes(TableSchema table,out bool blnValidacionIndexes)
{	blnValidacionIndexes=false;

	string strValidation ="<td>\r\n"; 
	ColumnSchema columnSchemaPK=null;
	bool blnValidarIndexPK=false;
	
	bool blnTieneFK=false;
	bool blnValidarIndexFK=false;
	bool blnValidarEsPrimerColumnaIndexFK=false;
	int intContadorFK=0;
	int intContadorIndexFK=0;
	
	foreach(ColumnSchema  columnSchema in table.Columns)
	{
		if(columnSchema.IsForeignKeyMember)
		{
			if(!blnTieneFK)
			{
				blnTieneFK=true;
			}
			
			//SI ES RELACION UNO A UNO NO TOMAR EN CUENTA TRABAJAR CON getEntity			
			//if(!columnSchema.IsPrimaryKeyMember) {
				intContadorFK++;
			//}
		}
	}
	
	foreach(IndexSchema indexSchema in table.Indexes)
	{
		if(indexSchema.IsUnique)
		{
			foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
			{
				if(memberColumnSchema.Column.IsPrimaryKeyMember)
				{
					blnValidarIndexPK=true;
				}
			}
		}
		else
		{
			
			if(!indexSchema.Name.Contains("Busqueda"))
			{
				blnValidarEsPrimerColumnaIndexFK=false;
				blnValidarIndexFK=false;
				
				foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns)
				{
					if(memberColumnSchema.Column.IsForeignKeyMember)
					{												
						if(!blnValidarEsPrimerColumnaIndexFK)
						{
							blnValidarEsPrimerColumnaIndexFK=true;
							blnValidarIndexFK=true;
						}
						else
						{
							blnValidarIndexFK=false;
							break;
						}
					}
				}
				
				if(blnTieneFK)
				{
					if(blnValidarIndexFK)
					{
						intContadorIndexFK++;
						
						
						if(!indexSchema.Name.Contains(strFK+"_"))
						{
							blnValidacionIndexes=true;
							strValidation +="Falta prefijo FK_ en nombre indice "+indexSchema.Name+"</br>\r\n";
						}
					}
				}
			}
		}
	}
	
	if(intContadorFK!=intContadorIndexFK)
	{
		blnValidacionIndexes=true;
		strValidation +="Falta Indices FK, columns FK="+intContadorFK+",indicesFK"+intContadorIndexFK+"</br>\r\n";
	}
	
	if(!blnValidarIndexPK)
	{
		blnValidacionIndexes=true;
		strValidation +="Falta PK Index </br>\r\n";
		
		
	}
	
	strValidation +=".</td>\r\n"; 
	
	/*
	blnValidacionIndexes=false;
	
	if(strValidation.Length>12)
	{
		blnValidacionIndexes=true;
	}
	*/
	
	return strValidation;
}

public string GetValidationPK(TableSchema table,out bool blnValidacionPK)
{		
	string strValidation ="<td>\r\n"; 
	ColumnSchema columnSchemaPK=null;
	blnValidacionPK=false;
	
	foreach(ColumnSchema columnSchema in table.Columns)
	{
		if(columnSchema.IsPrimaryKeyMember)
		{
			columnSchemaPK=columnSchema;
			break;
		}
	}
	
	if(columnSchemaPK!=null)
	{
		if(!columnSchemaPK.Name.Equals(strId))
		{
			if(!GetNoIdTableFromPropertiesC(table)) {
				blnValidacionPK=true;
				strValidation +="Error en nombre ("+strId+")</br>\r\n";
			}
		}
		
		if(!columnSchemaPK.IsUnique)
		{
			blnValidacionPK=true;
			strValidation +="No es unico </br>\r\n";
		}
		
		if(columnSchemaPK.AllowDBNull)
		{
			blnValidacionPK=true;
			strValidation +="Permite nulos </br>\r\n";
		}
		
		if(columnSchemaPK.DataType!=DbType.Int64)
		{
			if(!GetNoIdTableFromPropertiesC(table)) {
				blnValidacionPK=true;
				strValidation +="No bigint </br>\r\n";
			}
		}
		
		//EN UNA RELACION UNO A UNO EL PK ES FK IGUALMENTE Y NO ES NECESARIO QUE SEA IDENTITY
		if(!columnSchemaPK.IsForeignKeyMember) {
			foreach(ExtendedProperty extendedProperty in columnSchemaPK.ExtendedProperties)
			{
				if(extendedProperty.Name.Equals("CS_IsIdentity"))
				{
					if(extendedProperty.Value.Equals(false))
					{
						if(!GetNoIdTableFromPropertiesC(table) && !GetNoIdentityTableFromPropertiesC(table)) {
							//PUEDE NO VALIDAR IDENTITY PERO DEBEN SER TABLAS CON NOMBRE ESTADO
							if(!C1_EsConPkNOAutoNumerico || (C1_EsConPkNOAutoNumerico && !table.Name.Contains("Estado"))) {
								blnValidacionPK=true;
								strValidation +="No es identity </br>\r\n";
								
							}
						}
					}
				}
			}
		}
	}
	else
	{
		blnValidacionPK=true;
		strValidation +="No Existe</br>\r\n";
	}
	
	strValidation +=".</td>\r\n"; 
	
	/*
	blnValidacionPK=false;
	
	if(strValidation.Length>12)
	{
		blnValidacionPK=true;
	}
	*/
	
	return strValidation;
}

public string GetValidationBasicColumns(TableSchema table,out bool blnValidacionBasicColumns)
{		
	string strValidation ="<td>\r\n"; 
	bool blnExisteIsActive=false;
	bool blnExisteIsExpired=false;
	bool blnExisteVersionRow=false;
	
	blnValidacionBasicColumns=false;
	
	foreach(ColumnSchema columnSchema in table.Columns)
	{
		if(columnSchema.Name.Equals(strIsActive))
		{
			blnExisteIsActive=true;
			
			if(columnSchema.AllowDBNull)
			{
				blnValidacionBasicColumns=true;
				strValidation +="IsActive Permite nulos </br>\r\n";
			}
			
			if(columnSchema.DataType!=DbType.Boolean)
			{
				blnValidacionBasicColumns=true;
				strValidation +="IsActive No es bit </br>\r\n";
			}
		}
		else if(columnSchema.Name.Equals(strIsExpired))
		{
			
			blnExisteIsExpired=true;
			
			if(columnSchema.AllowDBNull)
			{
				blnValidacionBasicColumns=true;
				strValidation +="IsExpired Permite nulos </br>\r\n";
			}
			
			if(columnSchema.DataType!=DbType.Boolean)
			{
				blnValidacionBasicColumns=true;
				strValidation +="IsExpired No es bit </br>\r\n";
			}
			
		}
		else if(columnSchema.Name.Equals(strVersionRow))
		{
			blnExisteVersionRow=true;
			if(columnSchema.AllowDBNull)
			{
				blnValidacionBasicColumns=true;
				strValidation +="VersionRow Permite nulos </br>\r\n";
			}
			
			if(columnSchema.NativeType!="timestamp")
			{
				blnValidacionBasicColumns=true;
				strValidation +="VersionRow No es timestamp </br>\r\n";
			}
			
		}
	}
	
	if(!blnExisteIsActive)
	{
		//strValidation +="No existe isActive </br>\r\n";
	}
	
	if(!blnExisteIsExpired)
	{
		//strValidation +="No existe isExpired </br>\r\n";
	}
	
	if(!blnExisteVersionRow)
	{
		if(!GetNoVersionRowTableFromPropertiesC(table)) {
			blnValidacionBasicColumns=true;
			strValidation +="No existe versionRow </br>\r\n";
		}
	}
	
	strValidation +=".</td>\r\n"; 
	
	/*
	blnValidacionBasicColumns=false;
	
	if(strValidation.Length>12)
	{
		blnValidacionBasicColumns=true;
	}
	*/
	
	return strValidation;
}

public string GetValidationColumns(TableSchema table,out bool blnValidacionColumns)
{		
	string strValidation ="<td>\r\n"; 
	blnValidacionColumns=false;
	
	foreach(ColumnSchema columnSchema in table.Columns)
	{		
		if(!columnSchema.IsForeignKeyMember) {
			if(columnSchema.AllowDBNull&&!EsImagenArchivoColumn(columnSchema))
			{
				blnValidacionColumns=true;
				strValidation +=columnSchema.Name+": Permite nulos </br>\r\n";
			}
			
			if(!(EsDecimalColumn(columnSchema)||EsBigIntColumn(columnSchema)||EsIntColumn(columnSchema)||EsSmallIntColumn(columnSchema)||EsCharColumn(columnSchema)
				||EsVarCharColumn(columnSchema)||EsDateTimeColumn(columnSchema)||EsDateColumn(columnSchema)||EsTimeColumn(columnSchema)||EsBitColumn(columnSchema)||EsBinaryColumn(columnSchema))) {
				blnValidacionColumns=true;
				strValidation +=columnSchema.Name+": Tipo de dato no manejado "+columnSchema.DataType.ToString()+"</br>\r\n";
			}
		}
	}
	
	
	
	strValidation +=".</td>\r\n"; 
	
	/*
	blnValidacionColumns=false;
	
	if(strValidation.Length>12)
	{
		blnValidacionColumns=true;
	}
	*/
	
	return strValidation;
}

public bool GetValidationColumnDefaultValue(TableSchema table)
{
	bool blnValidadoDefaultValue=false;
	String strValueDefault="";
	String strPrefijoAccionTableNombreProperty="CS_Default";
	
	ArrayList arrAccionExtendsProperty=new ArrayList();
	arrAccionExtendsProperty=GetAccionExtendsPropertyC(table);
	
	foreach(MeExtendProperty meExtendProperty in arrAccionExtendsProperty)
	{
		strValueDefault=GetPropertyAccionTableFromPropertiesC(meExtendProperty,strPrefijoAccionTableNombreProperty);				
	}
	
	return blnValidadoDefaultValue;
}

public string GetValidationFK(TableSchema table,out bool blnValidacionFK)
{	blnValidacionFK=false;
	string strValidation ="<td>\r\n"; 
	ColumnSchema columnSchemaFK=null;
	
	foreach(ColumnSchema columnSchema in table.Columns)
	{
		if(columnSchema.IsForeignKeyMember)
		{
			columnSchemaFK=columnSchema;
			
			if(!columnSchemaFK.Name.Contains(strId)) {
				blnValidacionFK=true;
				strValidation +="Error en nombre </br>\r\n";
			}	
						
			if(columnSchemaFK.DataType!=DbType.Int64) {
				blnValidacionFK=true;
				strValidation +="No bigint </br>\r\n";
			}
				
			if(columnSchemaFK.AllowDBNull&&!columnSchemaFK.Name.Equals(strId+table.Name)) {
				blnValidacionFK=true;
				strValidation +="Permite nulos</br>\r\n";
			}
				
			if(!columnSchemaFK.Name.Equals(strId)) {																		
				if(!VerificarNombreTablaRelacionada(columnSchemaFK)) {//&&!GetNombreCompletoClaseRelacionadaFromColumn(columnSchemaFK).Equals(""))				
					
					//TOMANDO EN CUENTA QUE NO SE TRATA DE CATALOGOS GENERALES (TABLA Lista Y TABLA Valor )
					if(!VerificarColumnaCatalogoGeneralC(columnSchemaFK) && !VerificarColumnaUsuarioCatalogoGeneralC(columnSchemaFK)) {
						blnValidacionFK=true;					
						strValidation +="No existe una tabla con el nombre "+columnSchemaFK.Name.Replace(strId,"")+"</br>";
					} else {
						//ES FK CATALOGO GENERAL
						//Trace.WriteLine("CATALOGO GENERAL="+columnSchemaFK.Table.Name+"->"+columnSchemaFK.Name);
					}
				}
			} else {
				//RELACION UNO A UNO
				String strNombreTabla=GetNombreClaseRelacionadaFromColumn(columnSchemaFK,true);
				//System.Windows.Forms.MessageBox.Show(strNombreTabla);
				if(strNombreTabla.Equals("") || strNombreTabla.Equals("NONE")) {
					blnValidacionFK=true;
					strValidation +="No existe una tabla de nombre vacio en una relacion uno a uno";//+columnSchemaFK.Name.Replace(strId,"");			
				}
			}
		}
	}
	
	
	
	strValidation +=".</td>\r\n"; 
	
	/*
	blnValidacionFK=false;
	
	if(strValidation.Length>12)
	{
		blnValidacionFK=true;
	}
	*/
	
	return strValidation;
}

public bool VerificarNombreTablaRelacionada(ColumnSchema columnSchema)
{
	bool blnVerificado=false;
	
	String strNombreClase=columnSchema.Name.Substring(2,columnSchema.Name.Length-2);
	
	TableSchema tableSchemaFK=GetTableSchemaFromColumnForeignKey(columnSchema);
	
	foreach(TableSchema tableSchema in SourceDatabaseTables) {
		if(strNombreClase.Equals(tableSchema.Name)){		
			blnVerificado=true;
			break;
		}
	}
	
	if(B1_EsConFkAdicional) {
		if(columnSchema.Name.Contains(tableSchemaFK.Name)) {
			blnVerificado=true;
		}
	}
	
	return blnVerificado;
}

private string _outputDirectory = String.Empty;
//<%@ Property Name="EntidadesNombre" Type="System.String" Default="ParametrosCompras" Category="Options" Description="Nombre de la Entidad" %>
//<%@ Property Name="SourceTablesMaintenance" Type="SchemaExplorer.TableSchemaCollection" Category="Optional General" Optional="true" Description="Select a set of tables." %>

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
[Optional]
[Category("1. General")]
[Description("The directory to output the results to.")]
public string OutputDirectory 
{
	get
	{
		
		// default to the directory that the template is located in
		//if (_outputDirectory.Length == 0)
		//{ 
		//return this.CodeTemplateInfo.DirectoryName + "output\\DataBase\\"+SourceDatabase.Name+"\\";
		return "C:\\o\\";
		//}
		//return _outputDirectory;
	}
	set
	{
		if (!value.EndsWith("\\")) value += "\\";
		_outputDirectory = value;
	} 
}

public bool ValidarVariablesInicialesTipo()
{
	bool blnValidado=false;
	int intNumeroTipoEjecusion=0;
	
	if(GeneracionPorTablas){
		intNumeroTipoEjecusion++;
	}
	
	if(GeneracionPorModulo){
		intNumeroTipoEjecusion++;
	}
	
	if(GeneracionPorEsquema) {
		intNumeroTipoEjecusion++;
	}
	
	if(GeneracionTodos) {
		intNumeroTipoEjecusion++;
	}
		
	if(intNumeroTipoEjecusion.Equals(1)) {
		blnValidado=true;
		
	} else {
		System.Windows.Forms.MessageBox.Show("SOLO DEBE ESTAR SELECCIONADO 1 TIPO DE EJECUSION(TODO,TABLAS,MODULO)");
	}	
	
	return blnValidado;
}

public void InicializarVariablesEmpresa() {
	//System.Windows.Forms.MessageBox.Show("inicializar");

	InicializarVariablesEmpresaC(NombreEmpresa,false);
	
	if(GeneracionPorTablas) {
		SourceDatabaseTables=GetTablasNormalesReportesC(SourceTablesForGenerate,GeneracionReportes);
		
	} else if(GeneracionPorModulo){
		//Trace.WriteLine(SourceDatabase.Tables.Count);
		SourceDatabaseTables=GetTablasForModuloC(SourceDatabase,SourceModuloForGenerate,GeneracionReportes);
	
	} else if(GeneracionPorEsquema) {
		SourceDatabaseTables=GetTablasForEsquemaC(SourceDatabase,SourceEsquemaForGenerate,GeneracionReportes);
		//Trace.WriteLine(SourceDatabaseTables.Count);
	
	} else {
		SourceDatabaseTables=GetTablasNormalesReportesC(SourceDatabase.Tables,GeneracionReportes);
	}
	
	
}

public override void Render(TextWriter writer)
{
	PreserveRegionsMergeStrategy strategy = new PreserveRegionsMergeStrategy("^[ \t]*(?i:Custom)", "C#");
		
	DateTime startTime = DateTime.Now;
	
	string strDirectorioWeb=string.Empty;
	strDirectorioWeb=this.OutputDirectory;
	
	
	bool blnValidacionPK=false;
	bool blnValidacionFK=false;
    bool blnValidacionBasicColumns=false;
	bool blnValidacionColumns=false;
	bool blnValidacionIndexes=false;
	bool blnValidacionTableTag=false;
	bool blnValidacionColumnTag=false;
	
	String stringHtml=String.Empty;
	String stringHtmlTable=String.Empty;
	
	InicializarVariablesEmpresa();
	
	if(ValidarVariablesInicialesTipo()) {
	
	stringHtml+="<html>\r\n";
	stringHtml+="<head>";
	//stringHtml+="Validaciones";
	stringHtml+="</head>\r\n";
	stringHtml+="<body>\r\n";
	
	
	if (!strDirectorioWeb.EndsWith("\\")) strDirectorioWeb += "\\";
	if (!Directory.Exists(strDirectorioWeb)) Directory.CreateDirectory(strDirectorioWeb);
	

	if (!Directory.Exists(strDirectorioWeb)) Directory.CreateDirectory(strDirectorioWeb);
	
		ValidationTemplate validationTemplate = new ValidationTemplate();
	
		String xmlServlets="<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
		xmlServlets+="\r\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" id=\"WebApp_ID\" version=\"2.5\">";
		xmlServlets+="\r\n<welcome-file-list>";
  		xmlServlets+="\r\n<welcome-file>index.jsp</welcome-file>";
 	    xmlServlets+="\r\n<welcome-file>default.jsp</welcome-file>";
  		xmlServlets+="\r\n</welcome-file-list>\r\n\r\n";
		
		
		
		for (int x = 0; x < SourceDatabaseTables.Count; x++)
		{
			validationTemplate.TablaBase=SourceDatabaseTables[x];
			
			stringHtmlTable="";
			
			blnValidacionPK=false;
			blnValidacionFK=false;
			blnValidacionBasicColumns=false;
			blnValidacionColumns=false;
			blnValidacionIndexes=false;
			blnValidacionTableTag=false;
			blnValidacionColumnTag=false;
			
			Trace.WriteLine("Validando...."+SourceDatabaseTables[x].Name+ " Tabla "+x.ToString()+ " de "+SourceDatabaseTables.Count.ToString());
			
			stringHtmlTable+="</br><b>"+x.ToString()+" "+SourceDatabaseTables[x].Owner+"."+SourceDatabaseTables[x].Name+"</b>";
			stringHtmlTable+="\r\n<table border=\"1\">\r\n";
			
			    stringHtmlTable+="<tr>\r\n";
				stringHtmlTable+="<td>\r\n";
				stringHtmlTable+="<b>PK</b>";
				stringHtmlTable+="</td>\r\n";
				
				stringHtmlTable+="<td>\r\n";
				stringHtmlTable+="<b>Basic Columns</b>";
				stringHtmlTable+="</td>\r\n";
				
				stringHtmlTable+="<td>\r\n";
				stringHtmlTable+="<b>Columns</b>";
				stringHtmlTable+="</td>\r\n";
				
				stringHtmlTable+="<td>\r\n";
				stringHtmlTable+="<b>FK</b>";
				stringHtmlTable+="</td>\r\n";
				
				stringHtmlTable+="<td>\r\n";
				stringHtmlTable+="<b>Indices</b>";
				stringHtmlTable+="</td>\r\n";
				
				stringHtmlTable+="<td>\r\n";
				stringHtmlTable+="<b>TABLE TAGs</b>";
				stringHtmlTable+="</td>\r\n";
				
				stringHtmlTable+="<td>\r\n";
				stringHtmlTable+="<b>COLUMNS TAGs</b>";
				stringHtmlTable+="</td>\r\n";
				
				stringHtmlTable+="</tr>\r\n";
			
			
			if(SourceDatabaseTables[x].Name.Contains("BIN")||SourceDatabaseTables[x].Name.Contains("EXCEPTIONS")||SourceDatabaseTables[x].Name.Contains("sys"))
			{
					continue;
			}
		
		stringHtmlTable+="<tr>\r\n";
		stringHtmlTable+=GetValidationPK(SourceDatabaseTables[x],out blnValidacionPK);
		stringHtmlTable+=GetValidationBasicColumns(SourceDatabaseTables[x], out blnValidacionBasicColumns);
		stringHtmlTable+=GetValidationColumns(SourceDatabaseTables[x], out blnValidacionColumns);		
   		stringHtmlTable+=GetValidationFK(SourceDatabaseTables[x],out  blnValidacionFK);
		stringHtmlTable+=GetValidationIndexes(SourceDatabaseTables[x],out blnValidacionIndexes);
		
		if(A1_EsConDescripciones) {
			stringHtmlTable+=GetValidationTagTable(SourceDatabaseTables[x],out blnValidacionTableTag);
			stringHtmlTable+=GetValidationTagColumn(SourceDatabaseTables[x],out blnValidacionColumnTag);
		} else {
			blnValidacionTableTag=false;
			blnValidacionColumnTag=false;
		}
		
 		stringHtmlTable+="</tr>\r\n";
		
		stringHtmlTable+="</table>\r\n";
		
		stringHtmlTable+="</br>\r\n";
		
		//Trace.WriteLine("PK="+blnValidacionPK.ToString()+",FK="+blnValidacionFK.ToString()+",BASIC="+blnValidacionBasicColumns.ToString()+",COLUMNS="+blnValidacionColumns.ToString()+",INDEXES="+blnValidacionIndexes.ToString()+",TABLE-TAG="+blnValidacionTableTag.ToString()+",COLUMN-TAG="+blnValidacionColumnTag.ToString());
		
		if(!D1_EsConTablasDescripcionVacias) {	
			if(blnValidacionPK||blnValidacionFK||blnValidacionBasicColumns||blnValidacionColumns||blnValidacionIndexes||blnValidacionTableTag||blnValidacionColumnTag)
			{
				stringHtml+=stringHtmlTable;
			}
		} else {
			stringHtml+=stringHtmlTable;
		}
	}
	
	stringHtml+="</body>\r\n";
	stringHtml+="</html>\r\n";
	
	validationTemplate.html=stringHtml;
		
	validationTemplate.RenderToFile(strDirectorioWeb+"Validacion"+SourceDatabase.Name+ ".html", strategy);
	
	Trace.WriteLine("Tiempo de ejecusion: " + (DateTime.Now - startTime).ToString());
			
	}
}
</script>

