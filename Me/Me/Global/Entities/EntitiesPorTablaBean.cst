<%@ Template Language="C#" TargetLanguage="C#" Description="Template de la capa de Acceso a Datos" ResponseEncoding="UTF-8"%>    	
<%@ CodeTemplate Src="..\CommonCode\CommonCodeProyecto.cs" Inherits="Me.CommonCodeProyecto" Language="C#" TargetLanguage="C#" Description="A base class for the entities." ResponseEncoding="UTF-8"%>
<%@ CodeTemplate Src="..\CommonCode\CommonCode.cs" Inherits="Me.CommonCode" Language="C#" TargetLanguage="C#" Description="A base class for the entities." ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import NameSpace="System.Collections" %>
<%@ Import NameSpace="System.Collections.Generic" %>
<%@ Property Name="NombreProgramador" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre del Programdor" %>
<%@ Property Name="Package" Type="System.String" Default="Indefinido" Category="Options" Description="Nombre de la Entidad" %>
<%@ Property Name="TablaBase" Type="SchemaExplorer.TableSchema" EXCLUDED="true"	Category="Context"%>
<%@ Property Name="Empresa" Type="System.String" Default="Byron Chavez" Category="Options" Description="Nombre de la Empresa" %>
<%@ Property Name="Schema" Type="System.String" Default="Tame" Category="Options" Description="Schema" %>
<%@ Property Name="GeneracionPorModuloUnico" Type="System.Boolean" Default="false" Category="0. Tipo Generacion" Description="Nombre del Programdor" %>
<%@ Property Name="EsSwing" Type="System.Boolean" Default="false" Category="Options" Description="Inndica si es Swing"  %>

<script runat="template">
public string GetExtendClase()
{
	String strExtendClase="";
	
	if(blnConAdditional) {
		strExtendClase+="extends "+GetNombreClase(TablaBase.ToString())+strClaseBean+"Additional ";	
	} else {
		strExtendClase+="extends "+GetNombreClase(TablaBase.ToString())+" ";	
	}
	
	
	return strExtendClase;
}


	
public String GetVariablesVisibilidadHabilitarResaltarIndicesVariablesTablasClases(TableSchema TablaBase,bool esVisibilidad,bool esHabilitar, bool esResaltar) {
			String strFuncion=string.Empty;
			String strElse=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n";
			
			strInitFuncion=GetVariablesVisibilidadHabilitarResaltarIndicesVariablesTablasClasesC(TablaBase,esVisibilidad,esHabilitar, esResaltar,EsSwing);
			
			/*
			bool blnExisteBusqueda=false;
			bool blnExisteBusquedaFkVariableGlobal=false;
			bool esPrimero=true;
			
			String strTabPanel=string.Empty;
			String strPanelesBusquedas=string.Empty;
			String strPanelBusqueda=string.Empty;
			String strControlesPanelesBusquedas=string.Empty;
			
			//SIEMPRE DECLARAR PANE BUSQUEDA
			//strTabPanel="\r\n\tpublic JTabbedPane jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+";\r\n";
			
			
			//strPanelesBusquedas="\r\n\tpublic void resaltarPanelBusqueda"+GetNombreClaseC(TablaBase.ToString())+"(String sTipoBusqueda) {";
			//strPanelesBusquedas+="\r\n\t\tint index=0;";
			//strPanelesBusquedas+="\r\n\t\tBoolean existe=false;";
			//strPanelesBusquedas+="\r\n\t\tBorder borderResaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,\"TAB\");\r\n";
			
			
			foreach(IndexSchema indexSchema in TablaBase.Indexes) {
				blnExisteBusquedaFkVariableGlobal=false;
				strPanelBusqueda="";
				
				if(!indexSchema.IsPrimaryKey) {
					strElse=string.Empty;
					
					if(!VerificarIndiceBusquedaTablaC(TablaBase,indexSchema.Name)) {
						continue;
					}
					
					if(indexSchema.IsUnique) {
						continue;
						//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+indexSchema.Name+"(";
					} else {						
						if(!blnExisteBusqueda) {
							blnExisteBusqueda=true;
							//strTabPanel="\r\n\tprotected JTabbedPane jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+";\r\n";
						}
						
						if(indexSchema.Name.Contains("Busqueda")||indexSchema.Name.Contains("FK")) {
							if(esVisibilidad) {
								strInitFuncion+="\r\n\r\n\tpublic Boolean mostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=true;";
	
								strInitFuncion+="\r\n\r\n\tpublic Boolean getmostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"() {";
								strInitFuncion+="\r\n\t\treturn this.mostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setmostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"(Boolean visibilidadResaltar) {";
								strInitFuncion+="\r\n\t\tthis.mostrar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= visibilidadResaltar;";
								strInitFuncion+="\r\n\t}";																
							
							} else if(esHabilitar) {
								strInitFuncion+="\r\n\r\n\tpublic Boolean activar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=true;";
	
								strInitFuncion+="\r\n\r\n\tpublic Boolean getactivar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"() {";
								strInitFuncion+="\r\n\t\treturn this.activar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setactivar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"(Boolean habilitarResaltar) {";
								strInitFuncion+="\r\n\t\tthis.activar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= habilitarResaltar;";
								strInitFuncion+="\r\n\t}";
								
							} else if(esResaltar) {
								strInitFuncion+="\r\n\r\n\tpublic Border resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"=null;";
	
								strInitFuncion+="\r\n\r\n\tpublic Border getresaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"() {";
								strInitFuncion+="\r\n\t\treturn this.resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setresaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"(Border borderResaltar) {";
								strInitFuncion+="\r\n\t\tthis.resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= borderResaltar;";
								strInitFuncion+="\r\n\t}";
								
								strInitFuncion+="\r\n\r\n\tpublic void setresaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"("+GetNombreClaseC(TablaBase.ToString())+"BeanSwingJInternalFrame "+GetNombreClaseObjetoC(TablaBase.ToString())+"BeanSwingJInternalFrame) {";
								strInitFuncion+="\r\n\t\tBorder borderResaltar=Funciones2.getBorderResaltar("+GetNombreClaseObjetoC(TablaBase.ToString())+"BeanSwingJInternalFrame.getParametroGeneralUsuario(),\"TAB\");";
								//strInitFuncion+="\r\n\t\tthis.jTtoolBarTipoVisual.setBorder(borderResaltar);";
								strInitFuncion+="\r\n\t\tthis.resaltar"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+"= borderResaltar;";
								strInitFuncion+="\r\n\t}";
							}
							
							
							//strPanelBusqueda="\tpublic JPanel jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							//strPanelBusqueda+="\tpublic JButton jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							
							
							if(!esPrimero) {
								strElse="else ";
							}
							
							
							//strPanelBusqueda="\r\n\t\t"+strElse+"if(sTipoBusqueda.equals(\""+indexSchema.Name+"\")) {";							
							//strPanelBusqueda+="\r\n\t\t\tindex= this.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".indexOfComponent(this.jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+");";
							//strPanelBusqueda+="\r\n\r\n\t\t\tthis.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".setSelectedIndex(index);";
							//strPanelBusqueda+="\r\n\r\n\t\t\tJPanel jPanel=(JPanel)this.jTabbedPaneBusquedas"+GetNombreClaseC(TablaBase.ToString())+".getComponent(index);";
							//strPanelBusqueda+="\r\n\r\n\t\t\tjPanel.setBorder(borderResaltar);";
							//strPanelBusqueda+="\r\n\t\t\texiste=true;";
							//strPanelBusqueda+="\r\n\t\t}";
							
							
							//strPanelesBusquedas+="\tprotected JPanel jPanel"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							//strPanelesBusquedas+="\tprotected JButton jButton"+indexSchema.Name+GetNombreClaseC(TablaBase.ToString())+";\r\n";
							//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(String strFinalQuery,";
						} else {
							//strInitFuncion+="\r\n\tvoid "+"Get"+GetNombreClaseC(TablaBase.ToString())+"s"+indexSchema.Name+"(";
						}
					}	
					int count=1;
					
					foreach(MemberColumnSchema memberColumnSchema in indexSchema.MemberColumns) {												
						
						if(!(indexSchema.Name.Contains("BusquedaMayor")||indexSchema.Name.Contains("BusquedaMayorIgual")||indexSchema.Name.Contains("BusquedaMenor")||indexSchema.Name.Contains("BusquedaMenorIgual")||indexSchema.Name.Contains("BusquedaRango")||indexSchema.Name.Contains("BusquedaRangoIgual"))) {
							if(EsIndiceFKColumnaVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)
								|| EsIndiceFKColumnaModuloVariableGlobalDataBaseFromPropertiesC(indexSchema,memberColumnSchema.Column)) {
								blnExisteBusquedaFkVariableGlobal=true;
								break;
							}
							
							//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+"\r\n"; 
															
							if(!indexSchema.MemberColumns.Count.Equals(count)) {
								//strInitFuncion+=";\r\n";	
							}
						} else {
							if(!indexSchema.Name.Contains("BusquedaRango")) {
								//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"",memberColumnSchema.IsForeignKeyMember)+"\r\n"; 																
							} else {
								//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Inicial",memberColumnSchema.IsForeignKeyMember)+"\r\n";								
								
								//strInitFuncion+=",";
								//strControlesPanelesBusquedas+="\t"+GetDefinicionControlVariablesSwingC(memberColumnSchema.Column,indexSchema.Name,"Final",memberColumnSchema.IsForeignKeyMember)+"\r\n"; 																
								break;
							}
						}
						count++;
					}
					
					
					if(blnExisteBusquedaFkVariableGlobal) {
						continue;	
					}
					
					if(esPrimero) {
						esPrimero=false;	
					}
							
					//strInitFuncion+=")throws Exception;";																																			
					
					//strPanelesBusquedas+=strPanelBusqueda;
				}
			}
			
			
			//strInitFuncion=strTabPanel+strPanelesBusquedas+strControlesPanelesBusquedas;
			
			//strInitFuncion+="\r\n\r\n\t\tif(existe) {";
			//strInitFuncion+="\r\n\t\t\tthis.jTtoolBar"+GetNombreClaseC(TablaBase.ToString())+".setBorder(borderResaltar);";
			//strInitFuncion+="\r\n\t\t}";			
			//strInitFuncion+="\r\n\t}";
		*/	
				
			
			return strInitFuncion; 
	}
	
public String GetDefinitionVariablesResaltarNavegacionColumnsTablaTablasClasesRelacionadas(TableSchema table,bool esFuncionResaltarLote,bool esConBorder,bool esConVisibilidad,bool esConHabilitar) {
	String sTablaClaseRelacionada=String.Empty;
	
	sTablaClaseRelacionada=GetDefinitionVariablesResaltarNavegacionColumnsTablaTablasClasesRelacionadasC(table,esFuncionResaltarLote,esConBorder,esConVisibilidad,esConHabilitar,TablaBase,EsSwing,true);
	
	/*
	String sTablaClaseRelacionada2=String.Empty;
	String sTablaClaseRelacionada3=String.Empty;
	System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(table);
			
	TableSchema tablaRelacionadaObjetivo;
	ArrayList tablasRelacionadasEncontradas=new ArrayList();
	bool encontrado=false;
	String sClasesNoRelacionadas=String.Empty;
	String[] sClases;sClases= new String[1];
	//bool blClaseNo=false;
			
	String strObjetoController=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoBeanSwing+"JInternalFrame";
	
	if(esFuncionResaltarLote){	
		sTablaClaseRelacionada+="\r\n\t\tif(deepLoadType.equals(DeepLoadType.INCLUDE) || deepLoadType.equals(DeepLoadType.NONE)) {";
		if(esConVisibilidad || esConHabilitar){
			sTablaClaseRelacionada+="\r\n\t\t\tesInicial=false;";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=true;";
			
		} else if(esConBorder){
			sTablaClaseRelacionada+="\r\n\t\t\tesInicial=null;";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=Funciones2.getBorderResaltar("+strObjetoController+".getParametroGeneralUsuario(),\"COLUMNA\");";
		}
		
		sTablaClaseRelacionada+="\r\n\t\t} else if(deepLoadType.equals(DeepLoadType.EXCLUDE)) {";
		
		if(esConVisibilidad || esConHabilitar){
			sTablaClaseRelacionada+="\r\n\t\t\tesInicial=true;";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=false;";
		} else if(esConBorder){
			sTablaClaseRelacionada+="\r\n\t\t\tesInicial=Funciones2.getBorderResaltar("+strObjetoController+".getParametroGeneralUsuario(),\"COLUMNA\");";
			sTablaClaseRelacionada+="\r\n\t\t\tesAsigna=null;";
		}
		sTablaClaseRelacionada+="\r\n\t\t}\r\n";
		
		//sTablaClaseRelacionada+="\r\n\r\n\t\tfor(Classe clase:clases) {";
	}
	
	foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values) {				
		if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne) {
			tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
		} else if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToMany) {			
			tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
		} else {
			tablaRelacionadaObjetivo=collectionInfo.JunctionTableSchema;
		}
								
		if(!GetPermiteClaseRelacionadaC(table,tablaRelacionadaObjetivo)) {
			continue;
		}								
				
		encontrado=false;
				
		foreach(TableSchema tableSchema in tablasRelacionadasEncontradas) {										
			if(tableSchema.Name.Equals(tablaRelacionadaObjetivo.Name)) {
				encontrado=true;
			}
		}								
		
		if(!encontrado) {
			tablasRelacionadasEncontradas.Add(tablaRelacionadaObjetivo);
			
			if(!esFuncionResaltarLote) {
				sTablaClaseRelacionada+=GetDefinitionVariablesResaltarNavegacionColumnTablaTablasClasesRelacionadas(tablaRelacionadaObjetivo);
			
			} else if(esFuncionResaltarLote){
				sTablaClaseRelacionada2+=GetSetVariablesResaltarLoteNavegacionColumnTablaTablasClasesRelacionadas(tablaRelacionadaObjetivo,false,false,esConBorder,esConVisibilidad,esConHabilitar);				
				sTablaClaseRelacionada3+=GetSetVariablesResaltarLoteNavegacionColumnTablaTablasClasesRelacionadas(tablaRelacionadaObjetivo,true,true,esConBorder,esConVisibilidad,esConHabilitar);				
			}
		}											
	}
	//System.Windows.Forms.MessageBox.Show(sTablaClaseRelacionada);
			
	if(esFuncionResaltarLote){
		sTablaClaseRelacionada=sTablaClaseRelacionada +sTablaClaseRelacionada2;
		
		sTablaClaseRelacionada+="\r\n\r\n\t\tfor(Classe clase:clases) {";
		sTablaClaseRelacionada+=sTablaClaseRelacionada3	;	
		sTablaClaseRelacionada+="\r\n\t\t}";
		
		
		
		//AGREGAR INCLUDE
		//sTablaClaseRelacionada="\r\n\t\tif(deepLoadType.equals(DeepLoadType.INCLUDE) || deepLoadType.equals(DeepLoadType.NONE)) {";					
		//sTablaClaseRelacionada=sTablaClaseRelacionada+"\r\n\t\t}";
	}
	*/
	
	return sTablaClaseRelacionada; 
}

/*
public String GetDefinitionVariablesResaltarNavegacionColumnTablaTablasClasesRelacionadas(TableSchema tablaRelacionada) {
	String sColumna="";
	
	String strClaseController=GetNombreClaseC(TablaBase.ToString())+strPrefijoBeanSwing+"JInternalFrame";
	String strObjetoController=GetNombreClaseObjetoC(TablaBase.ToString())+strPrefijoBeanSwing+"JInternalFrame";
	
	if(EsSwing) {
		sColumna+="\r\n\r\n\tpublic Border resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"=null;\r\n";
		sColumna+="\r\n\tpublic Border getresaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"() {";
		sColumna+="\r\n\t\treturn this.resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+";";
		sColumna+="\r\n\t}\r\n";
	
		sColumna+="\r\n\tpublic void setresaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"(Border borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+") {";
		sColumna+="\r\n\t\tif(borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"!=null) {";
		sColumna+="\r\n\t\t\tthis.resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"= borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+";";
		sColumna+="\r\n\t\t}";
		sColumna+="\r\n\t}\r\n";
		
		sColumna+="\r\n\tpublic void setresaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"("+strClaseController+" "+strObjetoController+") {";
		sColumna+="\r\n\t\tBorder borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"=Funciones2.getBorderResaltar("+strObjetoController+".getParametroGeneralUsuario(),\"COLUMNA\");";
		sColumna+="\r\n\r\n\t\t"+strObjetoController+".jTtoolBar"+GetNombreClaseC(TablaBase.ToString())+".setBorder(borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+");";
		sColumna+="\r\n\t\tthis.resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"= borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+";";
		sColumna+="\r\n\t}\r\n";
	}
	
	sColumna+="\r\n\r\n\r\n\tpublic Boolean mostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"=true;\r\n";
	sColumna+="\r\n\tpublic Boolean getmostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"() {";
	sColumna+="\r\n\t\treturn this.mostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+";";
	sColumna+="\r\n\t}\r\n";

	sColumna+="\r\n\tpublic void setmostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"(Boolean visibilidadResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+") {";
	sColumna+="\r\n\t\tthis.mostrar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"= visibilidadResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+";";
	sColumna+="\r\n\t}\r\n";
	
	sColumna+="\r\n\r\n\r\n\tpublic Boolean activar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"=true;\r\n";
	sColumna+="\r\n\tpublic Boolean gethabilitarResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"() {";
	sColumna+="\r\n\t\treturn this.activar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+";";
	sColumna+="\r\n\t}\r\n";

	sColumna+="\r\n\tpublic void setactivar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"(Boolean habilitarResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+") {";
	sColumna+="\r\n\t\tthis.activar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"= habilitarResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+";";
	sColumna+="\r\n\t}\r\n";
	
	//ESTA VISIBLE POR DEFECTO
	
	//sColumna+="\r\n\tpublic void setVisibilidadResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"() {";
	//sColumna+="\r\n\t\tBorder borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"=Funciones2.getBorderResaltar(this.getParametroGeneralUsuario(),\"COLUMNA\");";
				//sColumna+="\r\n\r\n\t\tthis.jTtoolBar"+GetNombreClaseC(TablaBase.ToString())+".setBorder(borderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+");";
	//sColumna+="\r\n\t\tthis.visibilidadResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"= false;";
	//sColumna+="\r\n\t}\r\n";
	
	
	return sColumna;
}
*/

/*
public String GetSetVariablesResaltarLoteNavegacionColumnTablaTablasClasesRelacionadas(TableSchema tablaRelacionada,bool esParaForIf,bool esTrue,bool esConBorder,bool esConVisibilidad,bool esConHabilitar) {
	String sColumna="";
	String sTrueFalse="true";
	String sTabs="\t\t";
	String sTipo="mostrar";
	
	if(!esTrue) {
		sTrueFalse="esInicial";
	} else {
		sTrueFalse="esAsigna";
	}
	
	if(esConVisibilidad) {
		sTipo="mostrar";
		
	} else if(esConHabilitar){
		sTipo="activar";
		
	} else if(esConBorder){
		sTipo="resaltar";
	}
	
		if(esParaForIf) {
			sColumna+="\r\n\r\n\t\t\tif(clase.clas.equals("+GetNombreClaseC(tablaRelacionada.ToString())+".class)) {";
		
		} else {
			sTabs="";
		}
		//EL BORDE RESALTADO NO DEPENDE DE LA VISIBILIDAD
		
		//if(EsSwing) {
		//	sColumna+="\r\n\t\t\t\tthis.setBorderResaltar"+GetNombreClaseC(tablaRelacionada.ToString())+"();";
		//}
		
		
		//sColumna+="\r\n\t\t"+sTabs+"this.set"+sTipo+"Resaltar"+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"("+sTrueFalse+");";
		sColumna+="\r\n\t\t"+sTabs+"this.set"+sTipo+GetNombreClaseC(tablaRelacionada.ToString())+GetNombreClaseC(TablaBase.ToString())+"("+sTrueFalse+");";
		
		if(esParaForIf) {
			sColumna+="\r\n\t\t\t\tcontinue;";		
			sColumna+="\r\n\t\t\t}";
		}
	
			
	return sColumna;
}
*/

public String GetSetLoteVisibilidadElementosSwingTablaClase(TableSchema TablaBase,bool esParaVisibilidad,bool esParaHabilitar,bool esParaBorder) {
		String strSwing="";
		String strSwing1="";
		String strSwing2="";
		
		strSwing=GetSetLoteVisibilidadElementosSwingTablaClaseC(TablaBase,esParaVisibilidad,esParaHabilitar,esParaBorder);
		
		/*
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(TablaBase.Columns[i].Name.Equals(strVersionRow)) {
				continue;
			}
			
			//if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing1+=GetDefinicionLoteVisibilidadControlVariablesSwing(TablaBase.Columns[i],"","",false,false,esParaVisibilidad,esParaHabilitar,esParaBorder);
				strSwing2+=GetDefinicionLoteVisibilidadControlVariablesSwing(TablaBase.Columns[i],"","",false,true,esParaVisibilidad,esParaHabilitar,esParaBorder);
			//}
		}			
		
		strSwing=strSwing1;
		
		strSwing+="\r\n\r\n\t\tfor(Classe campo:campos) {";
		strSwing+=strSwing2;		
		strSwing+="\r\n\t\t}";
		*/
		
		return strSwing;
}

/*
public string GetDefinicionLoteVisibilidadControlVariablesSwing(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk,bool conForIf,bool esParaVisibilidad,bool esParaHabilitar,bool esParaBorder) {			
	String strControl="";
	String strTabs="";
	String strTipo="";
	String strTrueFalse="";
	String sColumnName=GetNombreCompletoColumnaClaseC(column)+GetNombreClaseC(TablaBase.ToString());//column.Name;
	
	if(esParaVisibilidad) {
		strTipo="mostrar";
		sColumnName=GetNombreVisibilidadControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk);
		
	} else if(esParaHabilitar) {
		strTipo="activar";
		sColumnName=GetNombreHabilitarControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk);
		
	} else if(esParaBorder){
		strTipo="resaltar";
		sColumnName=GetNombreBorderControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk);
	}
	
	if(!conForIf) {
		strTrueFalse="esInicial";
		strTabs="";
	} else {
		strTrueFalse="esAsigna";
		strTabs="\t\t";
	}
	
	if(conForIf) {
		strControl+="\r\n\r\n\t\t\tif(campo.clase.equals("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones."+column.Name.ToUpper()+")) {";
	}
	
	//strControl+="\r\n\t\t"+strTabs+"this.set"+strTipo+"Resaltar"+sColumnName+"("+strTrueFalse+");";
	strControl+="\r\n\t\t"+strTabs+"this.set"+sColumnName+"("+strTrueFalse+");";
	
	if(conForIf) {
		strControl+="\r\n\t\t\t\tcontinue;";
		strControl+="\r\n\t\t\t}";
	}
	
	
	return strControl;	
}
*/

public String GetDefinirBorderVisibilidadElementosSwingTablaClase(TableSchema TablaBase,bool EsSwing) {
		String strSwing="";
		
		strSwing=GetDefinirBorderVisibilidadElementosSwingTablaClaseC(TablaBase,EsSwing);
		
		/*
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(TablaBase.Columns[i].Name.Equals(strVersionRow)) {
				continue;
			}
			
			//if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing+=GetDefinirBorderVisibilidadControlVariablesSwing(TablaBase.Columns[i],"","",false);
			//}
		}			
		*/
		
		return strSwing;
}

/*
public string GetDefinirBorderVisibilidadControlVariablesSwing(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk) {			
	String strControl="";
	String strTrueFalse="true";
	String sColumnName=GetNombreCompletoColumnaClaseC(column);//column.Name;
	
	TableSchema tableSchemaFk=GetTableSchemaFromColumnForeignKey(column);
	
	String strTrueFalseActivar="true";
	
	if(GetNoInsertEditColumnFromPropertiesC(column) || GetReadOnlyColumnFromPropertiesC(column)) {
		 strTrueFalseActivar="false";
	}
	
	strControl+="\r\n\tpublic Border "+GetNombreBorderControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"=null;";			
	strControl+="\r\n\tpublic Boolean "+GetNombreVisibilidadControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"=true;";			
	strControl+="\r\n\tpublic Boolean "+GetNombreHabilitarControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"="+strTrueFalseActivar+";";
		
	if(column.IsForeignKeyMember) {
		if(GetConNoLoadForeignKeyColumnFromPropertiesC(column) || GetConNoLoadForeignKeyTableFromPropertiesC(tableSchemaFk)) {
			strTrueFalse="false";
		}
		
		strControl+="\r\n\tpublic Boolean "+GetNombreConCargarControlVariablesSwingC(column,strIndexName,strFinalName,esParaFk)+"="+strTrueFalse+";\r\n";	
	} else {
		strControl+="\r\n";
	}
	
	return strControl;	
}
*/

public String GetSetBorderVisibilidadElementosSwingTablaClase(TableSchema TablaBase) {
		String strSwing="";
		
		strSwing=GetSetBorderVisibilidadElementosSwingTablaClaseC(TablaBase,EsSwing);
		
		/*
		for (int i = 0; i < TablaBase.Columns.Count; i++) {
			if(TablaBase.Columns[i].Name.Equals(strVersionRow)) {
				continue;
			}
			
			//if(!TablaBase.Columns[i].IsForeignKeyMember) {
				strSwing+=GetDefinicionBorderVisibilidadControlVariablesSwing(TablaBase.Columns[i],"","",false);
			//}
		}			
		*/
		
		return strSwing;
}

/*
public string GetDefinicionBorderVisibilidadControlVariablesSwing(ColumnSchema column,String strIndexName,String strFinalName,bool esParaFk) {			
	String strControl="";
	String sColumnName=GetNombreCompletoColumnaClaseC(column);//column.Name;
	
	strControl="\r\n\r\n\tpublic void set"+GetNombreBorderControlVariablesSwingC(column,"","",false)+"("+GetNombreClaseC(TablaBase.ToString())+"BeanSwingJInternalFrame "+GetNombreClaseObjetoC(TablaBase.ToString())+"BeanSwingJInternalFrame) {";	
	strControl+="\r\n\t\tBorder borderResaltar=Funciones2.getBorderResaltar("+GetNombreClaseObjetoC(TablaBase.ToString())+"BeanSwingJInternalFrame.getParametroGeneralUsuario(),\"COLUMNA\");";
	strControl+="\r\n\t\t"+GetNombreClaseObjetoC(TablaBase.ToString())+"BeanSwingJInternalFrame.jTtoolBar"+GetNombreClaseC(TablaBase.ToString())+".setBorder(borderResaltar);";
	strControl+="\r\n\t\tthis."+GetNombreBorderControlVariablesSwingC(column,"","",false)+"= borderResaltar;";		
	strControl+="\r\n\t}";
	
	strControl+="\r\n\r\n\tpublic Border get"+GetNombreBorderControlVariablesSwingC(column,"","",false)+"() {";	
	strControl+="\r\n\t\treturn this."+GetNombreBorderControlVariablesSwingC(column,"","",false)+";";		
	strControl+="\r\n\t}";
	
	strControl+="\r\n\r\n\tpublic void set"+GetNombreBorderControlVariablesSwingC(column,"","",false)+"(Border borderResaltar) {";	
	strControl+="\r\n\t\tthis."+GetNombreBorderControlVariablesSwingC(column,"","",false)+"= borderResaltar;";		
	strControl+="\r\n\t}";	
	
	strControl+="\r\n\r\n\tpublic Boolean get"+GetNombreVisibilidadControlVariablesSwingC(column,"","",false)+"() {";	
	strControl+="\r\n\t\treturn this."+GetNombreVisibilidadControlVariablesSwingC(column,"","",false)+";";		
	strControl+="\r\n\t}";
	
	strControl+="\r\n\r\n\tpublic void set"+GetNombreVisibilidadControlVariablesSwingC(column,"","",false)+"(Boolean "+GetNombreVisibilidadControlVariablesSwingC(column,"","",false)+") {";	
	strControl+="\r\n\t\tthis."+GetNombreVisibilidadControlVariablesSwingC(column,"","",false)+"= "+GetNombreVisibilidadControlVariablesSwingC(column,"","",false)+";";		
	strControl+="\r\n\t}";
	
	strControl+="\r\n\r\n\tpublic Boolean get"+GetNombreHabilitarControlVariablesSwingC(column,"","",false)+"() {";	
	strControl+="\r\n\t\treturn this."+GetNombreHabilitarControlVariablesSwingC(column,"","",false)+";";		
	strControl+="\r\n\t}";
	
	strControl+="\r\n\r\n\tpublic void set"+GetNombreHabilitarControlVariablesSwingC(column,"","",false)+"(Boolean "+GetNombreHabilitarControlVariablesSwingC(column,"","",false)+") {";	
	strControl+="\r\n\t\tthis."+GetNombreHabilitarControlVariablesSwingC(column,"","",false)+"= "+GetNombreHabilitarControlVariablesSwingC(column,"","",false)+";";		
	strControl+="\r\n\t}";
	
	if(column.IsForeignKeyMember) {
		strControl+="\r\n\r\n\tpublic Boolean get"+GetNombreConCargarControlVariablesSwingC(column,"","",false)+"() {";	
		strControl+="\r\n\t\treturn this."+GetNombreConCargarControlVariablesSwingC(column,"","",false)+";";		
		strControl+="\r\n\t}";
		
		strControl+="\r\n\r\n\tpublic void set"+GetNombreConCargarControlVariablesSwingC(column,"","",false)+"(Boolean "+GetNombreConCargarControlVariablesSwingC(column,"","",false)+") {";	
		strControl+="\r\n\t\tthis."+GetNombreConCargarControlVariablesSwingC(column,"","",false)+"= "+GetNombreConCargarControlVariablesSwingC(column,"","",false)+";";		
		strControl+="\r\n\t}";
	}
	
	return strControl;	
}
*/

public string GetTablaUnoUno() {
	TableSchema tableSchemaFK=null;//GetTableSchemaFromColumnForeignKey(column);
	String sNombre="";
	
	foreach(ColumnSchema column in TablaBase.Columns) {
		tableSchemaFK=GetTableSchemaFromColumnForeignKey(column);
		break;
	}
	
	if(tableSchemaFK!=null) {
		sNombre=tableSchemaFK.Name;
		sNombre=tableSchemaFK.ToString().Replace(tableSchemaFK.Owner+".","");
	} else {
		sNombre="NONE";
	}
	
	return sNombre;
}

public bool TieneClasesRelacionadasDetalles() 
		{
			bool blnTieneRelaciones=false;
			String strTablaClaseRelacionada="";
			strTablaClaseRelacionada+="";
			String strFuncionInit="\r\n\tpublic void Save"+GetNombreClase(TablaBase.ToString())+"RelacionesDetalles(Long idUsuario";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					blnTieneRelaciones=true;
					//strTablaClaseRelacionada+=","+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
					
						blnTieneRelaciones=true;
					//strTablaClaseRelacionada+=","+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
				}
				else
				{
					continue;
				}
			}
			
			
			
			return blnTieneRelaciones; 
		}
		
public String SetClasesRelacionadasDetalles() 
		{
			String strNombreAdicional="";
			String strTablaClaseRelacionada="";
			String strFuncionInit="\r\n\tpublic void Save"+GetNombreClase(TablaBase.ToString())+"RelacionesDetalles(Long idUsuario";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase,false);
										 			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+=","+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+ " "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable);
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
						
					strTablaClaseRelacionada+=","+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
				}
				else
				{
					if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.SecondaryTableSchema)) {
						continue;
					}
						
					strTablaClaseRelacionada+=","+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s";
			
					//continue;
				}
			}
			
			String strTablaClaseRelacionada2="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t\t\t"+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"> "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s=new "+strTypeNewCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+">"+strTypeNewCollectionEnd+"; ";
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+"get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()!=null && Funciones.existeClass(classes,"+ GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class))\r\n\t\t\t\t{";					
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t\t"+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s.add("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+"get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()); ";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t}";
					
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"()!=null && Funciones.existeClass(classes,"+ GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";//&&"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".getClass()!=PersistentBag.class
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t\t\t\ttry{"+GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strClaseDetalleBean+"(" +"new JRBeanCollectionDataSource("+GetNombreClaseC(collectionInfo.SecondaryTableSchema.ToString())+strClaseBean+".Traer"+GetNombreClaseC(collectionInfo.SecondaryTableSchema.ToString())+strClaseBean+"s("+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s,classes)));}catch(Exception e){e.printStackTrace();}";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t}";
											
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{
					if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s()!=null && Funciones.existeClass(classes,"+ GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";//&&"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s.getClass()!=PersistentBag.class
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t\ttry{"+GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s"+strClaseDetalleBean+"(" +"new JRBeanCollectionDataSource("+GetNombreClaseC(collectionInfo.SecondaryTableSchema.ToString())+strClaseBean+".Traer"+GetNombreClaseC(collectionInfo.SecondaryTableSchema.ToString())+strClaseBean+"s("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+"get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s(),classes)));}catch(Exception e){e.printStackTrace();}";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t}";											
				}
				else
				{
					
					if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.SecondaryTableSchema))
						{
							continue;
						}
					
					strTablaClaseRelacionada2+="\r\n\r\n\t\t\t\t\tif("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s()!=null && Funciones.existeClass(classes,"+ GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+".class)) {";//&&"+GetNombreClaseObjetoC(TablaBase.ToString())+"."+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+"s.getClass()!=PersistentBag.class
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t\ttry{"+GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s"+strClaseDetalleBean+"(" +"new JRBeanCollectionDataSource("+GetNombreClaseC(collectionInfo.SecondaryTableSchema.ToString())+strClaseBean+".Traer"+GetNombreClaseC(collectionInfo.SecondaryTableSchema.ToString())+strClaseBean+"s("+GetNombreClaseObjetoC(TablaBase.ToString())+"."+"get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s(),classes)));}catch(Exception e){e.printStackTrace();}";
					strTablaClaseRelacionada2+="\r\n\t\t\t\t\t}";		
					//continue;
				}
				
			}
			
			
			return strTablaClaseRelacionada2; 
		}
		
public String GetClassClasesRelacionadasYForeigKeys() 
		{
			String strTablaClaseRelacionada=string.Empty;
										
										
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				if(columnSchema.IsForeignKeyMember)
				{
					strTablaClaseRelacionada+="\t\tclasses.add("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ ".class);\r\n";
				
				}
			}
			
								System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			
			TableSchema tablaRelacionadaObjetivo;
				
			
				foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
				{
								
					if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
					{
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
					}	
					else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
					{
						
						tablaRelacionadaObjetivo=collectionInfo.SecondaryTableSchema;
						
						if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
					}
					else
					{
						continue;
					}
						
					if(!VerificarTablaRelacionFromPropertiesC(tablaRelacionadaObjetivo))
					{
						continue;
					}
					
					strTablaClaseRelacionada+="\t\tclasses.add("+GetNombreClaseC(tablaRelacionadaObjetivo.ToString())+ ".class);\r\n";
					
				}
				
			return strTablaClaseRelacionada; 
		}

		 

public string GetSetVariablesToObjetoLogicActualizar(TableSchema tableSchema)
{
	String strTipo="";
	String strPrefijo="";
	String strColumna="";	
	String strIfElse="";
	
	
	String strReturn="";
	ColumnSchema column=null;
	//Trace.WriteLine("H");
	bool esReporte=GetEsReporteFromPropertiesC(tableSchema);
	String strCommentReporte="";
	
	if(esReporte) {
		strCommentReporte="//";			
	}
				
	if(!blnNoStandardTableFromProperties) {	
		//Trace.WriteLine("H1");
		strReturn+="\r\n\t\t\t\t\t//PUEDE REPETIRSE PERO NO IMPORTA";
		for (int i = 0; i < TablaBase.Columns.Count; i++){ 
			column=TablaBase.Columns[i];
			
			//Trace.WriteLine("H11");
			strTipo=GetTipoColumnaClaseC(column);	
			//Trace.WriteLine("H12");
			strPrefijo=GetPrefijoTipoC(column);	
			strColumna=GetNombreColumnaClaseC(column)+GetNombreClaseRelacionadaFromColumn(column,true);	
			strIfElse="\r\nif(request.getParameter(\""+GetNameControlHtml(column) +"\"+i.tToString())== null||request.getParameter(\""+GetNameControlHtml(column) + "\"+i.toString())==\"\")\r\n{\r\n";
			strIfElse+=strPrefijo+strColumna+"=null;\r\n}\r\nelse\r\n{\r\n";	
	
			
			
			if(column.IsForeignKeyMember) {
				
				
				
				//strReturn+=GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".setField_"+strPrefijo+ strColumna +"("+GetNombreClaseObjetoC(TablaBase.ToString())+".getField_"+strPrefijo+ strColumna +"()"+");\r\n\t\t\t\t";
				//SE LO ADICIONA AQUI
				strReturn+="\r\n\t\t\t\t\t"+strCommentReporte+GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+strField_+strPrefijo+ strColumna +strClaseDetalleBean+"("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"Descripcion("+GetNombreClaseObjetoC(TablaBase.ToString()) +".get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"())"+");";
				strReturn+="\r\n\t\t\t\t\t"+strCommentReporte+GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+strDescripcion+"("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"Descripcion("+GetNombreClaseObjetoC(TablaBase.ToString()) +".get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreCompletoClaseRelacionadaFromColumn(column))+"())"+");";
				//Trace.WriteLine(strReturn);
				
			}
		}
		
		
	} else {
		//Trace.WriteLine("H2");
		ArrayList arrayListForeignKeys =GetArrayListForeignKeys(TablaBase);
		MemberColumnSchemaCollection memberColumnSchemaCollectionFK=new MemberColumnSchemaCollection();
		
		foreach(TableSchema tableSchemaForeignKey in arrayListForeignKeys) {		
			memberColumnSchemaCollectionFK=GetMemberColumnSchemaForeignKeysC(TablaBase,tableSchemaForeignKey);
			strReturn+=GetColumnsForeignKeysReporteDescripcionC(TablaBase,tableSchemaForeignKey,memberColumnSchemaCollectionFK);
			
    		//strReturn+=GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".setField_"+strPrefijo+ strColumna +strClaseDetalleBean+"("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC(tableSchemaForeignKey.ToString())+"Descripcion("+GetNombreClaseObjetoC(TablaBase.ToString()) +".get"+GetPrefijoRelacionC() +GetNombreClaseC(tableSchemaForeignKey.ToString())+"())"+");";												
		}
	}
	//Trace.WriteLine(strReturn);
	return  strReturn;
}

public string GetSetVariablesToObjetoLogicActualizar(ColumnSchema column)
{	
	//Trace.WriteLine(column.Name);
	String strTipo=GetTipoColumnaClaseC(column);	
	String strPrefijo=GetPrefijoTipoC(column);	
	String strColumna=GetNombreColumnaClaseC(column);	
	String strIfElse="\r\nif(request.getParameter(\""+GetNameControlHtml(column) +"\"+i.tToString())== null||request.getParameter(\""+GetNameControlHtml(column) + "\"+i.toString())==\"\")\r\n{\r\n";
	strIfElse+=strPrefijo+strColumna+"=null;\r\n}\r\nelse\r\n{\r\n";	
	
	String strReturn="";
	
	if(column.Name.Equals(strIsActive)|| column.Name.Equals(strIsExpired))
	{
			return string.Empty;
	}
		
	if(column.Name.Equals(strId))
	{
		return  GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+strIdGetSet+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strIdGetSet+"()"+");";
	}
	if(column.Name.Equals(strVersionRow))
	{
		return  GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+strVersionRowGetSet+"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strVersionRowGetSet+"()"+");";
	}
	
	if(column.DataType==DbType.Boolean)
	{
		 strReturn=GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+strField_+strPrefijo+ strColumna +"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strField_+strPrefijo+ strColumna +"()"+");\r\n\t\t\t\t\t";
		 strReturn+=GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+strField_+strPrefijo+ strColumna +strClaseDetalleBean+"("+GetNombreClase(TablaBase.ToString())+"ConstantesFunciones.get"+ strColumna +"Descripcion("+GetNombreClaseObjetoC(TablaBase.ToString())+")"+");";
		
		return  strReturn;
	}
	
	if(column.IsForeignKeyMember)
	{
		 strReturn=GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+strField_+strPrefijo+ strColumna +"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strField_+strPrefijo+ strColumna +"()"+");";
		//SE LO ADICIONA EN OTRO LADO 
		//strReturn+=GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".setField_"+strPrefijo+ strColumna +strClaseDetalleBean+"("+GetNombreClaseC(TablaBase.ToString())+"ConstantesFunciones.get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"Descripcion("+GetNombreClaseObjetoC(TablaBase.ToString()) +".get"+GetPrefijoRelacionC() +GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(column))+"())"+");";
		
		return  strReturn;
	}
	
	return  GetNombreClaseObjetoC(TablaBase.ToString())+strClaseBean.ToLower()+".set"+strField_+strPrefijo+ strColumna +"("+GetNombreClaseObjetoC(TablaBase.ToString())+".get"+strField_+strPrefijo+ strColumna +"()"+");";
}

public String GetNombreTabla() 
		{
			String strNombreTabla=string.Empty;
										 			
			strNombreTabla=GetNombreTableFromProperties(TablaBase);
								
			return strNombreTabla; 
		}
		
public String GetTablasClasesRelacionadasForeigKeys() 
		{
			String strTablaClaseRelacionada=string.Empty;
										 			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
					
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					strTablaClaseRelacionada+="\r\n\t"+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+" "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+";";
				
				}
			}
								
			return strTablaClaseRelacionada; 
		}
		
public String GetFuncionesTablasClasesRelacionadasForeigKeys() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n\tpublic  void  set"+GetPrefijoRelacionC();
			
			String strEndFuncion="\r\n\t\t}\r\n\t\tcatch(Exception ex)\r\n\t\t{\r\n\t\t\t;\r\n\t\t}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+ "("+GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+" "+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+")\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n";
					strTablaClaseRelacionada+="\t\t\t"+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"="+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+";";
					strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n\r\n";
			
				}
				
			}
						
			return strFuncion; 
		}

public String GetFuncionesGetTablasClasesRelacionadasForeigKeys() 
		{
			String strFuncion="";
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\tpublic ";// void  getTR[";
			
			String strEndFuncion="\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
										 			
			foreach(ColumnSchema columnSchema in TablaBase.Columns)
			{
				
				
				if(columnSchema.IsForeignKeyMember)
				{
					if(ExisteTablaEnTablasRelacionadasC(TablaBase,GetNombreClaseRelacionadaFromColumn(columnSchema),columnSchema))
					{
					continue;
					}
					
						strInitFuncion="\r\n\tpublic ";
					
					
						strInitFuncion+=GetNombreClaseC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+" get"+GetPrefijoRelacionC()+GetNombreClase("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+"()\r\n\t{\r\n";
						strTablaClaseRelacionada="\t\treturn "+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+GetNombreClaseRelacionadaFromColumn(columnSchema))+";\r\n";
					
			    		strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n";
				}
			}
								
			return strFuncion; 
		}

public String GetFuncionesGetTablasClasesRelacionadas() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="public ";// void  getTR_";
			
			String strEndFuncion="\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				
				//NO FUNCIONA CON DESORDEN RELACIONES
				/*
				if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.PrimaryTable)) {
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					//continue;
				} else {
					strNombreAdicional="";
					arrayListRelaciones.Add(collectionInfo.PrimaryTable);
				}
				*/
				
				strInitFuncion="\r\n\tpublic ";
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strInitFuncion+=/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/"Object get"+GetPrefijoRelacionC()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strClaseDetalleBean+"()\r\n\t{";
					strTablaClaseRelacionada="\r\n\t\treturn "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strClaseDetalleBean+";\r\n";
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{						
						if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
					strInitFuncion+=/*""+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/"Object get"+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s"+strClaseDetalleBean+"() {";
					strTablaClaseRelacionada="\r\n\t\treturn "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s"+strClaseDetalleBean+";\r\n";
				}
				else
				{
						if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.SecondaryTableSchema))
						{
							continue;
						}
					strInitFuncion+=/*""+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/"Object get"+GetPrefijoRelacionC()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s"+strClaseDetalleBean+"() {";
					strTablaClaseRelacionada="\r\n\t\treturn "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+ "s"+strClaseDetalleBean+";\r\n";
			
					//continue;
				}
				
			strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n";
			}
								
			return strFuncion; 
		}
		
public String GetFuncionesTablasClasesRelacionadas() 
		{
			String strFuncion=string.Empty;
			String strTablaClaseRelacionada=string.Empty;
			String strInitFuncion="\r\n\tpublic  void  set"+GetPrefijoRelacionC();
			
			String strEndFuncion="\r\n\t\t} catch(Exception ex) {\r\n\t\t\t;\r\n\t\t}\r\n\t}";
			
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				
				//NO FUNCIONA CON DESORDEN DE CLASES
				/*
				if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.PrimaryTable)) {
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					//continue;
				} else {
					strNombreAdicional="";
					arrayListRelaciones.Add(collectionInfo.PrimaryTable);
				}
				*/
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada=GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strClaseDetalleBean+ "("+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/"Object "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+") {\r\n\ttry {\r\n";
					strTablaClaseRelacionada+="\t\t\tthis."+GetPrefijoRelacionC().ToLower()+GetNombreClase("dbo."+collectionInfo.SecondaryTable)+strClaseDetalleBean+"="+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+";";
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{						
						if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
					strTablaClaseRelacionada=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s"+strClaseDetalleBean+"("+/*""+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/"Object"+" "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s) {\r\n\t\ttry {\r\n";
					strTablaClaseRelacionada+="\t\t\tthis."+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s"+strClaseDetalleBean+"="+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s;";
			
				}
				else
				{
					if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.SecondaryTableSchema))
						{
							continue;
						}
					strTablaClaseRelacionada=GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s"+strClaseDetalleBean+"("+/*""+strTypeCollection+"<"+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/"Object"+" "+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s) {\r\n\t\ttry {\r\n";
					strTablaClaseRelacionada+="\t\t\tthis."+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+"s"+strClaseDetalleBean+"="+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+"s;";
			
					//continue;
				}
				
			strFuncion+=strInitFuncion+	strTablaClaseRelacionada+strEndFuncion+"\r\n";
			}
								
			return strFuncion; 
		}
		
public String GetTablasClasesRelacionadas() 
		{
			String strTablaClaseRelacionada=string.Empty;
			System.Collections.Hashtable tablasRelacionadas=GetTablasRelacionadas(TablaBase);
			ArrayList arrayListRelaciones=new ArrayList();
			String strNombreAdicional="";
			
			foreach(CollectionInfo collectionInfo in tablasRelacionadas.Values)
			{
				strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
				
				//NO FUNCIONA CON DESORDEN RELACIONES
				/*
				if(ExisteTablasClasesYaRelacionadas(arrayListRelaciones,collectionInfo.PrimaryTable)) {
					strNombreAdicional=GetNombreAdicionalClaseRelacionadaFromRelation(collectionInfo);
					//continue;
				} else {
					strNombreAdicional="";
					arrayListRelaciones.Add(collectionInfo.PrimaryTable);
				}
				*/
				
				if(collectionInfo.CollectionRelationshipType==RelationshipType.OneToOne)
				{
					strTablaClaseRelacionada+="\r\n\t"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+*/"Object "+GetPrefijoRelacionC().ToLower()+GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)+strClaseDetalleBean+";";
				}
				else if(collectionInfo.CollectionRelationshipType==RelationshipType.ManyToMany)
				{						
						if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.JunctionTableSchema))
						{
							continue;
						}
						
					strTablaClaseRelacionada+="\r\n\t"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)*/"Object "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+ "s"+strClaseDetalleBean+";";
				}
				else
				{
					if(!VerificarTablaRelacionFromPropertiesC(collectionInfo.SecondaryTableSchema))	{
							continue;
					}
						
					strTablaClaseRelacionada+="\r\n\t"+/*GetNombreClaseC("dbo."+collectionInfo.SecondaryTable)*/"Object "+GetPrefijoRelacionC().ToLower()+GetNombreClaseObjetoC("dbo."+collectionInfo.SecondaryTable)+strNombreAdicional+ "s"+strClaseDetalleBean+";";
		
					//continue;
				}
			}
								
			return strTablaClaseRelacionada; 
		}
		
public string GetValueDefaultParameterClase(ColumnSchema column)
{
	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	
	if(!(column.DataType==DbType.Boolean||column.IsForeignKeyMember))
	{
		return"";
	}
	
	string strPrefijo=String.Empty;
	string strValor=String.Empty;
	
	string strPrefijoTabla=GetPrefijoTablaC().ToLower();
	string strPrefijoTipo =GetPrefijoTipoC(column);

	strPrefijo=strPrefijoTabla+strPrefijoTipo;
	
	switch(column.Name)
	{
		case strIsActive:
		strValor="";
		break;
		
		case strIsExpired:
		strValor="";
		break;
		
		case strVersionRow:
		strValor="";
		break;
		
		default:
		strValor=GetDefaultValueColumna(column);
		break;
	}
	
	
	
	string strNombre = GetNombreColumnaClaseC(column);
	strPrefijo+=strNombre;
	strValor="\"\"";
			
	return strPrefijo+strClaseDetalleBean+"="+strValor+";";
}

public string GetParameterNoLastIndex(TableSchema table)
{		
	string strNombre =String.Empty; 
	int count=0;	
		
    for (int i = 0; i < table.Columns.Count; i++){ 	
    strNombre=table.Columns[i].Name;
	switch (strNombre)
	{
		case strVersionRow:
		{
			break;
		}
		
		default:
		{
			count++;
			break;
		}

	}
		 } 
		
	return count.ToString();
}

public string GetParameterLastIndex(TableSchema table)
{		
	string strNombre =String.Empty; 
	int count=0;	
		
    for (int i = 0; i < table.Columns.Count; i++){ 	
   
			count++;
			

		 } 
		
	return count.ToString();
}

public string GetParameterClase(ColumnSchema column)
{
	
	if(/*column.Name==strId||*/column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	
	
	if(!(column.DataType==DbType.Boolean||column.IsForeignKeyMember))
	{
		return"";
	}
	
	
	
	
	string strPrefijo=String.Empty;
	string strPrefijoTabla=GetPrefijoTablaC().ToLower();
	string strPrefijoTipo =GetPrefijoTipoC(column);

	strPrefijo=strPrefijoTabla+strPrefijoTipo;
	
	string strNombre = GetNombreColumnaClaseC(column)+GetNombreClaseRelacionadaFromColumn(column,true);
	strPrefijo+=strNombre;
		
	string param =  GetTipoColumnaClaseC(column);
		   param =strStringTipo;
	
	//Trace.WriteLine(param+" "+strPrefijo+strClaseDetalleBean+";");
	
	return param+" "+strPrefijo+strClaseDetalleBean+";";
}

public string GetNombreCampoTabla(ColumnSchema column)
{
	string strPrefijo = "\r\n\tpublic static String getColumnName"+column.Name+"()";
	strPrefijo += "\r\n\t{\r\n\t\treturn \""+ column.Name+"\";\r\n\t}";
	
	switch (column.Name)
	{
		case strVersionRow:
		{
			strPrefijo=String.Empty;
			break;
		}	
		case strIsExpired:
		{
			strPrefijo=String.Empty;
			break;
		}	
		case strIsActive:
		{
			strPrefijo=String.Empty;
			break;
		}	
		case strId:
		{
			strPrefijo=String.Empty;
			break;
		}
	}
	
	return strPrefijo;
}

public string GetParameterClaseMethod(ColumnSchema column)
{			  
	if(/*column.Name==strId||*/column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	
	if(!(column.DataType==DbType.Boolean||column.IsForeignKeyMember))
	{
		return"";
	}
	
	string strPrefijo=String.Empty;
	string strPrefijoTabla=GetPrefijoTablaC();
	string strPrefijoFuncion="\r\n\tpublic ";
	string strPrefijoTipo = GetPrefijoTipoC(column);

	strPrefijo=strPrefijoFuncion;	
	string strNombre = GetNombreColumnaClaseC(column)+GetNombreClaseRelacionadaFromColumn(column,true);		
	string param =  GetTipoColumnaClaseC(column);
		   param =strStringTipo;
		
	strPrefijo+=param+" get"+strPrefijoTabla+strPrefijoTipo+strNombre+strClaseDetalleBean+"() {";
	strPrefijo+="\r\n\t\treturn "+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strClaseDetalleBean+";\r\n\t}";

	return strPrefijo;
}

public string GetParameterClaseSetMethod(ColumnSchema column)
{			  
	if(/*column.Name==strId||*/column.Name==strIsActive||column.Name==strIsExpired||column.Name==strVersionRow)
	{
		return"";
	}
	
	if(!(column.DataType==DbType.Boolean||column.IsForeignKeyMember))
	{
		return"";
	}
	
	string strPrefijo=String.Empty;
	string strPrefijoTabla=GetPrefijoTablaC();
	string strPrefijoFuncion="\r\n\tpublic void set";
	string strPrefijoTipo = GetPrefijoTipoC(column);
	
	strPrefijo=strPrefijoFuncion;
	
	string strNombre = GetNombreColumnaClaseC(column)+GetNombreClaseRelacionadaFromColumn(column,true);
		
	string param =  GetTipoColumnaClaseC(column);
		   param =strStringTipo;
		
	if(column.AllowDBNull)
	{
		strPrefijo+=strPrefijoTabla+strPrefijoTipo+strNombre+strClaseDetalleBean+"("+param+ " new"+strPrefijoTabla+strPrefijoTipo+strNombre +strClaseDetalleBean+") {";
		strPrefijo+="\r\n\t\tthis."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strClaseDetalleBean+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+strClaseDetalleBean+";\r\n\t}";
	}
	else
	{
		strPrefijo+=strPrefijoTabla+strPrefijoTipo+strNombre+strClaseDetalleBean+"("+param+ " new"+strPrefijoTabla+strPrefijoTipo+strNombre +strClaseDetalleBean+")throws Exception {";
		strPrefijo+="\r\n\t\ttry {\r\n\t\t\tthis."+strPrefijoTabla.ToLower()+strPrefijoTipo+strNombre+strClaseDetalleBean+"=new"+strPrefijoTabla+strPrefijoTipo+strNombre+strClaseDetalleBean+";\r\n\t\t} catch(Exception ex) {\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\t}";
	}
	
	
	return strPrefijo;
}

public string GetSqlParameterInsert(ColumnSchema column)
{
	
	String param=GetNombreColumnFromProperties(column);
	
	
	
	param+="=?";
	
	switch (column.Name)
	{
		case strVersionRow:
		{
			param=GetNombreColumnFromProperties(column);
			param+="=CURRENT_TIMESTAMP";
			break;
		}	
		/*case "isActive":
		{
			param+="=true";
			break;
		}	
		case "isExpired":
		{
			param+="=false";
			break;
		}	
		*/
		case strId:
		{
			param="";
			break;
		}
		
	}
	
	return param;
}

public string GetSqlParameterUpdate(ColumnSchema column)
{
	
	String param= GetNombreColumnFromProperties(column);
	
	param+="=?";
	
	switch (column.Name)
	{
		case strVersionRow:
		{
			param= GetNombreColumnFromProperties(column);
			param+="=CURRENT_TIMESTAMP";
			break;
		}	
		case strId:
		{
			param=String.Empty;
			break;
		}
	}
	
	return param;
}

public string GetSqlParameterSelect(ColumnSchema column)
{
	
	String param= GetNombreColumnFromProperties(column);
	
	if(column.Name==strId||column.Name==strIsActive||column.Name==strIsExpired|| column.Name==strVersionRow)
	{
	param=Schema+"."+TablaBase.ToString().Replace("dbo.","")+"."+column.Name;
	}
	
	return param;
}

public string GetNombreClase(string strTablaBase)
{	
		return GetNombreClaseC(strTablaBase);
}

public string GetCampoTabla(ColumnSchema column)
{
	string strPrefijo = column.Name;
	return strPrefijo;
	}

public static string GetNombreColumnaClase(ColumnSchema column)
{
	return GetNombreColumnaClaseC(column);
}

public static string GetTipoColumnaClase(ColumnSchema column)
	{
		return GetTipoColumnaClaseC(column);
	}
	
public string GetTipoColumnaClaseEnum(ColumnSchema column)
	{
		return GetTipoColumnaClaseEnumC(column);
	}
	
public static string GetNombreCompletoColumnaClase(ColumnSchema column)
{
	return GetNombreCompletoColumnaClaseC(column);
	}
</script>
<%=GetByDanLicence()%>
package <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackagePresentation%>.<%=strPackageReporte%>.<%=strPackageSource%><%=GetEsPaqueteReporteC(TablaBase)%>;

<%if(!EsSwing){%>
import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackagePresentation%>.<%=strPackageWeb%>.<%=strPackageJSF%>.<%=strPackageRequestBean%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClase(TablaBase.ToString())%><%=strPrefijoJSFFaces%>;
<%}else{%>
import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackagePresentation%>.<%=strPackageSwing%>.<%=strPackageJInternalFrames%><%=GetEsPaqueteReporteC(TablaBase)%>.<%=GetNombreClase(TablaBase.ToString())%><%=strSufijoVersion%><%=strPrefijoBeanSwing%>JInternalFrame;
<%}%>

import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageBusiness%>.<%=strPackageEntities%>.Classe;

<%if(blnConSwt){%>
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.presentation.desktop.swing.*;
<%}%>

import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageUtils%>.Funciones;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageUtils%>.Funciones2;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageUtils%>.Constantes;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageUtils%>.Constantes2;
import <%=Empresa%>.<%=strPackageFramework%>.<%= Package%>.<%=strPackageUtils%>.DeepLoadType;
//import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%>.<%=GetEsTablaAuxiliarReporteC(TablaBase)%>ConstantesFunciones;
import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageUtils%><%=GetEsPaqueteReporteC(TablaBase)%>.*;
import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageEntities%>.*;<%=GetEsImportPaqueteReporteParaEsReporteC(TablaBase,"import "+Empresa+"."+ Package+"."+Module+strPackageBusiness+"."+strPackageEntities)%>
//<%if(TieneForeignKeyODatoBooleanC(TablaBase)){%>import <%=Empresa%>.<%= Package%>.<%= Module%><%= strPackageBusiness%>.<%= strPackageLogic%>.*;<% } %>
import <%=Empresa%>.<%= Package%>.<%= Module%><%=strPackagePresentation%>.<%=strPackageReporte%>.<%=strPackageSource%>.*;

<%=GetEsquemasImportClasesRelacionadas("import "+Empresa+"."+Package,strPackageBusiness+"."+strPackageEntities+/*GetEsPaqueteReporteC(TablaBase)+*/".*;")%>

<%if(!GeneracionPorModuloUnico){%>
<%=GetEsquemasImportClasesRelacionadas("import "+Empresa+"."+Package,strPackagePresentation+"."+strPackageReporte+"."+strPackageSource+/*GetEsPaqueteReporteC(TablaBase)+*/".*;")%>
<%}%>

<%=strPackageEntitiesExtra%>
<%=strPackageReporteSourceExtra%>

import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.Date;
import java.util.HashSet;

import java.io.File;

import java.sql.Time;
import java.sql.Timestamp;
import javax.swing.border.Border;

import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

//import org.hibernate.collection.PersistentBag;

<%if(TieneClasesRelacionadasDetalles()){%>import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;<% } %>

@SuppressWarnings("unused")
final public class <%=GetNombreClase(TablaBase.ToString())%><%=strSufijoVersion%><%=strClaseBean%> <%=GetExtendClase()%> {
	
	static final long serialVersionUID=0;	
	
	<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones <%=GetNombreClaseObjetoC(TablaBase.ToString())%>ConstantesFunciones;
	
	<%if(blnConAdditional) {%>
	
	protected <%=GetNombreClaseC(TablaBase.ToString())%><%=strClaseBean%>Additional <%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean%>Additional=null;
	
	public <%=GetNombreClaseC(TablaBase.ToString())%><%=strClaseBean%>Additional get<%=GetNombreClase(TablaBase.ToString())%><%=strClaseBean%>Additional() {
		return this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean%>Additional;
	}
	
	public void set<%=GetNombreClase(TablaBase.ToString())%><%=strClaseBean%>Additional(<%=GetNombreClaseC(TablaBase.ToString())%><%=strClaseBean%>Additional <%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean%>Additional) {
		try {
			this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean%>Additional=<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean%>Additional;
		} catch(Exception e) {
			;
		}
	}
	
	<%}%>
	
	<%= GetTablasClasesRelacionadas() %>
	
	<%= GetFuncionesGetTablasClasesRelacionadas() %>
	
	<%= GetFuncionesTablasClasesRelacionadas() %>
	
	<%//= GetFuncionesGetTablasClasesRelacionadasC(false,false,TablaBase) %>
	
	<%//= GetFuncionesTablasClasesRelacionadasC(TablaBase) %>
	
	<%for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||/*TablaBase.Columns[i].Name==strId||*/TablaBase.Columns[i].Name==strVersionRow){continue; } %>
	<%= GetParameterClase(TablaBase.Columns[i]) %>
	<% } %>
	
	public <%=GetNombreClase(TablaBase.ToString())%><%=strSufijoVersion%><%=strClaseBean%> () throws Exception {				
		this(new <%=GetNombreClaseC(TablaBase.ToString())%><%=strSufijoVersion%>ConstantesFunciones());
	}
	
	public <%=GetNombreClase(TablaBase.ToString())%><%=strSufijoVersion%><%=strClaseBean%> (<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones <%=GetNombreClaseObjetoC(TablaBase.ToString())%>ConstantesFunciones) throws Exception {
		this.<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ConstantesFunciones=<%=GetNombreClaseObjetoC(TablaBase.ToString())%>ConstantesFunciones;
		
		<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
		<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow){continue; } %>
 		<%= GetValueDefaultParameterClase(TablaBase.Columns[i]) %>
		<% } %>	
		
		this.id=0L;
		this.versionRow=new Date();
		
		<%if(blnConFuncionalidadLogicVersion1) {%>
		<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
		<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||TablaBase.Columns[i].Name==strId||TablaBase.Columns[i].Name==strVersionRow/*|| GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])*/){continue; } %>
 		<%= GetValueDefaultParameterClaseC(TablaBase.Columns[i],"") %>
		<% } %>
		<% } %>
    } 
	
	     
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||/*TablaBase.Columns[i].Name==strId||*/TablaBase.Columns[i].Name==strVersionRow){continue; } %>
    <%= GetParameterClaseMethod(TablaBase.Columns[i]) %>
	<% } %>
	
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||/*TablaBase.Columns[i].Name==strId||*/TablaBase.Columns[i].Name==strVersionRow){continue; } %>
    <%= GetParameterClaseSetMethod(TablaBase.Columns[i]) %>
	<% } %>
		
	public static <%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%><%=strClaseBean%>> Traer<%=GetNombreClase(TablaBase.ToString())%><%=strClaseBean%>s(<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>s,ArrayList<Classe> classes)throws Exception {
		<%=strTypeCollection%><<%=GetNombreClase(TablaBase.ToString())%><%=strClaseBean%>> <%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>s=new <%=strTypeNewCollection%><<%=GetNombreClase(TablaBase.ToString())%><%=strClaseBean%>><%=strTypeNewCollectionEnd%>;	
		<%=GetNombreClase(TablaBase.ToString())%><%=strClaseBean%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>;
				
		try {
			for(<%=GetNombreClase(TablaBase.ToString())%> <%=GetNombreClaseObjetoC(TablaBase.ToString())%>:<%=GetNombreClaseObjetoC(TablaBase.ToString())%>s) {
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>=new <%=GetNombreClase(TablaBase.ToString())%><%=strClaseBean%>();
					
				if(!(<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones.S_TIPOREPORTE_EXTRA.equals(Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO)
						  || <%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones.S_TIPOREPORTE_EXTRA.equals(Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO)) 
					<%if(blnEsReporteParaGrupoReporte) {%>
					|| <%=GetNombreClase(TablaBase.ToString())%><%=strClaseBean%>.S_TIPOREPORTE_EXTRA.equals(Constantes2.S_REPORTE_EXTRA_GROUP_REPORTE)
					<%}%>
				   ) {
					
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>.setsDetalleGeneralEntityReporte(<%=GetNombreClase(TablaBase.ToString())%>ConstantesFunciones.get<%=GetNombreClase(TablaBase.ToString())%>Descripcion(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>));
					
					<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
					<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired|| GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])){continue; } %>
					<%= GetSetVariablesToObjetoLogicActualizar(TablaBase.Columns[i]) %>	
					<% } %>
					
					<%= GetSetVariablesToObjetoLogicActualizar(TablaBase) %>	
					
					<%if(!GeneracionPorModuloUnico){%>
					<%=SetClasesRelacionadasDetalles() %>	
					<%}%>
					
				} else  {
							
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>.setsDetalleGeneralEntityReporte(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getsDetalleGeneralEntityReporte());
					
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>.setsDescripcionGeneralEntityReporte1(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getsDescripcionGeneralEntityReporte1());
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>.setsDescripcionGeneralEntityReporte2(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getsDescripcionGeneralEntityReporte2());
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>.setsDescripcionGeneralEntityReporte3(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getsDescripcionGeneralEntityReporte3());
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>.setsDescripcionGeneralEntityReporte4(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getsDescripcionGeneralEntityReporte4());
					<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>.setsDescripcionGeneralEntityReporte5(<%=GetNombreClaseObjetoC(TablaBase.ToString())%>.getsDescripcionGeneralEntityReporte5());
					
					<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
					<%if(GenerarParaGroupGenericoVerificacionNegacionC(TablaBase.Columns[i],true) || TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired|| GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])){continue; } %>
					<%= GetSetVariablesToObjetoLogicActualizar(TablaBase.Columns[i]) %>	
					<% } %>
				}
				
				<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>s.add(<%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>);
			}
		} catch(Exception ex) {
			throw ex;
		}
		
		return <%=GetNombreClaseObjetoC(TablaBase.ToString())%><%=strClaseBean.ToLower()%>s;
    }
	
	<%if(blnConFuncionalidadLogicVersion1) {%>
	//VALORES DEFECTO
	public Long id;
	protected Date versionRow;	
	<%for (int i = 0; i < TablaBase.Columns.Count; i++){ %>
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||(TablaBase.Columns[i].Name==strId && !TablaBase.Columns[i].IsForeignKeyMember)||TablaBase.Columns[i].Name==strVersionRow/* || GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])*/){continue; } %>
	<%= GetParameterClaseC(TablaBase.Columns[i],false,false,"",false,true) %>
	<% } %>
	
	public Long getId() {
		return this.id;
	}
	
	public void setId(Long newId) {
		this.id=newId;
	}
	
	public Date getVersionRow(){
		return this.versionRow;
	}
	
	public void setVersionRow(Date newVersionRow){
		this.versionRow=newVersionRow;
	}
	
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||(TablaBase.Columns[i].Name==strId&& !TablaBase.Columns[i].IsForeignKeyMember)||TablaBase.Columns[i].Name==strVersionRow/*|| GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])*/){continue; } %>
    <%= GetParameterClaseMethodC(TablaBase.Columns[i],false,false,false,"") %>
	<% } %>
	
	<% for (int i = 0; i < TablaBase.Columns.Count; i++){ %>	
	<%if(TablaBase.Columns[i].Name==strIsActive||TablaBase.Columns[i].Name==strIsExpired||(TablaBase.Columns[i].Name==strId && !TablaBase.Columns[i].IsForeignKeyMember)||TablaBase.Columns[i].Name==strVersionRow/*|| GetEsReporteParametroFromPropertiesC(TablaBase.Columns[i])*/){continue; } %>
    <%= GetParameterClaseSetMethodC(TablaBase.Columns[i],false,"") %>
	<% } %>
	
	<% } %>			
}
